
pool:
  vmImage: "ubuntu-latest"
  
steps:     
  - pwsh:
      $errorsTotal = 0
      $warningsTotal = 0

      # Get the list of files for the given PR
      $currentLocation = Get-Location
      $files = git diff HEAD~1 --name-only
      $apiPropertiesFiles = $files | where {$_ -match '.+?apiProperties.json$'}

      $Headers = @{
        Authorization = $env:token
      }

      $suppressWarnings = false
      
      foreach ($file in $apiPropertiesFiles) { 
        $currentFilePath = Join-Path $currentLocation ($file.Replace('/', '\'))
        $previousCommitHash = git log --max-count=1 --skip=1 --first-parent --pretty=format:%H $currentFilePath

        $newFileContent = Get-Content $file -Raw

        # Validate apiProperties json
        $apiPropertiesValidatorUri = "$($env:apiPropertiesValidator)&suppressWarnings=$suppressWarnings"
        $results = Invoke-RestMethod -Uri $apiPropertiesValidatorUri -Headers $Headers -Method Post -ContentType "application/json; charset=utf-8" -Body @($newFileContent)
                                                                                                                                                             
        $errors = $results | Where-Object { $_.level -EQ "Critical" -OR $_.Level -EQ "Error" }
        $warnings = $results | Where-Object { $_.level -EQ "Warning" }
        
        if ($errors) {
          $errorsTotal += $errors.Count
          $errors | foreach { Write-Host "##vso[task.logissue type=error;]$_" }
        } # If Api Properties Error
        
        if ($warnings -AND -NOT $suppressWarnings) {
          $warningsTotal += $warnings.Count
          $warnings | foreach { Write-Host "##vso[task.logissue type=warning;sourcepath=$file;]$_" }
        } # If Api Properties Warnings
    env:
      apiPropertiesValidator: "$(apiPropertiesValidatorUrl)"
      token: $(token)
