{
  "swagger": "2.0",
  "info": {
    "version": "v1.0",
    "title": "Encodian",
    "description": "Enhanced document format conversion, OCR, watermarking, data extraction, redaction + much more. ",
    "termsOfService": "https://support.encodian.com/hc/en-gb/articles/360010642813-Terms-of-Service",
    "contact": {
      "name": "Encodian Support",
      "url": "https://support.encodian.com",
      "email": "support@encodian.com"
    },
    "license": {
      "name": "Requires an 'Encodian for Power Automate' subscription",
      "url": "https://www.encodian.com/products/encodian-for-microsoft-power-automate/"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.encodian.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://support.encodian.com/hc/en-gb/articles/360010885513-Privacy-Policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Content and Files;Collaboration"
    }
  ],	
  "host": "api.apps-encodian.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/api/v1/Core/BasicConversion": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "BasicConversion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoBasicConversion",
            "schema": {
              "$ref": "#/definitions/DtoBasicConversion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseBasicConversion"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseBasicConversion"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseBasicConversion"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert to PDF",
        "description": "Convert a document to PDF or PDF/A format - https://support.encodian.com/hc/en-gb/articles/360011123574-Convert-to-PDF"
      }
    },
    "/api/v1/Core/ConvertToPdfA": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ConvertToPdfA",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoConvertToPdfA",
            "schema": {
              "$ref": "#/definitions/DtoConvertToPdfA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertToPdfA"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertToPdfA"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertToPdfA"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert PDF to PDFA",
        "description": "Convert a PDF document to PDF/A format - https://support.encodian.com/hc/en-gb/articles/360010578413-Convert-PDF-to-PDFA"
      }
    },
    "/api/v1/Core/SecurePdfDocument": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "SecurePdfDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoSecurePdf",
            "schema": {
              "$ref": "#/definitions/DtoSecurePdf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseSecurePdf"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseSecurePdf"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseSecurePdf"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Secure PDF Document",
        "description": "Encrypt and protect a PDF document - https://support.encodian.com/hc/en-gb/articles/360011330134-Secure-PDF-Document"
      }
    },
    "/api/v1/Core/SetPdfPrivileges": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "SetPdfPrivileges",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoSetPdfPrivileges",
            "schema": {
              "$ref": "#/definitions/DtoSetPdfPrivileges"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseSecurePdf"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseSecurePdf"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseSecurePdf"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Set PDF Document Privileges",
        "description": "Set the privledges assigned to the PDF document - https://support.encodian.com/hc/en-gb/articles/360011337094-Set-PDF-Document-Privileges"
      }
    },
    "/api/v1/Core/TextToPDF": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "TextToPDF",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoTextToPdf",
            "schema": {
              "$ref": "#/definitions/DtoTextToPdf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseTextToPdf"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseTextToPdf"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseTextToPdf"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert Text to PDF",
        "description": "Convert the text provided to a PDF document - https://support.encodian.com/hc/en-gb/articles/360011683054-Convert-Text-to-PDF"
      }
    },
    "/api/v1/Core/HtmlToPDF": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "HtmlToPDF",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoHtmlToPdf",
            "schema": {
              "$ref": "#/definitions/DtoHtmlToPdf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseHtmlToPdf"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseHtmlToPdf"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseHtmlToPdf"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert HTML to PDF",
        "description": "Convert the HTML or Web URL provided to a PDF document - https://support.encodian.com/hc/en-gb/articles/360022205154-Convert-HTML-to-PDF"
      }
    },
    "/api/v1/Core/HtmlToWord": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "HtmlToWord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoHtmlToWord",
            "schema": {
              "$ref": "#/definitions/DtoHtmlToWord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseHtmlToWord"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseHtmlToWord"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseHtmlToWord"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert HTML to Word",
        "description": "Convert the HTML or Web URL provided to a Microsoft Word document - https://support.encodian.com/hc/en-gb/articles/360011823213-Convert-HTML-to-Word"
      }
    },
    "/api/v1/Core/InsertHtmlToPdf": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "InsertHtmlToPdf",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoInsertHtmlToPdf",
            "schema": {
              "$ref": "#/definitions/DtoInsertHtmlToPdf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseInsertHtmlToPdf"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseInsertHtmlToPdf"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseInsertHtmlToPdf"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Insert HTML to PDF",
        "description": "Insert the HTML provided into a PDF document - https://support.encodian.com/hc/en-gb/articles/360011784354-Insert-HTML-to-PDF"
      }
    },
    "/api/v1/Core/MergeDocumentsToPdf": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "MergeDocumentsToPdf",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoMergeDocumentsToPdf",
            "schema": {
              "$ref": "#/definitions/DtoMergeDocumentsToPdf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergeDocumentsToPdf"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergeDocumentsToPdf"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergeDocumentsToPdf"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Merge documents to PDF",
        "description": "Convert and merge the documents provided to a single PDF document - https://support.encodian.com/hc/en-gb/articles/360011886173-Merge-documents-to-PDF"
      }
    },
    "/api/v1/Core/MergeArrayOfDocumentsToPdf": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "MergeArrayOfDocumentsToPdf",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoMergeArrayOfDocumentsToPdf",
            "schema": {
              "$ref": "#/definitions/DtoMergeArrayOfDocumentsToPdf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergeArrayOfDocumentsToPdf"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergeArrayOfDocumentsToPdf"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergeArrayOfDocumentsToPdf"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Merge document array to PDF",
        "description": "Convert and merge an array of documents to a single PDF document - https://support.encodian.com/hc/en-gb/articles/360014632213-Merge-document-array-to-PDF"
      }
    },
    "/api/v1/Core/MergeArrayOfDocumentsToWord": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "MergeArrayOfDocumentsToWord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoMergeArrayOfDocumentsToWord",
            "schema": {
              "$ref": "#/definitions/DtoMergeArrayOfDocumentsToWord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergeArrayOfDocumentsToWord"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergeArrayOfDocumentsToWord"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergeArrayOfDocumentsToWord"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Merge Word Documents",
        "description": "Merge an array of Microsoft Word documents to a single Microsoft Word document (DOCX) - https://support.encodian.com/hc/en-gb/articles/360023972213-Merge-document-array-to-Word"
      }
    },
    "/api/v1/Core/MergeArrayOfExcelDocuments": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "MergeArrayOfExcelDocuments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoMergeArrayOfExcelDocuments",
            "schema": {
              "$ref": "#/definitions/DtoMergeArrayOfExcelDocuments"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergeArrayOfExcelDocuments"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergeArrayOfExcelDocuments"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergeArrayOfExcelDocuments"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Merge Excel Files",
        "description": "Merge an array of Microsoft Excel files to a single file (multiple formats) - https://support.encodian.com/hc/en-gb/articles/4469865776529"
      }
    },
    "/api/v1/Core/OcrPdfDocument": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "OcrPdfDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoOcrPdf",
            "schema": {
              "$ref": "#/definitions/DtoOcrPdf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseOcrPdf"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseOcrPdf"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseOcrPdf"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "OCR a PDF Document",
        "description": "Perform OCR on an existing PDF document - https://support.encodian.com/hc/en-gb/articles/360012686653-OCR-a-PDF-Document"
      }
    },
    "/api/v1/Core/SplitDocument": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "SplitDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoSplitDocument",
            "schema": {
              "$ref": "#/definitions/DtoSplitDocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseSplitDocument"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseSplitDocument"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseSplitDocument"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Split PDF",
        "description": "Split a PDF Document into multiple PDF Documents - https://support.encodian.com/hc/en-gb/articles/360002953277-Split-PDF"
      }
    },
    "/api/v1/Core/SplitPdfByText": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "SplitPdfByText",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoSplitPdfByText",
            "schema": {
              "$ref": "#/definitions/DtoSplitPdfByText"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseSplitPdfByText"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseSplitPdfByText"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseSplitPdfByText"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Split PDF by Text",
        "description": "Split a PDF Document by text into multiple PDF Documents - https://support.encodian.com/hc/en-gb/articles/360012726397-Split-PDF-by-Text"
      }
    },
    "/api/v1/Core/SplitPdfByBarcode": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "SplitPdfByBarcode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoSplitPdfByBarcode",
            "schema": {
              "$ref": "#/definitions/DtoSplitPdfByBarcode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseSplitPdfByBarcode"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseSplitPdfByBarcode"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseSplitPdfByBarcode"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Split PDF by Barcode",
        "description": "Split a PDF Document by Barcode, returning multiple PDF Documents - https://support.encodian.com/hc/en-gb/articles/360013629457-Split-PDF-by-Barcode"
      }
    },
    "/api/v1/Core/WordToPdfForm": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "WordToPdfForm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoWordToPdfForm",
            "schema": {
              "$ref": "#/definitions/DtoWordToPdfForm"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseWordToPdfForm"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseWordToPdfForm"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseWordToPdfForm"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert Word to PDF Form",
        "description": "Convert the Word document provided (Legacy Form Controls Only) to a PDF form document. - https://support.encodian.com/hc/en-gb/articles/360012307133-Convert-Word-to-PDF-Form"
      }
    },
    "/api/v1/Core/AddTextWatermark": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "AddTextWatermark",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoAddTextWatermark",
            "schema": {
              "$ref": "#/definitions/DtoAddTextWatermark"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddTextWatermark"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddTextWatermark"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddTextWatermark"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Add Text Watermark to PDF",
        "description": "Add a text watermark to the specified PDF document using the standard options - https://support.encodian.com/hc/en-gb/articles/360012230494"
      }
    },
    "/api/v1/Core/AddImageWatermark": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "AddImageWatermark",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoAddImageWatermark",
            "schema": {
              "$ref": "#/definitions/DtoAddImageWatermark"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddImageWatermark"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddImageWatermark"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddImageWatermark"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Add Image Watermark to PDF",
        "description": "Add an image watermark to the specified PDF document using the standard options - https://support.encodian.com/hc/en-gb/articles/360012484094"
      }
    },
    "/api/v1/Core/AddTextWatermarkAdvanced": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "AddTextWatermarkAdvanced",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoAddTextWatermarkAdv",
            "schema": {
              "$ref": "#/definitions/DtoAddTextWatermarkAdv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddTextWatermarkAdv"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddTextWatermarkAdv"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddTextWatermarkAdv"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Add Text Watermark to PDF (Advanced)",
        "description": "Add a text watermark to the specified PDF document using the advanced options - https://support.encodian.com/hc/en-gb/articles/360012345813"
      }
    },
    "/api/v1/Core/AddImageWatermarkAdvanced": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "AddImageWatermarkAdvanced",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoAddImageWatermarkAdv",
            "schema": {
              "$ref": "#/definitions/DtoAddImageWatermarkAdv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddImageWatermarkAdv"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddImageWatermarkAdv"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddImageWatermarkAdv"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Add Image Watermark to PDF (Advanced)",
        "description": "Add an image watermark to the specified PDF document using the standard options - https://support.encodian.com/hc/en-gb/articles/360012485874"
      }
    },
    "/api/v1/Core/ImageCleanUpDocument": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ImageCleanUpDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoImageCleanUpDoc",
            "schema": {
              "$ref": "#/definitions/DtoImageCleanUpDoc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageCleanUpDoc"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageCleanUpDoc"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageCleanUpDoc"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Image Clean Up (Document)",
        "description": "Execute image clean up activities focussed on text based images such as Deskew, Rotate, Despeckle + more."
      }
    },
    "/api/v1/Core/ImageCleanUpPhoto": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ImageCleanUpPhoto",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoImageCleanUpPhoto",
            "schema": {
              "$ref": "#/definitions/DtoImageCleanUpPhoto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageCleanUpPhoto"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageCleanUpPhoto"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageCleanUpPhoto"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Image Clean Up (Photo)",
        "description": "Execute image clean up activities for standard photo images."
      }
    },
    "/api/v1/Core/ExtractTextRegions": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ExtractTextRegions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoExtractTextRegion",
            "schema": {
              "$ref": "#/definitions/DtoExtractTextRegion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractTextRegion"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractTextRegion"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractTextRegion"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Extract Text from Regions",
        "description": "Extract text using OCR from 70+ files types using specified regions - https://support.encodian.com/hc/en-gb/articles/360015612353-Extract-Text-from-Regions"
      }
    },
    "/api/v1/Core/AddHtmlHeaderFooter": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "AddHtmlHeaderFooter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoAddHtmlHeaderFooter",
            "schema": {
              "$ref": "#/definitions/DtoAddHtmlHeaderFooter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddHtmlHeaderFooter"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddHtmlHeaderFooter"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddHtmlHeaderFooter"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Add HTML Header or Footer to PDF",
        "description": "Add a HTML header, footer or both to the specified PDF document - https://support.encodian.com/hc/en-gb/articles/360013808614-Add-HTML-Header-or-Footer"
      }
    },
    "/api/v1/Core/AddPageNumbers": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "AddPageNumbers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoAddPageNumbers",
            "schema": {
              "$ref": "#/definitions/DtoAddPageNumbers"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddPageNumbers"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddPageNumbers"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddPageNumbers"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Add Page Numbers",
        "description": "Add page numbers to the PDF document provided - https://support.encodian.com/hc/en-gb/articles/360014464534-Add-Page-Numbers"
      }
    },
    "/api/v1/Core/GetPdfTextLayer": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "GetPdfTextLayer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoGetPdfTextLayer",
            "schema": {
              "$ref": "#/definitions/DtoGetPdfTextLayer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfTextLayer"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfTextLayer"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfTextLayer"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Get PDF Text Layer",
        "description": "Get the text layer for the PDF document provided - https://support.encodian.com/hc/en-gb/articles/360015539373-Get-PDF-Text-Layer"
      }
    },
    "/api/v1/Core/RedactPdf": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "RedactPdf",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoRedactPdf",
            "schema": {
              "$ref": "#/definitions/DtoRedactPdf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseRedactPdf"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseRedactPdf"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseRedactPdf"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Redact PDF",
        "description": "Apply the specified redactions to the PDF document provided - https://support.encodian.com/hc/en-gb/articles/360018607954-Redact-PDF-"
      }
    },
    "/api/v1/Core/ResizeImage": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ResizeImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoImageResize",
            "schema": {
              "$ref": "#/definitions/DtoImageResize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageResize"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageResize"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageResize"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Resize an Image",
        "description": "Resize and compress the image provided - https://support.encodian.com/hc/en-gb/articles/360018591034-Resize-an-Image"
      }
    },
    "/api/v1/Core/GetPdfFormData": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "GetPdfFormData",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoGetPdfFormData",
            "schema": {
              "$ref": "#/definitions/DtoGetPdfFormData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfFormData"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfFormData"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfFormData"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Get PDF Form Data",
        "description": "Extract PDF form data from a PDF Form - https://support.encodian.com/hc/en-gb/articles/360035107433-Get-PDF-Form-Data"
      }
    },
    "/api/v1/Core/SearchAndReplaceText": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "SearchAndReplaceText",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoSearchAndReplaceText",
            "schema": {
              "$ref": "#/definitions/DtoSearchAndReplaceText"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseSearchAndReplaceText"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseSearchAndReplaceText"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseSearchAndReplaceText"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Search and Replace Text",
        "description": "Find and replace text contained within a PDF or DOCX document - https://support.encodian.com/hc/en-gb/articles/360020937853-Search-and-Replace-Text"
      }
    },
    "/api/v1/Core/SearchAndReplaceTextWithImage": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "SearchAndReplaceTextWithImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoSearchAndReplaceTextWithImage",
            "schema": {
              "$ref": "#/definitions/DtoSearchAndReplaceTextWithImage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseSearchAndReplaceTextWithImage"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseSearchAndReplaceTextWithImage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseSearchAndReplaceTextWithImage"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Replace Text with Image",
        "description": "Find and replace text contained within a PDF or DOCX document with an image - https://support.encodian.com/hc/en-gb/articles/360027234874"
      }
    },
    "/api/v1/Core/ConvertPdfToWord": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ConvertPdfToWord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoConvertPdfToWord",
            "schema": {
              "$ref": "#/definitions/DtoConvertPdfToWord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertPdfToWord"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertPdfToWord"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertPdfToWord"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert PDF to Word",
        "description": "Convert a PDF document to Microsoft Word (docx) format - https://support.encodian.com/hc/en-gb/articles/360027229294-Convert-PDF-to-Word"
      }
    },
    "/api/v1/Core/CompressImage": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "CompressImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoImageCompress",
            "schema": {
              "$ref": "#/definitions/DtoImageCompress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageCompress"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageCompress"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageCompress"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Compress an Image",
        "description": "Compress the image provided - https://support.encodian.com/hc/en-gb/articles/360027350513-Compress-an-Image"
      }
    },
    "/api/v1/Core/AddToZip": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "AddToZip",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoZipArrayOfDocuments",
            "schema": {
              "$ref": "#/definitions/DtoZipArrayOfDocuments"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseZipArrayOfDocuments"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseZipArrayOfDocuments"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseZipArrayOfDocuments"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Add to Archive (ZIP)",
        "description": "Add the files provided to an archive (.zip) file - https://support.encodian.com/hc/en-gb/articles/360002674918-Add-to-Archive-ZIP"
      }
    },
    "/api/v1/Core/GetPdfDocumentInfo": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "GetPdfDocumentInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoGetPdfDocumentInfo",
            "schema": {
              "$ref": "#/definitions/DtoGetPdfDocumentInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfDocumentInfo"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfDocumentInfo"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfDocumentInfo"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Get PDF Document Information",
        "description": "Get PDF Document Information (Number of Pages, File Size + more) - https://support.encodian.com/hc/en-gb/articles/360002949358-Get-PDF-Document-Information"
      }
    },
    "/api/v1/Core/UnlockPdfDocument": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "UnlockPdfDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoUnlockPdf",
            "schema": {
              "$ref": "#/definitions/DtoUnlockPdf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseUnlockPdf"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseUnlockPdf"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseUnlockPdf"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Unlock PDF Document",
        "description": "Decrypt and remove password protection from a PDF document - https://support.encodian.com/hc/en-gb/articles/360003714237-Unlock-PDF-Document"
      }
    },
    "/api/v1/Core/ParseCsv": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ParseCsv",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoParseCsv",
            "schema": {
              "$ref": "#/definitions/DtoParseCsv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseParseCsv"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseParseCsv"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseParseCsv"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Parse CSV",
        "description": "Parse CSV and return the extracted data in JSON format - https://support.encodian.com/hc/en-gb/articles/360005177297-Parse-CSV"
      }
    },
    "/api/v1/Core/CreateQrCode": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "CreateQrCode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoCreateQrCode",
            "schema": {
              "$ref": "#/definitions/DtoCreateQrCode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateQrCode"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateQrCode"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateQrCode"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Create QR Code",
        "description": "Create a QR code in the specified image format - https://support.encodian.com/hc/en-gb/articles/360005178237-Create-QR-Code"
      }
    },
    "/api/v1/Core/ReadQrCodeFromImage": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ReadQrCodeFromImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoReadQrCodeFromImage",
            "schema": {
              "$ref": "#/definitions/DtoReadQrCodeFromImage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadQrCodeFromImage"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadQrCodeFromImage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadQrCodeFromImage"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Read QR Code - Image",
        "description": "Read a QR code from the image provided - https://support.encodian.com/hc/en-gb/articles/360006170898-Read-QR-Code-Image"
      }
    },
    "/api/v1/Core/ReadQrCodeFromDocument": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ReadQrCodeFromDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoReadQrCodeFromDocument",
            "schema": {
              "$ref": "#/definitions/DtoReadQrCodeFromDocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadQrCodeFromDocument"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadQrCodeFromDocument"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadQrCodeFromDocument"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Read QR Code - Document",
        "description": "Read a QR code(s) from the document provided - https://support.encodian.com/hc/en-gb/articles/360006165437-Read-QR-Code-Document"
      }
    },
    "/api/v1/Core/CreateBarcode": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "CreateBarcode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "barcodeTypeParameter",
            "description": "Set the barcode type",
            "type": "string",
            "enum": [
              "AustraliaPost",
              "Aztec",
              "Codabar",
              "CodablockF",
              "Code11",
              "Code39Standard",
              "Code39Extended",
              "Code128",
              "Code16K",
              "DatabarExpanded",
              "DatabarExpandedStacked",
              "DatabarLimited",
              "DatabarOmniDirectional",
              "DatabarStacked",
              "DatabarStackedOmniDirectional",
              "DatabarTruncated",
              "DataMatrix",
              "DotCode",
              "EAN8",
              "EAN13",
              "GS1Code128",
              "GS1CodablockF",
              "Interleaved2of5",
              "ISBN",
              "ISMN",
              "ISSN",
              "ITF6",
              "ITF14",
              "MaxiCode",
              "Pdf417",
              "Planet",
              "Postnet",
              "Standard2of5",
              "UPCA",
              "UpcaGs1Code128Coupon",
              "UpcaGs1DatabarCoupon",
              "UPCE"
            ],
            "x-ms-summary": "Barcode Type"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoResponseCreateBarcode",
            "schema": {
              "$ref": "#/definitions/DtoCreateBarcode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateBarcode"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateBarcode"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateBarcode"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Create Barcode",
        "description": "Create a Barcode in the specified image format - https://support.encodian.com/hc/en-gb/articles/360006165457-Create-Barcode"
      }
    },
    "/api/v1/Core/ReadBarcodeFromImage": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ReadBarcodeFromImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoReadBarcodeFromImage",
            "schema": {
              "$ref": "#/definitions/DtoReadBarcodeFromImage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadBarcodeFromImage"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadBarcodeFromImage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadBarcodeFromImage"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Read Barcode - Image",
        "description": "Read a barcode from the image provided - https://support.encodian.com/hc/en-gb/articles/360006170918-Read-Barcode-Image"
      }
    },
    "/api/v1/Core/ReadBarcodeFromDocument": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ReadBarcodeFromDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoReadBarcodeFromDocument",
            "schema": {
              "$ref": "#/definitions/DtoReadBarcodeFromDocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadBarcodeFromDocument"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadBarcodeFromDocument"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadBarcodeFromDocument"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Read Barcode - Document",
        "description": "Read barcode(s) from the document provided - https://support.encodian.com/hc/en-gb/articles/360006170938-Read-Barcode-Document"
      }
    },
    "/api/v1/Core/ImageConvertFormat": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ImageConvertFormat",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoImageConvertFormat",
            "schema": {
              "$ref": "#/definitions/DtoImageConvertFormat"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageConvertFormat"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageConvertFormat"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageConvertFormat"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert Image Format",
        "description": "Convert the format of the image provided - https://support.encodian.com/hc/en-gb/articles/360006617857-Convert-Image-Format"
      }
    },
    "/api/v1/Core/RegexSearchText": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "RegexSearchText",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoRegexSearchText",
            "schema": {
              "$ref": "#/definitions/DtoRegexSearchText"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseRegexSearchText"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseRegexSearchText"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseRegexSearchText"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Search Text - Regex",
        "description": "Search the text provided to find matches using the regex provided - https://support.encodian.com/hc/en-gb/articles/360006764638-Search-Text-Regex"
      }
    },
    "/api/v1/Core/ExtractImages": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ExtractImages",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoExtractTextRegion",
            "schema": {
              "$ref": "#/definitions/DtoExtractImage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractImage"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractImage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractImage"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Extract Images from PDF",
        "description": "Extract images from PDF using specified regions - https://support.encodian.com/hc/en-gb/articles/360006998058-Extract-Images-from-PDF"
      }
    },
    "/api/v1/Core/ImageExtractText": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ImageExtractText",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoImageExtractText",
            "schema": {
              "$ref": "#/definitions/DtoImageExtractText"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageExtractText"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageExtractText"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageExtractText"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Extract Text from Image (OCR)",
        "description": "Extract text from the image provided - https://support.encodian.com/hc/en-gb/articles/360006998078-Extract-Text-from-Image-OCR"
      }
    },
    "/api/v1/Core/FillPdfForm": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "FillPdfForm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoFillPdfForm",
            "schema": {
              "$ref": "#/definitions/DtoFillPdfForm"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseFillPdfForm"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseFillPdfForm"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseFillPdfForm"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Fill a PDF Form",
        "description": "Fill the PDF Form provided with the JSON data provided - https://support.encodian.com/hc/en-gb/articles/360008556077-Fill-a-PDF-Form"
      }
    },
    "/api/v1/Core/ConvertMailMessage": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ConvertMailMessage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoConvertMailMessage",
            "schema": {
              "$ref": "#/definitions/DtoConvertMailMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertMailMessage"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertMailMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertMailMessage"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert Email Message",
        "description": "Convert an email to PDF - https://support.encodian.com/hc/en-gb/articles/360011566298-Convert-Mail-Message"
      }
    },
    "/api/v1/Core/ConvertExcel": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ConvertExcel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "outputFormatParameter",
            "description": "Set the output file type",
            "type": "string",
            "enum": [
              "PDF",
              "HTML",
              "CSV",
              "TXT",
              "XLSX",
              "XLS",
              "PNG",
              "TIFF"
            ],
            "x-ms-summary": "Output Format"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoConvertExcel",
            "schema": {
              "$ref": "#/definitions/DtoConvertExcel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertExcel"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertExcel"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertExcel"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert Excel",
        "description": "Convert Microsoft Excel documents to another document format - https://support.encodian.com/hc/en-gb/articles/360011804178-Convert-Excel"
      }
    },
    "/api/v1/Core/ConvertWord": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ConvertWord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "outputFormatParameter",
            "description": "Set the output file type",
            "type": "string",
            "enum": [
              "PDF",
              "DOCX",
              "DOC",
              "RTF",
              "HTML",
              "TXT",
              "PNG",
              "TIFF"
            ],
            "x-ms-summary": "Output Format"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoConvertWord",
            "schema": {
              "$ref": "#/definitions/DtoConvertWord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertWord"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertWord"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertWord"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert Word",
        "description": "Convert Microsoft Word documents to another document format - https://support.encodian.com/hc/en-gb/articles/360015616117-Convert-Word"
      }
    },
    "/api/v1/Core/ConvertPowerPoint": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ConvertPowerPoint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "outputFormatParameter",
            "description": "Set the output file type",
            "type": "string",
            "enum": [
              "PDF",
              "HTML",
              "PPTX",
              "TXT",
              "PNG",
              "TIFF"
            ],
            "x-ms-summary": "Output Format"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoConvertPowerPoint",
            "schema": {
              "$ref": "#/definitions/DtoConvertPowerPoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertPowerPoint"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertPowerPoint"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertPowerPoint"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert PowerPoint",
        "description": "Convert Microsoft PowerPoint documents to another document format - https://support.encodian.com/hc/en-gb/articles/360015879777-Convert-PowerPoint"
      }
    },
    "/api/v1/Core/ConvertCad": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ConvertCad",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "outputFormatParameter",
            "description": "Set the output file type",
            "type": "string",
            "enum": [
              "PDF",
              "BMP",
              "GIF",
              "JPG",
              "PNG",
              "TIFF"
            ],
            "x-ms-summary": "Output Format"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoConvertCad",
            "schema": {
              "$ref": "#/definitions/DtoConvertCad"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertCad"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertCad"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertCad"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert CAD",
        "description": "Convert CAD files to another document format - https://support.encodian.com/hc/en-gb/articles/4542607350417"
      }
    },
    "/api/v1/Core/CreateHMAC": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "CreateHMAC",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoCreateHMAC",
            "schema": {
              "$ref": "#/definitions/DtoCreateHMAC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateHMAC"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateHMAC"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateHMAC"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Create HMAC",
        "description": "Create a Hash-based message authentication code (HMAC) using a secret key - https://support.encodian.com/hc/en-gb/articles/360012782058-Create-HMAC"
      }
    },
    "/api/v1/Core/CreateHashCode": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "CreateHashCode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoCreateHashCode",
            "schema": {
              "$ref": "#/definitions/DtoCreateHashCode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateHashCode"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateHashCode"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateHashCode"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Create Hash Code",
        "description": "Create a hashcode for the string provided - https://support.encodian.com/hc/en-gb/articles/360013996077-Create-Hash-Code"
      }
    },
    "/api/v1/Core/AddTextWatermarkToImage": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "AddTextWatermarkToImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoCreateHashCode",
            "schema": {
              "$ref": "#/definitions/DtoAddTextWatermarkToImage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddTextWatermarkToImage"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddTextWatermarkToImage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddTextWatermarkToImage"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Add Text Watermark to Image",
        "description": "Add a Text Watermark to the image provided - https://support.encodian.com/hc/en-gb/articles/360013560398-Add-Text-Watermark-To-Image"
      }
    },
    "/api/v1/Core/CompareWordDocuments": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "CompareWordDocuments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoCompareWordDocuments",
            "schema": {
              "$ref": "#/definitions/DtoCompareWordDocuments"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseCompareWordDocuments"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseCompareWordDocuments"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseCompareWordDocuments"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Compare Word Documents",
        "description": "Compare differences between Microsoft Word and PDF Documents - https://support.encodian.com/hc/en-gb/articles/360018576278-Compare-Word-Documents"
      }
    },
    "/api/v1/Core/PopulateWordDocument": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "PopulateWordDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoPopulateWordDocument",
            "schema": {
              "$ref": "#/definitions/DtoPopulateWordDocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponsePopulateWordDocument"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponsePopulateWordDocument"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponsePopulateWordDocument"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Populate Word Document",
        "description": "Populate a Microsoft Word Document (DOCX) with the JSON data provided - https://support.encodian.com/hc/en-gb/articles/360019620578-Populate-Word-Document"
      }
    },
    "/api/v1/Core/CompressPdf": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "CompressPdf",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoCompressPdf",
            "schema": {
              "$ref": "#/definitions/DtoCompressPdf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseCompressPdf"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseCompressPdf"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseCompressPdf"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Compress PDF",
        "description": "Compress and optimise a PDF document - https://support.encodian.com/hc/en-gb/articles/360019994857-Compress-PDF"
      }
    },
    "/api/v1/Core/EncodianSendToFiler": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "EncodianSendToFiler",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoEncodianSendToFiler",
            "schema": {
              "$ref": "#/definitions/DtoEncodianSendToFiler"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseEncodianSendToFiler"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseEncodianSendToFiler"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseEncodianSendToFiler"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Send to Encodian Filer",
        "description": "Send data to an Encodian Filer endpoint - https://support.encodian.com/hc/en-gb/articles/4404097189905-Send-to-Encodian-Filer"
      }
    },
    "/api/v1/Core/AddTextWatermarkWord": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "AddTextWatermarkWord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoAddTextWatermarkWord",
            "schema": {
              "$ref": "#/definitions/DtoAddTextWatermarkWord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddTextWatermarkWord"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddTextWatermarkWord"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddTextWatermarkWord"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Add Text Watermark to Word",
        "description": "Add a text watermark to the specified Microsoft Word document - https://support.encodian.com/hc/en-gb/articles/4411284008593"
      }
    },
    "/api/v1/Core/AddImageWatermarkWord": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "AddImageWatermarkWord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoAddImageWatermarkWord",
            "schema": {
              "$ref": "#/definitions/DtoAddImageWatermarkWord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddImageWatermarkWord"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddImageWatermarkWord"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseAddImageWatermarkWord"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Add Image Watermark to Word",
        "description": "Add an image watermark to the specified Microsoft Word document - https://support.encodian.com/hc/en-gb/articles/4411329161361"
      }
    },
    "/api/v1/Core/ImageRemoveExifTags": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ImageRemoveExifTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoImageRemoveExifTags",
            "schema": {
              "$ref": "#/definitions/DtoImageRemoveExifTags"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageRemoveExifTags"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageRemoveExifTags"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageRemoveExifTags"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Remove EXIF Tags from Image",
        "description": "Remove EXIF tags from the specified image - https://support.encodian.com/hc/en-gb/articles/4415700524817"
      }
    },
    "/api/v1/Core/ConvertPdfToTiff": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ConvertPdfToTiff",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoConvertPdfToTiff",
            "schema": {
              "$ref": "#/definitions/DtoConvertPdfToTiff"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertPdfToTiff"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertPdfToTiff"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertPdfToTiff"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert PDF to TIFF",
        "description": "Convert a PDF document to TIFF (tiff) format - https://support.encodian.com/hc/en-gb/articles/4418024925457"
      }
    },
    "/api/v1/Core/FlattenPdf": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "FlattenPdf",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoFlattenPdf",
            "schema": {
              "$ref": "#/definitions/DtoFlattenPdf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseFlattenPdf"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseFlattenPdf"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseFlattenPdf"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Flatten PDF",
        "description": "Flatten a PDF Document or PDF Form - https://support.encodian.com/hc/en-gb/articles/4416473033105"
      }
    },
    "/api/v1/Core/ConvertPdfToImages": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "ConvertPdfToImages",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoConvertPdfToImages",
            "schema": {
              "$ref": "#/definitions/DtoConvertPdfToImages"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertPdfToImages"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertPdfToImages"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseConvertPdfToImages"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Convert PDF to Images",
        "description": "Convert a PDF document into an array of images (PNG or JPG) - https://support.encodian.com/hc/en-gb/articles/4418101623441"
      }
    },
    "/api/v1/Core/RepairPdf": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "RepairPdf",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoRepairPdf",
            "schema": {
              "$ref": "#/definitions/DtoRepairPdf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseRepairPdf"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseRepairPdf"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseRepairPdf"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Repair PDF",
        "description": "Repair a PDF File - https://support.encodian.com/hc/en-gb/articles/4418809972753"
      }
    },
    "/api/v1/Core/MergePresentations": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "MergePresentations",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoMergePresentations",
            "schema": {
              "$ref": "#/definitions/DtoMergePresentations"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergePresentations"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergePresentations"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseMergePresentations"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Merge Presentations",
        "description": "Merge an array of presentations to a single presentation - https://support.encodian.com/hc/en-gb/articles/4425652063761"
      }
    },
    "/api/v1/Core/GetImageInfo": {
      "post": {
        "tags": [
          "Core"
        ],
        "operationId": "GetImageInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request object, refer to schema definition: DtoGetImageInfo",
            "schema": {
              "$ref": "#/definitions/DtoGetImageInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetImageInfo"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetImageInfo"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetImageInfo"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Get Image Information",
        "description": "Get Image Information (Height, Width, Resolution, Format, File Size + more) - https://support.encodian.com/hc/en-gb/articles/4431662425489"
      }
    },
    "/api/v1/DynamicSchema/GetDynamicSchemaCreateBarcode": {
      "get": {
        "tags": [
          "DynamicSchema"
        ],
        "operationId": "GetDynamicSchemaCreateBarcode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "barcodeType",
            "type": "string",
            "x-ms-summary": "Barcode Type",
            "description": "The barcode type to obtain the dynamic schema for."
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { }
          },
          "400": {
            "description": "Bad request",
            "schema": { }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get Create Barcode Schema",
        "description": "Provides the dynamic schema for the Create Barcode action."
      }
    },
    "/api/v1/DynamicSchema/GetDynamicSchemaConvertWord": {
      "get": {
        "tags": [
          "DynamicSchema"
        ],
        "operationId": "GetDynamicSchemaConvertWord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "outputFormat",
            "type": "string",
            "x-ms-summary": "Output Format",
            "description": "The output format to obtain the dynamic schema for."
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { }
          },
          "400": {
            "description": "Bad request",
            "schema": { }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get Convert Word Schema",
        "description": "Provides the dynamic schema for the Convert Word action."
      }
    },
    "/api/v1/DynamicSchema/GetDynamicSchemaConvertExcel": {
      "get": {
        "tags": [
          "DynamicSchema"
        ],
        "operationId": "GetDynamicSchemaConvertExcel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "outputFormat",
            "type": "string",
            "x-ms-summary": "Output Format",
            "description": "The output format to obtain the dynamic schema for."
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { }
          },
          "400": {
            "description": "Bad request",
            "schema": { }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get Convert Excel Schema",
        "description": "Provides the dynamic schema for the Convert Excel action."
      }
    },
    "/api/v1/DynamicSchema/GetDynamicSchemaConvertPowerPoint": {
      "get": {
        "tags": [
          "DynamicSchema"
        ],
        "operationId": "GetDynamicSchemaConvertPowerPoint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "outputFormat",
            "type": "string",
            "x-ms-summary": "Output Format",
            "description": "The output format to obtain the dynamic schema for."
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { }
          },
          "400": {
            "description": "Bad request",
            "schema": { }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get Convert PowerPoint Schema",
        "description": "Provides the dynamic schema for the Convert PowerPoint action."
      }
    },
    "/api/v1/DynamicSchema/GetDynamicSchemaConvertCad": {
      "get": {
        "tags": [
          "DynamicSchema"
        ],
        "operationId": "GetDynamicSchemaConvertCad",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "outputFormat",
            "type": "string",
            "x-ms-summary": "Output Format",
            "description": "The output format to obtain the dynamic schema for."
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": { }
          },
          "400": {
            "description": "Bad request",
            "schema": { }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get Convert Cad Schema",
        "description": "Provides the dynamic schema for the Convert CAD action."
      }
    },
    "/api/v1/Mgmt/GetSubscriptionStatus": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetSubscriptionStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseMgmtGetSubscriptionStatus"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseMgmtGetSubscriptionStatus"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseMgmtGetSubscriptionStatus"
            }
          }
        },
        "x-ms-visibility": "important",
        "summary": "Get Subscription Status",
        "description": "Get the the status of your Encodian Subscription - https://support.encodian.com/hc/en-gb/articles/360010176717-Get-Subscription-Status"
      }
    },
    "/api/v1/Mgmt/GetOperationStatus": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoBaseMgmtResponse"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoBaseMgmtResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoBaseMgmtResponse"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status",
        "description": "Get the operation status of for the operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusExtractTextRegion": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusExtractTextRegion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of an ExtractTextRegion operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractTextRegion"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractTextRegion"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractTextRegion"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for ExtractTextRegion",
        "description": "Retrieve the operation status of an ExtractTextRegion operation for the Operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusGetPdfTextLayer": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusGetPdfTextLayer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of a GetPdfTextLayer operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfTextLayer"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfTextLayer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfTextLayer"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for GetPdfTextLayer",
        "description": "Retrieve the operation status of a GetPdfTextLayer operation for the Operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusGetPdfFormData": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusGetPdfFormData",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of a GetPdfFormData operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfFormData"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfFormData"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfFormData"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for GetPdfFormData",
        "description": "Retrieve the operation status of a GetPdfFormData operation for the Operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusSplitDocument": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusSplitDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of a SplitDocument operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseSplitDocument"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseSplitDocument"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseSplitDocument"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for SplitDocument",
        "description": "Get the operation status of for the operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusGetPdfDocumentInfo": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusGetPdfDocumentInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of a GetPdfDocumentInfo operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfDocumentInfo"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfDocumentInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetPdfDocumentInfo"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for GetPdfDocumentInfo",
        "description": "Get the operation status of for the operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusParseCsv": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusParseCsv",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of a GetOperationStatusParseCsv operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseParseCsv"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseParseCsv"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseParseCsv"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for ParseCsv",
        "description": "Retrieve the operation status of a ParseCsv operation for the Operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusReadQrCodeFromImage": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusReadQrCodeFromImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of a GetOperationStatusReadQrCodeFromImage operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadQrCodeFromImage"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadQrCodeFromImage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadQrCodeFromImage"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for ReadQrCodeFromImage",
        "description": "Retrieve the operation status of a ReadQrCodeFromImage operation for the Operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusReadQrCodeFromDocument": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusReadQrCodeFromDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of a GetOperationStatusReadQrCodeFromDocument operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadQrCodeFromDocument"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadQrCodeFromDocument"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadQrCodeFromDocument"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for ReadQrCodeFromDocument",
        "description": "Retrieve the operation status of a ReadQrCodeFromDocument operation for the Operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusReadBarcodeFromImage": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusReadBarcodeFromImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of a GetOperationStatusReadBarcodeFromImage operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadBarcodeFromImage"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadBarcodeFromImage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadBarcodeFromImage"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for ReadBarcodeFromImage",
        "description": "Retrieve the operation status of a ReadBarcodeFromImage operation for the Operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusReadBarcodeFromDocument": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusReadBarcodeFromDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of a GetOperationStatusReadBarcodeFromDocument operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadBarcodeFromDocument"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadBarcodeFromDocument"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseReadBarcodeFromDocument"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for ReadBarcodeFromDocument",
        "description": "Retrieve the operation status of a ReadBarcodeFromDocument operation for the Operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusRegexSearchText": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusRegexSearchText",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of a GetOperationStatusRegexSearchText operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseRegexSearchText"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseRegexSearchText"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseRegexSearchText"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for RegexSearchText",
        "description": "Retrieve the operation status of a RegexSearchText operation for the Operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusExtractImage": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusExtractImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of an ExtractImage operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractImage"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractImage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractImage"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for ExtractImage",
        "description": "Get the operation status of for the operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusImageExtractText": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusImageExtractText",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of an ImageExtractText operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageExtractText"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageExtractText"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseImageExtractText"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for ImageExtractText",
        "description": "Get the operation status of for the operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusExtractFormData": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusExtractFormData",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of an ExtractFormData operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractFormData"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractFormData"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseExtractFormData"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for GetOperationStatusExtractFormData",
        "description": "Get the operation status of for the operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusCreateHMAC": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusCreateHMAC",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of a GetOperationStatusCreateHMAC operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateHMAC"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateHMAC"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateHMAC"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for CreateHMAC",
        "description": "Retrieve the operation status of a CreateHMAC operation for the Operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusCreateHashCode": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusCreateHashCode",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of a GetOperationStatusCreateHashCode operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateHashCode"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateHashCode"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseCreateHashCode"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for CreateHashCode",
        "description": "Retrieve the operation status of a CreateHashCode operation for the Operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusEncodianSendToFiler": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusEncodianSendToFiler",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of a GetOperationStatusEncodianSendToFiler operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseEncodianSendToFiler"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseEncodianSendToFiler"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseEncodianSendToFiler"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for Encodian Send to Filer",
        "description": "Retrieve the operation status of a EncodianSendToFiler operation for the Operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusMultipleFiles": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusMultipleFiles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of a MultipleFiles operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseMultipleFiles"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseMultipleFiles"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/DtoResponseMultipleFiles"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for Multiple Files",
        "description": "Get the operation status of for the operation ID provided."
      }
    },
    "/api/v1/Mgmt/GetOperationStatusGetImageInfo": {
      "get": {
        "tags": [
          "Mgmt"
        ],
        "operationId": "GetOperationStatusGetImageInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operationId",
            "description": "Retrieve the operation status of an GetImageInfo operation for the Operation ID provided.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetImageInfo"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetImageInfo"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/DtoResponseGetImageInfo"
            }
          }
        },
        "x-ms-visibility": "internal",
        "summary": "Get an Operation Status for GetImageInfo",
        "description": "Get the operation status of for the operation ID provided."
      }
    }
  },
  "definitions": {
    "DocumentArray": {
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the file"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The file content of the file"
        }
      }
    },
    "DocumentArrayExcel": {
      "required": [
        "fileContent",
        "fileName"
      ],
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the source file, the file extension is mandatory: 'file.xlsx' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The file content of the source file"
        },
        "sortPosition": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "important",
          "x-ms-summary": "Sort Position",
          "description": "Set the sort position within the document array"
        },
        "worksheetsToMerge": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Worksheets to Merge",
          "description": "Specify which worksheets from the source file should be included within the output"
        }
      }
    },
    "DocumentArrayPresentation": {
      "required": [
        "fileContent",
        "fileName"
      ],
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the source file, the file extension is mandatory: 'file.pptx' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The file content of the source file"
        },
        "sortPosition": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "important",
          "x-ms-summary": "Sort Position",
          "description": "Set the sort position within the document array"
        },
        "slidesToMerge": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "x-ms-visibility": "important",
          "x-ms-summary": "Slides",
          "description": "Specify which slides to include in the output"
        }
      }
    },
    "DocumentArrayWord": {
      "required": [
        "fileContent",
        "fileName"
      ],
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the source file, the file extension is mandatory: 'file.docx' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The file content of the source file"
        },
        "sortPosition": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "important",
          "x-ms-summary": "Sort Position",
          "description": "Set the sort position within the document array"
        },
        "wordInputFormatMode": {
          "default": "KeepSourceFormatting",
          "enum": [
            "KeepSourceFormatting",
            "KeepDifferentStyles",
            "UseDestinationStyles"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Format Mode",
          "description": "Set how formatting is handled when documents are merged into the first document in the array."
        }
      }
    },
    "DtoAddHtmlHeaderFooter": {
      "required": [
        "FileName",
        "htmlHeaderFooter",
        "htmlHeaderFooterLocation"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "htmlHeaderFooter": {
          "type": "string",
          "x-ms-summary": "HTML Header / Footer",
          "description": "The HTML to embed as a header or footer within the document"
        },
        "htmlHeaderFooterLocation": {
          "enum": [
            "Header",
            "Footer",
            "Both"
          ],
          "type": "string",
          "x-ms-summary": "Location",
          "description": "Set whether the HTML should be added to the header, footer of both locations."
        },
        "skipFirstPage": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Skip First Page",
          "description": "Set whether to ignore the first page when the header / footers are added."
        },
        "marginTop": {
          "format": "double",
          "default": 0,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Top Margin",
          "description": "Set the top margin value (mm)."
        },
        "marginBottom": {
          "format": "double",
          "default": 0,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Bottom Margin",
          "description": "Set the bottom margin value (mm)."
        },
        "marginRight": {
          "format": "double",
          "default": 0,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Right Margin",
          "description": "Set the right margin value (mm)."
        },
        "marginLeft": {
          "format": "double",
          "default": 0,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Left Margin",
          "description": "Set the left margin value (mm)."
        },
        "applyTo": {
          "default": "AllPages",
          "enum": [
            "FirstPage",
            "AllPages",
            "LastPage",
            "Specific"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Apply To",
          "description": "Set which pages within the PDF document to apply the HTML header or footer."
        },
        "pageNumbers": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Page Numbers",
          "description": "Specify the page numbers where the HTML header or footer should be applied, this property only applies when the 'Apply To' property is set to 'Specific'."
        },
        "ignorePageNumbers": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Ignore Page Numbers",
          "description": "Specify the page numbers where the HTML header or footer should not applied, this property only applies when the 'Apply To' property is set to 'Specific'."
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "finalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoAddImageWatermark": {
      "required": [
        "FileName",
        "watermarkFileContent",
        "watermarkFilename"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "watermarkFilename": {
          "type": "string",
          "x-ms-summary": "Watermark Filename",
          "description": "The filename for the watermark image file, the file extension is mandatory: 'file.jpg' and not 'file'"
        },
        "watermarkFileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "Watermark File Content",
          "description": "The content of the watermark image file"
        },
        "skipFirstPage": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Skip First Page",
          "description": "Set whether to skip applying the watermark to the first page."
        },
        "Orientation": {
          "default": "Horizontal",
          "enum": [
            "Vertical",
            "Horizontal",
            "Diagonal"
          ],
          "type": "string",
          "x-ms-summary": "Orientation",
          "description": "The orientation of the image to embed as a watermark within the document"
        },
        "Opacity": {
          "format": "float",
          "default": 0.7,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Opacity",
          "description": "The opacity of the text watermark, valid values range from 0.0+ to 1.0, the default value is 1.0"
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoAddImageWatermarkAdv": {
      "required": [
        "FileName",
        "watermarkFileContent",
        "watermarkFilename"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "watermarkFilename": {
          "type": "string",
          "x-ms-summary": "Watermark Filename",
          "description": "The filename for the watermark image file, the file extension is mandatory: 'file.jpg' and not 'file'"
        },
        "watermarkFileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "Watermark File Content",
          "description": "The content of the watermark image file"
        },
        "skipFirstPage": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Skip First Page",
          "description": "Set whether to skip applying the watermark to the first page."
        },
        "applyTo": {
          "default": "AllPages",
          "enum": [
            "FirstPage",
            "AllPages",
            "LastPage",
            "Specific"
          ],
          "type": "string",
          "x-ms-summary": "Apply To",
          "description": "Set where in the document to apply the watermark."
        },
        "pageNumbers": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "x-ms-summary": "Page Numbers",
          "description": "Specify the page numbers where the watermark should be applied, this only applies when the 'Apply To' property is set to 'Specific'."
        },
        "ignorePageNumbers": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "x-ms-summary": "Ignore Page Numbers",
          "description": "Specify the page numbers where the watermark should not applied, this property only applies when the 'Apply To' property is set to 'Specific'."
        },
        "opacity": {
          "format": "float",
          "default": 0.7,
          "type": "number",
          "x-ms-summary": "Watermark Opacity",
          "description": "The opacity of the text watermark, valid values range from 0.0+ to 1.0, the default value is 1.0"
        },
        "rotationAngle": {
          "format": "float",
          "default": 0,
          "type": "number",
          "x-ms-summary": "Rotation Angle",
          "description": "Set the rotation angle of the image watermark in degrees."
        },
        "quality": {
          "format": "int32",
          "default": 100,
          "type": "integer",
          "x-ms-summary": "Quality",
          "description": "Set the quality of the image watermark from 1 to 100."
        },
        "imageXOffset": {
          "format": "float",
          "default": 0,
          "type": "number"
        },
        "imageYOffSet": {
          "format": "float",
          "default": 0,
          "type": "number"
        },
        "scale": {
          "format": "float",
          "default": 1,
          "type": "number",
          "x-ms-summary": "Scale",
          "description": "Set the multiple to either reduce (less than 1.0) or increase the size of the image (greater than 1.0), for example: 1.2 is equal to 120%, and 0.7 is equal to 70%."
        },
        "addToBackground": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Add to Background",
          "description": "If set to 'true' the watermark image will be added to the background of the page."
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoAddImageWatermarkWord": {
      "required": [
        "fileContent",
        "fileName",
        "watermarkFileContent",
        "watermarkFilename"
      ],
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source Microsoft Word file, the file extension is mandatory: 'file.docx' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source Microsoft Word file"
        },
        "watermarkFilename": {
          "type": "string",
          "x-ms-summary": "Watermark Filename",
          "description": "The filename for the watermark image file, the file extension is mandatory: 'file.jpg' and not 'file'"
        },
        "watermarkFileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "Watermark File Content",
          "description": "The content of the watermark image file"
        },
        "cultureName": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Culture Name",
          "description": "Change the thread culture used to process the request"
        },
        "scale": {
          "format": "double",
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Scale",
          "description": "Set the scale factor expressed as a fraction of the image. The default value is 1, valid values range from 0 to 65.5"
        },
        "isSemiTransparent": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Semi Transparent",
          "description": "Set whether the text watermark should be semi transparent"
        }
      }
    },
    "DtoAddPageNumbers": {
      "required": [
        "FileName"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "StartPage": {
          "format": "int32",
          "default": 1,
          "type": "integer",
          "x-ms-summary": "Start Page",
          "description": "Set which page to start adding page number(s) from."
        },
        "StartNumber": {
          "format": "int32",
          "default": 1,
          "type": "integer",
          "x-ms-summary": "Start Number",
          "description": "Set the starting number for the page number(s) added to the document."
        },
        "PageNumberFormat": {
          "default": "[PageNumber] of [TotalPages]",
          "type": "string",
          "x-ms-summary": "Page Number Format",
          "description": "Set the format of the page number(s) added to the document, where [PageNumber] is replaced by the current page number and [TotalPages] is replaced by the total number of pages."
        },
        "HorizontalAlignment": {
          "default": "Center",
          "enum": [
            "None",
            "Left",
            "Center",
            "Right",
            "Justify",
            "FullJustify"
          ],
          "type": "string",
          "x-ms-summary": "Horizontal Alignment",
          "description": "Set the horizontal alignment of the page number(s) added to the document, the default value is Center."
        },
        "CustomNumberFormat": {
          "default": "",
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Custom Number Format",
          "description": "Set a custom number format, for example '{0:00000}' would generate 00001"
        },
        "MarginTop": {
          "format": "double",
          "default": 20,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Margin - Top",
          "description": "Set the top margin value (pt). The default value is set to 20."
        },
        "MarginRight": {
          "format": "double",
          "default": 20,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Margin - Right",
          "description": "Set the right margin value(pt). The default value is set to 20."
        },
        "MarginBottom": {
          "format": "double",
          "default": 20,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Margin - Bottom",
          "description": "Set the bottom margin value (pt). The default value is set to 20."
        },
        "MarginLeft": {
          "format": "double",
          "default": 20,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Margin - Left",
          "description": "Set the left margin value (pt). The default value is set to 20."
        },
        "AddToBackground": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Add to Background",
          "description": "Set whether the page number(s) should be added to top or bottom layer of the PDF document. The default setting (false) adds the page number(s) to the top layer."
        },
        "Font": {
          "default": "Arial",
          "type": "string"
        },
        "FontColour": {
          "default": "#000000",
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Font Colour",
          "description": "Set the HTML colour of the font, the default colour is set to #000000."
        },
        "FontSize": {
          "format": "int32",
          "default": 14,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Font Size",
          "description": "Set the size of the font, the default size is set to 14."
        },
        "Opacity": {
          "format": "float",
          "default": 1,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Opacity",
          "description": "Set the opacity of the page number(s), valid values range from 0.0+ to 1.0, the default value is 1.0"
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoAddTextWatermark": {
      "required": [
        "FileName",
        "Text"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "Text": {
          "type": "string",
          "x-ms-summary": "Text",
          "description": "The text to embed as a watermark within the document"
        },
        "skipFirstPage": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Skip First Page",
          "description": "Set whether to skip applying the watermark to the first page."
        },
        "Orientation": {
          "default": "Horizontal",
          "enum": [
            "Vertical",
            "Horizontal",
            "Diagonal"
          ],
          "type": "string",
          "x-ms-summary": "Orientation",
          "description": "The orientation of the text to embed as a watermark within the document"
        },
        "Font": {
          "default": "Arial",
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Font",
          "description": "The font applied to the text watermark, the default font is set to Arial."
        },
        "TextColour": {
          "default": "#E81123",
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Text Colour",
          "description": "The HTML colour applied to the text watermark, the default colour is set to #E81123."
        },
        "TextSize": {
          "format": "int32",
          "default": 34,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Text Size",
          "description": "The size of the font applied to the text watermark, the default size is set to 34."
        },
        "Opacity": {
          "format": "float",
          "default": 1,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Opacity",
          "description": "The opacity of the text watermark, valid values range from 0.0+ to 1.0, the default value is 1.0"
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoAddTextWatermarkAdv": {
      "required": [
        "FileName",
        "Text"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "Text": {
          "type": "string",
          "x-ms-summary": "Text",
          "description": "The text to embed as a watermark within the document. Add carriage return control characters (backslash r) to manually split text onto new lines."
        },
        "skipFirstPage": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Skip First Page",
          "description": "Set whether to skip applying the watermark to the first page."
        },
        "ApplyTo": {
          "default": "AllPages",
          "enum": [
            "FirstPage",
            "AllPages",
            "LastPage",
            "Specific"
          ],
          "type": "string",
          "x-ms-summary": "Apply To",
          "description": "Set where in the document to apply the watermark."
        },
        "pageNumbers": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "x-ms-summary": "Page Numbers",
          "description": "Specify the page numbers where the watermark should be applied, this proporty only applies when the 'Apply To' property is set to 'Specific'."
        },
        "ignorePageNumbers": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "x-ms-summary": "Ignore Page Numbers",
          "description": "Specify the page numbers where the watermark should not applied, this property only applies when the 'Apply To' property is set to 'Specific'."
        },
        "Font": {
          "default": "Arial",
          "type": "string",
          "x-ms-summary": "Font",
          "description": "The font applied to the text watermark, the default font is set to Arial."
        },
        "TextColour": {
          "default": "#E81123",
          "type": "string",
          "x-ms-summary": "Text Colour",
          "description": "The HTML colour applied to the text watermark, the default colour is set to #E81123."
        },
        "TextSize": {
          "format": "int32",
          "default": 34,
          "type": "integer",
          "x-ms-summary": "Text Size",
          "description": "The size of the font applied to the text watermark, the default size is set to 34."
        },
        "Opacity": {
          "format": "float",
          "default": 1,
          "type": "number",
          "x-ms-summary": "Opacity",
          "description": "The opacity of the text watermark, valid values range from 0.0+ to 1.0, the default value is 1.0"
        },
        "EncodingType": {
          "default": "Winansi",
          "enum": [
            "Identity_h",
            "Identity_v",
            "Cp1250",
            "Cp1252",
            "Cp1257",
            "Winansi",
            "Macroman"
          ],
          "type": "string",
          "x-ms-summary": "Encoding Type",
          "description": "The encoding type to apply to the text watermark."
        },
        "HorizontalAlignment": {
          "default": "Center",
          "enum": [
            "None",
            "Left",
            "Center",
            "Right",
            "Justify",
            "FullJustify"
          ],
          "type": "string",
          "x-ms-summary": "Horizontal Alignment",
          "description": "Set the horizontal alignment of the watermark, the default value is Center."
        },
        "VerticalAlignment": {
          "default": "Center",
          "enum": [
            "None",
            "Top",
            "Center",
            "Bottom"
          ],
          "type": "string",
          "x-ms-summary": "Vertical Alignment",
          "description": "Set the vertical alignment of the watermark, the default value is Center."
        },
        "TextAlignment": {
          "default": "Center",
          "enum": [
            "None",
            "Left",
            "Center",
            "Right",
            "Justify",
            "FullJustify"
          ],
          "type": "string",
          "x-ms-summary": "Text Alignment",
          "description": "Set the text alignment of the watermark, the default value is Center."
        },
        "RotationAngle": {
          "format": "float",
          "default": 0,
          "type": "number",
          "x-ms-summary": "Rotation Angle",
          "description": "Set the rotation angle of the text watermark."
        },
        "TextWrap": {
          "default": true,
          "type": "boolean",
          "x-ms-summary": "Text Wrap",
          "description": "Set whether the text watermark should automatically wrap."
        },
        "TextWrapRowWidth": {
          "format": "double",
          "default": 0,
          "type": "number",
          "x-ms-summary": "Text Wrap Row Width",
          "description": "Set the row width applied when the watermark is set to automatically wrap."
        },
        "AutoScale": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Auto Scale",
          "description": "Set the whether the text should be automatically sized to fit the width of the container."
        },
        "AutoScaleWidth": {
          "format": "double",
          "default": 0,
          "type": "number",
          "x-ms-summary": "Auto Scale Text Width",
          "description": "Set the width of the watermark container when automatic scaling is enabled."
        },
        "AutoScaleHeight": {
          "format": "double",
          "default": 0,
          "type": "number",
          "x-ms-summary": "Auto Scale Text Height",
          "description": "Set the height of the watermark container when automatic scaling is enabled."
        },
        "TextLayer": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Text Layer",
          "description": "Set whether the watermark should be added to the top or bottom layer. If 'True' the watermark is added to the bottom layer."
        },
        "YIndent": {
          "format": "double",
          "default": 0,
          "type": "number",
          "x-ms-summary": "Y Indent",
          "description": "Set the vertical watermark indent, starting from the bottom and overriding the VerticalAlignment property."
        },
        "XIndent": {
          "format": "double",
          "default": 0,
          "type": "number",
          "x-ms-summary": "X Indent",
          "description": "Set the horizontal watermark indent, starting from the left and overriding the HorizontalAlignment property."
        },
        "watermarkApplyAsImage": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Apply as an Image",
          "description": "Set whether the text watermark should be added as text or an image."
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoAddTextWatermarkToImage": {
      "required": [
        "FileName",
        "FinalOperation",
        "Text"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source image file, the file extension is mandatory: 'file.jpg' and not 'file'"
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source image file"
        },
        "Text": {
          "type": "string",
          "x-ms-summary": "Text",
          "description": "The text to embed as a watermark within the image"
        },
        "WatermarkPosition": {
          "default": "BottomLeft",
          "enum": [
            "BottomLeft",
            "TopLeft",
            "BottomRight",
            "TopRight",
            "CentreHorizontal",
            "CentreVertical",
            "Diagonal"
          ],
          "type": "string",
          "x-ms-summary": "Watermark Position",
          "description": "The position of the text to embed as a watermark within the image"
        },
        "Font": {
          "default": "Arial",
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Font",
          "description": "The font applied to the text watermark, the default font is set to Arial."
        },
        "TextColour": {
          "default": "#E81123",
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Text Colour",
          "description": "The HTML colour applied to the text watermark, the default colour is set to #E81123."
        },
        "TextSize": {
          "format": "int32",
          "default": 10,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Text Size",
          "description": "The size of the font applied to the text watermark, the default size is set to 10."
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoAddTextWatermarkWord": {
      "required": [
        "fileContent",
        "fileName",
        "text"
      ],
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source Microsoft Word file, the file extension is mandatory: 'file.docx' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source Microsoft Word file"
        },
        "text": {
          "type": "string",
          "x-ms-summary": "Text",
          "description": "The text to embed as a watermark within the Microsoft Word file"
        },
        "orientation": {
          "default": "Horizontal",
          "enum": [
            "Horizontal",
            "Diagonal"
          ],
          "type": "string",
          "x-ms-summary": "Orientation",
          "description": "Set the orientation of the text watermark"
        },
        "cultureName": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Culture Name",
          "description": "Change the thread culture used to process the request"
        },
        "font": {
          "default": "Calibri",
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Font",
          "description": "Set the font type applied to the text watermark, the default font is set to Calibri"
        },
        "textColour": {
          "default": "#808080",
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Text Colour",
          "description": "Set the HTML colour applied to the text watermark, the default colour is set to #808080 (Grey)"
        },
        "textSize": {
          "format": "int32",
          "default": 0,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Text Size",
          "description": "Set the font size applied to the text watermark, The default size is set to 0 (Auto)"
        },
        "isSemiTransparent": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Semi Transparent",
          "description": "Set whether the text watermark should be semi transparent"
        }
      }
    },
    "DtoBaseMgmtResponse": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoBasicConversion": {
      "required": [
        "fileContent",
        "FileName",
        "outputFilename"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the source file, the file extension is mandatory: 'file.xlsx' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The file content of the source file"
        },
        "outputFilename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "PDF Filename",
          "description": "The filename of the output PDF document"
        },
        "removeDocumentMarkup": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Markup",
          "description": "Set MS Office document comments and tracked changes removal option"
        },
        "pdfaCompliance": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliant",
          "description": "Set PDF/A Compliance option"
        },
        "pdfaComplianceLevel": {
          "default": "PDF_A_2A",
          "enum": [
            "PDF_A_1A",
            "PDF_A_1B",
            "PDF_A_2A",
            "PDF_A_3A",
            "PDF_A_2B",
            "PDF_A_2U",
            "PDF_A_3B",
            "PDF_A_3U",
            "v_1_3",
            "v_1_4",
            "v_1_5",
            "v_1_6",
            "v_1_7",
            "PDF_X_1A",
            "PDF_X_3"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliance Level",
          "description": "Set the PDF/A Compliance Level, the default value is PDF_A_2A."
        },
        "GenerateBookmarks": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Generate Bookmarks",
          "description": "Set whether bookmarks should be automatically created for Microsoft Word documents which are converted to PDF."
        },
        "CultureName": {
          "default": "en-US",
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Culture Name",
          "description": "Change the thread culture used to process the request."
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoCompareWordDocuments": {
      "required": [
        "fileContentOne",
        "fileContentTwo"
      ],
      "type": "object",
      "properties": {
        "fileContentOne": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content - One",
          "description": "The file content of the first Microsoft Word or PDF file to compare."
        },
        "fileContentTwo": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content - Two",
          "description": "The file content of the second Microsoft Word or PDF file to compare."
        },
        "author": {
          "default": "Encodian",
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Author",
          "description": "Set the name of the author used to denote differences in the output document."
        },
        "ignoreFormatting": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Ignore Formatting",
          "description": "Specifies whether to ignore document formatting differences"
        },
        "caseInsensitive": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Case Insensitive",
          "description": "Specifies whether to compare differences in documents as case insensitive"
        },
        "ignoreComments": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Ignore Comments",
          "description": "Specifies whether to compare differences in comments"
        },
        "ignoreTables": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Ignore Tables",
          "description": "Specifies whether to compare the differences in data contained in tables"
        },
        "ignoreFields": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Ignore Fields",
          "description": "Specifies whether to compare differences in fields. By default fields"
        },
        "ignoreFootnotes": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Ignore Footnotes",
          "description": "Specifies whether to compare differences in footnotes and endnotes"
        },
        "ignoreTextboxes": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Ignore Textboxes",
          "description": "Specifies whether to compare differences in the data contained within text boxes"
        },
        "ignoreHeadersAndFooters": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Ignore Headers and Footers",
          "description": "Specifies whether to compare differences in the data contained within headers and footers"
        }
      }
    },
    "DtoCompressPdf": {
      "required": [
        "fileContent"
      ],
      "type": "object",
      "properties": {
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "compressImages": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Compress Images",
          "description": "Contained images will be compressed, aligned to the value of the 'Image Quality' property"
        },
        "imageQuality": {
          "format": "int32",
          "default": 80,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Image Quality",
          "description": "Sets the quality for compressed images: 1 > 100"
        },
        "maxResolution": {
          "format": "int32",
          "default": 150,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Max Resolution",
          "description": "Specifies the maximum resolution of images (dpi), if the image has a higher resolution it will be scaled dynamically."
        },
        "resizeImages": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Resize Images",
          "description": "If 'Compress Images' and 'Resize Images' are enabled, images will be resized where the image resolution is greater than the specified 'Max Resolution' property."
        },
        "removePrivateInfo": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Private Info",
          "description": "Remove private information from the PDF document, i.e. page piece information."
        },
        "removeUnusedObjects": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Unused Objects",
          "description": "Remove all unused objects (i.e. objects which do not have a reference) are removed from PDF document."
        },
        "removeUnusedStreams": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Unused Streams",
          "description": "Remove all unused resources from the PDF document."
        },
        "linkDuplicateStreams": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Link Duplicate Streams",
          "description": "Link duplicate streams and store them as a single object. This can decrease document size in some cases (for example, where the same document was merged multiple times)."
        },
        "allowReusePageContent": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Allow Reuse Page Content",
          "description": "Page contents will be reused when the PDF document is optimized for equal pages."
        },
        "unembedFonts": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Unembed Fonts",
          "description": "Remove all embedded fonts. The document size will decrease but the document may become unreadable if the correct font is not installed on the user's machine."
        },
        "flattenAnnotations": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Flatten Annotations",
          "description": "Flatten all annotations contained within the PDF document."
        },
        "deleteAnnotations": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Delete Annotations",
          "description": "Delete all annotations contained within the PDF document."
        },
        "flattenFields": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Flatten Fields",
          "description": "Flatten all fields contained within the PDF document (AcroForms only)."
        }
      }
    },
    "DtoConvertCad": {
      "required": [
        "fileContent",
        "fileName",
        "outputFilename",
        "outputFormat"
      ],
      "type": "object",
      "properties": {
        "outputFilename": {
          "default": "cad",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Output Filename",
          "description": "The filename of the output document"
        },
        "fileName": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the source file, the file extension is mandatory: 'file.dwg' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The file content of the source CAD file"
        },
        "outputFormat": {
          "enum": [
            "PDF",
            "BMP",
            "GIF",
            "JPG",
            "PNG",
            "TIFF"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Output Format",
          "description": "The format of the output file"
        },
        "pageWidth": {
          "format": "float",
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Page Width",
          "description": "Set the width of the page"
        },
        "pageHeight": {
          "format": "float",
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Page Height",
          "description": "Set the height of the page"
        },
        "backgroundColour": {
          "default": "White",
          "enum": [
            "AliceBlue",
            "AntiqueWhite",
            "Aqua",
            "Aquamarine",
            "Azure",
            "Beige",
            "Bisque",
            "Black",
            "BlanchedAlmond",
            "Blue",
            "BlueViolet",
            "Brown",
            "BurlyWood",
            "CadetBlue",
            "Chartreuse",
            "Chocolate",
            "Coral",
            "CornflowerBlue",
            "Cornsilk",
            "Crimson",
            "Cyan",
            "DarkBlue",
            "DarkCyan",
            "DarkGoldenrod",
            "DarkGray",
            "DarkGreen",
            "DarkKhaki",
            "DarkMagenta",
            "DarkOliveGreen",
            "DarkOrange",
            "DarkOrchid",
            "DarkRed",
            "DarkSalmon",
            "DarkSeaGreen",
            "DarkSlateBlue",
            "DarkSlateGray",
            "DarkTurquoise",
            "DarkViolet",
            "DeepPink",
            "DeepSkyBlue",
            "DimGray",
            "DodgerBlue",
            "Firebrick",
            "FloralWhite",
            "ForestGreen",
            "Fuchsia",
            "Gainsboro",
            "GhostWhite",
            "Gold",
            "Goldenrod",
            "Gray",
            "Green",
            "GreenYellow",
            "Honeydew",
            "HotPink",
            "IndianRed",
            "Indigo",
            "Ivory",
            "Khaki",
            "Lavender",
            "LavenderBlush",
            "LawnGreen",
            "LemonChiffon",
            "LightBlue",
            "LightCoral",
            "LightCyan",
            "LightGoldenrodYellow",
            "LightGray",
            "LightGreen",
            "LightPink",
            "LightSalmon",
            "LightSeaGreen",
            "LightSkyBlue",
            "LightSlateGray",
            "LightSteelBlue",
            "LightYellow",
            "Lime",
            "LimeGreen",
            "Linen",
            "Magenta",
            "Maroon",
            "MediumAquamarine",
            "MediumBlue",
            "MediumOrchid",
            "MediumPurple",
            "MediumSeaGreen",
            "MediumSlateBlue",
            "MediumSpringGreen",
            "MediumTurquoise",
            "MediumVioletRed",
            "MidnightBlue",
            "MintCream",
            "MistyRose",
            "Moccasin",
            "NavajoWhite",
            "Navy",
            "OldLace",
            "Olive",
            "OliveDrab",
            "Orange",
            "OrangeRed",
            "Orchid",
            "PaleGoldenrod",
            "PaleGreen",
            "PaleTurquoise",
            "PaleVioletRed",
            "PapayaWhip",
            "PeachPuff",
            "Peru",
            "Pink",
            "Plum",
            "PowderBlue",
            "Purple",
            "Red",
            "RosyBrown",
            "RoyalBlue",
            "SaddleBrown",
            "Salmon",
            "SandyBrown",
            "SeaGreen",
            "SeaShell",
            "Sienna",
            "Silver",
            "SkyBlue",
            "SlateBlue",
            "SlateGray",
            "Snow",
            "SpringGreen",
            "SteelBlue",
            "Tan",
            "Teal",
            "Thistle",
            "Tomato",
            "Transparent",
            "Turquoise",
            "Violet",
            "Wheat",
            "White",
            "WhiteSmoke",
            "Yellow",
            "YellowGreen"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Background Colour",
          "description": "Set the background colour"
        },
        "drawType": {
          "default": "UseDrawColor",
          "enum": [
            "UseDrawColor",
            "UseObjectColor"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Draw Type",
          "description": "Sets whether to override the original colours"
        },
        "drawColour": {
          "default": "Black",
          "enum": [
            "AliceBlue",
            "AntiqueWhite",
            "Aqua",
            "Aquamarine",
            "Azure",
            "Beige",
            "Bisque",
            "Black",
            "BlanchedAlmond",
            "Blue",
            "BlueViolet",
            "Brown",
            "BurlyWood",
            "CadetBlue",
            "Chartreuse",
            "Chocolate",
            "Coral",
            "CornflowerBlue",
            "Cornsilk",
            "Crimson",
            "Cyan",
            "DarkBlue",
            "DarkCyan",
            "DarkGoldenrod",
            "DarkGray",
            "DarkGreen",
            "DarkKhaki",
            "DarkMagenta",
            "DarkOliveGreen",
            "DarkOrange",
            "DarkOrchid",
            "DarkRed",
            "DarkSalmon",
            "DarkSeaGreen",
            "DarkSlateBlue",
            "DarkSlateGray",
            "DarkTurquoise",
            "DarkViolet",
            "DeepPink",
            "DeepSkyBlue",
            "DimGray",
            "DodgerBlue",
            "Firebrick",
            "FloralWhite",
            "ForestGreen",
            "Fuchsia",
            "Gainsboro",
            "GhostWhite",
            "Gold",
            "Goldenrod",
            "Gray",
            "Green",
            "GreenYellow",
            "Honeydew",
            "HotPink",
            "IndianRed",
            "Indigo",
            "Ivory",
            "Khaki",
            "Lavender",
            "LavenderBlush",
            "LawnGreen",
            "LemonChiffon",
            "LightBlue",
            "LightCoral",
            "LightCyan",
            "LightGoldenrodYellow",
            "LightGray",
            "LightGreen",
            "LightPink",
            "LightSalmon",
            "LightSeaGreen",
            "LightSkyBlue",
            "LightSlateGray",
            "LightSteelBlue",
            "LightYellow",
            "Lime",
            "LimeGreen",
            "Linen",
            "Magenta",
            "Maroon",
            "MediumAquamarine",
            "MediumBlue",
            "MediumOrchid",
            "MediumPurple",
            "MediumSeaGreen",
            "MediumSlateBlue",
            "MediumSpringGreen",
            "MediumTurquoise",
            "MediumVioletRed",
            "MidnightBlue",
            "MintCream",
            "MistyRose",
            "Moccasin",
            "NavajoWhite",
            "Navy",
            "OldLace",
            "Olive",
            "OliveDrab",
            "Orange",
            "OrangeRed",
            "Orchid",
            "PaleGoldenrod",
            "PaleGreen",
            "PaleTurquoise",
            "PaleVioletRed",
            "PapayaWhip",
            "PeachPuff",
            "Peru",
            "Pink",
            "Plum",
            "PowderBlue",
            "Purple",
            "Red",
            "RosyBrown",
            "RoyalBlue",
            "SaddleBrown",
            "Salmon",
            "SandyBrown",
            "SeaGreen",
            "SeaShell",
            "Sienna",
            "Silver",
            "SkyBlue",
            "SlateBlue",
            "SlateGray",
            "Snow",
            "SpringGreen",
            "SteelBlue",
            "Tan",
            "Teal",
            "Thistle",
            "Tomato",
            "Transparent",
            "Turquoise",
            "Violet",
            "Wheat",
            "White",
            "WhiteSmoke",
            "Yellow",
            "YellowGreen"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Draw Colour",
          "description": "Set the colour of the drawing"
        },
        "automaticLayoutsScaling": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Automatic Scaling",
          "description": "Set whether auto-layout scaling should be performed to matching the model layout"
        }
      },
      "x-ms-dynamic-schema": {
        "operationId": "GetDynamicSchemaConvertCad",
        "value-path": "dynamicSchemaConvertCad",
        "parameters": {
          "outputFormat": {
            "parameter": "outputFormatParameter"
          }
        }
      }
    },
    "DtoConvertExcel": {
      "required": [
        "fileContent",
        "fileName",
        "outputFilename",
        "outputFormat"
      ],
      "type": "object",
      "properties": {
        "outputFilename": {
          "default": "excel",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Output Filename",
          "description": "The filename of the output document"
        },
        "fileName": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the source file, the file extension is mandatory: 'file.xlsx' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The file content of the source file"
        },
        "outputFormat": {
          "enum": [
            "PDF",
            "HTML",
            "CSV",
            "TXT",
            "XLSX",
            "XLS",
            "PNG",
            "TIFF"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Output Format",
          "description": "Select the output file type format"
        },
        "worksheet": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Worksheet Name",
          "description": "Specify the name of a specific worksheet"
        },
        "onePagePerSheet": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "One Page Per Sheet",
          "description": "Place all sheets into one page"
        },
        "allColumnsInOnePagePerSheet": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "All Columns in One Page Per Sheet Name",
          "description": "Place each column of a sheet into its own page"
        },
        "removeDocumentMarkup": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Markup",
          "description": "Set MS Office document comments and tracked changes removal option"
        },
        "exportHiddenSheets": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Export Hidden Sheets",
          "description": "Set whether hidden worksheets should be exported"
        },
        "cultureName": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Culture Name",
          "description": "Change the thread culture used to process the request."
        },
        "generateBookmarks": {
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Generate Bookmarks",
          "description": "Set whether bookmarks should be automatically created for Microsoft Word documents which are converted to PDF."
        },
        "pdfaCompliance": {
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliant",
          "description": "Set whether the PDF document should be PDF/A compliant."
        },
        "pdfaComplianceLevel": {
          "enum": [
            "PDF_A_1A",
            "PDF_A_1B",
            "PDF_A_2A",
            "PDF_A_3A",
            "PDF_A_2B",
            "PDF_A_2U",
            "PDF_A_3B",
            "PDF_A_3U",
            "v_1_3",
            "v_1_4",
            "v_1_5",
            "v_1_6",
            "v_1_7",
            "PDF_X_1A",
            "PDF_X_3"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliance Level",
          "description": "Set the PDF/A Compliance Level"
        },
        "tiffCompression": {
          "enum": [
            "None",
            "Ccitt3",
            "Ccitt4",
            "Lzw",
            "Rle"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Compression",
          "description": "Set the compression type."
        }
      },
      "x-ms-dynamic-schema": {
        "operationId": "GetDynamicSchemaConvertExcel",
        "value-path": "dynamicSchemaConvertExcel",
        "parameters": {
          "outputFormat": {
            "parameter": "outputFormatParameter"
          }
        }
      }
    },
    "DtoConvertMailMessage": {
      "required": [
        "fileContent",
        "fileName",
        "outputFilename"
      ],
      "type": "object",
      "properties": {
        "outputFilename": {
          "default": "email.pdf",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "PDF Filename",
          "description": "The filename of the output PDF document"
        },
        "fileName": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the source file, the file extension is mandatory: 'file.msg' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The file content of the source file"
        },
        "mergeAttachments": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Merge Attachments",
          "description": "Set whether attachments should be automatically converted and merged with the output.pdf"
        },
        "generateBookmarks": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Generate Bookmarks",
          "description": "Set whether bookmarks should be automatically created for Microsoft Word documents which are converted to PDF."
        },
        "pdfaCompliance": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliant",
          "description": "Set PDF/A Compliance option"
        },
        "pdfaComplianceLevel": {
          "default": "PDF_A_2A",
          "enum": [
            "PDF_A_1A",
            "PDF_A_1B",
            "PDF_A_2A",
            "PDF_A_3A",
            "PDF_A_2B",
            "PDF_A_2U",
            "PDF_A_3B",
            "PDF_A_3U",
            "v_1_3",
            "v_1_4",
            "v_1_5",
            "v_1_6",
            "v_1_7",
            "PDF_X_1A",
            "PDF_X_3"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliance Level",
          "description": "Set the PDF/A Compliance Level, the default value is PDF_A_2A."
        },
        "cultureName": {
          "default": "en-US",
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Culture Name",
          "description": "Change the thread culture used to process the request."
        }
      }
    },
    "DtoConvertPdfToImages": {
      "required": [
        "fileContent",
        "imageFormat"
      ],
      "type": "object",
      "properties": {
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file."
        },
        "imageFormat": {
          "default": "PNG",
          "enum": [
            "JPG",
            "PNG"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Image Format",
          "description": "Set the format for the output image files"
        },
        "filenamePrefix": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename Prefix",
          "description": "The prefix filename for the output image files"
        },
        "resolution": {
          "format": "int32",
          "default": 300,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Resolution",
          "description": "Set the image resolution"
        }
      }
    },
    "DtoConvertPdfToTiff": {
      "required": [
        "fileContent"
      ],
      "type": "object",
      "properties": {
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file."
        },
        "outputFilename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the output TIFF file"
        },
        "resolution": {
          "format": "int32",
          "default": 300,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Resolution",
          "description": "Set the image resolution"
        },
        "tiffCompression": {
          "default": "LZW",
          "enum": [
            "None",
            "CCITT3",
            "CCITT4",
            "LZW",
            "RLE"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Compression",
          "description": "Set the compression type"
        },
        "pageOrientation": {
          "default": "Inherit",
          "enum": [
            "Inherit",
            "Portrait",
            "Landscape"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Page Orientation",
          "description": "Set the page orientation of the TIFF file"
        },
        "skipBlankPages": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Skip Blank Pages",
          "description": "Set whether blank pages should be skipped upon conversion"
        }
      }
    },
    "DtoConvertPdfToWord": {
      "required": [
        "fileName",
        "finalOperation",
        "outputFilename"
      ],
      "type": "object",
      "properties": {
        "fileName": {
          "default": "temp.pdf",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Filename",
          "description": "The filename of the source HTML file, the file extension is mandatory: 'file.html' and not 'file'"
        },
        "outputFilename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the output DOCX document"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file."
        },
        "mode": {
          "default": "Full",
          "enum": [
            "Full",
            "PreserveLayout"
          ],
          "type": "string",
          "x-ms-summary": "Conversion Mode",
          "description": ""
        },
        "recognizeBullets": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Recognize Bullets",
          "description": ""
        },
        "finalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Final Operation",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoConvertPowerPoint": {
      "required": [
        "fileContent",
        "fileName",
        "outputFilename",
        "outputFormat"
      ],
      "type": "object",
      "properties": {
        "outputFilename": {
          "default": "powerpoint",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Output Filename",
          "description": "The filename of the output document"
        },
        "outputFormat": {
          "enum": [
            "PDF",
            "HTML",
            "PPTX",
            "TXT",
            "PNG",
            "TIFF"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Output Format",
          "description": "Select the output file type format"
        },
        "fileName": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the source file, the file extension is mandatory: 'file.pptx' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The file content of the source file"
        },
        "slideOrientation": {
          "default": "Inherit",
          "enum": [
            "Inherit",
            "Portrait",
            "Landscape"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Slide Orientation",
          "description": "Manually set the presentations slide orientation."
        },
        "slideSize": {
          "default": "Inherit",
          "enum": [
            "Inherit",
            "Widescreen",
            "A3Paper",
            "A4Paper",
            "B4IsoPaper",
            "B4JisPaper",
            "B5IsoPaper",
            "B5JisPaper",
            "Banner",
            "HagakiCard",
            "Ledger",
            "LetterPaper",
            "OnScreen",
            "OnScreen16x10",
            "OnScreen16x9",
            "Overhead",
            "Slide35mm"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Slide Size",
          "description": "Manually set the presentations slide size."
        },
        "slideScale": {
          "default": "DoNotScale",
          "enum": [
            "DoNotScale",
            "EnsureFit",
            "Maximise"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Slide Scale",
          "description": "When changing the presentations size control how content should be scaled."
        },
        "showHiddenSlides": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Show Hidden Slides",
          "description": "Set whether hidden slides should be included."
        },
        "removeDocumentMarkup": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Markup",
          "description": "Set MS Office document comments and tracked changes removal option"
        },
        "cultureName": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Culture Name",
          "description": "Change the thread culture used to process the request."
        },
        "pdfaCompliance": {
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliant",
          "description": "Set whether the PDF document should be PDF/A compliant."
        },
        "pdfaComplianceLevel": {
          "enum": [
            "PDF_A_1A",
            "PDF_A_1B",
            "PDF_A_2A",
            "PDF_A_3A",
            "PDF_A_2B",
            "PDF_A_2U",
            "PDF_A_3B",
            "PDF_A_3U",
            "v_1_3",
            "v_1_4",
            "v_1_5",
            "v_1_6",
            "v_1_7",
            "PDF_X_1A",
            "PDF_X_3"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliance Level",
          "description": "Set the PDF/A Compliance Level"
        },
        "slideIndex": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "important",
          "x-ms-summary": "Slide Index",
          "description": "Set the slide within the document to convert to a PNG file."
        },
        "resolution": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "important",
          "x-ms-summary": "Resolution",
          "description": "Set the DPI (Dots per inch) of the PNG file."
        },
        "tiffCompression": {
          "enum": [
            "None",
            "Ccitt3",
            "Ccitt4",
            "Lzw",
            "Rle"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Compression",
          "description": "Set the compression type."
        }
      },
      "x-ms-dynamic-schema": {
        "operationId": "GetDynamicSchemaConvertPowerPoint",
        "value-path": "dynamicSchemaConvertPowerPoint",
        "parameters": {
          "outputFormat": {
            "parameter": "outputFormatParameter"
          }
        }
      }
    },
    "DtoConvertToPdfA": {
      "required": [
        "FileName"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "pdfaComplianceLevel": {
          "default": "PDF_A_2A",
          "enum": [
            "PDF_A_1A",
            "PDF_A_1B",
            "PDF_A_2A",
            "PDF_A_3A",
            "PDF_A_2B",
            "PDF_A_2U",
            "PDF_A_3B",
            "PDF_A_3U",
            "v_1_3",
            "v_1_4",
            "v_1_5",
            "v_1_6",
            "v_1_7",
            "PDF_X_1A",
            "PDF_X_3"
          ],
          "type": "string",
          "x-ms-summary": "PDF/A Compliance Level",
          "description": "Set the PDF/A Compliance Level, the default value is PDF_A_2A."
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoConvertWord": {
      "required": [
        "fileContent",
        "fileName",
        "outputFilename",
        "outputFormat"
      ],
      "type": "object",
      "properties": {
        "outputFilename": {
          "default": "word",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Output Filename",
          "description": "The filename of the output document"
        },
        "outputFormat": {
          "enum": [
            "PDF",
            "DOCX",
            "DOC",
            "RTF",
            "HTML",
            "TXT",
            "PNG",
            "TIFF"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Output Format",
          "description": "Select the output file type format"
        },
        "fileName": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the source file, the file extension is mandatory: 'file.docx' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The file content of the source file"
        },
        "pageOrientation": {
          "default": "Inherit",
          "enum": [
            "Inherit",
            "Portrait",
            "Landscape"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Page Orientation",
          "description": "Manually set the page orientation of the document."
        },
        "pageSize": {
          "default": "Inherit",
          "enum": [
            "Inherit",
            "A3",
            "A4",
            "A5",
            "B4",
            "B5",
            "EnvelopeDL",
            "Executive",
            "Folio",
            "Ledger",
            "Legal",
            "Letter",
            "Quarto",
            "Statement",
            "Tabloid"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Page Size",
          "description": "Manually set the page size of the document."
        },
        "removeDocumentMarkup": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Markup",
          "description": "Set MS Office document comments and tracked changes removal option"
        },
        "timezone": {
          "default": "Default",
          "enum": [
            "Default",
            "AUSCentralStandardTime",
            "AUSEasternStandardTime",
            "AfghanistanStandardTime",
            "AlaskanStandardTime",
            "AleutianStandardTime",
            "AltaiStandardTime",
            "ArabStandardTime",
            "ArabianStandardTime",
            "ArabicStandardTime",
            "ArgentinaStandardTime",
            "AstrakhanStandardTime",
            "AtlanticStandardTime",
            "AusCentralWStandardTime",
            "AzerbaijanStandardTime",
            "AzoresStandardTime",
            "BahiaStandardTime",
            "BangladeshStandardTime",
            "BelarusStandardTime",
            "BougainvilleStandardTime",
            "CanadaCentralStandardTime",
            "CapeVerdeStandardTime",
            "CaucasusStandardTime",
            "CenAustraliaStandardTime",
            "CentralAmericaStandardTime",
            "CentralAsiaStandardTime",
            "CentralBrazilianStandardTime",
            "CentralEuropeStandardTime",
            "CentralEuropeanStandardTime",
            "CentralPacificStandardTime",
            "CentralStandardTime",
            "CentralStandardTimeMexico",
            "ChathamIslandsStandardTime",
            "ChinaStandardTime",
            "CubaStandardTime",
            "DatelineStandardTime",
            "EAfricaStandardTime",
            "EAustraliaStandardTime",
            "EEuropeStandardTime",
            "ESouthAmericaStandardTime",
            "EasterIslandStandardTime",
            "EasternStandardTime",
            "EasternStandardTimeMexico",
            "EgyptStandardTime",
            "EkaterinburgStandardTime",
            "FLEStandardTime",
            "FijiStandardTime",
            "GMTStandardTime",
            "GTBStandardTime",
            "GeorgianStandardTime",
            "GreenlandStandardTime",
            "GreenwichStandardTime",
            "HaitiStandardTime",
            "HawaiianStandardTime",
            "IndiaStandardTime",
            "IranStandardTime",
            "IsraelStandardTime",
            "JordanStandardTime",
            "KaliningradStandardTime",
            "KamchatkaStandardTime",
            "KoreaStandardTime",
            "LibyaStandardTime",
            "LineIslandsStandardTime",
            "LordHoweStandardTime",
            "MagadanStandardTime",
            "MagallanesStandardTime",
            "MarquesasStandardTime",
            "MauritiusStandardTime",
            "MidAtlanticStandardTime",
            "MiddleEastStandardTime",
            "MontevideoStandardTime",
            "MoroccoStandardTime",
            "MountainStandardTime",
            "MountainStandardTimeMexico",
            "MyanmarStandardTime",
            "NCentralAsiaStandardTime",
            "NamibiaStandardTime",
            "NepalStandardTime",
            "NewZealandStandardTime",
            "NewfoundlandStandardTime",
            "NorfolkStandardTime",
            "NorthAsiaEastStandardTime",
            "NorthAsiaStandardTime",
            "NorthKoreaStandardTime",
            "OmskStandardTime",
            "PacificSAStandardTime",
            "PacificStandardTime",
            "PacificStandardTimeMexico",
            "PakistanStandardTime",
            "ParaguayStandardTime",
            "QyzylordaStandardTime",
            "RomanceStandardTime",
            "RussiaTimeZone10",
            "RussiaTimeZone11",
            "RussiaTimeZone3",
            "RussianStandardTime",
            "SAEasternStandardTime",
            "SAPacificStandardTime",
            "SAWesternStandardTime",
            "SEAsiaStandardTime",
            "SaintPierreStandardTime",
            "SakhalinStandardTime",
            "SamoaStandardTime",
            "SaoTomeStandardTime",
            "SaratovStandardTime",
            "SingaporeStandardTime",
            "SouthAfricaStandardTime",
            "SouthSudanStandardTime",
            "SriLankaStandardTime",
            "SudanStandardTime",
            "SyriaStandardTime",
            "TaipeiStandardTime",
            "TasmaniaStandardTime",
            "TocantinsStandardTime",
            "TokyoStandardTime",
            "TomskStandardTime",
            "TongaStandardTime",
            "TransbaikalStandardTime",
            "TurkeyStandardTime",
            "TurksAndCaicosStandardTime",
            "USEasternStandardTime",
            "USMountainStandardTime",
            "UTC",
            "UTC02",
            "UTC08",
            "UTC09",
            "UTC11",
            "UTC12",
            "UTC13",
            "UlaanbaatarStandardTime",
            "VenezuelaStandardTime",
            "VladivostokStandardTime",
            "VolgogradStandardTime",
            "WAustraliaStandardTime",
            "WCentralAfricaStandardTime",
            "WEuropeStandardTime",
            "WMongoliaStandardTime",
            "WestAsiaStandardTime",
            "WestBankStandardTime",
            "WestPacificStandardTime",
            "YakutskStandardTime",
            "YukonStandardTime"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Time Zone",
          "description": "Set a specific time zone for date and time processing"
        },
        "cultureName": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Culture Name",
          "description": "Change the thread culture used to process the request."
        },
        "generateBookmarks": {
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Generate Bookmarks",
          "description": "Set whether bookmarks should be automatically created."
        },
        "pdfaCompliance": {
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliant",
          "description": "Set whether the PDF document should be PDF/A compliant."
        },
        "pdfaComplianceLevel": {
          "enum": [
            "PDF_A_1A",
            "PDF_A_1B",
            "PDF_A_2A",
            "PDF_A_3A",
            "PDF_A_2B",
            "PDF_A_2U",
            "PDF_A_3B",
            "PDF_A_3U",
            "v_1_3",
            "v_1_4",
            "v_1_5",
            "v_1_6",
            "v_1_7",
            "PDF_X_1A",
            "PDF_X_3"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliance Level",
          "description": "Set the PDF/A Compliance Level"
        },
        "enableOpenType": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Enable OpenType",
          "description": "Enable the OpenType font format"
        },
        "convertToForm": {
          "type": "boolean"
        },
        "pageIndex": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "important",
          "x-ms-summary": "Page Index",
          "description": "Set the page within the document to convert to a PNG file."
        },
        "tiffCompression": {
          "enum": [
            "None",
            "Ccitt3",
            "Ccitt4",
            "Lzw",
            "Rle"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Compression",
          "description": "Set the compression type."
        }
      },
      "x-ms-dynamic-schema": {
        "operationId": "GetDynamicSchemaConvertWord",
        "value-path": "dynamicSchemaConvertWord",
        "parameters": {
          "outputFormat": {
            "parameter": "outputFormatParameter"
          }
        }
      }
    },
    "DtoCreateBarcode": {
      "type": "object",
      "properties": {
        "barcodeType": {
          "enum": [
            "AustraliaPost",
            "Aztec",
            "Codabar",
            "CodablockF",
            "Code11",
            "Code39Standard",
            "Code39Extended",
            "Code128",
            "Code16K",
            "DatabarExpanded",
            "DatabarExpandedStacked",
            "DatabarLimited",
            "DatabarOmniDirectional",
            "DatabarStacked",
            "DatabarStackedOmniDirectional",
            "DatabarTruncated",
            "DataMatrix",
            "DotCode",
            "EAN8",
            "EAN13",
            "GS1Code128",
            "GS1CodablockF",
            "Interleaved2of5",
            "ISBN",
            "ISMN",
            "ISSN",
            "ITF6",
            "ITF14",
            "MaxiCode",
            "Pdf417",
            "Planet",
            "Postnet",
            "Standard2of5",
            "UPCA",
            "UpcaGs1Code128Coupon",
            "UpcaGs1DatabarCoupon",
            "UPCE"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Barcode Type",
          "description": "Set the type of barcode to be produced"
        },
        "barcodeData": {
          "type": "string"
        },
        "barcodeImageFormat": {
          "enum": [
            "PNG",
            "JPG",
            "SVG",
            "BMP",
            "TIFF",
            "GIF"
          ],
          "type": "string"
        },
        "captionAbove": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Caption Above",
          "description": "Set the caption above the barcode."
        },
        "captionBelow": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Caption Below",
          "description": "Set the caption below the barcode."
        },
        "sizeMode": {
          "enum": [
            "None",
            "Nearest",
            "Fixed",
            "Interpolation"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Size Mode",
          "description": "Set the barcode auto sizing mode."
        },
        "height": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Height",
          "description": "Set the barcode height (pixels)."
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Width",
          "description": "Set the barcode width (pixels)."
        },
        "backColor": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Back Color",
          "description": "Set the barcode back color of the barcode. (HTML color format)."
        },
        "barHeight": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Bar Height",
          "description": "Set the height of the barcode bars (pixels)."
        },
        "barColor": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Bar Color",
          "description": "Set the color of the barcode bars (HTML color format)."
        },
        "filledBars": {
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Filled Bars",
          "description": "Set whether the barcode bars are a filled."
        },
        "borderColor": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Border Color",
          "description": "Set the barcode border color (HTML color format)"
        },
        "borderStyle": {
          "enum": [
            "Dash",
            "DashDot",
            "DashDotDot",
            "Dot",
            "Solid"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Border Style",
          "description": "Set the barcode code border style"
        },
        "borderVisible": {
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Border Visible",
          "description": "Set whether the barcode border is visible or not."
        },
        "borderWidth": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Border Width",
          "description": "Set width of the barcode border (pixels)."
        },
        "paddingBottom": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Padding Bottom",
          "description": "Set bottom padding of the barcode (pixels)."
        },
        "paddingTop": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Padding Top",
          "description": "Set top padding of the barcode (pixels)."
        },
        "paddingLeft": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Padding Left",
          "description": "Set left padding of the barcode (pixels)."
        },
        "paddingRight": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Padding Right",
          "description": "Set right padding of the barcode (pixels)."
        },
        "resolution": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Resolution",
          "description": "Set the barcode code border image resolution (dpi)"
        },
        "rotationangle": {
          "format": "float",
          "default": 0,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Rotation Angle",
          "description": "Set the barcode rotation angle measure in degrees, for best results use 0, 90, 180 or 270."
        },
        "xDimension": {
          "format": "float",
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "X Dimension",
          "description": "Set minimum width of the barcode bars (pixels)."
        },
        "aspectRatio": {
          "format": "float",
          "default": 1,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Aspect Ratio",
          "description": "Set the aspect ratio of the barcode"
        },
        "columns": {
          "format": "int32",
          "default": 10,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Columns",
          "description": "Set the number of columns."
        },
        "rows": {
          "format": "int32",
          "default": 10,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Rows",
          "description": "Set the number of rows."
        },
        "codeTextEncoding": {
          "default": "UTF8",
          "enum": [
            "Default",
            "Latin1",
            "BigEndianUnicode",
            "UTF16",
            "UTF8",
            "UTF7",
            "ASCII"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Code Text Encoding",
          "description": "Set Encoding of the text."
        },
        "itfBorderThickness": {
          "format": "int32",
          "default": 1,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "ITF Border Thickness",
          "description": "Set the border thickness for ITF barcodes (pt)."
        },
        "itfBorderType": {
          "default": "Bar",
          "enum": [
            "None",
            "Frame",
            "Bar",
            "FrameOut",
            "BarOut"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "ITF Border Type",
          "description": "Set the border type for ITF barcodes."
        },
        "quietZoneCoef": {
          "format": "int32",
          "default": 10,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Quiet Zone Coefficient",
          "description": "Set the quiet zone coefficient as a mulitple of the X Dimension for ITF barcodes."
        },
        "postalShortBarHeight": {
          "format": "int32",
          "default": 20,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Postal Short Bar Height",
          "description": "Set the short bar height of Postal barcodes"
        },
        "wideNarrowRatio": {
          "format": "float",
          "default": 3,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Wide Narrow Ratio",
          "description": "Set the ratio of wide bars to narrow bars (default 3 i.e. Wide bars are 3 times wider than narrow bars)."
        },
        "supplementData": {
          "default": "",
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Supplement Data",
          "description": "Set the supplement data that follows the barcode."
        },
        "supplementSpace": {
          "format": "int32",
          "default": 0,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Supplement Space",
          "description": "Set the space between the main barcode and supplement barcode."
        },
        "australianPostEncodingTable": {
          "default": "Other",
          "enum": [
            "CTable",
            "NTable",
            "Other"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Encoding Table",
          "description": "Set encoding table type for an Australian Post barcode."
        },
        "australianPostShortBarHeight": {
          "format": "int32",
          "default": 120,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Short Bar Height",
          "description": "Set short bar height for an Australian Post barcode (pixels)."
        },
        "aztecErrorLevel": {
          "format": "int32",
          "default": 10,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Error Level",
          "description": "Set the error level protect for Aztec barcodes (value between 10-95)"
        },
        "aztecSymbolMode": {
          "default": "Auto",
          "enum": [
            "Auto",
            "Compact",
            "FullRange",
            "Rune"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Symbol Mode",
          "description": "Set the Aztec symbol mode for Aztec barcodes."
        },
        "codabarChecksumMode": {
          "default": "Mod16",
          "enum": [
            "Mod10",
            "Mod16"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Checksum Mode",
          "description": "Set the checksum mode for Codabar barcodes."
        },
        "codabarStartSymbol": {
          "default": "A",
          "enum": [
            "A",
            "B",
            "C",
            "D"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Start Symbol",
          "description": "Set the start symbol for Codabar barcodes."
        },
        "codabarStopSymbol": {
          "default": "B",
          "enum": [
            "A",
            "B",
            "C",
            "D"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Stop Symbol",
          "description": "Set the stop symbol for Codabar barcodes."
        },
        "code16KQuietZoneLeftCoef": {
          "format": "int32",
          "default": 10,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Quiet Zone Left Coefficient",
          "description": "Set the size of the left quiet zone as a multiple of the xDimension for Code16K barcodes."
        },
        "code16KQuietZoneRightCoef": {
          "format": "int32",
          "default": 1,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Quiet Zone Right Coefficient",
          "description": "Set the size of the right quiet zone as a multiple of the xDimension for Code16K barcodes."
        },
        "dataMatrixEcc": {
          "default": "EccAuto",
          "enum": [
            "EccAuto",
            "Ecc000",
            "Ecc050",
            "Ecc080",
            "Ecc100",
            "Ecc140",
            "Ecc200"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "ECC Type",
          "description": "Set the DataMatrix ECC type for DataMatrix barcodes."
        },
        "dataMatrixEncodeMode": {
          "default": "Auto",
          "enum": [
            "Auto",
            "ASCII",
            "Full",
            "Custom",
            "C40",
            "Text",
            "EDIFACT",
            "ANSIX12",
            "ExtendedCodetext"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Encode Mode",
          "description": "Set encoding mode for DataMatrix barcodes."
        },
        "dotCodemask": {
          "format": "int32",
          "default": -1,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Mask",
          "description": "Set the mask value for DotCode barcodes."
        },
        "maxiCodeEncodeMode": {
          "format": "int32",
          "default": 4,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Encode Mode",
          "description": "Set the encode mode for Maxi Code barcodes (value between 2 and 6)."
        },
        "pdf417CompactionMode": {
          "default": "Auto",
          "enum": [
            "Auto",
            "Text",
            "Numeric",
            "Binary"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Compaction Mode",
          "description": "Set the compaction mode for Pdf417 barcodes."
        },
        "pdf417ErrorLevel": {
          "default": "Level8",
          "enum": [
            "Level0",
            "Level1",
            "Level2",
            "Level3",
            "Level4",
            "Level5",
            "Level6",
            "Level7",
            "Level8"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Error Level",
          "description": "Set the error level for Pdf417 barcodes."
        },
        "pdf417MacroFileID": {
          "format": "int32",
          "default": 1,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Macro File ID",
          "description": "Set the macro file ID for Pdf417 barcodes."
        },
        "pdf417MacroSegmentID": {
          "format": "int32",
          "default": 1,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Macro Segment ID",
          "description": "Set the macro segment ID for Pdf417 barcodes."
        },
        "pdf417MacroSegmentsCount": {
          "format": "int32",
          "default": 1,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Macro Segments Count",
          "description": "Set macro segment count for Pdf417 barcodes."
        },
        "pdf417Truncate": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Truncate",
          "description": "Set whether the Pdf417 barcode is truncated to save space."
        }
      },
      "x-ms-dynamic-schema": {
        "operationId": "GetDynamicSchemaCreateBarcode",
        "value-path": "dynamicSchemaCreateBarcode",
        "parameters": {
          "barcodeType": {
            "parameter": "barcodeTypeParameter"
          }
        }
      }
    },
    "DtoCreateHMAC": {
      "required": [
        "digestAlgorithm",
        "key"
      ],
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Data",
          "description": "Provide the input data to be computed"
        },
        "cryptoInputDataType": {
          "default": "TEXT",
          "enum": [
            "TEXT",
            "HEX",
            "BASE64",
            "FILE"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Data Type",
          "description": "Set the data format for the input data provided."
        },
        "key": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Key",
          "description": "Provide the key (secret) used to compute the hash-based message authentication code (HMAC)"
        },
        "cryptoKeyDataType": {
          "default": "TEXT",
          "enum": [
            "TEXT",
            "HEX",
            "BASE64",
            "FILE"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Key Type",
          "description": "Set the data format for the key provided."
        },
        "digestAlgorithm": {
          "default": "SHA256",
          "enum": [
            "SHA1",
            "SHA256",
            "SHA384",
            "SHA512",
            "MD5",
            "RIPEMD160"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Digest Algorithm ",
          "description": "Select the message digest algorithm"
        },
        "cryptoOutputDataType": {
          "default": "HASH",
          "enum": [
            "HASH",
            "BASE64",
            "HEX"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Output Type",
          "description": "Set the data format for the HMAC generated."
        },
        "case": {
          "default": "Lower",
          "enum": [
            "Lower",
            "Upper"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Case",
          "description": "Set the case applied to the computed value."
        },
        "encoding": {
          "default": "ASCII",
          "enum": [
            "UTF8",
            "UTF7",
            "UTF32",
            "ASCII",
            "Unicode",
            "BigEndianUnicode",
            "Default"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Encoding Type",
          "description": "Select the encoding type."
        }
      }
    },
    "DtoCreateHashCode": {
      "required": [
        "data",
        "digestAlgorithm"
      ],
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Data",
          "description": "Provide the input data to be computed"
        },
        "cryptoInputDataType": {
          "default": "TEXT",
          "enum": [
            "TEXT",
            "HEX",
            "BASE64",
            "FILE"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Data Type",
          "description": "Set the data format for the input data provided."
        },
        "digestAlgorithm": {
          "default": "SHA256",
          "enum": [
            "SHA1",
            "SHA256",
            "SHA384",
            "SHA512",
            "MD5",
            "RIPEMD160"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Digest Algorithm ",
          "description": "Select the message digest algorithm"
        },
        "cryptoOutputDataType": {
          "default": "HASH",
          "enum": [
            "HASH",
            "BASE64",
            "HEX"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Output Type",
          "description": "Set the data format for the hash code generated."
        },
        "case": {
          "default": "Lower",
          "enum": [
            "Lower",
            "Upper"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Case",
          "description": "Set the case applied to the computed value."
        },
        "encoding": {
          "default": "ASCII",
          "enum": [
            "UTF8",
            "UTF7",
            "UTF32",
            "ASCII",
            "Unicode",
            "BigEndianUnicode",
            "Default"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Encoding Type",
          "description": "Select the encoding type."
        }
      }
    },
    "DtoCreateQrCode": {
      "required": [
        "barcodeData",
        "barcodeImageFormat"
      ],
      "type": "object",
      "properties": {
        "barcodeData": {
          "type": "string"
        },
        "barcodeImageFormat": {
          "enum": [
            "PNG",
            "JPG",
            "SVG",
            "BMP",
            "TIFF",
            "GIF"
          ],
          "type": "string"
        },
        "height": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Height",
          "description": "Set the QR code height (pixels)."
        },
        "width": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Width",
          "description": "Set the QR code width (pixels)."
        },
        "sizeMode": {
          "enum": [
            "None",
            "Nearest",
            "Fixed",
            "Interpolation"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Auto Size Mode",
          "description": "Set the QR auto size mode, use 'Nearest' to assure QR code readability"
        },
        "foreColor": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Fore Color",
          "description": "Set the QR code foreground color (HTML Color #000000)"
        },
        "backColor": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Back Color",
          "description": "Set the QR code background color (HTML Color #FFFFFF)"
        },
        "visibleBorder": {
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Visible Border",
          "description": "Set whether the QR code border is visible"
        },
        "borderColor": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Border Color",
          "description": "Set the QR code border color (HTML Color #000000)"
        },
        "borderStyle": {
          "enum": [
            "Dash",
            "DashDot",
            "DashDotDot",
            "Dot",
            "Solid"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Border Style",
          "description": "Set the QR code border style"
        },
        "borderWidth": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Border Width",
          "description": "Set the QR code border width in pixels"
        },
        "resolution": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Resolution",
          "description": "Set the QR code border image resolution (dpi)"
        },
        "encodeMode": {
          "default": "Auto",
          "enum": [
            "Auto",
            "Bytes",
            "ECIEncoding",
            "ExtendedCodetext",
            "Utf16BEBOM",
            "Utf8BOM"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Encode Mode",
          "description": "Set the QR code encode mode"
        },
        "encodeType": {
          "default": "ForceQR",
          "enum": [
            "Auto",
            "ForceMicroQR",
            "ForceQR"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Encode Type",
          "description": "Set the QR code encode type"
        },
        "textEncodingType": {
          "default": "Default",
          "enum": [
            "Default",
            "Latin1",
            "BigEndianUnicode",
            "UTF16",
            "UTF8",
            "UTF7",
            "ASCII"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Encoding Type",
          "description": "Set the QR code text encoding type"
        }
      }
    },
    "DtoEncodianSendToFiler": {
      "required": [
        "apiEndpoint",
        "apiKey",
        "data",
        "httpMethod"
      ],
      "type": "object",
      "properties": {
        "apiEndpoint": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "API Endpoint",
          "description": "Set the Encodian Filer endpoint URL."
        },
        "apiKey": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "API Key",
          "description": "Set the Encodian Filer API Key for authentication."
        },
        "data": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Data",
          "description": "Provide the data payload to be send to Encodian Filer (body)."
        },
        "httpMethod": {
          "enum": [
            "Delete",
            "Get",
            "Post",
            "Put"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "HTTP Method",
          "description": "Set the HTTP Method type."
        }
      }
    },
    "DtoExtractImage": {
      "required": [
        "FileName",
        "ImageRegions"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "ImageRegions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageRegion"
          },
          "x-ms-summary": "Image Regions",
          "description": "The collection of regions to to extract images from and return."
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoExtractTextRegion": {
      "required": [
        "FileName",
        "TextRegions"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "TextRegions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextRegion"
          },
          "x-ms-summary": "Text Regions",
          "description": "The collection of regions to to extract text from and return."
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoFillPdfForm": {
      "required": [
        "FileName"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "default": "form.pdf",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "formData": {
          "type": "string",
          "x-ms-summary": "Form Data",
          "description": "The JSON data to populate with the PDF Form with."
        }
      }
    },
    "DtoFlattenPdf": {
      "required": [
        "fileContent"
      ],
      "type": "object",
      "properties": {
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        }
      }
    },
    "DtoGetImageInfo": {
      "required": [
        "fileContent"
      ],
      "type": "object",
      "properties": {
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source image file"
        }
      }
    },
    "DtoGetPdfDocumentInfo": {
      "required": [
        "fileContent",
        "FileName"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoGetPdfFormData": {
      "required": [
        "FileName",
        "FinalOperation"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "default": "form.pdf",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Final Operation",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoGetPdfTextLayer": {
      "required": [
        "FileName"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "StartPage": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Start Page",
          "description": "Sets the page number to begin text layer extraction from."
        },
        "EndPage": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "End Page",
          "description": "Sets the page number to end text layer extraction from. The default value is set to the last page of the PDF document provided."
        },
        "TextEncodingType": {
          "default": "UTF8",
          "enum": [
            "Default",
            "Latin1",
            "BigEndianUnicode",
            "UTF16",
            "UTF8",
            "UTF7",
            "ASCII"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Encoding Type",
          "description": "The encoding type used for text extraction."
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoHtmlToPdf": {
      "required": [
        "encoding",
        "FileName",
        "outputFilename"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "default": "temp.html",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Filename",
          "description": "The filename of the source HTML file, the file extension is mandatory: 'file.html' and not 'file'"
        },
        "outputFilename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "PDF Filename",
          "description": "The filename of the output PDF document"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "Optional - The file content of the source HTML file."
        },
        "htmlData": {
          "type": "string",
          "x-ms-summary": "HTML Data",
          "description": "Optional - The HTML which will be converted to a PDF document"
        },
        "htmlUrl": {
          "type": "string",
          "x-ms-summary": "HTML Url",
          "description": "Optional - The web address to the web page which will be converted to a PDF document"
        },
        "pageOrientation": {
          "default": "Portrait",
          "enum": [
            "Portrait",
            "Landscape"
          ],
          "type": "string",
          "x-ms-summary": "Page Orientation",
          "description": "Set page oprientation (Landscape or portrait)."
        },
        "pageSize": {
          "default": "A4",
          "enum": [
            "Default",
            "A1",
            "A2",
            "A3",
            "A4",
            "A5",
            "A6",
            "B4",
            "B5",
            "EnvelopeDL",
            "Executive",
            "Folio",
            "Ledger",
            "Legal",
            "Letter",
            "Quarto",
            "Statement",
            "Tabloid"
          ],
          "type": "string",
          "x-ms-summary": "Page Size",
          "description": "Set the page size for the output PDF document, A4 is the default size."
        },
        "viewPort": {
          "default": "Default",
          "enum": [
            "Default",
            "Mobile",
            "Tablet",
            "Laptop",
            "LaptopL",
            "FourK"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Viewport",
          "description": "Set the viewport used to render the HTML."
        },
        "MarginTop": {
          "format": "double",
          "default": 25,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Top Margin",
          "description": "Set the top margin value (pixels)"
        },
        "MarginBottom": {
          "format": "double",
          "default": 25,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Bottom Margin",
          "description": "Set the bottom margin value (pixels)"
        },
        "MarginRight": {
          "format": "double",
          "default": 25,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Right Margin",
          "description": "Set the right margin value (pixels)"
        },
        "MarginLeft": {
          "format": "double",
          "default": 25,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Left Margin",
          "description": "Set the left margin value (pixels)"
        },
        "enableBookmarks": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Enable Bookmarks",
          "description": "Enable or disable auto creation of PDF bookmarks."
        },
        "enableJavaScript": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Enable JavaScript",
          "description": "Enable or disable javascript."
        },
        "enableHyperlinks": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Enable Hyperlinks",
          "description": "Enable or disable hyperlinks."
        },
        "createPdfForm": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Create PDF Form",
          "description": "Set whether the HTML content should be converted to a PDF form."
        },
        "decodeHtmlData": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Decode HTML Data",
          "description": "Set whether the data provided in the HTML Data field should be decoded."
        },
        "cssType": {
          "default": "Screen",
          "enum": [
            "Screen",
            "Print"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "CSS Type",
          "description": "Set whether the standard or print style sheets should be used for HTML conversion."
        },
        "repeatTableHeader": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Repeat Table Header",
          "description": "Set whether to repeat the table header on every page break. The default value is true"
        },
        "repeatTableFooter": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Repeat Table Footer",
          "description": "Set whether to repeat the table footer on every page break. The default value is true"
        },
        "splitImages": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Split Images",
          "description": "Set whether to split images"
        },
        "splitTextLines": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Split Text Lines",
          "description": "Set whether to split text lines"
        },
        "encoding": {
          "default": "UTF8",
          "enum": [
            "UTF8",
            "UTF7",
            "UTF32",
            "ASCII",
            "Unicode",
            "BigEndianUnicode"
          ],
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Encoding",
          "description": "Set the encoding type for the HTML."
        },
        "delay": {
          "format": "int32",
          "default": 5000,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Delay",
          "description": "Set the delay in milliseconds between the HTML being received and the conversion to allo time for JavaScript to load."
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoHtmlToWord": {
      "required": [
        "FileName",
        "FinalOperation",
        "outputFilename"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "default": "temp.html",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Filename",
          "description": "The filename of the source HTML file, the file extension is mandatory: 'file.html' and not 'file'"
        },
        "outputFilename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the output DOCX document"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "Optional - The file content of the source HTML file."
        },
        "htmlData": {
          "type": "string",
          "x-ms-summary": "HTML Data",
          "description": "Optional - The HTML which will be converted to a Word document"
        },
        "htmlUrl": {
          "type": "string",
          "x-ms-summary": "HTML Url",
          "description": "Optional - The web address to the web page which will be converted to a Word document"
        },
        "pageOrientation": {
          "default": "Portrait",
          "enum": [
            "Portrait",
            "Landscape"
          ],
          "type": "string",
          "x-ms-summary": "Page Orientation",
          "description": "Set page oprientation (Landscape or portrait)."
        },
        "pageSize": {
          "default": "A4",
          "enum": [
            "Default",
            "A1",
            "A2",
            "A3",
            "A4",
            "A5",
            "A6",
            "B4",
            "B5",
            "EnvelopeDL",
            "Executive",
            "Folio",
            "Ledger",
            "Legal",
            "Letter",
            "Quarto",
            "Statement",
            "Tabloid"
          ],
          "type": "string",
          "x-ms-summary": "Page Size",
          "description": "Set the page size for the output Word document, A4 is the default size."
        },
        "decodeHtmlData": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Decode HTML Data",
          "description": "Set whether the data provided in the HTML Data field should be decoded."
        },
        "encoding": {
          "default": "UTF8",
          "enum": [
            "UTF8",
            "UTF7",
            "UTF32",
            "ASCII",
            "Unicode",
            "BigEndianUnicode"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Encoding",
          "description": "Set the encoding type for the HTML."
        },
        "MarginTop": {
          "format": "double",
          "default": -1,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Top Margin",
          "description": "Set the top margin value (pt. The default value is set to -1, whereby a minus value does not change the existing page margin value."
        },
        "MarginBottom": {
          "format": "double",
          "default": -1,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Bottom Margin",
          "description": "Set the bottom margin value (pt. The default value is set to -1, whereby a minus value does not change the existing page margin value."
        },
        "MarginRight": {
          "format": "double",
          "default": -1,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Right Margin",
          "description": "Set the right margin value (pt. The default value is set to -1, whereby a minus value does not change the existing page margin value."
        },
        "MarginLeft": {
          "format": "double",
          "default": -1,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Left Margin",
          "description": "Set the left margin value (pt. The default value is set to -1, whereby a minus value does not change the existing page margin value."
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Final Operation",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoImageCleanUpDoc": {
      "required": [
        "FileName",
        "FinalOperation"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source image file, the file extension is mandatory: 'file.png' and not 'file'"
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source image file"
        },
        "cleanUpType": {
          "default": "Default",
          "enum": [
            "Default",
            "None",
            "Specific"
          ],
          "type": "string",
          "x-ms-summary": "Clean Operations",
          "description": "Perform file clean-up operations, the default option will auto rotate, auto deskew and auto despeckle the provided file."
        },
        "AutoRotate": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Rotate",
          "description": "Automatically detects orientation and rotates so that the text is upright oriented, this is enabled by default."
        },
        "AutoRotateConfidenceLevel": {
          "format": "int32",
          "default": 60,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Rotate Confidence Level",
          "description": "Sets the minimum confidence percentage (0 to 100) used to control whether the rotation is applied, the default value is 60."
        },
        "Deskew": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Deskew",
          "description": "Detects the skew angle and rotates to remove that skew, this is enabled by default."
        },
        "Despeckle": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Despeckle",
          "description": "Automatically detects speckles and removes them, this is enabled by default."
        },
        "AdjustBrightnessContrast": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Adjust Brightness and Contrast",
          "description": "This action analyzes a document and automatically adjusts brightness and contrast based on the analysis, this is disabled by default."
        },
        "RemoveBorder": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Border",
          "description": "Locates border pixels and removes the pixels from the document, this is disabled by default."
        },
        "SmoothBackground": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Smooth Background",
          "description": "This works only on color and grayscale documents. This operation smoothes background colors to eliminate or de-emphasize noise, this is disabled by default."
        },
        "SmoothObjects": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Smooth Objects",
          "description": "This only works on bitonal documents, it looks at groups of pixels, and finds isolated bumps and pits in the edges of those objects, and fills them in, this is disabled by default."
        },
        "RemoveDotShading": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Dot Shading",
          "description": "This action will remove shaded regions from bitonal documents, this is disabled by default."
        },
        "ImageDetergent": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Image Detergent",
          "description": "Image Detergent works by changing pixels of similar color values to a central color value, which has the result of smoothing the image wherever regions of those colors appear, this is disabled by default."
        },
        "ApplyAverageFilter": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Average Filter",
          "description": "Performs a 3x3 Average filter smoothing operation on the document, placing the output in the center of the window, this is disabled by default."
        },
        "RemoveHolePunch": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Hole Punch",
          "description": "Detects and removes hole punch marks from a bitonal document, this is disabled by default."
        },
        "Binarize": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Binarize",
          "description": "Computes all necessary parameters by analyzing the input data before actually performing the binarization. The algorithm is tuned to typical document images, consisting of dark text on brighter background. It is robust to shadows, noise and background images, this is disabled by default."
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Final Operation",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoImageCleanUpPhoto": {
      "required": [
        "FileName",
        "FinalOperation"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source image file, the file extension is mandatory: 'file.png' and not 'file'"
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source image file"
        },
        "cleanUpType": {
          "default": "Default",
          "enum": [
            "Default",
            "None",
            "Specific"
          ],
          "type": "string",
          "x-ms-summary": "Clean Operations",
          "description": "Perform file clean-up operations, the default option will auto rotate, apply colour balance, auto deskew and auto despeckle the provided file."
        },
        "Deskew": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Deskew",
          "description": "Detects the skew angle and rotates to remove that skew, this is enabled by default."
        },
        "Despeckle": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Despeckle",
          "description": "Automatically detects speckles and removes them, this is enabled by default."
        },
        "ColorBalance": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Color Balance",
          "description": "Restores and balances the color quality within an image, this is enabled by default."
        },
        "RemoveBorder": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Border",
          "description": "Locates border pixels and removes the pixels from the document, this is disabled by default."
        },
        "Contrast": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Contrast",
          "description": "Adjusts the contrast in the current image."
        },
        "RemoveRedeye": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Redeye",
          "description": "Automatically reduces the red reflection of the flash seen in the eyes of people in color flash photo images."
        },
        "Blur": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Blur",
          "description": "Blurs the current image by averaging each pixel with each of its neighboring pixels giving it an 'out of focus' appearance."
        },
        "Diffuse": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Diffuse",
          "description": "Diffuses the current image by replacing each pixel with a randomly selected neighboring pixel."
        },
        "Binarize": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Binarize",
          "description": "Computes all necessary parameters by analyzing the input data before actually performing the binarization. The algorithm is tuned to typical document images, consisting of dark text on brighter background. It is robust to shadows, noise and background images, this is disabled by default."
        },
        "AutoRotate": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Rotate",
          "description": "Automatically detects orientation and rotates so that the text is upright oriented, this is enabled by default."
        },
        "AutoRotateConfidenceLevel": {
          "format": "int32",
          "default": 60,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Rotate Confidence Level",
          "description": "Sets the minimum confidence percentage (0 to 100) used to control whether the rotation is applied, the default value is 40."
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Final Operation",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoImageCompress": {
      "required": [
        "fileContent",
        "fileName",
        "imageType"
      ],
      "type": "object",
      "properties": {
        "fileName": {
          "default": "image",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Filename",
          "description": "The filename of the source image file"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source image file"
        },
        "imageType": {
          "enum": [
            "JPG",
            "PNG"
          ],
          "type": "string",
          "x-ms-summary": "Image Type",
          "description": "Select the image file format."
        }
      }
    },
    "DtoImageConvertFormat": {
      "required": [
        "currentImageFormat",
        "fileContent",
        "fileName",
        "newImageFormat"
      ],
      "type": "object",
      "properties": {
        "fileName": {
          "default": "image",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Filename",
          "description": "The filename of the source image file"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source image file"
        },
        "currentImageFormat": {
          "enum": [
            "BMP",
            "GIF",
            "JPG",
            "PNG",
            "TIF"
          ],
          "type": "string",
          "x-ms-summary": "Current Image Format",
          "description": "Select the current image file format."
        },
        "newImageFormat": {
          "enum": [
            "BMP",
            "GIF",
            "JPG",
            "PNG",
            "TIF"
          ],
          "type": "string",
          "x-ms-summary": "New Image Format",
          "description": "Select the new image file format."
        }
      }
    },
    "DtoImageExtractText": {
      "required": [
        "fileContent",
        "fileName",
        "imageType"
      ],
      "type": "object",
      "properties": {
        "fileName": {
          "default": "image",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Filename",
          "description": "The filename of the source image file"
        },
        "imageType": {
          "enum": [
            "JPG",
            "PNG",
            "TIFF",
            "BMP"
          ],
          "type": "string",
          "x-ms-summary": "Image Type",
          "description": "Select the image file format."
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source image file"
        },
        "ocrLanguage": {
          "default": "English",
          "enum": [
            "Albanian",
            "Arabic",
            "Azerbaijani",
            "Basque",
            "Belarusian",
            "Bengali",
            "Bosnian",
            "Bulgarian",
            "Burmese",
            "Catalan",
            "ChineseSimplified",
            "ChineseTraditional",
            "Croatian",
            "Czech",
            "Danish",
            "Dutch",
            "English",
            "Estonian",
            "Finnish",
            "French",
            "Georgian",
            "German",
            "Greek",
            "Gujarati",
            "Hebrew",
            "Hindi",
            "Hungarian",
            "Icelandic",
            "Indonesian",
            "Italian",
            "Japanese",
            "Kannada",
            "Kazakh",
            "Khmer",
            "Korean",
            "Kurdish",
            "Kyrgyz",
            "Laotian",
            "Latin",
            "Latvian",
            "Lithuanian",
            "Macedonian",
            "Maharashtra",
            "Malay",
            "Malayalam",
            "Maltese",
            "Nepali",
            "Norwegian",
            "Oriya",
            "Panjabi",
            "Persian",
            "Polish",
            "Portuguese",
            "Pushto",
            "Romanian",
            "Russian",
            "Sanskrit",
            "Serbian",
            "Singhalese",
            "Slovakian",
            "Slovenian",
            "Spanish",
            "Swahili",
            "Swedish",
            "Syriac",
            "Tamil",
            "Telugu",
            "Thai",
            "Turkish",
            "Ukrainian",
            "Urdu",
            "Uzbek",
            "Vietnamese",
            "Welsh",
            "Yiddish"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Language",
          "description": "Select the language used for OCR processing"
        },
        "cleanUpType": {
          "default": "None",
          "enum": [
            "Default",
            "None",
            "Specific"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Clean Operations",
          "description": "Perform document clean-up operations, the default option will auto rotate, auto deskew and auto despeckle the document."
        },
        "AutoRotate": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Rotate",
          "description": "Automatically detects orientation and rotates it so that the text on it is upright oriented"
        },
        "AutoRotateConfidenceLevel": {
          "format": "int32",
          "default": 70,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Rotate Confidence Level",
          "description": "Sets the minimum confidence percentage (0 to 100) used to control whether the rotation is applied, the default value is 70."
        },
        "Deskew": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Deskew",
          "description": "Detects the skew angle and rotates to remove that skew."
        },
        "Despeckle": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Despeckle",
          "description": "Automatically detects speckles and removes them."
        },
        "AdjustBrightnessContrast": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Adjust Brightness and Contrast",
          "description": "This action analyzes a document and automatically adjusts brightness and contrast based on the analysis."
        },
        "RemoveBorder": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Border",
          "description": "Locates border pixels and removes the pixels from the document,this is disabled by default."
        },
        "SmoothBackground": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Smooth Background",
          "description": "This works only on color and grayscale documents. This operation smoothes background colors to eliminate or de-emphasize noise."
        },
        "SmoothObjects": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Smooth Objects",
          "description": "This only works on bitonal documents, it looks at groups of pixels, and finds isolated bumps and pits in the edges of those objects, and fills them in."
        },
        "RemoveDotShading": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Dot Shading",
          "description": "This action will remove shaded regions from bitonal documents."
        },
        "ImageDetergent": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Image Detergent",
          "description": "Image Detergent works by changing pixels of similar color values to a central color value, which has the result of smoothing the image wherever regions of those colors appear."
        },
        "ApplyAverageFilter": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Average Filter",
          "description": "Performs a 3x3 Average filter smoothing operation on the document, placing the output in the center of the window."
        },
        "RemoveHolePunch": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Hole Punch",
          "description": "Detects and removes hole punch marks from a bitonal document."
        },
        "Binarize": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Binarize",
          "description": "Computes all necessary parameters by analyzing the input data before actually performing the binarization. The algorithm is tuned to typical document images, consisting of dark text on brighter background. It is robust to shadows, noise and background images."
        }
      }
    },
    "DtoImageRemoveExifTags": {
      "required": [
        "fileContent",
        "fileName",
        "imageType"
      ],
      "type": "object",
      "properties": {
        "fileName": {
          "default": "image",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Filename",
          "description": "The filename of the source image file"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source image file"
        },
        "imageType": {
          "enum": [
            "JPG",
            "PNG"
          ],
          "type": "string",
          "x-ms-summary": "Image Type",
          "description": "Select the image file format."
        }
      }
    },
    "DtoImageResize": {
      "required": [
        "FileContent",
        "FileName",
        "FinalOperation",
        "ImageResizeType"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source image file, the file extension is mandatory: 'file.png' and not 'file'"
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source image file"
        },
        "ImageResizeType": {
          "enum": [
            "Percentage",
            "Specific"
          ],
          "type": "string",
          "x-ms-summary": "Resize Type",
          "description": "Set whether the image should be resized to a ratio or specific dimensions."
        },
        "ResizePercentage": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Resize Percentage",
          "description": "For percentage resize actions - Set the percentage the image should be decrased or increased in size by."
        },
        "ImageWidth": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Image Width",
          "description": "For specific resize actions - Set the specific width of the image in pixels"
        },
        "ImageHeight": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Image Height",
          "description": "For specific resize actions - Set the specific height of the image in pixels"
        },
        "MaintainAspectRatio": {
          "default": true,
          "type": "boolean",
          "x-ms-summary": "Maintain Aspect Ratio",
          "description": "For specific resize actions - If true, the image height will be automatically set relevant to the image width provided."
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Final Operation",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoInsertHtmlToPdf": {
      "required": [
        "FileName",
        "FinalOperation",
        "htmlData"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "htmlData": {
          "type": "string",
          "x-ms-summary": "HTML Data",
          "description": "The HTML which will be inserted into the PDF document"
        },
        "htmlInsertLocation": {
          "default": "Prepend",
          "enum": [
            "Append",
            "Prepend",
            "Specific"
          ],
          "type": "string",
          "x-ms-summary": "HTML Insert Location",
          "description": "Set where within the PDF provided, the HTML data should be inserted, the default value is Prepend."
        },
        "htmlInsertLocationPage": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Page Number",
          "description": "Set a specific page location to insert the HTML data into."
        },
        "pageOrientation": {
          "default": "Portrait",
          "enum": [
            "Portrait",
            "Landscape"
          ],
          "type": "string",
          "x-ms-summary": "Page Orientation",
          "description": "Set page oprientation (Landscape or portrait)."
        },
        "pageSize": {
          "default": "A4",
          "enum": [
            "Default",
            "A1",
            "A2",
            "A3",
            "A4",
            "A5",
            "A6",
            "B4",
            "B5",
            "EnvelopeDL",
            "Executive",
            "Folio",
            "Ledger",
            "Legal",
            "Letter",
            "Quarto",
            "Statement",
            "Tabloid"
          ],
          "type": "string",
          "x-ms-summary": "Page Size",
          "description": "Set the page size for the output PDF document, A4 is the default size."
        },
        "viewPort": {
          "default": "Default",
          "enum": [
            "Default",
            "Mobile",
            "Tablet",
            "Laptop",
            "LaptopL",
            "FourK"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Viewport",
          "description": "Set the viewport used to render the HTML."
        },
        "MarginTop": {
          "format": "double",
          "default": 25,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Top Margin",
          "description": "Set the top margin value (mm)"
        },
        "MarginBottom": {
          "format": "double",
          "default": 25,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Bottom Margin",
          "description": "Set the bottom margin value (mm)"
        },
        "MarginRight": {
          "format": "double",
          "default": 25,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Right Margin",
          "description": "Set the right margin value (mm)"
        },
        "MarginLeft": {
          "format": "double",
          "default": 25,
          "type": "number",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Left Margin",
          "description": "Set the left margin value (mm)"
        },
        "decodeHtmlData": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Decode HTML Data",
          "description": "Set whether the data provided in the HTML Data field should be decoded."
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoMergeArrayOfDocumentsToPdf": {
      "required": [
        "documents",
        "FileName",
        "outputFilename"
      ],
      "type": "object",
      "properties": {
        "outputFilename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "PDF Filename",
          "description": "The filename of the output PDF document"
        },
        "FileName": {
          "default": "default.doc",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Filename",
          "description": "The filename of the source file"
        },
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentArray"
          },
          "x-ms-visibility": "important",
          "x-ms-summary": "Documents",
          "description": "The array of documents to be processed"
        },
        "removeDocumentMarkup": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Markup",
          "description": "Set MS Office document comments and tracked changes removal option"
        },
        "pdfaCompliance": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliant",
          "description": "Set PDF/A Compliance option"
        },
        "pdfaComplianceLevel": {
          "default": "PDF_A_2A",
          "enum": [
            "PDF_A_1A",
            "PDF_A_1B",
            "PDF_A_2A",
            "PDF_A_3A",
            "PDF_A_2B",
            "PDF_A_2U",
            "PDF_A_3B",
            "PDF_A_3U",
            "v_1_3",
            "v_1_4",
            "v_1_5",
            "v_1_6",
            "v_1_7",
            "PDF_X_1A",
            "PDF_X_3"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliance Level",
          "description": "Set the PDF/A Compliance Level, the default value is PDF_A_2A."
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoMergeArrayOfDocumentsToWord": {
      "required": [
        "documents",
        "FinalOperation",
        "outputFilename"
      ],
      "type": "object",
      "properties": {
        "outputFilename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the output DOCX document"
        },
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentArrayWord"
          },
          "x-ms-summary": "Documents",
          "description": "The array of Microsoft Word documents to be processed"
        },
        "timezone": {
          "default": "Default",
          "enum": [
            "Default",
            "AUSCentralStandardTime",
            "AUSEasternStandardTime",
            "AfghanistanStandardTime",
            "AlaskanStandardTime",
            "AleutianStandardTime",
            "AltaiStandardTime",
            "ArabStandardTime",
            "ArabianStandardTime",
            "ArabicStandardTime",
            "ArgentinaStandardTime",
            "AstrakhanStandardTime",
            "AtlanticStandardTime",
            "AusCentralWStandardTime",
            "AzerbaijanStandardTime",
            "AzoresStandardTime",
            "BahiaStandardTime",
            "BangladeshStandardTime",
            "BelarusStandardTime",
            "BougainvilleStandardTime",
            "CanadaCentralStandardTime",
            "CapeVerdeStandardTime",
            "CaucasusStandardTime",
            "CenAustraliaStandardTime",
            "CentralAmericaStandardTime",
            "CentralAsiaStandardTime",
            "CentralBrazilianStandardTime",
            "CentralEuropeStandardTime",
            "CentralEuropeanStandardTime",
            "CentralPacificStandardTime",
            "CentralStandardTime",
            "CentralStandardTimeMexico",
            "ChathamIslandsStandardTime",
            "ChinaStandardTime",
            "CubaStandardTime",
            "DatelineStandardTime",
            "EAfricaStandardTime",
            "EAustraliaStandardTime",
            "EEuropeStandardTime",
            "ESouthAmericaStandardTime",
            "EasterIslandStandardTime",
            "EasternStandardTime",
            "EasternStandardTimeMexico",
            "EgyptStandardTime",
            "EkaterinburgStandardTime",
            "FLEStandardTime",
            "FijiStandardTime",
            "GMTStandardTime",
            "GTBStandardTime",
            "GeorgianStandardTime",
            "GreenlandStandardTime",
            "GreenwichStandardTime",
            "HaitiStandardTime",
            "HawaiianStandardTime",
            "IndiaStandardTime",
            "IranStandardTime",
            "IsraelStandardTime",
            "JordanStandardTime",
            "KaliningradStandardTime",
            "KamchatkaStandardTime",
            "KoreaStandardTime",
            "LibyaStandardTime",
            "LineIslandsStandardTime",
            "LordHoweStandardTime",
            "MagadanStandardTime",
            "MagallanesStandardTime",
            "MarquesasStandardTime",
            "MauritiusStandardTime",
            "MidAtlanticStandardTime",
            "MiddleEastStandardTime",
            "MontevideoStandardTime",
            "MoroccoStandardTime",
            "MountainStandardTime",
            "MountainStandardTimeMexico",
            "MyanmarStandardTime",
            "NCentralAsiaStandardTime",
            "NamibiaStandardTime",
            "NepalStandardTime",
            "NewZealandStandardTime",
            "NewfoundlandStandardTime",
            "NorfolkStandardTime",
            "NorthAsiaEastStandardTime",
            "NorthAsiaStandardTime",
            "NorthKoreaStandardTime",
            "OmskStandardTime",
            "PacificSAStandardTime",
            "PacificStandardTime",
            "PacificStandardTimeMexico",
            "PakistanStandardTime",
            "ParaguayStandardTime",
            "QyzylordaStandardTime",
            "RomanceStandardTime",
            "RussiaTimeZone10",
            "RussiaTimeZone11",
            "RussiaTimeZone3",
            "RussianStandardTime",
            "SAEasternStandardTime",
            "SAPacificStandardTime",
            "SAWesternStandardTime",
            "SEAsiaStandardTime",
            "SaintPierreStandardTime",
            "SakhalinStandardTime",
            "SamoaStandardTime",
            "SaoTomeStandardTime",
            "SaratovStandardTime",
            "SingaporeStandardTime",
            "SouthAfricaStandardTime",
            "SouthSudanStandardTime",
            "SriLankaStandardTime",
            "SudanStandardTime",
            "SyriaStandardTime",
            "TaipeiStandardTime",
            "TasmaniaStandardTime",
            "TocantinsStandardTime",
            "TokyoStandardTime",
            "TomskStandardTime",
            "TongaStandardTime",
            "TransbaikalStandardTime",
            "TurkeyStandardTime",
            "TurksAndCaicosStandardTime",
            "USEasternStandardTime",
            "USMountainStandardTime",
            "UTC",
            "UTC02",
            "UTC08",
            "UTC09",
            "UTC11",
            "UTC12",
            "UTC13",
            "UlaanbaatarStandardTime",
            "VenezuelaStandardTime",
            "VladivostokStandardTime",
            "VolgogradStandardTime",
            "WAustraliaStandardTime",
            "WCentralAfricaStandardTime",
            "WEuropeStandardTime",
            "WMongoliaStandardTime",
            "WestAsiaStandardTime",
            "WestBankStandardTime",
            "WestPacificStandardTime",
            "YakutskStandardTime",
            "YukonStandardTime"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Time Zone",
          "description": "Set a specific time zone for date and time processing"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Final Operation",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoMergeArrayOfExcelDocuments": {
      "required": [
        "documents"
      ],
      "type": "object",
      "properties": {
        "outputFilename": {
          "default": "file",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the output excel file"
        },
        "mergeExcelOutputFormat": {
          "default": "XLSX",
          "enum": [
            "PDF",
            "TIFF",
            "XLSX",
            "XLS",
            "XLSB",
            "XLSM"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Output Format",
          "description": "The format of the output excel file"
        },
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentArrayExcel"
          },
          "x-ms-summary": "Documents",
          "description": "The array of files to be processed"
        }
      }
    },
    "DtoMergeDocumentsToPdf": {
      "required": [
        "fileContent",
        "fileContent2",
        "FileName",
        "fileName2",
        "outputFilename"
      ],
      "type": "object",
      "properties": {
        "outputFilename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "PDF Filename",
          "description": "The filename of the output PDF document"
        },
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the 1st source file, the file extension is mandatory: 'file.xlsx' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source file"
        },
        "fileName2": {
          "type": "string",
          "x-ms-summary": "Filename 2",
          "description": "The filename of the 2nd source file, the file extension is mandatory: 'file.xlsx' and not 'file'"
        },
        "fileContent2": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content 2",
          "description": "The file content of the 2nd source file"
        },
        "fileName3": {
          "type": "string",
          "x-ms-summary": "Filename 3",
          "description": "The filename of the 3rd source file, the file extension is mandatory: 'file.xlsx' and not 'file'"
        },
        "fileContent3": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content 3",
          "description": "The file content of the 3rd source file"
        },
        "fileName4": {
          "type": "string",
          "x-ms-summary": "Filename 4",
          "description": "The filename of the 4th source file, the file extension is mandatory: 'file.xlsx' and not 'file'"
        },
        "fileContent4": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content 4",
          "description": "The file content of the 4th source file"
        },
        "fileName5": {
          "type": "string",
          "x-ms-summary": "Filename 5",
          "description": "The filename of the 5th source file, the file extension is mandatory: 'file.xlsx' and not 'file'"
        },
        "fileContent5": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content 5",
          "description": "The file content of the 5th source file"
        },
        "fileName6": {
          "type": "string",
          "x-ms-summary": "Filename 6",
          "description": "The filename of the 6th source file, the file extension is mandatory: 'file.xlsx' and not 'file'"
        },
        "fileContent6": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content 6",
          "description": "The file content of the 6th source file"
        },
        "fileName7": {
          "type": "string",
          "x-ms-summary": "Filename 7",
          "description": "The filename of the 7th source file, the file extension is mandatory: 'file.xlsx' and not 'file'"
        },
        "fileContent7": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content 7",
          "description": "The file content of the 7th source file"
        },
        "fileName8": {
          "type": "string",
          "x-ms-summary": "Filename 8",
          "description": "The filename of the 8th source file, the file extension is mandatory: 'file.xlsx' and not 'file'"
        },
        "fileContent8": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content 8",
          "description": "The file content of the 8th source file"
        },
        "fileName9": {
          "type": "string",
          "x-ms-summary": "Filename 9",
          "description": "The filename of the 9th source file, the file extension is mandatory: 'file.xlsx' and not 'file'"
        },
        "fileContent9": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content 9",
          "description": "The file content of the 9th source file"
        },
        "fileName10": {
          "type": "string",
          "x-ms-summary": "Filename 10",
          "description": "The filename of the 10th source file, the file extension is mandatory: 'file.xlsx' and not 'file'"
        },
        "fileContent10": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content 10",
          "description": "The file content of the 10th source file"
        },
        "removeDocumentMarkup": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Markup",
          "description": "Set MS Office document comments and tracked changes removal option"
        },
        "pdfaCompliance": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliant",
          "description": "Set PDF/A Compliance option"
        },
        "pdfaComplianceLevel": {
          "default": "PDF_A_2A",
          "enum": [
            "PDF_A_1A",
            "PDF_A_1B",
            "PDF_A_2A",
            "PDF_A_3A",
            "PDF_A_2B",
            "PDF_A_2U",
            "PDF_A_3B",
            "PDF_A_3U",
            "v_1_3",
            "v_1_4",
            "v_1_5",
            "v_1_6",
            "v_1_7",
            "PDF_X_1A",
            "PDF_X_3"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliance Level",
          "description": "Set the PDF/A Compliance Level, the default value is PDF_A_2A."
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoMergePresentations": {
      "required": [
        "documents",
        "mergePresentationOutputFormat"
      ],
      "type": "object",
      "properties": {
        "mergePresentationOutputFormat": {
          "default": "PPTX",
          "enum": [
            "FODP",
            "GIF",
            "HTML",
            "ODP",
            "OTP",
            "PDF",
            "POT",
            "POTM",
            "POTX",
            "PPS",
            "PPSM",
            "PPSX",
            "PPT",
            "PPTM",
            "PPTX",
            "SWF",
            "TIFF",
            "XPS"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Format",
          "description": "The format of the output presentation file"
        },
        "outputFilename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the output presentation file, set to 'presentation' by default"
        },
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentArrayPresentation"
          },
          "x-ms-summary": "Documents",
          "description": "The array of presentations to be processed"
        }
      }
    },
    "DtoOcrPdf": {
      "required": [
        "FileName"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "ocrLanguage": {
          "default": "English",
          "enum": [
            "Albanian",
            "Arabic",
            "Azerbaijani",
            "Basque",
            "Belarusian",
            "Bengali",
            "Bosnian",
            "Bulgarian",
            "Burmese",
            "Catalan",
            "ChineseSimplified",
            "ChineseTraditional",
            "Croatian",
            "Czech",
            "Danish",
            "Dutch",
            "English",
            "Estonian",
            "Finnish",
            "French",
            "Georgian",
            "German",
            "Greek",
            "Gujarati",
            "Hebrew",
            "Hindi",
            "Hungarian",
            "Icelandic",
            "Indonesian",
            "Italian",
            "Japanese",
            "Kannada",
            "Kazakh",
            "Khmer",
            "Korean",
            "Kurdish",
            "Kyrgyz",
            "Laotian",
            "Latin",
            "Latvian",
            "Lithuanian",
            "Macedonian",
            "Maharashtra",
            "Malay",
            "Malayalam",
            "Maltese",
            "Nepali",
            "Norwegian",
            "Oriya",
            "Panjabi",
            "Persian",
            "Polish",
            "Portuguese",
            "Pushto",
            "Romanian",
            "Russian",
            "Sanskrit",
            "Serbian",
            "Singhalese",
            "Slovakian",
            "Slovenian",
            "Spanish",
            "Swahili",
            "Swedish",
            "Syriac",
            "Tamil",
            "Telugu",
            "Thai",
            "Turkish",
            "Ukrainian",
            "Urdu",
            "Uzbek",
            "Vietnamese",
            "Welsh",
            "Yiddish"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Language",
          "description": "Select the language used for OCR processing"
        },
        "ocrType": {
          "default": "Quality",
          "enum": [
            "Quality",
            "Fast"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "OCR Type",
          "description": "Select the OCR processing type, the 'Fast' option reduces processing time with possible minor loss of OCR accuracy - https://support.encodian.com/hc/en-gb/articles/360012686653-OCR-a-PDF-Document"
        },
        "pdfaCompliance": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliant",
          "description": "Set PDF/A Compliance option"
        },
        "pdfaComplianceLevel": {
          "default": "PDF_A_2A",
          "enum": [
            "PDF_A_1A",
            "PDF_A_1B",
            "PDF_A_2A",
            "PDF_A_3A",
            "PDF_A_2B",
            "PDF_A_2U",
            "PDF_A_3B",
            "PDF_A_3U",
            "v_1_3",
            "v_1_4",
            "v_1_5",
            "v_1_6",
            "v_1_7",
            "PDF_X_1A",
            "PDF_X_3"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "PDF/A Compliance Level",
          "description": "Set the PDF/A Compliance Level, the default value is PDF_A_2A."
        },
        "cleanUpType": {
          "default": "None",
          "enum": [
            "Default",
            "None",
            "Specific"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Clean Operations",
          "description": "Perform document clean-up operations, the default option will auto rotate, auto deskew and auto despeckle the document."
        },
        "AutoRotate": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Rotate",
          "description": "Automatically detects orientation and rotates it so that the text on it is upright oriented"
        },
        "AutoRotateConfidenceLevel": {
          "format": "int32",
          "default": 60,
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Rotate Confidence Level",
          "description": "Sets the minimum confidence percentage (0 to 100) used to control whether the rotation is applied, the default value is 60."
        },
        "Deskew": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Deskew",
          "description": "Detects the skew angle and rotates to remove that skew."
        },
        "Despeckle": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Despeckle",
          "description": "Automatically detects speckles and removes them."
        },
        "AdjustBrightnessContrast": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Adjust Brightness and Contrast",
          "description": "This action analyzes a document and automatically adjusts brightness and contrast based on the analysis."
        },
        "RemoveBorder": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Border",
          "description": "Locates border pixels and removes the pixels from the document,this is disabled by default."
        },
        "SmoothBackground": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Smooth Background",
          "description": "This works only on color and grayscale documents. This operation smoothes background colors to eliminate or de-emphasize noise."
        },
        "SmoothObjects": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Smooth Objects",
          "description": "This only works on bitonal documents, it looks at groups of pixels, and finds isolated bumps and pits in the edges of those objects, and fills them in."
        },
        "RemoveDotShading": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Dot Shading",
          "description": "This action will remove shaded regions from bitonal documents."
        },
        "ImageDetergent": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Image Detergent",
          "description": "Image Detergent works by changing pixels of similar color values to a central color value, which has the result of smoothing the image wherever regions of those colors appear."
        },
        "ApplyAverageFilter": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Average Filter",
          "description": "Performs a 3x3 Average filter smoothing operation on the document, placing the output in the center of the window."
        },
        "RemoveHolePunch": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Hole Punch",
          "description": "Detects and removes hole punch marks from a bitonal document."
        },
        "Binarize": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Binarize",
          "description": "Computes all necessary parameters by analyzing the input data before actually performing the binarization. The algorithm is tuned to typical document images, consisting of dark text on brighter background. It is robust to shadows, noise and background images."
        },
        "RemoveBlankPages": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Blank Pages",
          "description": "Set whether blank pages should be removed from the PDF document."
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoParseCsv": {
      "required": [
        "FileContent",
        "FileName"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "default": "file.csv",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Filename",
          "description": "The filename of the source CSV file, the file extension is mandatory: 'file.csv' and not 'file'"
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source CSV file"
        },
        "delimiter": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Delimiter",
          "description": "Set the CSV delimiter, the default value is a comma: ','"
        },
        "csvColumnHeaders": {
          "type": "string"
        },
        "skipFirstLine": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Skip First Line",
          "description": "Skip the first line of the CSV file, set to 'Yes' if your CSV document contains column headers"
        }
      }
    },
    "DtoPopulateWordDocument": {
      "required": [
        "documentData",
        "fileContent"
      ],
      "type": "object",
      "properties": {
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The Microsoft Word Document (DOCX) to populate."
        },
        "documentData": {
          "type": "string",
          "x-ms-summary": "Document Data",
          "description": "The JSON data to populate the Microsoft Word Document with."
        },
        "cultureName": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Culture Name",
          "description": "Change the thread culture used to process the request."
        },
        "jsonParseMode": {
          "default": "Standard",
          "enum": [
            "Standard",
            "Strict"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "JSON Parse Mode",
          "description": "Sets the JSON parsing mode for simple values (null, boolean, number, integer, and string)."
        },
        "dateTimeFormat": {
          "default": "",
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Date Time Format",
          "description": "Sets a specfic format for parsing DateTime values."
        },
        "populationOptions": {
          "default": "InlineErrors",
          "enum": [
            "Default",
            "AllowMissingMembers",
            "ClearEmptyParagraphs",
            "InlineErrors"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Population Options",
          "description": "Sets the behaviour of the population engine."
        },
        "timezone": {
          "default": "Default",
          "enum": [
            "Default",
            "AUSCentralStandardTime",
            "AUSEasternStandardTime",
            "AfghanistanStandardTime",
            "AlaskanStandardTime",
            "AleutianStandardTime",
            "AltaiStandardTime",
            "ArabStandardTime",
            "ArabianStandardTime",
            "ArabicStandardTime",
            "ArgentinaStandardTime",
            "AstrakhanStandardTime",
            "AtlanticStandardTime",
            "AusCentralWStandardTime",
            "AzerbaijanStandardTime",
            "AzoresStandardTime",
            "BahiaStandardTime",
            "BangladeshStandardTime",
            "BelarusStandardTime",
            "BougainvilleStandardTime",
            "CanadaCentralStandardTime",
            "CapeVerdeStandardTime",
            "CaucasusStandardTime",
            "CenAustraliaStandardTime",
            "CentralAmericaStandardTime",
            "CentralAsiaStandardTime",
            "CentralBrazilianStandardTime",
            "CentralEuropeStandardTime",
            "CentralEuropeanStandardTime",
            "CentralPacificStandardTime",
            "CentralStandardTime",
            "CentralStandardTimeMexico",
            "ChathamIslandsStandardTime",
            "ChinaStandardTime",
            "CubaStandardTime",
            "DatelineStandardTime",
            "EAfricaStandardTime",
            "EAustraliaStandardTime",
            "EEuropeStandardTime",
            "ESouthAmericaStandardTime",
            "EasterIslandStandardTime",
            "EasternStandardTime",
            "EasternStandardTimeMexico",
            "EgyptStandardTime",
            "EkaterinburgStandardTime",
            "FLEStandardTime",
            "FijiStandardTime",
            "GMTStandardTime",
            "GTBStandardTime",
            "GeorgianStandardTime",
            "GreenlandStandardTime",
            "GreenwichStandardTime",
            "HaitiStandardTime",
            "HawaiianStandardTime",
            "IndiaStandardTime",
            "IranStandardTime",
            "IsraelStandardTime",
            "JordanStandardTime",
            "KaliningradStandardTime",
            "KamchatkaStandardTime",
            "KoreaStandardTime",
            "LibyaStandardTime",
            "LineIslandsStandardTime",
            "LordHoweStandardTime",
            "MagadanStandardTime",
            "MagallanesStandardTime",
            "MarquesasStandardTime",
            "MauritiusStandardTime",
            "MidAtlanticStandardTime",
            "MiddleEastStandardTime",
            "MontevideoStandardTime",
            "MoroccoStandardTime",
            "MountainStandardTime",
            "MountainStandardTimeMexico",
            "MyanmarStandardTime",
            "NCentralAsiaStandardTime",
            "NamibiaStandardTime",
            "NepalStandardTime",
            "NewZealandStandardTime",
            "NewfoundlandStandardTime",
            "NorfolkStandardTime",
            "NorthAsiaEastStandardTime",
            "NorthAsiaStandardTime",
            "NorthKoreaStandardTime",
            "OmskStandardTime",
            "PacificSAStandardTime",
            "PacificStandardTime",
            "PacificStandardTimeMexico",
            "PakistanStandardTime",
            "ParaguayStandardTime",
            "QyzylordaStandardTime",
            "RomanceStandardTime",
            "RussiaTimeZone10",
            "RussiaTimeZone11",
            "RussiaTimeZone3",
            "RussianStandardTime",
            "SAEasternStandardTime",
            "SAPacificStandardTime",
            "SAWesternStandardTime",
            "SEAsiaStandardTime",
            "SaintPierreStandardTime",
            "SakhalinStandardTime",
            "SamoaStandardTime",
            "SaoTomeStandardTime",
            "SaratovStandardTime",
            "SingaporeStandardTime",
            "SouthAfricaStandardTime",
            "SouthSudanStandardTime",
            "SriLankaStandardTime",
            "SudanStandardTime",
            "SyriaStandardTime",
            "TaipeiStandardTime",
            "TasmaniaStandardTime",
            "TocantinsStandardTime",
            "TokyoStandardTime",
            "TomskStandardTime",
            "TongaStandardTime",
            "TransbaikalStandardTime",
            "TurkeyStandardTime",
            "TurksAndCaicosStandardTime",
            "USEasternStandardTime",
            "USMountainStandardTime",
            "UTC",
            "UTC02",
            "UTC08",
            "UTC09",
            "UTC11",
            "UTC12",
            "UTC13",
            "UlaanbaatarStandardTime",
            "VenezuelaStandardTime",
            "VladivostokStandardTime",
            "VolgogradStandardTime",
            "WAustraliaStandardTime",
            "WCentralAfricaStandardTime",
            "WEuropeStandardTime",
            "WMongoliaStandardTime",
            "WestAsiaStandardTime",
            "WestBankStandardTime",
            "WestPacificStandardTime",
            "YakutskStandardTime",
            "YukonStandardTime"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Time Zone",
          "description": "Set a specific time zone for date and time processing"
        }
      }
    },
    "DtoReadBarcodeFromDocument": {
      "type": "object",
      "properties": {
        "fileType": {
          "enum": [
            "PDF",
            "DOCX"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Type",
          "description": "Select the source document format."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source file"
        },
        "barcodeReadConfidence": {
          "default": "Medium",
          "enum": [
            "Low",
            "Medium",
            "High"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Confidence",
          "description": "Set the confidence level for barcode detection"
        },
        "barcodeRemoveControlChars": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Control Characters",
          "description": "Set whether recognised control characters should be removed"
        }
      }
    },
    "DtoReadBarcodeFromImage": {
      "required": [
        "barcodeImageFormat",
        "fileContent"
      ],
      "type": "object",
      "properties": {
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source image file"
        },
        "barcodeImageFormat": {
          "enum": [
            "PNG",
            "JPG",
            "BMP",
            "TIFF",
            "GIF",
            "EMF"
          ],
          "type": "string"
        },
        "barcodeReadConfidence": {
          "default": "Medium",
          "enum": [
            "Low",
            "Medium",
            "High"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Confidence",
          "description": "Set the confidence level for barcode detection"
        },
        "barcodeRemoveControlChars": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Control Characters",
          "description": "Set whether recognised control characters should be removed"
        }
      }
    },
    "DtoReadQrCodeFromDocument": {
      "type": "object",
      "properties": {
        "fileType": {
          "enum": [
            "PDF",
            "DOCX"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Type",
          "description": "Select the source document format."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source file"
        },
        "barcodeReadConfidence": {
          "default": "Medium",
          "enum": [
            "Low",
            "Medium",
            "High"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Confidence",
          "description": "Set the confidence level for barcode detection"
        },
        "barcodeRemoveControlChars": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Control Characters",
          "description": "Set whether recognised control characters should be removed"
        }
      }
    },
    "DtoReadQrCodeFromImage": {
      "required": [
        "barcodeImageFormat",
        "fileContent"
      ],
      "type": "object",
      "properties": {
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source image file"
        },
        "barcodeImageFormat": {
          "enum": [
            "PNG",
            "JPG",
            "BMP",
            "TIFF",
            "GIF",
            "EMF"
          ],
          "type": "string"
        },
        "barcodeReadConfidence": {
          "default": "Medium",
          "enum": [
            "Low",
            "Medium",
            "High"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Confidence",
          "description": "Set the confidence level for barcode detection"
        },
        "barcodeRemoveControlChars": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Remove Control Characters",
          "description": "Set whether recognised control characters should be removed"
        }
      }
    },
    "DtoRedactPdf": {
      "required": [
        "FileName",
        "Redactions"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "Redactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Redaction"
          },
          "x-ms-summary": "Redactions",
          "description": "The collection of redactions to apply to this PDF document"
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoRegexSearchText": {
      "required": [
        "query",
        "text"
      ],
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Text",
          "description": "The text to search with the regex string provided"
        },
        "query": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Regex Query",
          "description": "The regex query to use to find matches in the string provided"
        },
        "ecmaScript": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "ECMAScript",
          "description": "Enables ECMAScript-compliant behavior for the expression. This value can be used only in conjunction with the IgnoreCase and Multiline options. Disabled by default."
        },
        "explicitCapture": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Explicit Capture",
          "description": "Specifies that the only valid captures are explicitly named or numbered groups of the form, disabled by default."
        },
        "ignoreCase": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Ignore Case",
          "description": "Specifies case-insensitive matching, disabled by default."
        },
        "ignoreWhitespace": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Ignore Whitespace",
          "description": "Eliminates unescaped white space from the pattern and enables comments marked with #, disabled by default."
        },
        "multiline": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Multiline",
          "description": "Changes the meaning of ^ and $ so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string, disabled by default."
        },
        "rightToLeft": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Right-to-Left",
          "description": "Specifies that the search will be from right to left instead of from left to right, disabled by default."
        },
        "singleline": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Singleline",
          "description": "Specifies single-line mode. Changes the meaning of the dot (.) so it matches every character (instead of every character except \\n), disabled by default."
        }
      }
    },
    "DtoRepairPdf": {
      "required": [
        "fileContent"
      ],
      "type": "object",
      "properties": {
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        }
      }
    },
    "DtoResponseAddHtmlHeaderFooter": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseAddImageWatermark": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseAddImageWatermarkAdv": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseAddImageWatermarkWord": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseAddPageNumbers": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseAddTextWatermark": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseAddTextWatermarkAdv": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseAddTextWatermarkToImage": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseAddTextWatermarkWord": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseBasicConversion": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseCompareWordDocuments": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseCompressPdf": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseConvertCad": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseConvertExcel": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseConvertMailMessage": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseConvertPdfToImages": {
      "required": [
        "documents"
      ],
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentArray"
          },
          "x-ms-visibility": "important",
          "x-ms-summary": "Documents",
          "description": "The array of images generated from the source PDF"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseConvertPdfToTiff": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseConvertPdfToWord": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseConvertPowerPoint": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseConvertToPdfA": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseConvertWord": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseCreateBarcode": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseCreateHMAC": {
      "required": [
        "hmac"
      ],
      "type": "object",
      "properties": {
        "hmac": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "HMAC",
          "description": "The computed HMAC"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseCreateHashCode": {
      "required": [
        "HashCode"
      ],
      "type": "object",
      "properties": {
        "HashCode": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Hash Code",
          "description": "The computed Hash Code"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseCreateQrCode": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseEncodianSendToFiler": {
      "required": [
        "response"
      ],
      "type": "object",
      "properties": {
        "response": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Response",
          "description": "The JSON response returned by Encodian Filer"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseExtractFormData": {
      "required": [
        "Lines"
      ],
      "type": "object",
      "properties": {
        "Lines": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Lines",
          "description": "The json extraction as text."
        },
        "Tables": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Tables",
          "description": "The json extraction as text."
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseExtractImage": {
      "required": [
        "Images"
      ],
      "type": "object",
      "properties": {
        "Images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentArray"
          },
          "x-ms-visibility": "important",
          "x-ms-summary": "Images",
          "description": "The array of images extracted from the PDF"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseExtractTextRegion": {
      "required": [
        "TextRegionResults",
        "TextRegionResultsSimple"
      ],
      "type": "object",
      "properties": {
        "TextRegionResultsSimple": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Simple Text Region Results",
          "description": "A collection of text region results in simplified format"
        },
        "TextRegionResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextRegionResult"
          },
          "x-ms-visibility": "important",
          "x-ms-summary": "Text Region Results",
          "description": "A collection of text region results."
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseFillPdfForm": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseFlattenPdf": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseGetImageInfo": {
      "type": "object",
      "properties": {
        "imageFormat": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Image Format",
          "description": "The file format of the image"
        },
        "fileSize": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Size (MBs)",
          "description": "The size of the supplied image in MBs"
        },
        "width": {
          "format": "double",
          "type": "number",
          "x-ms-visibility": "important",
          "x-ms-summary": "Width",
          "description": "The width of the image (Pixels)"
        },
        "height": {
          "format": "double",
          "type": "number",
          "x-ms-visibility": "important",
          "x-ms-summary": "Height",
          "description": "The height of the image (Pixels)"
        },
        "orientation": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Orientation",
          "description": "The orientation of the image"
        },
        "bitsPerPixel": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "important",
          "x-ms-summary": "Bits per Pixel",
          "description": "The image bits per pixel count"
        },
        "horizontalResolution": {
          "format": "double",
          "type": "number",
          "x-ms-visibility": "important",
          "x-ms-summary": "Horizontal Resolution",
          "description": "The horizontal image resolution (DPI)"
        },
        "verticalResolution": {
          "format": "double",
          "type": "number",
          "x-ms-visibility": "important",
          "x-ms-summary": "Vertical Resolution",
          "description": "The vertical image resolution (DPI)"
        },
        "hasExifData": {
          "type": "boolean",
          "x-ms-visibility": "important",
          "x-ms-summary": "Has EXIF Data",
          "description": "Confirms whether the image contains EXIF Data"
        },
        "exifDataJson": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "EXIF Data (JSON)",
          "description": "Image EXIF Data provided as a JSON string"
        },
        "hasXmpData": {
          "type": "boolean",
          "x-ms-visibility": "important",
          "x-ms-summary": "Has XMP Data",
          "description": "Confirms whether the image contains XMP Data"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseGetPdfDocumentInfo": {
      "type": "object",
      "properties": {
        "NumberOfPages": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "important",
          "x-ms-summary": "Number of Pages",
          "description": "The number of pages in the supplied PDF document"
        },
        "FileSize": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Size (MBs)",
          "description": "The size of the supplied PDF document in MBs"
        },
        "Author": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Author",
          "description": "The author of the PDF as set in the PDF properties"
        },
        "Creator": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Creator",
          "description": "The creator of the PDF as set in the PDF properties"
        },
        "Producer": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Producer",
          "description": "The producer of the PDF as set in the PDF properties"
        },
        "Title": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Title",
          "description": "The title of the PDF as set in the PDF properties"
        },
        "Subject": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Subject",
          "description": "The subject of the PDF as set in the PDF properties"
        },
        "Keywords": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Keywords",
          "description": "The keywords of the PDF as set in the PDF properties"
        },
        "Width": {
          "format": "double",
          "type": "number",
          "x-ms-visibility": "important",
          "x-ms-summary": "Width",
          "description": "The width of the PDF Document (Points)"
        },
        "Height": {
          "format": "double",
          "type": "number",
          "x-ms-visibility": "important",
          "x-ms-summary": "Height",
          "description": "The height of the PDF Document (Points)"
        },
        "Orientation": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Orientation",
          "description": "The orientation of the PDF Document"
        },
        "CreatedDate": {
          "format": "date-time",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Created Date",
          "description": "The creation date of the PDF as set in the PDF properties"
        },
        "ModifiedDate": {
          "format": "date-time",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Modified Date",
          "description": "The last modified date of the PDF as set in the PDF properties"
        },
        "PDFFormat": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "PDF Format",
          "description": "The format of the PDF"
        },
        "IsPDFACompliant": {
          "type": "boolean",
          "x-ms-visibility": "important",
          "x-ms-summary": "Is PDFA Compliant",
          "description": "Indicates whether the supplied PDF complies with the PDF/a standard"
        },
        "IsPDFUACompliant": {
          "type": "boolean",
          "x-ms-visibility": "important",
          "x-ms-summary": "Is PDFUA Compliant",
          "description": "Indicates whether the supplied PDF complies with the PDF/ua standard"
        },
        "IsEncrypted": {
          "type": "boolean",
          "x-ms-visibility": "important",
          "x-ms-summary": "Is Encrypted",
          "description": "Indicates whether the supplied PDF complies is encrypted"
        },
        "HasTextLayer": {
          "type": "boolean",
          "x-ms-visibility": "important",
          "x-ms-summary": "Has Text Layer",
          "description": "Indicates whether the supplied PDF has a text layer"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseGetPdfFormData": {
      "type": "object",
      "properties": {
        "Form Data": {
          "type": "string"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseGetPdfTextLayer": {
      "required": [
        "TextLayer"
      ],
      "type": "object",
      "properties": {
        "TextLayer": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Text Layer",
          "description": "The text layer extracted from the PDF document."
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseHtmlToPdf": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseHtmlToWord": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseImageCleanUpDoc": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseImageCleanUpPhoto": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseImageCompress": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseImageConvertFormat": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseImageExtractText": {
      "required": [
        "Text"
      ],
      "type": "object",
      "properties": {
        "Text": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Text",
          "description": "The text layer extracted from the image."
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseImageRemoveExifTags": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseImageResize": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseInsertHtmlToPdf": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseMergeArrayOfDocumentsToPdf": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseMergeArrayOfDocumentsToWord": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseMergeArrayOfExcelDocuments": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseMergeDocumentsToPdf": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseMergePresentations": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseMgmtGetSubscriptionStatus": {
      "type": "object",
      "properties": {
        "availableActionsMonth": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Available Actions",
          "description": "The number of actions remaining for the current calendar month."
        },
        "subscriptionEnabled": {
          "type": "boolean",
          "x-ms-summary": "Subscription Enabled",
          "description": "Indicates whether the Encodian subscription is enabled or disabled."
        },
        "subscriptionLevel": {
          "type": "string",
          "x-ms-summary": "Subscription Level",
          "description": "Details the current Encodian subscription level."
        },
        "monthlyActions": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Monthly Actions",
          "description": "Details the allowed actions per month for the current Encodian subscription level."
        },
        "expiryDate": {
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Expiry Date",
          "description": "The date and time your Encodian subscription will expire."
        },
        "billingInterval": {
          "type": "string",
          "x-ms-summary": "Billing Interval",
          "description": "Details the current billing interval (Monthly or Annually)."
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseMultipleFiles": {
      "required": [
        "documents"
      ],
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentArray"
          },
          "x-ms-visibility": "important",
          "x-ms-summary": "Documents",
          "description": "An array of files"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseOcrPdf": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseParseCsv": {
      "required": [
        "csvData"
      ],
      "type": "object",
      "properties": {
        "csvData": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "CSV Data",
          "description": "The parsed CSV data in JSON format."
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponsePopulateWordDocument": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseReadBarcodeFromDocument": {
      "required": [
        "barcodes"
      ],
      "type": "object",
      "properties": {
        "barcodes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "important",
          "x-ms-summary": "Barcodes",
          "description": "The value of the barcodes detected"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseReadBarcodeFromImage": {
      "required": [
        "Value"
      ],
      "type": "object",
      "properties": {
        "Value": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Value",
          "description": "The value of the barcode"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseReadQrCodeFromDocument": {
      "required": [
        "qrCodes"
      ],
      "type": "object",
      "properties": {
        "qrCodes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "important",
          "x-ms-summary": "QR Codes",
          "description": "The value of the QR Codes detected"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseReadQrCodeFromImage": {
      "required": [
        "Value"
      ],
      "type": "object",
      "properties": {
        "Value": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Value",
          "description": "The value of the QR Code"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseRedactPdf": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseRegexSearchText": {
      "required": [
        "matches"
      ],
      "type": "object",
      "properties": {
        "matches": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "important",
          "x-ms-summary": "Matches",
          "description": "The matches found in the text provided"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseRepairPdf": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseSearchAndReplaceText": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseSearchAndReplaceTextWithImage": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseSecurePdf": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseSplitDocument": {
      "required": [
        "documents"
      ],
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentArray"
          },
          "x-ms-visibility": "important",
          "x-ms-summary": "Documents",
          "description": "The array of documents to be processed"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseSplitPdfByBarcode": {
      "required": [
        "documents"
      ],
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentArray"
          },
          "x-ms-visibility": "important",
          "x-ms-summary": "Documents",
          "description": "The array of documents split from the source PDF"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseSplitPdfByText": {
      "required": [
        "documents"
      ],
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentArray"
          },
          "x-ms-visibility": "important",
          "x-ms-summary": "Documents",
          "description": "The array of documents split from the source PDF"
        },
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        }
      }
    },
    "DtoResponseTextToPdf": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseUnlockPdf": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseWordToPdfForm": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoResponseZipArrayOfDocuments": {
      "type": "object",
      "properties": {
        "HttpStatusCode": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "HTTP Status Code",
          "description": "The HTTP Status code for the response."
        },
        "HttpStatusMessage": {
          "type": "string",
          "x-ms-summary": "HTTP Status Message",
          "description": "The HTTP Status message for the response."
        },
        "OperationId": {
          "type": "string",
          "x-ms-summary": "Operation ID",
          "description": "The unique ID assigned to this operation."
        },
        "Errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Errors",
          "description": "An array of error messages should an error occur."
        },
        "OperationStatus": {
          "type": "string",
          "x-ms-summary": "Operation Status",
          "description": "Indicates whether the operation has completed, has been queued or has failed."
        },
        "Filename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the document."
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Content",
          "description": "The processed document."
        }
      }
    },
    "DtoSearchAndReplaceText": {
      "required": [
        "Phrases"
      ],
      "type": "object",
      "properties": {
        "fileType": {
          "enum": [
            "PDF",
            "DOCX"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Type",
          "description": "Select the source document format."
        },
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source file"
        },
        "Phrases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Phrase"
          },
          "x-ms-summary": "Phrases",
          "description": "The collection of text phrases to locate and replace."
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoSearchAndReplaceTextWithImage": {
      "required": [
        "imageFileContent",
        "imageFilename",
        "SearchText"
      ],
      "type": "object",
      "properties": {
        "fileType": {
          "enum": [
            "PDF",
            "DOCX"
          ],
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "File Type",
          "description": "Select the source document format."
        },
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "FileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source file"
        },
        "SearchText": {
          "type": "string",
          "x-ms-summary": "Search Text",
          "description": "The text to locate and replace with the specified image"
        },
        "imageFilename": {
          "type": "string",
          "x-ms-summary": "Image Filename",
          "description": "The filename for the image file, the file extension is mandatory: 'file.jpg' and not 'file'"
        },
        "imageFileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "Image File Content",
          "description": "The content of the image file"
        },
        "skipFirstPage": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Skip First Page",
          "description": "Set whether to ignore the first page when searching for the text fragment."
        },
        "applyTo": {
          "default": "AllPages",
          "enum": [
            "FirstPage",
            "AllPages",
            "LastPage",
            "Specific"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Apply To",
          "description": "Set which pages within the document to search for the text fragment"
        },
        "pageNumbers": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Page Numbers",
          "description": "Specify the page numbers to search for the text fragment, this property only applies when the 'Apply To' property is set to 'Specific'."
        },
        "ignorePageNumbers": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Ignore Page Numbers",
          "description": "Specify the page numbers not to search for the text fragment, this property only applies when the 'Apply To' property is set to 'Specific'."
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoSecurePdf": {
      "required": [
        "FileName",
        "FinalOperation"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "userPassword": {
          "type": "string",
          "x-ms-summary": "View Password",
          "description": "Protect view access to the document"
        },
        "adminPassword": {
          "type": "string",
          "x-ms-summary": "Edit Password",
          "description": "Protect edit access to the document"
        },
        "pdfPrivileges": {
          "default": "DenyAll",
          "enum": [
            "AllowAll",
            "DenyAll",
            "Specific"
          ],
          "type": "string",
          "x-ms-summary": "Privileges",
          "description": "Set the privileges assigned to the PDF document"
        },
        "cryptoAlgorithm": {
          "default": "AESx256",
          "enum": [
            "RC4x40",
            "RC4x128",
            "AESx128",
            "AESx256"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Cryptographic Algorithm",
          "description": "Set the cryptographic algorithm"
        },
        "pdfPrivilegesAllowAssembly": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Privilege - Assembly",
          "description": ""
        },
        "pdfPrivilegesAllowCopy": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Privilege - Copy",
          "description": ""
        },
        "pdfPrivilegesAllowFillIn": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Privilege - Fill in Forms",
          "description": ""
        },
        "pdfPrivilegesAllowPrint": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Privilege - Print",
          "description": ""
        },
        "pdfPrivilegesAllowScreenReaders": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Privilege - Screen Readers",
          "description": ""
        },
        "pdfPrivilegesAllowModifyContents": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Privilege - Modify Contents",
          "description": ""
        },
        "pdfPrivilegesAllowModifyAnnotations": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Privilege - Modify Annotations",
          "description": ""
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Final Operation",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoSetPdfPrivileges": {
      "required": [
        "FileName"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "pdfPrivileges": {
          "default": "DenyAll",
          "enum": [
            "AllowAll",
            "DenyAll",
            "Specific"
          ],
          "type": "string",
          "x-ms-summary": "Privileges",
          "description": "Set the privileges assigned to the PDF document"
        },
        "pdfPrivilegesAllowAssembly": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Assembly",
          "description": ""
        },
        "pdfPrivilegesAllowCopy": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Copy",
          "description": ""
        },
        "pdfPrivilegesAllowFillIn": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Fill in Forms",
          "description": ""
        },
        "pdfPrivilegesAllowPrint": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Print",
          "description": ""
        },
        "pdfPrivilegesAllowScreenReaders": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Screen Readers",
          "description": ""
        },
        "pdfPrivilegesAllowModifyContents": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Modify Contents",
          "description": ""
        },
        "pdfPrivilegesAllowModifyAnnotations": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Modify Annotations",
          "description": ""
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoSplitDocument": {
      "required": [
        "fileName",
        "splitByType",
        "splitConfiguration"
      ],
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the PDF file"
        },
        "splitByType": {
          "enum": [
            "NumberOfPages",
            "PageArray",
            "BookmarkLevel"
          ],
          "type": "string",
          "x-ms-summary": "Split by Type",
          "description": "Select how to split the file"
        },
        "splitConfiguration": {
          "type": "string",
          "x-ms-summary": "Split Configuration",
          "description": "Provide a split configuration"
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoSplitPdfByBarcode": {
      "required": [
        "fileName",
        "splitPdfByBarcodeAction",
        "splitPdfByBarcodeType"
      ],
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the PDF file"
        },
        "splitPdfByBarcodeValue": {
          "type": "string",
          "x-ms-summary": "Barcode Value",
          "description": "Optional - Specify a value for detecting a specific barcode(s)"
        },
        "splitPdfByBarcodeType": {
          "default": "AllInstances",
          "enum": [
            "AllInstances",
            "FirstInstant",
            "LastInstant"
          ],
          "type": "string",
          "x-ms-summary": "Split Configuration",
          "description": "Select a split configuration"
        },
        "splitPdfByBarcodeAction": {
          "default": "SplitOn",
          "enum": [
            "SplitOn",
            "SplitAfter",
            "SplitBefore",
            "Remove"
          ],
          "type": "string",
          "x-ms-summary": "Split Action",
          "description": "Select a split action, whether to split before, after or remove the page containing the split value."
        },
        "barcodeReadConfidence": {
          "default": "Medium",
          "enum": [
            "Low",
            "Medium",
            "High"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Confidence",
          "description": "Set the confidence level for barcode detection"
        }
      }
    },
    "DtoSplitPdfByText": {
      "required": [
        "fileName",
        "splitAction",
        "splitPdfByTextType",
        "splitValue"
      ],
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the PDF file"
        },
        "splitValue": {
          "type": "string",
          "x-ms-summary": "Split Value",
          "description": "Provide the split value used to perform the split operation"
        },
        "isExpression": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Is Expression",
          "description": "Set whether the 'Split Value' value should be evaluted as a regular expression, the default value is 'false'"
        },
        "prefixFilename": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Prefix Filename",
          "description": "Set whether the expression value should be used within the output filename."
        },
        "splitPdfByTextType": {
          "default": "AllInstances",
          "enum": [
            "AllInstances",
            "FirstInstant",
            "LastInstant"
          ],
          "type": "string",
          "x-ms-summary": "Split Configuration",
          "description": "Select a split configuration"
        },
        "splitAction": {
          "default": "SplitOn",
          "enum": [
            "SplitOn",
            "SplitAfter",
            "SplitBefore",
            "Remove"
          ],
          "type": "string",
          "x-ms-summary": "Split Action",
          "description": "Select a split action, whether to split before, after or remove the page containing the split value."
        }
      }
    },
    "DtoTextToPdf": {
      "required": [
        "FileName",
        "outputFilename"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "default": "temp.txt",
          "type": "string",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file"
        },
        "outputFilename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "PDF Filename",
          "description": "The filename of the output PDF document"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "Optional - Please provide either The file content of the source file and source filename or text data."
        },
        "textData": {
          "type": "string",
          "x-ms-summary": "Text Data",
          "description": "Optional - Please provide either the text data which will be converted to a PDF document or The file content of the source file and source filename."
        },
        "textEncodingType": {
          "default": "Default",
          "enum": [
            "Default",
            "Latin1",
            "BigEndianUnicode",
            "UTF16",
            "UTF8",
            "UTF7",
            "ASCII"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Encoding Type",
          "description": "The encoding type used for text conversion."
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoUnlockPdf": {
      "required": [
        "FileName",
        "FinalOperation",
        "password"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source PDF file, the file extension is mandatory: 'file.pdf' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source PDF file"
        },
        "password": {
          "type": "string",
          "x-ms-summary": "Password",
          "description": "The password to use to unlock the PDF Document"
        },
        "operationId": {
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Operation ID",
          "description": "Advanced - Set the identifier of a previous Encodian operation, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoWordToPdfForm": {
      "required": [
        "fileContent",
        "FileName",
        "outputFilename"
      ],
      "type": "object",
      "properties": {
        "FileName": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "The filename of the source Microsoft Word file, the file extension is mandatory: 'file.doc' and not 'file'"
        },
        "fileContent": {
          "format": "byte",
          "type": "string",
          "x-ms-summary": "File Content",
          "description": "The file content of the source Microsoft Word file"
        },
        "outputFilename": {
          "type": "string",
          "x-ms-summary": "PDF Filename",
          "description": "The filename of the output PDF document"
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "DtoZipArrayOfDocuments": {
      "required": [
        "documents",
        "FinalOperation",
        "outputFilename"
      ],
      "type": "object",
      "properties": {
        "outputFilename": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Filename",
          "description": "The filename of the output ZIP package"
        },
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentArray"
          },
          "x-ms-summary": "Documents",
          "description": "The array of documents to be zipped"
        },
        "Password": {
          "type": "string",
          "x-ms-summary": "Password",
          "description": "Set a password to protect and encrypt the archive (ZIP file)"
        },
        "encryption": {
          "default": "ZipCrypto",
          "enum": [
            "ZipCrypto",
            "AES128",
            "AES256"
          ],
          "type": "string",
          "x-ms-summary": "Encryption",
          "description": "Set the encryption level which will be applied to a password protected archive (ZIP file)"
        },
        "encoding": {
          "default": "UTF8",
          "enum": [
            "UTF8",
            "UTF7",
            "UTF32",
            "ASCII",
            "Unicode",
            "BigEndianUnicode"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Encoding",
          "description": "Set the encoding type."
        },
        "FinalOperation": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "internal",
          "x-ms-summary": "Return File",
          "description": "Advanced - Return the processed file (File Contents) as opposed to just an Operation ID, please review before using - https://support.encodian.com/hc/en-gb/articles/360010509573-Flow-Action-Return-Options-File-Content-vs-Operation-ID"
        }
      }
    },
    "ImageRegion": {
      "required": [
        "ExtractEntirePage",
        "ImageType",
        "LowerLeftXCoordinate",
        "LowerLeftYCoordinate",
        "PageNumber",
        "Resolution",
        "UpperRightXCoordinate",
        "UpperRightYCoordinate"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Name",
          "description": "The name assigned to the extracted image"
        },
        "LowerLeftXCoordinate": {
          "format": "double",
          "default": 0,
          "type": "number",
          "x-ms-visibility": "important",
          "x-ms-summary": "Lower Left X Coordinate",
          "description": "The number of points from the left edge of the page to the lower left corner of the rectangle image region"
        },
        "LowerLeftYCoordinate": {
          "format": "double",
          "default": 0,
          "type": "number",
          "x-ms-visibility": "important",
          "x-ms-summary": "Lower Left Y Coordinate",
          "description": "The number of points from the bottom edge of the page to the lower left corner of the rectangle image region"
        },
        "UpperRightXCoordinate": {
          "format": "double",
          "default": 0,
          "type": "number",
          "x-ms-visibility": "important",
          "x-ms-summary": "Upper Right X Coordinate",
          "description": "The number of points from the left edge of the page to the upper right corner of the rectangle image region"
        },
        "UpperRightYCoordinate": {
          "format": "double",
          "default": 0,
          "type": "number",
          "x-ms-visibility": "important",
          "x-ms-summary": "Upper Right Y Coordinate",
          "description": "The number of points from the bottom edge of the page to the upper right corner of the rectangle image region"
        },
        "PageNumber": {
          "format": "int32",
          "default": 1,
          "type": "integer",
          "x-ms-visibility": "important",
          "x-ms-summary": "Page Number",
          "description": "The number of the page to extract the image from"
        },
        "ImageType": {
          "default": "PNG",
          "enum": [
            "JPG",
            "PNG",
            "TIFF",
            "BMP"
          ],
          "type": "string"
        },
        "ExtractEntirePage": {
          "default": true,
          "type": "boolean",
          "x-ms-visibility": "important",
          "x-ms-summary": "Extract Entire Page",
          "description": "Extract the specified page as an image, ignoring and specificed coodinates"
        },
        "Resolution": {
          "format": "int32",
          "default": 300,
          "type": "integer",
          "x-ms-visibility": "important",
          "x-ms-summary": "Resolution",
          "description": "The resolution of the extracted image"
        }
      }
    },
    "Phrase": {
      "required": [
        "SearchText"
      ],
      "type": "object",
      "properties": {
        "SearchText": {
          "type": "string",
          "x-ms-summary": "Search Text",
          "description": "Optional - The text to locate and replace with the 'Replacement Text' value"
        },
        "IsExpression": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Is Expression",
          "description": "Set whether the 'Search Text' value should be evaluted as a regular expression, the default value is 'false'"
        },
        "ReplacementText": {
          "type": "string",
          "x-ms-summary": "Replacement Text",
          "description": "The text to replace the 'Search Text' text with"
        },
        "Font": {
          "default": "Arial",
          "type": "string",
          "x-ms-summary": "Font",
          "description": "The name of the font to use for the 'Replacement Text', the default font is 'Arial'"
        },
        "FontSize": {
          "format": "int32",
          "default": 16,
          "type": "integer",
          "x-ms-summary": "Font Size",
          "description": "The size of the font to use for the 'Replacement Text', the default size is '16'"
        },
        "FontColour": {
          "default": "#000000",
          "type": "string",
          "x-ms-summary": "Font Colour",
          "description": "The HTML colour of the font to use for the 'Replacement Text', the default colour is '#000000'"
        },
        "BackgroundColour": {
          "default": "#FFFFFF",
          "type": "string",
          "x-ms-summary": "Background Colour",
          "description": "The background HTML colour to use for the 'Replacement Text', the default colour is '#FFFFFF'"
        },
        "Underline": {
          "default": false,
          "type": "boolean",
          "x-ms-summary": "Underline",
          "description": "Set whether the 'Replacement Text' should be underlined, the default value is 'false'"
        },
        "WordSpacing": {
          "format": "float",
          "type": "number",
          "x-ms-summary": "Word Spacing",
          "description": "The word spacing to apply to the 'Replacement Text'"
        },
        "LineSpacing": {
          "format": "float",
          "type": "number",
          "x-ms-summary": "Line Spacing",
          "description": "The line spacing to apply to the 'Replacement Text'"
        }
      }
    },
    "Redaction": {
      "type": "object",
      "properties": {
        "SearchText": {
          "type": "string",
          "x-ms-summary": "Text",
          "description": "The text to search for and apply the specified redaction to."
        },
        "SearchExpression": {
          "type": "string",
          "x-ms-summary": "Expression",
          "description": "Specify a regular expression to seek matching text and apply the specified redaction to."
        },
        "RedactionColour": {
          "default": "#000000",
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Redaction Colour",
          "description": "The redaction colour to apply to the redaction, the default value is #000000 (Black)"
        },
        "skipFirstPage": {
          "default": false,
          "type": "boolean",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Skip First Page",
          "description": "Set whether to ignore the first page ."
        },
        "applyTo": {
          "default": "AllPages",
          "enum": [
            "FirstPage",
            "AllPages",
            "LastPage",
            "Specific"
          ],
          "type": "string",
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Apply To",
          "description": "Set which pages within the document to redact"
        },
        "pageNumbers": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Page Numbers",
          "description": "Specify the page numbers to apply redaction to, this property only applies when the 'Apply To' property is set to 'Specific'."
        },
        "ignorePageNumbers": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "x-ms-visibility": "advanced",
          "x-ms-summary": "Ignore Page Numbers",
          "description": "Specify the page numbers not to apply redaction to, this property only applies when the 'Apply To' property is set to 'Specific'."
        }
      }
    },
    "TextRegion": {
      "required": [
        "LowerLeftXCoordinate",
        "LowerLeftYCoordinate",
        "Name",
        "Page Number",
        "UpperRightXCoordinate",
        "UpperRightYCoordinate"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Name",
          "description": "The name assigned to the text region"
        },
        "LowerLeftXCoordinate": {
          "format": "double",
          "type": "number",
          "x-ms-visibility": "important",
          "x-ms-summary": "Lower Left X Coordinate",
          "description": "The number of points from the left edge of the page to the lower left corner of the rectangle text region"
        },
        "LowerLeftYCoordinate": {
          "format": "double",
          "type": "number",
          "x-ms-visibility": "important",
          "x-ms-summary": "Lower Left Y Coordinate",
          "description": "The number of points from the bottom edge of the page to the lower left corner of the rectangle text region"
        },
        "UpperRightXCoordinate": {
          "format": "double",
          "type": "number",
          "x-ms-visibility": "important",
          "x-ms-summary": "Upper Right X Coordinate",
          "description": "The number of points from the left edge of the page to the upper right corner of the rectangle text region"
        },
        "UpperRightYCoordinate": {
          "format": "double",
          "type": "number",
          "x-ms-visibility": "important",
          "x-ms-summary": "Upper Right Y Coordinate",
          "description": "The number of points from the bottom edge of the page to the upper right corner of the rectangle text region"
        },
        "Page Number": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "TextRegionResult": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Name",
          "description": "The name assigned to the text region"
        },
        "Text": {
          "type": "string",
          "x-ms-visibility": "important",
          "x-ms-summary": "Text",
          "description": "The text extracted via OCR from the specified region"
        },
        "PageNumber": {
          "format": "int32",
          "type": "integer",
          "x-ms-visibility": "important",
          "x-ms-summary": "Page Number",
          "description": "The number of the page the text was extracted from"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "X-ApiKey",
      "in": "header",
      "description": "API Key Authentication Header"
    }
  },
  "security": [
    {
      "defaultAuth": [ ]
    }
  ]
}