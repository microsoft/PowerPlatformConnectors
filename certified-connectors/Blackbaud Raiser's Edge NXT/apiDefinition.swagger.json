{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Blackbaud Raisers Edge NXT",
    "description": "Blackbaud Raiser\u2019s Edge NXT is a comprehensive cloud-based fundraising and donor management software solution built specifically for nonprofits and the entire social good community.",
    "x-ms-api-annotation": {
      "status": "Preview"
    }
  },
  "host": "api.sky.blackbaud.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/commpref/v1/consent/categories": {
      "get": {
        "operationId": "ListConsentCategories",
        "summary": "List consent categories",
        "description": "Lists the available consent categories.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive categories?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConsentCategoryCollection"
            }
          }
        }
      }
    },
    "/commpref/v1/consent/channels": {
      "get": {
        "operationId": "ListConsentChannels",
        "summary": "List consent channels",
        "description": "Lists the available consent channels.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConsentChannelCollection"
            }
          }
        }
      }
    },
    "/commpref/v1/consent/consents": {
      "post": {
        "operationId": "CreateConstituentConsent",
        "summary": "Create a constituent consent record",
        "description": "Creates a new constituent consent record.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConstituentConsentAdd"
            },
            "description": "An object that represents the consent record to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds. The response body contains the ID of the new consent record.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.CreatedConstituentConsent"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create a consent record."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/commpref/v1/consent/sources": {
      "get": {
        "operationId": "ListConsentSources",
        "summary": "List consent sources",
        "description": "Lists the available consent sources.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive sources?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConsentSourceCollection"
            }
          }
        }
      }
    },
    "/commpref/v1/constituents/{constituent_id}/consents": {
      "get": {
        "operationId": "ListConstituentConsents",
        "summary": "List constituent consent records",
        "description": "Lists the consent records for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "most_recent_only",
            "in": "query",
            "description": "Include only the most recent consent records for each channel category combination in the response?",
            "type": "boolean",
            "x-ms-summary": "Most recent only?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConstituentConsentReadCollection"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameter is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the constituent."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/commpref/v1/constituents/{constituent_id}/constituentsolicitcodes": {
      "get": {
        "operationId": "ListConstituentSolicitCodes",
        "summary": "List constituent solicit codes",
        "description": "Lists the solicit codes for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConstituentSolicitCodeReadCollection"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameter is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the constituent or solicit codes."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/commpref/v1/constituentsolicitcodes": {
      "post": {
        "operationId": "CreateConstituentSolicitCode",
        "summary": "Create a constituent solicit code",
        "description": "Creates a new constituent solicit code.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConstituentSolicitCodeAdd"
            },
            "description": "An object that represents the solicit code to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a phone. The response body contains the ID of the new phone.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.CreatedConstituentSolicitCode"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the phone."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/commpref/v1/constituentsolicitcodes/{constituent_solicit_code_id}": {
      "patch": {
        "operationId": "EditConstituentSolicitCode",
        "summary": "Update a constituent solicit code",
        "description": "Updates a constituent solicit code.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_solicit_code_id",
            "in": "path",
            "description": "The system record ID of the solicit code to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Solicit code ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConstituentSolicitCodeEdit"
            },
            "description": "An object that represents the properties of the solicit code to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the solicit code."
          },
          "400": {
            "description": "Returned when the specified solicit code ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the solicit code."
          },
          "404": {
            "description": "Returned when the specified solicit code is not found."
          }
        }
      }
    },
    "/commpref/v1/solicitcodes": {
      "get": {
        "operationId": "ListSolicitCodes",
        "summary": "List solicit codes",
        "description": "Lists the available solicit codes.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.SolicitCodeCollection"
            }
          }
        }
      }
    },
    "/constituent/v1/actions": {
      "get": {
        "operationId": "ListActions",
        "summary": "List actions",
        "description": "Returns a list of actions.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "computed_status",
            "in": "query",
            "description": "Represents a filter for results based on the computed action status. Available values are 'Open', 'Completed', or 'PastDue'.  Currently, only a single value can be supplied in the filter.",
            "type": "string",
            "x-ms-summary": "Computed status"
          },
          {
            "name": "status_code",
            "in": "query",
            "description": "Represents a filter for results based on the action status. Returns actions if any of the specified status codes match any of their status codes. For example, \"status_code=Closed&amp;status_code=Pending\" returns actions with a status of either \"Closed\" or \"Pending\".",
            "type": "string",
            "x-ms-summary": "Status"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500.",
            "type": "integer",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "x-ms-summary": "Offset"
          },
          {
            "name": "date_added",
            "in": "query",
            "description": "Filter the results to actions created on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Added on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "last_modified",
            "in": "query",
            "description": "Filter the results to actions modified on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Modified on or after",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfActionRead"
            }
          },
          "400": {
            "description": "Returned when the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the actions."
          }
        }
      },
      "post": {
        "operationId": "CreateAction",
        "summary": "Create a constituent action",
        "description": "Creates a new constituent action.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ActionAdd"
            },
            "description": "An object that represents the action to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an action. The response body contains the ID of the new action.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedAction"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the action."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/actions/{action_id}": {
      "get": {
        "operationId": "GetAction",
        "summary": "Get a constituent action",
        "description": "Returns information about a constituent action.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "action_id",
            "in": "path",
            "description": "The system record ID of the action to get.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Action ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ActionRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the action."
          },
          "404": {
            "description": "Returned when the specified action is not found."
          }
        }
      },
      "patch": {
        "operationId": "EditAction",
        "summary": "Update a constituent action",
        "description": "Updates a constituent action.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "action_id",
            "in": "path",
            "description": "The system record ID of the action to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Action ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ActionEdit"
            },
            "description": "An object that represents the properties of the action to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the action."
          },
          "400": {
            "description": "Returned when the specified action ID in the request URL body or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the action."
          },
          "404": {
            "description": "Returned when the specified action is not found."
          }
        }
      }
    },
    "/constituent/v1/actions/{action_id}/attachments": {
      "get": {
        "operationId": "ListActionAttachments",
        "summary": "List action attachments",
        "description": "Lists the attachments for an action.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "action_id",
            "in": "path",
            "description": "The system record ID of the action.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Action ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfActionAttachmentRead"
            }
          },
          "400": {
            "description": "Returned when the specified action ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the attachments."
          },
          "404": {
            "description": "Returned when the specified action is not found."
          }
        }
      }
    },
    "/constituent/v1/actions/{action_id}/customfields": {
      "get": {
        "operationId": "ListActionCustomFields",
        "summary": "List action custom fields",
        "description": "Lists the custom fields for an action.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "action_id",
            "in": "path",
            "description": "The system record ID of the action.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Action ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfActionCustomFieldRead"
            }
          },
          "400": {
            "description": "Returned when the specified action ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the custom fields."
          },
          "404": {
            "description": "Returned when the specified action is not found."
          }
        }
      }
    },
    "/constituent/v1/actions/attachments": {
      "post": {
        "operationId": "CreateActionAttachment",
        "summary": "Create an action attachment",
        "description": "Creates a new action attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ActionAttachmentAdd"
            },
            "description": "An object that represents the attachment to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an attachment. The response body contains the ID of the new attachment.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedActionAttachment"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the attachment."
          },
          "404": {
            "description": "Returned when the specified action is not found."
          }
        }
      }
    },
    "/constituent/v1/actions/attachments/{attachment_id}": {
      "patch": {
        "operationId": "EditActionAttachment",
        "summary": "Update an action attachment",
        "description": "Updates an action attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "attachment_id",
            "in": "path",
            "description": "The system record ID of the attachment to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Attachment ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ActionAttachmentEdit"
            },
            "description": "An object that represents the properties of the attachment to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the attachment."
          },
          "400": {
            "description": "Returned when the specified attachment ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the attachment."
          },
          "404": {
            "description": "Returned when the specified attachment is not found."
          }
        }
      }
    },
    "/constituent/v1/actions/customfields": {
      "post": {
        "operationId": "CreateActionCustomField",
        "summary": "Create an action custom field",
        "description": "Creates a new action custom field.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ActionCustomFieldAdd"
            },
            "description": "An object that represents the custom field to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a custom field. The response body contains the ID of the new custom field.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedActionCustomField"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the custom field."
          },
          "404": {
            "description": "Returned when the specified action is not found."
          }
        }
      }
    },
    "/constituent/v1/actions/customfields/categories/details": {
      "get": {
        "operationId": "ListActionCustomFieldCategoryDetails",
        "summary": "List custom field categories",
        "description": "Lists the action custom field category details.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfCustomFieldCategoryRead"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view custom field categories."
          }
        }
      }
    },
    "/constituent/v1/addresses": {
      "post": {
        "operationId": "CreateConstituentAddress",
        "summary": "Create a constituent address",
        "description": "Creates a new constituent address.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.AddressAdd"
            },
            "description": "An object that represents the address to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an address. The response body contains the ID of the new address.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentAddress"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the address."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/addresses/{address_id}": {
      "patch": {
        "operationId": "EditConstituentAddress",
        "summary": "Update a constituent address",
        "description": "Updates a constituent address.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address_id",
            "in": "path",
            "description": "The system record ID of the address to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Address ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.AddressEdit"
            },
            "description": "An object that represents the properties of the address to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the address."
          },
          "400": {
            "description": "Returned when the specified address ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the address."
          },
          "404": {
            "description": "Returned when the specified address is not found."
          }
        }
      }
    },
    "/constituent/v1/aliases": {
      "post": {
        "operationId": "CreateConstituentAlias",
        "summary": "Create a constituent alias",
        "description": "Creates a new constituent alias.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.AliasAdd"
            },
            "description": "An object that represents the alias to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an alias. The response body contains the ID of the new alias.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentAlias"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the alias."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/aliases/{alias_id}": {
      "patch": {
        "operationId": "EditConstituentAlias",
        "summary": "Update a constituent alias",
        "description": "Updates an constituent alias.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alias_id",
            "in": "path",
            "description": "The system record ID of the alias to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Alias ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.AliasEdit"
            },
            "description": "An object that represents the properties of the alias to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the alias."
          },
          "400": {
            "description": "Returned when the specified alias ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "404": {
            "description": "Returned when the specified alias is not found."
          }
        }
      }
    },
    "/constituent/v1/constituentcodes": {
      "post": {
        "operationId": "CreateConstituentCode",
        "summary": "Create a constituent code",
        "description": "Creates a new constituent code.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentCodeAdd"
            },
            "description": "An object that represents the constituent code to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a constituent code. The response body contains the ID of the new constituent code.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentCode"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the constituent code."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituentcodes/{constituent_code_id}": {
      "patch": {
        "operationId": "EditConstituentCode",
        "summary": "Update a constituent code",
        "description": "Updates a constituent code.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_code_id",
            "in": "path",
            "description": "The system record ID of the constituent code to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent code ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentCodeEdit"
            },
            "description": "An object that represents the properties of the constituent code to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the constituent code."
          },
          "400": {
            "description": "Returned when the specified constituent code ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the constituent code."
          },
          "404": {
            "description": "Returned when the specified constituent code is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents": {
      "get": {
        "operationId": "ListConstituents",
        "summary": "List constituents",
        "description": "Returns a list of constituents.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500.",
            "type": "integer",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "x-ms-summary": "Offset"
          },
          {
            "name": "list_id",
            "in": "query",
            "description": "Defines a list identifier used to filter the set of constituents to those included in the specified list. If this value is set, other specified filters will be ignored.",
            "type": "string",
            "x-ms-summary": "List",
            "x-ms-dynamic-values": {
              "operationId": "ListLists",
              "value-collection": "value",
              "value-path": "id",
              "value-title": "name",
              "parameters": {
                "list_type": "Constituent"
              }
            },
            "x-ms-dynamic-list": {
              "operationId": "ListLists",
              "itemsPath": "value",
              "itemValuePath": "id",
              "itemTitlePath": "name",
              "parameters": {
                "list_type": {
                  "value": "Constituent"
                }
              }
            }
          },
          {
            "name": "constituent_code",
            "in": "query",
            "description": "Represents a list of constituent codes. Returns constituents if any of the specified constituent codes match any of their active constituent codes. For example, \"constituent_code=Board Member&amp;constituent_code=Volunteer\" returns constituents with either \"Board Member\" or \"Volunteer\" constituent codes.",
            "type": "string",
            "x-ms-summary": "Constituent code",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "constituent_id",
            "in": "query",
            "description": "Represents a list of constituent identifiers. Returns constituents if any of the specified constituent identifiers match any of their constituents. For example, \"constituent_id=280&amp;constituent_id=1232\" returns constituents with either \"280\" or \"1232\" constituent identifiers.",
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "custom_field_category",
            "in": "query",
            "description": "Represents a list of custom field categories. Returns constituents if any of the specified custom field categories match any of their active custom fields. For example, \"custom_field_category=Interests&amp;custom_field_category=Anniversary\" returns constituents with either \"Interests\" or \"Anniversary\" custom fields.",
            "type": "string",
            "x-ms-summary": "Custom field category",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "fundraiser_status",
            "in": "query",
            "description": "Represents a comma-separated list of fundraiser statuses. Returns constituents if any of the specified fundraiser statuses match the constituent's fundraiser status. For example, \"fundrasier_status=Active,None\" returns constituents whose fundraiser status that matches Active or None.  Valid values for this filter are Active, Inactive, and None.",
            "type": "string",
            "x-ms-summary": "Fundraiser status",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "include_deceased",
            "in": "query",
            "description": "Include deceased constituents in the response?",
            "type": "boolean",
            "x-ms-summary": "Include deceased?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive constituents in the response?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "postal_code",
            "in": "query",
            "description": "Represents a comma-separated list of postal codes. Returns constituents if any of the specified postal codes match the postal code for their preferred address. For example, \"postal_code=99577,14623\" returns constituents whose preferred address has a postal code that matches or starts with 99577 or 14623, such as 99577, 14623, or 99577-0727.",
            "type": "string",
            "x-ms-summary": "Postal code",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "date_added",
            "in": "query",
            "description": "Filter the results to constituents created on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Added on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "last_modified",
            "in": "query",
            "description": "Filter the results to constituents modified on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Modified on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Represents a list of fields to sort the results by.  Results are in ascending order by default, and a '-' sign denotes descending order.  For example, \"date_added,-last\" sorts constituents by the \"date_added\" field in ascending order and then by the \"last\" field in descending order.",
            "type": "string",
            "x-ms-summary": "Sorted by",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfConstituentRead"
            }
          },
          "400": {
            "description": "Returned when the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the constituents."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}": {
      "get": {
        "operationId": "GetConstituent",
        "summary": "Get a constituent",
        "description": "Returns information about a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent to get.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the constituent."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      },
      "patch": {
        "operationId": "EditConstituent",
        "summary": "Update a constituent",
        "description": "Updates a constituent.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentEdit"
            },
            "description": "An object that represents the properties of the constituent to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the constituent."
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the constituent."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/actions": {
      "get": {
        "operationId": "ListConstituentActions",
        "summary": "List constituent actions",
        "description": "Lists the actions for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfActionRead"
            }
          },
          "400": {
            "description": "Returned when the specified ID is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the actions."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/addresses": {
      "get": {
        "operationId": "ListConstituentAddresses",
        "summary": "List constituent addresses",
        "description": "Lists the addresses for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive addresses?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfAddressRead"
            }
          },
          "400": {
            "description": "Returned when the specified ID is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the addresses."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/aliases": {
      "get": {
        "operationId": "ListConstituentAliases",
        "summary": "List constituent aliases",
        "description": "Lists the aliases for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfAliasRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameter is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the aliases."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/attachments": {
      "get": {
        "operationId": "ListConstituentAttachments",
        "summary": "List constituent attachments",
        "description": "Lists the attachments for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfConstituentAttachmentRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the attachments."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/constituentcodes": {
      "get": {
        "operationId": "ListConstituentCodes",
        "summary": "List constituent codes",
        "description": "Lists the constituent codes for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfConstituentCodeRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the constituent codes."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/customfields": {
      "get": {
        "operationId": "ListConstituentCustomFields",
        "summary": "List constituent custom fields",
        "description": "Lists the custom fields for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfConstituentCustomFieldRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the custom fields."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/emailaddresses": {
      "get": {
        "operationId": "ListConstituentEmailAddresses",
        "summary": "List constituent email addresses",
        "description": "Lists the email addresses for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive email addresses?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfEmailAddressRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameter is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the email addresses."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/fundraiserassignments": {
      "get": {
        "operationId": "ListConstituentFundraiserAssignments",
        "summary": "List constituent fundraiser assignments",
        "description": "Lists the fundraiser assignments for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive fundraiser assignments?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfFundraiserAssignmentRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the fundraiser assignments."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/notes": {
      "get": {
        "operationId": "ListConstituentNotes",
        "summary": "List constituent notes",
        "description": "Lists the notes for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfNoteRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the notes."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/onlinepresences": {
      "get": {
        "operationId": "ListConstituentOnlinePresences",
        "summary": "List constituent online presences",
        "description": "Lists the online presences for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive online presences?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfOnlinePresenceRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameter is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the online presences."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/phones": {
      "get": {
        "operationId": "ListConstituentPhones",
        "summary": "List constituent phones",
        "description": "Lists the phones for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive phones?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfPhoneRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameter is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the phones."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/profilepicture": {
      "get": {
        "operationId": "GetConstituentProfilePicture",
        "summary": "Get a constituent profile picture",
        "description": "Returns the current profile picture for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent for whom the profile picture is to be retrieved.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ProfilePictureRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the profile picture."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/ratings": {
      "get": {
        "operationId": "ListConstituentRatings",
        "summary": "List constituent ratings",
        "description": "Returns the list of ratings for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive ratings?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "most_recent_only",
            "in": "query",
            "description": "Include only the most recent ratings?",
            "type": "boolean",
            "x-ms-summary": "Only most recent?",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfRatingRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameter is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the ratings."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/relationships": {
      "get": {
        "operationId": "ListConstituentRelationships",
        "summary": "List constituent relationships",
        "description": "Lists the relationships for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfRelationshipRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the relationships."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/attachments": {
      "post": {
        "operationId": "CreateConstituentAttachment",
        "summary": "Create a constituent attachment",
        "description": "Creates a new constituent attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentAttachmentAdd"
            },
            "description": "An object that represents the attachment to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an attachment. The response body contains the ID of the new attachment.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentAttachment"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the attachment."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/attachments/{attachment_id}": {
      "patch": {
        "operationId": "EditConstituentAttachment",
        "summary": "Update a constituent attachment",
        "description": "Updates a constituent attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "attachment_id",
            "in": "path",
            "description": "The system record ID of the attachment to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Attachment ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentAttachmentEdit"
            },
            "description": "An object that represents the properties of the attachment to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the attachment."
          },
          "400": {
            "description": "Returned when the specified attachment ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the attachment."
          },
          "404": {
            "description": "Returned when the specified attachment is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/customfields": {
      "post": {
        "operationId": "CreateConstituentCustomField",
        "summary": "Create a constituent custom field",
        "description": "Creates a new constituent custom field.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentCustomFieldAdd"
            },
            "description": "An object that represents the custom field to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a custom field. The response body contains the ID of the new custom field.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentCustomField"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the custom field."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/customfields/categories/details": {
      "get": {
        "operationId": "ListConstituentCustomFieldCategoryDetails",
        "summary": "List custom field categories",
        "description": "Lists the constituent custom field category details.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfCustomFieldCategoryRead"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view custom field categories."
          }
        }
      }
    },
    "/constituent/v1/constituents/search": {
      "get": {
        "operationId": "SearchConstituent",
        "summary": "Search for a constituent",
        "description": "Performs a constituent search based on the provided search text. Supports first name, last name, preferred name, former name, alias, email address, phone number, address, or lookup ID. Name combinations such as first name and last name or preferred name and last name are valid, but otherwise search only supports one parameter at a time. By default, searches include results that sound similar to your criteria. For example, searches for \"Smith\" include matches for \"Smyth\" and other alternative spellings. This search does not support wildcard characters such as * or ?. Search results are limited to 500 records.",
        "parameters": [
          {
            "name": "search_text",
            "in": "query",
            "description": "The search text. Supports first name, last name, preferred name, former name, alias, email address, phone number, address, or lookup ID. Name combinations such as first name and last name or preferred name and last name are valid, but otherwise search only supports one parameter at a time. By default, searches include results that sound similar to your criteria. For example, searches for \"Smith\" include matches for \"Smyth\" and other alternative spellings. This search does not support wildcard characters such as * or ?. Search results are limited to 500 records.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Search text"
          },
          {
            "name": "fundraiser_status",
            "in": "query",
            "description": "Represents a comma-separated list of fundraiser statuses. Returns constituents if any of the specified fundraiser statuses match the constituent's fundraiser status. For example, \"fundrasier_status=Active,None\" returns constituents whose fundraiser status that matches Active or None.  Valid values for this filter are Active, Inactive, and None.",
            "type": "string",
            "x-ms-summary": "Fundraiser statuses",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive constituents in the response?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "search_field",
            "in": "query",
            "description": "Represents a field to search on. Currently, it only supports lookup_id. If it is provided with search_text, a constituent with lookup_id that matches the search_text will be returned.",
            "type": "string",
            "enum": [
              "lookup_id"
            ],
            "x-ms-summary": "Search field",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "strict_search",
            "in": "query",
            "description": "Exclude constituents whose names sound like the search text but are spelled differently?",
            "type": "boolean",
            "x-ms-summary": "Use strict search?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500.",
            "type": "integer",
            "x-ms-summary": "Limit",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "x-ms-summary": "Offset",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfSearchResultRead"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/constituent/v1/countries": {
      "get": {
        "operationId": "ListCountries",
        "summary": "List country definitions",
        "description": "Lists the country definitions.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfCountryRead"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view countries."
          }
        }
      }
    },
    "/constituent/v1/documents": {
      "post": {
        "operationId": "CreateDocument",
        "summary": "Create a document location",
        "description": "Creates a new unique document identifier and upload location for use with physical attachments.  The response will include instructions for where and how to upload the document contents.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.NewDocumentInfo"
            },
            "description": "An object that represents the document to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a document location. The response describes how and where the document should be uploaded.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.FileDefinition"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create a document."
          }
        }
      }
    },
    "/constituent/v1/emailaddresses": {
      "post": {
        "operationId": "CreateConstituentEmailAddress",
        "summary": "Create a constituent email address",
        "description": "Creates a new constituent email address.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.EmailAddressAdd"
            },
            "description": "An object that represents the email address to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an email address. The response body contains the ID of the new email address.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentEmailAddress"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the email address."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/emailaddresses/{email_address_id}": {
      "patch": {
        "operationId": "EditConstituentEmailAddress",
        "summary": "Update a constituent email address",
        "description": "Updates a constituent email address.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email_address_id",
            "in": "path",
            "description": "The system record ID of the email address to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Email address ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.EmailAddressEdit"
            },
            "description": "An object that represents the properties of the email address to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the email address."
          },
          "400": {
            "description": "Returned when the specified email address ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the email address."
          },
          "404": {
            "description": "Returned when the specified email address is not found."
          }
        }
      }
    },
    "/constituent/v1/notes": {
      "post": {
        "operationId": "CreateConstituentNote",
        "summary": "Create a constituent note",
        "description": "Creates a new constituent note.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.NoteAdd"
            },
            "description": "An object that represents the note to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a note. The response body contains the ID of the new note.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentNote"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the note."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/notes/{note_id}": {
      "patch": {
        "operationId": "EditConstituentNote",
        "summary": "Update a constituent note",
        "description": "Updates a constituent note.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "note_id",
            "in": "path",
            "description": "The system record ID of the note to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Note ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.NoteEdit"
            },
            "description": "An object that represent properties of the note to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the note."
          },
          "400": {
            "description": "Returned when the specified note ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the note."
          },
          "404": {
            "description": "Returned when the specified note is not found."
          }
        }
      }
    },
    "/constituent/v1/onlinepresences": {
      "post": {
        "operationId": "CreateConstituentOnlinePresence",
        "summary": "Create a constituent online presence",
        "description": "Creates a new constituent online presence.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.OnlinePresenceAdd"
            },
            "description": "An object that represents the online presence to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an online presence. The response body contains the ID of the new online presence.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentOnlinePresence"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the online presence."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/onlinepresences/{online_presence_id}": {
      "patch": {
        "operationId": "EditConstituentOnlinePresence",
        "summary": "Update a constituent online presence",
        "description": "Updates a constituent online presence.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "online_presence_id",
            "in": "path",
            "description": "The  system record ID of the online presence to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Online presence ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.OnlinePresenceEdit"
            },
            "description": "An object that represents the properties of the online presence to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the online presence."
          },
          "400": {
            "description": "Returned when the specified online presence ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the online presence."
          },
          "404": {
            "description": "Returned when the specified online presence is not found."
          }
        }
      }
    },
    "/constituent/v1/phones": {
      "post": {
        "operationId": "CreateConstituentPhone",
        "summary": "Create a constituent phone",
        "description": "Creates a new constituent phone.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.PhoneAdd"
            },
            "description": "An object that represents the phone to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a phone. The response body contains the ID of the new phone.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentPhone"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the phone."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/phones/{phone_id}": {
      "patch": {
        "operationId": "EditConstituentPhone",
        "summary": "Update a constituent phone",
        "description": "Updates a constituent phone.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phone_id",
            "in": "path",
            "description": "The system record ID of the phone to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Phone ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.PhoneEdit"
            },
            "description": "An object that represents the properties of the phone to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the phone."
          },
          "400": {
            "description": "Returned when the specified phone ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the phone."
          },
          "404": {
            "description": "Returned when the specified phone is not found."
          }
        }
      }
    },
    "/constituent/v1/ratings": {
      "post": {
        "operationId": "CreateConstituentRating",
        "summary": "Create a constituent rating",
        "description": "Creates a new constituent rating.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.RatingAdd"
            },
            "description": "An object that represents the rating to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a rating. The response body contains the ID of the new rating.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentRating"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the rating."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/ratings/categories": {
      "get": {
        "operationId": "ListRatingCategories",
        "summary": "List rating categories",
        "description": "Lists the rating categories.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive categories?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          },
          {
            "name": "source_name",
            "in": "query",
            "description": "The source to filter the categories. To return all categories, do not include source_name. To return all categories that do not have a source, include source_name in the request URL with an empty value.",
            "type": "string",
            "x-ms-summary": "Source name"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfRatingCategoryRead"
            }
          },
          "400": {
            "description": "Returned when the specified request parameters are not in the appropriate format."
          }
        }
      }
    },
    "/constituent/v1/ratings/sources": {
      "get": {
        "operationId": "ListRatingSources",
        "summary": "List rating sources",
        "description": "Lists the country definitions.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive sources?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfRatingSourceRead"
            }
          },
          "400": {
            "description": "Returned when the specified request parameter is not in the appropriate format."
          }
        }
      }
    },
    "/constituent/v1/relationships/{relationship_id}": {
      "patch": {
        "operationId": "EditConstituentRelationship",
        "summary": "Update a constituent relationship",
        "description": "Updates a relationship for a constituent. If a reciprocal relationship exists, it is also modified to reflect the changes. This does not include changes to the \"comments\" property, which is specific to each record and can be modified independently on each record.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "relationship_id",
            "in": "path",
            "description": "The system record ID of the relationship to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Relationship ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.RelationshipEdit"
            },
            "description": "An object that represents the properties of the relationship to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the relationship."
          },
          "400": {
            "description": "Returned when the specified relationship ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the relationship."
          },
          "404": {
            "description": "Returned when the specified relationship is not found."
          }
        }
      }
    },
    "/constituent/v1/virtual/individuals": {
      "post": {
        "operationId": "CreateIndividualConstituent",
        "summary": "Create an individual constituent",
        "description": "Creates a new individual constituent.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.Virtual.IndividualAdd"
            },
            "description": "An object that represents the constituent to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a constituent. The response body contains the ID of the new constituent.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedIndividualConstituent"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create a constituent."
          }
        }
      }
    },
    "/constituent/v1/virtual/individualrelationships": {
      "post": {
        "operationId": "CreateIndividualRelationship",
        "summary": "Create an individual relationship",
        "description": "Creates a new individual relationship.  If the relationship is with another constituent, a reciprocal relationship is created for that constituent.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.Virtual.IndividualRelationshipAdd"
            },
            "description": "An object that represents the relationship to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a relationship. The response body contains the ID of the new relationship.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedIndividualRelationship"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the relationship."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/virtual/organizations": {
      "post": {
        "operationId": "CreateOrganizationConstituent",
        "summary": "Create an organization constituent",
        "description": "Creates a new organization constituent.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.Virtual.OrganizationAdd"
            },
            "description": "An object that represents the constituent to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a constituent. The response body contains the ID of the new constituent.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedOrganizationConstituent"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create a constituent."
          }
        }
      }
    },
    "/constituent/v1/virtual/organizationrelationships": {
      "post": {
        "operationId": "CreateOrganizationRelationship",
        "summary": "Create an organization relationship",
        "description": "Creates a new organization relationship.  If the relationship is with another constituent, a reciprocal relationship is created for that constituent.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.Virtual.OrganizationRelationshipAdd"
            },
            "description": "An object that represents the relationship to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a relationship. The response body contains the ID of the new relationship.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedOrganizationRelationship"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the relationship."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/fundraising/v1/appeals": {
      "get": {
        "operationId": "ListAppeals",
        "summary": "List appeals",
        "description": "Returns a list of appeals.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500. The maximum is 5000.",
            "type": "integer",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "x-ms-summary": "Offset"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive appeals?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "date_added",
            "in": "query",
            "description": "Filter the results to appeals created on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Added on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "last_modified",
            "in": "query",
            "description": "Filter the results to appeals modified on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Modified on or after",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.ApiCollectionOfAppealRead"
            }
          },
          "400": {
            "description": "Returned when the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the appeals."
          }
        }
      }
    },
    "/fundraising/v1/appeals/{appeal_id}": {
      "get": {
        "operationId": "GetAppeal",
        "summary": "Get an appeal",
        "description": "Returns information about an appeal.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "appeal_id",
            "in": "path",
            "description": "The system record ID of the appeal to get.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Appeal ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.AppealRead"
            }
          },
          "400": {
            "description": "Returned when the specified appeal ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the appeal."
          },
          "404": {
            "description": "Returned when the specified appeal is not found."
          }
        }
      }
    },
    "/fundraising/v1/appeals/{appeal_id}/attachments": {
      "get": {
        "operationId": "ListAppealAttachments",
        "summary": "List appeal attachments",
        "description": "Lists the attachments for an appeal.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "appeal_id",
            "in": "path",
            "description": "The system record ID of the appeal.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Appeal ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.ApiCollectionOfAppealAttachmentRead"
            }
          },
          "400": {
            "description": "Returned when the specified appeal ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the attachments."
          },
          "404": {
            "description": "Returned when the specified appeal is not found."
          }
        }
      }
    },
    "/fundraising/v1/appeals/{appeal_id}/customfields": {
      "get": {
        "operationId": "ListAppealCustomFields",
        "summary": "List appeal custom fields",
        "description": "Lists the custom fields for an appeal.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "appeal_id",
            "in": "path",
            "description": "The system record ID of the appeal.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Appeal ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.ApiCollectionOfAppealCustomFieldRead"
            }
          },
          "400": {
            "description": "Returned when the specified appeal ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the custom fields."
          },
          "404": {
            "description": "Returned when the specified appeal is not found."
          }
        }
      }
    },
    "/fundraising/v1/appeals/attachments": {
      "post": {
        "operationId": "CreateAppealAttachment",
        "summary": "Create an appeal attachment",
        "description": "Creates a new appeal attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.AppealAttachmentAdd"
            },
            "description": "An object that represents the attachment to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an attachment. The response body contains the ID of the new attachment.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.CreatedAppealAttachment"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the attachment."
          },
          "404": {
            "description": "Returned when the specified appeal is not found."
          }
        }
      }
    },
    "/fundraising/v1/appeals/attachments/{attachment_id}": {
      "patch": {
        "operationId": "EditAppealAttachment",
        "summary": "Update an appeal attachment",
        "description": "Updates an appeal attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "attachment_id",
            "in": "path",
            "description": "The system record ID of the attachment to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Attachment ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.AppealAttachmentEdit"
            },
            "description": "An object that represents the properties of the attachment to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the attachment."
          },
          "400": {
            "description": "Returned when the specified attachment ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the attachment."
          },
          "404": {
            "description": "Returned when the specified attachment is not found."
          }
        }
      }
    },
    "/fundraising/v1/appeals/customfields": {
      "post": {
        "operationId": "CreateAppealCustomField",
        "summary": "Create an appeal custom field",
        "description": "Creates a new appeal custom field.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.AppealCustomFieldAdd"
            },
            "description": "An object that represents the custom field to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a custom field. The response body contains the ID of the new custom field.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.CreatedAppealCustomField"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the custom field."
          },
          "404": {
            "description": "Returned when the specified appeal is not found."
          }
        }
      }
    },
    "/fundraising/v1/appeals/customfields/categories": {
      "get": {
        "operationId": "ListAppealCustomFieldCategories",
        "summary": "List appeal custom field categories",
        "description": "Lists the appeal custom field categories.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.ApiCollectionOfCustomFieldCategoryRead"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view custom field categories."
          }
        }
      }
    },
    "/fundraising/v1/campaigns": {
      "get": {
        "operationId": "ListCampaigns",
        "summary": "List campaigns",
        "description": "Returns a list of campaigns.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500. The maximum is 5000.",
            "type": "integer",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "x-ms-summary": "Offset"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive campaigns?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "date_added",
            "in": "query",
            "description": "Filter the results to campaigns created on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Added on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "last_modified",
            "in": "query",
            "description": "Filter the results to campaigns modified on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Modified on or after",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.ApiCollectionOfCampaignRead"
            }
          },
          "400": {
            "description": "Returned when the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the campaigns."
          }
        }
      }
    },
    "/fundraising/v1/campaigns/{campaign_id}": {
      "get": {
        "operationId": "GetCampaign",
        "summary": "Get a campaign",
        "description": "Returns information about a campaign.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The system record ID of the campaign to get.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Campaign ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.CampaignRead"
            }
          },
          "400": {
            "description": "Returned when the specified campaign ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the campaign."
          },
          "404": {
            "description": "Returned when the specified campaign is not found."
          }
        }
      }
    },
    "/fundraising/v1/campaigns/{campaign_id}/attachments": {
      "get": {
        "operationId": "ListCampaignAttachments",
        "summary": "List campaign attachments",
        "description": "Lists the attachments for an campaign.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The system record ID of the campaign.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Campaign ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.ApiCollectionOfCampaignAttachmentRead"
            }
          },
          "400": {
            "description": "Returned when the specified campaign ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the attachments."
          },
          "404": {
            "description": "Returned when the specified campaign is not found."
          }
        }
      }
    },
    "/fundraising/v1/campaigns/{campaign_id}/customfields": {
      "get": {
        "operationId": "ListCampaignCustomFields",
        "summary": "List campaign custom fields",
        "description": "Lists the custom fields for a campaign.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "The system record ID of the campaign.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Campaign ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.ApiCollectionOfCampaignCustomFieldRead"
            }
          },
          "400": {
            "description": "Returned when the specified campaign ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the custom fields."
          },
          "404": {
            "description": "Returned when the specified campaign is not found."
          }
        }
      }
    },
    "/fundraising/v1/campaigns/attachments": {
      "post": {
        "operationId": "CreateCampaignAttachment",
        "summary": "Create a campaign attachment",
        "description": "Creates a new campaign attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.CampaignAttachmentAdd"
            },
            "description": "An object that represents the attachment to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an attachment. The response body contains the ID of the new attachment.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.CreatedCampaignAttachment"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the attachment."
          },
          "404": {
            "description": "Returned when the specified campaign is not found."
          }
        }
      }
    },
    "/fundraising/v1/campaigns/attachments/{attachment_id}": {
      "patch": {
        "operationId": "EditCampaignAttachment",
        "summary": "Update a campaign attachment",
        "description": "Updates a campaign attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "attachment_id",
            "in": "path",
            "description": "The system record ID of the attachment to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Attachment ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.CampaignAttachmentEdit"
            },
            "description": "An object that represents the properties of the attachment to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the attachment."
          },
          "400": {
            "description": "Returned when the specified attachment ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the attachment."
          },
          "404": {
            "description": "Returned when the specified attachment is not found."
          }
        }
      }
    },
    "/fundraising/v1/campaigns/customfields": {
      "post": {
        "operationId": "CreateCampaignCustomField",
        "summary": "Create a campaign custom field",
        "description": "Creates a new campaign custom field.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.CampaignCustomFieldAdd"
            },
            "description": "An object that represents the custom field to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a custom field. The response body contains the ID of the new custom field.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.CreatedCampaignCustomField"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the custom field."
          },
          "404": {
            "description": "Returned when the specified campaign is not found."
          }
        }
      }
    },
    "/fundraising/v1/campaigns/customfields/categories": {
      "get": {
        "operationId": "ListCampaignCustomFieldCategories",
        "summary": "List campaign custom field categories",
        "description": "Lists the campaign custom field categories.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.ApiCollectionOfCustomFieldCategoryRead"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view custom field categories."
          }
        }
      }
    },
    "/fundraising/v1/funds": {
      "get": {
        "operationId": "ListFunds",
        "summary": "List funds",
        "description": "Returns a list of funds.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500. The maximum is 5000.",
            "type": "integer",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "x-ms-summary": "Offset"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive funds?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "date_added",
            "in": "query",
            "description": "Filter the results to funds created on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Added on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "last_modified",
            "in": "query",
            "description": "Filter the results to funds modified on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Modified on or after",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.ApiCollectionOfFundRead"
            }
          },
          "400": {
            "description": "Returned when the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the funds."
          }
        }
      }
    },
    "/fundraising/v1/funds/{fund_id}": {
      "get": {
        "operationId": "GetFund",
        "summary": "Get a fund",
        "description": "Returns information about a fund.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fund_id",
            "in": "path",
            "description": "The system record ID of the fund to get.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Fund ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.FundRead"
            }
          },
          "400": {
            "description": "Returned when the specified fund ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the fund."
          },
          "404": {
            "description": "Returned when the specified fund is not found."
          }
        }
      }
    },
    "/fundraising/v1/funds/{fund_id}/attachments": {
      "get": {
        "operationId": "ListFundAttachments",
        "summary": "List fund attachments",
        "description": "Lists the attachments for a fund.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fund_id",
            "in": "path",
            "description": "The system record ID of the fund.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Fund ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.ApiCollectionOfFundAttachmentRead"
            }
          },
          "400": {
            "description": "Returned when the specified fund ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the attachments."
          },
          "404": {
            "description": "Returned when the specified fund is not found."
          }
        }
      }
    },
    "/fundraising/v1/funds/{fund_id}/customfields": {
      "get": {
        "operationId": "ListFundCustomFields",
        "summary": "List fund custom fields",
        "description": "Lists the custom fields for a fund.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fund_id",
            "in": "path",
            "description": "The system record ID of the fund.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Fund ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.ApiCollectionOfFundCustomFieldRead"
            }
          },
          "400": {
            "description": "Returned when the specified fund ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the custom fields."
          },
          "404": {
            "description": "Returned when the specified fund is not found."
          }
        }
      }
    },
    "/fundraising/v1/funds/attachments": {
      "post": {
        "operationId": "CreateFundAttachment",
        "summary": "Create a fund attachment",
        "description": "Creates a new fund attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.FundAttachmentAdd"
            },
            "description": "An object that represents the attachment to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an attachment. The response body contains the ID of the new attachment.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.CreatedFundAttachment"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the attachment."
          },
          "404": {
            "description": "Returned when the specified fund is not found."
          }
        }
      }
    },
    "/fundraising/v1/funds/attachments/{attachment_id}": {
      "patch": {
        "operationId": "EditFundAttachment",
        "summary": "Update a fund attachment",
        "description": "Updates a fund attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "attachment_id",
            "in": "path",
            "description": "The system record ID of the attachment to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Attachment ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.FundAttachmentEdit"
            },
            "description": "An object that represents the properties of the attachment to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the attachment."
          },
          "400": {
            "description": "Returned when the specified attachment ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the attachment."
          },
          "404": {
            "description": "Returned when the specified attachment is not found."
          }
        }
      }
    },
    "/fundraising/v1/funds/customfields": {
      "post": {
        "operationId": "CreateFundCustomField",
        "summary": "Create a fund custom field",
        "description": "Creates a new fund custom field.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.FundCustomFieldAdd"
            },
            "description": "An object that represents the custom field to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a custom field. The response body contains the ID of the new custom field.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.CreatedFundCustomField"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the custom field."
          },
          "404": {
            "description": "Returned when the specified fund is not found."
          }
        }
      }
    },
    "/fundraising/v1/funds/customfields/categories": {
      "get": {
        "operationId": "ListFundCustomFieldCategories",
        "summary": "List fund custom field categories",
        "description": "Lists the fund custom field categories.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.ApiCollectionOfCustomFieldCategoryRead"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view custom field categories."
          }
        }
      }
    },
    "/fundraising/v1/packages": {
      "get": {
        "operationId": "ListPackages",
        "summary": "List packages",
        "description": "Returns a list of packages.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "appeal_id",
            "in": "query",
            "description": "Represents a list of appeal identifiers. Returns packages if any of the specified appeal identifiers match any of the package's associated constituents. For example, \"appeal_id=280&amp;appeal_id=1232\" returns packages with either \"280\" or \"1232\" appeal identifiers.",
            "type": "string",
            "x-ms-summary": "Appeal ID"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500. The maximum is 5000.",
            "type": "integer",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "x-ms-summary": "Offset"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive packages?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "date_added",
            "in": "query",
            "description": "Filter the results to packages created on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Added on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "last_modified",
            "in": "query",
            "description": "Filter the results to packages modified on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Modified on or after",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.ApiCollectionOfPackageRead"
            }
          },
          "400": {
            "description": "Returned when the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the packages."
          }
        }
      }
    },
    "/fundraising/v1/packages/{package_id}": {
      "get": {
        "operationId": "GetPackage",
        "summary": "Get a package",
        "description": "Returns information about a package.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "package_id",
            "in": "path",
            "description": "The system record ID of the package to get.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Package ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.PackageRead"
            }
          },
          "400": {
            "description": "Returned when the specified package ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the package."
          },
          "404": {
            "description": "Returned when the specified package is not found."
          }
        }
      }
    },
    "/gift/v1/giftacknowledgements/{acknowledgement_id}": {
      "patch": {
        "operationId": "EditGiftAcknowledgement",
        "summary": "Update gift acknowledgement details",
        "description": "Updates the acknowledgement details for a gift.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "acknowledgement_id",
            "in": "path",
            "description": "The system record ID of the gift acknowledgement to update. It uses the parent gift's ID as its value.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Acknowledgement ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GiftApi.AcknowledgementEdit"
            },
            "description": "An object that represents the properties of the gift acknowledgement to update."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Returned when the specified acknowledgement ID in the URL or the specified request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the gift acknowledgement."
          },
          "404": {
            "description": "Returned when the specified gift acknowledgement is not found."
          }
        }
      }
    },
    "/gift/v1/giftreceipts/{receipt_id}": {
      "patch": {
        "operationId": "EditGiftReceipt",
        "summary": "Update gift receipt details",
        "description": "Updates the receipt details for a gift.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "receipt_id",
            "in": "path",
            "description": "The system record ID of the gift receipt to update. It uses the parent gift's ID as its value.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Receipt ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GiftApi.ReceiptEdit"
            },
            "description": "An object that represents the properties of the gift receipt to update."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Returned when the specified receipt ID in the URL or the specified request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the gift receipt."
          },
          "404": {
            "description": "Returned when the specified gift receipt is not found."
          }
        }
      }
    },
    "/gift/v1/gifts": {
      "get": {
        "operationId": "ListGifts",
        "summary": "List gifts",
        "description": "Returns a list of gifts.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "query",
            "description": "Represents a list of constituent identifiers. Returns gifts if any of the specified constituent identifiers match any of their constituents. For example, \"constituent_id=280&amp;constituent_id=1232\" returns gifts with either \"280\" or \"1232\" constituent identifiers.",
            "type": "string",
            "x-ms-summary": "Constituent ID"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500. The maximum is 5000.",
            "type": "integer",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "x-ms-summary": "Offset"
          },
          {
            "name": "gift_type",
            "in": "query",
            "description": "Represents a list of gift types. Returns gifts if their type matches any specified. For example, \"gift_type=MatchingGiftPledge&amp;gift_type=RecurringGift\" returns gifts of type MatchingGiftPledge or RecurringGift.",
            "type": "string",
            "x-ms-summary": "Type",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "post_status",
            "in": "query",
            "description": "Represents a list of gift post statuses. Returns gifts if their post status matches any specified. For example, \"post_status=DoNotPost&amp;post_status=Posted\" returns gifts that are marked either DoNotPost or Posted.",
            "type": "string",
            "x-ms-summary": "Post status",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "receipt_status",
            "in": "query",
            "description": "Represents a list of gift receipt statuses. Returns gifts if their receipt status matches any specified. For example, \"receipt_status=DoNotReceipt&amp;receipt_status=Receipted\" returns gifts that are marked either DoNotReceipt or Receipted.",
            "type": "string",
            "x-ms-summary": "Receipt status",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "acknowledgement_status",
            "in": "query",
            "description": "Represents a list of gift acknowledgement statuses. Returns gifts if their acknowledgement status matches any specified. For example, \"acknowledgement_status=DoNotAcknowledge&amp;acknowledgement_status=Acknowledged\" returns gifts that are marked either DoNotAcknowledge or Acknowledged.",
            "type": "string",
            "x-ms-summary": "Acknowledgement status",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "campaign_id",
            "in": "query",
            "description": "Represents a list of campaign identifiers. Returns gifts if any of the specified campaign identifiers match any of their campaigns. For example, \"campaign_id=280&amp;campaign_id=1232\" returns gifts with either \"280\" or \"1232\" campaign identifiers.",
            "type": "string",
            "x-ms-summary": "Campaign ID",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "fund_id",
            "in": "query",
            "description": "Represents a list of fund identifiers. Returns gifts if any of the specified fund identifiers match any of their funds. For example, \"fund_id=280&amp;fund_id=1232\" returns gifts with either \"280\" or \"1232\" fund identifiers.",
            "type": "string",
            "x-ms-summary": "Fund ID",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "appeal_id",
            "in": "query",
            "description": "Represents a list of appeal identifiers. Returns gifts if any of the specified appeal identifiers match any of their appeals. For example, \"appeal_id=280&amp;appeal_id=1232\" returns gifts with either \"280\" or \"1232\" appeal identifiers.",
            "type": "string",
            "x-ms-summary": "Appeal ID",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "date_added",
            "in": "query",
            "description": "Filter the results to gifts created on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Added on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "last_modified",
            "in": "query",
            "description": "Filter the results to gifts modified on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Modified on or after",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/GiftApi.ApiCollectionOfGiftRead"
            }
          },
          "400": {
            "description": "Returned when the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the gifts."
          }
        }
      }
    },
    "/gift/v1/gifts/{gift_id}": {
      "get": {
        "operationId": "GetGift",
        "summary": "Get a gift",
        "description": "Returns information about a gift.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gift_id",
            "in": "path",
            "description": "The system record ID of the gift to get.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Gift ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/GiftApi.GiftRead"
            }
          },
          "400": {
            "description": "Returned when the specified gift ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the gift."
          },
          "404": {
            "description": "Returned when the specified gift is not found."
          }
        }
      }
    },
    "/gift/v1/gifts/{gift_id}/attachments": {
      "get": {
        "operationId": "ListGiftAttachments",
        "summary": "List gift attachments",
        "description": "Lists the attachments for a gift.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gift_id",
            "in": "path",
            "description": "The system record ID of the gift.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Gift ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/GiftApi.ApiCollectionOfGiftAttachmentRead"
            }
          },
          "400": {
            "description": "Returned when the specified gift ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the attachments."
          },
          "404": {
            "description": "Returned when the specified gift is not found."
          }
        }
      }
    },
    "/gift/v1/gifts/{gift_id}/customfields": {
      "get": {
        "operationId": "ListGiftCustomFields",
        "summary": "List gift custom fields",
        "description": "Lists the custom fields for a gift.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gift_id",
            "in": "path",
            "description": "The system record ID of the gift.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Gift ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/GiftApi.ApiCollectionOfGiftCustomFieldRead"
            }
          },
          "400": {
            "description": "Returned when the specified gift ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the custom fields."
          },
          "404": {
            "description": "Returned when the specified gift is not found."
          }
        }
      }
    },
    "/gift/v1/gifts/attachments": {
      "post": {
        "operationId": "CreateGiftAttachment",
        "summary": "Create a gift attachment",
        "description": "Creates a new gift attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GiftApi.GiftAttachmentAdd"
            },
            "description": "An object that represents the attachment to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an attachment. The response body contains the ID of the new attachment.",
            "schema": {
              "$ref": "#/definitions/GiftApi.CreatedGiftAttachment"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the attachment."
          },
          "404": {
            "description": "Returned when the specified fund is not found."
          }
        }
      }
    },
    "/gift/v1/gifts/attachments/{attachment_id}": {
      "patch": {
        "operationId": "EditGiftAttachment",
        "summary": "Update a gift attachment",
        "description": "Updates a gift attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "attachment_id",
            "in": "path",
            "description": "The system record ID of the attachment to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Attachment ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GiftApi.GiftAttachmentEdit"
            },
            "description": "An object that represents the properties of the attachment to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the attachment."
          },
          "400": {
            "description": "Returned when the specified attachment ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the attachment."
          },
          "404": {
            "description": "Returned when the specified attachment is not found."
          }
        }
      }
    },
    "/gift/v1/gifts/customfields": {
      "post": {
        "operationId": "CreateGiftCustomField",
        "summary": "Create a gift custom field",
        "description": "Creates a new gift custom field.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GiftApi.GiftCustomFieldAdd"
            },
            "description": "An object that represents the custom field to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a custom field. The response body contains the ID of the new custom field.",
            "schema": {
              "$ref": "#/definitions/GiftApi.CreatedGiftCustomField"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the custom field."
          },
          "404": {
            "description": "Returned when the specified gift is not found."
          }
        }
      }
    },
    "/gift/v1/gifts/customfields/categories": {
      "get": {
        "operationId": "ListGiftCustomFieldCategories",
        "summary": "List custom field categories",
        "description": "Lists the gift custom field categories.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/GiftApi.ApiCollectionOfCustomFieldCategoryRead"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view custom field categories."
          }
        }
      }
    },
    "/list/v1/lists": {
      "get": {
        "operationId": "ListLists",
        "summary": "List lists",
        "description": "Get a list of lists.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "list_type",
            "in": "query",
            "description": "The type of list to return.",
            "required": true,
            "type": "string",
            "x-ms-summary": "List type",
            "default": "Constituent",
            "enum": [
              "Constituent",
              "Gift",
              "Action",
              "Opportunity"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ListApi.ApiCollectionOfList"
            }
          },
          "400": {
            "description": "Returned when the specified request parameters are not in the appropriate format."
          }
        }
      }
    },
    "/opportunity/v1/opportunities": {
      "get": {
        "operationId": "ListOpportunities",
        "summary": "List opportunities",
        "description": "Returns a list of opportunities.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "query",
            "description": "Represents a list of constituent identifiers. Returns opportunities if any of the specified constituent identifiers match any of their constituents. For example, \"constituent_id=280&amp;constituent_id=1232\" returns opportunities with either \"280\" or \"1232\" constituent identifiers.",
            "type": "string",
            "x-ms-summary": "Constituent ID"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500.",
            "type": "integer",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "x-ms-summary": "Offset"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive opportunities?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "date_added",
            "in": "query",
            "description": "Filter the results to opportunities created on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Added on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "last_modified",
            "in": "query",
            "description": "Filter the results to opportunities modified on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Modified on or after",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/OpportunityApi.ApiCollectionOfOpportunityRead"
            }
          },
          "400": {
            "description": "Returned when the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the opportunities."
          }
        }
      },
      "post": {
        "operationId": "CreateOpportunity",
        "summary": "Create an opportunity",
        "description": "Creates an new opportunity.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OpportunityApi.OpportunityAdd"
            },
            "description": "An object that represents the opportunity to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an opportunity. The response body contains the ID of the new opportunity.",
            "schema": {
              "$ref": "#/definitions/OpportunityApi.CreatedOpportunity"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the opportunity."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/opportunity/v1/opportunities/{opportunity_id}": {
      "get": {
        "operationId": "GetOpportunity",
        "summary": "Get an opportunity",
        "description": "Returns information about an opportunity.  Note: This endpoint returns the status property with a latency of about 10 minutes.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "opportunity_id",
            "in": "path",
            "description": "The system record ID of the opportunity to get.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Opportunity ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/OpportunityApi.OpportunityRead"
            }
          },
          "400": {
            "description": "Returned when the specified opportunity ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the opportunity."
          },
          "404": {
            "description": "Returned when the specified opportunity is not found."
          }
        }
      },
      "patch": {
        "operationId": "EditOpportunity",
        "summary": "Update an opportunity",
        "description": "Updates an opportunity.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "opportunity_id",
            "in": "path",
            "description": "The system record ID of the opportunity to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Opportunity ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OpportunityApi.OpportunityEdit"
            },
            "description": "An object that represents the properties of the opportunity to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the opportunity."
          },
          "400": {
            "description": "Returned when the specified opportunity ID in the request URL body or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to edit the opportunity."
          },
          "404": {
            "description": "Returned when the specified opportunity is not found."
          }
        }
      }
    },
    "/opportunity/v1/opportunities/{opportunity_id}/attachments": {
      "get": {
        "operationId": "ListOpportunityAttachments",
        "summary": "List opportunity attachments",
        "description": "Lists the attachments for an opportunity.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "opportunity_id",
            "in": "path",
            "description": "The system record ID of the opportunity.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Opportunity ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/OpportunityApi.ApiCollectionOfOpportunityAttachmentRead"
            }
          },
          "400": {
            "description": "Returned when the specified opportunity ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the attachments."
          },
          "404": {
            "description": "Returned when the specified opportunity is not found."
          }
        }
      }
    },
    "/opportunity/v1/opportunities/{opportunity_id}/customfields": {
      "get": {
        "operationId": "ListOpportunityCustomFields",
        "summary": "List opportunity custom fields",
        "description": "Lists the custom fields for an opportunity.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "opportunity_id",
            "in": "path",
            "description": "The system record ID of the opportunity.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Opportunity ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/OpportunityApi.ApiCollectionOfOpportunityCustomFieldRead"
            }
          },
          "400": {
            "description": "Returned when the specified opportunity ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the custom fields."
          },
          "404": {
            "description": "Returned when the specified opportunity is not found."
          }
        }
      }
    },
    "/opportunity/v1/opportunities/attachments": {
      "post": {
        "operationId": "CreateOpportunityAttachment",
        "summary": "Create an opportunity attachment",
        "description": "Creates a new opportunity attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OpportunityApi.OpportunityAttachmentAdd"
            },
            "description": "An object that represents the attachment to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an attachment. The response body contains the ID of the new attachment.",
            "schema": {
              "$ref": "#/definitions/OpportunityApi.CreatedOpportunityAttachment"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the attachment."
          },
          "404": {
            "description": "Returned when the specified opportunity is not found."
          }
        }
      }
    },
    "/opportunity/v1/opportunities/attachments/{attachment_id}": {
      "patch": {
        "operationId": "EditOpportunityAttachment",
        "summary": "Update an opportunity attachment",
        "description": "Updates an opportunity attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "attachment_id",
            "in": "path",
            "description": "The system record ID of the attachment to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Attachment ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OpportunityApi.OpportunityAttachmentEdit"
            },
            "description": "An object that represents the properties of the attachment to update."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the attachment."
          },
          "400": {
            "description": "Returned when the specified attachment ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the attachment."
          },
          "404": {
            "description": "Returned when the specified attachment is not found."
          }
        }
      }
    },
    "/opportunity/v1/opportunities/customfields": {
      "post": {
        "operationId": "CreateOpportunityCustomField",
        "summary": "Create an opportunity custom field",
        "description": "Creates a new opportunity custom field.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OpportunityApi.OpportunityCustomFieldAdd"
            },
            "description": "An object that represents the custom field to create."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a custom field. The response body contains the ID of the new custom field.",
            "schema": {
              "$ref": "#/definitions/OpportunityApi.CreatedOpportunityCustomField"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the custom field."
          },
          "404": {
            "description": "Returned when the specified opportunity is not found."
          }
        }
      }
    },
    "/opportunity/v1/opportunities/customfields/categories": {
      "get": {
        "operationId": "ListOpportunityCustomFieldCategories",
        "summary": "List custom field categories",
        "description": "Lists the opportunity custom field categories.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/OpportunityApi.ApiCollectionOfCustomFieldCategoryRead"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view custom field categories."
          }
        }
      }
    },
    "/powerautomateui/v1/dynamicvalues": {
      "get": {
        "operationId": "GetDynamicValues",
        "summary": "Get dynamic values",
        "description": "List dynamic values.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api",
            "in": "query",
            "description": "The underlying SKY API containing the route that will be used to populate the dynamic values list.",
            "required": true,
            "type": "string",
            "enum": [
              "constituent",
              "gift",
              "fundraising",
              "opportunity"
            ]
          },
          {
            "name": "route",
            "in": "query",
            "description": "The route within the specified SKY API to call to produce the values for the dynamic list.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/PowerAutomateUIApi.DynamicValuesCollection"
            }
          }
        }
      }
    },
    "/powerautomateui/v1/dynamicvalues/customfields": {
      "get": {
        "operationId": "GetCustomFieldCodeTableDynamicValues",
        "summary": "Get custom field code table dynamic values",
        "description": "List custom field code table dynamic values.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api",
            "in": "query",
            "description": "The underlying SKY API containing the route that will be used to populate the dynamic values list.",
            "required": true,
            "type": "string",
            "enum": [
              "constituent",
              "gift",
              "fundraising",
              "opportunity"
            ]
          },
          {
            "name": "custom_field_type",
            "in": "query",
            "description": "The type of entity that owns the custom field.",
            "required": true,
            "type": "string",
            "enum": [
              "actions",
              "constituents",
              "appeals",
              "campaigns",
              "funds",
              "gifts",
              "opportunities"
            ]
          },
          {
            "name": "category_name",
            "in": "query",
            "description": "The custom field category.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/PowerAutomateUIApi.DynamicValuesCollection"
            }
          }
        }
      }
    },
    "/powerautomateui/v1/dynamicproperties/customfields": {
      "get": {
        "operationId": "GetCustomFieldDynamicProperties",
        "summary": "Get custom field dynamic properties",
        "description": "List custom field dynamic properties.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api",
            "in": "query",
            "description": "The underlying SKY API containing the endpoint that will be used to fetch the custom field category definition.",
            "required": true,
            "type": "string",
            "enum": [
              "constituent",
              "gift",
              "fundraising",
              "opportunity"
            ]
          },
          {
            "name": "custom_field_type",
            "in": "query",
            "description": "The type of entity that owns the custom field.",
            "required": true,
            "type": "string",
            "enum": [
              "actions",
              "constituents",
              "appeals",
              "campaigns",
              "funds",
              "gifts",
              "opportunities"
            ]
          },
          {
            "name": "category",
            "in": "query",
            "description": "The custom field category.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/PowerAutomateUIApi.DynamicProperties"
            }
          }
        }
      }
    },
    "/powerautomateui/v1/dynamicproperties/ratings": {
      "get": {
        "operationId": "GetRatingDynamicProperties",
        "summary": "Get rating category dynamic properties",
        "description": "List rating category dynamic properties.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "source_name",
            "in": "query",
            "description": "The rating source.",
            "required": true,
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "description": "The custom field category.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/PowerAutomateUIApi.DynamicProperties"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CommPrefApi.ConsentCategory": {
      "type": "object",
      "description": "Consent category",
      "properties": {
        "description": {
          "type": "string",
          "description": "The name of the consent category.",
          "x-ms-summary": "Description"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the consent category inactive?",
          "x-ms-summary": "Inactive?"
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "The placement of the category in the order of category table values, if defined.",
          "x-ms-summary": "Sequence"
        }
      }
    },
    "CommPrefApi.ConsentCategoryCollection": {
      "type": "object",
      "description": "Consent categories",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of consent categories in the list.",
          "readOnly": true,
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of consent categories included in the response.",
          "items": {
            "$ref": "#/definitions/CommPrefApi.ConsentCategory"
          }
        }
      }
    },
    "CommPrefApi.ConsentChannel": {
      "type": "object",
      "description": "Consent channel",
      "properties": {
        "description": {
          "type": "string",
          "description": "The name of the consent channel.",
          "x-ms-summary": "Description"
        }
      }
    },
    "CommPrefApi.ConsentChannelCollection": {
      "type": "object",
      "description": "Consent channels",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of consent channels in the list.",
          "readOnly": true,
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of consent channels included in the response.",
          "items": {
            "$ref": "#/definitions/CommPrefApi.ConsentChannel"
          }
        }
      }
    },
    "CommPrefApi.ConsentSource": {
      "type": "object",
      "description": "Consent source",
      "properties": {
        "description": {
          "type": "string",
          "description": "The name of the consent source.",
          "x-ms-summary": "Description"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the consent source inactive?",
          "x-ms-summary": "Inactive?"
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "The placement of the source in the order of source table values, if defined.",
          "x-ms-summary": "Sequence"
        }
      }
    },
    "CommPrefApi.ConsentSourceCollection": {
      "type": "object",
      "description": "Consent sources",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of consent sources in the list.",
          "readOnly": true,
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of consent sources included in the response.",
          "items": {
            "$ref": "#/definitions/CommPrefApi.ConsentSource"
          }
        }
      }
    },
    "CommPrefApi.ConstituentConsentAdd": {
      "type": "object",
      "description": "Represents the consent entity to add to the specified constituent.",
      "required": [
        "constituent_id",
        "channel",
        "consent_date",
        "constituent_consent_response"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the consent record.",
          "x-ms-summary": "Constituent ID"
        },
        "channel": {
          "type": "string",
          "description": "The channel that the consent response applies to.",
          "x-ms-summary": "Channel",
          "x-ms-dynamic-values": {
            "operationId": "ListConsentChannels",
            "value-collection": "value",
            "value-path": "description",
            "value-title": "description"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListConsentChannels",
            "itemsPath": "value",
            "itemValuePath": "description",
            "itemTitlePath": "description"
          }
        },
        "category": {
          "type": "string",
          "description": "The category that the consent response applies to.",
          "x-ms-summary": "Category",
          "x-ms-dynamic-values": {
            "operationId": "ListConsentCategories",
            "value-collection": "value",
            "value-path": "description",
            "value-title": "description"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListConsentCategories",
            "itemsPath": "value",
            "itemValuePath": "description",
            "itemTitlePath": "description"
          }
        },
        "source": {
          "type": "string",
          "description": "The source of the consent response from the constituent.",
          "x-ms-summary": "Source",
          "x-ms-dynamic-values": {
            "operationId": "ListConsentSources",
            "value-collection": "value",
            "value-path": "description",
            "value-title": "description"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListConsentSources",
            "itemsPath": "value",
            "itemValuePath": "description",
            "itemTitlePath": "description"
          }
        },
        "constituent_consent_response": {
          "type": "string",
          "description": "How the constituent responded to consent for the specified channel/category.",
          "x-ms-summary": "Response",
          "enum": [
            "OptIn",
            "OptOut",
            "NoResponse"
          ]
        },
        "consent_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date the consent response was received (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "consent_statement": {
          "type": "string",
          "maxLength": 7999,
          "description": "The statement the constituent responded to when providing consent.",
          "x-ms-summary": "Consent statement"
        },
        "privacy_notice": {
          "type": "string",
          "maxLength": 7999,
          "description": "The privacy notice provided to the constituent.",
          "x-ms-summary": "Privacy notice"
        }
      }
    },
    "CommPrefApi.ConstituentConsentRead": {
      "type": "object",
      "description": "Represents a consent entity for a constituent.",
      "properties": {
        "id": {
          "description": "The system record ID of the consent record.",
          "type": "string",
          "x-ms-summary": "ID"
        },
        "channel": {
          "type": "string",
          "description": "The channel that the consent response applies to.",
          "x-ms-summary": "Channel"
        },
        "category": {
          "type": "string",
          "description": "The category that the consent response applies to.",
          "x-ms-summary": "Category"
        },
        "source": {
          "type": "string",
          "description": "The source of the consent response from the constituent.",
          "x-ms-summary": "Source"
        },
        "constituent_consent_response": {
          "type": "string",
          "description": "How the constituent responded to consent for the specified channel/category.",
          "x-ms-summary": "Response",
          "enum": [
            "OptIn",
            "OptOut",
            "NoResponse"
          ]
        },
        "consent_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date the consent response was received.",
          "x-ms-summary": "Date"
        },
        "consent_statement": {
          "type": "string",
          "description": "The statement the constituent responded to when providing consent.",
          "x-ms-summary": "Consent statement"
        },
        "privacy_notice": {
          "type": "string",
          "maxLength": 7999,
          "description": "The privacy notice provided to the constituent.",
          "x-ms-summary": "Privacy notice"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date the consent response was added.",
          "x-ms-summary": "Date added"
        },
        "user_name": {
          "type": "string",
          "description": "The user that added the consent response.",
          "x-ms-summary": "Added by"
        }
      }
    },
    "CommPrefApi.ConstituentConsentReadCollection": {
      "type": "object",
      "description": "Consent records",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of consent records in the list.",
          "readOnly": true,
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of consent records included in the response.",
          "items": {
            "$ref": "#/definitions/CommPrefApi.ConstituentConsentRead"
          }
        }
      }
    },
    "CommPrefApi.ConstituentSolicitCodeAdd": {
      "type": "object",
      "description": "Solicit codes provide guidance on how to contact constituents. These rules describe instructions and restrictions about when to reach out to constituents and how to tailor communications to honor their requests.",
      "required": [
        "constituent_id",
        "solicit_code"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the solicit code.",
          "x-ms-summary": "Constituent ID"
        },
        "solicit_code": {
          "type": "string",
          "description": "Communication instructions and/or restrictions for a constituent.",
          "x-ms-summary": "Solicit code",
          "x-ms-dynamic-values": {
            "operationId": "ListSolicitCodes",
            "value-collection": "value",
            "value-path": "description",
            "value-title": "description"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListSolicitCodes",
            "itemsPath": "value",
            "itemValuePath": "description",
            "itemTitlePath": "description"
          }
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "description": "The start date of the solicit code (ex: '2005-09-18').",
          "x-ms-summary": "Start date"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "description": "The end date of the solicit code (ex: '2005-09-18').",
          "x-ms-summary": "End date"
        }
      }
    },
    "CommPrefApi.ConstituentSolicitCodeEdit": {
      "type": "object",
      "description": "Solicit codes provide guidance on how to contact constituents. These rules describe instructions and restrictions about when to reach out to constituents and how to tailor communications to honor their requests.",
      "properties": {
        "solicit_code": {
          "type": "string",
          "description": "Communication instructions and/or restrictions for a constituent.",
          "x-ms-summary": "Solicit code",
          "x-ms-dynamic-values": {
            "operationId": "ListSolicitCodes",
            "value-collection": "value",
            "value-path": "description",
            "value-title": "description"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListSolicitCodes",
            "itemsPath": "value",
            "itemValuePath": "description",
            "itemTitlePath": "description"
          }
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "description": "The start date of the solicit code (ex: '2005-09-18').",
          "x-ms-summary": "Start date"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "description": "The end date of the solicit code (ex: '2005-09-18').",
          "x-ms-summary": "End date"
        }
      }
    },
    "CommPrefApi.ConstituentSolicitCodeRead": {
      "type": "object",
      "description": "Solicit code",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the constituent solicit code.",
          "x-ms-summary": "ID"
        },
        "solicit_code": {
          "type": "string",
          "description": "Communication instructions and/or restrictions for a constituent.",
          "x-ms-summary": "Solicit code"
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "description": "The start date of the solicit code (ex: '2005-09-18').",
          "x-ms-summary": "Start date"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "description": "The end date of the solicit code (ex: '2005-09-18').",
          "x-ms-summary": "End date"
        }
      }
    },
    "CommPrefApi.ConstituentSolicitCodeReadCollection": {
      "type": "object",
      "description": "Solicit codes",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of constituent solicit codes in the list.",
          "readOnly": true,
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of constituent solicit codes included in the response.",
          "items": {
            "$ref": "#/definitions/CommPrefApi.ConstituentSolicitCodeRead"
          }
        }
      }
    },
    "CommPrefApi.CreatedConstituentConsent": {
      "type": "object",
      "description": "Created constituent consent",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created consent record.",
          "x-ms-summary": "ID"
        }
      }
    },
    "CommPrefApi.CreatedConstituentSolicitCode": {
      "type": "object",
      "description": "Created constituent solicit code",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent solicit code.",
          "x-ms-summary": "ID"
        }
      }
    },
    "CommPrefApi.SolicitCode": {
      "type": "object",
      "description": "Solicit code",
      "properties": {
        "description": {
          "type": "string",
          "description": "The name of the solicit code.",
          "x-ms-summary": "Description"
        }
      }
    },
    "CommPrefApi.SolicitCodeCollection": {
      "type": "object",
      "description": "Solicit codes",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of solicit codes in the list.",
          "readOnly": true,
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of solicit codes included in the response.",
          "items": {
            "$ref": "#/definitions/CommPrefApi.SolicitCode"
          }
        }
      }
    },
    "ConstituentApi.ActionAdd": {
      "type": "object",
      "description": "Actions track the interactions and tasks that are required to secure gifts and cultivate relationships with constituents.",
      "required": [
        "constituent_id",
        "category",
        "date"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the action.",
          "x-ms-summary": "Constituent ID"
        },
        "category": {
          "type": "string",
          "description": "The channel or intent of the constituent interaction.",
          "x-ms-summary": "Category",
          "enum": [
            "Phone Call",
            "Meeting",
            "Mailing",
            "Email",
            "Task/Other"
          ]
        },
        "completed": {
          "type": "boolean",
          "description": "Is the action completed? If the system is configured to use custom action statuses, this value is based on the action status value.",
          "x-ms-summary": "Completed?"
        },
        "completed_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the action was completed (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Completed on"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The action date (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "description": {
          "type": "string",
          "description": "The detailed explanation that elaborates on the action summary.",
          "x-ms-summary": "Note"
        },
        "direction": {
          "type": "string",
          "description": "The direction of the action.",
          "x-ms-summary": "Direction",
          "x-ms-visibility": "advanced",
          "enum": [
            "Inbound",
            "Outbound"
          ]
        },
        "fundraisers": {
          "type": "array",
          "description": "The set of system record IDs for the fundraisers associated with the action.",
          "x-ms-summary": "Fundraiser(s)",
          "x-ms-visibility": "advanced",
          "items": {
            "type": "string"
          }
        },
        "location": {
          "type": "string",
          "description": "The location of the action.",
          "x-ms-summary": "Location",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "actionlocations"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "actionlocations"
              }
            }
          }
        },
        "opportunity_id": {
          "type": "string",
          "description": "The system record ID of the opportunity associated with the action.",
          "x-ms-summary": "Opportunity ID",
          "x-ms-visibility": "advanced"
        },
        "outcome": {
          "type": "string",
          "description": "The outcome of the action.",
          "x-ms-summary": "Outcome",
          "x-ms-visibility": "advanced",
          "enum": [
            "Successful",
            "Unsuccessful"
          ]
        },
        "priority": {
          "type": "string",
          "description": "The priority of the action.",
          "x-ms-summary": "Priority",
          "x-ms-visibility": "advanced",
          "enum": [
            "Normal",
            "High",
            "Low"
          ]
        },
        "start_time": {
          "type": "string",
          "description": "The start time of the action. Uses 24-hour time in the HH:mm format.",
          "x-ms-summary": "Start time",
          "x-ms-visibility": "advanced"
        },
        "end_time": {
          "type": "string",
          "description": "The end time of the action. Uses 24-hour time in the HH:mm format.",
          "x-ms-summary": "End time",
          "x-ms-visibility": "advanced"
        },
        "status": {
          "type": "string",
          "description": "The action status.",
          "x-ms-summary": "Status",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "actionstatustypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "actionstatustypes"
              }
            }
          }
        },
        "summary": {
          "type": "string",
          "maxLength": 255,
          "minLength": 0,
          "description": "The short description of the action that appears at the top of the record. Character limit: 255.",
          "x-ms-summary": "Summary"
        },
        "type": {
          "type": "string",
          "description": "Additional description of the action to complement the category.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "actiontypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "actiontypes"
              }
            }
          }
        }
      }
    },
    "ConstituentApi.ActionAttachmentAdd": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "required": [
        "parent_id",
        "type"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the action associated with the attachment.",
          "x-ms-summary": "Action ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z'). This field defaults to the current date and time if not supplied.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        }
      }
    },
    "ConstituentApi.ActionAttachmentEdit": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        }
      }
    },
    "ConstituentApi.ActionAttachmentRead": {
      "type": "object",
      "description": "Attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the attachment.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the action associated with the attachment.",
          "x-ms-summary": "Action ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        },
        "thumbnail_url": {
          "type": "string",
          "description": "The URL for a thumbnail. For physical attachments that are images only. Contains a time-bound signature that limits access to 60 minutes.",
          "x-ms-summary": "Thumbnail URL"
        },
        "content_type": {
          "type": "string",
          "description": "The content type. For physical attachments only.",
          "x-ms-summary": "Content type"
        },
        "file_size": {
          "type": "integer",
          "format": "int64",
          "description": "The file size in bytes. For physical attachments only.",
          "x-ms-summary": "File size"
        }
      }
    },
    "ConstituentApi.ActionCustomFieldAdd": {
      "type": "object",
      "description": "While records provide many fields to track information, organizations often require additional details. To track this specialized information, use custom fields.",
      "required": [
        "parent_id",
        "category"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the action associated with the custom field.",
          "x-ms-summary": "Action ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category",
          "x-ms-dynamic-values": {
            "operationId": "ListActionCustomFieldCategoryDetails",
            "value-collection": "value",
            "value-path": "name",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListActionCustomFieldCategoryDetails",
            "itemsPath": "value",
            "itemValuePath": "name",
            "itemTitlePath": "name"
          }
        },
        "value": {
          "type": "object",
          "x-ms-dynamic-schema": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": "constituent",
              "custom_field_type": "actions",
              "category": {
                "parameter": "category"
              }
            },
            "value-path": "items"
          },
          "x-ms-dynamic-properties": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "custom_field_type": {
                "value": "actions"
              },
              "category": {
                "parameterReference": "body/category"
              }
            },
            "itemValuePath": "items"
          }
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field (ex: '2005-09-18').",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        }
      }
    },
    "ConstituentApi.ActionCustomFieldRead": {
      "type": "object",
      "description": "Custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the custom field.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the action associated with the custom field.",
          "x-ms-summary": "Action ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category"
        },
        "type": {
          "type": "string",
          "description": "The type of data that the custom field represents.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        },
        "value": {
          "type": "string",
          "description": "The value of the custom field.",
          "x-ms-summary": "Value"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field.",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.ActionEdit": {
      "type": "object",
      "description": "Actions track the interactions and tasks that are required to secure gifts and cultivate relationships with constituents.",
      "properties": {
        "category": {
          "type": "string",
          "description": "The channel or intent of the constituent interaction.",
          "x-ms-summary": "Category",
          "enum": [
            "Phone Call",
            "Meeting",
            "Mailing",
            "Email",
            "Task/Other"
          ]
        },
        "completed": {
          "type": "boolean",
          "description": "Is the action completed? If the system is configured to use custom action statuses, this value is based on the action status value.",
          "x-ms-summary": "Completed?"
        },
        "completed_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the action was completed (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Completed on"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The action date (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "description": {
          "type": "string",
          "description": "The detailed explanation that elaborates on the action summary.",
          "x-ms-summary": "Note"
        },
        "direction": {
          "type": "string",
          "description": "The direction of the action.",
          "x-ms-summary": "Direction",
          "x-ms-visibility": "advanced",
          "enum": [
            "Inbound",
            "Outbound"
          ]
        },
        "fundraisers": {
          "type": "array",
          "description": "The set of system record IDs for the fundraisers associated with the action.",
          "x-ms-summary": "Fundraiser(s)",
          "x-ms-visibility": "advanced",
          "items": {
            "type": "string"
          }
        },
        "location": {
          "type": "string",
          "description": "The location of the action.",
          "x-ms-summary": "Location",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "actionlocations"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "actionlocations"
              }
            }
          }
        },
        "opportunity_id": {
          "type": "string",
          "description": "The system record ID of the opportunity associated with the action.",
          "x-ms-summary": "Opportunity ID",
          "x-ms-visibility": "advanced"
        },
        "outcome": {
          "type": "string",
          "description": "The outcome of the action.",
          "x-ms-summary": "Outcome",
          "x-ms-visibility": "advanced",
          "enum": [
            "Successful",
            "Unsuccessful"
          ]
        },
        "priority": {
          "type": "string",
          "description": "The priority of the action.",
          "x-ms-summary": "Priority",
          "x-ms-visibility": "advanced",
          "enum": [
            "Normal",
            "High",
            "Low"
          ]
        },
        "start_time": {
          "type": "string",
          "description": "The start time of the action. Uses 24-hour time in the HH:mm format.",
          "x-ms-summary": "Start time",
          "x-ms-visibility": "advanced"
        },
        "end_time": {
          "type": "string",
          "description": "The end time of the action. Uses 24-hour time in the HH:mm format.",
          "x-ms-summary": "End time",
          "x-ms-visibility": "advanced"
        },
        "status": {
          "type": "string",
          "description": "The action status.",
          "x-ms-summary": "Status",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "actionstatustypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "actionstatustypes"
              }
            }
          }
        },
        "summary": {
          "type": "string",
          "maxLength": 255,
          "minLength": 0,
          "description": "The short description of the action that appears at the top of the record. Character limit: 255.",
          "x-ms-summary": "Summary"
        },
        "type": {
          "type": "string",
          "description": "Additional description of the action to complement the category.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "actiontypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "actiontypes"
              }
            }
          }
        }
      }
    },
    "ConstituentApi.ActionRead": {
      "type": "object",
      "description": "Action",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the action.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the action.",
          "x-ms-summary": "Constituent ID"
        },
        "category": {
          "type": "string",
          "description": "The channel or intent of the constituent interaction.",
          "x-ms-summary": "Category"
        },
        "completed": {
          "type": "boolean",
          "description": "Is the action completed? If the system is configured to use custom action statuses, this value is based on the action status value.",
          "x-ms-summary": "Completed?"
        },
        "completed_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the action was completed.",
          "x-ms-summary": "Completed on"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The action date.",
          "x-ms-summary": "Date"
        },
        "description": {
          "type": "string",
          "description": "The detailed explanation that elaborates on the action summary.",
          "x-ms-summary": "Note"
        },
        "direction": {
          "type": "string",
          "description": "The direction of the action.",
          "x-ms-summary": "Direction",
          "enum": [
            "Inbound",
            "Outbound"
          ]
        },
        "fundraisers": {
          "type": "array",
          "description": "The set of system record IDs for the fundraisers associated with the action.",
          "x-ms-summary": "Fundraiser(s)",
          "items": {
            "type": "string"
          }
        },
        "location": {
          "type": "string",
          "description": "The location of the action.",
          "x-ms-summary": "Location"
        },
        "opportunity_id": {
          "type": "string",
          "description": "The system record ID of the opportunity associated with the action.",
          "x-ms-summary": "Opportunity ID"
        },
        "outcome": {
          "type": "string",
          "description": "The outcome of the action.",
          "x-ms-summary": "Outcome",
          "enum": [
            "Successful",
            "Unsuccessful"
          ]
        },
        "priority": {
          "type": "string",
          "description": "The priority of the action.",
          "x-ms-summary": "Priority",
          "enum": [
            "Normal",
            "High",
            "Low"
          ]
        },
        "start_time": {
          "type": "string",
          "description": "The start time of the action. Uses 24-hour time in the HH:mm format.",
          "x-ms-summary": "Start time"
        },
        "end_time": {
          "type": "string",
          "description": "The end time of the action. Uses 24-hour time in the HH:mm format.",
          "x-ms-summary": "End time"
        },
        "status": {
          "type": "string",
          "description": "The action status.",
          "x-ms-summary": "Status"
        },
        "status_code": {
          "type": "string",
          "description": "The action status code. This property is only returned when the system is configured to use custom action statuses.",
          "x-ms-summary": "Status code"
        },
        "computed_status": {
          "type": "string",
          "description": "The computed action status. If the system is not configured to use custom action statuses, this field computes the status based on the completed and date properties. If not, the field calculates the status based on the action's date property and whether action's Action Status property is configured as completed.",
          "x-ms-summary": "Computed status",
          "enum": [
            "Open",
            "Completed",
            "PastDue"
          ]
        },
        "summary": {
          "type": "string",
          "maxLength": 255,
          "minLength": 0,
          "description": "The short description of the action that appears at the top of the record. Character limit: 255.",
          "x-ms-summary": "Summary"
        },
        "type": {
          "type": "string",
          "description": "Additional description of the action to complement the category.",
          "x-ms-summary": "Type"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the action was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the action was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.AddressAdd": {
      "type": "object",
      "description": "Addresses store information about constituent residences and other addresses along with information about where or whether to send mail.",
      "required": [
        "constituent_id",
        "type"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the address.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The address type.",
          "x-ms-summary": "Address type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "addresstypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "addresstypes"
              }
            }
          }
        },
        "country": {
          "type": "string",
          "description": "The country of the address (can be the ID, name, or abbreviation).",
          "x-ms-summary": "Country",
          "x-ms-dynamic-values": {
            "operationId": "ListCountries",
            "value-collection": "value",
            "value-path": "id",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListCountries",
            "itemsPath": "value",
            "itemValuePath": "id",
            "itemTitlePath": "name"
          }
        },
        "address_lines": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The address lines.",
          "x-ms-summary": "Address lines"
        },
        "city": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The city of the address (do not use in combination with the Suburb field).",
          "x-ms-summary": "City"
        },
        "state": {
          "type": "string",
          "description": "The state of the address.",
          "x-ms-summary": "State"
        },
        "postal_code": {
          "type": "string",
          "maxLength": 12,
          "minLength": 0,
          "description": "The postal code of the address.",
          "x-ms-summary": "Postal code"
        },
        "suburb": {
          "type": "string",
          "description": "The suburb of the address (do not use in combination with the City field).",
          "x-ms-summary": "Suburb"
        },
        "county": {
          "type": "string",
          "description": "The county of the address.",
          "x-ms-summary": "County"
        },
        "start": {
          "type": "string",
          "format": "date",
          "description": "The date when the constituent began residing at this address (ex: '2005-09-18').",
          "x-ms-summary": "Valid from",
          "x-ms-visibility": "advanced"
        },
        "end": {
          "type": "string",
          "format": "date",
          "description": "The date when the constituent ceased to reside at this address (ex: '2005-09-18').",
          "x-ms-summary": "Valid to",
          "x-ms-visibility": "advanced"
        },
        "preferred": {
          "type": "boolean",
          "description": "Is this the constituent's preferred address?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "do_not_mail": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this address?",
          "x-ms-summary": "Do not mail?",
          "x-ms-visibility": "advanced"
        },
        "seasonal_start": {
          "type": "object",
          "description": "The time of year that the constituent begins residing at this address.",
          "x-ms-summary": "Seasonal start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "seasonal_end": {
          "type": "object",
          "description": "The time of the year ceases to reside at this address.",
          "x-ms-summary": "Seasonal end",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        }
      }
    },
    "ConstituentApi.AddressEdit": {
      "type": "object",
      "description": "Addresses store information about constituent residences and other addresses along with information about where or whether to send mail.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The address type.",
          "x-ms-summary": "Address type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "addresstypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "addresstypes"
              }
            }
          }
        },
        "country": {
          "type": "string",
          "description": "The country of the address (can be the ID, name, or abbreviation).",
          "x-ms-summary": "Country",
          "x-ms-dynamic-values": {
            "operationId": "ListCountries",
            "value-collection": "value",
            "value-path": "id",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListCountries",
            "itemsPath": "value",
            "itemValuePath": "id",
            "itemTitlePath": "name"
          }
        },
        "address_lines": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The address lines.",
          "x-ms-summary": "Address lines"
        },
        "city": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The city of the address (do not use in combination with the Suburb field).",
          "x-ms-summary": "City"
        },
        "state": {
          "type": "string",
          "description": "The state of the address.",
          "x-ms-summary": "State"
        },
        "postal_code": {
          "type": "string",
          "maxLength": 12,
          "minLength": 0,
          "description": "The postal code of the address.",
          "x-ms-summary": "Postal code"
        },
        "suburb": {
          "type": "string",
          "description": "The suburb of the address (do not use in combination with the City field).",
          "x-ms-summary": "Suburb"
        },
        "county": {
          "type": "string",
          "description": "The county of the address.",
          "x-ms-summary": "County"
        },
        "start": {
          "type": "string",
          "format": "date",
          "description": "The date when the constituent began residing at this address (ex: '2005-09-18').",
          "x-ms-summary": "Valid from",
          "x-ms-visibility": "advanced"
        },
        "end": {
          "type": "string",
          "format": "date",
          "description": "The date when the constituent ceased to reside at this address (ex: '2005-09-18').",
          "x-ms-summary": "Valid to",
          "x-ms-visibility": "advanced"
        },
        "preferred": {
          "type": "boolean",
          "description": "Is this the constituent's preferred address?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "do_not_mail": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this address?",
          "x-ms-summary": "Do not mail?",
          "x-ms-visibility": "advanced"
        },
        "seasonal_start": {
          "type": "object",
          "description": "The time of year that the constituent begins residing at this address.",
          "x-ms-summary": "Seasonal start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "seasonal_end": {
          "type": "object",
          "description": "The time of the year ceases to reside at this address.",
          "x-ms-summary": "Seasonal end",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        }
      }
    },
    "ConstituentApi.AddressRead": {
      "type": "object",
      "description": "Address",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the address.",
          "x-ms-summary": "ID"
        },
        "type": {
          "type": "string",
          "description": "The address type.",
          "x-ms-summary": "Type"
        },
        "country": {
          "type": "string",
          "description": "The country of the address (can be the ID, name, or abbreviation).",
          "x-ms-summary": "Country"
        },
        "address_lines": {
          "type": "string",
          "description": "The address lines.",
          "x-ms-summary": "Address lines"
        },
        "city": {
          "type": "string",
          "description": "The city of the address (do not use in combination with the Suburb field).",
          "x-ms-summary": "City"
        },
        "state": {
          "type": "string",
          "description": "The state of the address.",
          "x-ms-summary": "State"
        },
        "postal_code": {
          "type": "string",
          "description": "The postal code of the address.",
          "x-ms-summary": "Postal code"
        },
        "suburb": {
          "type": "string",
          "description": "The suburb of the address (do not use in combination with the City field).",
          "x-ms-summary": "Suburb"
        },
        "county": {
          "type": "string",
          "description": "The county of the address.",
          "x-ms-summary": "County"
        },
        "formatted_address": {
          "type": "string",
          "description": "The formatted address in the configured format of the country.",
          "x-ms-summary": "Formatted address"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the constituent began residing at this address.",
          "x-ms-summary": "Valid from"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the constituent ceased to reside at this address.",
          "x-ms-summary": "Valid to"
        },
        "preferred": {
          "type": "boolean",
          "description": "Is this the constituent's preferred address?",
          "x-ms-summary": "Primary?"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the address inactive (meaning, the current date is before any end date)?",
          "x-ms-summary": "Inactive?"
        },
        "do_not_mail": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this address?",
          "x-ms-summary": "Do not mail?"
        },
        "seasonal_start": {
          "type": "object",
          "description": "The time of year that the constituent begins residing at this address.",
          "x-ms-summary": "Seasonal start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "seasonal_end": {
          "type": "object",
          "description": "The time of the year ceases to reside at this address.",
          "x-ms-summary": "Seasonal end",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the address was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the address was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.AliasAdd": {
      "type": "object",
      "description": "Aliases provide secondary identification for individuals or organizations. For example, aliases can be stage names or acronyms.",
      "required": [
        "constituent_id",
        "name"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the alias.",
          "x-ms-summary": "Constituent ID"
        },
        "name": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0,
          "description": "The name to use as the constituent's alias. Character limit: 100.",
          "x-ms-summary": "Alias"
        },
        "type": {
          "type": "string",
          "description": "The alias type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "aliastypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "aliastypes"
              }
            }
          }
        }
      }
    },
    "ConstituentApi.AliasEdit": {
      "type": "object",
      "description": "Aliases provide secondary identification for individuals or organizations. For example, aliases can be stage names or acronyms.",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0,
          "description": "The name to use as the constituent's alias. Character limit: 100.",
          "x-ms-summary": "Alias"
        },
        "type": {
          "type": "string",
          "description": "The alias type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "aliastypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "aliastypes"
              }
            }
          }
        }
      }
    },
    "ConstituentApi.AliasRead": {
      "type": "object",
      "description": "Alias",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the alias.",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "description": "The name to use as the constituent's alias.",
          "x-ms-summary": "Alias"
        },
        "type": {
          "type": "string",
          "description": "The alias type.",
          "x-ms-summary": "Type"
        }
      }
    },
    "ConstituentApi.ApiCollectionOfAddressRead": {
      "type": "object",
      "description": "Addresses",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.AddressRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfActionAttachmentRead": {
      "type": "object",
      "description": "Attachments",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.ActionAttachmentRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfActionCustomFieldRead": {
      "type": "object",
      "description": "Custom fields",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.ConstituentCustomFieldRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfActionRead": {
      "type": "object",
      "description": "Actions",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.ActionRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfAliasRead": {
      "type": "object",
      "description": "Aliases",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.AliasRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfConstituentAttachmentRead": {
      "type": "object",
      "description": "Attachments",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.ConstituentAttachmentRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfConstituentCodeRead": {
      "type": "object",
      "description": "Constituent codes",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.ConstituentCodeRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfConstituentCustomFieldRead": {
      "type": "object",
      "description": "Custom fields",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.ConstituentCustomFieldRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfConstituentRead": {
      "type": "object",
      "description": "Constituents",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.ConstituentRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfCountryRead": {
      "type": "object",
      "description": "Countries",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.CountryRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfCustomFieldCategoryRead": {
      "type": "object",
      "description": "Custom field categories",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.CustomFieldCategoryRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfEmailAddressRead": {
      "type": "object",
      "description": "Email addresses",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.EmailAddressRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfFundraiserAssignmentRead": {
      "type": "object",
      "description": "Fundraiser assignments",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.FundraiserAssignmentRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfNoteRead": {
      "type": "object",
      "description": "Notes",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.NoteRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfOnlinePresenceRead": {
      "type": "object",
      "description": "Online presences",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.OnlinePresenceRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfPhoneRead": {
      "type": "object",
      "description": "Phones",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.PhoneRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfRatingCategoryRead": {
      "type": "object",
      "description": "Rating categories",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.RatingCategoryRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfRatingRead": {
      "type": "object",
      "description": "Ratings",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.RatingRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfRatingSourceRead": {
      "type": "object",
      "description": "Rating sources",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.RatingSourceRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfRelationshipRead": {
      "type": "object",
      "description": "Relationships",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.RelationshipRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfSearchResultRead": {
      "type": "object",
      "description": "Search results",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.SearchResultRead"
          }
        }
      }
    },
    "ConstituentApi.ConstituentAttachmentAdd": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "required": [
        "parent_id",
        "type"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the attachment.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z'). This field defaults to the current date and time if not supplied.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        }
      }
    },
    "ConstituentApi.ConstituentAttachmentEdit": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        }
      }
    },
    "ConstituentApi.ConstituentAttachmentRead": {
      "type": "object",
      "description": "Attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the attachment.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the attachment.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        },
        "thumbnail_url": {
          "type": "string",
          "description": "The URL for a thumbnail. For physical attachments that are images only. Contains a time-bound signature that limits access to 60 minutes.",
          "x-ms-summary": "Thumbnail URL"
        },
        "content_type": {
          "type": "string",
          "description": "The content type. For physical attachments only.",
          "x-ms-summary": "Content type"
        },
        "file_size": {
          "type": "integer",
          "format": "int64",
          "description": "The file size in bytes. For physical attachments only.",
          "x-ms-summary": "File size"
        }
      }
    },
    "ConstituentApi.ConstituentCodeAdd": {
      "type": "object",
      "description": "Constituent codes define the high-level affiliations between constituents and your organization \u2014 such as Board member, Vendor, and Volunteer \u2014 to provide context for why constituents are in the database.",
      "required": [
        "constituent_id",
        "description"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the constituent code.",
          "x-ms-summary": "Constituent ID"
        },
        "description": {
          "type": "string",
          "description": "The constituent code.",
          "x-ms-summary": "Constituent code",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "constituentcodetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "constituentcodetypes"
              }
            }
          }
        },
        "start": {
          "type": "object",
          "description": "The start date of the constituent code.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date of the constituent code.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        }
      }
    },
    "ConstituentApi.ConstituentCodeEdit": {
      "type": "object",
      "description": "Constituent codes define the high-level affiliations between constituents and your organization \u2014 such as Board member, Vendor, and Volunteer \u2014 to provide context for why constituents are in the database.",
      "properties": {
        "start": {
          "type": "object",
          "description": "The start date of the constituent code.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date of the constituent code.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        }
      }
    },
    "ConstituentApi.ConstituentCodeRead": {
      "type": "object",
      "description": "Constituent code",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the constituent code.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the constituent code.",
          "x-ms-summary": "Constituent ID"
        },
        "description": {
          "type": "string",
          "description": "The constituent code.",
          "x-ms-summary": "Constituent code"
        },
        "start": {
          "type": "object",
          "description": "The start date of the constituent code.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date of the constituent code.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the constituent code inactive?",
          "x-ms-summary": "Inactive?"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the constituent code was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the constituent code was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.ConstituentCustomFieldAdd": {
      "type": "object",
      "description": "While records provide many fields to track information, organizations often require additional details. To track this specialized information, use custom fields.",
      "required": [
        "parent_id",
        "category"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the custom field.",
          "x-ms-summary": "Constituent ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category",
          "x-ms-dynamic-values": {
            "operationId": "ListConstituentCustomFieldCategoryDetails",
            "value-collection": "value",
            "value-path": "name",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListConstituentCustomFieldCategoryDetails",
            "itemsPath": "value",
            "itemValuePath": "name",
            "itemTitlePath": "name"
          }
        },
        "value": {
          "type": "object",
          "x-ms-dynamic-schema": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": "constituent",
              "custom_field_type": "constituents",
              "category": {
                "parameter": "category"
              }
            },
            "value-path": "items"
          },
          "x-ms-dynamic-properties": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "custom_field_type": {
                "value": "constituents"
              },
              "category": {
                "parameterReference": "body/category"
              }
            },
            "itemValuePath": "items"
          }
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field (ex: '2005-09-18').",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        }
      }
    },
    "ConstituentApi.ConstituentCustomFieldRead": {
      "type": "object",
      "description": "Custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the custom field.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the custom field.",
          "x-ms-summary": "Constituent ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category"
        },
        "type": {
          "type": "string",
          "description": "The type of data that the custom field represents.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        },
        "value": {
          "type": "string",
          "description": "The value of the custom field.",
          "x-ms-summary": "Value"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field.",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.ConstituentEdit": {
      "type": "object",
      "description": "Constituents are the individuals and organizations who support your organization by contributing time, money, and resources. The constituent entity stores information about donors, prospects, volunteers, general supporters, and more.",
      "properties": {
        "title": {
          "type": "string",
          "description": "The constituent's primary title (for individuals only).",
          "x-ms-summary": "Title",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "titles"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "titles"
              }
            }
          }
        },
        "first": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The constituent's first name (for individuals only). Character limit: 50.",
          "x-ms-summary": "First name"
        },
        "last": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0,
          "description": "The constituent's last name (for individuals only). Character limit: 100.",
          "x-ms-summary": "Last name"
        },
        "name": {
          "type": "string",
          "description": "For individuals, this is a computed field that is not applicable for edit operations. For organization, this field is required and represents the organization's name. Character limit: 100.",
          "x-ms-summary": "Organization name"
        },
        "suffix": {
          "type": "string",
          "description": "The constituent's primary suffix (for individuals only).",
          "x-ms-summary": "Suffix",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "suffixes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "suffixes"
              }
            }
          }
        },
        "preferred_name": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The constituent's preferred name (for individuals only). Character limit: 50.",
          "x-ms-summary": "Preferred name"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the constituent.",
          "x-ms-summary": "Lookup ID"
        },
        "gender": {
          "type": "string",
          "description": "The constituent's gender (for individuals only).",
          "x-ms-summary": "Gender",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "genders"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "genders"
              }
            }
          }
        },
        "middle": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The constituent's middle name (for individuals only). Character limit: 50.",
          "x-ms-summary": "Middle name",
          "x-ms-visibility": "advanced"
        },
        "former_name": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0,
          "description": "The constituent's former name (for individuals only). Character limit: 100.",
          "x-ms-summary": "Former name",
          "x-ms-visibility": "advanced"
        },
        "title_2": {
          "type": "string",
          "description": "The constituent's secondary title (for individuals only).",
          "x-ms-summary": "Title 2",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "titles"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "titles"
              }
            }
          }
        },
        "suffix_2": {
          "type": "string",
          "description": "The constituent's secondary suffix (for individuals only).",
          "x-ms-summary": "Suffix 2",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "suffixes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "suffixes"
              }
            }
          }
        },
        "marital_status": {
          "type": "string",
          "description": "The constituent's marital status (for individuals only).",
          "x-ms-summary": "Marital status",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "maritalstatuses"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "maritalstatuses"
              }
            }
          }
        },
        "gives_anonymously": {
          "type": "boolean",
          "description": "Does the constituent give anonymously?",
          "x-ms-summary": "Gives anonymously?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the constituent inactive?",
          "x-ms-summary": "Inactive?",
          "x-ms-visibility": "advanced"
        },
        "birthdate": {
          "type": "object",
          "description": "The constituent's birthdate (for individuals only).",
          "x-ms-summary": "Birthdate",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "deceased": {
          "type": "boolean",
          "description": "Is the constituent deceased (for individuals only)?",
          "x-ms-summary": "Deceased?",
          "x-ms-visibility": "advanced"
        },
        "deceased_date": {
          "type": "object",
          "description": "The date when the constituent died (for individuals only).",
          "x-ms-summary": "Deceased date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        }
      }
    },
    "ConstituentApi.ConstituentRead": {
      "type": "object",
      "description": "Constituent",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID for the constituent. This is not the same as the user-definable constituent identifier, which is stored in the lookup_id.",
          "x-ms-summary": "ID"
        },
        "type": {
          "type": "string",
          "description": "The type of constituent.",
          "enum": [
            "Individual",
            "Organization"
          ],
          "x-ms-summary": "Type"
        },
        "title": {
          "type": "string",
          "description": "The constituent's primary title (for individuals only).",
          "x-ms-summary": "Title"
        },
        "first": {
          "type": "string",
          "description": "The constituent's first name (for individuals only).",
          "x-ms-summary": "First name"
        },
        "last": {
          "description": "The constituent's last name (for individuals only).",
          "type": "string",
          "x-ms-summary": "Last name"
        },
        "name": {
          "type": "string",
          "description": "For individuals, this field is the full name of the constituent based on the target organization's display name settings. For organizations, this is the organization's name.",
          "x-ms-summary": "Name"
        },
        "preferred_name": {
          "type": "string",
          "description": "The constituent's preferred name (for individuals only).",
          "x-ms-summary": "Preferred name"
        },
        "suffix": {
          "type": "string",
          "description": "The constituent's primary suffix (for individuals only).",
          "x-ms-summary": "Suffix"
        },
        "lookup_id": {
          "description": "The user-defined identifier for the constituent.",
          "type": "string",
          "x-ms-summary": "Lookup ID"
        },
        "email": {
          "type": "object",
          "description": "The constituent's primary email address, or the constituent's first active email address if no active email address is marked as primary.",
          "x-ms-summary": "Primary email",
          "properties": {
            "id": {
              "description": "The system record ID of the email address.",
              "type": "string",
              "x-ms-summary": "ID"
            },
            "type": {
              "type": "string",
              "description": "The type of email address.",
              "x-ms-summary": "type"
            },
            "address": {
              "type": "string",
              "description": "The email address.",
              "x-ms-summary": "address"
            },
            "do_not_email": {
              "type": "boolean",
              "description": "Can the constituent be contacted at this email address?",
              "x-ms-summary": "do not email?"
            },
            "inactive": {
              "type": "boolean",
              "description": "Is this email address inactive?",
              "x-ms-summary": "inactive?"
            },
            "date_added": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the email address was created.",
              "x-ms-summary": "date added"
            },
            "date_modified": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the email address was last modified.",
              "x-ms-summary": "date modified"
            }
          }
        },
        "phone": {
          "type": "object",
          "description": "The constituent's primary phone, or the constituent's first active phone if no active phone is marked as primary.",
          "x-ms-summary": "Primary phone",
          "properties": {
            "id": {
              "type": "string",
              "description": "The system record ID of the phone.",
              "x-ms-summary": "ID"
            },
            "type": {
              "type": "string",
              "description": "The phone type.",
              "x-ms-summary": "type"
            },
            "number": {
              "type": "string",
              "description": "The phone number.",
              "x-ms-summary": "number"
            },
            "do_not_call": {
              "type": "boolean",
              "description": "Can the constituent be contacted at this number?",
              "x-ms-summary": "do not call?"
            },
            "inactive": {
              "type": "boolean",
              "description": "Is this phone number inactive?",
              "x-ms-summary": "inactive?"
            },
            "date_added": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the phone was created.",
              "x-ms-summary": "date added"
            },
            "date_modified": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the phone was last modified.",
              "x-ms-summary": "date modified"
            }
          }
        },
        "online_presence": {
          "type": "object",
          "description": "The constituent's primary online presence, or the constituent's first active online presence if no active online presence is marked as primary.",
          "x-ms-summary": "Primary online presence",
          "properties": {
            "id": {
              "type": "string",
              "description": "The system record ID of the online presence.",
              "x-ms-summary": "ID"
            },
            "type": {
              "type": "string",
              "description": "The online presence type.",
              "x-ms-summary": "type"
            },
            "address": {
              "type": "string",
              "description": "The web address for the online presence.",
              "x-ms-summary": "link"
            },
            "inactive": {
              "type": "boolean",
              "description": "Is this online presence inactive?",
              "x-ms-summary": "inactive?"
            },
            "date_added": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the online presence was created.",
              "x-ms-summary": "date added"
            },
            "date_modified": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the online presence was last modified.",
              "x-ms-summary": "date modified"
            }
          }
        },
        "address": {
          "type": "object",
          "description": "The constituent's preferred address.",
          "x-ms-summary": "Preferred address",
          "properties": {
            "id": {
              "type": "string",
              "description": "The system record ID of the address.",
              "x-ms-summary": "ID"
            },
            "type": {
              "type": "string",
              "description": "The address type.",
              "x-ms-summary": "type"
            },
            "country": {
              "type": "string",
              "description": "The country of the address (can be the ID, name, or abbreviation).",
              "x-ms-summary": "country"
            },
            "address_lines": {
              "type": "string",
              "description": "The address lines.",
              "x-ms-summary": "lines"
            },
            "city": {
              "type": "string",
              "description": "The city of the address (do not use in combination with the Suburb field).",
              "x-ms-summary": "city"
            },
            "state": {
              "type": "string",
              "description": "The state of the address.",
              "x-ms-summary": "state"
            },
            "postal_code": {
              "type": "string",
              "description": "The postal code of the address.",
              "x-ms-summary": "postal code"
            },
            "suburb": {
              "type": "string",
              "description": "The suburb of the address (do not use in combination with the City field).",
              "x-ms-summary": "suburb"
            },
            "county": {
              "type": "string",
              "description": "The county of the address.",
              "x-ms-summary": "county"
            },
            "formatted_address": {
              "type": "string",
              "description": "The formatted address in the configured format of the country.",
              "x-ms-summary": "formatted"
            },
            "start": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the constituent began residing at this address.",
              "x-ms-summary": "valid from"
            },
            "end": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the constituent ceased to reside at this address.",
              "x-ms-summary": "valid to"
            },
            "inactive": {
              "type": "boolean",
              "description": "Is the address inactive (meaning, the current date is before any end date)?",
              "x-ms-summary": "inactive?"
            },
            "do_not_mail": {
              "type": "boolean",
              "description": "Can the constituent be contacted at this address?",
              "x-ms-summary": "do not mail?"
            },
            "seasonal_start": {
              "type": "object",
              "description": "The time of year that the constituent begins residing at this address.",
              "x-ms-summary": "seasonal start",
              "properties": {
                "d": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The day in the fuzzy date.",
                  "x-ms-summary": "day"
                },
                "m": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The month in the fuzzy date.",
                  "x-ms-summary": "month"
                },
                "y": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The year in the fuzzy date.",
                  "x-ms-summary": "year"
                }
              }
            },
            "seasonal_end": {
              "type": "object",
              "description": "The time of the year ceases to reside at this address.",
              "x-ms-summary": "seasonal end",
              "properties": {
                "d": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The day in the fuzzy date.",
                  "x-ms-summary": "day"
                },
                "m": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The month in the fuzzy date.",
                  "x-ms-summary": "month"
                },
                "y": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The year in the fuzzy date.",
                  "x-ms-summary": "year"
                }
              }
            },
            "date_added": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the address was created.",
              "x-ms-summary": "date added"
            },
            "date_modified": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the address was last modified.",
              "x-ms-summary": "date modified"
            }
          }
        },
        "gender": {
          "type": "string",
          "description": "The constituent's gender (for individuals only).",
          "x-ms-summary": "Gender"
        },
        "middle": {
          "type": "string",
          "description": "The constituent's middle name (for individuals only).",
          "x-ms-summary": "Middle name"
        },
        "former_name": {
          "type": "string",
          "description": "The constituent's former name (for individuals only).",
          "x-ms-summary": "Former name"
        },
        "title_2": {
          "type": "string",
          "description": "The constituent's secondary title (for individuals only).",
          "x-ms-summary": "Title 2"
        },
        "suffix_2": {
          "type": "string",
          "description": "The constituent's secondary suffix (for individuals only).",
          "x-ms-summary": "Suffix 2"
        },
        "marital_status": {
          "type": "string",
          "description": "The constituent's marital status (for individuals only).",
          "x-ms-summary": "Marital staus"
        },
        "gives_anonymously": {
          "type": "boolean",
          "description": "Does the constituent give anonymously?",
          "x-ms-summary": "Gives anonymously?"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the constituent inactive?",
          "x-ms-summary": "Inactive?"
        },
        "birthdate": {
          "type": "object",
          "description": "The constituent's birthdate (for individuals only).",
          "x-ms-summary": "Birthdate",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "The constituent's age, as calculated based on the birthdate property (for individuals only).",
          "x-ms-summary": "Age"
        },
        "deceased": {
          "type": "boolean",
          "description": "Is the constituent deceased (for individuals only)?",
          "x-ms-summary": "Deceased?"
        },
        "deceased_date": {
          "type": "object",
          "description": "The date when the constituent died (for individuals only).",
          "x-ms-summary": "Deceased date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "fundraiser_status": {
          "type": "string",
          "description": "Indicates whether the constituent is a fundraiser (for individuals only).",
          "enum": [
            "Active",
            "Inactive",
            "None"
          ],
          "x-ms-summary": "Fundraiser status"
        },
        "spouse": {
          "type": "object",
          "description": "The constituent's spouse (for individuals only).",
          "x-ms-summary": "Spouse",
          "properties": {
            "id": {
              "type": "string",
              "description": "The system record ID of the spouse.",
              "x-ms-summary": "ID"
            },
            "first": {
              "type": "string",
              "description": "The spouse's first name.",
              "x-ms-summary": "first name"
            },
            "last": {
              "type": "string",
              "description": "The spouse's last name.",
              "x-ms-summary": "last name"
            }
          }
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the constituent was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the constituent was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.CountryRead": {
      "type": "object",
      "description": "Country",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the country.",
          "x-ms-summary": "ID"
        },
        "abbreviation": {
          "type": "string",
          "description": "The user-defined abbreviation for the country.",
          "x-ms-summary": "Abbreviation"
        },
        "name": {
          "type": "string",
          "description": "The country name.",
          "x-ms-summary": "Name"
        }
      }
    },
    "ConstituentApi.CreatedAction": {
      "type": "object",
      "description": "Created action",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created action.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedActionAttachment": {
      "type": "object",
      "description": "Created action attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created action attachment.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedActionCustomField": {
      "type": "object",
      "description": "Created action custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created action custom field.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentAddress": {
      "type": "object",
      "description": "Created constituent address",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent address.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentAlias": {
      "type": "object",
      "description": "Created constituent alias",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent alias.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentAttachment": {
      "type": "object",
      "description": "Created constituent attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent attachment.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentCode": {
      "type": "object",
      "description": "Created constituent code",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent code.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentCustomField": {
      "type": "object",
      "description": "Created constituent custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent custom field.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentEmailAddress": {
      "type": "object",
      "description": "Created constituent email address",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent email address.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentNote": {
      "type": "object",
      "description": "Created constituent note",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent note.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentOnlinePresence": {
      "type": "object",
      "description": "Created constituent online presence",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent online presence.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentPhone": {
      "type": "object",
      "description": "Created constituent phone",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent phone.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentRating": {
      "type": "object",
      "description": "Created constituent rating",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent rating.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedIndividualConstituent": {
      "type": "object",
      "description": "Created individual constituent",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created individual constituent.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedIndividualRelationship": {
      "type": "object",
      "description": "Created individual relationship",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created individual relationship.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedOrganizationConstituent": {
      "type": "object",
      "description": "Created organization constituent",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created organization constituent.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedOrganizationRelationship": {
      "type": "object",
      "description": "Created organization relationship",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created organization relationship.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CustomFieldCategoryRead": {
      "type": "object",
      "description": "Custom field category",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the custom field category.",
          "x-ms-summary": "Name"
        },
        "type": {
          "type": "string",
          "description": "The type of data that custom fields with this category represent.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        }
      }
    },
    "ConstituentApi.EmailAddressAdd": {
      "type": "object",
      "description": "Email addresses store information about constituent email accounts and where to send email correspondences for individuals and organizations.",
      "required": [
        "constituent_id",
        "address",
        "type"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the email address.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The type of email address.",
          "x-ms-summary": "Email type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "emailaddresstypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "emailaddresstypes"
              }
            }
          }
        },
        "address": {
          "type": "string",
          "description": "The email address.",
          "x-ms-summary": "Email address"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary email address?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "do_not_email": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this email address?",
          "x-ms-summary": "Do not email?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this email address inactive?",
          "x-ms-summary": "Inactive?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.EmailAddressEdit": {
      "type": "object",
      "description": "Email addresses store information about constituent email accounts and where to send email correspondences for individuals and organizations.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of email address.",
          "x-ms-summary": "Email type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "emailaddresstypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "emailaddresstypes"
              }
            }
          }
        },
        "address": {
          "type": "string",
          "description": "The email address.",
          "x-ms-summary": "Email address"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary email address?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "do_not_email": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this email address?",
          "x-ms-summary": "Do not email?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this email address inactive?",
          "x-ms-summary": "Inactive?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.EmailAddressRead": {
      "type": "object",
      "description": "Email address",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the email address.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the email address.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The type of email address.",
          "x-ms-summary": "Email type"
        },
        "address": {
          "type": "string",
          "description": "The email address.",
          "x-ms-summary": "Email address"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary email address?",
          "x-ms-summary": "Primary?"
        },
        "do_not_email": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this email address?",
          "x-ms-summary": "Do not email?"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this email address inactive?",
          "x-ms-summary": "Inactive?"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the email address was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the email address was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.FileDefinition": {
      "type": "object",
      "description": "File definition",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The identifier of the file.",
          "x-ms-summary": "File ID"
        },
        "file_upload_request": {
          "type": "object",
          "description": "The metadata for the request for uploading the file.",
          "x-ms-summary": "File upload",
          "properties": {
            "url": {
              "type": "string",
              "description": "The URL to use for the upload request.",
              "x-ms-summary": "URL"
            },
            "method": {
              "type": "string",
              "description": "The HTTP method to use with the upload request.",
              "x-ms-summary": "method"
            },
            "headers": {
              "type": "array",
              "description": "The headers to supply when making the request.",
              "x-ms-summary": "headers",
              "items": {
                "$ref": "#/definitions/ConstituentApi.Header"
              }
            }
          }
        },
        "thumbnail_id": {
          "type": "string",
          "description": "The identifier of the thumbnail.",
          "x-ms-summary": "Thumbnail ID"
        },
        "thumbnail_upload_request": {
          "type": "object",
          "description": "The metadata for the request for uploading the thumbnail.",
          "x-ms-summary": "Thumbnail upload",
          "properties": {
            "url": {
              "type": "string",
              "description": "The URL to use for the upload request.",
              "x-ms-summary": "URL"
            },
            "method": {
              "type": "string",
              "description": "The HTTP method to use with the upload request.",
              "x-ms-summary": "method"
            },
            "headers": {
              "type": "array",
              "description": "The headers to supply when making the request.",
              "x-ms-summary": "headers",
              "items": {
                "$ref": "#/definitions/ConstituentApi.Header"
              }
            }
          }
        }
      }
    },
    "ConstituentApi.FundraiserAssignmentRead": {
      "type": "object",
      "description": "Fundraiser assignment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the fundraiser assignment.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent assigned to the fundraiser.",
          "x-ms-summary": "Constituent ID"
        },
        "fundraiser_id": {
          "type": "string",
          "description": "The system record ID of the fundraiser.",
          "x-ms-summary": "Fundraiser ID"
        },
        "type": {
          "type": "string",
          "description": "The type of fundraiser.",
          "x-ms-summary": "Type"
        },
        "amount": {
          "type": "object",
          "description": "The goal amount for the fundraiser to solicit from the assigned constituent.",
          "x-ms-summary": "Amount",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "campaign_id": {
          "type": "string",
          "description": "The system record ID of the campaign to apply resulting gifts to.",
          "x-ms-summary": "Campaign ID"
        },
        "fund_id": {
          "type": "string",
          "description": "The system record ID of the fund any resulting gifts should be applied to. If a restricted fund is selected, only campaigns and appeals associated with that fund may be selected.",
          "x-ms-summary": "Fund ID"
        },
        "appeal_id": {
          "type": "string",
          "description": "The system record ID of the appeal the fundraiser should use to request gifts.",
          "x-ms-summary": "Appeal ID"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "description": "The fundraiser assignment start date.",
          "x-ms-summary": "Start date"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "description": "The fundraiser assignment end date.",
          "x-ms-summary": "End date"
        }
      }
    },
    "ConstituentApi.Header": {
      "type": "object",
      "description": "Request header used for uploading the physical attachment.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for the header.",
          "x-ms-summary": "name"
        },
        "value": {
          "type": "string",
          "description": "The value for the header.",
          "x-ms-summary": "value"
        }
      }
    },
    "ConstituentApi.NewDocumentInfo": {
      "type": "object",
      "description": "Cultivation activities often result in physical collateral such as images, PDFs, or Word files. The New Document entity allows you to upload these files to maintain a holistic view of target constituents.",
      "properties": {
        "file_name": {
          "type": "string",
          "description": "The file name of the document to be uploaded.",
          "x-ms-summary": "File name"
        },
        "upload_thumbnail": {
          "type": "boolean",
          "description": "Include a thumbnail document location?",
          "x-ms-summary": "Include thumbnail?"
        }
      }
    },
    "ConstituentApi.NoteAdd": {
      "type": "object",
      "description": "Notes track helpful or important details about constituents, gifts, or actions, such as specific interests and special instructions for donations. Notes connect you with donors at a more personal level as you cultivate relationships and track lessons learned for more effective fundraising.",
      "required": [
        "constituent_id",
        "type",
        "date"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the note.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The note type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "notetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "notetypes"
              }
            }
          }
        },
        "date": {
          "type": "object",
          "description": "The note date.",
          "x-ms-summary": "Date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "summary": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The note summary. Character limit: 50.",
          "x-ms-summary": "Summary"
        },
        "text": {
          "type": "string",
          "description": "The note text.",
          "x-ms-summary": "Note"
        }
      }
    },
    "ConstituentApi.NoteEdit": {
      "type": "object",
      "description": "Notes track helpful or important details about constituents, gifts, or actions, such as specific interests and special instructions for donations. Notes connect you with donors at a more personal level as you cultivate relationships and track lessons learned for more effective fundraising.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The note type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "notetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "notetypes"
              }
            }
          }
        },
        "date": {
          "type": "object",
          "description": "The note date.",
          "x-ms-summary": "Date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "summary": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The note summary. Character limit: 50.",
          "x-ms-summary": "Summary"
        },
        "text": {
          "type": "string",
          "description": "The note text.",
          "x-ms-summary": "Note"
        }
      }
    },
    "ConstituentApi.NoteRead": {
      "type": "object",
      "description": "Note",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the note.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the note.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The note type.",
          "x-ms-summary": "Type"
        },
        "date": {
          "type": "object",
          "description": "The note date.",
          "x-ms-summary": "Date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "summary": {
          "type": "string",
          "description": "The note summary.",
          "x-ms-summary": "Summary"
        },
        "text": {
          "type": "string",
          "description": "The note text.",
          "x-ms-summary": "Note"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the note was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the note was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.OnlinePresenceAdd": {
      "type": "object",
      "description": "Online presence entities store a constituent's social media accounts, websites, and other means of reaching out or gaining more information about the constituent.",
      "required": [
        "constituent_id",
        "address",
        "type"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the online presence.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The online presence type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "onlinepresencetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "onlinepresencetypes"
              }
            }
          }
        },
        "address": {
          "type": "string",
          "description": "The web address for the online presence.",
          "x-ms-summary": "Link"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary online presence?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this online presence inactive?",
          "x-ms-summary": "Inactive?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.OnlinePresenceEdit": {
      "type": "object",
      "description": "Online presence entities store a constituent's social media accounts, websites, and other means of reaching out or gaining more information about the constituent.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The online presence type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "onlinepresencetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "onlinepresencetypes"
              }
            }
          }
        },
        "address": {
          "type": "string",
          "description": "The web address for the online presence.",
          "x-ms-summary": "Link"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary online presence?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this online presence inactive?",
          "x-ms-summary": "Inactive?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.OnlinePresenceRead": {
      "type": "object",
      "description": "Online presence",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the online presence.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the online presence.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The online presence type.",
          "x-ms-summary": "Type"
        },
        "address": {
          "type": "string",
          "description": "The web address for the online presence.",
          "x-ms-summary": "Link"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary online presence?",
          "x-ms-summary": "Primary?"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this online presence inactive?",
          "x-ms-summary": "Inactive?"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the online presence was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the online presence was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.PhoneAdd": {
      "type": "object",
      "description": "Phones store information about constituent phone numbers and where to call individuals and organizations.",
      "required": [
        "constituent_id",
        "type",
        "number"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the phone.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The phone type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "phonetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "phonetypes"
              }
            }
          }
        },
        "number": {
          "type": "string",
          "description": "The phone number.",
          "x-ms-summary": "Number"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary phone?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "do_not_call": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this number?",
          "x-ms-summary": "Do not call?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this phone number inactive?",
          "x-ms-summary": "Inactive?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.PhoneEdit": {
      "type": "object",
      "description": "Phones store information about constituent phone numbers and where to call individuals and organizations.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The phone type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "phonetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "phonetypes"
              }
            }
          }
        },
        "number": {
          "type": "string",
          "description": "The phone number.",
          "x-ms-summary": "Number"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary phone?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "do_not_call": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this number?",
          "x-ms-summary": "Do not call?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this phone number inactive?",
          "x-ms-summary": "Inactive?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.PhoneRead": {
      "type": "object",
      "description": "Phone",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the phone.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the phone.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The phone type.",
          "x-ms-summary": "Type"
        },
        "number": {
          "type": "string",
          "description": "The phone number.",
          "x-ms-summary": "Number"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary phone?",
          "x-ms-summary": "Primary?"
        },
        "do_not_call": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this number?",
          "x-ms-summary": "Do not call?"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this phone number inactive?",
          "x-ms-summary": "Inactive?"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the phone was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the phone was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.ProfilePictureRead": {
      "type": "object",
      "description": "Profile picture",
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the profile picture.",
          "x-ms-summary": "Constituent ID"
        },
        "url": {
          "type": "string",
          "description": "The URL for the profile picture. The URL contains a time-bound signature that limits access to 60 minutes.",
          "x-ms-summary": "URL"
        },
        "thumbnail_url": {
          "type": "string",
          "description": "The URL for a thumbnail of the profile picture. Contains a time-bound signature that limits access to 60 minutes.",
          "x-ms-summary": "Thumbnail URL"
        }
      }
    },
    "ConstituentApi.RatingAdd": {
      "type": "object",
      "description": "Ratings indicate the estimated wealth of constituents and their capacity to give. Ratings information such as overall wealth ratings, suggested ask amounts, and total identified assets can help to determine where to focus efforts, whether to pursue prospects or major gifts, and how much to ask from donors.",
      "required": [
        "constituent_id",
        "source",
        "category",
        "date"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the rating.",
          "x-ms-summary": "Constituent ID"
        },
        "source": {
          "type": "string",
          "description": "The source of the new rating.",
          "x-ms-summary": "Source",
          "x-ms-dynamic-values": {
            "operationId": "ListRatingSources",
            "value-collection": "value",
            "value-path": "name",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListRatingSources",
            "itemsPath": "value",
            "itemValuePath": "name",
            "itemTitlePath": "name"
          }
        },
        "category": {
          "type": "string",
          "description": "The category of the rating.",
          "x-ms-summary": "Category",
          "x-ms-dynamic-values": {
            "operationId": "ListRatingCategories",
            "value-collection": "value",
            "value-path": "name",
            "value-title": "name",
            "parameters": {
              "source_name": {
                "parameter": "source"
              }
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "ListRatingCategories",
            "itemsPath": "value",
            "itemValuePath": "name",
            "itemTitlePath": "name",
            "parameters": {
              "source_name": {
                "parameterReference": "body/source"
              }
            }
          }
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the rating (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "value": {
          "type": "object",
          "x-ms-dynamic-schema": {
            "operationId": "GetRatingDynamicProperties",
            "parameters": {
              "source_name": {
                "parameter": "source"
              },
              "category": {
                "parameter": "category"
              }
            },
            "value-path": "items"
          },
          "x-ms-dynamic-properties": {
            "operationId": "GetRatingDynamicProperties",
            "parameters": {
              "source_name": {
                "parameterReference": "body/source"
              },
              "category": {
                "parameterReference": "body/category"
              }
            },
            "itemValuePath": "items"
          }
        },
        "comment": {
          "type": "string",
          "maxLength": 255,
          "minLength": 0,
          "description": "A comment about the rating. Character limit: 255.",
          "x-ms-summary": "Comments"
        }
      }
    },
    "ConstituentApi.RatingCategoryRead": {
      "type": "object",
      "description": "Rating category",
      "properties": {
        "inactive": {
          "type": "boolean",
          "description": "Is the category inactive?",
          "x-ms-summary": "Inactive?"
        },
        "name": {
          "type": "string",
          "description": "The name of the rating category.",
          "x-ms-summary": "Name"
        },
        "source_name": {
          "type": "string",
          "description": "The source of the category.",
          "x-ms-summary": "Source"
        },
        "type": {
          "type": "string",
          "description": "Gets or sets the type of the rating category.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "DateTime",
            "Currency",
            "Boolean",
            "CodeTable",
            "Unknown"
          ]
        }
      }
    },
    "ConstituentApi.RatingRead": {
      "type": "object",
      "description": "Rating",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the rating.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the rating.",
          "x-ms-summary": "Constituent ID"
        },
        "source": {
          "type": "string",
          "description": "The source of the new rating.",
          "x-ms-summary": "Source"
        },
        "category": {
          "type": "string",
          "description": "The category of the rating.",
          "x-ms-summary": "Category"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the rating.",
          "x-ms-summary": "Date"
        },
        "value": {
          "type": "string",
          "description": "The value of the rating.",
          "x-ms-summary": "Description"
        },
        "comment": {
          "type": "string",
          "description": "A comment about the rating.",
          "x-ms-summary": "Comments"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the rating inactive?",
          "x-ms-summary": "Inactive?"
        },
        "type": {
          "type": "string",
          "description": "This computed field indicates the type of data that the rating represents based on the category property.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "DateTime",
            "Currency",
            "Boolean",
            "CodeTable",
            "Unknown"
          ]
        }
      }
    },
    "ConstituentApi.RatingSourceRead": {
      "type": "object",
      "description": "Rating source",
      "properties": {
        "inactive": {
          "type": "boolean",
          "description": "Is the rating source inactive?",
          "x-ms-summary": "Inactive?"
        },
        "name": {
          "type": "string",
          "description": "The name of the rating source.",
          "x-ms-summary": "Name"
        }
      }
    },
    "ConstituentApi.RelationshipEdit": {
      "type": "object",
      "description": "Relationships describe connections between constituents and other individuals and organizations such as family, friends, and employers. Tracking constituent relationships can enhance fundraising efforts and interactions.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of relation that the relationship represents.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "relationshiptypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "relationshiptypes"
              }
            }
          }
        },
        "reciprocal_type": {
          "type": "string",
          "description": "Describes the constituent's relationship to the related constituent. For example, in a relationship between a male constituent and a female sibling, the reciprocal relationship type would be brother.",
          "x-ms-summary": "Reciprocal type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "relationshiptypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "relationshiptypes"
              }
            }
          }
        },
        "start": {
          "type": "object",
          "description": "The start date for the relationship.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date for the relationship.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "is_spouse": {
          "type": "boolean",
          "description": "Is the related individual the constituent's spouse (only applies to relationships between individuals)?",
          "x-ms-summary": "Is spouse?"
        },
        "comment": {
          "type": "string",
          "description": "Additional notes about the relationship.",
          "x-ms-summary": "Notes"
        },
        "is_organization_contact": {
          "type": "boolean",
          "description": "Does the constituent represent this organization as a contact (only applies to relationships between organizations and individuals)?",
          "x-ms-summary": "Is contact?"
        },
        "is_primary_business": {
          "type": "boolean",
          "description": "Is this the constituent's primary business (only applies to relationships between organizations and individuals)?",
          "x-ms-summary": "Is primary business?"
        },
        "organization_contact_type": {
          "type": "string",
          "description": "Provides context for interactions with the related individual who represents the organization as a contact. Only applies to relationships between organizations and individuals.",
          "x-ms-summary": "Contact type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "organizationcontacttypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "organizationcontacttypes"
              }
            }
          }
        },
        "position": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The individual's position in the organization. Only applies to relationships between organizations and individuals. Character limit: 50.",
          "x-ms-summary": "Position"
        }
      }
    },
    "ConstituentApi.RelationshipRead": {
      "type": "object",
      "description": "Relationship",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the relationship.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the relationship.",
          "x-ms-summary": "Constituent ID"
        },
        "relation_id": {
          "type": "string",
          "description": "The system record ID of the related individual or organization.",
          "x-ms-summary": "Relation ID"
        },
        "reciprocal_relationship_id": {
          "type": "string",
          "description": "The identifier for the reciprocal relationship record. This value is read-only and is automatically generated when the relationship is created. Changes made to this record will also be reflected on the reciprocal, with the exception of the comments property.",
          "x-ms-summary": "Reciprocal relationship ID"
        },
        "name": {
          "type": "string",
          "description": "The name of the related constituent. If the related constituent is an individual, this will be the full name of the constituent based on the target organization's display name settings.",
          "x-ms-summary": "Name"
        },
        "type": {
          "type": "string",
          "description": "The type of relation that the relationship represents.",
          "x-ms-summary": "Type"
        },
        "reciprocal_type": {
          "type": "string",
          "description": "Describes the constituent's relationship to the related constituent. For example, in a relationship between a male constituent and a female sibling, the reciprocal relationship type would be brother.",
          "x-ms-summary": "Reciprocal type"
        },
        "start": {
          "type": "object",
          "description": "The start date for the relationship.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date for the relationship.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "is_spouse": {
          "type": "boolean",
          "description": "Is the related individual the constituent's spouse (only applies to relationships between individuals)?",
          "x-ms-summary": "Is spouse?"
        },
        "comment": {
          "type": "string",
          "description": "The comment on the relationship.",
          "x-ms-summary": "Notes"
        },
        "is_organization_contact": {
          "type": "boolean",
          "description": "Does the constituent represent this organization as a contact (only applies to relationships between organizations and individuals)?",
          "x-ms-summary": "Is contact?"
        },
        "is_primary_business": {
          "type": "boolean",
          "description": "Is this the constituent's primary business (only applies to relationships between organizations and individuals)?",
          "x-ms-summary": "Is primary business?"
        },
        "organization_contact_type": {
          "type": "string",
          "description": "Provides context for interactions with the related individual who represents the organization as a contact. Only applies to relationships between organizations and individuals.",
          "x-ms-summary": "Contact type"
        },
        "position": {
          "type": "string",
          "description": "The individual's position in the organization. Only applies to relationships between organizations and individuals.",
          "x-ms-summary": "Position"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the relationship was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the relationship was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.SearchResultRead": {
      "type": "object",
      "description": "Search result",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the constituent.",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "description": "The constituent name. For individuals, this computed field indicates the full name of the constituent based on the target organization's display name settings.",
          "x-ms-summary": "Name"
        },
        "address": {
          "type": "string",
          "description": "The constituent's preferred address.",
          "x-ms-summary": "Address"
        },
        "deceased": {
          "type": "boolean",
          "description": "Is the constituent is deceased?",
          "x-ms-summary": "Deceased?"
        },
        "email": {
          "type": "string",
          "description": "The constituent's email address.",
          "x-ms-summary": "Email"
        },
        "fundraiser_status": {
          "type": "string",
          "description": "The constituent's fundraiser status. For individuals, this computed field indicates the whether the constituent is Active, Inactive, or None.  For organizations, this value will always be None.",
          "x-ms-summary": "Fundraiser status"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the constituent inactive?",
          "x-ms-summary": "Inactive?"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the constituent.",
          "x-ms-summary": "Lookup ID"
        }
      }
    },
    "ConstituentApi.Virtual.IndividualAdd": {
      "type": "object",
      "description": "Constituents are the individuals and organizations who support your organization by contributing time, money, and resources. The constituent entity stores information about donors, prospects, volunteers, general supporters, and more.",
      "required": [
        "type",
        "last"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of constituent.",
          "default": "Individual",
          "x-ms-summary": "Type",
          "x-ms-visibility": "internal",
          "enum": [
            "Individual"
          ]
        },
        "title": {
          "type": "string",
          "description": "The constituent's primary title.",
          "x-ms-summary": "Title",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "titles"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "titles"
              }
            }
          }
        },
        "first": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The constituent's first name. Character limit: 50.",
          "x-ms-summary": "First name"
        },
        "last": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0,
          "description": "The constituent's last name. Character limit: 100.",
          "x-ms-summary": "Last name"
        },
        "suffix": {
          "type": "string",
          "description": "The constituent's primary suffix.",
          "x-ms-summary": "Suffix",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "suffixes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "suffixes"
              }
            }
          }
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the constituent.",
          "x-ms-summary": "Lookup ID"
        },
        "address": {
          "type": "object",
          "description": "The constituent's preferred address.",
          "x-ms-summary": "Address",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The address type.",
              "x-ms-summary": "type",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "addresstypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "addresstypes"
                  }
                }
              }
            },
            "country": {
              "type": "string",
              "description": "The country of the address (can be the ID, name, or abbreviation).",
              "x-ms-summary": "country",
              "x-ms-dynamic-values": {
                "operationId": "ListCountries",
                "value-collection": "value",
                "value-path": "id",
                "value-title": "name"
              },
              "x-ms-dynamic-list": {
                "operationId": "ListCountries",
                "itemsPath": "value",
                "itemValuePath": "id",
                "itemTitlePath": "name"
              }
            },
            "address_lines": {
              "type": "string",
              "maxLength": 150,
              "minLength": 0,
              "description": "The address lines. Character limit: 150.",
              "x-ms-summary": "lines"
            },
            "city": {
              "type": "string",
              "maxLength": 50,
              "minLength": 0,
              "description": "The city of the address (do not use in combination with the Suburb field).",
              "x-ms-summary": "city"
            },
            "state": {
              "type": "string",
              "description": "The state of the address.",
              "x-ms-summary": "state"
            },
            "postal_code": {
              "type": "string",
              "maxLength": 12,
              "minLength": 0,
              "description": "The postal code of the address. Character limit: 12.",
              "x-ms-summary": "postal code"
            },
            "suburb": {
              "type": "string",
              "description": "The suburb of the address (do not use in combination with the City field).",
              "x-ms-summary": "suburb",
              "x-ms-visibility": "advanced"
            },
            "county": {
              "type": "string",
              "description": "The county of the address.",
              "x-ms-summary": "county",
              "x-ms-visibility": "advanced"
            },
            "start": {
              "type": "string",
              "format": "date",
              "description": "The date when the constituent began residing at this address (ex: '2005-09-18').",
              "x-ms-summary": "start",
              "x-ms-visibility": "advanced"
            },
            "end": {
              "type": "string",
              "format": "date",
              "description": "The date when the constituent ceased to reside at this address  (ex: '2005-09-18').",
              "x-ms-summary": "end",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "phone": {
          "type": "object",
          "description": "The constituent's phone.",
          "x-ms-summary": "Phone",
          "required": [
            "type",
            "number"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The phone type.",
              "x-ms-summary": "type",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "phonetypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "phonetypes"
                  }
                }
              }
            },
            "number": {
              "type": "string",
              "description": "The phone number.",
              "x-ms-summary": "number",
              "x-ms-visibility": "advanced"
            },
            "primary": {
              "type": "boolean",
              "description": "Is this the constituent's primary phone number?",
              "x-ms-summary": "is primary?",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "email": {
          "type": "object",
          "description": "The constituent's email address.",
          "x-ms-summary": "Email",
          "required": [
            "type",
            "address"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of email address.",
              "x-ms-summary": "type",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "emailaddresstypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "emailaddresstypes"
                  }
                }
              }
            },
            "address": {
              "type": "string",
              "description": "The email address.",
              "x-ms-summary": "address",
              "x-ms-visibility": "advanced"
            },
            "primary": {
              "type": "boolean",
              "description": "Is this the constituent's primary email address?",
              "x-ms-summary": "is primary?",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "online_presence": {
          "type": "object",
          "description": "The constituent's online presence.",
          "x-ms-summary": "Online presence",
          "required": [
            "type",
            "address"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The online presence type.",
              "x-ms-summary": "type",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "onlinepresencetypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "onlinepresencetypes"
                  }
                }
              }
            },
            "address": {
              "type": "string",
              "description": "The web address for the online presence.",
              "x-ms-summary": "address",
              "x-ms-visibility": "advanced"
            },
            "primary": {
              "type": "boolean",
              "description": "Is this the constituent's primary online presence?",
              "x-ms-summary": "is primary?",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "preferred_name": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The constituent's preferred name. Character limit: 50.",
          "x-ms-summary": "Preferred name",
          "x-ms-visibility": "advanced"
        },
        "middle": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The constituent's middle name. Character limit: 50.",
          "x-ms-summary": "Middle name",
          "x-ms-visibility": "advanced"
        },
        "former_name": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0,
          "description": "The constituent's former name. Character limit: 100.",
          "x-ms-summary": "Former name",
          "x-ms-visibility": "advanced"
        },
        "title_2": {
          "type": "string",
          "description": "The constituent's secondary title.",
          "x-ms-summary": "Title 2",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "titles"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "titles"
              }
            }
          }
        },
        "suffix_2": {
          "type": "string",
          "description": "The constituent's secondary suffix.",
          "x-ms-summary": "Suffix 2",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "suffixes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "suffixes"
              }
            }
          }
        },
        "gender": {
          "type": "string",
          "description": "The constituent's gender.",
          "x-ms-summary": "Gender",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "genders"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "genders"
              }
            }
          }
        },
        "marital_status": {
          "type": "string",
          "description": "The constituent's marital status.",
          "x-ms-summary": "Marital status",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "maritalstatuses"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "maritalstatuses"
              }
            }
          }
        },
        "gives_anonymously": {
          "type": "boolean",
          "description": "Does the constituent give anonymously?",
          "x-ms-summary": "Gives anonymously?",
          "x-ms-visibility": "advanced"
        },
        "birthdate": {
          "type": "object",
          "description": "The constituent's birthdate.",
          "x-ms-summary": "Birthdate",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        }
      }
    },
    "ConstituentApi.Virtual.IndividualRelationshipAdd": {
      "type": "object",
      "description": "Relationships describe connections between constituents and other individuals such as family, friends, and employers. Tracking constituent relationships can enhance fundraising efforts and interactions.",
      "required": [
        "constituent_id",
        "relation_id"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the relationship.",
          "x-ms-summary": "Constituent ID"
        },
        "relation_id": {
          "type": "string",
          "description": "The system record ID of the related individual.",
          "x-ms-summary": "Relation ID"
        },
        "type": {
          "type": "string",
          "description": "The type of relation that the relationship represents.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "relationshiptypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "relationshiptypes"
              }
            }
          }
        },
        "reciprocal_type": {
          "type": "string",
          "description": "Describes the constituent's relationship to the related constituent. For example, in a relationship between a male constituent and a female sibling, the reciprocal relationship type would be brother.",
          "x-ms-summary": "Reciprocal type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "relationshiptypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "relationshiptypes"
              }
            }
          }
        },
        "start": {
          "type": "object",
          "description": "The start date for the relationship.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date for the relationship.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "is_spouse": {
          "type": "boolean",
          "description": "Is the related individual the constituent's spouse?",
          "x-ms-summary": "Is spouse?"
        },
        "comment": {
          "type": "string",
          "description": "Additional notes about the relationship.",
          "x-ms-summary": "Notes"
        }
      }
    },
    "ConstituentApi.Virtual.OrganizationAdd": {
      "type": "object",
      "description": "Constituents are the individuals and organizations who support your organization by contributing time, money, and resources. The constituent entity stores information about donors, prospects, volunteers, general supporters, and more.",
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of constituent.",
          "default": "Organization",
          "x-ms-summary": "Type",
          "x-ms-visibility": "internal",
          "enum": [
            "Organization"
          ]
        },
        "name": {
          "type": "string",
          "description": "The organization name. Character limit: 100.",
          "x-ms-summary": "Name"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the constituent.",
          "x-ms-summary": "Lookup ID"
        },
        "address": {
          "type": "object",
          "description": "The constituent's preferred address.",
          "x-ms-summary": "Address",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The address type.",
              "x-ms-summary": "type",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "addresstypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "addresstypes"
                  }
                }
              }
            },
            "country": {
              "type": "string",
              "description": "The country of the address (can be the ID, name, or abbreviation).",
              "x-ms-summary": "country",
              "x-ms-dynamic-values": {
                "operationId": "ListCountries",
                "value-collection": "value",
                "value-path": "id",
                "value-title": "name"
              },
              "x-ms-dynamic-list": {
                "operationId": "ListCountries",
                "itemsPath": "value",
                "itemValuePath": "id",
                "itemTitlePath": "name"
              }
            },
            "address_lines": {
              "type": "string",
              "maxLength": 150,
              "minLength": 0,
              "description": "The address lines. Character limit: 150.",
              "x-ms-summary": "lines"
            },
            "city": {
              "type": "string",
              "maxLength": 50,
              "minLength": 0,
              "description": "The city of the address (do not use in combination with the Suburb field).",
              "x-ms-summary": "city"
            },
            "state": {
              "type": "string",
              "description": "The state of the address.",
              "x-ms-summary": "state"
            },
            "postal_code": {
              "type": "string",
              "maxLength": 12,
              "minLength": 0,
              "description": "The postal code of the address. Character limit: 12.",
              "x-ms-summary": "postal code"
            },
            "suburb": {
              "type": "string",
              "description": "The suburb of the address (do not use in combination with the City field).",
              "x-ms-summary": "suburb",
              "x-ms-visibility": "advanced"
            },
            "county": {
              "type": "string",
              "description": "The county of the address.",
              "x-ms-summary": "county",
              "x-ms-visibility": "advanced"
            },
            "start": {
              "type": "string",
              "format": "date",
              "description": "The date when the constituent began residing at this address (ex: '2005-09-18').",
              "x-ms-summary": "start",
              "x-ms-visibility": "advanced"
            },
            "end": {
              "type": "string",
              "format": "date",
              "description": "The date when the constituent ceased to reside at this address (ex: '2005-09-18').",
              "x-ms-summary": "end",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "phone": {
          "type": "object",
          "description": "The constituent's phone.",
          "x-ms-summary": "Phone",
          "required": [
            "type",
            "number"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The phone type.",
              "x-ms-summary": "type",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "phonetypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "phonetypes"
                  }
                }
              }
            },
            "number": {
              "type": "string",
              "description": "The phone number.",
              "x-ms-summary": "number",
              "x-ms-visibility": "advanced"
            },
            "primary": {
              "type": "boolean",
              "description": "Is this the constituent's primary phone number?",
              "x-ms-summary": "is primary?",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "email": {
          "type": "object",
          "description": "The constituent's email address.",
          "x-ms-summary": "Email",
          "required": [
            "type",
            "address"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of email address.",
              "x-ms-summary": "type",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "emailaddresstypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "emailaddresstypes"
                  }
                }
              }
            },
            "address": {
              "type": "string",
              "description": "The email address.",
              "x-ms-summary": "address",
              "x-ms-visibility": "advanced"
            },
            "primary": {
              "type": "boolean",
              "description": "Is this the constituent's primary email address?",
              "x-ms-summary": "is primary?",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "online_presence": {
          "type": "object",
          "description": "The constituent's online presence.",
          "x-ms-summary": "Online presence",
          "required": [
            "type",
            "address"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The online presence type.",
              "x-ms-summary": "type",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "onlinepresencetypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "onlinepresencetypes"
                  }
                }
              }
            },
            "address": {
              "type": "string",
              "description": "The web address for the online presence.",
              "x-ms-summary": "address",
              "x-ms-visibility": "advanced"
            },
            "primary": {
              "type": "boolean",
              "description": "Is this the constituent's primary online presence?",
              "x-ms-summary": "is primary?",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "gives_anonymously": {
          "type": "boolean",
          "description": "Does the constituent give anonymously?",
          "x-ms-summary": "Gives anonymously?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.Virtual.OrganizationRelationshipAdd": {
      "type": "object",
      "description": "Relationships describe connections between constituents and other individuals and organizations such as family, friends, and employers. Tracking constituent relationships can enhance fundraising efforts and interactions.",
      "required": [
        "constituent_id",
        "relation_id"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the relationship.",
          "x-ms-summary": "Constituent ID"
        },
        "relation_id": {
          "type": "string",
          "description": "The system record ID of the related organization.",
          "x-ms-summary": "Relation ID"
        },
        "type": {
          "type": "string",
          "description": "The type of relation that the relationship represents.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "relationshiptypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "relationshiptypes"
              }
            }
          }
        },
        "reciprocal_type": {
          "type": "string",
          "description": "Describes the constituent's relationship to the related organization.",
          "x-ms-summary": "Reciprocal type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "relationshiptypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "relationshiptypes"
              }
            }
          }
        },
        "start": {
          "type": "object",
          "description": "The start date for the relationship.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date for the relationship.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "is_organization_contact": {
          "type": "boolean",
          "description": "Does the constituent represent this organization as a contact?",
          "x-ms-summary": "Is contact?"
        },
        "organization_contact_type": {
          "type": "string",
          "description": "Provides context for interactions with the related individual who represents the organization as a contact.",
          "x-ms-summary": "Contact type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "organizationcontacttypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "organizationcontacttypes"
              }
            }
          }
        },
        "position": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The individual's position in the organization. Character limit: 50.",
          "x-ms-summary": "Position"
        },
        "is_primary_business": {
          "type": "boolean",
          "description": "Is this the constituent's primary business?",
          "x-ms-summary": "Is primary business?"
        },
        "comment": {
          "type": "string",
          "description": "Additional notes about the relationship.",
          "x-ms-summary": "Notes"
        }
      }
    },
    "FundraisingApi.ApiCollectionOfAppealAttachmentRead": {
      "type": "object",
      "description": "Attachments",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/FundraisingApi.AppealAttachmentRead"
          }
        }
      }
    },
    "FundraisingApi.ApiCollectionOfAppealCustomFieldRead": {
      "type": "object",
      "description": "Custom fields",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/FundraisingApi.AppealCustomFieldRead"
          }
        }
      }
    },
    "FundraisingApi.ApiCollectionOfAppealRead": {
      "type": "object",
      "description": "Appeals",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/FundraisingApi.AppealRead"
          }
        }
      }
    },
    "FundraisingApi.ApiCollectionOfCampaignAttachmentRead": {
      "type": "object",
      "description": "Attachments",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/FundraisingApi.CampaignAttachmentRead"
          }
        }
      }
    },
    "FundraisingApi.ApiCollectionOfCampaignCustomFieldRead": {
      "type": "object",
      "description": "Custom fields",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/FundraisingApi.CampaignCustomFieldRead"
          }
        }
      }
    },
    "FundraisingApi.ApiCollectionOfCampaignRead": {
      "type": "object",
      "description": "Campaigns",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/FundraisingApi.CampaignRead"
          }
        }
      }
    },
    "FundraisingApi.ApiCollectionOfCustomFieldCategoryRead": {
      "type": "object",
      "description": "Custom field categories",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/FundraisingApi.CustomFieldCategoryRead"
          }
        }
      }
    },
    "FundraisingApi.ApiCollectionOfFundAttachmentRead": {
      "type": "object",
      "description": "Attachments",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/FundraisingApi.FundAttachmentRead"
          }
        }
      }
    },
    "FundraisingApi.ApiCollectionOfFundCustomFieldRead": {
      "type": "object",
      "description": "Custom fields",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/FundraisingApi.FundCustomFieldRead"
          }
        }
      }
    },
    "FundraisingApi.ApiCollectionOfFundRead": {
      "type": "object",
      "description": "Funds",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/FundraisingApi.FundRead"
          }
        }
      }
    },
    "FundraisingApi.ApiCollectionOfPackageRead": {
      "type": "object",
      "description": "Packages",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/FundraisingApi.PackageRead"
          }
        }
      }
    },
    "FundraisingApi.AppealAttachmentAdd": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "required": [
        "parent_id",
        "type"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the appeal associated with the attachment.",
          "x-ms-summary": "Appeal ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z'). This field defaults to the current date and time if not supplied.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        }
      }
    },
    "FundraisingApi.AppealAttachmentEdit": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        }
      }
    },
    "FundraisingApi.AppealAttachmentRead": {
      "type": "object",
      "description": "Attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the attachment.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the appeal associated with the attachment.",
          "x-ms-summary": "Appeal ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        },
        "thumbnail_url": {
          "type": "string",
          "description": "The URL for a thumbnail. For physical attachments that are images only. Contains a time-bound signature that limits access to 60 minutes.",
          "x-ms-summary": "Thumbnail URL"
        },
        "content_type": {
          "type": "string",
          "description": "The content type. For physical attachments only.",
          "x-ms-summary": "Content type"
        },
        "file_size": {
          "type": "integer",
          "format": "int64",
          "description": "The file size in bytes. For physical attachments only.",
          "x-ms-summary": "File size"
        }
      }
    },
    "FundraisingApi.AppealCustomFieldAdd": {
      "type": "object",
      "description": "While records provide many fields to track information, organizations often require additional details. To track this specialized information, use custom fields.",
      "required": [
        "parent_id",
        "category"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the appeal associated with the custom field.",
          "x-ms-summary": "Appeal ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category",
          "x-ms-dynamic-values": {
            "operationId": "ListAppealCustomFieldCategories",
            "value-collection": "value",
            "value-path": "name",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListAppealCustomFieldCategories",
            "itemsPath": "value",
            "itemValuePath": "name",
            "itemTitlePath": "name"
          }
        },
        "value": {
          "type": "object",
          "x-ms-dynamic-schema": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": "fundraising",
              "custom_field_type": "appeals",
              "category": {
                "parameter": "category"
              }
            },
            "value-path": "items"
          },
          "x-ms-dynamic-properties": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": {
                "value": "fundraising"
              },
              "custom_field_type": {
                "value": "appeals"
              },
              "category": {
                "parameterReference": "body/category"
              }
            },
            "itemValuePath": "items"
          }
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field (ex: '2005-09-18').",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        }
      }
    },
    "FundraisingApi.AppealCustomFieldRead": {
      "type": "object",
      "description": "Custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the custom field.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the appeal associated with the custom field.",
          "x-ms-summary": "Appeal ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category"
        },
        "type": {
          "type": "string",
          "description": "The type of data that the custom field represents.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        },
        "value": {
          "type": "string",
          "description": "The value of the custom field.",
          "x-ms-summary": "Value"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field.",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "FundraisingApi.AppealRead": {
      "type": "object",
      "description": "Appeal",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the appeal.",
          "x-ms-summary": "ID"
        },
        "category": {
          "type": "string",
          "description": "The category of the appeal.",
          "x-ms-summary": "Category"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the appeal was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the appeal was last modified.",
          "x-ms-summary": "Date modified"
        },
        "description": {
          "type": "string",
          "description": "The display name of the appeal.",
          "x-ms-summary": "Description"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "description": "The end date of the appeal.",
          "x-ms-summary": "End date"
        },
        "goal": {
          "type": "object",
          "description": "The monetary goal associated with the appeal.",
          "x-ms-summary": "Goal",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the appeal active (meaning, the current date is after any start date and before any end date)?",
          "x-ms-summary": "Inactive?"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the appeal.",
          "x-ms-summary": "Lookup ID"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "description": "The start date of the appeal.",
          "x-ms-summary": "Start date"
        }
      }
    },
    "FundraisingApi.CampaignAttachmentAdd": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "required": [
        "parent_id",
        "type"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the campaign associated with the attachment.",
          "x-ms-summary": "Campaign ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z'). This field defaults to the current date and time if not supplied.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        }
      }
    },
    "FundraisingApi.CampaignAttachmentEdit": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        }
      }
    },
    "FundraisingApi.CampaignAttachmentRead": {
      "type": "object",
      "description": "Attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the attachment.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the campaign associated with the attachment.",
          "x-ms-summary": "Campaign ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        },
        "thumbnail_url": {
          "type": "string",
          "description": "The URL for a thumbnail. For physical attachments that are images only. Contains a time-bound signature that limits access to 60 minutes.",
          "x-ms-summary": "Thumbnail URL"
        },
        "content_type": {
          "type": "string",
          "description": "The content type. For physical attachments only.",
          "x-ms-summary": "Content type"
        },
        "file_size": {
          "type": "integer",
          "format": "int64",
          "description": "The file size in bytes. For physical attachments only.",
          "x-ms-summary": "File size"
        }
      }
    },
    "FundraisingApi.CampaignCustomFieldAdd": {
      "type": "object",
      "description": "While records provide many fields to track information, organizations often require additional details. To track this specialized information, use custom fields.",
      "required": [
        "parent_id",
        "category"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the campaign associated with the custom field.",
          "x-ms-summary": "Campaign ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category",
          "x-ms-dynamic-values": {
            "operationId": "ListCampaignCustomFieldCategories",
            "value-collection": "value",
            "value-path": "name",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListCampaignCustomFieldCategories",
            "itemsPath": "value",
            "itemValuePath": "name",
            "itemTitlePath": "name"
          }
        },
        "value": {
          "type": "object",
          "x-ms-dynamic-schema": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": "fundraising",
              "custom_field_type": "campaigns",
              "category": {
                "parameter": "category"
              }
            },
            "value-path": "items"
          },
          "x-ms-dynamic-properties": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": {
                "value": "fundraising"
              },
              "custom_field_type": {
                "value": "campaigns"
              },
              "category": {
                "parameterReference": "body/category"
              }
            },
            "itemValuePath": "items"
          }
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field (ex: '2005-09-18').",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        }
      }
    },
    "FundraisingApi.CampaignCustomFieldRead": {
      "type": "object",
      "description": "Custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the custom field.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the campaign associated with the custom field.",
          "x-ms-summary": "Campaign ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category"
        },
        "type": {
          "type": "string",
          "description": "The type of data that the custom field represents.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        },
        "value": {
          "type": "string",
          "description": "The value of the custom field.",
          "x-ms-summary": "Value"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field.",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "FundraisingApi.CampaignRead": {
      "type": "object",
      "description": "Campaign",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the campaign.",
          "x-ms-summary": "ID"
        },
        "category": {
          "type": "string",
          "description": "The category of the campaign.",
          "x-ms-summary": "Category"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the campaign was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the campaign was last modified.",
          "x-ms-summary": "Date modified"
        },
        "description": {
          "type": "string",
          "description": "The display name of the campaign.",
          "x-ms-summary": "Description"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "description": "The end date of the campaign.",
          "x-ms-summary": "End date"
        },
        "goal": {
          "type": "object",
          "description": "The monetary goal associated with the campaign.",
          "x-ms-summary": "Goal",
          "properties": {
            "value": {
              "format": "double",
              "description": "The monetary value.",
              "type": "number"
            }
          }
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the campaign inactive (meaning, the current date is after any start date and before any end date)?",
          "x-ms-summary": "Inactive?"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the campaign.",
          "x-ms-summary": "Lookup ID"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "description": "The start date of the campaign.",
          "x-ms-summary": "Start date"
        }
      }
    },
    "FundraisingApi.CreatedAppealAttachment": {
      "type": "object",
      "description": "Created appeal attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created appeal attachment.",
          "x-ms-summary": "ID"
        }
      }
    },
    "FundraisingApi.CreatedAppealCustomField": {
      "type": "object",
      "description": "Created appeal custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created appeal custom field.",
          "x-ms-summary": "ID"
        }
      }
    },
    "FundraisingApi.CreatedCampaignAttachment": {
      "type": "object",
      "description": "Created campaign attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created campaign attachment.",
          "x-ms-summary": "ID"
        }
      }
    },
    "FundraisingApi.CreatedCampaignCustomField": {
      "type": "object",
      "description": "Created campaign custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created campaign custom field.",
          "x-ms-summary": "ID"
        }
      }
    },
    "FundraisingApi.CreatedFundAttachment": {
      "type": "object",
      "description": "Created fund attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created fund attachment.",
          "x-ms-summary": "ID"
        }
      }
    },
    "FundraisingApi.CreatedFundCustomField": {
      "type": "object",
      "description": "Created fund custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created fund custom field.",
          "x-ms-summary": "ID"
        }
      }
    },
    "FundraisingApi.CustomFieldCategoryRead": {
      "type": "object",
      "description": "The system includes many different types of custom fields. Custom field categories store the metadata to appropriately match how you use a given custom field with an available type.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the custom field category.",
          "x-ms-summary": "Name"
        },
        "type": {
          "type": "string",
          "description": "The type of data that custom fields with this category represent.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        }
      }
    },
    "FundraisingApi.FundAttachmentAdd": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "required": [
        "parent_id",
        "type"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the fund associated with the attachment.",
          "x-ms-summary": "Fund ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z'). This field defaults to the current date and time if not supplied.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        }
      }
    },
    "FundraisingApi.FundAttachmentEdit": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        }
      }
    },
    "FundraisingApi.FundAttachmentRead": {
      "type": "object",
      "description": "Attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the attachment.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the fund associated with the attachment.",
          "x-ms-summary": "Fund ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        },
        "thumbnail_url": {
          "type": "string",
          "description": "The URL for a thumbnail. For physical attachments that are images only. Contains a time-bound signature that limits access to 60 minutes.",
          "x-ms-summary": "Thumbnail URL"
        },
        "content_type": {
          "type": "string",
          "description": "The content type. For physical attachments only.",
          "x-ms-summary": "Content type"
        },
        "file_size": {
          "type": "integer",
          "format": "int64",
          "description": "The file size in bytes. For physical attachments only.",
          "x-ms-summary": "File size"
        }
      }
    },
    "FundraisingApi.FundCustomFieldAdd": {
      "type": "object",
      "description": "While records provide many fields to track information, organizations often require additional details. To track this specialized information, use custom fields.",
      "required": [
        "parent_id",
        "category"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the fund associated with the custom field.",
          "x-ms-summary": "Fund ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category",
          "x-ms-dynamic-values": {
            "operationId": "ListFundCustomFieldCategories",
            "value-collection": "value",
            "value-path": "name",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListFundCustomFieldCategories",
            "itemsPath": "value",
            "itemValuePath": "name",
            "itemTitlePath": "name"
          }
        },
        "value": {
          "type": "object",
          "x-ms-dynamic-schema": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": "fundraising",
              "custom_field_type": "funds",
              "category": {
                "parameter": "category"
              }
            },
            "value-path": "items"
          },
          "x-ms-dynamic-properties": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": {
                "value": "fundraising"
              },
              "custom_field_type": {
                "value": "funds"
              },
              "category": {
                "parameterReference": "body/category"
              }
            },
            "itemValuePath": "items"
          }
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field (ex: '2005-09-18').",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        }
      }
    },
    "FundraisingApi.FundCustomFieldRead": {
      "type": "object",
      "description": "Custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the custom field.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the fund associated with the custom field.",
          "x-ms-summary": "Fund ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category"
        },
        "type": {
          "type": "string",
          "description": "The type of data that the custom field represents.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        },
        "value": {
          "type": "string",
          "description": "The value of the custom field.",
          "x-ms-summary": "Value"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field.",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "FundraisingApi.FundRead": {
      "type": "object",
      "description": "Fund",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the fund.",
          "x-ms-summary": "ID"
        },
        "category": {
          "type": "string",
          "description": "The category of the fund.",
          "x-ms-summary": "Category"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the fund was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the fund was last modified.",
          "x-ms-summary": "Date modified"
        },
        "description": {
          "type": "string",
          "description": "The display name of the fund.",
          "x-ms-summary": "Description"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "description": "The end date of the fund.",
          "x-ms-summary": "End date"
        },
        "goal": {
          "type": "object",
          "description": "The monetary goal associated with the fund.",
          "x-ms-summary": "Goal",
          "properties": {
            "value": {
              "format": "double",
              "description": "The monetary value.",
              "type": "number"
            }
          }
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the fund inactive (meaning, the current date is after any start date and before any end date)?",
          "x-ms-summary": "Inactive?"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the fund.",
          "x-ms-summary": "Lookup ID"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "description": "The start date of the fund.",
          "x-ms-summary": "Start date"
        },
        "type": {
          "type": "string",
          "description": "The type of the fund.",
          "x-ms-summary": "Type"
        }
      }
    },
    "FundraisingApi.PackageRead": {
      "type": "object",
      "description": "Package",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the package.",
          "x-ms-summary": "ID"
        },
        "appeal_id": {
          "type": "string",
          "description": "The system record ID of the appeal associated with this package.",
          "x-ms-summary": "Appeal ID"
        },
        "category": {
          "type": "string",
          "description": "The category of the package.",
          "x-ms-summary": "Category"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the package was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the package was last modified.",
          "x-ms-summary": "Date modified"
        },
        "default_gift_amount": {
          "type": "object",
          "description": "The default amount for gifts associated with this package.",
          "x-ms-summary": "Default gift amount",
          "properties": {
            "value": {
              "format": "double",
              "description": "The monetary value.",
              "type": "number"
            }
          }
        },
        "description": {
          "type": "string",
          "description": "The display name of the package.",
          "x-ms-summary": "Description"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "description": "The end date of the package.",
          "x-ms-summary": "End date"
        },
        "goal": {
          "type": "object",
          "description": "The monetary goal associated with the package.",
          "x-ms-summary": "Goal",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the package inactive (meaning, the current date is after any start date and before any end date)?",
          "x-ms-summary": "Inactive?"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the package.",
          "x-ms-summary": "Lookup ID"
        },
        "notes": {
          "type": "string",
          "description": "The notes on the package.",
          "x-ms-summary": "Notes"
        },
        "recipient_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of recipients of the package.",
          "x-ms-summary": "Recipient count"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "description": "The start date of the package.",
          "x-ms-summary": "Start date"
        }
      }
    },
    "GiftApi.AcknowledgementEdit": {
      "type": "object",
      "description": "Acknowledgement letters foster relationships with donors and show appreciation for their contributions. It is important to keep track of the acknowledgement status of gifts to ensure that each one gets a well-deserved thank you.",
      "properties": {
        "status": {
          "description": "The status of the acknowledgement.  When status is set to DoNotAcknowledge, letter and date should be null.  When status is set to NeedsAcknowledgement, date should be null.",
          "type": "string",
          "x-ms-summary": "Status",
          "enum": [
            "Acknowledged",
            "NeedsAcknowledgement",
            "DoNotAcknowledge"
          ]
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date associated with the acknowledgement (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "letter": {
          "type": "string",
          "description": "The letter associated with the acknowledgement.",
          "x-ms-summary": "Letter"
        }
      }
    },
    "GiftApi.AcknowledgementRead": {
      "type": "object",
      "description": "Acknowledgement",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date associated with the acknowledgement.",
          "x-ms-summary": "date"
        },
        "letter": {
          "type": "string",
          "description": "The letter associated with the acknowledgement.",
          "x-ms-summary": "letter"
        },
        "status": {
          "type": "string",
          "description": "The status of the acknowledgement. Available values are: ACKNOWLEDGED, NEEDSACKNOWLEDGEMENT, and DONOTACKNOWLEDGE.",
          "x-ms-summary": "status"
        }
      }
    },
    "GiftApi.ApiCollectionOfCustomFieldCategoryRead": {
      "type": "object",
      "description": "Custom field categories",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/GiftApi.CustomFieldCategoryRead"
          }
        }
      }
    },
    "GiftApi.ApiCollectionOfGiftAttachmentRead": {
      "type": "object",
      "description": "Attachments",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftAttachmentRead"
          }
        }
      }
    },
    "GiftApi.ApiCollectionOfGiftCustomFieldRead": {
      "type": "object",
      "description": "Custom fields",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftCustomFieldRead"
          }
        }
      }
    },
    "GiftApi.ApiCollectionOfGiftRead": {
      "type": "object",
      "description": "Gifts",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftRead"
          }
        }
      }
    },
    "GiftApi.CreatedGiftAttachment": {
      "type": "object",
      "description": "Created gift attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created gift attachment.",
          "x-ms-summary": "ID"
        }
      }
    },
    "GiftApi.CreatedGiftCustomField": {
      "type": "object",
      "description": "Created gift custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created gift custom field.",
          "x-ms-summary": "ID"
        }
      }
    },
    "GiftApi.CustomFieldCategoryRead": {
      "type": "object",
      "description": "Custom field category",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the custom field category.",
          "x-ms-summary": "Name"
        },
        "type": {
          "type": "string",
          "description": "The type of data that custom fields with this category represent.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        }
      }
    },
    "GiftApi.GiftAttachmentAdd": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "required": [
        "parent_id",
        "type"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the gift associated with the attachment.",
          "x-ms-summary": "Gift ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z'). This field defaults to the current date and time if not supplied.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        }
      }
    },
    "GiftApi.GiftAttachmentEdit": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        }
      }
    },
    "GiftApi.GiftAttachmentRead": {
      "type": "object",
      "description": "Attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the attachment.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the gift associated with the attachment.",
          "x-ms-summary": "Gift ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        },
        "thumbnail_url": {
          "type": "string",
          "description": "The URL for a thumbnail. For physical attachments that are images only. Contains a time-bound signature that limits access to 60 minutes.",
          "x-ms-summary": "Thumbnail URL"
        },
        "content_type": {
          "type": "string",
          "description": "The content type. For physical attachments only.",
          "x-ms-summary": "Content type"
        },
        "file_size": {
          "type": "integer",
          "format": "int64",
          "description": "The file size in bytes. For physical attachments only.",
          "x-ms-summary": "File size"
        }
      }
    },
    "GiftApi.GiftCustomFieldAdd": {
      "type": "object",
      "description": "While records provide many fields to track information, organizations often require additional details. To track this specialized information, use custom fields.",
      "required": [
        "parent_id",
        "category"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the gift associated with the custom field.",
          "x-ms-summary": "Gift ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category",
          "x-ms-dynamic-values": {
            "operationId": "ListGiftCustomFieldCategories",
            "value-collection": "value",
            "value-path": "name",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListGiftCustomFieldCategories",
            "itemsPath": "value",
            "itemValuePath": "name",
            "itemTitlePath": "name"
          }
        },
        "value": {
          "type": "object",
          "x-ms-dynamic-schema": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": "gift",
              "custom_field_type": "gifts",
              "category": {
                "parameter": "category"
              }
            },
            "value-path": "items"
          },
          "x-ms-dynamic-properties": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": {
                "value": "gift"
              },
              "custom_field_type": {
                "value": "gifts"
              },
              "category": {
                "parameterReference": "body/category"
              }
            },
            "itemValuePath": "items"
          }
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field (ex: '2005-09-18').",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        }
      }
    },
    "GiftApi.GiftCustomFieldRead": {
      "type": "object",
      "description": "Custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the custom field.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the gift associated with the custom field.",
          "x-ms-summary": "Gift ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category"
        },
        "type": {
          "type": "string",
          "description": "The type of data that the custom field represents.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        },
        "value": {
          "type": "string",
          "description": "The value of the custom field.",
          "x-ms-summary": "Value"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field.",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "GiftApi.GiftFundraiserRead": {
      "type": "object",
      "description": "Gift fundraiser",
      "properties": {
        "amount": {
          "type": "object",
          "description": "The amount credited to the fundraiser for the gift.",
          "x-ms-summary": "amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "constituent_id": {
          "type": "string",
          "description": "The constituent system record ID for the fundraiser associated with the gift.",
          "x-ms-summary": "fundraiser ID"
        }
      }
    },
    "GiftApi.GiftRead": {
      "type": "object",
      "description": "Gift",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the gift.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the gift.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The gift type.",
          "x-ms-summary": "Type"
        },
        "subtype": {
          "type": "string",
          "description": "The subtype of the gift.",
          "x-ms-summary": "Subtype"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The gift date.",
          "x-ms-summary": "Date"
        },
        "amount": {
          "type": "object",
          "description": "The monetary amount of the gift.",
          "x-ms-summary": "Amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "balance": {
          "type": "object",
          "description": "The balance remaining on the gift.",
          "x-ms-summary": "Balance",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "batch_number": {
          "type": "string",
          "description": "The batch number associated with this gift.",
          "x-ms-summary": "Batch number"
        },
        "gift_status": {
          "type": "string",
          "description": "The status of the gift.",
          "x-ms-summary": "Status"
        },
        "is_anonymous": {
          "type": "boolean",
          "description": "Is the gift anonymous?",
          "x-ms-summary": "Anonymous?"
        },
        "constituency": {
          "type": "string",
          "description": "The constituency of the gift.",
          "x-ms-summary": "Constituency"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the gift.",
          "x-ms-summary": "Lookup ID"
        },
        "origin": {
          "type": "string",
          "description": "The origin of the gift.",
          "x-ms-summary": "Origin"
        },
        "post_status": {
          "type": "string",
          "description": "The general ledger post status of the gift. Available values are Posted, NotPosted, and DoNotPost. When post_status is set to DoNotPost>, post_date should be null. When it is set to NotPosted, post_date is required but remains editable. When it is set to Posted, post_date is required and is no longer editable.",
          "x-ms-summary": "Post status"
        },
        "post_date": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Post date",
          "description": "The date that the gift was posted to general ledger."
        },
        "reference": {
          "type": "string",
          "description": "Notes to track special details about a gift such as the motivation behind it or a detailed description of a gift-in-kind.",
          "x-ms-summary": "Reference"
        },
        "recurring_gift_status_date": {
          "type": "object",
          "description": "The date that the gift status was last modified.",
          "x-ms-summary": "Recurring gift date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "recurring_gift_schedule": {
          "type": "object",
          "description": "The recurring gift schedule.",
          "x-ms-summary": "Recurring gift schedule",
          "properties": {
            "frequency": {
              "type": "string",
              "description": "Installment frequency of the recurring gift to view. Available values are WEEKLY, EVERY_TWO_WEEKS, EVERY_FOUR_WEEKS, MONTHLY, QUARTERLY, ANNUALLY.",
              "x-ms-summary": "frequency"
            },
            "start_date": {
              "type": "string",
              "format": "date-time",
              "description": "Date the recurring gift should start.",
              "x-ms-summary": "start"
            },
            "end_date": {
              "type": "string",
              "format": "date-time",
              "description": "Date the recurring gift should end.",
              "x-ms-summary": "end"
            }
          }
        },
        "gift_aid_amount": {
          "type": "object",
          "description": "This computed field calculates the total qualified amount of tax reclaimed from Gift Aid across all gift_splits for this gift. For the UK only.",
          "x-ms-summary": "Gift aid amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "gift_aid_qualification_status": {
          "type": "string",
          "description": "This computed field determines the Gift Aid qualification status based on tax declaration information and the database format. Available values are: Qualified, NotQualified, and PartlyQualified. For the UK only.",
          "x-ms-summary": "Gift aid qualification status"
        },
        "gift_splits": {
          "type": "array",
          "description": "The set of gift splits associated with the gift.",
          "x-ms-summary": "Gift splits",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftSplitRead"
          }
        },
        "fundraisers": {
          "type": "array",
          "description": "The set of fundraisers who receive credit for the gift.",
          "x-ms-summary": "Fundraisers",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftFundraiserRead"
          }
        },
        "soft_credits": {
          "type": "array",
          "description": "The set of soft credits associated with the gift.",
          "x-ms-summary": "Soft credits",
          "items": {
            "$ref": "#/definitions/GiftApi.SoftCreditRead"
          }
        },
        "receipts": {
          "type": "array",
          "description": "The set of receipts associated with the gift.",
          "x-ms-summary": "Receipts",
          "items": {
            "$ref": "#/definitions/GiftApi.ReceiptRead"
          }
        },
        "acknowledgements": {
          "type": "array",
          "description": "The set of acknowledgements associated with the gift.",
          "x-ms-summary": "Acknowledgements",
          "items": {
            "$ref": "#/definitions/GiftApi.AcknowledgementRead"
          }
        },
        "payments": {
          "type": "array",
          "description": "The payments on the gift.",
          "x-ms-summary": "Payments",
          "items": {
            "$ref": "#/definitions/GiftApi.PaymentRead"
          }
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the gift was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the gift was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "GiftApi.ReceiptEdit": {
      "type": "object",
      "description": "An object that represents the gift receipt to edit. To help donors track their giving for tax purposes, your organization should provide gift receipts.",
      "properties": {
        "status": {
          "type": "string",
          "description": "The receipt status of the gift.  When status is set to NeedsReceipt or DoNotReceipt, receipt date should be null.",
          "x-ms-summary": "Status",
          "enum": [
            "Receipted",
            "NeedsReceipt",
            "DoNotReceipt"
          ]
        },
        "amount": {
          "type": "object",
          "description": "The amount of the receipt.",
          "x-ms-summary": "Amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date on the receipt (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "description": "The number of the receipt.",
          "x-ms-summary": "Number"
        }
      }
    },
    "GiftApi.ReceiptRead": {
      "type": "object",
      "description": "Receipt",
      "properties": {
        "amount": {
          "type": "object",
          "description": "The amount of the receipt.",
          "x-ms-summary": "amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date on the receipt.",
          "x-ms-summary": "date"
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "description": "The number of the receipt.",
          "x-ms-summary": "number"
        },
        "status": {
          "type": "string",
          "description": "The status of the receipt. Available values are: RECEIPTED, NEEDSRECEIPT, and DONOTRECEIPT.",
          "x-ms-summary": "status"
        }
      }
    },
    "GiftApi.GiftSplitRead": {
      "type": "object",
      "description": "Gift split",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the gift split.",
          "x-ms-summary": "ID"
        },
        "amount": {
          "type": "object",
          "description": "The amount of the gift split.",
          "x-ms-summary": "amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "appeal_id": {
          "type": "string",
          "description": "The system record ID of the appeal associated with the gift split.",
          "x-ms-summary": "appeal ID"
        },
        "campaign_id": {
          "type": "string",
          "description": "The system record ID of the campaign associated with the gift split.",
          "x-ms-summary": "campaign ID"
        },
        "fund_id": {
          "type": "string",
          "description": "The system record ID of the fund associated with the gift split.",
          "x-ms-summary": "fund ID"
        },
        "gift_aid_amount": {
          "type": "object",
          "description": "The amount of tax reclaimed from gift aid for this gift split. For the UK only.",
          "x-ms-summary": "gift aid amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "gift_aid_qualification_status": {
          "type": "string",
          "description": "The gift aid qualification status of the gift split. Available values are: Qualified, and NotQualified. For the UK only.",
          "x-ms-summary": "gift aid qualification status"
        },
        "package_id": {
          "type": "string",
          "description": "The system record ID of the package associated with the gift split.",
          "x-ms-summary": "package ID"
        }
      }
    },
    "GiftApi.PaymentRead": {
      "type": "object",
      "description": "Payment",
      "properties": {
        "account_token": {
          "type": "string",
          "description": "The tokenized account information (e.g. credit card) from the external payment provider. Only applies to payment methods of \"CreditCard\" and \"DirectDebit\".",
          "x-ms-summary": "account token"
        },
        "bbps_configuration_id": {
          "type": "string",
          "description": "The BBPS configuration ID. Only applies to payment methods of \"CreditCard\" and \"DirectDebit\".",
          "x-ms-summary": "BBPS configuration ID"
        },
        "bbps_transaction_id": {
          "type": "string",
          "description": "The BBPS transaction ID. Only applies to payment methods of \"CreditCard\" and \"DirectDebit\".",
          "x-ms-summary": "BBPS transaction ID"
        },
        "check_date": {
          "type": "object",
          "description": "The check date. Only applies to payment method of \"PersonalCheck\".",
          "x-ms-summary": "check date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "check_number": {
          "type": "string",
          "description": "The check number. Only applies to payment method of \"PersonalCheck\".",
          "x-ms-summary": "check number"
        },
        "checkout_transaction_id": {
          "type": "string",
          "description": "The checkout transaction ID. Only applies to payment methods of \"CreditCard\" and \"DirectDebit\".",
          "x-ms-summary": "checkout transaction ID"
        },
        "payment_method": {
          "type": "string",
          "description": "The payment method. Available values are listed below.",
          "x-ms-summary": "payment method"
        },
        "reference": {
          "type": "string",
          "description": "The reference. Only applies to payment method of \"Other\".",
          "x-ms-summary": "reference"
        },
        "reference_date": {
          "type": "object",
          "description": "The reference date. Only applies to payment method of \"Other\".",
          "x-ms-summary": "reference date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        }
      }
    },
    "GiftApi.SoftCreditRead": {
      "type": "object",
      "description": "Soft credit",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the soft credit.",
          "x-ms-summary": "ID"
        },
        "amount": {
          "type": "object",
          "description": "The amount of the soft credit.",
          "x-ms-summary": "amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the soft credit.",
          "x-ms-summary": "constituent ID"
        },
        "gift_id": {
          "type": "string",
          "description": "The system record ID of the gift associated with the soft credit.",
          "x-ms-summary": "gift ID"
        }
      }
    },
    "ListApi.ApiCollectionOfList": {
      "type": "object",
      "description": "Lists",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of lists in the set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response.",
          "items": {
            "$ref": "#/definitions/ListApi.ApiList"
          }
        }
      }
    },
    "ListApi.ApiList": {
      "type": "object",
      "description": "List",
      "properties": {
        "id": {
          "description": "The system record ID for the list",
          "type": "string"
        },
        "name": {
          "description": "The name of the list",
          "type": "string"
        }
      }
    },
    "OpportunityApi.ApiCollectionOfCustomFieldCategoryRead": {
      "type": "object",
      "description": "Custom field categories",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/OpportunityApi.CustomFieldCategoryRead"
          }
        }
      }
    },
    "OpportunityApi.ApiCollectionOfOpportunityAttachmentRead": {
      "type": "object",
      "description": "Attachments",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/OpportunityApi.OpportunityAttachmentRead"
          }
        }
      }
    },
    "OpportunityApi.ApiCollectionOfOpportunityCustomFieldRead": {
      "type": "object",
      "description": "Custom fields",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/OpportunityApi.OpportunityCustomFieldRead"
          }
        }
      }
    },
    "OpportunityApi.ApiCollectionOfOpportunityRead": {
      "type": "object",
      "description": "Opportunities",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/OpportunityApi.OpportunityRead"
          }
        }
      }
    },
    "OpportunityApi.CreatedOpportunity": {
      "type": "object",
      "description": "Created opportunity",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created opportunity.",
          "x-ms-summary": "ID"
        }
      }
    },
    "OpportunityApi.CreatedOpportunityAttachment": {
      "type": "object",
      "description": "Created opportunity attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created opportunity attachment.",
          "x-ms-summary": "ID"
        }
      }
    },
    "OpportunityApi.CreatedOpportunityCustomField": {
      "type": "object",
      "description": "Created opportunity attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created opportunity attachment.",
          "x-ms-summary": "ID"
        }
      }
    },
    "OpportunityApi.CustomFieldCategoryRead": {
      "type": "object",
      "description": "Custom field category",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the custom field category.",
          "x-ms-summary": "Name"
        },
        "type": {
          "type": "string",
          "description": "The type of data that custom fields with this category represent.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        }
      }
    },
    "OpportunityApi.Fundraiser": {
      "type": "object",
      "description": "Fundraiser",
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the fundraiser.",
          "x-ms-summary": "Constituent ID"
        },
        "credit_amount": {
          "type": "object",
          "description": "The amount credited to the fundraiser for the opportunity.",
          "x-ms-summary": "Credit amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        }
      }
    },
    "OpportunityApi.OpportunityAdd": {
      "type": "object",
      "description": "Opportunities help you plan and track efforts to build relationships with prospects and secure major gifts. They can manage information about fundraising activities and the effectiveness of your efforts.",
      "required": [
        "constituent_id",
        "purpose",
        "name"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the opportunity.",
          "x-ms-summary": "Constituent ID"
        },
        "purpose": {
          "type": "string",
          "description": "The intended use for any money raised as a result of the opportunity.",
          "x-ms-summary": "Purpose",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "opportunity",
              "route": "opportunitypurposes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "opportunity"
              },
              "route": {
                "value": "opportunitypurposes"
              }
            }
          }
        },
        "name": {
          "type": "string",
          "maxLength": 255,
          "minLength": 0,
          "description": "The name that identifies the opportunity throughout the program, such as in lists or on constituent records. Character limit: 255.",
          "x-ms-summary": "Name"
        },
        "status": {
          "type": "string",
          "description": "The status that indicates where the opportunity is in the solicitation process.",
          "x-ms-summary": "Status",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "opportunity",
              "route": "opportunitystatuses"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "opportunity"
              },
              "route": {
                "value": "opportunitystatuses"
              }
            }
          }
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "description": "The goal date for the opportunity to result in a gift (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Deadline"
        },
        "ask_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the solicitation was made (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Ask date"
        },
        "ask_amount": {
          "type": "object",
          "description": "The monetary amount solicited from the prospect for the opportunity.",
          "x-ms-summary": "Ask amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "expected_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the prospect is expected to give in response to the opportunity (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Expected date"
        },
        "expected_amount": {
          "type": "object",
          "description": "The monetary amount that is realistically expected to result from the opportunity.",
          "x-ms-summary": "Expected amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "funded_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the prospect gave in response to the opportunity (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Funded date"
        },
        "funded_amount": {
          "type": "object",
          "description": "The monetary amount that the prospect gave in response to the opportunity.",
          "x-ms-summary": "Funded amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "campaign_id": {
          "type": "string",
          "description": "The system record ID of the campaign associated with the opportunity. The campaign sets the overall objectives for raising money.",
          "x-ms-summary": "Campaign"
        },
        "fund_id": {
          "type": "string",
          "description": "The system record ID of the fund associated with the opportunity. The fund designates the specific financial purpose of a gift and identifies the financial account for that gift.",
          "x-ms-summary": "Fund"
        },
        "fundraisers": {
          "type": "array",
          "description": "The set of system record IDs for the fundraisers assigned to the opportunity.",
          "x-ms-summary": "Fundraiser(s)",
          "items": {
            "$ref": "#/definitions/OpportunityApi.Fundraiser"
          }
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the opportunity inactive?",
          "x-ms-summary": "Inactive?"
        }
      }
    },
    "OpportunityApi.OpportunityAttachmentAdd": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "required": [
        "parent_id",
        "type"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the opportunity associated with the attachment.",
          "x-ms-summary": "Opportunity ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z'). This field defaults to the current date and time if not supplied.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        }
      }
    },
    "OpportunityApi.OpportunityAttachmentEdit": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        }
      }
    },
    "OpportunityApi.OpportunityAttachmentRead": {
      "type": "object",
      "description": "Attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the attachment.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the opportunity associated with the attachment.",
          "x-ms-summary": "Opportunity ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        },
        "thumbnail_url": {
          "type": "string",
          "description": "The URL for a thumbnail. For physical attachments that are images only. Contains a time-bound signature that limits access to 60 minutes.",
          "x-ms-summary": "Thumbnail URL"
        },
        "content_type": {
          "type": "string",
          "description": "The content type. For physical attachments only.",
          "x-ms-summary": "Content type"
        },
        "file_size": {
          "type": "integer",
          "format": "int64",
          "description": "The file size in bytes. For physical attachments only.",
          "x-ms-summary": "File size"
        }
      }
    },
    "OpportunityApi.OpportunityCustomFieldAdd": {
      "type": "object",
      "description": "While records provide many fields to track information, organizations often require additional details. To track this specialized information, use custom fields.",
      "required": [
        "parent_id",
        "category"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the opportunity associated with the custom field.",
          "x-ms-summary": "Opportunity ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category",
          "x-ms-dynamic-values": {
            "operationId": "ListOpportunityCustomFieldCategories",
            "value-collection": "value",
            "value-path": "name",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListOpportunityCustomFieldCategories",
            "itemsPath": "value",
            "itemValuePath": "name",
            "itemTitlePath": "name"
          }
        },
        "value": {
          "type": "object",
          "x-ms-dynamic-schema": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": "opportunity",
              "custom_field_type": "opportunities",
              "category": {
                "parameter": "category"
              }
            },
            "value-path": "items"
          },
          "x-ms-dynamic-properties": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": {
                "value": "opportunity"
              },
              "custom_field_type": {
                "value": "opportunities"
              },
              "category": {
                "parameterReference": "body/category"
              }
            },
            "itemValuePath": "items"
          }
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field (ex: '2005-09-18').",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        }
      }
    },
    "OpportunityApi.OpportunityCustomFieldRead": {
      "type": "object",
      "description": "Custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the custom field.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the opportunity associated with the custom field.",
          "x-ms-summary": "Opportunity ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category"
        },
        "type": {
          "type": "string",
          "description": "The type of data that the custom field represents.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        },
        "value": {
          "type": "string",
          "description": "The value of the custom field.",
          "x-ms-summary": "Value"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field.",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "OpportunityApi.OpportunityEdit": {
      "type": "object",
      "description": "Opportunities help you plan and track efforts to build relationships with prospects and secure major gifts. They can manage information about fundraising activities and the effectiveness of your efforts.",
      "properties": {
        "purpose": {
          "type": "string",
          "description": "The intended use for any money raised as a result of the opportunity.",
          "x-ms-summary": "Purpose",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "opportunity",
              "route": "opportunitypurposes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "opportunity"
              },
              "route": {
                "value": "opportunitypurposes"
              }
            }
          }
        },
        "name": {
          "type": "string",
          "maxLength": 255,
          "minLength": 0,
          "description": "The name that identifies the opportunity throughout the program, such as in lists or on constituent records. Character limit: 255.",
          "x-ms-summary": "Name"
        },
        "status": {
          "type": "string",
          "description": "The status that indicates where the opportunity is in the solicitation process.",
          "x-ms-summary": "Status",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "opportunity",
              "route": "opportunitystatuses"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "opportunity"
              },
              "route": {
                "value": "opportunitystatuses"
              }
            }
          }
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "description": "The goal date for the opportunity to result in a gift (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Deadline"
        },
        "ask_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the solicitation was made (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Ask date"
        },
        "ask_amount": {
          "type": "object",
          "description": "The monetary amount solicited from the prospect for the opportunity.",
          "x-ms-summary": "Ask amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "expected_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the prospect is expected to give in response to the opportunity (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Expected date"
        },
        "expected_amount": {
          "type": "object",
          "description": "The monetary amount that is realistically expected to result from the opportunity.",
          "x-ms-summary": "Expected amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "funded_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the prospect gave in response to the opportunity (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Funded date"
        },
        "funded_amount": {
          "type": "object",
          "description": "The monetary amount that the prospect gave in response to the opportunity.",
          "x-ms-summary": "Funded amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "campaign_id": {
          "type": "string",
          "description": "The system record ID of the campaign associated with the opportunity. The campaign sets the overall objectives for raising money.",
          "x-ms-summary": "Campaign"
        },
        "fund_id": {
          "type": "string",
          "description": "The system record ID of the fund associated with the opportunity. The fund designates the specific financial purpose of a gift and identifies the financial account for that gift.",
          "x-ms-summary": "Fund"
        },
        "fundraisers": {
          "type": "array",
          "description": "The set of system record IDs for the fundraisers assigned to the opportunity.",
          "x-ms-summary": "Fundraiser(s)",
          "items": {
            "$ref": "#/definitions/OpportunityApi.Fundraiser"
          }
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the opportunity inactive?",
          "x-ms-summary": "Inactive?"
        }
      }
    },
    "OpportunityApi.OpportunityRead": {
      "type": "object",
      "description": "Opportunity",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the opportunity.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the opportunity.",
          "x-ms-summary": "Constituent ID"
        },
        "purpose": {
          "type": "string",
          "description": "The intended use for any money raised as a result of the opportunity.",
          "x-ms-summary": "Purpose"
        },
        "name": {
          "type": "string",
          "description": "The name that identifies the opportunity throughout the program, such as in lists or on constituent records. Character limit: 255.",
          "x-ms-summary": "Name"
        },
        "status": {
          "type": "string",
          "description": "The status that indicates where the opportunity is in the solicitation process.",
          "x-ms-summary": "Status"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "description": "The goal date for the opportunity to result in a gift.",
          "x-ms-summary": "Deadline"
        },
        "ask_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the solicitation was made.",
          "x-ms-summary": "Ask date"
        },
        "ask_amount": {
          "type": "object",
          "description": "The monetary amount solicited from the prospect for the opportunity.",
          "x-ms-summary": "Ask amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "expected_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the prospect is expected to give in response to the opportunity.",
          "x-ms-summary": "Expected date"
        },
        "expected_amount": {
          "type": "object",
          "description": "The monetary amount that is realistically expected to result from the opportunity.",
          "x-ms-summary": "Expected amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "funded_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the prospect gave in response to the opportunity.",
          "x-ms-summary": "Funded date"
        },
        "funded_amount": {
          "type": "object",
          "description": "The monetary amount that the prospect gave in response to the opportunity.",
          "x-ms-summary": "Funded amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "campaign_id": {
          "type": "string",
          "description": "The system record ID of the campaign associated with the opportunity. The campaign sets the overall objectives for raising money.",
          "x-ms-summary": "Campaign"
        },
        "fund_id": {
          "type": "string",
          "description": "The system record ID of the fund associated with the opportunity. The fund designates the specific financial purpose of a gift and identifies the financial account for that gift.",
          "x-ms-summary": "Fund"
        },
        "fundraisers": {
          "type": "array",
          "description": "The set of system record IDs for the fundraisers assigned to the opportunity.",
          "x-ms-summary": "Fundraiser(s)",
          "items": {
            "$ref": "#/definitions/OpportunityApi.Fundraiser"
          }
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the opportunity inactive?",
          "x-ms-summary": "Inactive?"
        },
        "linked_gifts": {
          "description": "The system record IDs of the gifts related to the opportunity.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the opportunity was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the opportunity was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "PowerAutomateUIApi.DynamicValue": {
      "type": "object",
      "description": "A single dynamic value item",
      "properties": {
        "item": {
          "type": "string",
          "description": "The dynamic value item."
        }
      }
    },
    "PowerAutomateUIApi.DynamicValuesCollection": {
      "type": "object",
      "description": "A collection of objects for use with dynamic values.",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items in the list."
        },
        "value": {
          "type": "array",
          "description": "The set of objects for use with dynamic values.",
          "items": {
            "$ref": "#/definitions/PowerAutomateUIApi.DynamicValue"
          }
        }
      }
    },
    "PowerAutomateUIApi.DynamicProperties": {
      "type": "object",
      "description": "Defines some (but potentially not all) dynamic OpenApi metadata properties needed for a custom field.",
      "properties": {
        "items": {
          "type": "object",
          "description": "The OpenApi properties for the custom field value.",
          "properties": {
            "type": {
              "type": "string",
              "description": "The OpenApi type."
            },
            "format": {
              "type": "string",
              "description": "The OpenApi format."
            },
            "description": {
              "type": "string",
              "description": "The OpenApi description."
            }
          }
        }
      }
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "skyApiOAuth": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth2.sky.blackbaud.com/authorization",
      "tokenUrl": "https://oauth2.sky.blackbaud.com/token",
      "scopes": {}
    }
  },
  "security": [
    {
      "skyApiOAuth": []
    }
  ],
  "tags": []
}