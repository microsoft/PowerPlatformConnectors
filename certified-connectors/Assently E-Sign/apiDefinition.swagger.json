{
  "swagger": "2.0",
  "info": {
    "title": "Assently E-Sign",
    "description": "Assently E-Sign is a premium SaaS for e-signatures and smart contracts allowing full digitalization for your document workflows.",
    "version": "0.4",
    "x-ms-api-annotation": {
      "status": "Preview"
    },
    "termsOfService": "https://assently.com/about-assently/terms-conditions/",
    "contact": {
      "email": "support@assently.com",
      "name": "Assenstly support team",
      "url": "https://support.assently.com/hc/en-us/requests/new"
    }
  },
  "host": "app.assently.com",
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v2/getCase": {
      "get": {
        "summary": "Get a Case",
        "description": "Get a Case by its CaseId",
        "operationId": "GetCase",
        "x-ms-visibility": "important",
        "responses": {
          "200": {
            "description": "OK, Success",
            "schema": {
              "type": "object",
              "x-ms-dynamic-schema": {
                "parameters": {
                  "schemaType": "caseModel"
                },
                "operationId": "GetSchema",
                "value-path": "schema"
              },
              "x-ms-dynamic-properties": {
                "parameters": {
                  "schemaType": {
                    "value": "caseModel"
                  }
                },
                "operationId": "GetSchema",
                "itemValuePath": "schema"
              },
              "description": "Schema of the get response"
            }
          }
        },
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "required": true,
            "type": "string",
            "x-ms-summary": "Case Id",
            "description": "Case Id (Guid)"
          },
          {
            "$ref": "#/parameters/includeAllStatuses_in_query"
          },
          {
            "$ref": "#/parameters/includePendingApprovalStatus_in_query"
          }
        ]
      }
    },
    "/v2/findCases": {
      "get": {
        "summary": "Find and list Cases",
        "description": "Finds and Lists cases based upon the input parameters. More info at https://app.assently.com/api#Findandlistcases",
        "operationId": "FindCases",
        "x-ms-visibility": "important",
        "responses": {
          "200": {
            "description": "OK, Success",
            "schema": {
              "type": "array",
              "items": {
                "x-ms-dynamic-schema": {
                  "parameters": {
                    "schemaType": "caseModel"
                  },
                  "operationId": "GetSchema",
                  "value-path": "schema"
                },
                "x-ms-dynamic-properties": {
                  "parameters": {
                    "schemaType": {
                      "value": "caseModel"
                    }
                  },
                  "operationId": "GetSchema",
                  "itemValuePath": "schema"
                }
              },
              "description": "Schema of the get response"
            }
          }
        },
        "parameters": [
          {
            "name": "FindCasesModel",
            "in": "body",
            "required": true,
            "schema": {
              "x-ms-dynamic-schema": {
                "parameters": {
                  "schemaType": "findCasesModel"
                },
                "operationId": "GetSchema",
                "value-path": "schema"
              }
            }
          },
          {
            "$ref": "#/parameters/includeAllStatuses_in_query"
          },
          {
            "$ref": "#/parameters/includePendingApprovalStatus_in_query"
          }
        ]
      }
    },
    "/v2/findTemplates": {
      "get": {
        "summary": "Find and list templates",
        "description": "Finds and Lists templates based upon the input parameters. More info at https://app.assently.com/api#Findandlisttemplates",
        "operationId": "FindTemplates",
        "x-ms-visibility": "important",
        "responses": {
          "200": {
            "description": "OK, Success",
            "schema": {
              "type": "array",
              "items": {
                "x-ms-dynamic-schema": {
                  "parameters": {
                    "schemaType": "templateModel"
                  },
                  "operationId": "GetSchema",
                  "value-path": "schema"
                },
                "x-ms-dynamic-properties": {
                  "parameters": {
                    "schemaType": {
                      "value": "templateModel"
                    }
                  },
                  "operationId": "GetSchema",
                  "itemValuePath": "schema"
                }
              },
              "description": "Schema of the get response"
            }
          }
        },
        "parameters": [
          {
            "name": "FindTemplatesModel",
            "in": "body",
            "required": true,
            "schema": {
              "x-ms-dynamic-schema": {
                "parameters": {
                  "schemaType": "findTemplatesModel"
                },
                "operationId": "GetSchema",
                "value-path": "schema"
              }
            }
          }
        ]
      }
    },
    "/v2/createCase": {
      "post": {
        "summary": "Create a case",
        "description": "Create a new Case",
        "operationId": "CreateCase",
        "x-ms-visibility": "important",
        "responses": {
          "200": {
            "description": "OK, Success"
          }
        },
        "parameters": [
          {
            "name": "CaseModel",
            "in": "body",
            "required": true,
            "schema": {
              "x-ms-dynamic-schema": {
                "parameters": {
                  "schemaType": "caseModel"
                },
                "operationId": "GetSchema",
                "value-path": "schema"
              }
            }
          }
        ]
      }
    },
    "/v2/createCaseFromTemplate": {
      "post": {
        "summary": "Create Case from Template",
        "description": "Create Case from Template",
        "operationId": "CreateCaseFromTemplate",
        "x-ms-visibility": "important",
        "responses": {
          "200": {
            "description": "OK, Success"
          }
        },
        "parameters": [
          {
            "name": "CreateCaseFromTemplateModel",
            "in": "body",
            "required": true,
            "schema": {
              "x-ms-dynamic-schema": {
                "parameters": {
                  "schemaType": "createCaseFromTemplateModel"
                },
                "operationId": "GetSchema",
                "value-path": "schema"
              }
            }
          }
        ]
      }
    },
    "/v2/updateCase": {
      "post": {
        "summary": "Update a Case",
        "description": "Updates properties and collections of a case. It is recommended to use GetCase action before making an update. Collections: missing items will be removed, others updated or added. Documents collection: Only filename and formfields can be changed. To modify size, hash or data, the document must be removed first and a new document (with a new id) must be added.",
        "operationId": "UpdateCase",
        "x-ms-visibility": "important",
        "responses": {
          "200": {
            "description": "OK, Success"
          }
        },
        "parameters": [
          {
            "name": "CaseModel",
            "in": "body",
            "required": true,
            "schema": {
              "x-ms-dynamic-schema": {
                "parameters": {
                  "schemaType": "caseModel"
                },
                "operationId": "GetSchema",
                "value-path": "schema"
              }
            }
          }
        ]
      }
    },
    "/v2/updateCaseMetadata": {
      "post": {
        "summary": "Update Case Metadata",
        "description": "Allows updating metadata regardless of the case status. Existing metadata will be replaced with new metadata. Metadata cannot be complex objects.",
        "operationId": "UpdateCaseMetadata",
        "x-ms-visibility": "important",
        "responses": {
          "200": {
            "description": "OK, Success"
          }
        },
        "parameters": [
          {
            "name": "UpdateCaseMetadataModel",
            "in": "body",
            "required": true,
            "schema": {
              "x-ms-dynamic-schema": {
                "parameters": {
                  "schemaType": "updateCaseMetadataModel"
                },
                "operationId": "GetSchema",
                "value-path": "schema"
              }
            }
          }
        ]
      }
    },
    "/v2/sendCase": {
      "post": {
        "summary": "Send a Case",
        "description": "Changes the status of the case to Sent, making it available for signing. In order to send a case the parameters Parties, Documents and AllowedSignatureTypes must be specified on the case. If notifications are enabled, parties will be notified.",
        "operationId": "SendCase",
        "x-ms-visibility": "important",
        "responses": {
          "200": {
            "description": "OK, Success"
          }
        },
        "parameters": [
          {
            "name": "Id",
            "x-ms-summary": "Case Id",
            "description": "Id of the case to be sent",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "guid"
          }
        ]
      }
    },
    "/v2/requestApproval": {
      "post": {
        "summary": "Request Approval to send",
        "description": "Used when a case is set to require approval before sent. Sends a request to approver stakeholders to approve and send the case. Approvals are requested in the name of the API user.",
        "operationId": "RequestApproval",
        "x-ms-visibility": "important",
        "responses": {
          "200": {
            "description": "OK, Success"
          }
        },
        "parameters": [
          {
            "name": "Id",
            "x-ms-summary": "Case Id",
            "description": "Id of the case to request approval for",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "guid"
          }
        ]
      }
    },
    "/v2/remindCase": {
      "post": {
        "summary": "Send a reminder",
        "description": "Sends reminders to all parties that have not yet signed. If signing order is enforced, only the next party in turn will be reminded.",
        "operationId": "RemindCase",
        "x-ms-visibility": "important",
        "responses": {
          "200": {
            "description": "OK, Success"
          }
        },
        "parameters": [
          {
            "name": "Id",
            "x-ms-summary": "Case Id",
            "description": "Id of the case to be reminded",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "guid"
          }
        ]
      }
    },
    "/v2/deleteCase": {
      "post": {
        "summary": "Delete a Case",
        "description": "Case is deleted permanently. If the case is sent, it will be recalled prior to deletion. ",
        "operationId": "DeleteCase",
        "x-ms-visibility": "important",
        "responses": {
          "200": {
            "description": "OK, Success"
          }
        },
        "parameters": [
          {
            "name": "Id",
            "x-ms-summary": "Case Id",
            "description": "Id of the case to be deleted",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "guid"
          }
        ]
      }
    },
    "/v2/recallCase": {
      "post": {
        "summary": "Recall a case",
        "description": "If the case is sent, it will be recalled. Finished cases cannot be recalled.",
        "operationId": "RecallCase",
        "x-ms-visibility": "important",
        "responses": {
          "200": {
            "description": "OK, Success"
          }
        },
        "parameters": [
          {
            "name": "Id",
            "x-ms-summary": "Case Id",
            "description": "Id of the case to be recalled",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "guid"
          }
        ]
      }
    },
    "/v2/getCaseByTemporaryId": {
      "get": {
        "summary": "Get a case by temporary id",
        "description": "Gets a case by its temporaryId. A temporary id is a 4+ digit number that is only valid for 24 hours.",
        "operationId": "GetCaseByTemporaryId",
        "x-ms-visibility": "important",
        "responses": {
          "200": {
            "description": "OK, Success"
          }
        },
        "parameters": [
          {
            "name": "Id",
            "x-ms-summary": "Case temporary Id",
            "description": "Temporary Id of the case",
            "in": "query",
            "required": true,
            "type": "integer"
          }
        ]
      }
    },
    "/v2/getdocumentdata": {
      "get": {
        "summary": "Get file content of a Case Document",
        "description": "Gets file of a case by caseId and documentId",
        "operationId": "GetFileOfCase",
        "x-ms-visibility": "important",
        "responses": {
          "200": {
            "description": "OK, Success",
            "schema": {
              "type": "object",
              "description": "The content of the file.",
              "x-ms-summary": "File Content",
              "properties": {
                "content": {
                  "type": "string",
                  "description": "content",
                  "title": "The file content",
                  "format": "byte"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "caseid",
            "x-ms-summary": "Case Id",
            "description": "Id of the case contatining the document",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "documentid",
            "x-ms-summary": "Document Id",
            "description": "Id of the document conatining the file",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/hook/v1/": {
      "x-ms-notification-content": {
        "schema": {
          "type": "object",
          "x-ms-dynamic-schema": {
            "parameters": {
              "schemaType": {
                "parameter": "EventPath"
              }
            },
            "operationId": "GetSchema",
            "value-path": "schema"
          },
          "x-ms-dynamic-properties": {
            "parameters": {
              "schemaType": {
                "parameterReference": "EventPath"
              }
            },
            "operationId": "GetSchema",
            "itemValuePath": "schema"
          }
        },
        "description": "Schema of the webhook payload from Assently"
      },
      "post": {
        "summary": "Case trigger event",
        "description": "Trigger when:",
        "operationId": "CaseEventTrigger",
        "x-ms-visibility": "important",
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "x-ms-trigger": "single",
        "parameters": [
          {
            "$ref": "#/parameters/eventPath_in_query"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "callbackUrl": {
                  "type": "string",
                  "description": "callbackUrl",
                  "x-ms-notification-url": true,
                  "x-ms-visibility": "internal",
                  "title": ""
                }
              },
              "required": [
                "callbackUrl"
              ]
            }
          }
        ]
      }
    },
    "/hook/v1/{id}": {
      "delete": {
        "summary": "Deletes a webhook",
        "x-ms-visibility": "internal",
        "description": "Deletes a webhook",
        "operationId": "DeleteTrigger",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "x-ms-summary": "HookId",
            "description": "ID of the Hook being deleted",
            "required": true,
            "x-ms-url-encoding": "single",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          }
        }
      }
    },
    "/flow/schema/": {
      "get": {
        "summary": "(internal) Gets a schema",
        "operationId": "GetSchema",
        "description": "Returns the schema for the specified object",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Note we do not have to specify the response!",
            "schema": {
              "type": "object",
              "x-ms-summary": "Requested schema",
              "properties": {
                "schema": {
                  "type": "object",
                  "description": "Schema of the requested schemaType",
                  "x-ms-visibility": "internal"
                }
              }
            }
          },
          "403": {
            "schema": {},
            "description": "Unauthorized"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/schemaType_in_query"
          }
        ]
      }
    }
  },
  "definitions": {},
  "parameters": {
    "eventPath_in_query": {
      "x-ms-summary": "Trigger when:",
      "x-ms-dynamic-values": {
        "operationId": "GetSchema",
        "parameters": {
          "schemaType": "triggers"
        },
        "value-path": "EventPath",
        "value-title": "EventTitle"
      },
      "required": true,
      "in": "query",
      "name": "EventPath",
      "description": "Choose an event",
      "x-ms-visibility": "important",
      "type": "string"
    },
    "schemaType_in_query": {
      "x-ms-summary": "Type of the schema",
      "required": true,
      "in": "query",
      "name": "schemaType",
      "description": "Type of schema",
      "type": "string"
    },
    "includeAllStatuses_in_query": {
      "required": true,
      "in": "query",
      "name": "includeAllStatuses",
      "description": "IncludeAllStatuses",
      "type": "boolean",
      "x-ms-visibility": "internal",
      "default": true
    },
    "includePendingApprovalStatus_in_query": {
      "required": true,
      "in": "query",
      "name": "IncludePendingApprovalStatus",
      "description": "IncludePendingApprovalStatus",
      "type": "boolean",
      "x-ms-visibility": "internal",
      "default": true
    }
  },
  "responses": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": [],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://assently.com/e-sign/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://assently.com/privacy-policy/"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Productivity"
    }
  ]
}
