{
  "swagger": "2.0",
  "info": {
    "title": "PPM Express",
    "version": "v1.0",
    "description": "PPM Express is an Online Project Portfolio Management Software. Connector to PPM Express allows you to retrieve information about the entities (Project, Idea, Task, Key Date, Resource) from your PPM Express tenant, as well as to create new or update existing ones.",
    "contact": {
      "name": "PPM Express Support",
      "url": "https://ppm.express/contact-us/",
      "email": "support@ppm.express"
    }
  },
  "host": "api-us.ppm.express",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "x-ms-capabilities": {
    "testConnection": {
      "operationId": "MeGet"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://ppm.express"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://ppm.express/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Business Management;Business Intelligence"
    }
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/Challenges/{id}": {
      "get": {
        "tags": [
          "Challenges"
        ],
        "summary": "Get a Challenge",
        "description": "Gets an existing Challenge by Id",
        "operationId": "ChallengesGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/challenge_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing challenge returned",
            "schema": {
              "$ref": "#/definitions/ChallengeResponseResponse"
            }
          },
          "404": {
            "description": "Challenge not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Challenges"
        ],
        "summary": "Update a Challenge",
        "description": "Updates an existing Challenge",
        "operationId": "ChallengesUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/challenge_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateChallengeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated challenge returned",
            "schema": {
              "$ref": "#/definitions/ChallengeResponseResponse"
            }
          },
          "400": {
            "description": "Challenge is null",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "challenge not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Challenges": {
      "get": {
        "tags": [
          "Challenges"
        ],
        "summary": "Get Challenges List",
        "description": "Gets all Challenges",
        "operationId": "ChallengesGetAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "Existing challenges returned",
            "schema": {
              "$ref": "#/definitions/ChallengeResponseListResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Challenges"
        ],
        "summary": "Create a Challenge",
        "description": "Creates new Challenge",
        "operationId": "ChallengesCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateChallengeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "New challenge returned",
            "schema": {
              "$ref": "#/definitions/ChallengeResponseResponse"
            }
          },
          "400": {
            "description": "Challenge not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Fields/{entity}": {
      "get": {
        "tags": [
          "Fields"
        ],
        "summary": "Get fields",
        "description": "Gets fields information for specified entity(e.g. Project, Idea, Resource etc)",
        "operationId": "FieldsGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entity",
            "required": true,
            "type": "string",
            "x-ms-summary": "Entity",
            "description": "Entity name",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important",
            "enum": [
              "Project",
              "Program",
              "Portfolio",
              "Resource",
              "KeyDate",
              "Challenge",
              "Idea",
              "Task",
              "Roadmap",
              "Issue"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Entity fields returned",
            "schema": {
              "$ref": "#/definitions/FieldResponseList"
            }
          },
          "400": {
            "description": "Entity not supported",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Ideas/{id}": {
      "get": {
        "tags": [
          "Ideas"
        ],
        "summary": "Get an Idea",
        "description": "Gets an existing Idea by Id",
        "operationId": "IdeasGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idea_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing idea returned",
            "schema": {
              "$ref": "#/definitions/IdeaResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "idea-uuid",
                  "attributes": {
                    "Name": "Sample Idea",
                    "Challenge": {
                      "id": "challenge-uuid",
                      "name": "Challenge 1"
                    },
                    "Custom Field": 123
                  },
                  "votes": 10
                }
              }
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Idea not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Ideas"
        ],
        "summary": "Update an Idea",
        "description": "Updates an existing Idea",
        "operationId": "IdeasUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idea_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "x-ms-summary": "Idea Body",
            "x-ms-visibility": "important",
            "schema": {
              "$ref": "#/definitions/UpdateIdeaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated idea returned",
            "schema": {
              "$ref": "#/definitions/IdeaResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "idea-uuid",
                  "attributes": {
                    "Name": "Sample Idea",
                    "Challenge": {
                      "id": "challenge-uuid",
                      "name": "Challenge 1"
                    },
                    "Custom Field": 123
                  },
                  "votes": 10
                }
              }
            }
          },
          "400": {
            "description": "Idea not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Idea not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Ideas": {
      "get": {
        "tags": [
          "Ideas"
        ],
        "summary": "Get Ideas List",
        "description": "Gets All Ideas or for the specified challenge",
        "operationId": "IdeasGetAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "challengeId",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Challenge Id",
            "description": "Specify the challenge id",
            "x-ms-dynamic-values": {
              "operationId": "ChallengesGetAll",
              "value-path": "id",
              "value-title": "attributes/Name",
              "value-collection": "data"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Existing ideas returned",
            "schema": {
              "$ref": "#/definitions/IdeaResponseListResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "idea-uuid-1",
                    "attributes": {
                      "Name": "Sample Idea1",
                      "Challenge": {
                        "id": "challenge-uuid-1",
                        "name": "Challenge 1"
                      },
                      "Custom Field1": 123
                    },
                    "votes": 1
                  },
                  {
                    "id": "idea-uuid-2",
                    "attributes": {
                      "Name": "Sample Idea2",
                      "Challenge": {
                        "id": "challenge-uuid-2",
                        "name": "Challenge 2"
                      },
                      "Custom Field1": 345,
                      "Custom Field2": "sample value"
                    },
                    "votes": 0
                  }
                ]
              }
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Ideas"
        ],
        "summary": "Create an Idea",
        "operationId": "IdeasCreate",
        "description": "Creates a new Idea for the specified challenge",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateIdeaRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "New idea returned",
            "schema": {
              "$ref": "#/definitions/IdeaResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "idea-uuid",
                  "attributes": {
                    "Name": "Sample Idea",
                    "Challenge": {
                      "id": "challenge-uuid",
                      "name": "Challenge 1"
                    },
                    "Custom Field": 123
                  },
                  "votes": 10
                }
              }
            }
          },
          "400": {
            "description": "Idea not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Ideas/{id}/stage": {
      "post": {
        "tags": [
          "Ideas"
        ],
        "summary": "Update an Idea Stage",
        "operationId": "IdeasChangeStage",
        "description": "Updates an Idea Stage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idea_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ChangeIdeaStageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated idea returned",
            "schema": {
              "$ref": "#/definitions/IdeaResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "idea-uuid",
                  "attributes": {
                    "Name": "Sample Idea",
                    "Challenge": {
                      "id": "challenge-uuid",
                      "name": "Challenge 1"
                    },
                    "Custom Field": 123
                  },
                  "votes": 10
                }
              }
            }
          },
          "400": {
            "description": "Idea not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Idea not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Me": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get current user",
        "description": "Gets current user and token information",
        "operationId": "MeGet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request Body (Leave empty)",
            "x-ms-visibility": "internal",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current user data returned",
            "schema": {
              "$ref": "#/definitions/MeResponseResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Projects/{id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a Project",
        "description": "Gets a Project Info by Id",
        "operationId": "ProjectsGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing project returned",
            "schema": {
              "$ref": "#/definitions/ProjectResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "project-uuid",
                  "attributes": {
                    "Name": "Sample Project",
                    "Manager": [
                      {
                        "id": "manager-uuid",
                        "fullName": "Person 1",
                        "imageId": null
                      }
                    ],
                    "Program": [
                      {
                        "id": "program-uuid",
                        "name": "Program 1"
                      }
                    ],
                    "Portfolio": [
                      {
                        "id": "portfolio-uuid",
                        "name": "Portfolio 1"
                      }
                    ],
                    "Custom Field": 123
                  }
                }
              }
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Project not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Projects"
        ],
        "summary": "Update a Project",
        "description": "Updates the specified Project fields",
        "operationId": "ProjectsUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateProjectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated project returned",
            "schema": {
              "$ref": "#/definitions/ProjectResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "project-uuid",
                  "attributes": {
                    "Name": "Sample Project",
                    "Manager": [
                      {
                        "id": "manager-uuid",
                        "fullName": "Person 1",
                        "imageId": null
                      }
                    ],
                    "Program": [
                      {
                        "id": "program-uuid",
                        "name": "Program 1"
                      }
                    ],
                    "Portfolio": [
                      {
                        "id": "portfolio-uuid",
                        "name": "Portfolio 1"
                      }
                    ],
                    "Custom Field": 123
                  }
                }
              }
            }
          },
          "400": {
            "description": "Project not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Project not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Projects List",
        "operationId": "ProjectsGetAll",
        "description": "Gets list of all projects",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request Body (Leave empty)",
            "x-ms-visibility": "internal",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Existing projects returned",
            "schema": {
              "$ref": "#/definitions/ProjectResponseListResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "project-uuid-1",
                    "attributes": {
                      "Name": "Sample Project1",
                      "Manager": [
                        {
                          "id": "manager-uuid",
                          "fullName": "Person 1",
                          "imageId": null
                        }
                      ],
                      "Program": [
                        {
                          "id": "program-uuid",
                          "name": "Program 1"
                        }
                      ],
                      "Portfolio": [
                        {
                          "id": "portfolio-uuid",
                          "name": "Portfolio 1"
                        }
                      ],
                      "Custom Field1": 123
                    }
                  },
                  {
                    "id": "project-uuid-2",
                    "attributes": {
                      "Name": "Sample Project2",
                      "Custom Field1": 345,
                      "Custom Field2": "sample value"
                    }
                  }
                ]
              }
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a Project",
        "description": "Creates a new Project",
        "operationId": "ProjectsCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateProjectRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "New project returned",
            "schema": {
              "$ref": "#/definitions/ProjectResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "project-uuid",
                  "attributes": {
                    "Name": "Sample Project",
                    "Manager": [
                      {
                        "id": "manager-uuid",
                        "fullName": "Person 1",
                        "imageId": null
                      }
                    ],
                    "Program": [
                      {
                        "id": "program-uuid",
                        "name": "Program 1"
                      }
                    ],
                    "Portfolio": [
                      {
                        "id": "portfolio-uuid",
                        "name": "Portfolio 1"
                      }
                    ],
                    "Custom Field": 123
                  }
                }
              }
            }
          },
          "400": {
            "description": "Project not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/projects/{id}/keydates/{keyDateId}": {
      "get": {
        "tags": [
          "ProjectsKeyDates"
        ],
        "summary": "Get a Key Date",
        "description": "Gets a Key Date Info by Id",
        "operationId": "ProjectsKeyDatesGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          },
          {
            "$ref": "#/parameters/keydate_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing key date returned",
            "schema": {
              "$ref": "#/definitions/KeyDateResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "keydate-uuid",
                  "attributes": {
                    "Name": "Sample Key Date",
                    "AssignedTo": [
                      {
                        "id": "resource-uuid-1",
                        "fullName": "Person 1",
                        "imageId": null
                      },
                      {
                        "id": "resource-uuid-2",
                        "fullName": "Person 2",
                        "imageId": null
                      }
                    ],
                    "Custom Field1": 345
                  },
                  "sourceType": "Ppmx"
                }
              }
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "key date not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ProjectsKeyDates"
        ],
        "summary": "Update a Key Date",
        "description": "Updates a Key Date",
        "operationId": "ProjectsKeyDatesUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          },
          {
            "$ref": "#/parameters/keydate_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateKeyDateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated key date returned",
            "schema": {
              "$ref": "#/definitions/KeyDateResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "keydate-uuid",
                  "attributes": {
                    "Name": "Sample Key Date",
                    "AssignedTo": [
                      {
                        "id": "resource-uuid-1",
                        "fullName": "Person 1",
                        "imageId": null
                      },
                      {
                        "id": "resource-uuid-2",
                        "fullName": "Person 2",
                        "imageId": null
                      }
                    ],
                    "Custom Field1": 345
                  },
                  "sourceType": "Ppmx"
                }
              }
            }
          },
          "400": {
            "description": "Key date not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Key date not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/projects/{id}/keydates": {
      "get": {
        "tags": [
          "ProjectsKeyDates"
        ],
        "summary": "Get Key Dates List",
        "description": "Gets List of all Key Dates for the specified project",
        "operationId": "ProjectsKeyDatesGetAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing key dates returned",
            "schema": {
              "$ref": "#/definitions/KeyDateResponseListResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "keydate-uuid-1",
                    "attributes": {
                      "Name": "Sample Key Date",
                      "AssignedTo": [
                        {
                          "id": "resource-uuid-1",
                          "fullName": "Person 1",
                          "imageId": null
                        },
                        {
                          "id": "resource-uuid-2",
                          "fullName": "Person 2",
                          "imageId": null
                        }
                      ],
                      "Custom Field1": 345
                    },
                    "sourceType": "Ppmx"
                  },
                  {
                    "id": "keydate-uuid-2",
                    "attributes": {
                      "Name": "Sample Key Date",
                      "AssignedTo": [],
                      "Custom Field1": 345
                    },
                    "sourceType": "VSTS"
                  }
                ]
              }
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ProjectsKeyDates"
        ],
        "summary": "Create a Key Date",
        "description": "Creates a new Key Date",
        "operationId": "ProjectsKeyDatesCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateKeyDateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "New key date returned",
            "schema": {
              "$ref": "#/definitions/KeyDateResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "keydate-uuid",
                  "attributes": {
                    "Name": "Sample Key Date",
                    "AssignedTo": [
                      {
                        "id": "resource-uuid-1",
                        "fullName": "Person 1",
                        "imageId": null
                      },
                      {
                        "id": "resource-uuid-2",
                        "fullName": "Person 2",
                        "imageId": null
                      }
                    ],
                    "Custom Field1": 345
                  },
                  "sourceType": "Ppmx"
                }
              }
            }
          },
          "400": {
            "description": "Key date not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/projects/{id}/tasks/{taskId}": {
      "get": {
        "tags": [
          "ProjectsTasks"
        ],
        "summary": "Get a Task",
        "description": "Gets a Task by Id and by Project",
        "operationId": "ProjectsTasksGetTask",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          },
          {
            "$ref": "#/parameters/task_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing key date returned",
            "schema": {
              "$ref": "#/definitions/TaskResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "task-uuid",
                  "attributes": {
                    "Name": "Sample Task",
                    "AssignedTo": [
                      {
                        "id": "resource-uuid",
                        "fullName": "Person 1",
                        "imageId": null
                      }
                    ],
                    "Custom Field1": 345
                  },
                  "sourceType": "Ppmx"
                }
              }
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Key date not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ProjectsTasks"
        ],
        "summary": "Update a Task",
        "description": "Updates a Task",
        "operationId": "ProjectsTasksUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          },
          {
            "$ref": "#/parameters/task_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated task returned",
            "schema": {
              "$ref": "#/definitions/TaskResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "task-uuid",
                  "attributes": {
                    "Name": "Sample Task",
                    "AssignedTo": [
                      {
                        "id": "resource-uuid",
                        "fullName": "Person 1",
                        "imageId": null
                      }
                    ],
                    "Custom Field1": 345
                  },
                  "sourceType": "Ppmx"
                }
              }
            }
          },
          "400": {
            "description": "Task not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Task not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/projects/{id}/tasks": {
      "get": {
        "tags": [
          "ProjectsTasks"
        ],
        "summary": "Get Tasks List",
        "description": "Gets List of all Tasks for the specified Project",
        "operationId": "ProjectsTasksGetAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing tasks returned",
            "schema": {
              "$ref": "#/definitions/TaskResponseListTask"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "task-uuid-1",
                    "attributes": {
                      "Name": "Sample Task",
                      "AssignedTo": [
                        {
                          "id": "resource-uuid-1",
                          "fullName": "Person 1",
                          "imageId": null
                        }
                      ],
                      "Custom Field1": 345
                    },
                    "sourceType": "Ppmx"
                  },
                  {
                    "id": "task-uuid-2",
                    "attributes": {
                      "Name": "Sample Task2",
                      "AssignedTo": [
                        {
                          "id": "resource-uuid-2",
                          "fullName": "Person 2",
                          "imageId": null
                        }
                      ],
                      "Custom Field1": 346
                    },
                    "sourceType": "Ppmx"
                  }
                ]
              }
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ProjectsTasks"
        ],
        "summary": "Create a Task",
        "description": "Creates a Task for the specified Project",
        "operationId": "ProjectsTasksCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateTaskRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "New task returned",
            "schema": {
              "$ref": "#/definitions/TaskResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "task-uuid",
                  "attributes": {
                    "Name": "Sample Task2",
                    "AssignedTo": [
                      {
                        "id": "resource-uuid",
                        "fullName": "Person 2",
                        "imageId": null
                      }
                    ],
                    "Custom Field1": 346
                  },
                  "sourceType": "Ppmx"
                }
              }
            }
          },
          "400": {
            "description": "Task not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Resources/{id}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get a Resource",
        "description": "Gets a Resource by Id",
        "operationId": "ResourcesGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resource_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceResponseResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Resources"
        ],
        "summary": "Update a Resource",
        "description": "Updates a Resource",
        "operationId": "ResourcesUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resource_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceResponseResponse"
            }
          },
          "400": {
            "description": "Resource not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Resources": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get Resources List",
        "description": "Gets List of all Resources",
        "operationId": "ResourcesGetAll",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request Body (Leave empty)",
            "x-ms-visibility": "internal",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Existing resources returned",
            "schema": {
              "$ref": "#/definitions/ResourceResponseListResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Create a Resource",
        "description": "Creates a Resource",
        "operationId": "ResourcesCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateResourceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "New resource returned",
            "schema": {
              "$ref": "#/definitions/ResourceResponseResponse"
            }
          },
          "400": {
            "description": "Resource not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Operation not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Webhooks/{id}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a Webhook",
        "description": "Gets a Webhook",
        "operationId": "WebhooksGet",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Existing Webhook Id",
            "x-ms-url-encoding": "single",
            "x-ms-summary": "Webhook Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns existing item",
            "schema": {
              "$ref": "#/definitions/WebhookResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "webhook-uuid",
                  "eventTypes": [
                    "Project:Created",
                    "Project:Updated"
                  ],
                  "headers": [
                    {
                      "name": "Authorization",
                      "value": "Bearer token_value"
                    },
                    {
                      "name": "custom_header",
                      "value": "header_value"
                    }
                  ],
                  "httpVerb": "POST",
                  "url": "https://example.com"
                }
              }
            }
          },
          "401": {
            "description": "If not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "If the item is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a Webhook",
        "x-ms-visibility": "internal",
        "description": "Deletes a Webhook",
        "operationId": "WebhooksDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Webhook Id",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {          
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "Returns deletion result"
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Webhooks": {
      "x-ms-notification-content": {
        "schema": {
          "type": "object",
          "properties": {
            "WebhookId": {
              "type": "string"
            },
            "MessageId": {
              "type": "string"
            },
            "Data": {
              "type": "object"
            }
          }
        },
        "description": "Request From Webhook"
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "New webhook returned",
            "schema": {
              "$ref": "#/definitions/WebhookResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "webhook-uuid",
                  "eventTypes": [
                    "Project:Created",
                    "Project:Updated"
                  ],
                  "headers": [
                    {
                      "name": "Authorization",
                      "value": "Bearer token_value"
                    },
                    {
                      "name": "custom_header",
                      "value": "header_value"
                    }
                  ],
                  "httpVerb": "POST",
                  "url": "https://example.com"
                }
              }
            }
          },
          "400": {
            "description": "Webhook not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "User not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Webhook Trigger",
        "description": "When an operation is performed on an entity in PPM Express",
        "operationId": "WebhookTrigger",
        "x-ms-trigger": "single",
        "x-ms-trigger-hint": "To see it work, perform any specified action in PPM Express",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "eventTypes": {
                  "x-ms-summary": "Event Types",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "Task:Created",
                      "Task:Updated",
                      "Task:Deleted",
                      "Idea:Created",
                      "Idea:Updated",
                      "Idea:Deleted",
                      "Project:Created",
                      "Project:Updated",
                      "Project:Deleted",
                      "KeyDate:Created",
                      "KeyDate:Updated",
                      "KeyDate:Deleted"
                    ],
                    "x-ms-visibility": "important"
                  },
                  "description": "Select the events to listen to"
                },
                "headers": {
                  "x-ms-summary": "Headers",
                  "x-ms-visibility": "advanced",
                  "type": "array",
                  "items": {
                    "description": "Custom headers",
                    "title": "Headers",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Custom header name",
                        "title": "Name"
                      },
                      "value": {
                        "type": "string",
                        "description": "Custom header value",
                        "title": "Value"
                      }
                    }
                  },
                  "description": "Array with custom headers",
                  "default": []
                },
                "httpVerb": {
                  "type": "string",
                  "description": "HTTP verb for webhook request",
                  "title": "HTTP Verb",
                  "default": "POST",
                  "x-ms-visibility": "internal"
                },
                "url": {
                  "type": "string",
                  "description": "Webhook target URL",
                  "title": "Webhook target URL",
                  "x-ms-visibility": "internal",
                  "x-ms-notification-url": true
                }
              },
              "required": [
                "url",
                "httpVerb",
                "eventTypes",
                "headers"
              ]
            }
          }
        ]
      }
    }
  },
  "definitions": {    
    "ChallengeAttributes": {
      "description": "Challenge fields (e.g. {\"Name\": \"My Name\", \"Description\": \"TBD\"})",
      "x-ms-summary": "Attributes",
      "type": "object",
      "properties": {},
      "additionalProperties": {}
    },   
    "ChallengeResponse": {
      "description": "Challenge details",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "Challenge Id",
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/ChallengeAttributes"
        }
      }
    },
    "ChallengeResponseListResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChallengeResponse"
          }
        }
      }
    },
    "ChallengeResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ChallengeResponse"
        }
      }
    },
    "CreateChallengeRequest": {
      "description": "Challenge Creation model",
      "type": "object",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/ChallengeAttributes"
        }
      }
    },
    "ChangeIdeaStageRequest": {
      "description": "Change Idea Stage model",
      "type": "object",
      "properties": {
        "stage": {
          "$ref": "#/definitions/IdeaStage"
        }
      }
    },
    "CreateIdeaRequest": {
      "description": "Idea Creation model",
      "type": "object",
      "properties": {
        "challengeId": {
          "format": "uuid",
          "x-ms-summary": "Challenge Id",
          "description": "The challenge id which idea is belonging to",
          "type": "string",
          "x-ms-dynamic-values": {
            "operationId": "ChallengesGetAll",
            "value-path": "id",
            "value-title": "attributes/Name",
            "value-collection": "data"
          }
        },
        "attributes": {
          "$ref": "#/definitions/IdeaAttributes"
        }
      }
    },
    "CreateKeyDateRequest": {
      "description": "Key Date Creation model",
      "type": "object",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/KeyDateAttributes"
        }
      }
    },
    "CreateProjectRequest": {
      "description": "Project Creation model",
      "type": "object",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/ProjectAttributes"
        }
      }
    },
    "CreateResourceRequest": {
      "description": "Resource Creation model",
      "type": "object",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/ResourceAttributes"          
        }
      }
    },
    "CreateTaskRequest": {
      "description": "Task Creation model",
      "type": "object",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/TaskAttributes"
        }
      }
    },
    "CreateWebhookRequest": {
      "type": "object",
      "properties": {
        "eventTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequestHeaderInfo"
          }
        },
        "httpVerb": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ErrorModel": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorModel"
          }
        }
      }
    },
    "FieldResponse": {
      "description": "Field details",
      "type": "object",
      "properties": {
        "key": {
          "description": "Field key",
          "type": "string",
          "x-ms-summary": "Key"
        },
        "label": {
          "description": "Label of the field",
          "type": "string",
          "x-ms-summary": "Field Label"
        },
        "type": {
          "description": "Type of the field",
          "type": "string",
          "x-ms-summary": "Field Type"
        },
        "isMultiChoice": {
          "description": "Is Field multichoice",
          "type": "boolean",
          "x-ms-summary": "Is MultiChoice",
          "x-ms-visibility": "advanced"
        },
        "isReadonly": {
          "description": "Is Field readonly",
          "type": "boolean",
          "x-ms-summary": "Is ReadOnly",
          "x-ms-visibility": "advanced"
        },
        "settings": {
          "description": "Custom settings for the field",
          "type": "object",
          "x-ms-summary": "Field Settings",
          "x-ms-visibility": "advanced",
          "additionalProperties": {}
        }
      }
    },
    "FieldResponseList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "x-ms-summary": "Fields",
          "description": "List of fields for selected entity",
          "items": {
            "$ref": "#/definitions/FieldResponse"
          }
        }
      }
    },
    "IdeaAttributes": {
      "description": "Idea fields (e.g. {\"Name\": \"My Name\", \"Description\": \"TBD\"})",
      "x-ms-summary": "Attributes",
      "type": "object",
      "properties": {},
      "additionalProperties": {}
    },
    "IdeaResponse": {
      "description": "Idea details",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The Idea unique Id",
          "type": "string",
          "x-ms-summary": "Idea Id"
        },
        "attributes": {
          "$ref": "#/definitions/IdeaAttributes"
        },
        "votes": {
          "format": "int32",
          "description": "Number of votes for idea",
          "type": "integer",
          "x-ms-summary": "Votes"
        }
      }
    },
    "IdeaResponseListResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "x-ms-summary": "Ideas",
          "description": "List of Ideas",
          "items": {
            "$ref": "#/definitions/IdeaResponse"
          }
        }
      }
    },
    "IdeaResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/IdeaResponse"
        }
      }
    },
    "IdeaStage": {
      "description": "Stage of Idea",
      "x-ms-summary": "Stage",
      "title": "Idea Stage",
      "type": "string",
      "enum": [
        "Draft",
        "Proposed",
        "Active",
        "Selected",
        "NotSelected",
        "Archived"
      ]
    },
    "KeyDateAttributes": {
      "x-ms-summary": "KeyDate fields",
      "description": "Key Date fields (e.g. {\"Name\": \"My Name\", \"Description\": \"TBD\"})",
      "type": "object",
      "properties": {},
      "additionalProperties": {}
    },
    "KeyDateResponse": {
      "description": "Key Date details",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "x-ms-summary": "KeyDate Id",
          "description": "Key Date unique identifier",
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/KeyDateAttributes"
        },
        "sourceType": {
          "$ref": "#/definitions/SourceType"
        }
      }
    },
    "KeyDateResponseListResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyDateResponse"
          }
        }
      }
    },
    "KeyDateResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/KeyDateResponse"
        }
      }
    },
    "MeResponse": {
      "description": "User details",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "x-ms-summary": "User Id",
          "description": "User unique identifier",
          "type": "string"
        },
        "logonAccount": {
          "description": "User Logon Account",
          "x-ms-summary": "Logon Account",
          "type": "string"
        },
        "email": {
          "description": "User Email",
          "x-ms-summary": "Email",
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/TokenInfo"
        }
      }
    },
    "MeResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/MeResponse"
        }
      }
    },
    "ProjectAttributes": {
      "x-ms-summary": "Project fields",
      "description": "Project fields (e.g. {\"Name\": \"My Name\", \"Description\": \"TBD\"})",
      "type": "object",
      "properties": {},
      "additionalProperties": {}
    },
    "ProjectResponse": {
      "description": "Project details",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "x-ms-summary": "Project Id",
          "description": "Unique Project Identifier",
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/ProjectAttributes"
        }
      }
    },
    "ProjectResponseListResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "x-ms-summary": "Projects",
          "description": "List of projects",
          "items": {
            "$ref": "#/definitions/ProjectResponse"
          }
        }
      }
    },
    "ProjectResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ProjectResponse"
        }
      }
    },
    "RequestHeaderInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ResourceAttributes": {
      "x-ms-summary": "Resources fields",
      "description": "Resource fields (e.g. {\"Name\": \"My Name\", \"Description\": \"TBD\"})",
      "type": "object",
      "properties": {},
      "additionalProperties": {}
    },
    "ResourceResponse": {
      "description": "Resource details",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "x-ms-summary": "Unique Resource Identifier",
          "description": "Resource Id",
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/ResourceAttributes"
        }
      }
    },
    "ResourceResponseListResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "x-ms-summary": "Resources",
          "description": "List of resources",
          "items": {
            "$ref": "#/definitions/ResourceResponse"
          }
        }
      }
    },
    "ResourceResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ResourceResponse"
        }
      }
    },
    "SourceType": {
      "enum": [
        "Ppmx",
        "O365Group",
        "VSTS",
        "Jira",
        "File",
        "O365Planner",
        "O365User",
        "Spo",
        "O365TeamsChannel",
        "PpmxTime"
      ],
      "type": "string",
      "x-ms-summary": "Source type",
      "description": "Type of data source"
    },    
    "BaselineData": {
      "type": "object",
      "properties": {
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "duration": {
          "format": "int32",
          "type": "integer"
        },
        "effort": {
          "format": "double",
          "type": "number"
        },
        "originalEstimate": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "TaskAttributes": {
      "x-ms-summary": "Task fields",
      "description": "Task fields (e.g. {\"Name\": \"My Name\", \"Description\": \"TBD\"})",
      "type": "object",
      "properties": {},
      "additionalProperties": {}
    },
    "TaskResponse": {
      "description": "Task details",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "x-ms-summary": "Task Id",
          "description": "Unique Task Identifier",
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/TaskAttributes"
        },
        "sourceType": {
          "$ref": "#/definitions/SourceType"
        },
        "baseline": {
          "$ref": "#/definitions/BaselineData"
        }
      }
    },    
    "TaskResponseListTask": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "x-ms-summary": "Tasks",
          "description": "List of tasks",
          "items": {
            "$ref": "#/definitions/TaskResponse"
          }
        }
      }
    },
    "TaskResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/TaskResponse"
        }
      }
    },
    "UpdateChallengeRequest": {
      "description": "Challenge Update model",
      "type": "object",
      "properties": {
        "updates": {
          "$ref": "#/definitions/ChallengeAttributes"
        }
      }
    },
    "UpdateIdeaRequest": {
      "description": "Idea Update model",
      "type": "object",
      "properties": {
        "updates": {
          "$ref": "#/definitions/IdeaAttributes"
        }
      }
    },
    "TokenInfo": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "x-ms-summary": "Token Id",
          "description": "Unique Token Identifier",
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-ms-summary": "Token Name",
          "description": "Name of the API Token"
        },
        "expirationDate": {
          "format": "date-time",
          "x-ms-summary": "Token Expiration Date",
          "description": "Expiration date of the API Token",
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "x-ms-summary": "Scopes",
          "description": "Array of Allowed Actions",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateKeyDateRequest": {
      "description": "Key Date Update model",
      "type": "object",
      "properties": {
        "updates": {
          "$ref": "#/definitions/KeyDateAttributes"
        }
      }
    },
    "UpdateProjectRequest": {
      "description": "Project Update model",
      "type": "object",
      "properties": {
        "updates": {
          "$ref": "#/definitions/ProjectAttributes"
        }
      }
    },
    "UpdateResourceRequest": {
      "description": "Resource Update model",
      "type": "object",
      "properties": {
        "updates": {
          "$ref": "#/definitions/ResourceAttributes"
        }
      }
    },
    "UpdateTaskRequest": {
      "description": "Task Update model",
      "type": "object",
      "properties": {
        "updates": {
          "$ref": "#/definitions/TaskAttributes"
        }
      }
    },
    "WebhookResponse": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "x-ms-summary": "Webhook Id",
          "description": "Unique identifier of the webhook"
        },
        "eventTypes": {
          "type": "array",
          "x-ms-summary": "Events",
          "description": "Array of events used for the webhook",
          "items": {
            "type": "string"
          }
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequestHeaderInfo"
          }
        },
        "httpVerb": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "WebhookResponseListResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookResponse"
          }
        }
      }
    },
    "WebhookResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/WebhookResponse"
        }
      }
    }
  },
  "parameters": {
    "challenge_id__in_path": {
      "in": "path",
      "name": "id",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "The unique identifier of the challenge",
      "x-ms-summary": "Challenge Id",
      "x-ms-url-encoding": "single",
      "x-ms-visibility": "important",
      "x-ms-dynamic-values": {
        "operationId": "ChallengesGetAll",
        "value-path": "id",
        "value-title": "attributes/Name",
        "value-collection": "data"
      }
    },
    "idea_id__in_path": {
      "in": "path",
      "name": "id",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "The unique identifier of the idea",
      "x-ms-summary": "Idea Id",
      "x-ms-url-encoding": "single",
      "x-ms-visibility": "important",
      "x-ms-dynamic-values": {
        "operationId": "IdeasGetAll",
        "value-path": "id",
        "value-title": "attributes/Name",
        "value-collection": "data"
      }
    },
    "project_id__in_path": {
      "in": "path",
      "name": "id",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-ms-summary": "Project Id",
      "x-ms-url-encoding": "single",
      "x-ms-visibility": "important",
      "description": "The unique identifier of the project",
      "x-ms-dynamic-values": {
        "operationId": "ProjectsGetAll",
        "value-path": "id",
        "value-title": "attributes/Name",
        "value-collection": "data"
      }
    },
    "keydate_id__in_path": {
      "in": "path",
      "name": "keyDateId",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "The unique identifier of the KeyDate",
      "x-ms-summary": "KeyDate Id",
      "x-ms-url-encoding": "single",
      "x-ms-visibility": "important",
      "x-ms-dynamic-values": {
        "operationId": "ProjectsKeyDatesGetAll",
        "parameters": {
          "id": {
            "parameter": "id"
          }
        },
        "value-path": "id",
        "value-title": "attributes/Name",
        "value-collection": "data"
      }
    },
    "task_id__in_path": {
      "in": "path",
      "name": "taskId",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-ms-summary": "Task Id",
      "x-ms-url-encoding": "single",
      "x-ms-visibility": "important",
      "description": "The unique identifier of the task",
      "x-ms-dynamic-values": {
        "operationId": "ProjectsTasksGetAll",
        "parameters": {
          "id": {
            "parameter": "id"
          }
        },
        "value-path": "id",
        "value-title": "attributes/Name",
        "value-collection": "data"            
      }
    },
      "resource_id__in_path": {
        "in": "path",
        "name": "id",
        "required": true,
        "type": "string",
        "format": "uuid",
        "x-ms-summary": "Resource Id",
        "x-ms-url-encoding": "single",
        "x-ms-visibility": "important",
        "description": "The unique identifier of the resource",
        "x-ms-dynamic-values": {
          "operationId": "ResourcesGetAll",
          "value-path": "id",
          "value-title": "attributes/Name",
          "value-collection": "data"
        }
      }    
  },
  "responses": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": [
    {
      "name": "Fields",
      "description": "This resource represents fields for PPM Express Entities. Use it to obtain field details."
    },
    {
      "name": "Challenges",
      "description": "This resource represents PPM Express challenges. Use it to create, and update challenges as well as obtain a list of all challenges."
    },
    {
      "name": "Ideas",
      "description": "This resource represents PPM Express ideas. Use it to create, and update ideas as well as obtain a list of all ideas."
    },
    {
      "name": "Me",
      "description": "This resource represents current PPM Express user information."
    },
    {
      "name": "Projects",
      "description": "This resource represents PPM Express projects. Use this resource to create and update projects."
    },
    {
      "name": "ProjectsKeyDates",
      "description": "This resource represents Key Dates. Use it to create, and update Key Dates as well as obtain a list of all Key Dates."
    },
    {
      "name": "ProjectsTasks",
      "description": "This resource represents PPM Express tasks. Use it to create, and update tasks as well as obtain a list of all tasks."
    },
    {
      "name": "Resources",
      "description": "This resource represents PPM Express resources. Use it to create, and update resources as well as obtain a list of all resources."
    },
    {
      "name": "Webhooks",
      "description": "This resource represents Webhooks. Use it to create and delete webhooks to PPM Express."
    }
]
}