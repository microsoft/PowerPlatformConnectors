{
  "swagger": "2.0",
  "info": {
    "title": "PPM Express",
    "version": "v1.0",
    "description": "PPM Express is Online Project Portfolio Management Software that was designed to easily integrate and orchestrate your existing projects in Microsoft Planner, Azure DevOps, Jira Software and Microsoft Project Online.",
    "contact": {
      "name": "PPM Express Support",
      "url": "https://ppm.express/contact-us/",
      "email": "support@ppm.express"
    }
  },
  "host": "api-us.ppm.express",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "x-ms-capabilities": {
    "testConnection": {
      "operationId": "Me_Get"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://ppm.express"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://ppm.express/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Business Management;Business Intelligence"
    }
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/Challenges/{id}": {
      "get": {
        "tags": [
          "Challenges"
        ],
        "summary": "Get a Challenge",
        "description": "Gets an existing Challenge by Id",
        "operationId": "Challenges_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/challenge_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns existing item",
            "schema": {
              "$ref": "#/definitions/ChallengeResponseResponse"
            }
          },
          "404": {
            "description": "If the item is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Challenges"
        ],
        "summary": "Update a Challenge",
        "description": "Updates an existing Challenge",
        "operationId": "Challenges_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/challenge_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateChallengeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated item",
            "schema": {
              "$ref": "#/definitions/ChallengeResponseResponse"
            }
          },
          "400": {
            "description": "If the item is null",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "If the item is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Challenges": {
      "get": {
        "tags": [
          "Challenges"
        ],
        "summary": "Get Challenges List",
        "description": "Gets all Challenges",
        "operationId": "Challenges_GetAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "Returns existing items",
            "schema": {
              "$ref": "#/definitions/ChallengeResponseListResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Challenges"
        ],
        "summary": "Create a Challenge",
        "description": "Creates new Challenge",
        "operationId": "Challenges_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateChallengeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created item",
            "schema": {
              "$ref": "#/definitions/ChallengeResponseResponse"
            }
          },
          "400": {
            "description": "If the item is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Fields/{entity}": {
      "get": {
        "tags": [
          "Fields"
        ],
        "summary": "Get fields",
        "description": "Gets fields information for specified entity(e.g. Project, Idea, Resource etc)",
        "operationId": "Fields_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entity",
            "required": true,
            "type": "string",
            "x-ms-summary": "Entity",
            "description": "Entity name",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important",
            "enum": [
              "Project",
              "Program",
              "Portfolio",
              "Resource",
              "KeyDate",
              "Challenge",
              "Idea",
              "Task",
              "Roadmap",
              "Issue"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns entity field infos",
            "schema": {
              "$ref": "#/definitions/FieldResponseList"
            }
          },
          "400": {
            "description": "If the entity not supported",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Ideas/{id}": {
      "get": {
        "tags": [
          "Ideas"
        ],
        "summary": "Get an Idea",
        "description": "Gets an existing Idea by Id",
        "operationId": "Ideas_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idea_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns existing item",
            "schema": {
              "$ref": "#/definitions/IdeaResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "7467863b-94df-48fc-a021-28de47316f42",
                  "attributes": {
                    "Name": "Sample Idea",
                    "Challenge": {
                      "id": "87b090e2-7778-4fb3-b36a-8adbeb1a6b5d",
                      "name": "Challenge 1"
                    },
                    "Custom Feld": 123
                  },
                  "votes": 10
                }
              }
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "If the item is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Ideas"
        ],
        "summary": "Update an Idea",
        "description": "Updates an existing Idea",
        "operationId": "Ideas_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idea_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "x-ms-summary": "Idea Body",
            "x-ms-visibility": "important",
            "schema": {
              "$ref": "#/definitions/UpdateIdeaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated item",
            "schema": {
              "$ref": "#/definitions/IdeaResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "60a51584-67a7-4f44-9330-ec845bfc5f09",
                  "attributes": {
                    "Name": "Sample Idea",
                    "Challenge": {
                      "id": "70ce3905-03c8-4dd3-8809-f7b8cd58649a",
                      "name": "Challenge 1"
                    },
                    "Custom Feld": 123
                  },
                  "votes": 10
                }
              }
            }
          },
          "400": {
            "description": "If the item is null",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "If the item is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Ideas": {
      "get": {
        "tags": [
          "Ideas"
        ],
        "summary": "Get Ideas List",
        "description": "Gets All Ideas or for the specified challenge",
        "operationId": "Ideas_GetAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "challengeId",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Challenge Id",
            "description": "Specify the challenge id",
            "x-ms-dynamic-values": {
              "operationId": "Challenges_GetAll",
              "value-path": "id",
              "value-title": "attributes/Name",
              "value-collection": "data"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns existing items",
            "schema": {
              "$ref": "#/definitions/IdeaResponseListResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "2a434561-557a-4fa2-9e42-411e52965ef0",
                    "attributes": {
                      "Name": "Sample Idea1",
                      "Challenge": {
                        "id": "a11fcf37-5290-482f-a6c5-ca81b61e9f46",
                        "name": "Challenge 1"
                      },
                      "Custom Field1": 123
                    },
                    "votes": 1
                  },
                  {
                    "id": "41855e1a-b27e-4e7d-a1f3-d8b9c9bad83b",
                    "attributes": {
                      "Name": "Sample Idea2",
                      "Challenge": {
                        "id": "4279a0d3-0146-4256-8aa7-c2c12146d8e4",
                        "name": "Challenge 2"
                      },
                      "Custom Field1": 345,
                      "Custom Field2": "sample value"
                    },
                    "votes": 0
                  }
                ]
              }
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Ideas"
        ],
        "summary": "Create an Idea",
        "operationId": "Ideas_Create",
        "description": "Creates a new Idea for the specified challenge",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateIdeaRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created item",
            "schema": {
              "$ref": "#/definitions/IdeaResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "f2870dcf-96a1-4e94-9cc5-95527d4be99a",
                  "attributes": {
                    "Name": "Sample Idea",
                    "Challenge": {
                      "id": "9121772f-f8c0-4398-8b63-ee5f9ab37b6e",
                      "name": "Challenge 1"
                    },
                    "Custom Feld": 123
                  },
                  "votes": 10
                }
              }
            }
          },
          "400": {
            "description": "If the item is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Ideas/{id}/stage": {
      "post": {
        "tags": [
          "Ideas"
        ],
        "summary": "Update an Idea Stage",
        "operationId": "Ideas_ChangeStage",
        "description": "Updates an Idea Stage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idea_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ChangeIdeaStageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated item",
            "schema": {
              "$ref": "#/definitions/IdeaResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "5304fba6-b5c1-4f13-9e66-765e55ec3876",
                  "attributes": {
                    "Name": "Sample Idea",
                    "Challenge": {
                      "id": "913df279-fb8c-47c1-adc5-0adc3e7efd4a",
                      "name": "Challenge 1"
                    },
                    "Custom Feld": 123
                  },
                  "votes": 10
                }
              }
            }
          },
          "400": {
            "description": "If the item is null",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "If the item is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Me": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get current user",
        "description": "Gets current user and token information",
        "operationId": "Me_Get",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request Body (Leave empty)",
            "x-ms-visibility": "internal",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Returns current user info",
            "schema": {
              "$ref": "#/definitions/MeResponseResponse"
            }
          },
          "401": {
            "description": "If not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Projects/{id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a Project",
        "description": "Gets a Project Info by Id",
        "operationId": "Projects_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns existing item",
            "schema": {
              "$ref": "#/definitions/ProjectResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "6215929b-c926-4b87-8b26-01cd0738a4e8",
                  "attributes": {
                    "Name": "Sample Project",
                    "Manager": [
                      {
                        "id": "29000070-010d-458c-ae05-c7da04d8edc5",
                        "fullName": "Person 1",
                        "imageId": null
                      }
                    ],
                    "Program": [
                      {
                        "id": "1953d610-a547-4d0a-9d00-81696c8c6a88",
                        "name": "Program 1"
                      }
                    ],
                    "Portfolio": [
                      {
                        "id": "59bddb9e-8cc0-4f00-8980-0904802fc64b",
                        "name": "Portfolio 1"
                      }
                    ],
                    "Custom Feld": 123
                  }
                }
              }
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "If the item is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Projects"
        ],
        "summary": "Update a Project",
        "description": "Updates the specified Project fields",
        "operationId": "Projects_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateProjectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated item",
            "schema": {
              "$ref": "#/definitions/ProjectResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "52684a86-fdaa-4ec9-95e7-62d04ce194ec",
                  "attributes": {
                    "Name": "Sample Project",
                    "Manager": [
                      {
                        "id": "94b0fba6-6a98-4820-8df2-6792cae6583c",
                        "fullName": "Person 1",
                        "imageId": null
                      }
                    ],
                    "Program": [
                      {
                        "id": "50792986-514a-4c45-afc6-ef16f4d9a933",
                        "name": "Program 1"
                      }
                    ],
                    "Portfolio": [
                      {
                        "id": "9f428d20-5337-4f50-8517-301729332a2a",
                        "name": "Portfolio 1"
                      }
                    ],
                    "Custom Feld": 123
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the item is null",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "If project is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Projects List",
        "operationId": "Projects_GetAll",
        "description": "Gets list of all projects",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request Body (Leave empty)",
            "x-ms-visibility": "internal",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Returns existing items",
            "schema": {
              "$ref": "#/definitions/ProjectResponseListResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "bf3d8dfe-b3c1-486d-878a-5d6c1475f21b",
                    "attributes": {
                      "Name": "Sample Project1",
                      "Manager": [
                        {
                          "id": "5b8fd4c9-1ee6-4d3e-ab10-672860304401",
                          "fullName": "Person 1",
                          "imageId": null
                        }
                      ],
                      "Program": [
                        {
                          "id": "c68e3c33-36f9-4218-ae75-81e13e34da78",
                          "name": "Program 1"
                        }
                      ],
                      "Portfolio": [
                        {
                          "id": "e8a2f04c-795d-469c-9e1c-45159c1f811b",
                          "name": "Portfolio 1"
                        }
                      ],
                      "Custom Field1": 123
                    }
                  },
                  {
                    "id": "9e98a523-2fdc-4266-94bb-db081fe5784c",
                    "attributes": {
                      "Name": "Sample Project2",
                      "Custom Field1": 345,
                      "Custom Field2": "sample value"
                    }
                  }
                ]
              }
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a Project",
        "description": "Creates a new Project",
        "operationId": "Projects_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateProjectRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created item",
            "schema": {
              "$ref": "#/definitions/ProjectResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "16b3ab56-7a0f-4c80-9d29-3a9d10088a9b",
                  "attributes": {
                    "Name": "Sample Project",
                    "Manager": [
                      {
                        "id": "44ec8d8b-4d38-4fdd-a979-4fb5c736db09",
                        "fullName": "Person 1",
                        "imageId": null
                      }
                    ],
                    "Program": [
                      {
                        "id": "d50e3ca2-d02a-45a8-a451-b5d61b24bad4",
                        "name": "Program 1"
                      }
                    ],
                    "Portfolio": [
                      {
                        "id": "72322c30-c917-4dd6-aa0e-21d91278b780",
                        "name": "Portfolio 1"
                      }
                    ],
                    "Custom Feld": 123
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the item is null",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/projects/{id}/keydates/{keyDateId}": {
      "get": {
        "tags": [
          "ProjectsKeyDates"
        ],
        "summary": "Get a Key Date",
        "description": "Gets a Key Date Info by Id",
        "operationId": "ProjectsKeyDates_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          },
          {
            "$ref": "#/parameters/keydate_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns existing item",
            "schema": {
              "$ref": "#/definitions/KeyDateResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "3a71ae54-3aa4-4e5f-968c-1c03f47082d8",
                  "attributes": {
                    "Name": "Sample Key Date",
                    "AssignedTo": [
                      {
                        "id": "3aed0a3a-73ec-4192-b05d-720dfd7e7e10",
                        "fullName": "Person 1",
                        "imageId": null
                      },
                      {
                        "id": "0993d72f-15b5-4b4c-810a-3327f782317b",
                        "fullName": "Person 2",
                        "imageId": null
                      }
                    ],
                    "Custom Field1": 345
                  },
                  "sourceType": "Ppmx"
                }
              }
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "If the item is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ProjectsKeyDates"
        ],
        "summary": "Update a Key Date",
        "description": "Updates a Key Date",
        "operationId": "ProjectsKeyDates_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          },
          {
            "$ref": "#/parameters/keydate_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateKeyDateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated item",
            "schema": {
              "$ref": "#/definitions/KeyDateResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "45d86ed4-1bf7-4e59-bbdd-df293bcad435",
                  "attributes": {
                    "Name": "Sample Key Date",
                    "AssignedTo": [
                      {
                        "id": "0406f040-4827-4555-90f8-60b9c9554deb",
                        "fullName": "Person 1",
                        "imageId": null
                      },
                      {
                        "id": "83da4047-09e7-4714-bff8-3b107184bd01",
                        "fullName": "Person 2",
                        "imageId": null
                      }
                    ],
                    "Custom Field1": 345
                  },
                  "sourceType": "Ppmx"
                }
              }
            }
          },
          "400": {
            "description": "If the item is null",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "If the item is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/projects/{id}/keydates": {
      "get": {
        "tags": [
          "ProjectsKeyDates"
        ],
        "summary": "Get Key Dates List",
        "description": "Gets List of all Key Dates for the specifired project",
        "operationId": "ProjectsKeyDates_GetAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns existing items",
            "schema": {
              "$ref": "#/definitions/KeyDateResponseListResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "e00fbb83-7bf3-4a16-ac83-ce0efbc5477d",
                    "attributes": {
                      "Name": "Sample Key Date",
                      "AssignedTo": [
                        {
                          "id": "5c19afa1-3a88-42d4-81a8-b5e58ac45d94",
                          "fullName": "Person 1",
                          "imageId": null
                        },
                        {
                          "id": "6a9d4ec6-79c4-48e5-977b-3fa5db27ba1a",
                          "fullName": "Person 2",
                          "imageId": null
                        }
                      ],
                      "Custom Field1": 345
                    },
                    "sourceType": "Ppmx"
                  },
                  {
                    "id": "3a9b0c7a-ef91-4225-9ff6-7b7967b997bb",
                    "attributes": {
                      "Name": "Sample Key Date",
                      "AssignedTo": [],
                      "Custom Field1": 345
                    },
                    "sourceType": "VSTS"
                  }
                ]
              }
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ProjectsKeyDates"
        ],
        "summary": "Create a Key Date",
        "description": "Creates a new Key Date",
        "operationId": "ProjectsKeyDates_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateKeyDateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created item",
            "schema": {
              "$ref": "#/definitions/KeyDateResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "9cf72d1d-d880-4ea9-be4a-33328a2e6193",
                  "attributes": {
                    "Name": "Sample Key Date",
                    "AssignedTo": [
                      {
                        "id": "95b56f84-e92b-4f92-8976-c681e6a8d5d3",
                        "fullName": "Person 1",
                        "imageId": null
                      },
                      {
                        "id": "5bc59d5d-681c-4201-a87a-593dde558d06",
                        "fullName": "Person 2",
                        "imageId": null
                      }
                    ],
                    "Custom Field1": 345
                  },
                  "sourceType": "Ppmx"
                }
              }
            }
          },
          "400": {
            "description": "If the item is null",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/projects/{id}/tasks/{taskId}": {
      "get": {
        "tags": [
          "ProjectsTasks"
        ],
        "summary": "Get a Task",
        "description": "Gets a Task by Id and by Project",
        "operationId": "ProjectsTasks_GetTask",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          },
          {
            "$ref": "#/parameters/task_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns existing item",
            "schema": {
              "$ref": "#/definitions/TaskResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "705be740-ba05-4b7f-8237-4dd88cecf903",
                  "attributes": {
                    "Name": "Sample Task",
                    "AssignedTo": [
                      {
                        "id": "8388edbf-9a78-45be-8d15-c7e3be5ac712",
                        "fullName": "Person 1",
                        "imageId": null
                      }
                    ],
                    "Custom Field1": 345
                  },
                  "sourceType": "Ppmx"
                }
              }
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "If the item is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ProjectsTasks"
        ],
        "summary": "Update a Task",
        "description": "Updates a Task",
        "operationId": "ProjectsTasks_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          },
          {
            "$ref": "#/parameters/task_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateTaskRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated item",
            "schema": {
              "$ref": "#/definitions/TaskResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "6521e7bb-7d11-4b3e-b535-31c7d7736696",
                  "attributes": {
                    "Name": "Sample Task",
                    "AssignedTo": [
                      {
                        "id": "0216518d-a06a-4fa0-8687-cc3dc165de35",
                        "fullName": "Person 1",
                        "imageId": null
                      }
                    ],
                    "Custom Field1": 345
                  },
                  "sourceType": "Ppmx"
                }
              }
            }
          },
          "400": {
            "description": "If the item is null",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "If the item is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/projects/{id}/tasks": {
      "get": {
        "tags": [
          "ProjectsTasks"
        ],
        "summary": "Get Tasks List",
        "description": "Gets List of all Tasks for the specified Project",
        "operationId": "ProjectsTasks_GetAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns existing items",
            "schema": {
              "$ref": "#/definitions/TaskResponseListTask"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "705be740-ba05-4b7f-8237-4dd88cecf903",
                    "attributes": {
                      "Name": "Sample Task",
                      "AssignedTo": [
                        {
                          "id": "8388edbf-9a78-45be-8d15-c7e3be5ac712",
                          "fullName": "Person 1",
                          "imageId": null
                        }
                      ],
                      "Custom Field1": 345
                    },
                    "sourceType": "Ppmx"
                  },
                  {
                    "id": "042f5fc9-b06f-46cd-a7a4-9cb9a5384dc2",
                    "attributes": {
                      "Name": "Sample Task2",
                      "AssignedTo": [
                        {
                          "id": "8388edbf-9a78-45be-8d15-c7e3be5ac712",
                          "fullName": "Person 2",
                          "imageId": null
                        }
                      ],
                      "Custom Field1": 346
                    },
                    "sourceType": "Ppmx"
                  }
                ]
              }
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ProjectsTasks"
        ],
        "summary": "Create a Task",
        "description": "Creates a Task for the specified Project",
        "operationId": "ProjectsTasks_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/project_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateTaskRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created item",
            "schema": {
              "$ref": "#/definitions/TaskResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "042f5fc9-b06f-46cd-a7a4-9cb9a5384dc2",
                  "attributes": {
                    "Name": "Sample Task2",
                    "AssignedTo": [
                      {
                        "id": "8388edbf-9a78-45be-8d15-c7e3be5ac712",
                        "fullName": "Person 2",
                        "imageId": null
                      }
                    ],
                    "Custom Field1": 346
                  },
                  "sourceType": "Ppmx"
                }
              }
            }
          },
          "400": {
            "description": "If the item is null",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Resources/{id}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get a Resource",
        "description": "Gets a Resource by Id",
        "operationId": "Resources_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resource_id__in_path"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns existing item",
            "schema": {
              "$ref": "#/definitions/ResourceResponseResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "If the item is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Resources"
        ],
        "summary": "Update a Resource",
        "description": "Updates a Resource",
        "operationId": "Resources_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resource_id__in_path"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated item",
            "schema": {
              "$ref": "#/definitions/ResourceResponseResponse"
            }
          },
          "400": {
            "description": "If the item is null",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "If resource is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Resources": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get Resources List",
        "description": "Gets List of all Resources",
        "operationId": "Resources_GetAll",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request Body (Leave empty)",
            "x-ms-visibility": "internal",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Returns existing items",
            "schema": {
              "$ref": "#/definitions/ResourceResponseListResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Create a Resource",
        "description": "Creates a Resource",
        "operationId": "Resources_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateResourceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created item",
            "schema": {
              "$ref": "#/definitions/ResourceResponseResponse"
            }
          },
          "400": {
            "description": "If the item is null",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If user is not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If operation is not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Webhooks/{id}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a Webhook",
        "description": "Gets a Webhook",
        "operationId": "Webhooks_Get",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "Webhook Id",
            "x-ms-url-encoding": "single",
            "x-ms-summary": "Webhook Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns existing item",
            "schema": {
              "$ref": "#/definitions/WebhookResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "d021c105-fc11-4cec-b45d-d6eba05ef410",
                  "eventTypes": [
                    "Project:Created",
                    "Project:Updated"
                  ],
                  "headers": [
                    {
                      "name": "Authorization",
                      "value": "Bearer token_value"
                    },
                    {
                      "name": "custom_header",
                      "value": "header_value"
                    }
                  ],
                  "httpVerb": "POST",
                  "url": "https://example.com"
                }
              }
            }
          },
          "401": {
            "description": "If not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "If the item is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a Webhook",
        "x-ms-visibility": "internal",
        "description": "Deletes a Webhook",
        "operationId": "Webhooks_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Webhook Id",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {          
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object"
            },
            "headers": {}
          },
          "204": {
            "description": "Returns deletion result"
          },
          "401": {
            "description": "If not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/Webhooks": {
      "x-ms-notification-content": {
        "schema": {},
        "description": "Request From Webhook",
        "headers": {
          "\"Request-Context\"": {
            "description": "\"Request-Context\"",
            "type": "string"
          },
          "\"api-supported-versions\"": {
            "description": "\"api-supported-versions\"",
            "type": "string"
          },
          "\"x-ms-apihub-cached-response\"": {
            "description": "\"x-ms-apihub-cached-response\"",
            "type": "string"
          },
          "\"x-ms-apihub-obo\"": {
            "description": "\"x-ms-apihub-obo\"",
            "type": "string"
          },
          "\"Date\"": {
            "description": "\"Date\"",
            "type": "string"
          },
          "\"Location\"": {
            "description": "\"Location\"",
            "type": "string"
          },
          "\"Content-Length\"": {
            "description": "\"Content-Length\"",
            "type": "string"
          },
          "\"Content-Type\"": {
            "description": "\"Content-Type\"",
            "type": "string"
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created item",
            "schema": {
              "$ref": "#/definitions/WebhookResponseResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "3d2d560f-2c5b-41ee-aaef-9c5f5b1d5292",
                  "eventTypes": [
                    "Project:Created",
                    "Project:Updated"
                  ],
                  "headers": [
                    {
                      "name": "Authorization",
                      "value": "Bearer token_value"
                    },
                    {
                      "name": "custom_header",
                      "value": "header_value"
                    }
                  ],
                  "httpVerb": "POST",
                  "url": "https://example.com"
                }
              }
            }
          },
          "400": {
            "description": "If the item is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "If not authorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Webhook Trigger",
        "description": "When a operation is performed on an entity in PPM Express",
        "operationId": "Webhook_Trigger",
        "x-ms-trigger": "single",
        "x-ms-trigger-hint": "To see it work, perform any specified action in PPM Express",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "eventTypes": {
                  "x-ms-summary": "Event Types",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "Task:Created",
                      "Task:Updated",
                      "Task:Deleted",
                      "Idea:Created",
                      "Idea:Updated",
                      "Idea:Deleted",
                      "Project:Created",
                      "Project:Updated",
                      "Project:Deleted",
                      "KeyDate:Created",
                      "KeyDate:Updated",
                      "KeyDate:Deleted"
                    ],
                    "title": "",
                    "x-ms-visibility": "important"
                  },
                  "description": "eventTypes"
                },
                "headers": {
                  "x-ms-summary": "Headers",
                  "x-ms-visibility": "advanced",
                  "type": "array",
                  "items": {
                    "description": "add headers",
                    "title": "headers",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "headers name",
                        "title": "name",
                        "default": "custom_header"
                      },
                      "value": {
                        "type": "string",
                        "description": "headers value",
                        "title": "value",
                        "default": "custom_value"
                      }
                    }
                  },
                  "description": "headers_array,",
                  "default": []
                },
                "httpVerb": {
                  "type": "string",
                  "description": "httpVerb",
                  "title": "",
                  "default": "POST",
                  "x-ms-visibility": "internal"
                },
                "url": {
                  "type": "string",
                  "description": "url",
                  "title": "",
                  "x-ms-visibility": "internal",
                  "x-ms-notification-url": true
                }
              },
              "required": [
                "url",
                "httpVerb",
                "eventTypes",
                "headers"
              ]
            }
          }
        ]
      }
    }
  },
  "definitions": {    
    "ChallengeAttributes": {
      "description": "Challenge fields (e.g. {\"Name\": \"My Name\", \"Description\": \"TBD\"})",
      "x-ms-summary": "Attributes",
      "type": "object",
      "properties": {},
      "additionalProperties": {}
    },   
    "ChallengeResponse": {
      "description": "Challenge details",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "Challenge Id",
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/ChallengeAttributes"
        }
      }
    },
    "ChallengeResponseListResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChallengeResponse"
          }
        }
      }
    },
    "ChallengeResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ChallengeResponse"
        }
      }
    },
    "CreateChallengeRequest": {
      "description": "Challenge Creation model",
      "type": "object",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/ChallengeAttributes"
        }
      }
    },
    "ChangeIdeaStageRequest": {
      "description": "Change Idea Stage model",
      "type": "object",
      "properties": {
        "stage": {
          "$ref": "#/definitions/IdeaStage"
        }
      }
    },
    "CreateIdeaRequest": {
      "description": "Idea Creation model",
      "type": "object",
      "properties": {
        "challengeId": {
          "format": "uuid",
          "x-ms-summary": "Challenge Id",
          "description": "The challenge id which idea is belonging to",
          "type": "string",
          "x-ms-dynamic-values": {
            "operationId": "Challenges_GetAll",
            "value-path": "id",
            "value-title": "attributes/Name",
            "value-collection": "data"
          }
        },
        "attributes": {
          "$ref": "#/definitions/IdeaAttributes"
        }
      }
    },
    "CreateKeyDateRequest": {
      "description": "Key Date Creation model",
      "type": "object",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/KeyDateAttributes"
        }
      }
    },
    "CreateProjectRequest": {
      "description": "Project Creation model",
      "type": "object",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/ProjectAttributes"
        }
      }
    },
    "CreateResourceRequest": {
      "description": "Resource Creation model",
      "type": "object",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/ResourceAtrributes"          
        }
      }
    },
    "CreateTaskRequest": {
      "description": "Task Creation model",
      "type": "object",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/TaskAttributes"
        }
      }
    },
    "CreateWebhookRequest": {
      "type": "object",
      "properties": {
        "eventTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequestHeaderInfo"
          }
        },
        "httpVerb": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ErrorModel": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorModel"
          }
        }
      }
    },
    "FieldResponse": {
      "description": "Field details",
      "type": "object",
      "properties": {
        "key": {
          "description": "Field key",
          "type": "string",
          "x-ms-summary": "Key"
        },
        "label": {
          "description": "Field label",
          "type": "string",
          "x-ms-summary": "Field Label"
        },
        "type": {
          "description": "Field type",
          "type": "string",
          "x-ms-summary": "Field Type"
        },
        "isMultiChoice": {
          "description": "Is Field multichoice",
          "type": "boolean",
          "x-ms-summary": "Is MultiChoice",
          "x-ms-visibility": "advanced"
        },
        "isReadonly": {
          "description": "Is Field readonly",
          "type": "boolean",
          "x-ms-summary": "Is ReadOnly",
          "x-ms-visibility": "advanced"
        },
        "settings": {
          "description": "Field settings",
          "type": "object",
          "x-ms-summary": "Field Settings",
          "x-ms-visibility": "advanced",
          "additionalProperties": {}
        }
      }
    },
    "FieldResponseList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "x-ms-summary": "Fields",
          "description": "List of fields for selected entity",
          "items": {
            "$ref": "#/definitions/FieldResponse"
          }
        }
      }
    },
    "IdeaAttributes": {
      "description": "Idea fields (e.g. {\"Name\": \"My Name\", \"Description\": \"TBD\"})",
      "x-ms-summary": "Attributes",
      "type": "object",
      "properties": {},
      "additionalProperties": {}
    },
    "IdeaResponse": {
      "description": "Idea details",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The Idea Id",
          "type": "string",
          "x-ms-summary": "Idea Id"
        },
        "attributes": {
          "$ref": "#/definitions/IdeaAttributes"
        },
        "votes": {
          "format": "int32",
          "description": "Number of votes for idea",
          "type": "integer",
          "x-ms-summary": "Votes"
        }
      }
    },
    "IdeaResponseListResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "x-ms-summary": "Ideas",
          "description": "List of Ideas",
          "items": {
            "$ref": "#/definitions/IdeaResponse"
          }
        }
      }
    },
    "IdeaResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/IdeaResponse"
        }
      }
    },
    "IdeaStage": {
      "description": "Stage of Idea",
      "x-ms-summary": "Stage",
      "title": "",
      "type": "string",
      "enum": [
        "Draft",
        "Proposed",
        "Active",
        "Selected",
        "NotSelected",
        "Archived"
      ]
    },
    "KeyDateAttributes": {
      "x-ms-summary": "KeyDate fields",
      "description": "Key Date fields (e.g. {\"Name\": \"My Name\", \"Description\": \"TBD\"})",
      "type": "object",
      "properties": {},
      "additionalProperties": {}
    },
    "KeyDateResponse": {
      "description": "Key Date details",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "x-ms-summary": "KeyDate Id",
          "description": "Key Date Id",
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/KeyDateAttributes"
        },
        "sourceType": {
          "$ref": "#/definitions/SourceType"
        }
      }
    },
    "KeyDateResponseListResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyDateResponse"
          }
        }
      }
    },
    "KeyDateResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/KeyDateResponse"
        }
      }
    },
    "MeResponse": {
      "description": "User details",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "x-ms-summary": "User Id",
          "description": "User Id",
          "type": "string"
        },
        "logonAccount": {
          "description": "User LogonAccount",
          "x-ms-summary": "Logon Account",
          "type": "string"
        },
        "email": {
          "description": "User Email",
          "x-ms-summary": "Email",
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/TokenInfo"
        }
      }
    },
    "MeResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/MeResponse"
        }
      }
    },
    "ProjectAttributes": {
      "x-ms-summary": "Project fields",
      "description": "Project fields (e.g. {\"Name\": \"My Name\", \"Description\": \"TBD\"})",
      "type": "object",
      "properties": {},
      "additionalProperties": {}
    },
    "ProjectResponse": {
      "description": "Project details",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "x-ms-summary": "Project Id",
          "description": "Unique Project Identifier",
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/ProjectAttributes"
        }
      }
    },
    "ProjectResponseListResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "x-ms-summary": "Projects",
          "description": "List of projects",
          "items": {
            "$ref": "#/definitions/ProjectResponse"
          }
        }
      }
    },
    "ProjectResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ProjectResponse"
        }
      }
    },
    "RequestHeaderInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ResourceAtrributes": {
      "x-ms-summary": "Resources fields",
      "description": "Resource fields (e.g. {\"Name\": \"My Name\", \"Description\": \"TBD\"})",
      "type": "object",
      "properties": {},
      "additionalProperties": {}
    },
    "ResourceResponse": {
      "description": "Resource details",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "x-ms-summary": "Resource Id",
          "description": "Resource Id",
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/ResourceAtrributes"
        }
      }
    },
    "ResourceResponseListResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "x-ms-summary": "Resources",
          "description": "List of resources",
          "items": {
            "$ref": "#/definitions/ResourceResponse"
          }
        }
      }
    },
    "ResourceResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ResourceResponse"
        }
      }
    },
    "SourceType": {
      "enum": [
        "Ppmx",
        "O365Group",
        "VSTS",
        "Jira",
        "File",
        "O365Planner",
        "O365User",
        "Spo",
        "O365TeamsChannel",
        "PpmxTime"
      ],
      "type": "string",
      "x-ms-summary": "Source type",
      "description": "Type of source"
    },    
    "BaselineData": {
      "type": "object",
      "properties": {
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "duration": {
          "format": "int32",
          "type": "integer"
        },
        "effort": {
          "format": "double",
          "type": "number"
        },
        "originalEstimate": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "TaskAttributes": {
      "x-ms-summary": "Task fields",
      "description": "Task fields (e.g. {\"Name\": \"My Name\", \"Description\": \"TBD\"})",
      "type": "object",
      "properties": {},
      "additionalProperties": {}
    },
    "TaskResponse": {
      "description": "Task details",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "x-ms-summary": "Task Id",
          "description": "Task Id",
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/TaskAttributes"
        },
        "sourceType": {
          "$ref": "#/definitions/SourceType"
        },
        "baseline": {
          "$ref": "#/definitions/BaselineData"
        }
      }
    },    
    "TaskResponseListTask": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "x-ms-summary": "Tasks",
          "description": "List of tasks",
          "items": {
            "$ref": "#/definitions/TaskResponse"
          }
        }
      }
    },
    "TaskResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/TaskResponse"
        }
      }
    },
    "UpdateChallengeRequest": {
      "description": "Challenge Update model",
      "type": "object",
      "properties": {
        "updates": {
          "$ref": "#/definitions/ChallengeAttributes"
        }
      }
    },
    "UpdateIdeaRequest": {
      "description": "Idea Update model",
      "type": "object",
      "properties": {
        "updates": {
          "$ref": "#/definitions/IdeaAttributes"
        }
      }
    },
    "TokenInfo": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "x-ms-summary": "Token Id",
          "description": "Token Id",
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-ms-summary": "Token Name",
          "description": "Token Name"
        },
        "expirationDate": {
          "format": "date-time",
          "x-ms-summary": "Token Exp Date",
          "description": "Token Expiration Date",
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "x-ms-summary": "Scopes",
          "description": "Scopes Array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateKeyDateRequest": {
      "description": "Key Date Update model",
      "type": "object",
      "properties": {
        "updates": {
          "$ref": "#/definitions/KeyDateAttributes"
        }
      }
    },
    "UpdateProjectRequest": {
      "description": "Project Update model",
      "type": "object",
      "properties": {
        "updates": {
          "$ref": "#/definitions/ProjectAttributes"
        }
      }
    },
    "UpdateResourceRequest": {
      "description": "Resource Update model",
      "type": "object",
      "properties": {
        "updates": {
          "$ref": "#/definitions/ResourceAtrributes"
        }
      }
    },
    "UpdateTaskRequest": {
      "description": "Task Update model",
      "type": "object",
      "properties": {
        "updates": {
          "$ref": "#/definitions/TaskAttributes"
        }
      }
    },
    "WebhookResponse": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "x-ms-summary": "Webhook Id",
          "description": "Unique identifier of the webhook"
        },
        "eventTypes": {
          "type": "array",
          "x-ms-summary": "Events",
          "description": "Array of events used for the webhook",
          "items": {
            "type": "string"
          }
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequestHeaderInfo"
          }
        },
        "httpVerb": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "WebhookResponseListResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookResponse"
          }
        }
      }
    },
    "WebhookResponseResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/WebhookResponse"
        }
      }
    }
  },
  "parameters": {
    "challenge_id__in_path": {
      "in": "path",
      "name": "id",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "The unique identifier of the challenge",
      "x-ms-summary": "Challenge Id",
      "x-ms-url-encoding": "single",
      "x-ms-visibility": "important",
      "x-ms-dynamic-values": {
        "operationId": "Challenges_GetAll",
        "value-path": "id",
        "value-title": "attributes/Name",
        "value-collection": "data"
      }
    },
    "idea_id__in_path": {
      "in": "path",
      "name": "id",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "The unique identifier of the idea",
      "x-ms-summary": "Idea Id",
      "x-ms-url-encoding": "single",
      "x-ms-visibility": "important",
      "x-ms-dynamic-values": {
        "operationId": "Ideas_GetAll",
        "value-path": "id",
        "value-title": "attributes/Name",
        "value-collection": "data"
      }
    },
    "project_id__in_path": {
      "in": "path",
      "name": "id",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-ms-summary": "Project Id",
      "x-ms-url-encoding": "single",
      "x-ms-visibility": "important",
      "description": "The unique identifier of the project",
      "x-ms-dynamic-values": {
        "operationId": "Projects_GetAll",
        "value-path": "id",
        "value-title": "attributes/Name",
        "value-collection": "data"
      }
    },
    "keydate_id__in_path": {
      "in": "path",
      "name": "keyDateId",
      "required": true,
      "type": "string",
      "format": "uuid",
      "description": "The unique indentifier of the KeyDate",
      "x-ms-summary": "KeyDate Id",
      "x-ms-url-encoding": "single",
      "x-ms-visibility": "important",
      "x-ms-dynamic-values": {
        "operationId": "ProjectsKeyDates_GetAll",
        "parameters": {
          "id": {
            "parameter": "id"
          }
        },
        "value-path": "id",
        "value-title": "attributes/Name",
        "value-collection": "data"
      }
    },
    "task_id__in_path": {
      "in": "path",
      "name": "taskId",
      "required": true,
      "type": "string",
      "format": "uuid",
      "x-ms-summary": "Task Id",
      "x-ms-url-encoding": "single",
      "x-ms-visibility": "important",
      "description": "The unique identifier of the task",
      "x-ms-dynamic-values": {
        "operationId": "ProjectsTasks_GetAll",
        "parameters": {
          "id": {
            "parameter": "id"
          }
        },
        "value-path": "id",
        "value-title": "attributes/Name",
        "value-collection": "data"            
      }
    },
      "resource_id__in_path": {
        "in": "path",
        "name": "id",
        "required": true,
        "type": "string",
        "format": "uuid",
        "x-ms-summary": "Resource Id",
        "x-ms-url-encoding": "single",
        "x-ms-visibility": "important",
        "description": "The unique identifier of the resource",
        "x-ms-dynamic-values": {
          "operationId": "Resources_GetAll",
          "value-path": "id",
          "value-title": "attributes/Name",
          "value-collection": "data"
        }
      }    
  },
  "responses": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": [
    {
      "name": "Fields",
      "description": "This resource represents fields for PPM Express Entities. Use it to obtain field details."
    },
    {
      "name": "Challenges",
      "description": "This resource represents PPM Express challenges. Use it to create, and update challenges as well as obtain a list of all challenges."
    },
    {
      "name": "Ideas",
      "description": "This resource represents PPM Express ideas. Use it to create, and update ideas as well as obtain a list of all ideas."
    },
    {
      "name": "Me",
      "description": "This resource represents current PPM Express user information."
    },
    {
      "name": "Projects",
      "description": "This resource represents PPM Express projects. Use this resource to create and update projects."
    },
    {
      "name": "ProjectsKeyDates",
      "description": "This resource represents Key Dates. Use it to create, and update Key Dates as well as obtain a list of all Key Dates."
    },
    {
      "name": "ProjectsTasks",
      "description": "This resource represents PPM Express tasks. Use it to create, and update tasks as well as obtain a list of all tasks."
    },
    {
      "name": "Resources",
      "description": "This resource represents PPM Express resources. Use it to create, and update resources as well as obtain a list of all resources."
    },
    {
      "name": "Webhooks",
      "description": "This resource represents Webhooks. Use it to create and delte webhooks to PPM Express."
    }
]
}