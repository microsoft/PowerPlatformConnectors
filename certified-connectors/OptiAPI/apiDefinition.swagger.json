{
  "basePath": "/api/v1/",
  "consumes": [
    "application/json"
  ],
  "definitions": {
    "StandardArrayResponse": {
      "properties": {
        "array": {
          "description": "The array containing the new items.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-ms-summary": "Result Array"
        }
      },
      "type": "object"
    }
  },
  "host": "optiapi.com",
  "info": {
    "contact": {
      "email": "suppport@parsewire.com",
      "name": "Oliver Busk Jensen"
    },
    "description": "The official api for OptiAPI, which connects countless of everyday actions with Power Automate.",
    "title": "OptiAPI",
    "version": "2.3.0",
    "license": {
      "name": "MIT"
    }
  },
  "parameters": {},
  "paths": {
    "/array/calculate-average": {
      "post": {
        "description": "Calculates the average value of a given key.",
        "operationId": "CalculateAverage",
        "parameters": [{
            "default": "application/json",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": "application/json",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The input array to use in the average calculation.",
                    "title": "Input Array",
                    "type": "string"
                  },
                  "type": "array"
                },
                "key": {
                  "description": "The key to calculate the average for.",
                  "title": "Key",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "array"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "average": {
                  "description": "The calculated average for the given key.",
                  "format": "int32",
                  "title": "Average",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Calculate average"
      }
    },
    "/array/chunk": {
      "post": {
        "description": "Break an array down into chunks.",
        "operationId": "ChunkAnArray",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "array": [
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7",
                  "8",
                  "9"
                ],
                "size": 3
              },
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The input array to chunk into smaller chunks.",
                    "title": "Input Array",
                    "type": "string"
                  },
                  "type": "array"
                },
                "size": {
                  "description": "The size of each chunk.",
                  "format": "int32",
                  "title": "Chunk Size",
                  "type": "integer"
                }
              },
              "required": [
                "array",
                "size"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The new array containing the chunks.",
                    "title": "Chunked Array",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Chunk an array"
      }
    },
    "/array/combine": {
      "post": {
        "description": "Combine the keys of one array with the values of another array.",
        "operationId": "CombineArray",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request."
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "keys": [
                  "name",
                  "age",
                  "city"
                ],
                "values": [
                  "Oliver",
                  "26",
                  "Copenhagen"
                ]
              },
              "properties": {
                "keys": {
                  "description": "keys",
                  "items": {
                    "description": "The array containing the keys.",
                    "title": "Keys",
                    "type": "string"
                  },
                  "type": "array"
                },
                "values": {
                  "description": "values",
                  "items": {
                    "description": "The array containing the values.",
                    "title": "Values",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "keys",
                "values"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The combined array.",
                    "title": "Combined Array",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Combine array"
      }
    },
    "/array/contains": {
      "post": {
        "description": "Determines whether the array contains a given item.",
        "operationId": "CheckIfArrayContainAValue",
        "parameters": [{
            "default": "application/json",
            "description": "Header value",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": "application/json",
            "description": "Header value",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The input array to check if a value exists in.",
                    "title": "Input Array",
                    "type": "string"
                  },
                  "type": "array"
                },
                "key": {
                  "description": "The key to search for the specific value in.",
                  "title": "Key",
                  "type": "string"
                },
                "search": {
                  "description": "The search term to look for.",
                  "title": "Search Term",
                  "type": "string"
                }
              },
              "required": [
                "array",
                "key",
                "search"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "contains": {
                  "description": "Whether the array contains the given item or not (bool)",
                  "enum": [
                    true,
                    false
                  ],
                  "title": "Contains",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Check if array contain a value"
      }
    },
    "/array/difference": {
      "post": {
        "description": "This action compares an array against another array.",
        "operationId": "FindDifferenceBetweenArrays",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "array": [
                  "Oliver",
                  "Martin",
                  "Eric"
                ],
                "compare": [
                  "Oliver",
                  "Martin",
                  "Eric",
                  "Nadia"
                ]
              },
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The input array to compare.",
                    "title": "Input Array",
                    "type": "string"
                  },
                  "type": "array"
                },
                "compare": {
                  "description": "compare",
                  "items": {
                    "description": "The array to compare values against.",
                    "title": "Compare Against",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "compare",
                "array"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The array containing the items not present in one of the arrays.",
                    "title": "Differences",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Find difference between arrays"
      }
    },
    "/array/duplicate": {
      "post": {
        "description": "This action retrieves and returns duplicate values from an array.",
        "operationId": "FindDuplicatesInArrays",
        "parameters": [{
            "default": "application/json",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": "application/json",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The input array to search for duplicates in.",
                    "title": "Input Array",
                    "type": "string"
                  },
                  "type": "array"
                },
                "key": {
                  "description": "You can specify a key in order to look for duplicates under a specific attribute (Optional)",
                  "title": "Key",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                }
              },
              "required": [
                "array"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The array containing the duplicated values and their key positions.",
                    "title": "Duplicate Values",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Find duplicates in arrays"
      }
    },
    "/array/filter": {
      "post": {
        "description": "This action removes false entries from an array.",
        "operationId": "FilterAnArray",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "array": [
                  "Oliver",
                  "John"
                ],
                "preserveKeys": true
              },
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The input array to clean for false values.",
                    "title": "Input Array",
                    "type": "string"
                  },
                  "type": "array"
                },
                "preserveKeys": {
                  "default": true,
                  "description": "If set to true, the returning array will preserve the keys of the original attributes.",
                  "enum": [
                    true,
                    false
                  ],
                  "title": "Preserve Array Keys",
                  "type": "boolean"
                }
              },
              "required": [
                "array",
                "preserveKeys"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The cleaned array (false values has been removed)",
                    "title": "Cleaned Array",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Filter an array for false values"
      }
    },
    "/array/first-where": {
      "post": {
        "description": "This action returns the first element in an array with the given key / value pair.",
        "operationId": "FirstWhereWithinAnArray",
        "parameters": [{
            "default": "application/json",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": "application/json",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The input array to search in.",
                    "title": "Input Array",
                    "type": "string"
                  },
                  "type": "array"
                },
                "key": {
                  "description": "The key to search for.",
                  "title": "Key",
                  "type": "string"
                },
                "operator": {
                  "description": "Perform an operator clause (Optional)",
                  "enum": [
                    ">=",
                    "<=",
                    ">",
                    "<",
                    "=",
                    "!="
                  ],
                  "title": "Operator",
                  "type": "string"
                },
                "value": {
                  "description": "The value to search for.",
                  "title": "Search For",
                  "type": "string"
                }
              },
              "required": [
                "array",
                "key",
                "value"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "Returns a new array with the first result based on the input criteria.",
                    "title": "Array",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "First Where within an array"
      }
    },
    "/array/flatten": {
      "post": {
        "description": "This action flattens a multi-dimensional array into a single dimension array.",
        "operationId": "FlattenAnArray",
        "parameters": [{
            "default": "application/json",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": "application/json",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The array to flatten.",
                    "title": "Input Array",
                    "type": "string"
                  },
                  "type": "array"
                },
                "depth": {
                  "description": "The depth level that should be flattened (integer)",
                  "title": "Depth",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                }
              },
              "required": [
                "array"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The flattened array.",
                    "title": "Flattened Array",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Flatten an array"
      }
    },
    "/array/forget": {
      "post": {
        "description": "Removes an item from an array by its key value.",
        "operationId": "RemoveItemFromArray",
        "parameters": [{
            "default": "application/json",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": "application/json",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The input array to look in.",
                    "title": "Input Array",
                    "type": "string"
                  },
                  "type": "array"
                },
                "key": {
                  "description": "Items matching this key will be removed.",
                  "title": "Key",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "array"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The transformed array.",
                    "title": "Cleaned up Array",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Remove item from array"
      }
    },
    "/array/group-by": {
      "post": {
        "description": "This action groups an array's items by a given key.",
        "operationId": "GroupByAnArrayKey",
        "parameters": [{
            "default": "application/json",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": "application/json",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The input array.",
                    "title": "Input Array",
                    "type": "string"
                  },
                  "type": "array"
                },
                "key": {
                  "description": "The key to group items by.",
                  "title": "Key",
                  "type": "string"
                }
              },
              "required": [
                "array",
                "key"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The new grouped array.",
                    "title": "Grouped Array",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Group By an array key"
      }
    },
    "/array/sort": {
      "post": {
        "description": "Sort an array from high to low or from descending to ascending.",
        "operationId": "SortAnArray",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "array": [
                  "Oliver",
                  "Sophia",
                  "Anders"
                ],
                "sort": "ascending"
              },
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The input array that should be sorted.",
                    "title": "Input Array",
                    "type": "string"
                  },
                  "type": "array"
                },
                "sort": {
                  "default": "Ascending",
                  "description": "How should the array items be sorted?",
                  "enum": [
                    "Ascending",
                    "Descending"
                  ],
                  "title": "Sort",
                  "type": "string"
                }
              },
              "required": [
                "array",
                "sort"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/StandardArrayResponse"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Sort an array"
      }
    },
    "/array/unique": {
      "post": {
        "description": "The action returns all of the unique items in an array.",
        "operationId": "GetUniqueItemsInAnArray",
        "parameters": [{
            "default": "application/json",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": "application/json",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The input array to take unique values from.",
                    "title": "Input Array",
                    "type": "string"
                  },
                  "type": "array"
                },
                "key": {
                  "description": "The specific key that determines the uniqueness.",
                  "title": "Key",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                }
              },
              "required": [
                "array"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "array": {
                  "description": "array",
                  "items": {
                    "description": "The array containing the unique items.",
                    "title": "Unique Items",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Get unique items in an array"
      }
    },
    "/datetime/add-or-subtract": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Manipulate datetime by adding or subtracting values.",
        "operationId": "AddOrSubtractFromTimeOrDates",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "action": "quarter",
                "datetime": "01-01-2020",
                "operator": "add",
                "outputFormat": "d-m-Y",
                "value": "1"
              },
              "properties": {
                "action": {
                  "default": "Week",
                  "description": "The action to add or subtract too. This can for example be 'year', 'weekday', 'week' or 'day'.",
                  "enum": [
                    "Year",
                    "Quarter",
                    "Month",
                    "Week",
                    "Weekday",
                    "Day",
                    "Hour",
                    "Minute",
                    "Second"
                  ],
                  "title": "Action",
                  "type": "string"
                },
                "datetime": {
                  "description": "The input value to either add to or subtract from.",
                  "title": "Input Datetime",
                  "type": "string"
                },
                "operator": {
                  "default": "Add",
                  "description": "Whether we should add or subtract the value from the input date time. Can be either 'add' or 'subtract.",
                  "enum": [
                    "Add",
                    "Subtract"
                  ],
                  "title": "Operator",
                  "type": "string"
                },
                "outputFormat": {
                  "description": "The date time format that the string should be converted to (for example d-m-Y)",
                  "title": "Output Format",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "value": {
                  "default": 1,
                  "description": "The value to either add or subtract.",
                  "format": "int32",
                  "title": "Value",
                  "type": "integer"
                }
              },
              "required": [
                "action",
                "datetime",
                "operator",
                "value"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "datetime": {
                  "description": "The new transformed date time",
                  "title": "Date Time",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Add or subtract from time or dates"
      }
    },
    "/datetime/string-to-datetime": {
      "post": {
        "description": "Transform a string to a valid datetime format.",
        "operationId": "ConvertAStringToADatetimeObject",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request."
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "inputFormat": "dm-Y",
                "outputFormat": "d/m/y H:i:s",
                "string": "0101-2020",
                "timezone": ""
              },
              "properties": {
                "inputFormat": {
                  "default": "dd.mm.yyyy",
                  "description": "The format of the input string.",
                  "title": "Input Format",
                  "type": "string"
                },
                "outputFormat": {
                  "default": "dd/mm/yyyy",
                  "description": "The date time format that the string should be converted to.",
                  "title": "Output Format",
                  "type": "string"
                },
                "string": {
                  "description": "The input string to convert to date time.",
                  "title": "Input String",
                  "type": "string"
                },
                "timezone": {
                  "description": "The timezone the datetime should be converted to (Optional)",
                  "title": "Timezone",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                }
              },
              "required": [
                "string",
                "inputFormat",
                "outputFormat"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "datetime": {
                  "description": "The new transformed date time",
                  "title": "Date Time",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Convert a string to a datetime object"
      }
    },
    "/ocr/perform-ocr": {
      "post": {
        "description": "Replaces a string with another word.",
        "operationId": "PerformOcrOnAScannedPdfOrImageFile",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "file": "",
                "language": "eng",
                "oem": "",
                "psm": "",
                "trim": true,
                "type": "pdf"
              },
              "properties": {
                "file": {
                  "description": "The base64 encoded string of the file (PDF or image).",
                  "title": "File Content",
                  "type": "string"
                },
                "language": {
                  "default": "eng",
                  "description": "The language of the input file. (default = eng)",
                  "title": "Language",
                  "type": "string"
                },
                "oem": {
                  "description": "The OCR engine to use. (0 = legacy, 1 = LSTM)",
                  "enum": [
                    0,
                    1
                  ],
                  "format": "int32",
                  "title": "OCR Engine (OEM)",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "psm": {
                  "default": 3,
                  "description": "How should the OCR segment the input image?",
                  "enum": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13
                  ],
                  "format": "int32",
                  "title": "Page Segmentation Method (PSM)",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "trim": {
                  "default": false,
                  "description": "If enabled, this will remove all excess spacing and line breaks of the output text.",
                  "enum": [
                    true,
                    false
                  ],
                  "title": "Trim Output",
                  "type": "boolean",
                  "x-ms-visibility": "advanced"
                },
                "type": {
                  "description": "The input file type.",
                  "enum": [
                    "pdf",
                    "jpg",
                    "jpeg",
                    "png",
                    "gif"
                  ],
                  "title": "File Type",
                  "type": "string"
                }
              },
              "required": [
                "file",
                "oem",
                "psm",
                "trim",
                "type"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "text": {
                  "description": "The output text from the OCR action.",
                  "title": "Output Text",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Perform OCR on a scanned PDF or image file"
      }
    },
    "/pdf/combine-pdf": {
      "post": {
        "description": "Combine multiple PDF files into one.",
        "operationId": "CombineMultiplePdfFiles",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "pdfs": [
                  "PDF File 1",
                  "PDF File 2"
                ]
              },
              "properties": {
                "pdfs": {
                  "description": "pdfs",
                  "items": {
                    "description": "The array containing the PDF files that should be combined.",
                    "title": "PDF Files",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "pdfs"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "properties": {
                "content": {
                  "description": "The base64 encoded string of the combined PDF files.",
                  "title": "File Content",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Combine multiple PDF files"
      }
    },
    "/pdf/pdf-metadata": {
      "post": {
        "description": "Get metadata from a PDF file.",
        "operationId": "GetPdfMetadataInformation",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "pdf": ""
              },
              "properties": {
                "pdf": {
                  "description": "The base64 encoded string of the PDF file.",
                  "format": "byte",
                  "title": "File Content",
                  "type": "string"
                }
              },
              "required": [
                "pdf"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "metadata": {
                  "description": "metadata",
                  "properties": {
                    "PDFVersion": {
                      "description": "PDFVersion",
                      "title": "PDF Version",
                      "type": "string"
                    },
                    "author": {
                      "description": "The author of the PDF file",
                      "title": "Author",
                      "type": "string"
                    },
                    "creationDate": {
                      "description": "The date the PDF file was originally created.",
                      "title": "Date Created",
                      "type": "string"
                    },
                    "creator": {
                      "description": "The creator of the PDF file.",
                      "title": "Creator",
                      "type": "string",
                      "x-ms-visibility": "advanced"
                    },
                    "encrypted": {
                      "description": "Whether the PDF file is encrypted. Returns \"yes\"/\"no\".",
                      "title": "Encrypted",
                      "type": "string",
                      "x-ms-visibility": "advanced"
                    },
                    "fileSize": {
                      "description": "The file size of the PDF file in bytes.",
                      "title": "File Size",
                      "type": "string"
                    },
                    "form": {
                      "description": "If any forms are found in the PDF file.",
                      "title": "Form",
                      "type": "string",
                      "x-ms-visibility": "advanced"
                    },
                    "modDate": {
                      "description": "If the file has been changed. (default = null)",
                      "title": "Modification Date",
                      "type": "string",
                      "x-ms-visibility": "advanced"
                    },
                    "optimized": {
                      "description": "If the file was optimized. (default = \"no\")",
                      "title": "Optimized",
                      "type": "string",
                      "x-ms-visibility": "advanced"
                    },
                    "output": {
                      "description": "output",
                      "items": {
                        "description": "An array containing advanced metadata information.",
                        "title": "Metadata Advanced Output",
                        "type": "string",
                        "x-ms-visibility": "advanced"
                      },
                      "type": "array"
                    },
                    "pageRot": {
                      "description": "The rotation of the PDF file.",
                      "title": "Page Rotation",
                      "type": "string",
                      "x-ms-visibility": "advanced"
                    },
                    "pageSize": {
                      "description": "The page size of the PDF file.",
                      "title": "Page Size",
                      "type": "string"
                    },
                    "pages": {
                      "description": "The number of pages in the PDF file.",
                      "title": "Number of Pages",
                      "type": "string"
                    },
                    "producer": {
                      "description": "The producer of the PDF file.",
                      "title": "Produced By",
                      "type": "string",
                      "x-ms-visibility": "advanced"
                    },
                    "tagged": {
                      "description": "Whether the PDF file is tagged or not. Returns \"yes\"/\"no\".",
                      "title": "Tagged",
                      "type": "string",
                      "x-ms-visibility": "advanced"
                    },
                    "title": {
                      "description": "The title of the PDF file.",
                      "title": "Title",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Get PDF metadata information"
      }
    },
    "/pdf/pdf-to-text": {
      "post": {
        "description": "Converts a PDF file to text.",
        "operationId": "ConvertAPdfFileToText",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "endPage": "",
                "layout": "original",
                "mode": "text",
                "pdf": "File...",
                "startPage": ""
              },
              "properties": {
                "endPage": {
                  "description": "If set, this is the last page the action will convert to text.",
                  "format": "int32",
                  "title": "End Page",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "layout": {
                  "default": "raw",
                  "description": "The layout of the output content. You can choose from 'raw' or 'original'. Original will preserve the layout..",
                  "enum": [
                    "raw",
                    "original"
                  ],
                  "title": "Output Layout",
                  "type": "string"
                },
                "mode": {
                  "description": "mode (not neeeded)",
                  "title": "",
                  "type": "string",
                  "x-ms-visibility": "internal"
                },
                "pdf": {
                  "description": "The base64 encoded string of the PDF file.",
                  "format": "byte",
                  "title": "File Content",
                  "type": "string"
                },
                "startPage": {
                  "description": "If set, this is the first page the action will convert to text.",
                  "format": "int32",
                  "title": "Start Page",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                }
              },
              "required": [
                "pdf",
                "layout"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StandardArrayResponse"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Convert a PDF file to text"
      }
    },
    "/pdf/set-password": {
      "post": {
        "description": "Dynamically sets a custom password on a PDF file.",
        "operationId": "SetPasswordOnAPdfFile",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request."
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "password": "ipsum",
                "pdf": ""
              },
              "properties": {
                "password": {
                  "description": "The password to apply to the PDF file.",
                  "title": "Password",
                  "type": "string"
                },
                "pdf": {
                  "description": "The base64 content of the PDF files.",
                  "format": "byte",
                  "title": "PDF File",
                  "type": "string"
                }
              },
              "required": [
                "password",
                "pdf"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "content": {
                  "description": "The base64 encoded string of the PDF file with the password.",
                  "title": "File Content",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Set password on a PDF file"
      }
    },
    "/regex/regex-replace": {
      "post": {
        "description": "Replace one or more words with another word, based on a regular expression.",
        "operationId": "ReplaceTextInStringBasedOnARegularExpression",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "pattern": "/ipsum/i",
                "replacement": "changed",
                "text": "Lorem ipsum"
              },
              "properties": {
                "pattern": {
                  "default": "/string/i",
                  "description": "The regular expression pattern to use in the search.",
                  "title": "Regex Pattern",
                  "type": "string"
                },
                "replacement": {
                  "description": "The string to replace the found value with.",
                  "title": "Replacement Value",
                  "type": "string"
                },
                "text": {
                  "description": "The string to perform the text replace against.",
                  "title": "Input Text",
                  "type": "string"
                }
              },
              "required": [
                "text",
                "replacement",
                "pattern"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "text": {
                  "description": "The replaced text string",
                  "title": "Text",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Replace text in string based on a regular expression"
      }
    },
    "/regex/regex-search": {
      "post": {
        "description": "Find one or more values in a string.",
        "operationId": "FindValuesFromAStringBasedOnARegularExpression",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request.",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "group": "0",
                "pattern": "/[0-9]{1,}/i",
                "text": "Hi there! I am 22 years old and have 2 dogs."
              },
              "properties": {
                "group": {
                  "description": "The group to return. (default = 0)",
                  "title": "Group",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "pattern": {
                  "default": "/string/i",
                  "description": "The regular expression pattern.",
                  "title": "Regex Pattern",
                  "type": "string"
                },
                "text": {
                  "description": "The string to look for references in.",
                  "title": "Input Text",
                  "type": "string"
                }
              },
              "required": [
                "text",
                "pattern"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "values": {
                  "description": "values",
                  "items": {
                    "description": "The found values are returned in an array.",
                    "title": "Values Found",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Find values from a string based on a regular expression"
      }
    },
    "/text/text-replace": {
      "post": {
        "description": "Replace one or more words with another word.",
        "operationId": "ReplaceTextInString",
        "parameters": [{
            "default": " application/json",
            "description": "Content-Type",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "The content-type for the request."
          },
          {
            "default": " application/json",
            "description": "Accept",
            "in": "header",
            "name": "Accept",
            "required": true,
            "type": "string",
            "x-ms-summary": "The accept type for the request."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "default": {
                "replace": "changed",
                "search": "ipsum",
                "text": "Lorem ipsum"
              },
              "properties": {
                "replace": {
                  "description": "The string or word to replace the found string with.",
                  "title": "Replace With",
                  "type": "string"
                },
                "search": {
                  "description": "The string or word to find in the input string.",
                  "title": "Search For",
                  "type": "string"
                },
                "text": {
                  "description": "The input text to perform the replacement on.",
                  "title": "Input Text",
                  "type": "string"
                }
              },
              "required": [
                "text",
                "search",
                "replace"
              ],
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "properties": {
                "text": {
                  "description": "text",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "The request did not have the correct authorization."
          },
          "404": {
            "description": "Response not found error, please write an email to support@optiapi.com"
          },
          "500": {
            "description": "Internal server error, please write an email to support@optiapi.com"
          }
        },
        "summary": "Replace text in string"
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "responses": {},
  "schemes": [
    "https"
  ],
  "security": [{
    "API Key": []
  }],
  "securityDefinitions": {
    "API Key": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "tags": []
}