{
  "basePath": "/api/v1/",
  "consumes": ["application/json"],
  "definitions": {},
  "host": "optiapi.com",
  "info": {
    "contact": {
      "email": "suppport@parsewire.com",
      "name": "Oliver Busk Jensen"
    },
    "description": "The official api for OptiAPI, which connects countless of everyday actions with Power Automate.",
    "license": {
      "name": "MIT"
    },
    "title": "OptiAPI",
    "version": "1.0.0"
  },
  "paths": {
    "/pdf/combine-pdf": {
      "post": {
        "description": "Combine PDF files",
        "operationId": "PdfCombinePDF",
        "parameters": [{
            "default": "application/json",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "default": "application/json",
            "in": "header",
            "name": "Accept-Type",
            "required": true,
            "type": "string",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "properties": {
                "pdfs": {
                  "description": "pdfs",
                  "items": {
                    "description": "The array containing the PDF files.",
                    "format": "byte",
                    "title": "PDF Files",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": ["pdfs"],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "content": {
                  "description": "The base64 binary string is returned",
                  "title": "Combined PDF",
                  "type": "string"
                }
              },
              "required": ["content"],
              "type": "object"
            }
          }
        },
        "summary": "PDF - Combine PDF files"
      }
    },
    "/pdf/set-password": {
      "post": {
        "description": "Password protects a PDF file",
        "operationId": "PdfSetPassword",
        "parameters": [{
            "default": "application/json",
            "description": "The content type to be sent to OptiAPI",
            "enum": ["application/json"],
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "Content-Type",
            "x-ms-visibility": "internal"
          },
          {
            "description": "",
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "password": {
                  "description": "The password to protect the PDF file with.",
                  "title": "Password",
                  "type": "string"
                },
                "pdf": {
                  "description": "The PDF file base64 string.",
                  "title": "PDF File",
                  "type": "string"
                }
              },
              "required": ["pdf", "password"],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "content": {
                  "description": "The base64 encoded string.",
                  "type": "string"
                }
              },
              "required": ["content"],
              "type": "object"
            }
          }
        },
        "summary": "PDF - Set a Password"
      }
    },
    "/text/find-references": {
      "post": {
        "description": "Find References using a regular expression",
        "operationId": "TextFindReferences",
        "parameters": [{
            "default": "application/json",
            "description": "The content type to be sent to OptiAPI",
            "enum": ["application/json"],
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "Content-Type",
            "x-ms-visibility": "internal"
          },
          {
            "description": "The body request",
            "in": "body",
            "name": "body",
            "schema": {
              "description": "",
              "properties": {
                "group": {
                  "description": "The regular expression group to return (default = 0)",
                  "example": "0",
                  "title": "Group",
                  "type": "integer"
                },
                "pattern": {
                  "description": "The regular expression pattern (example: /string/i). Remember to include //",
                  "example": "/lorem/i",
                  "title": "RegEx Pattern",
                  "type": "string"
                },
                "text": {
                  "description": "The text to perform the regular expression against.",
                  "example": "Lorem ipsum, dollar amet. Aller dota in loreum. Lorem ilu aler",
                  "title": "Input String",
                  "type": "string"
                }
              },
              "required": ["text", "pattern", "group"],
              "type": "object"
            },
            "x-examples": {}
          }
        ],
        "responses": {
          "200": {
            "description": "The returned response from the server (OK)",
            "schema": {
              "properties": {
                "references": {
                  "description": "The returned reference(s) from the server",
                  "items": {},
                  "type": "array"
                }
              },
              "required": ["references"],
              "type": "object"
            }
          }
        },
        "summary": "Text - Find References using Regular Expression"
      }
    },
    "/text/regex-replace": {
      "post": {
        "description": "Regex Replace",
        "operationId": "TextRegexReplace",
        "parameters": [{
            "default": "application/json",
            "description": "The content type to be sent to OptiAPI",
            "enum": ["application/json"],
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "Content-Type",
            "x-ms-visibility": "internal"
          },
          {
            "description": "The body request",
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "pattern": {
                  "description": "The regular expression pattern to use.",
                  "example": "/lorem/i",
                  "title": "RegEx Pattern",
                  "type": "string"
                },
                "replacement": {
                  "description": "The word or string to use as replacement.",
                  "title": "Replace With",
                  "type": "string"
                },
                "text": {
                  "description": "The string to perform regular expression against.",
                  "example": "Lorem ipsum, dollar amet",
                  "title": "Input String",
                  "type": "string"
                }
              },
              "required": ["text", "pattern", "replacement"],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The returned response from the server (OK)",
            "schema": {
              "properties": {
                "text": {
                  "description": "The returned string after the regular expression has been performed",
                  "title": "Returned String",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Text - Regular Expression Replace"
      }
    },
    "/text/remove-duplicate-values": {
      "post": {
        "description": "Remove duplicates values from one or more arrays.",
        "operationId": "TextRemoveDuplicateValues",
        "parameters": [{
            "default": "application/json",
            "description": "The content type to be sent to OptiAPI",
            "enum": ["application/json"],
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "Content-Type",
            "x-ms-visibility": "internal"
          },
          {
            "description": "The body request",
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "values": {
                  "description": "The array to remove the duplicate items from.",
                  "example": "[1, 3, 4, 1]",
                  "items": {},
                  "minItems": 1,
                  "title": "Values",
                  "type": "array",
                  "uniqueItems": false
                }
              },
              "required": ["values"],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The returned response from the server (OK)",
            "headers": {},
            "schema": {
              "properties": {
                "values": {
                  "example": "[1, 2, 3, 1]",
                  "items": {},
                  "type": "array"
                }
              },
              "required": ["values"],
              "type": "object"
            }
          }
        },
        "summary": "Text - Remove Duplicate Values"
      }
    },
    "/text/text-replace": {
      "post": {
        "description": "Text Replace",
        "operationId": "TextTextReplace",
        "parameters": [{
            "description": "The body request",
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "replace": {
                  "description": "The string we should replace the found text with",
                  "example": "Changed",
                  "title": "Replace",
                  "type": "string"
                },
                "search": {
                  "description": "Specify the string to search for",
                  "example": "Lorem",
                  "title": "Search",
                  "type": "string"
                },
                "text": {
                  "description": "The string we will replace with",
                  "example": "Lorem ipsom, dollar amet",
                  "title": "Replace With",
                  "type": "string"
                }
              },
              "required": ["text", "search", "replace"],
              "type": "object"
            }
          },
          {
            "default": "application/json",
            "description": "The content type to be sent to OptiAPI",
            "enum": ["application/json"],
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string",
            "x-ms-summary": "Content-Type",
            "x-ms-visibility": "internal"
          }
        ],
        "responses": {
          "200": {
            "description": "The returned response from the server (OK)",
            "headers": {},
            "schema": {
              "properties": {
                "text": {
                  "type": "string"
                }
              },
              "required": ["text"],
              "type": "object"
            }
          }
        },
        "summary": "Text - Text Replace"
      }
    }
  },
  "produces": ["application/json"],
  "responses": {},
  "schemes": ["https"],
  "security": [{
    "API Key": []
  }],
  "securityDefinitions": {
    "API Key": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "tags": []
}