{
  "swagger": "2.0",
  "info": {
    "description": "Celonis EMS integration to get Knowledge Models, records, KPIs and filters",
    "title": "Celonis",
    "version": "1.4.0",
    "x-audience": "EX",
    "contact": {
      "name": "Celonis Support",
      "url": "https://developer.celonis.com/",
      "email": "intelligence-api-feedback-sc@celonis.de"
    }
  },
  "host": "procurement-now.try.celonis.cloud",
  "basePath": "/intelligence",
  "schemes": [
    "https"
  ],
  "paths": {
    "/api/knowledge-models": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 0,
            "description": "The page number of the result, starting by 0 (first page)",
            "in": "query",
            "minimum": 0,
            "name": "page",
            "x-ms-summary": "Page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 50,
            "description": "The number of items returned in a page.",
            "in": "query",
            "minimum": 1,
            "name": "pageSize",
            "x-ms-summary": "Page Size",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Defines the strategy to proceed for case insensitive sorting. It must be just one field, and it should start with \"+\" to apply ASC order or \"-\" to apply DESC order. Non prefix will sort as ASC. Non existing field at the header will throw an error",
            "in": "query",
            "name": "sort",
            "x-ms-summary": "Sorting",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Knowledge Model ids and names",
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "published": {
                        "type": "string",
                        "description": "published"
                      },
                      "id": {
                        "type": "string",
                        "description": "id"
                      },
                      "name": {
                        "type": "string",
                        "description": "name"
                      }
                    }
                  },
                  "description": "content"
                },
                "page": {
                  "type": "integer",
                  "format": "int32",
                  "description": "page"
                },
                "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "description": "pageSize"
                },
                "total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "total"
                },
                "sort": {
                  "type": "string",
                  "description": "sort"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "429": {
            "description": "Too Many Requests.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "Schema"
        ],
        "description": "List of Knowledge Models defined in an EMS team",
        "operationId": "getKnowledgeModel",
        "summary": "Get a list of KMs"
      }
    },
    "/api/knowledge-models/{km_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "km_id",
            "x-ms-summary": "Knowledge Model ID",
            "x-ms-url-encoding": "single",
            "description": "Knowledge Model ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Top-level Knowledge Model details",
            "schema": {
              "type": "object",
              "properties": {
                "extendedKMId": {
                  "type": "string",
                  "description": "extendedKMId"
                },
                "id": {
                  "type": "string",
                  "description": "id"
                },
                "name": {
                  "type": "string",
                  "description": "name"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "429": {
            "description": "Too Many Requests.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "Schema"
        ],
        "description": "Knowledge Model defined in an EMS team",
        "operationId": "getKnowledgeModelDetails",
        "summary": "Get the top-level KM details"
      }
    },
    "/api/knowledge-models/{km_id}/filters": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 0,
            "description": "The page number of the result, starting by 0 (first page)",
            "in": "query",
            "minimum": 0,
            "name": "page",
            "x-ms-summary": "Page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 50,
            "description": "The number of items returned in a page.",
            "in": "query",
            "minimum": 1,
            "name": "pageSize",
            "x-ms-summary": "Page Size",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Defines the strategy to proceed for case insensitive sorting. It must be just one field, and it should start with \"+\" to apply ASC order or \"-\" to apply DESC order. Non prefix will sort as ASC. Non existing field at the header will throw an error",
            "in": "query",
            "name": "sort",
            "x-ms-summary": "Sorting",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "name": "km_id",
            "x-ms-summary": "Knowledge Model ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "description": "Knowledge Model ID",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Filter ids and names",
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "id"
                      },
                      "name": {
                        "type": "string",
                        "description": "name"
                      },
                      "description": {
                        "type": "string",
                        "description": "description"
                      }
                    }
                  },
                  "description": "content"
                },
                "page": {
                  "type": "integer",
                  "format": "int32",
                  "description": "page"
                },
                "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "description": "pageSize"
                },
                "total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "total"
                },
                "sort": {
                  "type": "string",
                  "description": "sort"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "429": {
            "description": "Too Many Requests.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "Schema"
        ],
        "description": "List of Filters for the Knowledge Model",
        "operationId": "getFilters",
        "summary": "Get a list of KM Filters"
      }
    },
    "/api/knowledge-models/{km_id}/records": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 0,
            "description": "The page number of the result, starting by 0 (first page)",
            "in": "query",
            "minimum": 0,
            "name": "page",
            "x-ms-summary": "Page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 50,
            "description": "The number of items returned in a page.",
            "in": "query",
            "minimum": 1,
            "name": "pageSize",
            "x-ms-summary": "Page Size",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Defines the strategy to proceed for case insensitive sorting. It must be just one field, and it should start with \"+\" to apply ASC order or \"-\" to apply DESC order. Non prefix will sort as ASC. Non existing field at the header will throw an error",
            "in": "query",
            "name": "sort",
            "x-ms-summary": "Sorting",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "name": "km_id",
            "x-ms-summary": "Knowledge Model ID",
            "x-ms-url-encoding": "single",
            "description": "Knowledge Model ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Record ids and names",
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "id"
                      },
                      "name": {
                        "type": "string",
                        "description": "name"
                      },
                      "description": {
                        "type": "string",
                        "description": "description"
                      }
                    }
                  },
                  "description": "content"
                },
                "page": {
                  "type": "integer",
                  "format": "int32",
                  "description": "page"
                },
                "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "description": "pageSize"
                },
                "total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "total"
                },
                "sort": {
                  "type": "string",
                  "description": "sort"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "429": {
            "description": "Too Many Requests.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "Schema"
        ],
        "description": "List of Records schema",
        "operationId": "getRecords",
        "summary": "Get a list of KM Records schema"
      }
    },
    "/api/knowledge-models/{km_id}/records/{record_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "km_id",
            "x-ms-summary": "Knowledge Model ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "Knowledge Model ID"
          },
          {
            "in": "path",
            "name": "record_id",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "Record ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Top-level Record Schema details",
            "schema": {
              "type": "object",
              "properties": {
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "id"
                      },
                      "name": {
                        "type": "string",
                        "description": "name"
                      },
                      "type": {
                        "type": "string",
                        "description": "type"
                      },
                      "format": {
                        "type": "string",
                        "description": "format"
                      },
                      "unit": {
                        "type": "string",
                        "description": "unit"
                      }
                    }
                  },
                  "description": "fields"
                },
                "id": {
                  "type": "string",
                  "description": "id"
                },
                "name": {
                  "type": "string",
                  "description": "name"
                },
                "description": {
                  "type": "string",
                  "description": "description"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "429": {
            "description": "Too Many Requests.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "Schema"
        ],
        "description": "Top-level Record Schema details",
        "operationId": "getRecordDetails",
        "summary": "Get the top-level KM Record Schema details"
      }
    },
    "/api/knowledge-models/{km_id}/records/{record_id}/data": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "km_id",
            "x-ms-summary": "Knowledge Model ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "Knowledge Model ID"
          },
          {
            "in": "path",
            "name": "record_id",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "Record ID"
          },
          {
            "collectionFormat": "csv",
            "in": "query",
            "items": {
              "type": "string"
            },
            "description": "A predefined filter id",
            "name": "filters",
            "x-ms-summary": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "allowEmptyValue": false,
            "collectionFormat": "csv",
            "in": "query",
            "items": {
              "type": "string"
            },
            "description": "A predefined filter id",
            "name": "fields",
            "x-ms-summary": "Field IDs",
            "required": true,
            "type": "array"
          },
          {
            "default": 0,
            "description": "The page number of the result, starting by 0 (first page)",
            "in": "query",
            "minimum": 0,
            "name": "page",
            "x-ms-summary": "Page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 50,
            "description": "The number of items returned in a page.",
            "in": "query",
            "minimum": 1,
            "name": "pageSize",
            "x-ms-summary": "Page Size",
            "required": false,
            "type": "integer"
          },
          {
            "collectionFormat": "csv",
            "description": "Defines the strategy to proceed for sorting. It must be a comma separated list of fields, and they should start with \"+\" to apply ASC order or \"-\" to apply DESC order. Fields with no prefix will be sorted as ASC. Non existing fields at the header will throw an error",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "sort",
            "x-ms-summary": "Sorting",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "csv",
            "in": "query",
            "items": {
              "type": "string"
            },
            "description": "Dynamic filter expressions",
            "name": "filterExpr",
            "required": false,
            "x-ms-summary": "Filter Expression",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Record data",
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "object",
                  "properties": {
                    "headers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "id"
                          },
                          "name": {
                            "type": "string",
                            "description": "name"
                          },
                          "type": {
                            "type": "string",
                            "description": "type"
                          },
                          "format": {
                            "type": "string",
                            "description": "format"
                          },
                          "unit": {
                            "type": "string",
                            "description": "unit"
                          },
                          "aggregation": {
                            "type": "boolean",
                            "description": "aggregation"
                          },
                          "filterable": {
                            "type": "boolean",
                            "description": "filterable"
                          },
                          "sortable": {
                            "type": "boolean",
                            "description": "sortable"
                          }
                        }
                      },
                      "description": "headers"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "CONSTRUCTION": {
                            "type": "string",
                            "description": "CONSTRUCTION"
                          }
                        }
                      },
                      "description": "data"
                    }
                  },
                  "description": "content"
                },
                "page": {
                  "type": "integer",
                  "format": "int32",
                  "description": "page"
                },
                "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "description": "pageSize"
                },
                "total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "total"
                },
                "sort": {
                  "type": "array",
                  "items": {},
                  "description": "sort"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "429": {
            "description": "Too Many Requests.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "Data"
        ],
        "description": "Data for a Record in the Knowledge Model",
        "operationId": "getRecordDataResult",
        "summary": "Get a list of KM Record data"
      }
    }
  },
  "definitions": {
    "authErrorDTO": {
      "properties": {
        "error": {
          "type": "string"
        }
      },
      "title": "Authentication Error",
      "type": "object"
    },
    "errorDTO": {
      "description": "This [RFC7807] specification is to define common error formats for those applications that need one, so that they aren't required to define their own, or worse, tempted to redefine the semantics of existing HTTP status codes. This definition was copied from https://datatracker.ietf.org/doc/html/rfc7807",
      "properties": {
        "detail": {
          "description": "The details of the Error",
          "type": "string"
        },
        "errorCode": {
          "description": "Unique Identifier of the Error",
          "type": "string"
        },
        "status": {
          "description": "The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. This definition was copied from https://datatracker.ietf.org/doc/html/rfc7807",
          "type": "integer"
        },
        "title": {
          "description": "A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4). This definition was copied from https://datatracker.ietf.org/doc/html/rfc7807",
          "type": "string"
        },
        "type": {
          "description": "A URI reference [RFC3986] that identifies the problem type. This definition was copied from https://datatracker.ietf.org/doc/html/rfc7807",
          "type": "string"
        }
      },
      "title": "Error",
      "type": "object"
    },
    "filterDTO": {
      "description": "Filter to apply in a KM",
      "properties": {
        "description": {
          "description": "Human understandable Filter description",
          "example": "Materials we purchased over the past 24 months.",
          "type": "string"
        },
        "id": {
          "description": "Filter's Unique identifier",
          "example": "24M_FILTER",
          "type": "string"
        },
        "name": {
          "description": "Human understandable Filter display name",
          "example": "24 Months",
          "type": "string"
        }
      },
      "title": "Filter",
      "type": "object"
    },
    "filterResultPage": {
      "additionalProperties": false,
      "properties": {
        "content": {
          "items": {
            "$ref": "#/definitions/filterDTO"
          },
          "type": "array"
        }
      },
      "title": "Filter schema result page",
      "type": "object"
    },
    "knowledgeModelDetailedDTO": {
      "description": "Knowledge Model data's structure",
      "properties": {
        "extendedKMId": {
          "description": "Knowledge model used as reference, KM base.",
          "example": "open-purchase-requisition.purchase-requisition-km-base",
          "type": "string"
        }
      },
      "title": "Knowledge Model",
      "type": "object"
    },
    "knowledgeModelIdDTO": {
      "description": "Knowledge Model id and name",
      "properties": {
        "id": {
          "description": "Unique Identifier of Knowledge Model",
          "example": "open-purchase-requisition.purchase-requisition-km",
          "type": "string"
        },
        "name": {
          "description": "Human understandable text",
          "example": "Purchase Requisition KM",
          "type": "string"
        }
      },
      "title": "Knowledge Model Identifier",
      "type": "object"
    },
    "knowledgeModelResultPage": {
      "additionalProperties": false,
      "properties": {
        "content": {
          "items": {
            "$ref": "#/definitions/knowledgeModelSimplifiedDTO"
          },
          "type": "array"
        }
      },
      "title": "KnowledgeModel result page",
      "type": "object"
    },
    "knowledgeModelSimplifiedDTO": {
      "description": "Knowledge Model data's structure",
      "properties": {
        "published": {
          "description": "Latest published date",
          "example": "2023-04-19 11:29:45",
          "type": "string"
        }
      },
      "title": "Knowledge Model",
      "type": "object"
    },
    "recordDTO": {
      "description": "Record represents a concept inside a Knowledge Model",
      "properties": {
        "fields": {
          "example": [
            {
              "format": "",
              "id": "material_name",
              "name": "Material Name",
              "type": "string",
              "unit": ""
            },
            {
              "format": "",
              "id": "material_number",
              "name": "Material Number",
              "type": "string",
              "unit": ""
            },
            {
              "format": "",
              "id": "material_group",
              "name": "Material Group",
              "type": "string",
              "unit": ""
            }
          ],
          "items": {
            "$ref": "#/definitions/recordFieldDTO"
          },
          "type": "array"
        }
      },
      "title": "Record Type",
      "type": "object"
    },
    "recordFieldDTO": {
      "description": "Fields for a Record",
      "properties": {
        "format": {
          "description": "Format to be applied",
          "example": "#.###",
          "type": "string"
        },
        "id": {
          "description": "Amount pending to pay",
          "example": "payment_amount",
          "type": "string"
        },
        "name": {
          "description": "human understandable name",
          "example": "Amount in euros pending to pay",
          "type": "string"
        },
        "type": {
          "enum": [
            "string",
            "date",
            "integer",
            "boolean",
            "number",
            "datetime",
            "timestamp",
            "float"
          ],
          "type": "string"
        },
        "unit": {
          "description": "Unit added to field value",
          "example": "euros",
          "type": "string"
        }
      },
      "title": "Record Type Field",
      "type": "object"
    },
    "recordIdDTO": {
      "description": "Record Type's id and name",
      "properties": {
        "description": {
          "description": "Record description",
          "example": "Materials that have been purchased.",
          "type": "string"
        },
        "id": {
          "description": "Record's Unique identifier",
          "example": "MATERIALS",
          "type": "string"
        },
        "name": {
          "description": "Record display name, a human understandable name",
          "example": "Materials",
          "type": "string"
        }
      },
      "title": "Record Type Identifier",
      "type": "object"
    },
    "recordItemDTO": {
      "properties": {
        "data": {
          "description": "List of record item, compound with name and value",
          "items": {
            "additionalProperties": {},
            "example": [
              {
                "material_group": "Services",
                "material_name": "PC Installation / Configuration",
                "material_number": "I-1000"
              }
            ]
          },
          "type": "array"
        },
        "headers": {
          "example": [
            {
              "aggregation": false,
              "filterable": true,
              "format": "",
              "id": "material_name",
              "name": "Material name",
              "sortable": true,
              "type": "string",
              "unit": ""
            },
            {
              "aggregation": false,
              "filterable": true,
              "format": "",
              "id": "material_number",
              "name": "Material number",
              "sortable": true,
              "type": "string",
              "unit": ""
            },
            {
              "aggregation": false,
              "filterable": true,
              "format": "",
              "id": "material_group",
              "name": "Material group",
              "sortable": true,
              "type": "string",
              "unit": ""
            }
          ],
          "items": {
            "$ref": "#/definitions/recordItemHeaderDTO"
          },
          "type": "array"
        }
      },
      "title": "Record Item",
      "type": "object"
    },
    "recordItemHeaderDTO": {
      "properties": {
        "aggregation": {
          "default": false,
          "description": "Indicate if a field is a aggregation/calculated information(KPI).",
          "type": "boolean"
        },
        "filterable": {
          "default": false,
          "description": "Indicate if the field could be filtered.",
          "type": "boolean"
        },
        "format": {
          "description": "Format expression",
          "type": "string"
        },
        "id": {
          "description": "Field identity to use in field list param and filterExpression param",
          "type": "string"
        },
        "name": {
          "description": "Human understandable text",
          "type": "string"
        },
        "sortable": {
          "default": false,
          "description": "Indicate if the field could be sorted.",
          "type": "boolean"
        },
        "type": {
          "description": "Possible data types.",
          "enum": [
            "integer",
            "date",
            "time",
            "datetime",
            "timestamp",
            "float",
            "boolean",
            "string"
          ],
          "type": "string"
        },
        "unit": {
          "description": "A complementary sign for format value view",
          "type": "string"
        }
      },
      "title": "Record Item Header",
      "type": "object"
    },
    "recordResultPageDTO": {
      "additionalProperties": false,
      "properties": {
        "content": {
          "$ref": "#/definitions/recordItemDTO"
        }
      },
      "title": "Record data result page",
      "type": "object"
    },
    "recordSchemaResultPage": {
      "additionalProperties": false,
      "properties": {
        "content": {
          "items": {
            "$ref": "#/definitions/recordIdDTO"
          },
          "type": "array"
        }
      },
      "title": "Record schema result page",
      "type": "object"
    },
    "resultPage": {
      "properties": {
        "page": {
          "description": "Page",
          "example": 0,
          "type": "integer"
        },
        "pageSize": {
          "description": "Page size, defined by pageSize parameter",
          "example": 50,
          "type": "integer"
        },
        "sort": {
          "items": {
            "example": "material_number",
            "type": "string"
          },
          "type": "array"
        },
        "total": {
          "description": "Total elements returned in the page",
          "example": 1,
          "type": "integer"
        }
      },
      "title": "Result page",
      "type": "object"
    },
    "schemaResultPage": {
      "properties": {
        "page": {
          "description": "Page",
          "example": 0,
          "type": "integer"
        },
        "pageSize": {
          "description": "Page size, defined by pageSize parameter",
          "example": 50,
          "type": "integer"
        },
        "sort": {
          "description": "Field used to apply sorting to the requested data, + or no symbol means ASC, - means DESC",
          "example": "+id",
          "type": "string"
        },
        "total": {
          "description": "Total elements returned in the page",
          "example": 1,
          "type": "integer"
        }
      },
      "title": "Result page",
      "type": "object"
    }
  },
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "x-components": {
    "parameters": {
      "fieldsParam": {
        "allowEmptyValue": false,
        "collectionFormat": "csv",
        "in": "query",
        "items": {
          "description": "A predefined filter id",
          "example": "active,approval",
          "type": "string"
        },
        "name": "fields",
        "required": true,
        "type": "array"
      },
      "filterExprParam": {
        "collectionFormat": "csv",
        "in": "query",
        "items": {
          "description": "Dynamic filter expressions",
          "example": "active eq 'true',approval not eq ''",
          "type": "string"
        },
        "name": "filterExpr",
        "required": false,
        "type": "array"
      },
      "filtersParam": {
        "collectionFormat": "csv",
        "in": "query",
        "items": {
          "description": "A predefined filter id",
          "example": "active_incidents,cel_and_kpi",
          "type": "string"
        },
        "name": "filters",
        "required": false,
        "type": "array"
      },
      "pageParam": {
        "default": 0,
        "description": "The page number of the result, starting by 0 (first page)",
        "in": "query",
        "minimum": 0,
        "name": "page",
        "required": false,
        "type": "integer"
      },
      "pageSizeParam": {
        "default": 50,
        "description": "The number of items returned in a page.",
        "in": "query",
        "minimum": 1,
        "name": "pageSize",
        "required": false,
        "type": "integer"
      },
      "singleSortParam": {
        "description": "Defines the strategy to proceed for case insensitive sorting. It must be just one field, and it should start with \"+\" to apply ASC order or \"-\" to apply DESC order. Non prefix will sort as ASC. Non existing field at the header will throw an error",
        "in": "query",
        "name": "sort",
        "required": false,
        "type": "string"
      },
      "sortParam": {
        "collectionFormat": "csv",
        "description": "Defines the strategy to proceed for sorting. It must be a comma separated list of fields, and they should start with \"+\" to apply ASC order or \"-\" to apply DESC order. Fields with no prefix will be sorted as ASC. Non existing fields at the header will throw an error",
        "in": "query",
        "items": {
          "example": "+field1,-field2,field3",
          "type": "string"
        },
        "name": "sort",
        "required": false,
        "type": "array"
      }
    },
    "responses": {
      "BadRequest": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "description": "Bad Request."
      },
      "Forbidden": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "description": "Forbidden."
      },
      "InternalError": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "description": "Internal Server Error."
      },
      "NotFound": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "description": "The specified resource was not found"
      },
      "Ok": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/resultPage"
            }
          }
        },
        "description": "The resource has been fetched and transmitted in the message body"
      },
      "ServiceUnavailable": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "description": "Service Unavailable."
      },
      "TooManyRequests": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "description": "Too Many Requests."
      },
      "Unauthorized": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          }
        },
        "description": "Unauthorized access."
      }
    }
  },

  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.celonis.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.celonis.com/privacy-policy/"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "AI;Business Management"
    }
  ]
}