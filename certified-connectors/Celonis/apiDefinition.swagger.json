{
  "swagger": "2.0",
  "info": {
    "description": "Celonis Platform API to work with Knowledge Model elements, like records, KPIs, filters, triggers and their related data.",
    "title": "Celonis",
    "version": "1.25.0",
    "x-audience": "EX",
    "contact": {
      "name": "Celonis Support",
      "url": "https://developer.celonis.com/",
      "email": "intelligence-api-feedback-sc@celonis.de"
    }
  },
  "host": "procurement-now.try.celonis.cloud",
  "basePath": "/intelligence",
  "schemes": [
    "https"
  ],
  "paths": {
    "/api/knowledge-models": {
      "get": {
        "produces": [
          "application/json",
          "application/problem+json"
        ],
        "parameters": [
          {
            "default": 0,
            "description": "The page number of the result, starting by 0 (first page)",
            "in": "query",
            "minimum": 0,
            "name": "page",
            "x-ms-summary": "Page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 50,
            "description": "The number of items returned in a page.",
            "in": "query",
            "minimum": 1,
            "name": "pageSize",
            "x-ms-summary": "Page Size",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Defines the strategy to proceed for case insensitive sorting. It must be just one field, and it should start with \"+\" to apply ASC order or \"-\" to apply DESC order. Non prefix will sort as ASC. Non existing field at the header will throw an error",
            "in": "query",
            "name": "sort",
            "x-ms-summary": "Sorting",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Knowledge Model ids and names",
            "schema": {
              "$ref": "#/definitions/knowledgeModelResultPage"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "429": {
            "description": "Too Many Requests.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "Schema"
        ],
        "description": "List of Knowledge Models defined in an EMS team",
        "operationId": "getKnowledgeModel",
        "summary": "Get a list of KMs"
      }
    },
    "/api/knowledge-models/{km_id}": {
      "get": {
        "produces": [
          "application/json",
          "application/problem+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "km_id",
            "x-ms-summary": "Knowledge Model ID",
            "x-ms-url-encoding": "single",
            "description": "Knowledge Model ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Top-level Knowledge Model details",
            "schema": {
              "$ref": "#/definitions/knowledgeModelDetailedDTO"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "429": {
            "description": "Too Many Requests.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "Schema"
        ],
        "description": "Knowledge Model defined in an EMS team",
        "operationId": "getKnowledgeModelDetails",
        "summary": "Get the top-level KM details"
      }
    },
    "/api/knowledge-models/{km_id}/filters": {
      "get": {
        "produces": [
          "application/json",
          "application/problem+json"
        ],
        "parameters": [
          {
            "default": 0,
            "description": "The page number of the result, starting by 0 (first page)",
            "in": "query",
            "minimum": 0,
            "name": "page",
            "x-ms-summary": "Page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 50,
            "description": "The number of items returned in a page.",
            "in": "query",
            "minimum": 1,
            "name": "pageSize",
            "x-ms-summary": "Page Size",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Defines the strategy to proceed for case insensitive sorting. It must be just one field, and it should start with \"+\" to apply ASC order or \"-\" to apply DESC order. Non prefix will sort as ASC. Non existing field at the header will throw an error",
            "in": "query",
            "name": "sort",
            "x-ms-summary": "Sorting",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "name": "km_id",
            "x-ms-summary": "Knowledge Model ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "description": "Knowledge Model ID",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Filter ids and names",
            "schema": {
              "$ref": "#/definitions/filterResultPage"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "429": {
            "description": "Too Many Requests.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "Schema"
        ],
        "description": "List of Filters for the Knowledge Model",
        "operationId": "getFilters",
        "summary": "Get a list of KM Filters"
      }
    },
    "/api/knowledge-models/{km_id}/records": {
      "get": {
        "produces": [
          "application/json",
          "application/problem+json"
        ],
        "parameters": [
          {
            "default": 0,
            "description": "The page number of the result, starting by 0 (first page)",
            "in": "query",
            "minimum": 0,
            "name": "page",
            "x-ms-summary": "Page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 50,
            "description": "The number of items returned in a page.",
            "in": "query",
            "minimum": 1,
            "name": "pageSize",
            "x-ms-summary": "Page Size",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Defines the strategy to proceed for case insensitive sorting. It must be just one field, and it should start with \"+\" to apply ASC order or \"-\" to apply DESC order. Non prefix will sort as ASC. Non existing field at the header will throw an error",
            "in": "query",
            "name": "sort",
            "x-ms-summary": "Sorting",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "name": "km_id",
            "x-ms-summary": "Knowledge Model ID",
            "x-ms-url-encoding": "single",
            "description": "Knowledge Model ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Record ids and names",
            "schema": {
              "$ref": "#/definitions/recordSchemaResultPage"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "429": {
            "description": "Too Many Requests.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "Schema"
        ],
        "description": "List of Records schema",
        "operationId": "getRecords",
        "summary": "Get a list of KM Records schema"
      }
    },
    "/api/knowledge-models/{km_id}/records/{record_id}": {
      "get": {
        "produces": [
          "application/json",
          "application/problem+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "km_id",
            "x-ms-summary": "Knowledge Model ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "Knowledge Model ID"
          },
          {
            "in": "path",
            "name": "record_id",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "Record ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Top-level Record Schema details",
            "schema": {
              "$ref": "#/definitions/recordDTO"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "429": {
            "description": "Too Many Requests.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "Schema"
        ],
        "description": "Top-level Record Schema details",
        "operationId": "getRecordDetails",
        "summary": "Get the top-level KM Record Schema details"
      }
    },
    "/api/knowledge-models/{km_id}/records/{record_id}/data": {
      "get": {
        "produces": [
          "application/json",
          "application/problem+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "km_id",
            "x-ms-summary": "Knowledge Model ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "Knowledge Model ID"
          },
          {
            "in": "path",
            "name": "record_id",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "Record ID"
          },
          {
            "collectionFormat": "csv",
            "in": "query",
            "items": {
              "type": "string"
            },
            "description": "A predefined filter id",
            "name": "filters",
            "x-ms-summary": "Filters",
            "required": false,
            "type": "array"
          },
          {
            "allowEmptyValue": false,
            "collectionFormat": "csv",
            "in": "query",
            "items": {
              "type": "string"
            },
            "description": "A predefined filter id",
            "name": "fields",
            "x-ms-summary": "Field IDs",
            "required": true,
            "type": "array"
          },
          {
            "default": 0,
            "description": "The page number of the result, starting by 0 (first page)",
            "in": "query",
            "minimum": 0,
            "name": "page",
            "x-ms-summary": "Page",
            "required": false,
            "type": "integer"
          },
          {
            "default": 50,
            "description": "The number of items returned in a page.",
            "in": "query",
            "minimum": 1,
            "name": "pageSize",
            "x-ms-summary": "Page Size",
            "required": false,
            "type": "integer"
          },
          {
            "collectionFormat": "csv",
            "description": "Defines the strategy to proceed for sorting. It must be a comma separated list of fields, and they should start with \"+\" to apply ASC order or \"-\" to apply DESC order. Fields with no prefix will be sorted as ASC. Non existing fields at the header will throw an error",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "sort",
            "x-ms-summary": "Sorting",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "csv",
            "in": "query",
            "items": {
              "type": "string"
            },
            "description": "Dynamic filter expressions",
            "name": "filterExpr",
            "required": false,
            "x-ms-summary": "Filter Expression",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Record data",
            "schema": {
              "$ref": "#/definitions/recordResultPageDTO"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "429": {
            "description": "Too Many Requests.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "Data"
        ],
        "description": "Data for a Record in the Knowledge Model",
        "operationId": "getRecordDataResult",
        "summary": "Get a list of KM Record data"
      }
    },
    "/api/knowledge-models/{km_id}/triggers": {
      "get": {
        "produces": [
          "application/json",
          "application/problem+json"
        ],
        "parameters": [
          {
            "default": 0,
            "description": "The page number of the result, starting by 0 (first page)",
            "in": "query",
            "minimum": 0,
            "name": "page",
            "required": false,
            "x-ms-summary": "Page",
            "type": "integer"
          },
          {
            "default": 50,
            "description": "The number of items returned in a page.",
            "in": "query",
            "minimum": 1,
            "name": "pageSize",
            "required": false,
            "x-ms-summary": "Page Size",
            "type": "integer"
          },
          {
            "description": "Defines the strategy to proceed for case insensitive sorting. It must be just one field, and it should start with \"+\" to apply ASC order or \"-\" to apply DESC order. Non prefix will sort as ASC. Non existing field at the header will throw an error",
            "in": "query",
            "name": "sort",
            "required": false,
            "x-ms-summary": "Sort",
            "type": "string"
          },
          {
            "in": "path",
            "description": "The Knowledge Model Id",
            "name": "km_id",
            "required": true,
            "x-ms-summary": "Km Id",
            "x-ms-url-encoding": "single",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Triggers ids and names",
            "schema": {
              "$ref": "#/definitions/triggerResultPage"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "TriggersSchema"
        ],
        "description": "List of Triggers for the Knowledge Model",
        "operationId": "getTriggers",
        "summary": "Get a list of KM Triggers"
      }
    },
    "/api/knowledge-models/{km_id}/triggers/{trigger_id}/subscriptions": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/problem+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "km_id",
            "description": "The Knowledge Model Id",
            "required": true,
            "x-ms-url-encoding": "single",
            "x-ms-summary": "Km Id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "trigger_id",
            "description": "The Trigger Id",
            "required": true,
            "x-ms-url-encoding": "single",
            "x-ms-summary": "Trigger Id",
            "type": "string"
          },
          {
            "description": "Subscription's details",
            "in": "body",
            "name": "body",
            "required": true,
            "x-ms-summary": "Subscription Body",
            "schema": {
              "$ref": "#/definitions/subscriptionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Id of the created subscription",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "TriggersSubscriptions"
        ],
        "description": "Creates a subscription for the trigger",
        "operationId": "createSubscription",
        "summary": "Creates a subscription for the trigger"
      }
    },
    "/api/subscriptions": {
      "get": {
        "produces": [
          "application/json",
          "application/problem+json"
        ],
        "parameters": [
          {
            "default": 0,
            "description": "The page number of the result, starting by 0 (first page)",
            "in": "query",
            "minimum": 0,
            "name": "page",
            "required": false,
            "x-ms-summary": "Page",
            "type": "integer"
          },
          {
            "default": 50,
            "description": "The number of items returned in a page.",
            "in": "query",
            "minimum": 1,
            "name": "pageSize",
            "required": false,
            "x-ms-summary": "Page Size",
            "type": "integer"
          },
          {
            "description": "Defines the strategy to proceed for case insensitive sorting. It must be just one field, and it should start with \"+\" to apply ASC order or \"-\" to apply DESC order. Non prefix will sort as ASC. Non existing field at the header will throw an error",
            "in": "query",
            "name": "sort",
            "x-ms-summary": "Sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Subscription details",
            "schema": {
              "$ref": "#/definitions/subscriptionResultPage"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "TriggersSubscriptions"
        ],
        "description": "List of all Subscriptions created",
        "operationId": "getSubscriptions",
        "summary": "Get a list of Subscriptions"
      }
    },
    "/api/subscriptions/{subscription_id}": {
      "delete": {
        "produces": [
          "application/problem+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscription_id",
            "description": "The subscription Id will be deleted",
            "required": true,
            "x-ms-summary": "Subscription Id",
            "x-ms-url-encoding": "single",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Removed"
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "RemoveSubscription"
        ],
        "description": "Unsubscribe from a trigger removing all the data for the subscription",
        "operationId": "unsubscribe",
        "summary": "Unsubscribe from a trigger removing all the data for the subscription"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/problem+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscription_id",
            "description": "The subscription Id that will be entirely updated",
            "required": true,
            "x-ms-summary": "Subscription Id",
            "x-ms-url-encoding": "single",
            "type": "string"
          },
          {
            "description": "Details to update",
            "in": "body",
            "name": "body",
            "x-ms-summary": "Subscription Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/subscriptionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "UpdateSubscription"
        ],
        "description": "Updates a subscription",
        "operationId": "updateSubscription",
        "summary": "Updates a subscription"
      }
    },
    "/api/subscriptions/{subscription_id}/events": {
      "patch": {
        "produces": [
          "application/json",
          "application/problem+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscription_id",
            "description": "The subscription Id that will retrieve failed event sent, in a maximum 50 items",
            "required": true,
            "x-ms-summary": "Subscription Id",
            "x-ms-url-encoding": "single",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Signals data",
            "schema": {
              "$ref": "#/definitions/SignalResultPage"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "ReconcileData"
        ],
        "description": "Retrieves the next page of events if  they were not forwarded due to a failed subscription",
        "operationId": "nextPageFromRemainingData",
        "summary": "Retrieves the next page of events weren't forwarded due to a failed subscription"
      }
    },
    "/api/subscriptions/{subscription_id}/pause": {
      "patch": {
        "produces": [
          "application/problem+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscription_id",
            "description": "The subscription Id will be paused",
            "required": true,
            "x-ms-summary": "Subscription Id",
            "x-ms-url-encoding": "single",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Subscription was updated succeeded"
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "PauseSubscription"
        ],
        "description": "Pauses the subscription to stop receiving events",
        "operationId": "pauseSubscription",
        "summary": "Pauses the subscription to stop receiving events"
      }
    },
    "/api/subscriptions/{subscription_id}/resume": {
      "patch": {
        "produces": [
          "application/problem+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscription_id",
            "description": "The subscription Id will be resumed and start to receiving event again",
            "required": true,
            "x-ms-summary": "Subscription Id",
            "x-ms-url-encoding": "single",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Subscription was updated succeeded"
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "ResumeSubscription"
        ],
        "description": "Resumes paused subscription to start receiving events again",
        "operationId": "resumeSubscription",
        "summary": "Resumes paused subscription to start receiving events again"
      }
    },
    "/api/subscriptions/{subscription_id}/resume-from-latest": {
      "patch": {
        "produces": [
          "application/problem+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscription_id",
            "description": "The subscription Id will be resumed without receiving passed events",
            "required": true,
            "x-ms-summary": "Subscription Id",
            "x-ms-url-encoding": "single",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Subscription was updated succeeded"
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "tags": [
          "ResumeSubscription"
        ],
        "description": "Resumes paused subscription to start receiving new events again, discarding history events",
        "operationId": "resumeSubscriptionNoHistory",
        "summary": "Resumes subscription to start receiving new events, discarding history events"
      }
    }
  },
  "definitions": {
    "SignalResultPage": {
      "additionalProperties": false,
      "properties": {
        "content": {
          "items": {
            "$ref": "#/definitions/signalDTO"
          },
          "type": "array"
        },
        "pageSize": {
          "description": "Page size, defined by the system",
          "example": 50,
          "type": "integer"
        }
      },
      "title": "Signal result page",
      "type": "object"
    },
    "authErrorDTO": {
      "properties": {
        "error": {
          "type": "string"
        }
      },
      "title": "Authentication Error",
      "type": "object"
    },
    "callbackInfoDTO": {
      "properties": {
        "headers": {
          "additionalProperties": {
            "example": {
              "X-Authorization": "eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiI0Ii",
              "X-Custom-Authorization-Token": "HoJ6dlywqJWDV8e34Srj3UC4XfnFqe0"
            },
            "type": "string"
          },
          "description": "Callback headers may contain authentication token, content type, etc.",
          "type": "object"
        },
        "protocol": {
          "description": "Only value possible actually is HTTPS which means the callback URI must be a valid https",
          "enum": [
            "HTTPS"
          ],
          "example": "HTTPS",
          "type": "string"
        },
        "uri": {
          "description": "Uri to perform the callback from Intelligence API once the trigger is fired",
          "example": "https://fake.domain.es/triggers/hook",
          "maxLength": 1024,
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "uri",
        "protocol"
      ],
      "title": "Callback Information",
      "type": "object"
    },
    "configurations": {
      "description": "Configuration for the Subscription",
      "example": "SKIP_ERRORS",
      "items": {
        "enum": [
          "SKIP_ERRORS"
        ],
        "type": "string"
      },
      "type": "array"
    },
    "errorDTO": {
      "description": "This [RFC7807] specification is to define common error formats for those applications that need one, so that they aren't required to define their own, or worse, tempted to redefine the semantics of existing HTTP status codes. This definition was copied from https://datatracker.ietf.org/doc/html/rfc7807",
      "properties": {
        "detail": {
          "description": "The details of the Error",
          "type": "string"
        },
        "errorCode": {
          "description": "Unique Identifier of the Error",
          "type": "string"
        },
        "status": {
          "description": "The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. This definition was copied from https://datatracker.ietf.org/doc/html/rfc7807",
          "type": "integer"
        },
        "title": {
          "description": "A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4). This definition was copied from https://datatracker.ietf.org/doc/html/rfc7807",
          "type": "string"
        },
        "type": {
          "description": "A URI reference [RFC3986] that identifies the problem type. This definition was copied from https://datatracker.ietf.org/doc/html/rfc7807",
          "type": "string"
        }
      },
      "title": "Error",
      "type": "object"
    },
    "filterDTO": {
      "description": "Filter to apply in a KM",
      "properties": {
        "description": {
          "description": "Human understandable Filter description",
          "example": "Materials we purchased over the past 24 months.",
          "type": "string"
        },
        "id": {
          "description": "Filter's Unique identifier",
          "example": "24M_FILTER",
          "type": "string"
        },
        "name": {
          "description": "Human understandable Filter display name",
          "example": "24 Months",
          "type": "string"
        }
      },
      "title": "Filter",
      "type": "object"
    },
    "filterResultPage": {
      "properties": {
        "page": {
          "description": "Page",
          "example": 0,
          "type": "integer"
        },
        "pageSize": {
          "description": "Page size, defined by pageSize parameter",
          "example": 50,
          "type": "integer"
        },
        "sort": {
          "description": "Field used to apply sorting to the requested data, + or no symbol means ASC, - means DESC",
          "example": "+id",
          "type": "string"
        },
        "total": {
          "description": "Total elements returned in the page",
          "example": 1,
          "type": "integer"
        },
        "content": {
          "items": {
            "$ref": "#/definitions/filterDTO"
          },
          "type": "array"
        }
      },
      "title": "Filter schema result page",
      "type": "object"
    },
    "knowledgeModelDetailedDTO": {
      "description": "Knowledge Model data's structure",
      "properties": {
        "id": {
          "description": "Unique Identifier of Knowledge Model",
          "example": "open-purchase-requisition.purchase-requisition-km",
          "type": "string"
        },
        "name": {
          "description": "Human understandable text",
          "example": "Purchase Requisition KM",
          "type": "string"
        },
        "extendedKMId": {
          "description": "Knowledge model used as reference, KM base.",
          "example": "open-purchase-requisition.purchase-requisition-km-base",
          "type": "string"
        }
      },
      "title": "Knowledge Model",
      "type": "object"
    },
    "knowledgeModelIdDTO": {
      "description": "Knowledge Model id and name",
      "properties": {
        "id": {
          "description": "Unique Identifier of Knowledge Model",
          "example": "open-purchase-requisition.purchase-requisition-km",
          "type": "string"
        },
        "name": {
          "description": "Human understandable text",
          "example": "Purchase Requisition KM",
          "type": "string"
        }
      },
      "title": "Knowledge Model Identifier",
      "type": "object"
    },
    "knowledgeModelResultPage": {
      "properties": {
        "page": {
          "description": "Page",
          "example": 0,
          "type": "integer"
        },
        "pageSize": {
          "description": "Page size, defined by pageSize parameter",
          "example": 50,
          "type": "integer"
        },
        "sort": {
          "description": "Field used to apply sorting to the requested data, + or no symbol means ASC, - means DESC",
          "example": "+id",
          "type": "string"
        },
        "total": {
          "description": "Total elements returned in the page",
          "example": 1,
          "type": "integer"
        },
        "content": {
          "items": {
            "$ref": "#/definitions/knowledgeModelSimplifiedDTO"
          },
          "type": "array"
        }
      },
      "title": "KnowledgeModel result page",
      "type": "object"
    },
    "knowledgeModelSimplifiedDTO": {
      "description": "Knowledge Model data's structure",
      "properties": {
        "id": {
          "description": "Unique Identifier of Knowledge Model",
          "example": "open-purchase-requisition.purchase-requisition-km",
          "type": "string"
        },
        "name": {
          "description": "Human understandable text",
          "example": "Purchase Requisition KM",
          "type": "string"
        },
        "published": {
          "description": "Latest published date",
          "example": "2023-04-19 11:29:45",
          "type": "string"
        }
      },
      "title": "Knowledge Model",
      "type": "object"
    },
    "recordDTO": {
      "description": "Record represents a concept inside a Knowledge Model",
      "properties": {
        "description": {
          "description": "Record description",
          "example": "Materials that have been purchased.",
          "type": "string"
        },
        "id": {
          "description": "Record's Unique identifier",
          "example": "MATERIALS",
          "type": "string"
        },
        "name": {
          "description": "Record display name, a human understandable name",
          "example": "Materials",
          "type": "string"
        },
        "fields": {
          "example": [
            {
              "format": "",
              "id": "material_name",
              "name": "Material Name",
              "type": "string",
              "unit": ""
            },
            {
              "format": "",
              "id": "material_number",
              "name": "Material Number",
              "type": "string",
              "unit": ""
            },
            {
              "format": "",
              "id": "material_group",
              "name": "Material Group",
              "type": "string",
              "unit": ""
            }
          ],
          "items": {
            "$ref": "#/definitions/recordFieldDTO"
          },
          "type": "array"
        }
      },
      "title": "Record Type",
      "type": "object"
    },
    "recordFieldDTO": {
      "description": "Fields for a Record",
      "properties": {
        "format": {
          "description": "Format to be applied",
          "example": "#.###",
          "type": "string"
        },
        "id": {
          "description": "Amount pending to pay",
          "example": "payment_amount",
          "type": "string"
        },
        "name": {
          "description": "human understandable name",
          "example": "Amount in euros pending to pay",
          "type": "string"
        },
        "type": {
          "enum": [
            "string",
            "date",
            "integer",
            "boolean",
            "number",
            "datetime",
            "timestamp",
            "float"
          ],
          "type": "string"
        },
        "unit": {
          "description": "Unit added to field value",
          "example": "euros",
          "type": "string"
        }
      },
      "title": "Record Type Field",
      "type": "object"
    },
    "recordIdDTO": {
      "description": "Record Type's id and name",
      "properties": {
        "description": {
          "description": "Record description",
          "example": "Materials that have been purchased.",
          "type": "string"
        },
        "id": {
          "description": "Record's Unique identifier",
          "example": "MATERIALS",
          "type": "string"
        },
        "name": {
          "description": "Record display name, a human understandable name",
          "example": "Materials",
          "type": "string"
        }
      },
      "title": "Record Type Identifier",
      "type": "object"
    },
    "recordItemDTO": {
      "properties": {
        "data": {
          "description": "List of record item, compound with name and value",
          "items": {
            "additionalProperties": {},
            "example": [
              {
                "material_group": "Services",
                "material_name": "PC Installation / Configuration",
                "material_number": "I-1000"
              }
            ]
          },
          "type": "array"
        },
        "headers": {
          "example": [
            {
              "aggregation": "false",
              "filterable": "true",
              "format": "",
              "id": "material_name",
              "name": "Material name",
              "sortable": "true",
              "type": "string",
              "unit": ""
            },
            {
              "aggregation": "false",
              "filterable": "true",
              "format": "",
              "id": "material_number",
              "name": "Material number",
              "sortable": "true",
              "type": "string",
              "unit": ""
            },
            {
              "aggregation": "false",
              "filterable": "true",
              "format": "",
              "id": "material_group",
              "name": "Material group",
              "sortable": "true",
              "type": "string",
              "unit": ""
            }
          ],
          "items": {
            "$ref": "#/definitions/recordItemHeaderDTO"
          },
          "type": "array"
        }
      },
      "title": "Record Item",
      "type": "object"
    },
    "recordItemHeaderDTO": {
      "properties": {
        "aggregation": {
          "default": false,
          "description": "Indicate if a field is a aggregation/calculated information(KPI).",
          "type": "boolean"
        },
        "filterable": {
          "default": false,
          "description": "Indicate if the field could be filtered.",
          "type": "boolean"
        },
        "format": {
          "description": "Format expression",
          "type": "string"
        },
        "id": {
          "description": "Field identity to use in field list param and filterExpression param",
          "type": "string"
        },
        "name": {
          "description": "Human understandable text",
          "type": "string"
        },
        "sortable": {
          "default": false,
          "description": "Indicate if the field could be sorted.",
          "type": "boolean"
        },
        "type": {
          "description": "Possible data types.",
          "enum": [
            "integer",
            "date",
            "time",
            "datetime",
            "timestamp",
            "float",
            "boolean",
            "string"
          ],
          "type": "string"
        },
        "unit": {
          "description": "A complementary sign for format value view",
          "type": "string"
        }
      },
      "title": "Record Item Header",
      "type": "object"
    },
    "recordResultPageDTO": {
      "properties": {
        "page": {
          "description": "Page",
          "example": 0,
          "type": "integer"
        },
        "pageSize": {
          "description": "Page size, defined by pageSize parameter",
          "example": 50,
          "type": "integer"
        },
        "sort": {
          "items": {
            "example": "material_number",
            "type": "string"
          },
          "type": "array"
        },
        "total": {
          "description": "Total elements returned in the page",
          "example": 1,
          "type": "integer"
        },
        "content": {
          "$ref": "#/definitions/recordItemDTO"
        }
      },
      "title": "Record data result page",
      "type": "object"
    },
    "recordSchemaResultPage": {
      "properties": {
        "page": {
          "description": "Page",
          "example": 0,
          "type": "integer"
        },
        "pageSize": {
          "description": "Page size, defined by pageSize parameter",
          "example": 50,
          "type": "integer"
        },
        "sort": {
          "description": "Field used to apply sorting to the requested data, + or no symbol means ASC, - means DESC",
          "example": "+id",
          "type": "string"
        },
        "total": {
          "description": "Total elements returned in the page",
          "example": 1,
          "type": "integer"
        },
        "content": {
          "items": {
            "$ref": "#/definitions/recordIdDTO"
          },
          "type": "array"
        }
      },
      "title": "Record schema result page",
      "type": "object"
    },
    "resultPage": {
      "properties": {
        "page": {
          "description": "Page",
          "example": 0,
          "type": "integer"
        },
        "pageSize": {
          "description": "Page size, defined by pageSize parameter",
          "example": 50,
          "type": "integer"
        },
        "sort": {
          "items": {
            "example": "material_number",
            "type": "string"
          },
          "type": "array"
        },
        "total": {
          "description": "Total elements returned in the page",
          "example": 1,
          "type": "integer"
        }
      },
      "title": "Result page",
      "type": "object"
    },
    "schemaResultPage": {
      "properties": {
        "page": {
          "description": "Page",
          "example": 0,
          "type": "integer"
        },
        "pageSize": {
          "description": "Page size, defined by pageSize parameter",
          "example": 50,
          "type": "integer"
        },
        "sort": {
          "description": "Field used to apply sorting to the requested data, + or no symbol means ASC, - means DESC",
          "example": "+id",
          "type": "string"
        },
        "total": {
          "description": "Total elements returned in the page",
          "example": 1,
          "type": "integer"
        }
      },
      "title": "Result page",
      "type": "object"
    },
    "signalDTO": {
      "description": "Signal stored at subscription",
      "properties": {
        "signal": {
          "description": "Raw json of a signal",
          "example": "{attribute:value,attribute:value....}",
          "type": "string"
        },
        "subscriptionId": {
          "description": "Subscriber's Unique identifier as a SUID",
          "example": "abc-123-bad-123",
          "type": "string"
        },
        "triggerId": {
          "description": "Trigger's Unique identifier as a SUID",
          "example": "abc-123-bad-123",
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of the signal creation",
          "example": "2023-07-21T17:32:28Z"
        }
      },
      "title": "Signal stored at subscription",
      "type": "object"
    },
    "subscriptionDTO": {
      "description": "Subscription schema",
      "properties": {
        "configurations": {
          "description": "Configuration for the Subscription",
          "example": "SKIP_ERRORS",
          "items": {
            "enum": [
              "SKIP_ERRORS"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "Subscriber's Unique identifier as a SUID",
          "example": "abc-123-bad-123",
          "type": "string"
        },
        "knowledgeModelId": {
          "description": "Unique Identifier of Knowledge Model",
          "example": "open-purchase-requisition.purchase-requisition-km",
          "type": "string"
        },
        "latestSucceedEvent": {
          "description": "Date of the last succeeded event",
          "example": "2023-07-21T17:32:28Z",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "Human understandable Subscription name",
          "example": "Blocked Orders",
          "type": "string"
        },
        "status": {
          "enum": [
            "active",
            "failed",
            "suspended",
            "paused"
          ],
          "type": "string"
        },
        "triggerId": {
          "description": "Trigger's Unique identifier as a SUID",
          "example": "abc-123-bad-123",
          "type": "string"
        }
      },
      "title": "Subscription",
      "type": "object"
    },
    "subscriptionRequest": {
      "description": "Request with details to create the subscription",
      "properties": {
        "callbackInfo": {
          "properties": {
            "headers": {
              "additionalProperties": {
                "example": {
                  "X-Authorization": "eyJhbGciOiJSUzUxMiJ9.eyJzdWIiOiI0Ii",
                  "X-Custom-Authorization-Token": "HoJ6dlywqJWDV8e34Srj3UC4XfnFqe0"
                },
                "type": "string"
              },
              "description": "Callback headers may contain authentication token, content type, etc.",
              "type": "object"
            },
            "protocol": {
              "description": "Only value possible actually is HTTPS which means the callback URI must be a valid https",
              "enum": [
                "HTTPS"
              ],
              "example": "HTTPS",
              "type": "string"
            },
            "uri": {
              "description": "Uri to perform the callback from Intelligence API once the trigger is fired",
              "example": "https://fake.domain.es/triggers/hook",
              "maxLength": 1024,
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "uri",
            "protocol"
          ],
          "title": "Callback Information",
          "type": "object"
        },
        "configurations": {
          "description": "Configuration for the Subscription",
          "example": "SKIP_ERRORS",
          "items": {
            "enum": [
              "SKIP_ERRORS"
            ],
            "type": "string"
          },
          "type": "array"

        },
        "name": {
          "description": "Name for the subscription",
          "example": "My Subscription to XYZ",
          "maxLength": 1024,
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name",
        "callbackInfo"
      ],
      "title": "SubscriptionRequest",
      "type": "object"
    },
    "subscriptionResultPage": {
      "additionalProperties": false,
      "properties": {
        "page": {
          "description": "Page",
          "example": 0,
          "type": "integer"
        },
        "pageSize": {
          "description": "Page size, defined by pageSize parameter",
          "example": 50,
          "type": "integer"
        },
        "sort": {
          "description": "Field used to apply sorting to the requested data, + or no symbol means ASC, - means DESC",
          "example": "+id",
          "type": "string"
        },
        "total": {
          "description": "Total elements returned in the page",
          "example": 1,
          "type": "integer"
        },
        "content": {
          "items": {
            "$ref": "#/definitions/subscriptionDTO"
          },
          "type": "array"
        }
      },
      "title": "Subscription schema result page",
      "type": "object"
    },
    "triggerDTO": {
      "description": "Trigger defined at KM",
      "properties": {
        "id": {
          "description": "Trigger's Unique identifier as a SUID",
          "example": "abc-123-bad-123",
          "type": "string"
        },
        "name": {
          "description": "Human understandable Trigger name",
          "example": "Blocked Orders",
          "type": "string"
        },
        "record": {
          "description": "Record's Unique identifier as a SUID",
          "example": "efg-456-efg-456",
          "type": "string"
        }
      },
      "title": "Trigger",
      "type": "object"
    },
    "triggerResultPage": {
      "properties": {
        "page": {
          "description": "Page",
          "example": 0,
          "type": "integer"
        },
        "pageSize": {
          "description": "Page size, defined by pageSize parameter",
          "example": 50,
          "type": "integer"
        },
        "sort": {
          "description": "Field used to apply sorting to the requested data, + or no symbol means ASC, - means DESC",
          "example": "+id",
          "type": "string"
        },
        "total": {
          "description": "Total elements returned in the page",
          "example": 1,
          "type": "integer"
        },
        "content": {
          "items": {
            "$ref": "#/definitions/triggerDTO"
          },
          "type": "array"
        }
      },
      "title": "Trigger schema result page",
      "type": "object"
    }
  },
  "securityDefinitions": {
    "AppKeyAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "AppKey"
    },
    "BearerAuth": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    },
    "ApiKeyAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "security": [
    {
      "BearerAuth": []
    },
    {
      "ApiKeyAuth": []
    },
    {
      "AppKeyAuth": []
    }
  ],
  "x-components": {
    "parameters": {
      "fieldsParam": {
        "allowEmptyValue": false,
        "collectionFormat": "csv",
        "in": "query",
        "items": {
          "description": "A predefined filter id",
          "example": "active,approval",
          "type": "string"
        },
        "name": "fields",
        "required": true,
        "type": "array"
      },
      "filterExprParam": {
        "collectionFormat": "csv",
        "in": "query",
        "items": {
          "description": "Dynamic filter expressions",
          "example": "active eq 'true',approval not eq ''",
          "type": "string"
        },
        "name": "filterExpr",
        "required": false,
        "type": "array"
      },
      "filtersParam": {
        "collectionFormat": "csv",
        "in": "query",
        "items": {
          "description": "A predefined filter id",
          "example": "active_incidents,cel_and_kpi",
          "type": "string"
        },
        "name": "filters",
        "required": false,
        "type": "array"
      },
      "pageParam": {
        "default": 0,
        "description": "The page number of the result, starting by 0 (first page)",
        "in": "query",
        "minimum": 0,
        "name": "page",
        "required": false,
        "type": "integer"
      },
      "pageSizeParam": {
        "default": 50,
        "description": "The number of items returned in a page.",
        "in": "query",
        "minimum": 1,
        "name": "pageSize",
        "required": false,
        "type": "integer"
      },
      "singleSortParam": {
        "description": "Defines the strategy to proceed for case insensitive sorting. It must be just one field, and it should start with \"+\" to apply ASC order or \"-\" to apply DESC order. Non prefix will sort as ASC. Non existing field at the header will throw an error",
        "in": "query",
        "name": "sort",
        "required": false,
        "type": "string"
      },
      "sortParam": {
        "collectionFormat": "csv",
        "description": "Defines the strategy to proceed for sorting. It must be a comma separated list of fields, and they should start with \"+\" to apply ASC order or \"-\" to apply DESC order. Fields with no prefix will be sorted as ASC. Non existing fields at the header will throw an error",
        "in": "query",
        "items": {
          "example": "+field1,-field2,field3",
          "type": "string"
        },
        "name": "sort",
        "required": false,
        "type": "array"
      }
    },
    "responses": {
      "BadRequest": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "description": "Bad Request."
      },
      "Forbidden": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "description": "Forbidden."
      },
      "InternalError": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "description": "Internal Server Error."
      },
      "NotFound": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "description": "The specified resource was not found"
      },
      "Ok": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/resultPage"
            }
          }
        },
        "description": "The resource has been fetched and transmitted in the message body"
      },
      "ServiceUnavailable": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "description": "Service Unavailable."
      },
      "TooManyRequests": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/definitions/errorDTO"
            }
          }
        },
        "description": "Too Many Requests."
      },
      "Unauthorized": {
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/definitions/authErrorDTO"
            }
          }
        },
        "description": "Unauthorized access."
      }
    }
  },

  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.celonis.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.celonis.com/privacy-policy/"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "AI;Business Management"
    }
  ]
}