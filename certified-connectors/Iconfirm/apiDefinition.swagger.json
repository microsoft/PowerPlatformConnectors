{
  "swagger": "2.0",
  "info": {
    "title": "Iconfirm",
    "description": "Connect to Iconfirm to embed and automate your Data Governance, Risk and Compliance activities into your business operations. Efficient synchronization of information across system portfolio and value chain with automated documentation and audit logs.\n\nAsset register and vendor management, Data subjects rights management, Consent management, Pseudonymization & Master data distribution, Risk assessments, Incident management, Task management, Autogenerate data processing agreements and RoPA.",
    "termsOfService": "https://www.iconfirm.eu/iconfirm-vilkaar-betingelser/",
    "version": "1.0",
    "contact": {
      "name": "Iconfirm support",
      "email": "support@iconfirm.eu"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.iconfirm.eu/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.iconfirm.eu/en/privacy/"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Security;Collaboration"
    }
  ],
  "host": "api2.iconfirm.eu",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/v1/customtasks": {
      "get": {
        "tags": [
          "CustomTasksApi"
        ],
        "summary": "Find Custom Tasks",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of Tasks retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomTaskData"
              }
            }
          }
        },
        "operationId": "FindCustomTasks",
        "description": "Retrieves a list of all custom tasks registered."
      }
    },
    "/v1/customtasks/byId/{id}": {
      "get": {
        "tags": [
          "CustomTasksApi"
        ],
        "summary": "Get Custom Task by Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the customtask you want to retrieve.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Id of the customtask you want to retrieve.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Task retrieved successfully",
            "schema": {
              "$ref": "#/definitions/CustomTaskData"
            }
          }
        },
        "operationId": "GetCustomTaskById",
        "description": "Gets a single custom task with the given Id."
      }
    },
    "/v1/customtasks/byUuid/{uuid}": {
      "get": {
        "tags": [
          "CustomTasksApi"
        ],
        "summary": "Get Custom Task by Uuid",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "description": "Uuid of the customtask you want to retrieve.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Uuid of the customtask you want to retrieve.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Task retrieved successfully",
            "schema": {
              "$ref": "#/definitions/CustomTaskData"
            }
          }
        },
        "operationId": "GetCustomTaskByUuid",
        "description": "Get a single custom task by the given Uuid."
      }
    },
    "/v1/customtasks/updateStatus": {
      "post": {
        "tags": [
          "CustomTasksApi"
        ],
        "summary": "Update Status for Custom Task",
        "parameters": [
          {
            "in": "query",
            "name": "taskUuid",
            "description": "Uuid of the customtask you want to retrieve.",
            "type": "string",
            "x-ms-summary": "Uuid of the customtask you want to retrieve."
          },
          {
            "in": "query",
            "name": "newStatus",
            "description": "The new status to be set for the task.",
            "type": "string",
            "enum": [
              "New",
              "Active",
              "Closed"
            ],
            "required": true,
            "x-ms-summary": "The new status to be set for the task."
          },
          {
            "in": "query",
            "name": "taskId",
            "description": "Id of the customtask you want to retrieve.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Id of the customtask you want to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Taskstatus updated successfully"
          }
        },
        "operationId": "UpdateCustomTaskStatus",
        "description": "Updates the status for the given custom task, either by Uuid or Id. If no new status is defined, the status will change in the following pattern: \"New\" -> \"Active\" -> \"Closed\" -> \"Active\""
      }
    },
    "/health": {
      "get": {
        "tags": [
          "HealthCheck"
        ],
        "summary": "Verify authentication",
        "description": "Verifies that the supplied ApiKey is corrent and authentication succeeds.",
        "responses": {
          "200": {
            "description": "The user has one of the roles accepted"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "HealthCheck"
      }
    },
    "/v1/incidents": {
      "get": {
        "tags": [
          "IncidentsApi"
        ],
        "summary": "Find Incidents",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of Incidents retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IncidentReportData"
              }
            }
          }
        },
        "operationId": "FindIncidents",
        "description": "Retrieves a list of all registered incidents."
      },
      "post": {
        "tags": [
          "IncidentsApi"
        ],
        "summary": "Register incident",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "The details for incident.",
            "schema": {
              "$ref": "#/definitions/IncidentData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Incident registered"
          },
          "400": {
            "description": "Bad Request. See response body for more detials"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "RegisterIncident",
        "description": "Register new incident."
      }
    },
    "/v1/incidents/byId/{id}": {
      "get": {
        "tags": [
          "IncidentsApi"
        ],
        "summary": "Get Incident by Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the incident you want to retrieve.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Id of the incident you want to retrieve.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Incident retrieved successfully",
            "schema": {
              "$ref": "#/definitions/IncidentReportData"
            }
          }
        },
        "operationId": "GetIncidentById",
        "description": "Gets a single incident based on the given incident id."
      }
    },
    "/v1/incidents/{id}": {
      "post": {
        "tags": [
          "IncidentsApi"
        ],
        "summary": "Update incident",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the incident you want to update.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Id of the incident to be updated."
          },
          {
            "in": "body",
            "name": "data",
            "description": "The details for incident.",
            "schema": {
              "$ref": "#/definitions/IncidentData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Incident updated"
          },
          "400": {
            "description": "Bad Request. See response body for more detials"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "UpdateIncident",
        "description": "Gets a single incident based on the given incident id."
      }
    },
    "/v1/processes": {
      "get": {
        "tags": [
          "ProcessesApi"
        ],
        "summary": "Find Processes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of Processes retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProcessData"
              }
            }
          }
        },
        "operationId": "FindProcesses",
        "description": "Retrieves a list of all registered processes."
      }
    },
    "/v1/processes/byId/{id}": {
      "get": {
        "tags": [
          "ProcessesApi"
        ],
        "summary": "Get Process by Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the process you want to retrieve.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Id of the process you want to retrieve.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Process retrieved successfully",
            "schema": {
              "$ref": "#/definitions/ProcessData"
            }
          }
        },
        "operationId": "GetProcessById",
        "description": "Get a single processed based on the given process Id."
      }
    },
    "/v1/processes/riskAssessment/{id}": {
      "get": {
        "tags": [
          "ProcessesApi"
        ],
        "summary": "Get Risk Assessment by Process Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Id of the risk assessment you want to retrieve.",
            "x-ms-summary": "Id of the risk assessment you want to retrieve.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Risk assessment for process retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RiskAssessmentData"
              }
            }
          }
        },
        "operationId": "GetRiskAssessmentByProcessId",
        "description": "Get risk assessment linked to the given process by Id."
      }
    },
    "/v1/processes/register": {
      "post": {
        "tags": [
          "ProcessesApi"
        ],
        "summary": "Register Process",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The details for the process to be created.",
            "schema": {
              "$ref": "#/definitions/ProcessData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Process created"
          },
          "400": {
            "description": "Bad Request. See response body for more detials"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "RegisterProcess",
        "description": "Register a new process."
      }
    },
    "/v1/processes/update/{processId}": {
      "post": {
        "tags": [
          "ProcessesApi"
        ],
        "summary": "Update Process",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "processId",
            "description": "Id of the process to be updated.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Id of the process to be updated.",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The updated data for the process, all supplied parameters will get updated.",
            "schema": {
              "$ref": "#/definitions/ProcessData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Process updated"
          },
          "400": {
            "description": "Bad Request. See response body for more detials"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "404": {
            "description": "Process not found"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "UpdateProcess",
        "description": "Update the given process with the specified values (All non submitted fields will be overwritten)."
      }
    },
    "/v1/processingDefinitions": {
      "get": {
        "tags": [
          "ProcessingDefinitionApi"
        ],
        "summary": "Find Processing Definitions",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of processing definitions retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProcessingDefinitionObject"
              }
            }
          },
          "400": {
            "description": "Bad Request. See response body for more details"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "404": {
            "description": "Processing definition not found"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "FindProcessingDefinitions",
        "description": "Retrieves a list of all registered processing definitions."
      }
    },
    "/v1/processingDefinitions/{processingdefinitionId}": {
      "get": {
        "tags": [
          "ProcessingDefinitionApi"
        ],
        "summary": "Get processing definition by Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "processingdefinitionId",
            "description": "Uuid for the processing definition to find.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Uuid for the processing definition to find.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Processing definition found",
            "schema": {
              "$ref": "#/definitions/ProcessingDefinitionObject"
            }
          },
          "400": {
            "description": "Bad Request. See response body for more details"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "404": {
            "description": "Processing definition not found"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "GetProcessingDefinitionById",
        "description": "Gets a single processing definition based on the given Processing Definition Id."
      }
    },
    "/v1/processingDefinitions/byTag/{tag}": {
      "get": {
        "tags": [
          "ProcessingDefinitionApi"
        ],
        "summary": "Get processing definition by Tag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tag",
            "description": "Tag for the processing definition to find.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Tag for the processing definition to find.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Processing definition found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProcessingDefinitionObject"
              }
            }
          },
          "400": {
            "description": "Bad Request. See response body for more details"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "404": {
            "description": "Processing definition not found"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "GetProcessingDefinitionsByTag",
        "description": "Retrieves all processing definitions registered with the given Tag."
      }
    },
    "/v1/processingDefinitions/{processingdefinitionId}/{processingDefinitionVersion}": {
      "get": {
        "tags": [
          "ProcessingDefinitionApi"
        ],
        "summary": "Get privacy data defined for processing definition by Id and Version",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "processingdefinitionId",
            "description": "The UUID for the processing definition",
            "x-ms-summary": "The UUID for the processing definition.",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "processingDefinitionVersion",
            "description": "The Version of the processing definition",
            "x-ms-summary": "The Version of the processing definition.",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Processing definition found",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request. See response body for more details"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "404": {
            "description": "Processing definition not found"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "GetPrivacyDataForProcessingDefinition",
        "description": "Gets the defined privacy data for the specified processing definition."
      }
    },
    "/v1/recipientcustomer": {
      "get": {
        "tags": [
          "RecipientCustomersApi"
        ],
        "summary": "Find Customers",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of RecipientCustomers retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecipientCustomerData"
              }
            }
          }
        },
        "operationId": "FindRecipientCustomers",
        "description": "Retrieves a list of all registered Customers for a Global Recipient."
      }
    },
    "/v1/recipientcustomer/byId/{id}": {
      "get": {
        "tags": [
          "RecipientCustomersApi"
        ],
        "summary": "Get Customer by Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the customer you want to retrieve.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Id of the customer you want to retrieve.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "RecipientCustomer retrieved successfully",
            "schema": {
              "$ref": "#/definitions/RecipientCustomerData"
            }
          }
        },
        "operationId": "GetRecipientCustomerById",
        "description": "Gets a single customer based on the given Recipient Customer Id."
      }
    },
    "/v1/records": {
      "get": {
        "tags": [
          "RecordApi"
        ],
        "summary": "Find Records",
        "description": "Returns a one or more records.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "recordId",
            "description": "The unique uuid.",
            "type": "string",
            "x-ms-summary": "The unique uuid."
          },
          {
            "in": "query",
            "name": "recordUrl",
            "description": "The url linked to this record.",
            "type": "string",
            "x-ms-summary": "The url linked to this record."
          },
          {
            "in": "query",
            "name": "reference",
            "description": "The reference given for this record.",
            "type": "string",
            "x-ms-summary": "The reference given for this record."
          },
          {
            "in": "query",
            "name": "email",
            "description": "The email registered for this record (Exact match only).",
            "type": "string",
            "x-ms-summary": "The email registered for this record (Exact match only)."
          },
          {
            "in": "query",
            "name": "phone",
            "description": "The phone number registered for this record (Exact match only, Example: \"+479xxxxxxx\").",
            "type": "string",
            "x-ms-summary": "The phone number registered for this record."
          },
          {
            "in": "query",
            "name": "name",
            "description": "The name of the data subject for this record.",
            "type": "string",
            "x-ms-summary": "The name of the data subject for this record."
          },
          {
            "in": "query",
            "name": "status",
            "description": "The status for the record.",
            "type": "string",
            "enum": [
              "Pending",
              "Active",
              "Revoked"
            ],
            "x-ms-summary": "The status for the record."
          },
          {
            "in": "query",
            "name": "processingDefinitionId",
            "description": "The id of the processing definition used for this record.",
            "type": "string",
            "x-ms-summary": "The id of the processing definition used for this record."
          },
          {
            "in": "query",
            "name": "processingDefinitionVersion",
            "description": "The version of the processing definition used for this record.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "The version of the processing definition used for this record."
          },
          {
            "in": "query",
            "name": "nextKey",
            "description": "A link to the next set of records.",
            "type": "string",
            "x-ms-summary": "A link to the next set of records."
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Only retrieve this number of records.",
            "type": "string",
            "x-ms-summary": "Only retrieve this number of records."
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "Skip the number of records specified here.",
            "type": "string",
            "x-ms-summary": "Skip the number of records specified here."
          },
          {
            "in": "query",
            "name": "$maxPageSize",
            "description": "The number of records per page.",
            "type": "string",
            "x-ms-summary": "The number of records per page."
          },
          {
            "in": "query",
            "name": "$count",
            "description": "Display result count (\"True\" or empty).",
            "type": "string",
            "x-ms-summary": "Display result count (\"True\" or empty)."
          }
        ],
        "responses": {
          "200": {
            "description": "List of records retrieved successfully",
            "schema": {
              "$ref": "#/definitions/PagedRecordResponse"
            }
          },
          "400": {
            "description": "Bad Request. See response body for more details"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "501": {
            "description": "This search functionality has not yet been implemented"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "FindRecords"
      },
      "post": {
        "tags": [
          "RecordApi"
        ],
        "summary": "Create Record",
        "description": "Registeres a new Record with the defined Processing Definition, ensure that all your required fields are aligned within the request with the defined processing definition.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON format of the data being registered. Has to be aligned with the defined Processing Definitions Id and Version",
            "schema": {
              "$ref": "#/definitions/NewRecord"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created successfully",
            "schema": {
              "$ref": "#/definitions/RecordResponse"
            }
          },
          "400": {
            "description": "Invalid input data. See response body for more details"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "404": {
            "description": "One of the entities requested was not found"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "CreateNewRecord"
      }
    },
    "/v1/records/reminder": {
      "post": {
        "tags": [
          "RecordApi"
        ],
        "summary": "Send Reminder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON Value of the Transport type(s) to use for the reminder as well as the record id",
            "schema": {
              "$ref": "#/definitions/ReminderRecord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reminder sent",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Invalid input data. See response body for more details"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "404": {
            "description": "The record was not found"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "SendReminder",
        "description": "Send a reminder to the data subject for the given record."
      }
    },
    "/v1/records/{recordId}/updatecitizen": {
      "patch": {
        "tags": [
          "RecordApi"
        ],
        "summary": "Update Data Subject Information",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "recordId",
            "description": "The unique id for the record.",
            "required": true,
            "type": "string",
            "x-ms-summary": "The unique id for the record.",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "body",
            "description": "JSON object of parameters for the data subject that should be updated",
            "schema": {
              "$ref": "#/definitions/CitizenContactInformationChangedRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Citizen contact information updated",
            "schema": {
              "type": "boolean"
            }
          },
          "204": {
            "description": "Successful but no information updated",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Invalid input data. See response body for more details"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "404": {
            "description": "The record was not found"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "UpdateContactInformation",
        "description": "Update contact information of the Data subject by the given Record Id."
      }
    },
    "/v1/records/{recordId}/status": {
      "get": {
        "tags": [
          "RecordApi"
        ],
        "summary": "Get Record Status",
        "description": "Returns the status for a single record based on the given Record Id (Uuid).",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "recordId",
            "description": "Uuid of record to return status for.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Uuid of record to return status for.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Status retrieved for the given record",
            "schema": {
              "$ref": "#/definitions/RecordStatusResponse"
            }
          },
          "400": {
            "description": "Bad Request. See response body for more details"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "GetRecordStatusByRecordUuid"
      }
    },
    "/v1/records/addons": {
      "get": {
        "tags": [
          "RecordApi"
        ],
        "summary": "Find records",
        "description": "Returns a one or more records given an email.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "description": "The email registered for this record (Exact match only)",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of records retrieved successfully",
            "schema": {
              "$ref": "#/definitions/PagedRecordResponse"
            }
          },
          "204": {
            "description": "No records exists for this email"
          },
          "400": {
            "description": "Bad Request. See response body for more details"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "501": {
            "description": "This search functionality has not yet been implemented"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "AddonGetRecords",
        "x-ms-visibility": "internal"
      }
    },
    "/v1/records/changes": {
      "get": {
        "tags": [
          "RecordApi"
        ],
        "summary": "Get Record changes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fromDateTime",
            "description": "Include records changed after this date.",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Include records changed after this date."
          },
          {
            "in": "query",
            "name": "toDateTime",
            "description": "Include records changed before this date.",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Include records changed before this date."
          },
          {
            "in": "query",
            "name": "nextKey",
            "description": "A link to the next page of changed records.",
            "type": "string",
            "x-ms-summary": "A link to the next page of changed records."
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Only retrieve this number of records.",
            "type": "string",
            "x-ms-summary": "Only retrieve this number of records."
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "Skip the number of records specified here.",
            "type": "string",
            "x-ms-summary": "Skip the number of records specified here."
          },
          {
            "in": "query",
            "name": "$maxPageSize",
            "description": "The number of records per page.",
            "type": "string",
            "x-ms-summary": "The number of records per page."
          },
          {
            "in": "query",
            "name": "$count",
            "description": "Show total number of records for this query.",
            "type": "string",
            "x-ms-summary": "Show total number of records for this query."
          }
        ],
        "responses": {
          "200": {
            "description": "The list of changed records retrieved successfully",
            "schema": {
              "$ref": "#/definitions/PagedRecordResponse"
            }
          },
          "400": {
            "description": "Bad Request. See response body for more details"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "501": {
            "description": "This search functionality has not yet been implemented"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "GetRecordChanges",
        "description": "Retrieves changed records within an optionally given time period."
      }
    },
    "/v1/records/{recordId}/revoke": {
      "patch": {
        "tags": [
          "RecordApi"
        ],
        "summary": "Revoke Record",
        "description": "Revoked the given record by setting the status to Revoked provided with the Record Id (Uuid).",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "recordId",
            "description": "The id of the record to be revoked.",
            "required": true,
            "type": "string",
            "x-ms-summary": "The id of the record to be revoked.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Record was revoked",
            "schema": {
              "$ref": "#/definitions/RecordStatusResponse"
            }
          },
          "400": {
            "description": "Unable to revoke record. See response body for more details"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "404": {
            "description": "Record not found"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "RevokeRecord"
      }
    },
    "/v1/tasks/changes": {
      "get": {
        "tags": [
          "RecordTasksApi"
        ],
        "summary": "Get Task Changes",
        "description": "Returns all task assignments status changes within given time period.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fromDateTime",
            "description": "Tasks changed after this date.",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Tasks changed after this date."
          },
          {
            "in": "query",
            "name": "toDateTime",
            "description": "Tasks changed before this date.",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Tasks changed before this date."
          },
          {
            "in": "query",
            "name": "nextKey",
            "description": "Paging support.",
            "type": "string",
            "x-ms-summary": "Paging support."
          },
          {
            "in": "query",
            "name": "top",
            "description": "Number of changed tasks returned.",
            "type": "string",
            "x-ms-summary": "Number of changed tasks returned."
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Skip the first # of tasks.",
            "type": "string",
            "x-ms-summary": "Skip the first # of tasks."
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "The maximum number returned per page.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "The maximum number returned per page."
          },
          {
            "in": "query",
            "name": "count",
            "description": "Return the total number of tasks changed within this time period.",
            "type": "boolean",
            "x-ms-summary": "Return the total number of tasks changed within this time period."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PagedRecordTaskResponse"
            }
          },
          "204": {
            "description": "successful operation but no tasks found"
          },
          "400": {
            "description": "Bad Request"
          },
          "501": {
            "description": "Functionality is not yet implemented"
          }
        },
        "operationId": "GetTaskChanges"
      }
    },
    "/v1/tasks": {
      "get": {
        "tags": [
          "RecordTasksApi"
        ],
        "summary": "Find Task Assignments",
        "description": "Retrieves all task assignments. Searchable on task id, record id and/or task status.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "taskAssignmentId",
            "description": "The unique id for this task assignment.",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "The unique id for this task assignment."
          },
          {
            "in": "query",
            "name": "recordId",
            "description": "The unique id for a record.",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "The unique id for a record."
          },
          {
            "in": "query",
            "name": "taskAssignmentStatus",
            "description": "Search for task assignments with one or more statuses. Separate multiple with comma - like \"Active,New\".",
            "type": "string",
            "x-ms-summary": "Search for task assignments with one or more statuses."
          },
          {
            "in": "query",
            "name": "nextKey",
            "description": "Paging support.",
            "type": "string",
            "x-ms-summary": "Paging support"
          },
          {
            "in": "query",
            "name": "top",
            "description": "Number of tasks returned.",
            "type": "string",
            "x-ms-summary": "Number of tasks returned."
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Skip the first # of tasks.",
            "type": "string",
            "x-ms-summary": "Skip the first # of tasks."
          },
          {
            "in": "query",
            "name": "maxPageSize",
            "description": "The maximum number returned per page.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "The maximum number returned per page."
          },
          {
            "in": "query",
            "name": "count",
            "description": "Return the total number of tasks.",
            "type": "boolean",
            "x-ms-summary": "Return the total number of tasks."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PagedRecordTaskResponse"
            }
          },
          "204": {
            "description": "successful operation but no tasks found"
          },
          "400": {
            "description": "Bad Request"
          },
          "501": {
            "description": "Functionality is not yet implemented"
          }
        },
        "operationId": "FindTasks"
      },
      "patch": {
        "tags": [
          "RecordTasksApi"
        ],
        "summary": "Update Task Status",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "taskAssignmentId",
            "description": "The unique id for the task.",
            "type": "string",
            "x-ms-summary": "The unique id for the task."
          },
          {
            "in": "query",
            "name": "newStatus",
            "description": "The status this task should be changed to.",
            "type": "string",
            "enum": [
              "New",
              "Active",
              "Closed"
            ],
            "x-ms-summary": "The status this task should be changed to."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RecordTaskStatusResponse"
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "operationId": "UpdateTaskStatus",
        "description": "Updates status for a given task assignment."
      }
    },
    "/v1/resourcebank/riskscenario/{includeTemplates}": {
      "get": {
        "tags": [
          "ResourceBankApi"
        ],
        "summary": "Find Risk Scenarios",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "includeTemplates",
            "description": "If templates from Iconfirm should be included or not.",
            "required": true,
            "type": "boolean",
            "x-ms-summary": "If templates from Iconfirm should be included or not.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Processes retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RiskScenario"
              }
            }
          }
        },
        "operationId": "FindRiskScenarios",
        "description": "Returns a list of risk scenarios from the resourcebank, with option to include templates from the system"
      }
    },
    "/v1/resourcebank/riskscenario/byId/{id}": {
      "get": {
        "tags": [
          "ResourceBankApi"
        ],
        "summary": "Get Risk Scenario By Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the risk scenario you want to retrieve.",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-ms-summary": "Id of the risk scenario you want to retrieve.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Process retrieved successfully",
            "schema": {
              "$ref": "#/definitions/RiskScenario"
            }
          }
        },
        "operationId": "GetRiskScenarioById",
        "description": "Gets a single risk scenario based on the given Id."
      }
    },
    "/v1/resourcebank/riskscenario/byMitigatingActionId/{id}": {
      "get": {
        "tags": [
          "ResourceBankApi"
        ],
        "summary": "Get Risk Scenarios by Mitigating Action Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of mitigating action used to retrieve all linked risk scenarios.",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-ms-summary": "Id of mitigating action used to retrieve all linked risk scenarios.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Processes retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RiskScenario"
              }
            }
          }
        },
        "operationId": "GetRiskScenarioByMitigatingActionId",
        "description": "Returns all risk scenarios based the defined mitigating action id."
      }
    },
    "/v1/resourcebank/mitigatingaction/{includeTemplates}": {
      "get": {
        "tags": [
          "ResourceBankApi"
        ],
        "summary": "Find Mitigating Actions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "includeTemplates",
            "description": "If system templates should be included in the result or not.",
            "required": true,
            "type": "boolean",
            "x-ms-summary": "If system templates should be included in the result or not.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Processes retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MitigatingAction"
              }
            }
          }
        },
        "operationId": "FindMitigatingActions",
        "description": "Returns a list of mitigating actions, with option to include templates from the system."
      }
    },
    "/v1/resourcebank/mitigatingaction/byId/{id}": {
      "get": {
        "tags": [
          "ResourceBankApi"
        ],
        "summary": "Get Mitigating Action By Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the mitigating action you want to retrieve.",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-ms-summary": "Id of the mitigating action you want to retrieve.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Process retrieved successfully",
            "schema": {
              "$ref": "#/definitions/MitigatingAction"
            }
          }
        },
        "operationId": "GetMitigatingActionById",
        "description": "Retrievese a single mitigating action by Id."
      }
    },
    "/v1/resourcebank/mitigatingaction/byRiskScenarioId/{id}": {
      "get": {
        "tags": [
          "ResourceBankApi"
        ],
        "summary": "Get Mitigating Action by Risk Scenario Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of risk scenario used to retrieve all linked mitigating actions.",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-ms-summary": "Id of risk scenario used to retrieve all linked mitigating actions.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Processes retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MitigatingAction"
              }
            }
          }
        },
        "operationId": "GetMitigatingActionByRiskScenarioId",
        "description": "Returns all mitigating actions based the defined Risk Scenario id."
      }
    },
    "/v1/riskassessments": {
      "get": {
        "tags": [
          "RiskAssessmentsApi"
        ],
        "summary": "Find Risk Assessments",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of risk assessments retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RiskAssessmentData"
              }
            }
          }
        },
        "operationId": "FindRiskAssessments",
        "description": "Returns a list of all risk assessments registered."
      }
    },
    "/v1/riskassessments/byId/{id}": {
      "get": {
        "tags": [
          "RiskAssessmentsApi"
        ],
        "summary": "Get Risk Assessment by Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the risk accessment to retrieve.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Id of the risk accessment to retrieve.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Risk assessment retrieved successfully",
            "schema": {
              "$ref": "#/definitions/RiskAssessmentData"
            }
          }
        },
        "operationId": "GetRiskAssessmentById",
        "description": "Returns a single risk assessment by id."
      }
    },
    "/v1/systems": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Find Systems",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of Systems/Recipients retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SystemData"
              }
            }
          }
        },
        "operationId": "FindSystems",
        "description": "Returns a full list of all Systems/Recipients registered."
      }
    },
    "/v1/systems/byId/{id}": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Get System by Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the system you want to retrieve.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Id of the system you want to retrieve.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "System/Recipient retrieved successfully",
            "schema": {
              "$ref": "#/definitions/SystemData"
            }
          }
        },
        "operationId": "GetSystemById",
        "description": "Returns a single System/Recipient by id."
      }
    },
    "/v1/systems/byUuid/{recipientId}": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Get System by Uuid",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "recipientId",
            "description": "Uuid for the system/recipient to find.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Uuid for the system/recipient to find.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "System/Recipient found",
            "schema": {
              "$ref": "#/definitions/SystemData"
            }
          },
          "400": {
            "description": "Bad Request. See response body for more details"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "404": {
            "description": "System/recipient not found"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "GetSystemByUuid",
        "description": "Get System/Recipient by Uuid."
      }
    },
    "/v1/systems/byTag/{tag}": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Get Systems by Tag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tag",
            "description": "The tag for the system/recipient to find.",
            "required": true,
            "type": "string",
            "x-ms-summary": "The tag for the system/recipient to find.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Systems/Recipients found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SystemData"
              }
            }
          },
          "400": {
            "description": "Bad Request. See response body for more details"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "404": {
            "description": "System/recipient not found"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "GetSystemByTag",
        "description": "Find systems/recipients by Tag."
      }
    },
    "/v1/systems/register": {
      "post": {
        "tags": [
          "Systems"
        ],
        "summary": "Register System",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The details for the system to be created.",
            "schema": {
              "$ref": "#/definitions/SystemData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "System/Recipient created"
          },
          "400": {
            "description": "Bad Request. See response body for more detials"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "RegisterSystem",
        "description": "Registeres a new System/Recipient."
      }
    },
    "/v1/systems/update/{recipientId}": {
      "post": {
        "tags": [
          "Systems"
        ],
        "summary": "Update System",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "recipientId",
            "description": "Id of the recipient to be updated.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Id of the recipient to be updated.",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The updated data for the system, all supplied parameters will get updated.",
            "schema": {
              "$ref": "#/definitions/SystemData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "System/Recipient updated"
          },
          "400": {
            "description": "Bad Request. See response body for more detials"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "404": {
            "description": "System/recipient not found"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "UpdateSystem",
        "description": "Updates a new System/Recipient (All non submitted fields will be overwritten)."
      }
    },
    "/v1/systems/dpa/fulfillment/{recipientId}": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Get DPA Fulfillment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "recipientId",
            "description": "Id of the recipient to get DPA fultillment report for.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Id of the recipient to get DPA fultillment report for.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "The following fields are missing",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "operationId": "GetDpaFulfillmentBySystemId",
        "description": "Retrieves a summary of fields missing in order to generate a valid DPA from Iconfirm."
      }
    },
    "/v1/systems/dpa/generate/{recipientId}/{language}/{dpaName}": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Generate DPA",
        "parameters": [
          {
            "in": "path",
            "name": "recipientId",
            "description": "Uuid for the system/recipient.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Uuid for the system/recipient.",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "path",
            "name": "language",
            "description": "The language the DPA shall be generated with.",
            "required": true,
            "type": "string",
            "enum": [
              "NO",
              "SE",
              "DA",
              "EN"
            ],
            "x-ms-summary": "The language the DPA shall be generated with.",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "path",
            "name": "dpaName",
            "description": "The name of the generated DPA.",
            "required": true,
            "type": "string",
            "x-ms-summary": "The name of the generated DPA.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Data processing agreement generated"
          }
        },
        "operationId": "DownloadDpaBySystemId",
        "description": "Generates a Data Processing Agreement between the calling controller and the defined System/Recipient."
      }
    },
    "/v1/systems/archivingSettingsById/{id}": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Get Archiving Settings by System Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the system/recipient to retrieve the archive settings for.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Id of the system/recipient to retrieve the archive settings for.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "ArchiveSettings for System/Recipient retrieved successfully",
            "schema": {
              "$ref": "#/definitions/ArchivingSettingsData"
            }
          }
        },
        "operationId": "GetArchivingSettingsBySystemId",
        "description": "Returns the archivingsettings for a single System/Recipient."
      }
    },
    "/v1/systems/riskAssessment/{id}": {
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "Get Risk Assessment by System Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "Id of the system/recipient to retrieve risk assessment(s) for.",
            "x-ms-summary": "Id of the system/recipient to retrieve risk assessment(s) for.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Risk assessment for recipient retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RiskAssessmentData"
              }
            }
          }
        },
        "operationId": "GetRiskAssessmentBySystemId",
        "description": "Returns all Risk Assessments registered to the given Sytem."
      }
    },
    "/v1/dpia": {
      "get": {
        "tags": [
          "DpiaApi"
        ],
        "summary": "Returns a list of all registered DPIA preevaluations",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "DPIA retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Dpia"
              }
            }
          }
        },
        "operationId": "FindDpias",
        "description": "Returns a list of all registered DPIA preevaluations."
      }
    },
    "/v1/dpia/{id}": {
      "get": {
        "tags": [
          "DpiaApi"
        ],
        "summary": "Returns a DPIA preevaluation by the given Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the DPIA.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Id of the DPIA to be retrieved."
          }
        ],
        "responses": {
          "200": {
            "description": "DPIA retrieved successfully",
            "schema": {
              "$ref": "#/definitions/Dpia"
            }
          }
        },
        "operationId": "FindDpia",
        "description": "Returns a DPIA preevaluation by the given Id."
      }
    },
    "/v1/dpia/preevaluation": {
      "post": {
        "tags": [
          "DpiaApi"
        ],
        "summary": "Register a DPIA preevaluation",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "The details for DPIA pre-evaluation.",
            "schema": {
              "$ref": "#/definitions/DpiaPreevaluationData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DPIA preevalutation registered"
          },
          "400": {
            "description": "Bad Request. See response body for more detials"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "RegisterDpiaPreevaluation",
        "description": "Register a DPIA preevaluation."
      }
    },
    "/v1/dpia/preevaluation/{id}": {
      "post": {
        "tags": [
          "DpiaApi"
        ],
        "summary": "Update a DPIA preevaluation by Id with the given data",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the DPIA preevaluation to be updated",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "The id of the DPIA preevaluation to be updated"
          },
          {
            "in": "body",
            "name": "data",
            "description": "The details for DPIA pre-evaluation.",
            "schema": {
              "$ref": "#/definitions/DpiaPreevaluationData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DPIA preevalutation updated"
          },
          "400": {
            "description": "Bad Request. See response body for more detials"
          },
          "401": {
            "description": "Invalid credentials used"
          },
          "503": {
            "description": "STS Server does not respond. Unable to authenticate"
          }
        },
        "operationId": "UpdateDpiaPreevaluation",
        "description": "Update a DPIA preevaluation by Id with the given data."
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "Generic address.",
      "type": "object",
      "properties": {
        "street": {
          "description": "Gets or Sets Street",
          "type": "string"
        },
        "zipCode": {
          "description": "Gets or Sets ZipCode",
          "type": "string"
        },
        "city": {
          "description": "Gets or Sets City",
          "type": "string"
        },
        "country": {
          "description": "Gets or Sets Country",
          "type": "string"
        }
      }
    },
    "ArchivingMetaDataGroup": {
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string"
        },
        "specification": {
          "type": "string"
        }
      }
    },
    "ArchivingSerie": {
      "type": "object",
      "properties": {
        "series": {
          "type": "string"
        },
        "primaryPrincipal": {
          "type": "string"
        },
        "secondaryPrincipal": {
          "type": "string"
        }
      }
    },
    "ArchivingSettingsData": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "organizationId": {
          "format": "int32",
          "type": "integer"
        },
        "initiated": {
          "format": "date-time",
          "type": "string"
        },
        "ended": {
          "format": "date-time",
          "type": "string"
        },
        "responsiblePersonName": {
          "type": "string"
        },
        "responsiblePersonEmail": {
          "type": "string"
        },
        "responsiblePersonPhone": {
          "type": "string"
        },
        "archiveFormats": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "datasets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "discardable": {
          "type": "boolean"
        },
        "legalBaseForDiscarding": {
          "type": "string"
        },
        "tabularExtract": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "productionFormat": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "archiveContext": {
          "type": "string"
        },
        "archivingDepot": {
          "type": "string"
        },
        "transferDate": {
          "format": "date-time",
          "type": "string"
        },
        "metaDataGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArchivingMetaDataGroup"
          }
        },
        "archivingSeries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArchivingSerie"
          }
        },
        "comment": {
          "type": "string"
        },
        "discardAssessment": {
          "type": "string"
        },
        "approvedBy": {
          "type": "string"
        },
        "approvedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AssessmentType": {
      "enum": [
        "Recipient",
        "ProcessingDefinition",
        "Process"
      ],
      "type": "string"
    },
    "CitizenContactInformationChangedRequest": {
      "description": "The request object sent to the API when a change of contact information should be done.",
      "type": "object",
      "properties": {
        "reference": {
          "description": "The reference to the record",
          "type": "string"
        },
        "name": {
          "description": "The name of the citizen",
          "type": "string"
        },
        "email": {
          "description": "The email for the citizen.",
          "type": "string"
        },
        "mobilePhone": {
          "description": "The phone number for the citizen",
          "type": "string"
        },
        "street": {
          "description": "The street address for the citizen",
          "type": "string"
        },
        "zipCode": {
          "description": "The zipcode of the address for the citizen",
          "type": "string"
        },
        "city": {
          "description": "The  city of the address for the citizen",
          "type": "string"
        },
        "country": {
          "description": "The country of the address for the citizen",
          "type": "string"
        },
        "transportTypes": {
          "description": "The different communication channels used for notifications.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransportType"
          }
        }
      }
    },
    "ConsentOptionObject": {
      "description": "A spesific consent option",
      "type": "object",
      "properties": {
        "id": {
          "description": "The id of this spesific option",
          "type": "string"
        },
        "description": {
          "description": "The consent text",
          "type": "string"
        },
        "consentOptionStatus": {
          "$ref": "#/definitions/ConsentOptionStatus"
        }
      }
    },
    "ConsentOptionStatus": {
      "description": "The different statuses a consent option may have",
      "enum": [
        "Active",
        "Historical"
      ],
      "type": "string"
    },
    "Contact": {
      "description": "The base contact object being returned",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name the contact",
          "type": "string"
        },
        "email": {
          "description": "Email for the contact",
          "type": "string"
        },
        "phone": {
          "description": "Phone number for the contact",
          "type": "string"
        }
      }
    },
    "CosignerResponse": {
      "description": "Response object with information about a cosigner",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the cosigner",
          "type": "string"
        },
        "phone": {
          "description": "Mobile phone number to be used to contact the cosigner",
          "type": "string"
        },
        "email": {
          "description": "Email to be used to contact the cosigner",
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address"
        }
      }
    },
    "CustomTaskData": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "organizationId": {
          "format": "int32",
          "type": "integer"
        },
        "customTaskGuid": {
          "format": "uuid",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/CustomTaskStatus"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "duedAt": {
          "format": "date-time",
          "type": "string"
        },
        "assignedTo": {
          "$ref": "#/definitions/Contact"
        },
        "assignedToShouldBeNotified": {
          "type": "boolean"
        },
        "relatedEntityType": {
          "type": "string"
        },
        "relatedEntityId": {
          "format": "int32",
          "type": "integer"
        },
        "relatedEntityName": {
          "type": "string"
        },
        "recurringInterval": {
          "format": "int32",
          "type": "integer"
        },
        "notificationPeriod": {
          "format": "int32",
          "type": "integer"
        },
        "associatedRiskScenarioId": {
          "format": "int32",
          "type": "integer"
        },
        "riskCategory": {
          "type": "string"
        },
        "parentId": {
          "format": "int32",
          "type": "integer"
        },
        "createdBy": {
          "$ref": "#/definitions/NamedView"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "modified": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CustomTaskStatus": {
      "description": "Status for the task",
      "enum": [
        "New",
        "Active",
        "Closed"
      ],
      "type": "string"
    },
    "Dpia": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "organizationalLink": {
          "type": "string"
        },
        "relatedEntityId": {
          "format": "int32",
          "type": "integer"
        },
        "relatedEntityType": {
          "type": "string"
        },
        "involvedPeople": {
          "type": "string"
        },
        "dpiaUuid": {
          "format": "uuid",
          "type": "string"
        },
        "dpiaVersion": {
          "format": "int32",
          "type": "integer"
        },
        "isDraft": {
          "type": "boolean"
        },
        "serviceDescription": {
          "type": "string"
        },
        "responsiblePerson": {
          "$ref": "#/definitions/Contact"
        },
        "responsibleLeader": {
          "$ref": "#/definitions/Contact"
        },
        "isNewProcessingActivity": {
          "type": "boolean"
        },
        "isCollectingNewInformationOfIndividuals": {
          "type": "boolean"
        },
        "dataProvidedByOtherSourcesThenIndividualSelf": {
          "type": "boolean"
        },
        "dataSharedWithPartiesWithoutRoutineAccess": {
          "type": "boolean"
        },
        "informationUsageBeyondStorage": {
          "type": "boolean"
        },
        "isUsingNewTechnology": {
          "type": "boolean"
        },
        "processingIncludesEvaluationOrScoring": {
          "type": "boolean"
        },
        "processingIncludesAutomatedDecisions": {
          "type": "boolean"
        },
        "processingIncludesSystematicMonitoring": {
          "type": "boolean"
        },
        "processingIncludesSpecialCategoriesOrSensitiveData": {
          "type": "boolean"
        },
        "processingOnLargeScale": {
          "type": "boolean"
        },
        "processingIncludesCombiningOrCompilingDatasets": {
          "type": "boolean"
        },
        "processingOfVaulerableDataSubjects": {
          "type": "boolean"
        },
        "processingIncludesInnovativeTechnology": {
          "type": "boolean"
        },
        "processingWillPreventOrLimitSubjectRights": {
          "type": "boolean"
        },
        "processingHasLegalBasisBasedOnLaw": {
          "type": "boolean"
        },
        "legalBasisBasedOnLawDescription": {
          "type": "string"
        },
        "similarDpiaHasBeenPerformed": {
          "type": "boolean"
        },
        "similarDpiaDescription": {
          "type": "string"
        },
        "similarDpia": {
          "$ref": "#/definitions/NamedView"
        }
      }
    },
    "DpiaPreevaluationData": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "organizationalLink": {
          "type": "string"
        },
        "relatedEntityId": {
          "format": "int32",
          "type": "integer"
        },
        "relatedEntityType": {
          "type": "string"
        },
        "involvedPeople": {
          "type": "string"
        },
        "isDraft": {
          "type": "boolean"
        },
        "serviceDescription": {
          "type": "string"
        },
        "responsiblePerson": {
          "$ref": "#/definitions/Contact"
        },
        "responsibleLeader": {
          "$ref": "#/definitions/Contact"
        },
        "isNewProcessingActivity": {
          "type": "boolean"
        },
        "isCollectingNewInformationOfIndividuals": {
          "type": "boolean"
        },
        "dataProvidedByOtherSourcesThenIndividualSelf": {
          "type": "boolean"
        },
        "dataSharedWithPartiesWithoutRoutineAccess": {
          "type": "boolean"
        },
        "informationUsageBeyondStorage": {
          "type": "boolean"
        },
        "isUsingNewTechnology": {
          "type": "boolean"
        },
        "processingIncludesEvaluationOrScoring": {
          "type": "boolean"
        },
        "processingIncludesAutomatedDecisions": {
          "type": "boolean"
        },
        "processingIncludesSystematicMonitoring": {
          "type": "boolean"
        },
        "processingIncludesSpecialCategoriesOrSensitiveData": {
          "type": "boolean"
        },
        "processingOnLargeScale": {
          "type": "boolean"
        },
        "processingIncludesCombiningOrCompilingDatasets": {
          "type": "boolean"
        },
        "processingOfVaulerableDataSubjects": {
          "type": "boolean"
        },
        "processingIncludesInnovativeTechnology": {
          "type": "boolean"
        },
        "processingWillPreventOrLimitSubjectRights": {
          "type": "boolean"
        },
        "processingHasLegalBasisBasedOnLaw": {
          "type": "boolean"
        },
        "legalBasisBasedOnLawDescription": {
          "type": "string"
        },
        "similarDpiaHasBeenPerformed": {
          "type": "boolean"
        },
        "similarDpiaDescription": {
          "type": "string"
        }
      }
    },
    "ErasureTrigger": {
      "description": "Erasure triggers for a category",
      "enum": [
        "expiration",
        "instruction",
        "contractexpiration",
        "contractexpirationarchive",
        "archiveexpiration",
        "warrantyexpiration",
        "expirationpublictask",
        "optout",
        "expiredlegitimateinterest",
        "optoutlegitimateinterest",
        "notdefined"
      ],
      "type": "string"
    },
    "FullSubprocessorObject": {
      "description": "Subprocessor details",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the subprocessor",
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "description": "The Uuid of the subprocessor (leave blank when registering a new one)",
          "type": "string"
        },
        "orgNr": {
          "description": "Organizational number for the subprocessor",
          "type": "string"
        },
        "address": {
          "description": "The address of the subprocessor",
          "type": "string"
        },
        "processing": {
          "description": "What/How are this subprocessor processing data",
          "type": "string"
        },
        "allowChange": {
          "description": "Are changes to this subprocessor allowed?",
          "type": "boolean"
        },
        "notifyWithinDays": {
          "format": "int32",
          "description": "How many days prior to change should you be notified of changes made to the subprocessor",
          "type": "integer"
        },
        "processingCountries": {
          "description": "What countries are the subprocessor processing data in (International ISO standard 2 letter abreviation, Comma seperated list)",
          "type": "string"
        },
        "allowChangeOfProcessingCountries": {
          "description": "Are changes to processing countries allowed?",
          "type": "boolean"
        },
        "isProcessingSensitiveData": {
          "description": "Is this subprocessor processing sensitive data?",
          "type": "boolean"
        }
      }
    },
    "Incident": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "$ref": "#/definitions/AssessmentType"
        },
        "specialCategoriesOfPersonalData": {
          "type": "boolean"
        },
        "descriptionOfSpecialCategories": {
          "type": "string"
        },
        "relatedEntityName": {
          "type": "string"
        },
        "numberOfAffectedRecords": {
          "format": "int32",
          "type": "integer"
        },
        "relatedEntityId": {
          "format": "int32",
          "type": "integer"
        },
        "hasRiskAssessment": {
          "type": "boolean"
        },
        "incident2IncidentReport": {
          "$ref": "#/definitions/Incidents2IncidentReport"
        }
      }
    },
    "IncidentData": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "discoveredDate": {
          "format": "date-time",
          "type": "string"
        },
        "occurredDate": {
          "format": "date-time",
          "type": "string"
        },
        "breachDescription": {
          "type": "string"
        },
        "analysisDescription": {
          "type": "string"
        },
        "actionDescription": {
          "type": "string"
        }
      }
    },
    "IncidentReportData": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "authorsOrganizationId": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "reportGuid": {
          "format": "uuid",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/IncidentReportStatus"
        },
        "analysisDate": {
          "format": "date-time",
          "type": "string"
        },
        "discovered": {
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "updated": {
          "format": "date-time",
          "type": "string"
        },
        "who": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "sender": {
          "type": "string"
        },
        "dataAuthority": {
          "type": "string"
        },
        "dataAuthorityEmail": {
          "type": "string"
        },
        "natureOfBreach": {
          "type": "string"
        },
        "impactAssessment": {
          "type": "string"
        },
        "impactAssessmentDescription": {
          "type": "string"
        },
        "contactDetails": {
          "type": "string"
        },
        "likelyConsequences": {
          "type": "string"
        },
        "measuresTaken": {
          "type": "string"
        },
        "distributeToAuthority": {
          "type": "boolean"
        },
        "distributeInternally": {
          "type": "boolean"
        },
        "internalDistributionRecipients": {
          "type": "string"
        },
        "pdfDocument": {
          "type": "string"
        },
        "incidents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Incident"
          }
        },
        "reportVersion": {
          "format": "int32",
          "type": "integer"
        },
        "organizationalLink": {
          "type": "string"
        },
        "riskLink": {
          "type": "string"
        },
        "responsiblePersonName": {
          "type": "string"
        },
        "responsiblePersonEmail": {
          "type": "string"
        },
        "responsiblePersonPhone": {
          "type": "string"
        },
        "riskLevel": {
          "type": "string"
        },
        "highRiskNotificationMessage": {
          "type": "string"
        },
        "incidents2IncidentReport": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Incidents2IncidentReport"
          }
        }
      }
    },
    "IncidentReportStatus": {
      "enum": [
        "New",
        "InProgress",
        "Completed",
        "Discarded"
      ],
      "type": "string"
    },
    "Incidents2IncidentReport": {
      "type": "object",
      "properties": {
        "incidentReportId": {
          "format": "int32",
          "type": "integer"
        },
        "incidentReport": {
          "$ref": "#/definitions/IncidentReportData"
        },
        "incidentId": {
          "format": "int32",
          "type": "integer"
        },
        "incident": {
          "$ref": "#/definitions/Incident"
        }
      }
    },
    "JointController": {
      "description": "Joint controller details",
      "type": "object",
      "properties": {
        "organizationName": {
          "description": "The name of the Joint controller",
          "type": "string"
        },
        "organizationNumber": {
          "description": "Organizational number for the joint controller",
          "type": "string"
        },
        "contact": {
          "$ref": "#/definitions/Contact"
        },
        "description": {
          "description": "Description of the joint controller",
          "type": "string"
        }
      }
    },
    "MitigatingAction": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "organizationId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "implementationType": {
          "$ref": "#/definitions/MitigatingActionImplementationType"
        },
        "type": {
          "$ref": "#/definitions/MitigatingActionType"
        },
        "reference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MitigatingActionReference"
          }
        },
        "category": {
          "$ref": "#/definitions/MitigatingActionCategory"
        },
        "associatedRisks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskScenario"
          }
        }
      }
    },
    "MitigatingActionCategory": {
      "enum": [
        "Discover",
        "Prevent",
        "Remedy"
      ],
      "type": "string"
    },
    "MitigatingActionImplementationType": {
      "enum": [
        "Basic",
        "Professional",
        "Advanced"
      ],
      "type": "string"
    },
    "MitigatingActionReference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "linkDescription": {
          "type": "string"
        }
      }
    },
    "MitigatingActionType": {
      "enum": [
        "Organizational",
        "Technical"
      ],
      "type": "string"
    },
    "NamedView": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "NewRecord": {
      "description": "Data expected to create a new consent",
      "required": [
        "privacyData",
        "processingDefinition"
      ],
      "type": "object",
      "properties": {
        "recipients": {
          "description": "The recipients which should be linked to this consent.",
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "processingDefinition": {
          "$ref": "#/definitions/ProcessingDefinitionRecordRequest"
        },
        "reference": {
          "description": "The reference number which is used internally by the customer.",
          "type": "string",
          "example": "NO20180701_12"
        },
        "transportTypes": {
          "description": "The different communication channels used for notifications.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransportType"
          }
        },
        "privacyData": {
          "description": "Privacy data for this consent.",
          "title": "privacyData",
          "type": "string"
        },
        "isManualConsent": {
          "description": "Will this be consented manually by a case worker",
          "type": "boolean"
        },
        "cosigners": {
          "description": "A list of all cosigners on a record",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CosignerResponse"
          }
        },
        "cosignersRequired": {
          "description": "Cosigners are required for the registration.\r\nThis setting overrides the settings on the processing definition if it is configured not to require cosigners.\r\nIt is not possible to leave out cosigners on processing definitions where cosigners are required.",
          "type": "boolean"
        },
        "requiredNumberOfCosigners": {
          "format": "int32",
          "description": "The required number of co-signers (0, 1 or 2)",
          "type": "integer"
        },
        "onlySignedByCosigners": {
          "description": "Only the cosigners should sign.",
          "type": "boolean"
        }
      },
      "example": {
        "ProcessingDefinition": {
          "Id": "00000000-0000-0000-0000-000000000000",
          "Version": 1
        },
        "Reference": "Ref_id_1",
        "TransportTypes": [
          "SMS",
          "Email"
        ],
        "CosignersRequired": false,
        "RequiredNumberOfCosigners": 0,
        "OnlySignedByCosigners": false,
        "PrivacyData": {
          "Name": "John Doe",
          "Email": "john@doe.com",
          "Phone": "77777777",
          "Address": {
            "Street": "My Way 1",
            "City": "OSLO",
            "ZipCode": "4343X3",
            "Country": "Norway"
          },
          "AdditionalInformation": {
            "Car registration id": "KE10000"
          }
        },
        "Recipients": [
          "fe495982-d0a5-4add-9c1f-bf2ec286e230",
          "20eb0590-a371-4f19-bc5f-3e30d844c22f"
        ],
        "Cosigners": [
          {
            "Name": "John Doe's Guardian",
            "Email": "john@doe.com",
            "Phone": "77777777",
            "Address": {
              "Street": "My Way 1",
              "City": "OSLO",
              "ZipCode": "4343X3",
              "Country": "Norway"
            }
          }
        ]
      }
    },
    "NotificationInterval": {
      "description": "The given interval for notifications to be issued/sent",
      "enum": [
        "NoNotifications",
        "Individual",
        "Daily",
        "EveryOtherDay",
        "EveryThirdDay",
        "Weekly",
        "EveryOtherWeek",
        "Monthly",
        "NA"
      ],
      "type": "string"
    },
    "PagedRecordResponse": {
      "description": "The response object handling paging",
      "type": "object",
      "properties": {
        "responseContent": {
          "description": "The response content",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecordResponse"
          }
        },
        "nextLink": {
          "description": "The link to the next set of data",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The number of records",
          "type": "integer"
        }
      }
    },
    "PagedRecordTaskResponse": {
      "description": "The response object handling paging for tasks",
      "type": "object",
      "properties": {
        "responseContent": {
          "description": "The response content",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecordTaskResponse"
          }
        },
        "nextLink": {
          "description": "The link to the next set of data",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The number of records",
          "type": "integer"
        }
      }
    },
    "PrivacyData": {
      "description": "Privacy data for the data subject",
      "type": "object",
      "properties": {
        "socialSecurityNumber": {
          "description": "Social security number",
          "type": "string"
        },
        "name": {
          "description": "Name of data subject",
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "email": {
          "description": "Email for data subject",
          "type": "string"
        },
        "phone": {
          "description": "Phone number for data subject",
          "type": "string"
        },
        "nationality": {
          "description": "Nationality of data subject",
          "type": "string"
        },
        "dateOfBirth": {
          "description": "Date of Birth of data subject",
          "type": "string"
        },
        "additionalInformation": {
          "description": "The dynamic information for a consent",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ProcessData": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "organizationId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "estimatedAmountRegistered": {
          "format": "int64",
          "type": "integer"
        },
        "processOwnerName": {
          "type": "string"
        },
        "processOwnerEmail": {
          "type": "string"
        },
        "processOwnerPhone": {
          "type": "string"
        },
        "dpiaInPlace": {
          "type": "boolean"
        },
        "dpiaDate": {
          "format": "date-time",
          "type": "string"
        },
        "specialCategoriesOfPersonalData": {
          "type": "boolean"
        },
        "specialCategoriesOfPersonalDataDescription": {
          "type": "string"
        },
        "automatedProcessing": {
          "type": "boolean"
        },
        "automatedProcessingDescription": {
          "type": "string"
        },
        "dataDeliveredToOthers": {
          "type": "boolean"
        },
        "privacyDataProvidedByOthers": {
          "type": "boolean"
        },
        "privacyDataProvidedByOthersDesc": {
          "type": "string"
        },
        "dataDeliveredToOthersDescription": {
          "type": "string"
        },
        "dataProcessedOutsideEU": {
          "type": "boolean"
        },
        "dataDeliveredToCountries": {
          "type": "string"
        },
        "dataStorageSafeguards": {
          "type": "string"
        },
        "securityOfProcessing": {
          "type": "string"
        },
        "otherDetails": {
          "type": "string"
        },
        "externalRegistrationCategories": {
          "type": "string"
        },
        "personalDataCategories": {
          "type": "string"
        },
        "balanceTest": {
          "type": "string"
        },
        "associatedRecipients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedView"
          }
        },
        "purposes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurposeObject"
          }
        },
        "datasets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "organizationalLink": {
          "type": "string"
        },
        "informationalValue": {
          "format": "int32",
          "type": "integer"
        },
        "riskAssessmentPerformed": {
          "type": "boolean"
        },
        "processingChildrenData": {
          "type": "boolean"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "modified": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ProcessingDefinitionDto": {
      "description": "Processing definition dto",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "Id for the processing definition",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "description": "The version number of this processing definition",
          "type": "integer"
        },
        "processingDefinitionId": {
          "format": "uuid",
          "description": "The id referring to the sets of processing definition which differs by version number",
          "type": "string"
        },
        "name": {
          "description": "Name of processing definition",
          "type": "string"
        },
        "cosignersRequired": {
          "description": "Does the processing definition require co-signers",
          "type": "boolean"
        },
        "onlySignedByCosigners": {
          "description": "If the record is only signed by the co-signer(s)",
          "type": "boolean"
        }
      }
    },
    "ProcessingDefinitionObject": {
      "description": "The processing definition object being returned",
      "type": "object",
      "properties": {
        "id": {
          "description": "The id of the returned processing definition",
          "type": "string"
        },
        "name": {
          "description": "The name of the returned processing definition",
          "type": "string"
        },
        "currentVersion": {
          "description": "The current version of returned processing definition",
          "type": "string"
        },
        "consentOptions": {
          "description": "The consent options for the returned processing definition",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConsentOptionObject"
          }
        },
        "availableVersions": {
          "description": "The available versions for the returned processing definition",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessingDefinitionVersion"
          }
        },
        "privacyData": {
          "$ref": "#/definitions/PrivacyData"
        },
        "cosignersRequired": {
          "description": "Require co-signers",
          "type": "boolean"
        },
        "requiredNumberOfCosigners": {
          "format": "int32",
          "description": "Required number of co-signers",
          "type": "integer"
        },
        "onlySignedByCosigners": {
          "description": "Records created should only be signed by the co-signer(s)",
          "type": "boolean"
        },
        "canCreate": {
          "description": "Availability for creation",
          "type": "boolean"
        },
        "tag": {
          "description": "Tag defined for the processing definition",
          "type": "string"
        }
      }
    },
    "ProcessingDefinitionRecordRequest": {
      "description": "processing definition details used in the new record request",
      "type": "object",
      "properties": {
        "version": {
          "format": "int32",
          "description": "The version number of this processing definition",
          "type": "integer"
        },
        "id": {
          "format": "uuid",
          "description": "The id referring to the sets of processing definition which differs by version number",
          "type": "string"
        },
        "cosignersRequired": {
          "description": "If you want to enable signing by cosigners for the record",
          "type": "boolean"
        },
        "onlySignedByCosigners": {
          "description": "If the record should only be signed by the cosigners",
          "type": "boolean"
        }
      }
    },
    "ProcessingDefinitionVersion": {
      "description": "One given version for a processing definition",
      "type": "object",
      "properties": {
        "version": {
          "description": "The version id",
          "type": "string"
        },
        "date": {
          "format": "date-time",
          "description": "The date this was created",
          "type": "string"
        }
      }
    },
    "PurposeLegalBasis": {
      "description": "Legal basis for a purpose object",
      "enum": [
        "Consent",
        "Contract",
        "LegalObligation",
        "VitalInterest",
        "PublicTask",
        "LegitimateInterest"
      ],
      "type": "string"
    },
    "PurposeObject": {
      "description": "Purpose",
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "relatedEntityType": {
          "type": "string"
        },
        "relatedEntityId": {
          "format": "int32",
          "type": "integer"
        },
        "purposes": {
          "type": "string"
        },
        "legalBasis": {
          "$ref": "#/definitions/PurposeLegalBasis"
        },
        "legalBasisDescription": {
          "type": "string"
        },
        "registrationCategories": {
          "type": "string"
        },
        "personalIdentifierCategories": {
          "type": "string"
        },
        "hasSpecialCategories": {
          "type": "boolean"
        },
        "specialCategory": {
          "$ref": "#/definitions/SpecialCategoryLegalBasis"
        },
        "erasureTrigger": {
          "$ref": "#/definitions/ErasureTrigger"
        },
        "erasurePeriod": {
          "type": "string"
        },
        "specialCategoryLegalBasisDescription": {
          "type": "string"
        }
      }
    },
    "RecipientCustomerData": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "The name of the system/recipient.",
          "type": "string"
        },
        "orgNo": {
          "description": "The Organizational number of the system/recipient.",
          "type": "string"
        },
        "dataHandlerAgreementExpiry": {
          "format": "date-time",
          "description": "Date and time for when the data handler agreement for this system/recipient expires.",
          "type": "string"
        },
        "phone": {
          "description": "The business phonenumber of the system/recipient.",
          "type": "string"
        },
        "email": {
          "description": "The business email of the system/recipient.",
          "type": "string"
        },
        "information": {
          "description": "General information about the system/recipient for internal documentation.",
          "type": "string"
        },
        "serviceDescription": {
          "description": "A short service description or name for the the system/recipient for use with the data processing agreement.",
          "type": "string"
        },
        "dpoContactPerson": {
          "$ref": "#/definitions/Contact"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "technologyDescription": {
          "description": "A description of the technology for the system/recipient.",
          "type": "string"
        },
        "dataStorageSafeguards": {
          "description": "The safeguards in place for the system/recipient.",
          "type": "string"
        },
        "securityOfProcessing": {
          "description": "Information about the security measures taken when processing data for the system/recipient.",
          "type": "string"
        },
        "dataProcessingAgreementInPlace": {
          "description": "If the system/recipient has a data processing agreement in place.",
          "type": "boolean"
        },
        "specialCategoriesOfPersonalData": {
          "description": "If the system/recipient processes special categories of personal data.",
          "type": "boolean"
        },
        "specialCategoriesOfPersonalDataDesc": {
          "description": "Description of the special categories of personal data the system/recipient processes.",
          "type": "string"
        },
        "automatedProcessing": {
          "description": "Is the system/recipient uses automated processing/profiling",
          "type": "boolean"
        },
        "automatedProcessingDesc": {
          "description": "Description of the automated processing/profiling",
          "type": "string"
        },
        "legalEntityName": {
          "description": "The legal name of the system/recipient.",
          "type": "string"
        },
        "systemResponsible": {
          "$ref": "#/definitions/Contact"
        },
        "externalCategories": {
          "description": "Personal data categories that are gathered for the system/recipient that is not collected within iconfirm.",
          "type": "string"
        },
        "purposes": {
          "description": "The purposes registered on the system/recipient for its nature of processing.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurposeObject"
          }
        },
        "dataDeliveredToCountries": {
          "description": "A comma seperated list of countries this system/recipient deliveres/transfers data to.",
          "type": "string"
        },
        "aidToController": {
          "description": "Description of scope as well as technical and organizational measures to provide assistance to the Controller.",
          "type": "string"
        },
        "revisionInstructionsForRecipient": {
          "description": "Description of the procedure for the controller's audits of the data processor.",
          "type": "string"
        },
        "approvedRevisionFormatRecipient": {
          "description": "Approved auditor's reports/inspection reports.",
          "type": "string"
        },
        "revisionInstructionsForSubprocessor": {
          "description": "Description of the procedure for the controller's audits of sub processors.",
          "type": "string"
        },
        "approvedRevisionFormatSubprocessor": {
          "description": "Approved auditor's reports/inspection reports for the sub processors.",
          "type": "string"
        },
        "instructionsForProcessing": {
          "description": "Instructions to the Data Processor for the processing of personal data.",
          "type": "string"
        },
        "processingArea": {
          "description": "The description of the processing area",
          "type": "string"
        },
        "consequencesIfIlligal": {
          "description": "Consequences of unlawful instructions.",
          "type": "string"
        },
        "returnDataPriorToErasureUponContractTermination": {
          "description": "If data should be deleted (false) or returned (true) by the system/recipient upon contract termination.",
          "type": "boolean"
        },
        "recipientCoversThirdPartyCosts": {
          "description": "Controller covers the costs for the data processor revisions.",
          "type": "boolean"
        },
        "recipientCoversThirdPartyCostsForSubprocessor": {
          "description": "Controller covers the costs for subprocessor revisions.",
          "type": "boolean"
        },
        "subProcessorsChangesAllowedByDefault": {
          "description": "If the system is allowed to change its subprocessors or if its has to be confirmed beforehand of change",
          "type": "boolean"
        },
        "minimumChangeNotificationPeriod": {
          "format": "int32",
          "description": "The minimum amount of days notification for change in subprocessors should be made.",
          "type": "integer"
        },
        "revisionIntervallRecipient": {
          "format": "int32",
          "description": "The interval amount of months for when revisions should be done on the system/recipient.",
          "type": "integer"
        },
        "revisionIntervallSubprocessor": {
          "format": "int32",
          "description": "The interval amount of months for when revisions should be done on the system/recipient subprocessor(s).",
          "type": "integer"
        },
        "dataBreachNotificationTime": {
          "format": "int32",
          "description": "In case of data breach, deadline for notification to the controller (hours).",
          "type": "integer"
        },
        "subprocessors": {
          "description": "Subprocessors associated with the system/recipient.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FullSubprocessorObject"
          }
        },
        "organizationalLink": {
          "description": "Which part of the organisation uses the solution.",
          "type": "string"
        },
        "allowRecipientToUseOwnOrganizationSubprocessors": {
          "description": "If the use of sub-processors within Processors own Group of companies should be allowed.",
          "type": "boolean"
        },
        "mainContract": {
          "description": "The name of the main contract(s) the system/recipient.",
          "type": "string"
        },
        "mainContractSignedAt": {
          "format": "date-time",
          "description": "The date of then the main contract for the system/recipient was signed.",
          "type": "string"
        },
        "controllerSignee": {
          "$ref": "#/definitions/SigneeContact"
        },
        "recipientSignee": {
          "$ref": "#/definitions/SigneeContact"
        },
        "dataBreachContact": {
          "$ref": "#/definitions/Contact"
        },
        "revisionsOfRecipientNotApplicateble": {
          "description": "If revisions of the recipient isn't applicateble.",
          "type": "boolean"
        },
        "revisionsOfSubprocessorsNotApplicable": {
          "description": "If revisions of the recipients subprocessor(s) isn't applicateble.",
          "type": "boolean"
        },
        "ownerId": {
          "format": "int32",
          "type": "integer"
        },
        "recipientId": {
          "format": "int32",
          "type": "integer"
        },
        "externalAccessName": {
          "type": "string"
        },
        "externalAccessPhone": {
          "type": "string"
        },
        "externalAccessEmail": {
          "type": "string"
        }
      }
    },
    "RecipientTaskResponse": {
      "description": "Information about a recipient for a record task",
      "type": "object",
      "properties": {
        "recipientId": {
          "description": "The unique id for the recipient",
          "type": "string"
        },
        "recipientName": {
          "description": "The name of the recipient",
          "type": "string"
        }
      }
    },
    "RecordResponse": {
      "description": "The response returned for a record action.",
      "type": "object",
      "properties": {
        "recordId": {
          "format": "uuid",
          "description": "The unique id for this consent",
          "type": "string"
        },
        "recordUrl": {
          "description": "The url for this consent",
          "type": "string"
        },
        "processingDefinition": {
          "$ref": "#/definitions/ProcessingDefinitionDto"
        },
        "reference": {
          "description": "The reference used by the company for this consent",
          "type": "string"
        },
        "recordStatus": {
          "description": "The consent status",
          "type": "string"
        },
        "privacyData": {
          "$ref": "#/definitions/PrivacyData"
        },
        "recipients": {
          "description": "The uuid for the recipients linked to this consent",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created": {
          "format": "date-time",
          "description": "The latest date when this was changed in a way relevant for the consumer of the API",
          "type": "string"
        },
        "changed": {
          "format": "date-time",
          "description": "The latest date when this was changed in a way relevant for the consumer of the API",
          "type": "string"
        },
        "selectedConsentOptions": {
          "description": "The consent options selected for this record",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isManualConsent": {
          "description": "Is this a record which should be handled manually by the company",
          "type": "boolean"
        },
        "cosigners": {
          "description": "A list of all the cosigners for a record",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CosignerResponse"
          }
        },
        "onlySignedByCosigners": {
          "description": "Does this record require cosigners",
          "type": "boolean"
        }
      }
    },
    "RecordStatusResponse": {
      "description": "The response class used when a record status is requested.",
      "type": "object",
      "properties": {
        "recordId": {
          "description": "The uuid for the consent",
          "type": "string"
        },
        "recordStatus": {
          "description": "The string representation of the consent status",
          "type": "string"
        }
      }
    },
    "RecordTaskResponse": {
      "description": "Properties for the changed task",
      "type": "object",
      "properties": {
        "recordId": {
          "format": "uuid",
          "description": "The id of the record associated with this record",
          "type": "string"
        },
        "recordStatus": {
          "description": "The status of the record",
          "type": "string"
        },
        "taskAssignmentId": {
          "format": "uuid",
          "description": "The unique id for this task assignment",
          "type": "string"
        },
        "taskAssignedToType": {
          "description": "If this is a record task assigned to a controller or a recipient",
          "type": "string"
        },
        "recipientAssignedToTask": {
          "$ref": "#/definitions/RecipientTaskResponse"
        },
        "recordTaskStatus": {
          "description": "The status of this task assignment",
          "type": "string"
        },
        "recordTaskType": {
          "description": "The type of task for this assignment",
          "type": "string"
        },
        "taskAssignmentCreated": {
          "format": "date-time",
          "description": "When this task assignment was created",
          "type": "string"
        },
        "taskAssignmentModified": {
          "format": "date-time",
          "description": "When this task assignment was last modified",
          "type": "string"
        }
      }
    },
    "RecordTaskStatusResponse": {
      "description": "The record task object returned with status of the task",
      "type": "object",
      "properties": {
        "recordTaskAssignmentId": {
          "format": "uuid",
          "description": "The unique id for this task",
          "type": "string"
        },
        "recordTaskStatus": {
          "description": "The current status for this task",
          "type": "string"
        }
      }
    },
    "ReminderRecord": {
      "description": "Data expected to create a new consent",
      "type": "object",
      "properties": {
        "recordId": {
          "format": "uuid",
          "description": "The unique id for the record",
          "type": "string"
        },
        "transportTypes": {
          "description": "The different communication channels used for notifications.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransportType"
          }
        }
      },
      "example": {
        "RecordId": "00000000-0000-0000-0000-000000000000",
        "TransportTypes": [
          "SMS",
          "Email"
        ]
      }
    },
    "RiskAssessmentData": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "organizationId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "relatedEntityId": {
          "format": "int32",
          "type": "integer"
        },
        "relatedEntityType": {
          "type": "string"
        },
        "isDraft": {
          "type": "boolean"
        },
        "riskAssessmentVersion": {
          "format": "int32",
          "type": "integer"
        },
        "riskAssessmentUuid": {
          "format": "uuid",
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "modified": {
          "format": "date-time",
          "type": "string"
        },
        "organizationalLink": {
          "type": "string"
        },
        "involvedPeople": {
          "type": "string"
        },
        "otherNotes": {
          "type": "string"
        },
        "responsiblePerson": {
          "$ref": "#/definitions/Contact"
        },
        "riskAssessmentEntities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskAssessmentEntity"
          }
        }
      }
    },
    "RiskAssessmentEntity": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "riskAssessmentId": {
          "format": "int32",
          "type": "integer"
        },
        "risk": {
          "$ref": "#/definitions/RiskScenario"
        },
        "likelyhood": {
          "format": "int32",
          "type": "integer"
        },
        "consequence": {
          "format": "int32",
          "type": "integer"
        },
        "grossScore": {
          "format": "int32",
          "type": "integer"
        },
        "treatment": {
          "$ref": "#/definitions/Treatment"
        },
        "likelyhoodAfterTreatment": {
          "format": "int32",
          "type": "integer"
        },
        "consequenceAfterTreatment": {
          "format": "int32",
          "type": "integer"
        },
        "netScore": {
          "format": "int32",
          "type": "integer"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "modified": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "RiskScenario": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "organizationId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "sector": {
          "type": "string"
        },
        "relevance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskScenarioRelevance"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskScenarioCategory"
          }
        },
        "mitigatingActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MitigatingAction"
          }
        }
      }
    },
    "RiskScenarioCategory": {
      "enum": [
        "Confidentiality",
        "Integrity",
        "Availability",
        "PrivacyPrinciples",
        "PrivacyRights"
      ],
      "type": "string"
    },
    "RiskScenarioRelevance": {
      "enum": [
        "ROS",
        "DPIA"
      ],
      "type": "string"
    },
    "SigneeContact": {
      "description": "Signing details for a contact",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name the contact",
          "type": "string"
        },
        "email": {
          "description": "Email for the contact",
          "type": "string"
        },
        "phone": {
          "description": "Phone number for the contact",
          "type": "string"
        },
        "signingBasis": {
          "$ref": "#/definitions/SigningBasis"
        },
        "position": {
          "description": "The position of the contact",
          "type": "string"
        }
      }
    },
    "SigningBasis": {
      "description": "Signingbasis for the defined signee",
      "enum": [
        "SigningRight",
        "PowerOfAttorney",
        "EmploymentAuthorization"
      ],
      "type": "string"
    },
    "SpecialCategoryLegalBasis": {
      "description": "The special legal basis used (GDPR paragraph 9.2.[a-j] or paragraph 9.3 [x])",
      "enum": [
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "g",
        "h",
        "i",
        "j",
        "x"
      ],
      "type": "string"
    },
    "SystemData": {
      "description": "Main system object for direct mapping matching the maps from Frontweb",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "The unique Id of the system/recipient.",
          "type": "integer"
        },
        "name": {
          "description": "The name of the system/recipient.",
          "type": "string"
        },
        "information": {
          "description": "Basic description/information about the system/recipient",
          "type": "string"
        },
        "recipientUuid": {
          "format": "uuid",
          "description": "The unique Uuid of the system/recipient.",
          "type": "string"
        },
        "apiTag": {
          "description": "The api tag defined for the system/recipient for easily finding the system using the API.",
          "type": "string"
        },
        "leiCode": {
          "description": "The LEI Code of the system/recipient.",
          "type": "string"
        },
        "orgNo": {
          "description": "The Organizational number of the system/recipient.",
          "type": "string"
        },
        "dataHandlerAgreementExpiry": {
          "format": "date-time",
          "description": "Date and time for when the data handler agreement for this system/recipient expires.",
          "type": "string"
        },
        "companyPhone": {
          "description": "The business phonenumber of the system/recipient.",
          "type": "string"
        },
        "companyEmail": {
          "description": "The business email of the system/recipient.",
          "type": "string"
        },
        "serviceDescription": {
          "description": "A short service description or name for the the system/recipient for use with the data processing agreement.",
          "type": "string"
        },
        "contact": {
          "$ref": "#/definitions/Contact"
        },
        "dpoContactPerson": {
          "$ref": "#/definitions/Contact"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "includeInTaskManagement": {
          "description": "If the system/recipient should be included in task management in Iconfirm.",
          "type": "boolean"
        },
        "typeOfSystem": {
          "description": "The type of the system/recipient (Data processor, System, Other [Freetext]).",
          "type": "string"
        },
        "technologyDescription": {
          "description": "A description of the technology for the system/recipient.",
          "type": "string"
        },
        "dataStorageSafeguards": {
          "description": "The safeguards in place for the system/recipient.",
          "type": "string"
        },
        "securityOfProcessing": {
          "description": "Information about the security measures taken when processing data for the system/recipient.",
          "type": "string"
        },
        "privacyNoticeUrl": {
          "description": "Link to the system/recipients privacy notice.",
          "type": "string"
        },
        "dataProcessingAgreementInPlace": {
          "description": "If the system/recipient has a data processing agreement in place.",
          "type": "boolean"
        },
        "dpiaPerformed": {
          "description": "If there has been performed a DPIA of the system/recipient.",
          "type": "boolean"
        },
        "dpiaDate": {
          "format": "date-time",
          "description": "The data of then the DPIA for the system/recipient was made.",
          "type": "string"
        },
        "specialCategoriesOfPersonalData": {
          "description": "If the system/recipient processes special categories of personal data.",
          "type": "boolean"
        },
        "specialCategoriesOfPersonalDataDesc": {
          "description": "Description of the special categories of personal data the system/recipient processes.",
          "type": "string"
        },
        "automatedProcessing": {
          "description": "Is the system/recipient uses automated processing/profiling",
          "type": "boolean"
        },
        "automatedProcessingDesc": {
          "description": "Description of the automated processing/profiling",
          "type": "string"
        },
        "privacyDataProvidedByOthers": {
          "description": "If sensitive/personal data is provided by 3rd parties.",
          "type": "boolean"
        },
        "privacyDataProvidedByOthersDesc": {
          "description": "Description of the sensitive/personal data provided by 3rd parties.",
          "type": "string"
        },
        "integratedWithOtherSystems": {
          "description": "If the system/recipient is integrated with other systems.",
          "type": "boolean"
        },
        "integratedWithOtherSystemsDesc": {
          "description": "Description of the integrations the system/recipient has with other systems.",
          "type": "string"
        },
        "otherNotes": {
          "description": "Other information about the system/recipient.",
          "type": "string"
        },
        "userManagementHandlingRequired": {
          "description": "If the system/recipient requires user management handling.",
          "type": "boolean"
        },
        "userManagementHandlingDesc": {
          "description": "Description of the user management handling requirements for the system/recipient.",
          "type": "string"
        },
        "legalEntityName": {
          "description": "The legal name of the system/recipient.",
          "type": "string"
        },
        "systemOwner": {
          "$ref": "#/definitions/Contact"
        },
        "privacyDataStoredOutsideEU": {
          "description": "If the system/recipient stores data outside of the EU/EEC.",
          "type": "boolean"
        },
        "notificationRecipients": {
          "description": "A semi-colon separated list of email addresses that should be notified on events for the system/recipient.",
          "type": "string"
        },
        "notificationFrequency": {
          "format": "int32",
          "description": "The frequenzy in hours that the above notification recipients should receive notification reports for the system/recipient.",
          "type": "integer"
        },
        "notificationInterval": {
          "$ref": "#/definitions/NotificationInterval"
        },
        "systemResponsible": {
          "$ref": "#/definitions/Contact"
        },
        "technicalResponsible": {
          "$ref": "#/definitions/Contact"
        },
        "estimatedAmountOfRecords": {
          "format": "int32",
          "description": "The estimated amount of registrations made on/to the system/recipient.",
          "type": "integer"
        },
        "externalCategories": {
          "description": "Personal data categories that are gathered for the system/recipient that is not collected within iconfirm.",
          "type": "string"
        },
        "isJointController": {
          "description": "If the system/recipient is a joint controller.",
          "type": "boolean"
        },
        "jointController": {
          "$ref": "#/definitions/JointController"
        },
        "dataDeliveredToOthers": {
          "description": "If data is delivered to 3rd parties by the system/recipient.",
          "type": "boolean"
        },
        "dataDeliveredToOthersDesc": {
          "description": "Description of the data delivered to 3rd parties by the system/recipient.",
          "type": "string"
        },
        "dataDeliveredToCountries": {
          "description": "A comma seperated list of countries this system/recipient deliveres/transfers data to.",
          "type": "string"
        },
        "aidToController": {
          "description": "Description of scope as well as technical and organizational measures to provide assistance to the Controller.",
          "type": "string"
        },
        "revisionInstructionsForRecipient": {
          "description": "Description of the procedure for the controller's audits of the data processor.",
          "type": "string"
        },
        "approvedRevisionFormatRecipient": {
          "description": "Approved auditor's reports/inspection reports.",
          "type": "string"
        },
        "revisionInstructionsForSubprocessor": {
          "description": "Description of the procedure for the controller's audits of sub processors.",
          "type": "string"
        },
        "approvedRevisionFormatSubprocessor": {
          "description": "Approved auditor's reports/inspection reports for the sub processors.",
          "type": "string"
        },
        "natureOfProcessing": {
          "description": "The nature of processing defined for the system/recipient.",
          "type": "string"
        },
        "instructionsForProcessing": {
          "description": "Instructions to the Data Processor for the processing of personal data.",
          "type": "string"
        },
        "consequencesIfIlligal": {
          "description": "Consequences of unlawful instructions.",
          "type": "string"
        },
        "returnDataPriorToErasureUponContractTermination": {
          "description": "If data should be deleted (false) or returned (true) by the system/recipient upon contract termination.",
          "type": "boolean"
        },
        "recipientCoversThirdPartyCosts": {
          "description": "Controller covers the costs for the data processor revisions.",
          "type": "boolean"
        },
        "recipientCoversThirdPartyCostsForSubprocessor": {
          "description": "Controller covers the costs for subprocessor revisions.",
          "type": "boolean"
        },
        "subProcessorsChangesAllowedByDefault": {
          "description": "If the system is allowed to change its subprocessors or if its has to be confirmed beforehand of change",
          "type": "boolean"
        },
        "minimumChangeNotificationPeriod": {
          "format": "int32",
          "description": "The minimum amount of days notification for change in subprocessors should be made.",
          "type": "integer"
        },
        "revisionIntervallRecipient": {
          "format": "int32",
          "description": "The interval amount of months for when revisions should be done on the system/recipient.",
          "type": "integer"
        },
        "revisionIntervallSubprocessor": {
          "format": "int32",
          "description": "The interval amount of months for when revisions should be done on the system/recipient subprocessor(s).",
          "type": "integer"
        },
        "dataBreachNotificationTime": {
          "format": "int32",
          "description": "In case of data breach, deadline for notification to the controller (hours).",
          "type": "integer"
        },
        "subprocessors": {
          "description": "Subprocessors associated with the system/recipient.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FullSubprocessorObject"
          }
        },
        "organizationalLink": {
          "description": "Which part of the organisation uses the solution.",
          "type": "string"
        },
        "allowRecipientToUseOwnOrganizationSubprocessors": {
          "description": "If the use of sub-processors within Processors own Group of companies should be allowed.",
          "type": "boolean"
        },
        "mainContract": {
          "description": "The name of the main contract(s) the system/recipient.",
          "type": "string"
        },
        "mainContractSignedAt": {
          "format": "date-time",
          "description": "The date of then the main contract for the system/recipient was signed.",
          "type": "string"
        },
        "controllerSignee": {
          "$ref": "#/definitions/SigneeContact"
        },
        "recipientSignee": {
          "$ref": "#/definitions/SigneeContact"
        },
        "dataBreachContact": {
          "$ref": "#/definitions/Contact"
        },
        "revisionsOfRecipientNotApplicateble": {
          "description": "If revisions of the recipient isn't applicateble.",
          "type": "boolean"
        },
        "revisionsOfSubprocessorsNotApplicable": {
          "description": "If revisions of the recipients subprocessor(s) isn't applicateble.",
          "type": "boolean"
        },
        "purposes": {
          "description": "The purposes registered on the system/recipient for its nature of processing.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurposeObject"
          }
        }
      }
    },
    "TransportType": {
      "description": "The different communication channels",
      "enum": [
        "Email",
        "SMS",
        "Annotation"
      ],
      "type": "string"
    },
    "Treatment": {
      "enum": [
        "Avoid",
        "Transfer",
        "RC",
        "Accept"
      ],
      "type": "string"
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "API-Key": {
      "type": "apiKey",
      "in": "header",
      "name": "ApiKey"
    }
  },
  "security": [
    {
      "API-Key": []
    }
  ],
  "tags": []
}
