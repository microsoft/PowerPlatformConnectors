{
	"swagger": "2.0",
	"info": {
		"title": "Smart Global Governance",
		"description": "Smart Global Governance allows to interact with Smart Compliance Booster solution to setup new dataflows with other applications. It can be used to automate/customize many daily tasks like exchanging data, triggering alerts or sending messages to appropriate people.",
		"version": "1.0",
		"contact": {
			"name": "Smart Global Governance Support Team",
			"email": "support@smartglobal.com"
		}
	},
	"host": "eu-fr-south.console.smartglobalprivacy.com",
	"basePath": "/api/v2",
	"schemes": [
		"https"
	],
	"consumes": ["application/json"],
	"produces": ["application/json"],
	"paths": {
		"/client": {
			"post": {
				"tags": [
					"clients"
				],
				"summary": "Create a Client",
				"description": "Create a Client and its properties",
				"operationId": "Client-create",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Client"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The Client was created successfully"
					},
					"401": {
						"description": "Authentication failed"
					}
				}
			},
			"get": {
				"tags": [
					"clients"
				],
				"summary": "Get all Clients",
				"description": "Get the list of all Clients and their properties",
				"operationId": "Clients-get",
				"parameters": [],
				"responses": {
					"200": {
						"description": "A list of Clients",
						"schema": {
							"type": "object",
							"properties": {
								"data": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Client"
									}
								},
								"errors": {
									"$ref": "#/definitions/Errors"
								},
								"status": {
									"$ref": "#/definitions/Status"
								}
							}
						}
					},
					"401": {
						"description": "Authentication failed"
					}
				}
			}
		},
		"/client/{client_id}": {
			"get": {
				"tags": [
					"clients"
				],
				"summary": "Get a Client",
				"description": "Get a Client by its ID",
				"operationId": "Client-get-by-id",
				"parameters": [{
						"description": "ID of the Client that needs to be retrieved",
						"name": "client_id",
						"in": "path",
						"required": true,
						"type": "integer",
						"x-ms-summary": "Client ID",
						"x-ms-url-encoding": "single"
					}
				],
				"responses": {
					"200": {
						"description": "A client",
						"schema": {
							"type": "object",
							"properties": {
								"data": {
									"$ref": "#/definitions/Client"
								},
								"errors": {
									"$ref": "#/definitions/Errors"
								},
								"status": {
									"$ref": "#/definitions/Status"
								}
							}
						}
					},
					"401": {
						"description": "Authentication failed"
					},
					"404": {
						"description": "Client ID not found"
					}
				}
			},
			"put": {
				"tags": [
					"clients"
				],
				"summary": "Update a Client",
				"description": "Update a Client by its ID",
				"operationId": "Client-update-by-id",
				"parameters": [{
						"description": "ID of the Client that needs to be updated",
						"name": "client_id",
						"in": "path",
						"required": true,
						"type": "integer",
						"x-ms-summary": "Client ID",
						"x-ms-url-encoding": "single"
					}, {
						"name": "body",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Client"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The Client was updated successfully"
					},
					"401": {
						"description": "Authentication failed"
					},
					"404": {
						"description": "Client ID not found"
					}
				}
			},
			"delete": {
				"tags": [
					"clients"
				],
				"summary": "Delete a Client",
				"description": "Delete a Client by its ID",
				"operationId": "Client-delete-by-id",
				"parameters": [{
						"description": "ID of the Client that needs to be deleted",
						"name": "client_id",
						"in": "path",
						"required": true,
						"type": "integer",
						"x-ms-summary": "Client ID",
						"x-ms-url-encoding": "single"
					}
				],
				"responses": {
					"200": {
						"description": "The Client was deleted successfully"
					},
					"401": {
						"description": "Authentication failed"
					},
					"404": {
						"description": "Client ID not found"
					}
				}
			}
		},
		"/processor": {
			"post": {
				"tags": [
					"processors"
				],
				"summary": "Create a Processor",
				"description": "Create a new Processor and its properties",
				"operationId": "Processor-create",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Processor"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The Processor was created successfully"
					},
					"401": {
						"description": "Authentication failed"
					}
				}
			},
			"get": {
				"tags": [
					"processors"
				],
				"summary": "Get all Processors",
				"description": "Get the list of all Processors and their properties",
				"operationId": "Processors-get",
				"parameters": [],
				"responses": {
					"200": {
						"description": "A list of Processors",
						"schema": {
							"type": "object",
							"properties": {
								"data": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Processor"
									}
								},
								"errors": {
									"$ref": "#/definitions/Errors"
								},
								"status": {
									"$ref": "#/definitions/Status"
								}
							}
						}
					},
					"401": {
						"description": "Authentication failed"
					}
				}
			}
		},
		"/processor/{processor_id}": {
			"get": {
				"tags": [
					"processors"
				],
				"summary": "Get a Processor",
				"description": "Get a Processor by its ID",
				"operationId": "Processor-get-by-id",
				"parameters": [{
						"description": "ID of the Processor that needs to be retrieved",
						"name": "processor_id",
						"in": "path",
						"required": true,
						"type": "integer",
						"x-ms-summary": "Processor ID",
						"x-ms-url-encoding": "single"
					}
				],
				"responses": {
					"200": {
						"description": "A Processor",
						"schema": {
							"type": "object",
							"properties": {
								"data": {
									"$ref": "#/definitions/Processor"
								},
								"errors": {
									"$ref": "#/definitions/Errors"
								},
								"status": {
									"$ref": "#/definitions/Status"
								}
							}
						}
					},
					"401": {
						"description": "Authentication failed"
					},
					"404": {
						"description": "Processor ID not found"
					}
				}
			},
			"put": {
				"tags": [
					"processors"
				],
				"summary": "Update a Processor",
				"description": "Update a Processor by its ID",
				"operationId": "Processor-update-by-id",
				"parameters": [{
						"description": "ID of the Processor that needs to be updated",
						"name": "processor_id",
						"in": "path",
						"required": true,
						"type": "integer",
						"x-ms-summary": "Processor ID",
						"x-ms-url-encoding": "single"
					}, {
						"name": "body",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/Processor"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The Processor was updated successfully"
					},
					"401": {
						"description": "Authentication failed"
					},
					"404": {
						"description": "Processor ID not found"
					}
				}
			},
			"delete": {
				"tags": [
					"processors"
				],
				"summary": "Delete a Processor",
				"description": "Delete a Processor by its ID",
				"operationId": "Processors-delete-by-id",
				"parameters": [{
						"description": "ID of the Processor that needs to be deleted",
						"name": "processor_id",
						"in": "path",
						"required": true,
						"type": "integer",
						"x-ms-summary": "Processor ID",
						"x-ms-url-encoding": "single"
					}
				],
				"responses": {
					"200": {
						"description": "The Processor was deleted successfully"
					},
					"401": {
						"description": "Authentication failed"
					},
					"404": {
						"description": "Processor ID not found"
					}
				}
			}
		},
		"/request": {
			"post": {
				"tags": [
					"requests"
				],
				"summary": "Create a Data Subject Request",
				"description": "Create a new Data Subject Request and its properties",
				"operationId": "DSR-create",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/DataSubjectRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The Data Subject Request was created successfully"
					},
					"401": {
						"description": "Authentication failed"
					}
				}
			},
			"get": {
				"tags": [
					"requests"
				],
				"summary": "Get all Data Subject Requests",
				"description": "Get the list of all Data Subject Requests and their properties",
				"operationId": "DSRs-get",
				"parameters": [],
				"responses": {
					"200": {
						"description": "A list of Data Subject Requests",
						"schema": {
							"type": "object",
							"properties": {
								"data": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/DataSubjectRequest"
									}
								},
								"errors": {
									"$ref": "#/definitions/Errors"
								},
								"status": {
									"$ref": "#/definitions/Status"
								}
							}
						}
					},
					"401": {
						"description": "Authentication failed"
					}
				}
			}
		},
		"/request/{request_id}": {
			"get": {
				"tags": [
					"requests"
				],
				"summary": "Get a Data Subject Request",
				"description": "Get a Data Subject Request by its ID",
				"operationId": "DSR-get-by-id",
				"parameters": [{
						"description": "ID of the Data Subject Request that needs to be retrieved",
						"name": "request_id",
						"in": "path",
						"required": true,
						"type": "integer",
						"x-ms-summary": "Data Subject Request ID",
						"x-ms-url-encoding": "single"
					}
				],
				"responses": {
					"200": {
						"description": "A Data Subject Request",
						"schema": {
							"type": "object",
							"properties": {
								"data": {
									"$ref": "#/definitions/DataSubjectRequest"
								},
								"errors": {
									"$ref": "#/definitions/Errors"
								},
								"status": {
									"$ref": "#/definitions/Status"
								}
							}
						}
					},
					"401": {
						"description": "Authentication failed"
					},
					"404": {
						"description": "Data Subject Request ID not found"
					}
				}
			},
			"put": {
				"tags": [
					"requests"
				],
				"summary": "Update a Data Subject Request",
				"description": "Update a Data Subject Request by its ID",
				"operationId": "DSR-update-by-id",
				"parameters": [{
						"description": "ID of the Data Subject Request that needs to be updated",
						"name": "request_id",
						"in": "path",
						"required": true,
						"type": "integer",
						"x-ms-summary": "Data Subject Request ID",
						"x-ms-url-encoding": "single"
					}, {
						"name": "body",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/DataSubjectRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The Data Subject Request was updated successfully"
					},
					"401": {
						"description": "Authentication failed"
					},
					"404": {
						"description": "Data Subject Request ID not found"
					}
				}
			}
		},
		"/data-processing": {
			"post": {
				"tags": [
					"data processings"
				],
				"summary": "Create a Record of Processing Activity",
				"description": "Create a new Record of Processing Activity and its properties",
				"operationId": "ROPA-create",
				"parameters": [{
						"name": "body",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/DataProcessing"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The Record of Processing Activity was created successfully"
					},
					"401": {
						"description": "Authentication failed"
					}
				}
			},
			"get": {
				"tags": [
					"data processings"
				],
				"summary": "Get all Records of Processing Activities",
				"description": "Get the list of all Records of Processing Activities and their properties",
				"operationId": "ROPAs-get",
				"parameters": [],
				"responses": {
					"200": {
						"description": "A list of Records of Processing Activities",
						"schema": {
							"type": "object",
							"properties": {
								"data": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/DataProcessing"
									}
								},
								"errors": {
									"$ref": "#/definitions/Errors"
								},
								"status": {
									"$ref": "#/definitions/Status"
								}
							}
						}
					},
					"401": {
						"description": "Authentication failed"
					}
				}
			}
		},
		"/data-processing/{data_processing_id}": {
			"get": {
				"tags": [
					"data processings"
				],
				"summary": "Get a Record of Processing Activity",
				"description": "Get a Record of Processing Activity by its ID",
				"operationId": "ROPA-get-by-id",
				"parameters": [{
						"description": "ID of the Record of Processing Activity that needs to be retrieved",
						"name": "data_processing_id",
						"in": "path",
						"required": true,
						"type": "integer",
						"x-ms-summary": "Record of Processing Activity ID",
						"x-ms-url-encoding": "single"
					}
				],
				"responses": {
					"200": {
						"description": "A Record of Processing Activity",
						"schema": {
							"type": "object",
							"properties": {
								"data": {
									"$ref": "#/definitions/DataProcessing"
								},
								"errors": {
									"$ref": "#/definitions/Errors"
								},
								"status": {
									"$ref": "#/definitions/Status"
								}
							}
						}
					},
					"401": {
						"description": "Authentication failed"
					},
					"404": {
						"description": "Record of Processing Activity ID not found"
					}
				}
			},
			"put": {
				"tags": [
					"data processings"
				],
				"summary": "Update a Record of Processing Activity",
				"description": "Update a Record of Processing Activity by its ID",
				"operationId": "ROPA-update-by-id",
				"parameters": [{
						"description": "ID of the Record of Processing Activity that needs to be updated",
						"name": "data_processing_id",
						"in": "path",
						"required": true,
						"type": "integer",
						"x-ms-summary": "Record of Processing Activity ID",
						"x-ms-url-encoding": "single"
					}, {
						"name": "body",
						"in": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/DataProcessing"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The Record of Processing Activity was updated successfully"
					},
					"401": {
						"description": "Authentication failed"
					},
					"404": {
						"description": "Record of Processing Activity ID not found"
					}
				}
			}
		}
	},
	"x-ms-connector-metadata": [{
			"propertyName": "Website",
			"propertyValue": "https://www.smartglobalgovernance.com"
		}, {
			"propertyName": "Privacy policy",
			"propertyValue": "https://www.smartglobalgovernance.com/fr/politique-confidentialite"
		}, {
			"propertyName": "Categories",
			"propertyValue": "Data; Security"
		}
	],
	"definitions": {
		"Errors": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"Status": {
			"type": "string"
		},
		"Client": {
			"type": "object",
			"properties": {
				"client_id": {
					"type": "integer",
					"format": "int32",
					"title": "Client ID"
				},
				"name": {
					"type": "string",
					"title": "Name"
				},
				"address": {
					"type": "string",
					"title": "Address"
				},
				"zip": {
					"type": "string",
					"title": "Zip"
				},
				"city": {
					"type": "string",
					"title": "City"
				},
				"country_iso": {
					"type": "string",
					"title": "Country ISO"
				},
				"contact_name": {
					"type": "string",
					"title": "Contact Name"
				},
				"contact_firstname": {
					"type": "string",
					"title": "Contact Firstname"
				},
				"contact_email": {
					"type": "string",
					"title": "Contact Email"
				},
				"contact_phone": {
					"type": "string",
					"title": "Contact Phone"
				},
				"complaint": {
					"type": "integer",
					"format": "int32",
					"title": "Compliant"
				},
				"due_date": {
					"type": "integer",
					"format": "int32",
					"title": "Due Date"
				},
				"agreements": {
					"type": "integer",
					"format": "int32",
					"title": "Agreements"
				},
				"comments": {
					"type": "string",
					"title": "Comments"
				}
			}
		},
		"Processor": {
			"type": "object",
			"properties": {
				"processor_id": {
					"type": "integer",
					"format": "int32",
					"title": "Processor ID"
				},
				"name": {
					"type": "string",
					"title": "Name"
				},
				"address": {
					"type": "string",
					"title": "Address"
				},
				"zip": {
					"type": "string",
					"title": "Zip"
				},
				"city": {
					"type": "string",
					"title": "City"
				},
				"country_iso": {
					"type": "string",
					"title": "Country ISO"
				},
				"contact_name": {
					"type": "string",
					"title": "Contact Name"
				},
				"contact_firstname": {
					"type": "string",
					"title": "Contact Firstname"
				},
				"contact_email": {
					"type": "string",
					"title": "Contact Email"
				},
				"contact_phone": {
					"type": "string",
					"title": "Contact Phone"
				},
				"complaint": {
					"type": "integer",
					"format": "int32",
					"title": "Compliant"
				},
				"due_date": {
					"type": "integer",
					"format": "int32",
					"title": "Due Date"
				},
				"agreements": {
					"type": "integer",
					"format": "int32",
					"title": "Agreements"
				},
				"comments": {
					"type": "string",
					"title": "Comments"
				}
			}
		},
		"DataSubjectRequest": {
			"type": "object",
			"properties": {
				"request_id": {
					"type": "integer",
					"format": "int32",
					"title": "Data Subject Request ID"
				},
				"country_iso": {
					"type": "string",
					"title": "Country ISO"
				},
				"user_id_creator": {
					"type": "integer",
					"format": "int32",
					"title": "Creator User ID"
				},
				"user_id_assignee": {
					"type": "integer",
					"format": "int32",
					"title": "Assignee User ID"
				},
				"task_id": {
					"type": "integer",
					"format": "int32",
					"title": "Task ID"
				},
				"request_page_id": {
					"type": "integer",
					"format": "int32",
					"title": "Request Page ID"
				},
				"person_details": {
					"type": "string",
					"title": "Person Details"
				},
				"person_details_identifier": {
					"type": "string",
					"title": "Person Details Identifier"
				},
				"person_email": {
					"type": "string",
					"title": "Person Email"
				},
				"person_data": {
					"type": "string",
					"title": "Person Data"
				},
				"identity_confirmed": {
					"type": "integer",
					"format": "int32",
					"title": "Indentity Confirmed"
				},
				"request_type_id": {
					"type": "integer",
					"format": "int32",
					"title": "Request Type ID"
				},
				"status": {
					"type": "string",
					"title": "Status"
				},
				"level": {
					"type": "string",
					"title": "Level"
				},
				"refusal_reason": {
					"type": "string",
					"title": "Refusal Reason"
				},
				"comment": {
					"type": "string",
					"title": "Comment"
				},
				"additional_fields": {
					"type": "string",
					"title": "Additional Fields"
				},
				"close_date": {
					"type": "string",
					"title": "Close Date"
				},
				"due_date": {
					"type": "string",
					"title": "Due Date"
				},
				"date_of_request": {
					"type": "string",
					"title": "Date of Request"
				},
				"data_processing_ids": {
					"type": "string",
					"title": "Data Processing IDs"
				},
				"created_at": {
					"type": "integer",
					"format": "int32",
					"title": "Created At"
				},
				"updated_at": {
					"type": "integer",
					"format": "int32",
					"title": "Updated At"
				},
				"regulations": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"DataProcessing": {
			"type": "object",
			"properties": {
				"data_processing_id": {
					"type": "integer",
					"format": "int32",
					"title": "Data Processing ID"
				},
				"data_processing_id_from_supplier": {
					"type": "integer",
					"format": "int32",
					"title": "Data Processing ID From Supplier"
				},
				"name": {
					"type": "string",
					"title": "Name"
				},
				"group": {
					"type": "string",
					"title": "Group"
				},
				"type": {
					"type": "string",
					"enum": ["Processor", "Organization"],
					"title": "Type"
				},
				"description": {
					"type": "string",
					"title": "Description"
				},
				"person_in_charge": {
					"type": "integer",
					"format": "int32",
					"title": "Person in Charge"
				},
				"user_id_assignee": {
					"type": "integer",
					"format": "int32",
					"title": "Assignee User ID"
				},
				"user_id_approver": {
					"type": "integer",
					"format": "int32",
					"title": "Approver User ID"
				},
				"due_date": {
					"type": "integer",
					"format": "int32",
					"title": "Due Date"
				},
				"created_at": {
					"type": "integer",
					"format": "int32",
					"title": "Created At"
				},
				"updated_at": {
					"type": "integer",
					"format": "int32",
					"title": "Updated At"
				},
				"datamapping_id": {
					"type": "integer",
					"format": "int32",
					"title": "Datamapping ID"
				}
			}
		}
	},
	"parameters": {},
	"responses": {},
	"securityDefinitions": {
		"API Key": {
			"type": "apiKey",
			"in": "header",
			"name": "X-Authorization"
		}
	},
	"security": [{
			"API Key": []
		}
	],
	"tags": []
}