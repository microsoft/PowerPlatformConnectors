{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Blackbaud Raisers Edge NXT Gif",
    "description": "Blackbaud Raiser's Edge NXT is a comprehensive cloud-based fundraising and donor management software solution built specifically for nonprofits and the entire social good community. Use the Gifts connector to manage gifts.",
    "contact": {
      "name": "Blackbaud Support",
      "url": "https://www.blackbaud.com/support",
      "email": "skyapi@blackbaud.com"
    },
    "x-ms-api-annotation": {
      "status": "Preview"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.blackbaud.com/products/blackbaud-raisers-edge-nxt"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.blackbaud.com/privacy-shield"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Sales and CRM;Productivity"
    }
  ],
  "host": "api.sky.blackbaud.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "skyApiOAuth": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth2.sky.blackbaud.com/authorization",
      "tokenUrl": "https://oauth2.sky.blackbaud.com/token",
      "scopes": {}
    }
  },
  "security": [
    {
      "skyApiOAuth": []
    }
  ],
  "paths": {
    "/constituent/v1/constituents/{constituent_id}/givingsummary/first": {
      "get": {
        "operationId": "GetConstituentFirstGift",
        "summary": "Get constituent first gift",
        "description": "Returns the first gift for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.GivingSummaryRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the gift information."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/givingsummary/greatest": {
      "get": {
        "operationId": "GetConstituentGreatestGift",
        "summary": "Get constituent greatest gift",
        "description": "Returns the greatest gift for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.GivingSummaryRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the gift information."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/givingsummary/latest": {
      "get": {
        "operationId": "GetConstituentLatestGift",
        "summary": "Get constituent latest gift",
        "description": "Returns the latest gift for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.GivingSummaryRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the gift information."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/givingsummary/lifetimegiving": {
      "get": {
        "operationId": "GetConstituentLifetimeGiving",
        "summary": "Get constituent lifetime giving",
        "description": "Returns the lifetime giving summary for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.LifetimeGivingRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the lifetime giving information."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/gift/v1/giftacknowledgements/{acknowledgement_id}": {
      "patch": {
        "operationId": "EditGiftAcknowledgement",
        "summary": "Update gift acknowledgement details",
        "description": "Updates the acknowledgement details for a gift.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "acknowledgement_id",
            "in": "path",
            "description": "The system record ID of the gift acknowledgement to update. It uses the parent gift's ID as its value.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Acknowledgement ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GiftApi.AcknowledgementEdit"
            },
            "description": "An object that represents the properties of the gift acknowledgement to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Returned when the specified acknowledgement ID in the URL or the specified request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the gift acknowledgement."
          },
          "404": {
            "description": "Returned when the specified gift acknowledgement is not found."
          }
        }
      }
    },
    "/gift/v1/giftreceipts/{receipt_id}": {
      "patch": {
        "operationId": "EditGiftReceipt",
        "summary": "Update gift receipt details",
        "description": "Updates the receipt details for a gift.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "receipt_id",
            "in": "path",
            "description": "The system record ID of the gift receipt to update. It uses the parent gift's ID as its value.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Receipt ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GiftApi.ReceiptEdit"
            },
            "description": "An object that represents the properties of the gift receipt to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Returned when the specified receipt ID in the URL or the specified request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the gift receipt."
          },
          "404": {
            "description": "Returned when the specified gift receipt is not found."
          }
        }
      }
    },
    "/gift/v1/gifts": {
      "get": {
        "operationId": "ListGifts",
        "summary": "List gifts",
        "description": "Returns a list of gifts.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "list_id",
            "in": "query",
            "description": "Defines a list identifier used to filter the set of gifts to those included in the specified list. If this value is set, other specified filters will be ignored.",
            "type": "string",
            "x-ms-summary": "List",
            "x-ms-dynamic-values": {
              "operationId": "ListLists",
              "value-collection": "value",
              "value-path": "id",
              "value-title": "name",
              "parameters": {
                "list_type": "Gift"
              }
            },
            "x-ms-dynamic-list": {
              "operationId": "ListLists",
              "itemsPath": "value",
              "itemValuePath": "id",
              "itemTitlePath": "name",
              "parameters": {
                "list_type": {
                  "value": "Gift"
                }
              }
            }
          },
          {
            "name": "gift_type",
            "in": "query",
            "description": "Represents a comma-separated list of gift types to filter the results. For example, \"MatchingGiftPledge,RecurringGift\" returns only gifts of type MatchingGiftPledge or RecurringGift.",
            "type": "string",
            "x-ms-summary": "Type"
          },
          {
            "name": "constituent_id",
            "in": "query",
            "description": "Represents a comma-separated list of constituent identifiers to filter the results. For example, \"280,1232\" returns only gifts from constituent 280 or constituent 1232.",
            "type": "string",
            "x-ms-summary": "Constituent ID"
          },
          {
            "name": "campaign_id",
            "in": "query",
            "description": "Represents a comma-separated list of campaign identifiers to filter the results. For example, \"506,918\" returns only gifts to campaign 506 or campaign 918.",
            "type": "string",
            "x-ms-summary": "Campaign ID"
          },
          {
            "name": "fund_id",
            "in": "query",
            "description": "Represents a comma-separated list of fund identifiers to filter the results. For example, \"506,918\" returns only gifts to fund 506 or fund 918.",
            "type": "string",
            "x-ms-summary": "Fund ID"
          },
          {
            "name": "appeal_id",
            "in": "query",
            "description": "Represents a comma-separated list of appeal identifiers to filter the results. For example, \"506,918\" returns only gifts to appeal 506 or appeal 918.",
            "type": "string",
            "x-ms-summary": "Appeal ID"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500. The maximum is 5000.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Offset"
          },
          {
            "name": "start_gift_date",
            "in": "query",
            "description": "Represents a filter for gifts with a gift date on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Start gift date",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "end_gift_date",
            "in": "query",
            "description": "Represents a filter for gifts with a gift date on or before the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "End gift date",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "start_gift_amount",
            "in": "query",
            "description": "Represents a filter for gifts with an amount greater than or equal to the specified amount.",
            "type": "number",
            "format": "double",
            "x-ms-summary": "Start gift amount",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "end_gift_amount",
            "in": "query",
            "description": "Represents a filter for gifts with an amount less than or equal to the specified amount.",
            "type": "number",
            "format": "double",
            "x-ms-summary": "End gift amount",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "post_status",
            "in": "query",
            "description": "Represents a comma-separated list of gift post statuses to filter the results. For example, \"DoNotPost,Posted\" returns only gifts that are marked as DoNotPost or Posted.",
            "type": "string",
            "x-ms-summary": "Post status",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "receipt_status",
            "in": "query",
            "description": "Represents a comma-separated list of gift receipt statuses to filter the results. For example, \"DoNotReceipt,Receipted\" returns only gifts that are marked as DoNotReceipt or Receipted.",
            "type": "string",
            "x-ms-summary": "Receipt status",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "acknowledgement_status",
            "in": "query",
            "description": "Represents a comma-separated list of gift acknowledgement statuses to filter the results. For example, \"DoNotAcknowledge,Acknowledged\" returns only gifts that are marked as DoNotAcknowledge or Acknowledged.",
            "type": "string",
            "x-ms-summary": "Acknowledgement status",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Represents a list of fields to sort the results by.  Results are in ascending order by default, and a '-' sign denotes descending order.  For example, \"date_added,-date\" sorts gifts by the \"date_added\" field in ascending order and then by the \"gift date\" field in descending order. If only the date_modified field or only the date_added field is provided, then this adds the sort_token parameter to the next_link URL to ensure that gifts are stably sorted.",
            "type": "string",
            "x-ms-summary": "Sorted by",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "date_added",
            "in": "query",
            "description": "Filter the results to gifts created on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Added on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "last_modified",
            "in": "query",
            "description": "Filter the results to gifts modified on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Modified on or after",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/GiftApi.ApiCollectionOfGiftRead"
            }
          },
          "400": {
            "description": "Returned when the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the gifts."
          }
        }
      },
      "post": {
        "operationId": "CreateGift",
        "summary": "Create a gift",
        "description": "Creates a new gift.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GiftApi.GiftAdd"
            },
            "description": "An object that represents the gift to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a gift. The response body contains the ID of the new gift.",
            "schema": {
              "$ref": "#/definitions/GiftApi.CreatedGift"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create a gift."
          }
        }
      }
    },
    "/gift/v1/gifts/{gift_id}": {
      "get": {
        "operationId": "GetGift",
        "summary": "Get a gift",
        "description": "Returns information about a gift.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gift_id",
            "in": "path",
            "description": "The system record ID of the gift to get.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Gift ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/GiftApi.GiftRead"
            }
          },
          "400": {
            "description": "Returned when the specified gift ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the gift."
          },
          "404": {
            "description": "Returned when the specified gift is not found."
          }
        }
      }
    },
    "/gift/v1/gifts/{gift_id}/attachments": {
      "get": {
        "operationId": "ListGiftAttachments",
        "summary": "List gift attachments",
        "description": "Lists the attachments for a gift.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gift_id",
            "in": "path",
            "description": "The system record ID of the gift.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Gift ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/GiftApi.ApiCollectionOfGiftAttachmentRead"
            }
          },
          "400": {
            "description": "Returned when the specified gift ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the attachments."
          },
          "404": {
            "description": "Returned when the specified gift is not found."
          }
        }
      }
    },
    "/gift/v1/gifts/{gift_id}/customfields": {
      "get": {
        "operationId": "ListGiftCustomFields",
        "summary": "List gift custom fields",
        "description": "Lists the custom fields for a gift.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gift_id",
            "in": "path",
            "description": "The system record ID of the gift.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Gift ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/GiftApi.ApiCollectionOfGiftCustomFieldRead"
            }
          },
          "400": {
            "description": "Returned when the specified gift ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the custom fields."
          },
          "404": {
            "description": "Returned when the specified gift is not found."
          }
        }
      }
    },
    "/gift/v1/gifts/attachments": {
      "post": {
        "operationId": "CreateGiftAttachment",
        "summary": "Create a gift attachment",
        "description": "Creates a new gift attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GiftApi.GiftAttachmentAdd"
            },
            "description": "An object that represents the attachment to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an attachment. The response body contains the ID of the new attachment.",
            "schema": {
              "$ref": "#/definitions/GiftApi.CreatedGiftAttachment"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the attachment."
          },
          "404": {
            "description": "Returned when the specified fund is not found."
          }
        }
      }
    },
    "/gift/v1/gifts/attachments/{attachment_id}": {
      "patch": {
        "operationId": "EditGiftAttachment",
        "summary": "Update a gift attachment",
        "description": "Updates a gift attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "attachment_id",
            "in": "path",
            "description": "The system record ID of the attachment to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Attachment ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GiftApi.GiftAttachmentEdit"
            },
            "description": "An object that represents the properties of the attachment to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the attachment."
          },
          "400": {
            "description": "Returned when the specified attachment ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the attachment."
          },
          "404": {
            "description": "Returned when the specified attachment is not found."
          }
        }
      }
    },
    "/gift/v1/gifts/customfields": {
      "post": {
        "operationId": "CreateGiftCustomField",
        "summary": "Create a gift custom field",
        "description": "Creates a new gift custom field.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GiftApi.GiftCustomFieldAdd"
            },
            "description": "An object that represents the custom field to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a custom field. The response body contains the ID of the new custom field.",
            "schema": {
              "$ref": "#/definitions/GiftApi.CreatedGiftCustomField"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the custom field."
          },
          "404": {
            "description": "Returned when the specified gift is not found."
          }
        }
      }
    },
    "/gift/v1/gifts/customfields/{custom_field_id}": {
      "patch": {
        "operationId": "EditGiftCustomField",
        "summary": "Update a gift custom field",
        "description": "Updates a gift custom field.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "custom_field_id",
            "in": "path",
            "description": "The system record ID of the custom field to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Custom field ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GiftApi.GiftCustomFieldEdit"
            },
            "description": "An object that represents the properties of the custom field to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the custom field."
          },
          "400": {
            "description": "Returned when the specified custom field ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the custom field."
          },
          "404": {
            "description": "Returned when the specified custom field is not found."
          }
        }
      }
    },
    "/gift/v1/gifts/customfields/categories": {
      "get": {
        "operationId": "ListGiftCustomFieldCategories",
        "summary": "List custom field categories",
        "description": "Lists the gift custom field categories.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/GiftApi.ApiCollectionOfCustomFieldCategoryRead"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view custom field categories."
          }
        }
      }
    },
    "/gift/v1/virtual/giftbatches/{batch_id}/gifts": {
      "post": {
        "operationId": "AddGiftToBatch",
        "summary": "Add a gift to batch",
        "description": "Add a gift to the specified gift batch.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "batch_id",
            "in": "path",
            "description": "The batch to which the gift will be added.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Batch",
            "x-ms-url-encoding": "single",
            "x-ms-dynamic-values": {
              "operationId": "ListGiftBatches",
              "value-collection": "value",
              "value-path": "id",
              "value-title": "batch_number",
              "parameters": {
                "approved": false
              }
            },
            "x-ms-dynamic-list": {
              "operationId": "ListGiftBatches",
              "itemsPath": "value",
              "itemValuePath": "id",
              "itemTitlePath": "batch_number",
              "parameters": {
                "approved": {
                  "value": false
                }
              }
            }
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GiftApi.Virtual.BatchGiftAdd"
            },
            "description": "An object that represents the gift to add to the batch.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully adds the gifts to the batch. The response body contains a list of IDs and any exceptions that occured when adding the gifts.",
            "schema": {
              "$ref": "#/definitions/GiftApi.BatchGiftAddResults"
            }
          },
          "400": {
            "description": "Returned when the specified request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to add gifts to the batch."
          }
        }
      }
    },
    "/gift-batch/v1/giftbatches": {
      "get": {
        "operationId": "ListGiftBatches",
        "summary": "List gift batches",
        "description": "List the gift batches.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "batch_number",
            "in": "query",
            "description": "Represents a filter for results that match the specified number.",
            "type": "string",
            "x-ms-summary": "Batch number"
          },
          {
            "name": "approved",
            "in": "query",
            "description": "Represents a filter for the status of the gift batch.",
            "type": "boolean",
            "x-ms-summary": "Approved?"
          },
          {
            "name": "has_exceptions",
            "in": "query",
            "description": "Represents a filter for whether the gift batch contains exceptions.",
            "type": "boolean",
            "x-ms-summary": "Has exceptions?"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500. The maximum is 5000.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Offset"
          },
          {
            "name": "search_text",
            "in": "query",
            "description": "Represents a filter for text included in the batch description or batch number fields.",
            "type": "string",
            "x-ms-summary": "Search text",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "created_by",
            "in": "query",
            "description": "Represents a filter for gift batches created by the specified user.",
            "type": "string",
            "x-ms-summary": "Created by",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/GiftBatchApi.ApiCollectionOfGiftBatch"
            }
          },
          "403": {
            "description": "Returned when the user does not have rights to view the set of gift batches."
          }
        }
      },
      "post": {
        "operationId": "CreateGiftBatch",
        "summary": "Create a gift batch",
        "description": "Creates a new gift batch.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GiftBatchApi.CreateBatch"
            },
            "description": "An object that represents the gift batch to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a gift batch. The response body contains the ID of the new batch.",
            "schema": {
              "$ref": "#/definitions/GiftBatchApi.CreatedBatch"
            }
          },
          "400": {
            "description": "Returned when the specified request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the gift batch."
          }
        }
      }
    },
    "/list/v1/lists": {
      "get": {
        "operationId": "ListLists",
        "summary": "List lists",
        "description": "Get a list of lists.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "list_type",
            "in": "query",
            "description": "The type of list to return.",
            "required": true,
            "type": "string",
            "x-ms-summary": "List type",
            "default": "Constituent",
            "enum": [
              "Constituent",
              "Gift",
              "Action",
              "Opportunity"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ListApi.ApiCollectionOfList"
            }
          },
          "400": {
            "description": "Returned when the specified request parameters are not in the appropriate format."
          }
        }
      }
    },
    "/powerautomateui/v1/dynamicvalues": {
      "get": {
        "operationId": "GetDynamicValues",
        "summary": "Get dynamic values",
        "description": "List dynamic values.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api",
            "in": "query",
            "description": "The underlying SKY API containing the route that will be used to populate the dynamic values list.",
            "required": true,
            "type": "string",
            "enum": [
              "constituent",
              "gift",
              "fundraising",
              "opportunity"
            ]
          },
          {
            "name": "route",
            "in": "query",
            "description": "The route within the specified SKY API to call to produce the values for the dynamic list.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/PowerAutomateUIApi.DynamicValuesCollection"
            }
          }
        }
      }
    },
    "/powerautomateui/v1/dynamicvalues/customfields": {
      "get": {
        "operationId": "GetCustomFieldCodeTableDynamicValues",
        "summary": "Get custom field code table dynamic values",
        "description": "List custom field code table dynamic values.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api",
            "in": "query",
            "description": "The underlying SKY API containing the route that will be used to populate the dynamic values list.",
            "required": true,
            "type": "string",
            "enum": [
              "constituent",
              "gift",
              "fundraising",
              "opportunity"
            ]
          },
          {
            "name": "custom_field_type",
            "in": "query",
            "description": "The type of entity that owns the custom field.",
            "required": true,
            "type": "string",
            "enum": [
              "actions",
              "constituents",
              "appeals",
              "campaigns",
              "funds",
              "gifts",
              "opportunities"
            ]
          },
          {
            "name": "category_name",
            "in": "query",
            "description": "The custom field category.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/PowerAutomateUIApi.DynamicValuesCollection"
            }
          }
        }
      }
    },
    "/powerautomateui/v1/dynamicproperties/customfields": {
      "get": {
        "operationId": "GetCustomFieldDynamicProperties",
        "summary": "Get custom field dynamic properties",
        "description": "List custom field dynamic properties.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api",
            "in": "query",
            "description": "The underlying SKY API containing the endpoint that will be used to fetch the custom field category definition.",
            "required": true,
            "type": "string",
            "enum": [
              "constituent",
              "gift",
              "fundraising",
              "opportunity"
            ]
          },
          {
            "name": "custom_field_type",
            "in": "query",
            "description": "The type of entity that owns the custom field.",
            "required": true,
            "type": "string",
            "enum": [
              "actions",
              "constituents",
              "appeals",
              "campaigns",
              "funds",
              "gifts",
              "opportunities"
            ]
          },
          {
            "name": "category",
            "in": "query",
            "description": "The custom field category.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/PowerAutomateUIApi.DynamicProperties"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ConstituentApi.AppealRead": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the appeal.",
          "x-ms-summary": "ID"
        },
        "description": {
          "type": "string",
          "description": "The appeal description.",
          "x-ms-summary": "description"
        }
      }
    },
    "ConstituentApi.CampaignRead": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the campaign.",
          "x-ms-summary": "ID"
        },
        "description": {
          "type": "string",
          "description": "The campaign description.",
          "x-ms-summary": "description"
        }
      }
    },
    "ConstituentApi.FundRead": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the fund.",
          "x-ms-summary": "ID"
        },
        "description": {
          "type": "string",
          "description": "The fund description.",
          "x-ms-summary": "description"
        }
      }
    },
    "ConstituentApi.GivingSummaryRead": {
      "type": "object",
      "description": "Giving summary",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the gift.",
          "x-ms-summary": "ID"
        },
        "type": {
          "type": "string",
          "description": "The gift type.",
          "x-ms-summary": "Type"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The gift date.",
          "x-ms-summary": "Date"
        },
        "amount": {
          "type": "object",
          "description": "The monetary amount of the gift.",
          "x-ms-summary": "Amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "appeals": {
          "type": "array",
          "description": "The set of appeals associated with the gift.",
          "x-ms-summary": "Appeal",
          "items": {
            "$ref": "#/definitions/ConstituentApi.AppealRead"
          }
        },
        "campaigns": {
          "type": "array",
          "description": "The set of campaigns associated with the gift.",
          "x-ms-summary": "Campaign",
          "items": {
            "$ref": "#/definitions/ConstituentApi.CampaignRead"
          }
        },
        "funds": {
          "type": "array",
          "description": "The set of funds associated with the gift.",
          "x-ms-summary": "Fund",
          "items": {
            "$ref": "#/definitions/ConstituentApi.FundRead"
          }
        }
      }
    },
    "ConstituentApi.LifetimeGivingRead": {
      "type": "object",
      "description": "Lifetime giving",
      "properties": {
        "consecutive_years_given": {
          "type": "integer",
          "format": "int32",
          "description": "The number of consecutive years the constituent has given.",
          "x-ms-summary": "Consecutive years given"
        },
        "total_years_given": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of years the constituent has given.",
          "x-ms-summary": "Total years given"
        },
        "total_giving": {
          "type": "object",
          "description": "The total amount given by the constituent.",
          "x-ms-summary": "Total giving",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "total_pledge_balance": {
          "type": "object",
          "description": "The total unpaid pledge balance for the constituent.",
          "x-ms-summary": "Total pledge balance",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "total_received_giving": {
          "type": "object",
          "description": "The total received amount given by the constituent.",
          "x-ms-summary": "Total received giving",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "total_committed_matching_gifts": {
          "type": "object",
          "description": "This computed field calculates the total amount of matching gift commitments attributed to the constituent.",
          "x-ms-summary": "Total committed matching gifts",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "total_received_matching_gifts": {
          "type": "object",
          "description": "The total amount of payments toward matching gift pledges attributed to the constituent.",
          "x-ms-summary": "Total received matching gifts",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "total_soft_credits": {
          "type": "object",
          "description": "The total amount of soft credits applied to the constituent.",
          "x-ms-summary": "Total soft credits",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        }
      }
    },
    "ConstituentApi.PackageRead": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the package.",
          "x-ms-summary": "ID"
        },
        "description": {
          "type": "string",
          "description": "The package description.",
          "x-ms-summary": "description"
        }
      }
    },
    "GiftApi.AcknowledgementEdit": {
      "type": "object",
      "description": "Acknowledgement letters foster relationships with donors and show appreciation for their contributions. It is important to keep track of the acknowledgement status of gifts to ensure that each one gets a well-deserved thank you.",
      "properties": {
        "status": {
          "description": "The status of the acknowledgement.  When status is set to DoNotAcknowledge, letter and date should be null.  When status is set to NeedsAcknowledgement, date should be null.",
          "type": "string",
          "x-ms-summary": "Status",
          "enum": [
            "Acknowledged",
            "NeedsAcknowledgement",
            "DoNotAcknowledge"
          ]
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date associated with the acknowledgement (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "letter": {
          "type": "string",
          "description": "The letter associated with the acknowledgement.",
          "x-ms-summary": "Letter"
        }
      }
    },
    "GiftApi.AcknowledgementRead": {
      "type": "object",
      "description": "Acknowledgement",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date associated with the acknowledgement.",
          "x-ms-summary": "date"
        },
        "letter": {
          "type": "string",
          "description": "The letter associated with the acknowledgement.",
          "x-ms-summary": "letter"
        },
        "status": {
          "type": "string",
          "description": "The status of the acknowledgement. Available values are: ACKNOWLEDGED, NEEDSACKNOWLEDGEMENT, and DONOTACKNOWLEDGE.",
          "x-ms-summary": "status"
        }
      }
    },
    "GiftApi.ApiCollectionOfCustomFieldCategoryRead": {
      "type": "object",
      "description": "Custom field categories",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/GiftApi.CustomFieldCategoryRead"
          }
        }
      }
    },
    "GiftApi.ApiCollectionOfGiftAttachmentRead": {
      "type": "object",
      "description": "Attachments",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftAttachmentRead"
          }
        }
      }
    },
    "GiftApi.ApiCollectionOfGiftCustomFieldRead": {
      "type": "object",
      "description": "Custom fields",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftCustomFieldRead"
          }
        }
      }
    },
    "GiftApi.ApiCollectionOfGiftRead": {
      "type": "object",
      "description": "Gifts",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftRead"
          }
        }
      }
    },
    "GiftApi.BatchGiftAddResults": {
      "type": "object",
      "description": "Contains a collection of batch gift error records and the batch gifts that the operation added",
      "x-ms-summary": "Results",
      "properties": {
        "errors": {
          "type": "array",
          "description": "The batch gift errors associated with the batch gift add operation",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftBatchGiftError"
          }
        },
        "gifts": {
          "type": "array",
          "description": "The collection of batch gifts that were added by the batch gift add operation",
          "items": {
            "$ref": "#/definitions/GiftApi.BatchGiftRead"
          }
        }
      }
    },
    "GiftApi.GiftBatchGiftError": {
      "type": "object",
      "description": "Represents exceptions preventing items from being added to the batch.",
      "properties": {
        "affected_field": {
          "type": "string",
          "description": "The field affected by the error",
          "x-ms-summary": "affected field"
        },
        "batch_id": {
          "type": "string",
          "description": "The system record ID of the batch",
          "x-ms-summary": "batch ID"
        },
        "exception_error_code": {
          "type": "integer",
          "format": "int32",
          "description": "The exception error code",
          "x-ms-summary": "exception error code"
        },
        "exception_error_message": {
          "type": "string",
          "description": "The exception error message",
          "x-ms-summary": "exception error message"
        },
        "exception_error_name": {
          "type": "string",
          "description": "The exception error name",
          "x-ms-summary": "exception error name"
        },
        "gift_id": {
          "type": "string",
          "description": "The system record ID of the gift",
          "x-ms-summary": "gift ID"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the gift.",
          "x-ms-summary": "lookup ID"
        }
      }
    },
    "GiftApi.BatchGiftRead": {
      "type": "object",
      "description": "Batch gift",
      "properties": {
        "batch_id": {
          "type": "string",
          "description": "The ID of the batch to which the gift was added.",
          "x-ms-summary": "batch ID"
        },
        "errors": {
          "description": "The errors associated with the batch gift.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftBatchGiftError"
          },
          "x-ms-summary": "errors"
        },
        "id": {
          "type": "string",
          "description": "The system record ID of the batch gift.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the gift.",
          "x-ms-summary": "constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The gift type.",
          "x-ms-summary": "type"
        },
        "subtype": {
          "type": "string",
          "description": "The subtype of the gift.",
          "x-ms-summary": "subtype"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The gift date.",
          "x-ms-summary": "date"
        },
        "amount": {
          "type": "object",
          "description": "The monetary amount of the gift.",
          "x-ms-summary": "amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "balance": {
          "type": "object",
          "description": "The balance remaining on the gift.",
          "x-ms-summary": "balance",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "batch_number": {
          "type": "string",
          "description": "The batch number associated with this gift.",
          "x-ms-summary": "batch number"
        },
        "gift_status": {
          "type": "string",
          "description": "The status of the gift.",
          "x-ms-summary": "status"
        },
        "is_anonymous": {
          "type": "boolean",
          "description": "Is the gift anonymous?",
          "x-ms-summary": "anonymous?"
        },
        "constituency": {
          "type": "string",
          "description": "The constituency of the gift.",
          "x-ms-summary": "constituency"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the gift.",
          "x-ms-summary": "lookup ID"
        },
        "origin": {
          "type": "string",
          "description": "The origin of the gift.",
          "x-ms-summary": "origin"
        },
        "post_status": {
          "type": "string",
          "description": "The general ledger post status of the gift. Available values are Posted, NotPosted, and DoNotPost. When post_status is set to DoNotPost>, post_date should be null. When it is set to NotPosted, post_date is required but remains editable. When it is set to Posted, post_date is required and is no longer editable.",
          "x-ms-summary": "post status"
        },
        "post_date": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "post date",
          "description": "The date that the gift was posted to general ledger."
        },
        "reference": {
          "type": "string",
          "description": "Notes to track special details about a gift such as the motivation behind it or a detailed description of a gift-in-kind.",
          "x-ms-summary": "reference"
        },
        "recurring_gift_status_date": {
          "type": "object",
          "description": "The date that the gift status was last modified.",
          "x-ms-summary": "recurring gift date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "recurring_gift_schedule": {
          "type": "object",
          "description": "The recurring gift schedule.",
          "x-ms-summary": "recurring gift schedule",
          "properties": {
            "frequency": {
              "type": "string",
              "description": "Installment frequency of the recurring gift to view. Available values are WEEKLY, EVERY_TWO_WEEKS, EVERY_FOUR_WEEKS, MONTHLY, QUARTERLY, ANNUALLY.",
              "x-ms-summary": "frequency"
            },
            "start_date": {
              "type": "string",
              "format": "date-time",
              "description": "Date the recurring gift should start.",
              "x-ms-summary": "start"
            },
            "end_date": {
              "type": "string",
              "format": "date-time",
              "description": "Date the recurring gift should end.",
              "x-ms-summary": "end"
            }
          }
        },
        "gift_aid_amount": {
          "type": "object",
          "description": "This computed field calculates the total qualified amount of tax reclaimed from Gift Aid across all gift_splits for this gift. For the UK only.",
          "x-ms-summary": "gift aid amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "gift_aid_qualification_status": {
          "type": "string",
          "description": "This computed field determines the Gift Aid qualification status based on tax declaration information and the database format. Available values are: Qualified, NotQualified, and PartlyQualified. For the UK only.",
          "x-ms-summary": "gift aid qualification status"
        },
        "gift_code": {
          "type": "string",
          "description": "The gift code value associated with the gift.",
          "x-ms-summary": "gift code"
        },
        "gift_splits": {
          "type": "array",
          "description": "The set of gift splits associated with the gift.",
          "x-ms-summary": "gift splits",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftSplitRead"
          }
        },
        "fundraisers": {
          "type": "array",
          "description": "The set of fundraisers who receive credit for the gift.",
          "x-ms-summary": "fundraisers",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftFundraiserRead"
          }
        },
        "soft_credits": {
          "type": "array",
          "description": "The set of soft credits associated with the gift.",
          "x-ms-summary": "Soft credits",
          "items": {
            "$ref": "#/definitions/GiftApi.SoftCreditRead"
          }
        },
        "receipts": {
          "type": "array",
          "description": "The set of receipts associated with the gift.",
          "x-ms-summary": "Receipts",
          "items": {
            "$ref": "#/definitions/GiftApi.ReceiptRead"
          }
        },
        "acknowledgements": {
          "type": "array",
          "description": "The set of acknowledgements associated with the gift.",
          "x-ms-summary": "Acknowledgements",
          "items": {
            "$ref": "#/definitions/GiftApi.AcknowledgementRead"
          }
        },
        "payments": {
          "type": "array",
          "description": "The payments on the gift.",
          "x-ms-summary": "Payments",
          "items": {
            "$ref": "#/definitions/GiftApi.PaymentRead"
          }
        },
        "linked_gifts": {
          "type": "array",
          "description": "The identifiers of other gifts that are linked to this gift.",
          "x-ms-summary": "Linked gifts",
          "items": {
            "type": "string"
          }
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the gift was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the gift was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "GiftApi.CreatedGift": {
      "type": "object",
      "description": "Created gift",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created gift.",
          "x-ms-summary": "ID"
        }
      }
    },
    "GiftApi.CreatedGiftAttachment": {
      "type": "object",
      "description": "Created gift attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created gift attachment.",
          "x-ms-summary": "ID"
        }
      }
    },
    "GiftApi.CreatedGiftCustomField": {
      "type": "object",
      "description": "Created gift custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created gift custom field.",
          "x-ms-summary": "ID"
        }
      }
    },
    "GiftApi.CustomFieldCategoryRead": {
      "type": "object",
      "description": "Custom field category",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the custom field category.",
          "x-ms-summary": "Name"
        },
        "type": {
          "type": "string",
          "description": "The type of data that custom fields with this category represent.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        }
      }
    },
    "GiftApi.GiftAdd": {
      "type": "object",
      "description": "Gifts are the primary goal of fundraising efforts. They come in many forms and have a lot of information associated with them to ensure that they are properly allocated and acknowledged.",
      "required": [
        "constituent_id",
        "amount",
        "date",
        "type",
        "gift_splits",
        "payments",
        "origin"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the gift.",
          "x-ms-summary": "Constituent ID"
        },
        "amount": {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary amount of the gift.",
              "x-ms-summary": "Amount"
            }
          }
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The gift date (ex: '2020-09-18').",
          "x-ms-summary": "Date"
        },
        "type": {
          "type": "string",
          "description": "The gift type.",
          "x-ms-summary": "Type",
          "enum": [
            "Donation",
            "Other",
            "GiftInKind"
          ]
        },
        "gift_splits": {
          "type": "array",
          "description": "The set of gift splits associated with the gift.",
          "x-ms-summary": "Splits",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftSplitAdd"
          }
        },
        "payments": {
          "type": "object",
          "description": "The payment details.",
          "required": [
            "payment_method"
          ],
          "properties": {
            "payment_method": {
              "type": "string",
              "description": "The payment method.",
              "default": "Cash",
              "x-ms-summary": "Payment method",
              "x-ms-visibility": "advanced",
              "enum": [
                "Cash",
                "CreditCard",
                "PersonalCheck",
                "DirectDebit",
                "Other",
                "PayPal",
                "Venmo"
              ]
            },
            "check_number": {
              "type": "string",
              "description": "The check number (only applicable when payment method is \"PersonalCheck\").",
              "x-ms-summary": "Check number",
              "x-ms-visibility": "advanced"
            },
            "check_date": {
              "type": "object",
              "description": "The check date (only applicable when payment method is \"PersonalCheck\").",
              "x-ms-summary": "Check date",
              "properties": {
                "d": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The day in the fuzzy date.",
                  "x-ms-summary": "day",
                  "x-ms-visibility": "advanced"
                },
                "m": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The month in the fuzzy date.",
                  "x-ms-summary": "month",
                  "x-ms-visibility": "advanced"
                },
                "y": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The year in the fuzzy date.",
                  "x-ms-summary": "year",
                  "x-ms-visibility": "advanced"
                }
              }
            },
            "reference": {
              "type": "string",
              "description": "The payment reference (only applicable when payment method is \"Other\").",
              "x-ms-summary": "Reference",
              "x-ms-visibility": "advanced"
            },
            "reference_date": {
              "type": "object",
              "description": "The payment reference date (only applicable when payment method is \"Other\").",
              "x-ms-summary": "Reference date",
              "properties": {
                "d": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The day in the fuzzy date.",
                  "x-ms-summary": "day",
                  "x-ms-visibility": "advanced"
                },
                "m": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The month in the fuzzy date.",
                  "x-ms-summary": "month",
                  "x-ms-visibility": "advanced"
                },
                "y": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The year in the fuzzy date.",
                  "x-ms-summary": "year",
                  "x-ms-visibility": "advanced"
                }
              }
            }
          }
        },
        "is_anonymous": {
          "type": "boolean",
          "description": "Is the gift anonymous? If no value is provided, the default anonymity of the donor will be used.",
          "x-ms-summary": "Is anonymous?",
          "x-ms-visibility": "advanced"
        },
        "subtype": {
          "type": "string",
          "description": "The subtype of the gift.",
          "x-ms-summary": "Subtype",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "gift",
              "route": "giftsubtypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "gift"
              },
              "route": {
                "value": "giftsubtypes"
              }
            }
          }
        },
        "reference": {
          "type": "string",
          "description": "Notes to track special details about a gift such as the motivation behind it or a detailed description of a gift-in-kind.",
          "minLength": 0,
          "maxLength": 255,
          "x-ms-summary": "Comment",
          "x-ms-visibility": "advanced"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the gift.",
          "minLength": 0,
          "maxLength": 50,
          "x-ms-summary": "Lookup ID",
          "x-ms-visibility": "advanced"
        },
        "default_fundraiser_credits": {
          "type": "boolean",
          "description": "Use the default fundraiser credits?",
          "x-ms-summary": "Use fundraiser credits?",
          "x-ms-visibility": "advanced"
        },
        "default_soft_credits": {
          "type": "boolean",
          "description": "Use the default soft credits?",
          "x-ms-summary": "Use soft credits?",
          "x-ms-visibility": "advanced"
        },
        "constituency": {
          "type": "string",
          "description": "The constituency of the gift.",
          "x-ms-summary": "Constituency",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "constituentcodetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "constituentcodetypes"
              }
            }
          }
        },
        "batch_prefix": {
          "type": "string",
          "description": "The prefix to use for batch gifts.  This must include at least one letter, and is required when 'Batch number' has a value.",
          "x-ms-summary": "Batch prefix",
          "x-ms-visibility": "advanced"
        },
        "batch_number": {
          "type": "string",
          "description": "The batch number. Character limit: 50 (including the batch prefix).",
          "minLength": 0,
          "maxLength": 50,
          "x-ms-summary": "Batch number",
          "x-ms-visibility": "advanced"
        },
        "post_status": {
          "type": "string",
          "description": "The post status of the gift.",
          "x-ms-summary": "Post status",
          "x-ms-visibility": "advanced",
          "enum": [
            "Posted",
            "NotPosted",
            "DoNotPost"
          ]
        },
        "post_date": {
          "type": "string",
          "format": "date",
          "description": "The date the gift was posted (ex: '2020-09-18').",
          "x-ms-summary": "Post date",
          "x-ms-visibility": "advanced"
        },
        "origin": {
          "type": "string",
          "description": "The origin of the gift. When provided, it must parse to a valid JSON object with one string field called \"name\". Additional fields may be added as desired.",
          "x-ms-summary": "Origin",
          "x-ms-visibility": "internal",
          "default": "{ \"name\": \"Power Platform\" }"
        },
        "receipts": {
          "type": "object",
          "description": "The receipt details.",
          "required": [
            "status"
          ],
          "properties": {
            "status": {
              "type": "string",
              "description": "The receipt status of the gift.",
              "default": "NeedsReceipt",
              "x-ms-summary": "Receipt status",
              "x-ms-visibility": "advanced",
              "enum": [
                "Receipted",
                "NeedsReceipt",
                "DoNotReceipt"
              ]
            },
            "amount": {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "number",
                  "format": "double",
                  "description": "The monetary amount of the receipt for the gift.",
                  "x-ms-summary": "Receipt amount",
                  "x-ms-visibility": "advanced"
                }
              }
            },
            "date": {
              "type": "string",
              "format": "date",
              "description": "The date that the gift was receipted (ex: '2020-09-18').",
              "x-ms-summary": "Receipt date",
              "x-ms-visibility": "advanced"
            }
          }
        }
      }
    },
    "GiftApi.GiftAttachmentAdd": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "required": [
        "parent_id",
        "type"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the gift associated with the attachment.",
          "x-ms-summary": "Gift ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z'). This field defaults to the current date and time if not supplied.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        }
      }
    },
    "GiftApi.GiftAttachmentEdit": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        }
      }
    },
    "GiftApi.GiftAttachmentRead": {
      "type": "object",
      "description": "Attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the attachment.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the gift associated with the attachment.",
          "x-ms-summary": "Gift ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        },
        "thumbnail_url": {
          "type": "string",
          "description": "The URL for a thumbnail. For physical attachments that are images only. Contains a time-bound signature that limits access to 60 minutes.",
          "x-ms-summary": "Thumbnail URL"
        },
        "content_type": {
          "type": "string",
          "description": "The content type. For physical attachments only.",
          "x-ms-summary": "Content type"
        },
        "file_size": {
          "type": "integer",
          "format": "int64",
          "description": "The file size in bytes. For physical attachments only.",
          "x-ms-summary": "File size"
        }
      }
    },
    "GiftApi.GiftCustomFieldAdd": {
      "type": "object",
      "description": "While records provide many fields to track information, organizations often require additional details. To track this specialized information, use custom fields.",
      "required": [
        "parent_id",
        "category"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the gift associated with the custom field.",
          "x-ms-summary": "Gift ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category",
          "x-ms-dynamic-values": {
            "operationId": "ListGiftCustomFieldCategories",
            "value-collection": "value",
            "value-path": "name",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListGiftCustomFieldCategories",
            "itemsPath": "value",
            "itemValuePath": "name",
            "itemTitlePath": "name"
          }
        },
        "value": {
          "type": "object",
          "x-ms-dynamic-schema": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": "gift",
              "custom_field_type": "gifts",
              "category": {
                "parameter": "category"
              }
            },
            "value-path": "items"
          },
          "x-ms-dynamic-properties": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": {
                "value": "gift"
              },
              "custom_field_type": {
                "value": "gifts"
              },
              "category": {
                "parameterReference": "body/category"
              }
            },
            "itemValuePath": "items"
          }
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field (ex: '2005-09-18').",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        }
      }
    },
    "GiftApi.GiftCustomFieldEdit": {
      "type": "object",
      "description": "While records provide many fields to track information, organizations often require additional details. To track this specialized information, use custom fields.",
      "properties": {
        "category": {
          "type": "string",
          "description": "The custom field category (required if updating the custom field value).",
          "x-ms-summary": "Category",
          "x-ms-dynamic-values": {
            "operationId": "ListGiftCustomFieldCategories",
            "value-collection": "value",
            "value-path": "name",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListGiftCustomFieldCategories",
            "itemsPath": "value",
            "itemValuePath": "name",
            "itemTitlePath": "name"
          }
        },
        "value": {
          "type": "object",
          "x-ms-dynamic-schema": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": "gift",
              "custom_field_type": "gifts",
              "category": {
                "parameter": "category"
              }
            },
            "value-path": "items"
          },
          "x-ms-dynamic-properties": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": {
                "value": "gift"
              },
              "custom_field_type": {
                "value": "gifts"
              },
              "category": {
                "parameterReference": "body/category"
              }
            },
            "itemValuePath": "items"
          }
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field (ex: '2005-09-18').",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        }
      }
    },
    "GiftApi.GiftCustomFieldRead": {
      "type": "object",
      "description": "Custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the custom field.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the gift associated with the custom field.",
          "x-ms-summary": "Gift ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category"
        },
        "type": {
          "type": "string",
          "description": "The type of data that the custom field represents.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        },
        "value": {
          "description": "The value of the custom field.",
          "x-ms-summary": "Value"
        },
        "text_value": {
          "type": "string",
          "description": "The text value of the custom field.",
          "x-ms-summary": "Text value"
        },
        "number_value": {
          "type": "integer",
          "format": "int32",
          "description": "The numeric value of the custom field.",
          "x-ms-summary": "Number value"
        },
        "date_value": {
          "type": "string",
          "format": "date",
          "description": "The date value of the custom field.",
          "x-ms-summary": "Date value"
        },
        "currency_value": {
          "type": "number",
          "format": "double",
          "description": "The currency value of the custom field.",
          "x-ms-summary": "Currency value"
        },
        "boolean_value": {
          "type": "boolean",
          "description": "The boolean value of the custom field.",
          "x-ms-summary": "Boolean value"
        },
        "codetableentry_value": {
          "type": "string",
          "description": "The table entry value of the custom field.",
          "x-ms-summary": "Table entry value"
        },
        "constituentid_value": {
          "type": "string",
          "description": "The constituent ID value of the custom field.",
          "x-ms-summary": "Constituent ID value"
        },
        "fuzzydate_value": {
          "type": "object",
          "description": "The fuzzy date value of the custom field.",
          "x-ms-summary": "Fuzzy date value",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field.",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "GiftApi.GiftFundraiserRead": {
      "type": "object",
      "description": "Gift fundraiser",
      "properties": {
        "amount": {
          "type": "object",
          "description": "The amount credited to the fundraiser for the gift.",
          "x-ms-summary": "amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "constituent_id": {
          "type": "string",
          "description": "The constituent system record ID for the fundraiser associated with the gift.",
          "x-ms-summary": "fundraiser ID"
        }
      }
    },
    "GiftApi.GiftRead": {
      "type": "object",
      "description": "Gift",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the gift.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the gift.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The gift type.",
          "x-ms-summary": "Type"
        },
        "subtype": {
          "type": "string",
          "description": "The subtype of the gift.",
          "x-ms-summary": "Subtype"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The gift date.",
          "x-ms-summary": "Date"
        },
        "amount": {
          "type": "object",
          "description": "The monetary amount of the gift.",
          "x-ms-summary": "Amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "balance": {
          "type": "object",
          "description": "The balance remaining on the gift.",
          "x-ms-summary": "Balance",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "batch_number": {
          "type": "string",
          "description": "The batch number associated with this gift.",
          "x-ms-summary": "Batch number"
        },
        "gift_status": {
          "type": "string",
          "description": "The status of the gift.",
          "x-ms-summary": "Status"
        },
        "is_anonymous": {
          "type": "boolean",
          "description": "Is the gift anonymous?",
          "x-ms-summary": "Anonymous?"
        },
        "constituency": {
          "type": "string",
          "description": "The constituency of the gift.",
          "x-ms-summary": "Constituency"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the gift.",
          "x-ms-summary": "Lookup ID"
        },
        "origin": {
          "type": "string",
          "description": "The origin of the gift.",
          "x-ms-summary": "Origin"
        },
        "post_status": {
          "type": "string",
          "description": "The general ledger post status of the gift. Available values are Posted, NotPosted, and DoNotPost. When post_status is set to DoNotPost>, post_date should be null. When it is set to NotPosted, post_date is required but remains editable. When it is set to Posted, post_date is required and is no longer editable.",
          "x-ms-summary": "Post status"
        },
        "post_date": {
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Post date",
          "description": "The date that the gift was posted to general ledger."
        },
        "reference": {
          "type": "string",
          "description": "Notes to track special details about a gift such as the motivation behind it or a detailed description of a gift-in-kind.",
          "x-ms-summary": "Reference"
        },
        "recurring_gift_status_date": {
          "type": "object",
          "description": "The date that the gift status was last modified.",
          "x-ms-summary": "Recurring gift date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "recurring_gift_schedule": {
          "type": "object",
          "description": "The recurring gift schedule.",
          "x-ms-summary": "Recurring gift schedule",
          "properties": {
            "frequency": {
              "type": "string",
              "description": "Installment frequency of the recurring gift to view. Available values are WEEKLY, EVERY_TWO_WEEKS, EVERY_FOUR_WEEKS, MONTHLY, QUARTERLY, ANNUALLY.",
              "x-ms-summary": "frequency"
            },
            "start_date": {
              "type": "string",
              "format": "date-time",
              "description": "Date the recurring gift should start.",
              "x-ms-summary": "start"
            },
            "end_date": {
              "type": "string",
              "format": "date-time",
              "description": "Date the recurring gift should end.",
              "x-ms-summary": "end"
            }
          }
        },
        "gift_aid_amount": {
          "type": "object",
          "description": "This computed field calculates the total qualified amount of tax reclaimed from Gift Aid across all gift_splits for this gift. For the UK only.",
          "x-ms-summary": "Gift aid amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "gift_aid_qualification_status": {
          "type": "string",
          "description": "This computed field determines the Gift Aid qualification status based on tax declaration information and the database format. Available values are: Qualified, NotQualified, and PartlyQualified. For the UK only.",
          "x-ms-summary": "Gift aid qualification status"
        },
        "gift_code": {
          "type": "string",
          "description": "The gift code value associated with the gift.",
          "x-ms-summary": "Gift code"
        },
        "gift_splits": {
          "type": "array",
          "description": "The set of gift splits associated with the gift.",
          "x-ms-summary": "Gift splits",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftSplitRead"
          }
        },
        "fundraisers": {
          "type": "array",
          "description": "The set of fundraisers who receive credit for the gift.",
          "x-ms-summary": "Fundraisers",
          "items": {
            "$ref": "#/definitions/GiftApi.GiftFundraiserRead"
          }
        },
        "soft_credits": {
          "type": "array",
          "description": "The set of soft credits associated with the gift.",
          "x-ms-summary": "Soft credits",
          "items": {
            "$ref": "#/definitions/GiftApi.SoftCreditRead"
          }
        },
        "receipts": {
          "type": "array",
          "description": "The set of receipts associated with the gift.",
          "x-ms-summary": "Receipts",
          "items": {
            "$ref": "#/definitions/GiftApi.ReceiptRead"
          }
        },
        "acknowledgements": {
          "type": "array",
          "description": "The set of acknowledgements associated with the gift.",
          "x-ms-summary": "Acknowledgements",
          "items": {
            "$ref": "#/definitions/GiftApi.AcknowledgementRead"
          }
        },
        "payments": {
          "type": "array",
          "description": "The payments on the gift.",
          "x-ms-summary": "Payments",
          "items": {
            "$ref": "#/definitions/GiftApi.PaymentRead"
          }
        },
        "linked_gifts": {
          "type": "array",
          "description": "The identifiers of other gifts that are linked to this gift.",
          "x-ms-summary": "Linked gifts",
          "items": {
            "type": "string"
          }
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the gift was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the gift was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "GiftApi.GiftSplitAdd": {
      "type": "object",
      "description": "Split",
      "required": [
        "fund_id",
        "amount"
      ],
      "properties": {
        "campaign_id": {
          "type": "string",
          "description": "The system record ID of the campaign associated with the gift split.",
          "x-ms-summary": "campaign ID"
        },
        "fund_id": {
          "type": "string",
          "description": "The system record ID of the fund associated with the gift split.",
          "x-ms-summary": "fund ID"
        },
        "appeal_id": {
          "type": "string",
          "description": "The system record ID of the appeal associated with the gift split.",
          "x-ms-summary": "appeal ID"
        },
        "package_id": {
          "type": "string",
          "description": "The system record ID of the package associated with the gift split.",
          "x-ms-summary": "package ID"
        },
        "amount": {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary amount of the gift split.",
              "x-ms-summary": "amount"
            }
          }
        }
      }
    },
    "GiftApi.GiftSplitRead": {
      "type": "object",
      "description": "Gift split",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the gift split.",
          "x-ms-summary": "ID"
        },
        "amount": {
          "type": "object",
          "description": "The amount of the gift split.",
          "x-ms-summary": "amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "appeal_id": {
          "type": "string",
          "description": "The system record ID of the appeal associated with the gift split.",
          "x-ms-summary": "appeal ID"
        },
        "campaign_id": {
          "type": "string",
          "description": "The system record ID of the campaign associated with the gift split.",
          "x-ms-summary": "campaign ID"
        },
        "fund_id": {
          "type": "string",
          "description": "The system record ID of the fund associated with the gift split.",
          "x-ms-summary": "fund ID"
        },
        "gift_aid_amount": {
          "type": "object",
          "description": "The amount of tax reclaimed from gift aid for this gift split. For the UK only.",
          "x-ms-summary": "gift aid amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "gift_aid_qualification_status": {
          "type": "string",
          "description": "The gift aid qualification status of the gift split. Available values are: Qualified, and NotQualified. For the UK only.",
          "x-ms-summary": "gift aid qualification status"
        },
        "package_id": {
          "type": "string",
          "description": "The system record ID of the package associated with the gift split.",
          "x-ms-summary": "package ID"
        }
      }
    },
    "GiftApi.ReceiptEdit": {
      "type": "object",
      "description": "An object that represents the gift receipt to edit. To help donors track their giving for tax purposes, your organization should provide gift receipts.",
      "properties": {
        "status": {
          "type": "string",
          "description": "The receipt status of the gift.  When status is set to NeedsReceipt or DoNotReceipt, receipt date should be null.",
          "x-ms-summary": "Status",
          "enum": [
            "Receipted",
            "NeedsReceipt",
            "DoNotReceipt"
          ]
        },
        "amount": {
          "type": "object",
          "description": "The amount of the receipt.",
          "x-ms-summary": "Amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date on the receipt (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "description": "The number of the receipt.",
          "x-ms-summary": "Number"
        }
      }
    },
    "GiftApi.ReceiptRead": {
      "type": "object",
      "description": "Receipt",
      "properties": {
        "amount": {
          "type": "object",
          "description": "The amount of the receipt.",
          "x-ms-summary": "amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date on the receipt.",
          "x-ms-summary": "date"
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "description": "The number of the receipt.",
          "x-ms-summary": "number"
        },
        "status": {
          "type": "string",
          "description": "The status of the receipt. Available values are: RECEIPTED, NEEDSRECEIPT, and DONOTRECEIPT.",
          "x-ms-summary": "status"
        }
      }
    },
    "GiftApi.PaymentRead": {
      "type": "object",
      "description": "Payment",
      "properties": {
        "account_token": {
          "type": "string",
          "description": "The tokenized account information (ex: credit card) from the external payment provider. Only applies to payment methods of \"CreditCard\" and \"DirectDebit\".",
          "x-ms-summary": "account token"
        },
        "bbps_configuration_id": {
          "type": "string",
          "description": "The BBPS configuration ID. Only applies to payment methods of \"CreditCard\" and \"DirectDebit\".",
          "x-ms-summary": "BBPS configuration ID"
        },
        "bbps_transaction_id": {
          "type": "string",
          "description": "The BBPS transaction ID. Only applies to payment methods of \"CreditCard\" and \"DirectDebit\".",
          "x-ms-summary": "BBPS transaction ID"
        },
        "check_date": {
          "type": "object",
          "description": "The check date. Only applies to payment method of \"PersonalCheck\".",
          "x-ms-summary": "check date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "check_number": {
          "type": "string",
          "description": "The check number. Only applies to payment method of \"PersonalCheck\".",
          "x-ms-summary": "check number"
        },
        "checkout_transaction_id": {
          "type": "string",
          "description": "The checkout transaction ID. Only applies to payment methods of \"CreditCard\" and \"DirectDebit\".",
          "x-ms-summary": "checkout transaction ID"
        },
        "payment_method": {
          "type": "string",
          "description": "The payment method. Available values are listed below.",
          "x-ms-summary": "payment method"
        },
        "reference": {
          "type": "string",
          "description": "The reference. Only applies to payment method of \"Other\".",
          "x-ms-summary": "reference"
        },
        "reference_date": {
          "type": "object",
          "description": "The reference date. Only applies to payment method of \"Other\".",
          "x-ms-summary": "reference date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        }
      }
    },
    "GiftApi.SoftCreditRead": {
      "type": "object",
      "description": "Soft credit",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the soft credit.",
          "x-ms-summary": "ID"
        },
        "amount": {
          "type": "object",
          "description": "The amount of the soft credit.",
          "x-ms-summary": "amount",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the soft credit.",
          "x-ms-summary": "constituent ID"
        },
        "gift_id": {
          "type": "string",
          "description": "The system record ID of the gift associated with the soft credit.",
          "x-ms-summary": "gift ID"
        }
      }
    },
    "GiftApi.Virtual.BatchGiftAdd": {
      "type": "object",
      "description": "Gifts are the primary goal of fundraising efforts. They come in many forms and have a lot of information associated with them to ensure that they are properly allocated and acknowledged.",
      "required": [
        "gifts"
      ],
      "properties": {
        "gifts": {
          "type": "object",
          "description": "Gifts are the primary goal of fundraising efforts. They come in many forms and have a lot of information associated with them to ensure that they are properly allocated and acknowledged.",
          "required": [
            "constituent_id",
            "amount",
            "date",
            "type",
            "gift_splits",
            "payments",
            "origin"
          ],
          "properties": {
            "constituent_id": {
              "type": "string",
              "description": "The system record ID of the constituent associated with the gift.",
              "x-ms-summary": "Constituent ID"
            },
            "amount": {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "number",
                  "format": "double",
                  "description": "The monetary amount of the gift.",
                  "x-ms-summary": "Amount"
                }
              }
            },
            "date": {
              "type": "string",
              "format": "date",
              "description": "The gift date (ex: '2020-09-18').",
              "x-ms-summary": "Date"
            },
            "type": {
              "type": "string",
              "description": "The gift type.",
              "x-ms-summary": "Type",
              "enum": [
                "Donation",
                "Other",
                "GiftInKind"
              ]
            },
            "gift_splits": {
              "type": "array",
              "description": "The set of gift splits associated with the gift.",
              "x-ms-summary": "Splits",
              "items": {
                "$ref": "#/definitions/GiftApi.Virtual.BatchGiftSplitAdd"
              }
            },
            "payments": {
              "type": "object",
              "description": "The payment details.",
              "required": [
                "payment_method"
              ],
              "properties": {
                "payment_method": {
                  "type": "string",
                  "description": "The payment method.",
                  "default": "Cash",
                  "x-ms-summary": "Payment method",
                  "x-ms-visibility": "advanced",
                  "enum": [
                    "Cash",
                    "CreditCard",
                    "PersonalCheck",
                    "DirectDebit",
                    "Other",
                    "PayPal",
                    "Venmo"
                  ]
                },
                "check_number": {
                  "type": "string",
                  "description": "The check number (only applicable when payment method is \"PersonalCheck\").",
                  "x-ms-summary": "Check number",
                  "x-ms-visibility": "advanced"
                },
                "check_date": {
                  "type": "object",
                  "description": "The check date (only applicable when payment method is \"PersonalCheck\").",
                  "x-ms-summary": "Check date",
                  "properties": {
                    "d": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The day in the fuzzy date.",
                      "x-ms-summary": "day",
                      "x-ms-visibility": "advanced"
                    },
                    "m": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The month in the fuzzy date.",
                      "x-ms-summary": "month",
                      "x-ms-visibility": "advanced"
                    },
                    "y": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The year in the fuzzy date.",
                      "x-ms-summary": "year",
                      "x-ms-visibility": "advanced"
                    }
                  }
                },
                "reference": {
                  "type": "string",
                  "description": "The payment reference (only applicable when payment method is \"Other\").",
                  "x-ms-summary": "Reference",
                  "x-ms-visibility": "advanced"
                },
                "reference_date": {
                  "type": "object",
                  "description": "The payment reference date (only applicable when payment method is \"Other\").",
                  "x-ms-summary": "Reference date",
                  "properties": {
                    "d": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The day in the fuzzy date.",
                      "x-ms-summary": "day",
                      "x-ms-visibility": "advanced"
                    },
                    "m": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The month in the fuzzy date.",
                      "x-ms-summary": "month",
                      "x-ms-visibility": "advanced"
                    },
                    "y": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The year in the fuzzy date.",
                      "x-ms-summary": "year",
                      "x-ms-visibility": "advanced"
                    }
                  }
                }
              }
            },
            "is_anonymous": {
              "type": "boolean",
              "description": "Is the gift anonymous? If no value is provided, the default anonymity of the donor will be used.",
              "x-ms-summary": "Is anonymous?",
              "x-ms-visibility": "advanced"
            },
            "subtype": {
              "type": "string",
              "description": "The subtype of the gift.",
              "x-ms-summary": "Subtype",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "gift",
                  "route": "giftsubtypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "gift"
                  },
                  "route": {
                    "value": "giftsubtypes"
                  }
                }
              }
            },
            "reference": {
              "type": "string",
              "description": "Notes to track special details about a gift such as the motivation behind it or a detailed description of a gift-in-kind.",
              "minLength": 0,
              "maxLength": 255,
              "x-ms-summary": "Comment",
              "x-ms-visibility": "advanced"
            },
            "lookup_id": {
              "type": "string",
              "description": "The user-defined identifier for the gift.",
              "minLength": 0,
              "maxLength": 50,
              "x-ms-summary": "Lookup ID",
              "x-ms-visibility": "advanced"
            },
            "default_fundraiser_credits": {
              "type": "boolean",
              "description": "Use the default fundraiser credits?",
              "x-ms-summary": "Use fundraiser credits?",
              "x-ms-visibility": "advanced"
            },
            "default_soft_credits": {
              "type": "boolean",
              "description": "Use the default soft credits?",
              "x-ms-summary": "Use soft credits?",
              "x-ms-visibility": "advanced"
            },
            "constituency": {
              "type": "string",
              "description": "The constituency of the gift.",
              "x-ms-summary": "Constituency",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "constituentcodetypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "constituentcodetypes"
                  }
                }
              }
            },
            "post_status": {
              "type": "string",
              "description": "The post status of the gift.",
              "x-ms-summary": "Post status",
              "x-ms-visibility": "advanced",
              "enum": [
                "Posted",
                "NotPosted",
                "DoNotPost"
              ]
            },
            "post_date": {
              "type": "string",
              "format": "date",
              "description": "The date the gift was posted (ex: '2020-09-18').",
              "x-ms-summary": "Post date",
              "x-ms-visibility": "advanced"
            },
            "origin": {
              "type": "string",
              "description": "The origin of the gift. When provided, it must parse to a valid JSON object with one string field called \"name\". Additional fields may be added as desired.",
              "x-ms-summary": "Origin",
              "x-ms-visibility": "internal",
              "default": "{ \"name\": \"Power Platform\" }"
            },
            "receipts": {
              "type": "object",
              "description": "The receipt details.",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "description": "The receipt status of the gift.",
                  "default": "NeedsReceipt",
                  "x-ms-summary": "Receipt status",
                  "x-ms-visibility": "advanced",
                  "enum": [
                    "Receipted",
                    "NeedsReceipt",
                    "DoNotReceipt"
                  ]
                },
                "amount": {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "number",
                      "format": "double",
                      "description": "The monetary amount of the receipt for the gift.",
                      "x-ms-summary": "Receipt amount",
                      "x-ms-visibility": "advanced"
                    }
                  }
                },
                "date": {
                  "type": "string",
                  "format": "date",
                  "description": "The date that the gift was receipted (ex: '2020-09-18').",
                  "x-ms-summary": "Receipt date",
                  "x-ms-visibility": "advanced"
                }
              }
            }
          }
        }
      }
    },
    "GiftApi.Virtual.BatchGiftSplitAdd": {
      "type": "object",
      "description": "Split",
      "required": [
        "fund_id",
        "amount"
      ],
      "properties": {
        "campaign_id": {
          "type": "string",
          "description": "The system record ID of the campaign associated with the gift split.",
          "x-ms-summary": "campaign ID"
        },
        "fund_id": {
          "type": "string",
          "description": "The system record ID of the fund associated with the gift split.",
          "x-ms-summary": "fund ID"
        },
        "appeal_id": {
          "type": "string",
          "description": "The system record ID of the appeal associated with the gift split.",
          "x-ms-summary": "appeal ID"
        },
        "package_id": {
          "type": "string",
          "description": "The system record ID of the package associated with the gift split.",
          "x-ms-summary": "package ID"
        },
        "amount": {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary amount of the gift split.",
              "x-ms-summary": "amount"
            }
          }
        }
      }
    },
    "GiftBatchApi.ApiCollectionOfGiftBatch": {
      "type": "object",
      "description": "Gift batches",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of gift batches in the response.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response.",
          "items": {
            "$ref": "#/definitions/GiftBatchApi.GiftBatch"
          }
        }
      }
    },
    "GiftBatchApi.CreateBatch": {
      "type": "object",
      "description": "Defines a new gift batch.",
      "properties": {
        "batch_description": {
          "type": "string",
          "description": "The description of the batch.",
          "x-ms-summary": "Description"
        },
        "expected_number": {
          "type": "integer",
          "format": "int32",
          "description": "The number of gifts expected in the batch.",
          "x-ms-summary": "Expected number"
        },
        "expected_batch_total": {
          "type": "number",
          "format": "double",
          "description": "The total value of gifts in the batch.",
          "x-ms-summary": "Expected total"
        },
        "batch_number": {
          "type": "string",
          "description": "The unique identifier specific to the batch.",
          "x-ms-summary": "Batch number"
        }
      }
    },
    "GiftBatchApi.CreatedBatch": {
      "type": "object",
      "description": "Created gift batch",
      "properties": {
        "batch_id": {
          "type": "string",
          "description": "The system record ID of the newly created gift batch.",
          "x-ms-summary": "ID"
        }
      }
    },
    "GiftBatchApi.GiftBatch": {
      "type": "object",
      "description": "Represents the gift batch object",
      "x-ms-summary": "Gift batch",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the batch.",
          "x-ms-summary": "ID"
        },
        "batch_description": {
          "type": "string",
          "description": "The batch description.",
          "x-ms-summary": "description"
        },
        "batch_number": {
          "type": "string",
          "description": "The batch number",
          "x-ms-summary": "batch number"
        },
        "projected_number_of_gifts": {
          "type": "integer",
          "format": "int32",
          "description": "The projected number of gifts in the batch.",
          "x-ms-summary": "projected number"
        },
        "number_of_gifts": {
          "type": "integer",
          "format": "int32",
          "description": "The actual number of gifts in the batch.",
          "x-ms-summary": "actual number"
        },
        "projected_amount": {
          "type": "number",
          "format": "double",
          "description": "The projected value of gifts in the batch.",
          "x-ms-summary": "projected amount"
        },
        "actual_amount": {
          "type": "number",
          "format": "double",
          "description": "The actual value of gifts in the batch.",
          "x-ms-summary": "actual amount"
        },
        "has_exceptions": {
          "type": "boolean",
          "description": "Does the batch have exceptions?",
          "x-ms-summary": "has exceptions?"
        },
        "is_approved": {
          "type": "boolean",
          "description": "Is the batch approved?",
          "x-ms-summary": "approved?"
        },
        "created_by": {
          "type": "string",
          "description": "The name of the user who created the batch.",
          "x-ms-summary": "Created by"
        },
        "created_on": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the batch was created.",
          "x-ms-summary": "Created on"
        }
      }
    },
    "ListApi.ApiCollectionOfList": {
      "type": "object",
      "description": "Lists",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of lists in the set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response.",
          "items": {
            "$ref": "#/definitions/ListApi.ApiList"
          }
        }
      }
    },
    "ListApi.ApiList": {
      "type": "object",
      "description": "List",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID for the list."
        },
        "name": {
          "type": "string",
          "description": "The name of the list."
        }
      }
    },
    "PowerAutomateUIApi.DynamicValue": {
      "type": "object",
      "description": "A single dynamic value item",
      "properties": {
        "id": {
          "type": "string",
          "description": "The dynamic value item identifier."
        },
        "item": {
          "type": "string",
          "description": "The dynamic value item."
        }
      }
    },
    "PowerAutomateUIApi.DynamicValuesCollection": {
      "type": "object",
      "description": "A collection of objects for use with dynamic values.",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items in the list."
        },
        "value": {
          "type": "array",
          "description": "The set of objects for use with dynamic values.",
          "items": {
            "$ref": "#/definitions/PowerAutomateUIApi.DynamicValue"
          }
        }
      }
    },
    "PowerAutomateUIApi.DynamicProperties": {
      "type": "object",
      "description": "Defines some (but potentially not all) dynamic OpenApi metadata properties needed for a custom field.",
      "properties": {
        "items": {
          "type": "object",
          "description": "The OpenApi properties for the custom field value.",
          "properties": {
            "type": {
              "type": "string",
              "description": "The OpenApi type."
            },
            "format": {
              "type": "string",
              "description": "The OpenApi format."
            },
            "description": {
              "type": "string",
              "description": "The OpenApi description."
            }
          }
        }
      }
    }
  }
}
