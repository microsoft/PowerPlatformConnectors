{
  "swagger": "2.0",
  "info": {
    "title": "Apptigent PowerTools LITE",
    "version": "2020.3.14",
    "description": "Apptigent PowerTools LITE (Community Edition) is a FREE suite of essential utilities for enterprise workflow, forms and cloud applications. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, and more. PowerTools is the ultimate power user toolkit - FREE!",
    "x-ibm-name": "powertools-community",
    "contact": {
      "name": "Customer Support",
      "email": "support@apptigent.com",
      "url": "https://www.apptigent.com/help/"
    }
  },
  "host": "connect.apptigent.com",
  "basePath": "/api/utilities",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "X-IBM-Client-Id",
      "in": "header"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/AddToCollection": {
      "post": {
        "description": "Add an item to a collection",
        "operationId": "addToCollection",
        "summary": "Collections - Add to collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionModify",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionModify"
            },
            "description": "Collection modification parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/RemoveFromCollection": {
      "post": {
        "description": "Remove an item from a collection",
        "operationId": "removeFromCollection",
        "summary": "Collections - Remove from collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionModify",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionModify"
            },
            "description": "Collection modification parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/FilterCollection": {
      "post": {
        "description": "Filter a collection of strings by keyword",
        "operationId": "filterCollection",
        "summary": "Collections - Filter collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionFilter",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionFilter"
            },
            "description": "Filter collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/SortCollection": {
      "post": {
        "description": "Sort a collection of strings",
        "operationId": "sortCollection",
        "summary": "Collections - Sort collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionSort",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSort"
            },
            "description": "Sort collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CountCollection": {
      "post": {
        "description": "Count a collection of items",
        "operationId": "countCollection",
        "summary": "Collections - Count collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionCount",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionCount"
            },
            "description": "Count collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/SplitCollection": {
      "post": {
        "description": "Split a collection of items by matching value or index",
        "operationId": "splitCollection",
        "summary": "Collections - Split collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionSplit",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSplit"
            },
            "description": "Split collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputMultiCollection"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ReplaceValuesInCollection": {
      "post": {
        "description": "Replace whole or partial strings in a collection",
        "operationId": "replaceValuesInCollection",
        "summary": "Collections - Replace values in collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionReplace",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionReplace"
            },
            "description": "Replace values in collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CollectionContainsString": {
      "post": {
        "description": "Determine if any items in a collection contain a specific string",
        "operationId": "collectionContainsString",
        "summary": "Collections - Contains string",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionSearch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSearch"
            },
            "description": "Collection search parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CollectionStartsWithString": {
      "post": {
        "description": "Determine if any items in a collection start with a specific string",
        "operationId": "collectionStartsWithString",
        "summary": "Collections - Starts with string",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionSearch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSearch"
            },
            "description": "Collection search parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CollectionEndsWithString": {
      "post": {
        "description": "Determine if any items in a collection end with a specific string",
        "operationId": "collectionEndsWithString",
        "summary": "Collections - Ends with string",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionSearch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSearch"
            },
            "description": "Collection search parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CollectionContainsNumber": {
      "post": {
        "description": "Determine if a collection contains a specific number",
        "operationId": "collectionContainsNumber",
        "summary": "Collections - Contains number",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionSearch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSearchNumeric"
            },
            "description": "Collection search parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/DateTimeDifference": {
      "post": {
        "description": "Calculate the difference between two dates",
        "operationId": "dateTimeDifference",
        "summary": "DateTime - DateTime difference",
        "tags": [
          "DateTime"
        ],
        "parameters": [
          {
            "name": "dateTimeDifference",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputDateTimeDifference"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputDateDifference"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/FormatDateTime": {
      "post": {
        "description": "Create a date/time string in a specific format",
        "operationId": "formatDateTime",
        "summary": "DateTime - Format date and time",
        "tags": [
          "DateTime"
        ],
        "parameters": [
          {
            "name": "dateTimeFormat",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputDateTimeFormat"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/WorldTime": {
      "post": {
        "description": "Convert date and time from one time zone to another",
        "operationId": "worldTime",
        "summary": "DateTime - Get world time",
        "tags": [
          "DateTime"
        ],
        "parameters": [
          {
            "name": "dateTimeConversion",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputDateTimeConversion"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateAverage": {
      "post": {
        "description": "Calculate the average of two or more numbers",
        "operationId": "calculateAverage",
        "summary": "Math - Calculate average",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateMedian": {
      "post": {
        "description": "Calculate the median of two or more numbers",
        "operationId": "calculateMedian",
        "summary": "Math - Calculate median",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateMinMax": {
      "post": {
        "description": "Calculate the minimum or maximum value in a sequence of numbers",
        "operationId": "calculateMinMax",
        "summary": "Math - Calculate min or max",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateMinMax"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateSum": {
      "post": {
        "description": "Calculate the sum of two or more numbers",
        "operationId": "calculateSum",
        "summary": "Math - Calculate sum",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculatePower": {
      "post": {
        "description": "Raise number to a specified power",
        "operationId": "calculatePower",
        "summary": "Math - Calculate power",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculatePower",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculatePower"
            },
            "description": "Power calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateVariance": {
      "post": {
        "description": "Calculate the statistical variance of two or more numbers",
        "operationId": "calculateVariance",
        "summary": "Math - Calculate variance",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/RandomNumber": {
      "post": {
        "description": "Generate a random number within a specified range",
        "operationId": "randomNumber",
        "summary": "Math - Random number",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "numberRange",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputNumberRange"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/RoundNumber": {
      "post": {
        "description": "Round a numeric value up or down",
        "operationId": "roundNumber",
        "summary": "Math - Round number",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Numeric calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/StandardDeviation": {
      "post": {
        "description": "Calculate the standard deviation of two or more numbers",
        "operationId": "standardDeviation",
        "summary": "Math - Calculate standard deviation",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CompareStrings": {
      "post": {
        "description": "Perform a comparison of two strings",
        "operationId": "compareStrings",
        "summary": "Text - Compare strings",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringComparison",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputStringComparison"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ContainsString": {
      "post": {
        "description": "Determine if a string contains another string",
        "operationId": "containsString",
        "summary": "Text - Contains string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringContains",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputStringContains"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ConvertCase": {
      "post": {
        "description": "Convert string to upper, lower or title case",
        "operationId": "convertCase",
        "summary": "Text - Convert case",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "caseConversion",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCaseConversion"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/DecodeString": {
      "post": {
        "description": "Decode a string encoded with Base64 encoding",
        "operationId": "decodeString",
        "summary": "Text - Decode string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringInput",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "source"
              ],
              "properties": {
                "source": {
                  "type": "string",
                  "x-ms-summary": "Source",
                  "description": "Encoded string variable or text value"
                }
              },
              "example": {
                "source": "VGhlIGJyb3duIGNvdw=="
              }
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/EncodeString": {
      "post": {
        "description": "Encode a string using Base64 encoding",
        "operationId": "encodeString",
        "summary": "Text - Encode string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringInput",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/GenerateGuid": {
      "post": {
        "description": "Generate a globally unique identifier",
        "operationId": "generateGuid",
        "summary": "Text - Generate GUID",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "generateUniqueID",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputGenerateUniqueID"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/JoinStrings": {
      "post": {
        "description": "Join a collection of strings",
        "operationId": "joinStrings",
        "summary": "Text - Join strings",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "joinStrings",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputJoinStrings"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/RedactString": {
      "post": {
        "description": "Redact a strng containing sensitive content",
        "operationId": "redactString",
        "summary": "Text - Redact string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "redactString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputRedactString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ReplaceString": {
      "post": {
        "description": "Replace one value with another in a string",
        "operationId": "replaceString",
        "summary": "Text - Replace string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "replaceString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputReplaceString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/SplitString": {
      "post": {
        "description": "Split a string based upon one or more characters",
        "operationId": "splitString",
        "summary": "Text - Split string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "splitString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputSplitString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputStringArray"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/TrimString": {
      "post": {
        "description": "Trim leading or trailing whitespace from a string",
        "operationId": "trimString",
        "summary": "Text - Trim string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "trimString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputTrimString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/URLDecode": {
      "post": {
        "description": "Decode an encoded URL",
        "operationId": "urlDecode",
        "summary": "Text - Decode URL",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringInput",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "source"
              ],
              "properties": {
                "source": {
                  "type": "string",
                  "x-ms-summary": "Source",
                  "description": "Encoded string variable or text value"
                }
              },
              "example": {
                "source": "The%20brown%20cow"
              }
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/URLEncode": {
      "post": {
        "description": "Generate an encoded string from a complex hyperlink",
        "operationId": "urlEncode",
        "summary": "Text - Encode URL",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringInput",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "inputCollectionModify": {
      "type": "object",
      "required": [
        "input"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of values or objects to modify"
        },
        "item": {
          "type": "string",
          "description": "Item (for multiple items, leave blank and use Items)",
          "x-ms-summary": "Item"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Items (Collection, for a single item leave blank and use Item)",
          "x-ms-summary": "Items"
        },
        "index": {
          "type": "string",
          "x-ms-summary": "Index",
          "description": "Index position for operation (leave blank to specify end of collection)"
        }
      },
      "example": {
        "input": [
          "a",
          "b",
          "c"
        ],
        "item": "d",
        "items": "",
        "index": "0"
      }
    },
    "inputCollectionFilter": {
      "type": "object",
      "required": [
        "input",
        "match",
        "keywords"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of strings to filter"
        },
        "match": {
          "type": "string",
          "default": "Any",
          "enum": [
            "Any",
            "All",
            "None"
          ],
          "x-ms-summary": "Match",
          "description": "Match type"
        },
        "keywords": {
          "type": "string",
          "x-ms-summary": "Keywords",
          "description": "Keywords (separate multiple values with commas)"
        }
      },
      "example": {
        "input": [
          "the cow",
          "jumped over",
          "the moon"
        ],
        "match": "Any",
        "keywords": "cow,moon"
      }
    },
    "inputCollectionSort": {
      "type": "object",
      "required": [
        "input",
        "order"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of strings to sort"
        },
        "order": {
          "type": "string",
          "default": "Ascending",
          "enum": [
            "Ascending",
            "Descending"
          ],
          "x-ms-summary": "Order",
          "description": "Sort order"
        }
      },
      "example": {
        "input": [
          "a",
          "d",
          "c",
          "b",
          "e"
        ],
        "order": "Ascending"
      }
    },
    "inputCollectionCount": {
      "type": "object",
      "required": [
        "input"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of items to count"
        }
      },
      "example": {
        "input": [
          "a",
          "d",
          "c",
          "b",
          "e"
        ]
      }
    },
    "inputCollectionSplit": {
      "type": "object",
      "required": [
        "input"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of items to split"
        },
        "match": {
          "type": "string",
          "x-ms-summary": "Match Value",
          "description": "String to match (explicit, case-insensitive, leave empty to use Index)"
        },
        "index": {
          "type": "string",
          "x-ms-summary": "Index",
          "description": "Index location to split (leave empty to use Match value)"
        }
      },
      "example": {
        "input": [
          "the cow",
          "jumped over",
          "the moon"
        ],
        "match": "jumped over",
        "index": ""
      }
    },
    "inputCollectionReplace": {
      "type": "object",
      "required": [
        "input",
        "match",
        "replacement",
        "ignoreCase"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of strings"
        },
        "match": {
          "type": "string",
          "x-ms-summary": "Match value",
          "description": "Match value"
        },
        "replacement": {
          "type": "string",
          "x-ms-summary": "Replacement value",
          "description": "Replacement value"
        },
        "ignoreCase": {
          "type": "string",
          "default": "True",
          "enum": [
            "True",
            "False"
          ],
          "x-ms-summary": "Ignore case",
          "description": "Ignore case"
        }
      },
      "example": {
        "input": [
          "the brown cow",
          "jumped over",
          "the brown dog"
        ],
        "match": "Brown",
        "replacement": "spotted",
        "ignoreCase": "True"
      }
    },
    "inputCalculateNumber": {
      "type": "object",
      "required": [
        "input",
        "decimals"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Value",
          "description": "Numeric value to calculate"
        },
        "decimals": {
          "type": "number",
          "x-ms-summary": "Decimal Places",
          "description": "Round to number of decimal places",
          "minimum": 0,
          "default": 0
        }
      },
      "example": {
        "input": 0.195928,
        "decimals": 2
      }
    },
    "inputCalculateSeries": {
      "type": "object",
      "required": [
        "input",
        "decimals"
      ],
      "properties": {
        "input": {
          "type": "array",
          "description": "Colllection of values to calculate",
          "x-ms-summary": "Values",
          "items": {
            "type": "number"
          }
        },
        "decimals": {
          "type": "number",
          "description": "Round to number of decimal places",
          "x-ms-summary": "Decimal Places",
          "minimum": 0,
          "default": 0
        }
      },
      "example": {
        "input": [
          1,
          2,
          3,
          4,
          5
        ],
        "decimals": 2
      }
    },
    "inputCalculatePower": {
      "type": "object",
      "required": [
        "input",
        "power",
        "decimals"
      ],
      "properties": {
        "input": {
          "type": "number",
          "description": "Number to raise",
          "x-ms-summary": "Number"
        },
        "power": {
          "type": "number",
          "description": "Power",
          "x-ms-summary": "Power"
        },
        "decimals": {
          "type": "number",
          "description": "Round to number of decimal places",
          "x-ms-summary": "Decimal Places",
          "minimum": 0,
          "default": 0
        }
      },
      "example": {
          "input": 5.53,
          "power": 4,
          "decimals": 2
        }
    },
    "inputCalculateMinMax": {
      "type": "object",
      "required": [
        "input",
        "type"
      ],
      "properties": {
        "input": {
          "type": "array",
          "description": "Colllection of values to calculate",
          "x-ms-summary": "Values",
          "items": {
            "type": "number"
          }
        },
        "type": {
          "type": "string",
          "description": "Minimum or Maximum",
          "x-ms-summary": "Min or Max",
          "enum": [
            "Minimum",
            "Maximum"
          ],
          "default": "Minimum"
        }
      },
      "example": {
        "input": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "Minimum"
      }
    },
    "inputCaseConversion": {
      "type": "object",
      "required": [
        "input",
        "alphacase"
      ],
      "properties": {
        "input": {
          "type": "string",
          "description": "String containing the text to convert",
          "x-ms-summary": "Value"
        },
        "alphacase": {
          "type": "string",
          "enum": [
            "Upper",
            "Lower",
            "Title"
          ],
          "description": "Case of conversion result",
          "x-ms-summary": "Case"
        }
      },
      "example": {
        "input": "the brown cow",
        "alphacase": "Upper"
      }
    },
    "inputCollectionSearch": {
      "type": "object",
      "required": [
        "input",
        "match"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Values",
          "description": "Collection of strings to search"
        },
        "match": {
          "type": "string",
          "description": "Text to match",
          "x-ms-summary": "Text"
        },
        "trim": {
          "type": "string",
          "description": "Trim white space from comparison string",
          "x-ms-summary": "Trim",
          "enum": [
            "True",
            "False"
          ]
        },
        "ignorecase": {
          "type": "string",
          "x-ms-summary": "Ignore Case",
          "description": "Ignore case when performing comparison",
          "enum": [
            "True",
            "False"
          ]
        }
      },
      "example": {
        "input": [
          "the",
          "brown",
          "cow"
        ],
        "match": "cow",
        "trim": "True",
        "ignorecase": "True"
      }
    },
    "inputCollectionSearchNumeric": {
      "type": "object",
      "required": [
        "input",
        "match"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "x-ms-summary": "Values",
          "description": "Collection of strings to search"
        },
        "match": {
          "type": "number",
          "description": "Number to match",
          "x-ms-summary": "Number"
        },
        "type": {
          "type": "string",
          "x-ms-summary": "Number Type",
          "description": "Type of number - integer or decimal",
          "default": "Integer",
          "enum": [
            "Integer",
            "Decimal"
          ]
        }
      },
      "example": {
        "input": [
          1.25,
          10.5,
          20.75,
          51.25,
          119.6,
          301.25
        ],
        "match": 1.25
      }
    },
    "inputDateTimeConversion": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Source date and time"
        },
        "source": {
          "type": "string",
          "default": "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
          "enum": [
            "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
            "Greenwich Standard Time - (GMT) Monrovia, Reykjavik",
            "W. Europe Standard Time - (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
            "Central Europe Standard Time - (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
            "Central European Standard Time - (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
            "W. Central Africa Standard Time - (GMT+01:00) West Central Africa",
            "GTB Standard Time - (GMT+02:00) Athens, Bucharest, Istanbul",
            "Middle East Standard Time - (GMT+02:00) Beirut",
            "Egypt Standard Time - (GMT+02:00) Cairo",
            "South Africa Standard Time - (GMT+02:00) Harare, Pretoria",
            "FLE Standard Time - (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",
            "Israel Standard Time - (GMT+02:00) Jerusalem",
            "E. Europe Standard Time - (GMT+02:00) Minsk",
            "Namibia Standard Time - (GMT+02:00) Windhoek",
            "Arabic Standard Time - (GMT+03:00) Baghdad",
            "Arab Standard Time - (GMT+03:00) Kuwait, Riyadh",
            "Russian Standard Time - (GMT+03:00) Moscow, St. Petersburg, Volgograd",
            "E. Africa Standard Time - (GMT+03:00) Nairobi",
            "Georgian Standard Time - (GMT+03:00) Tbilisi",
            "Iran Standard Time - (GMT+03:30) Tehran",
            "Arabian Standard Time - (GMT+04:00) Abu Dhabi, Muscat",
            "Azerbaijan Standard Time - (GMT+04:00) Baku",
            "Mauritius Standard Time - (GMT+04:00) Port Louis",
            "Caucasus Standard Time - (GMT+04:00) Yerevan",
            "Afghanistan Standard Time - (GMT+04:30) Kabul",
            "Ekaterinburg Standard Time - (GMT+05:00) Ekaterinburg",
            "Pakistan Standard Time - (GMT+05:00) Islamabad, Karachi",
            "West Asia Standard Time - (GMT+05:00) Tashkent",
            "India Standard Time - (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi",
            "Sri Lanka Standard Time - (GMT+05:30) Sri Jayawardenepura",
            "Nepal Standard Time - (GMT+05:45) Kathmandu",
            "N. Central Asia Standard Time - (GMT+06:00) Almaty, Novosibirsk",
            "Central Asia Standard Time - (GMT+06:00) Astana, Dhaka",
            "Myanmar Standard Time - (GMT+06:30) Yangon (Rangoon)",
            "SE Asia Standard Time - (GMT+07:00) Bangkok, Hanoi, Jakarta",
            "North Asia Standard Time - (GMT+07:00) Krasnoyarsk",
            "China Standard Time - (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
            "North Asia East Standard Time - (GMT+08:00) Irkutsk, Ulaan Bataar",
            "Singapore Standard Time - (GMT+08:00) Kuala Lumpur, Singapore",
            "W. Australia Standard Time - (GMT+08:00) Perth",
            "Taipei Standard Time - (GMT+08:00) Taipei",
            "Tokyo Standard Time - (GMT+09:00) Osaka, Sapporo, Tokyo",
            "Korea Standard Time - (GMT+09:00) Seoul",
            "Yakutsk Standard Time - (GMT+09:00) Yakutsk",
            "Cen. Australia Standard Time - (GMT+09:30) Adelaide",
            "AUS Central Standard Time - (GMT+09:30) Darwin",
            "E. Australia Standard Time - (GMT+10:00) Brisbane",
            "AUS Eastern Standard Time - (GMT+10:00) Canberra, Melbourne, Sydney",
            "West Pacific Standard Time - (GMT+10:00) Guam, Port Moresby",
            "Tasmania Standard Time - (GMT+10:00) Hobart",
            "Vladivostok Standard Time - (GMT+10:00) Vladivostok",
            "Central Pacific Standard Time - (GMT+11:00) Magadan, Solomon Is., New Caledonia",
            "New Zealand Standard Time - (GMT+12:00) Auckland, Wellington",
            "Fiji Standard Time - (GMT+12:00) Fiji, Kamchatka, Marshall Is.",
            "Tonga Standard Time - (GMT+13:00) Nuku'alofa",
            "Azores Standard Time - (GMT-01:00) Azores",
            "Cape Verde Standard Time - (GMT-01:00) Cape Verde Is.",
            "Mid-Atlantic Standard Time - (GMT-02:00) Mid-Atlantic",
            "E. South America Standard Time - (GMT-03:00) Brasilia",
            "Argentina Standard Time - (GMT-03:00) Buenos Aires",
            "SA Eastern Standard Time - (GMT-03:00) Georgetown",
            "Greenland Standard Time - (GMT-03:00) Greenland",
            "Montevideo Standard Time - (GMT-03:00) Montevideo",
            "Newfoundland Standard Time - (GMT-03:30) Newfoundland",
            "Atlantic Standard Time - (GMT-04:00) Atlantic Time (Canada)",
            "SA Western Standard Time - (GMT-04:00) La Paz",
            "Central Brazilian Standard Time - (GMT-04:00) Manaus",
            "Pacific SA Standard Time - (GMT-04:00) Santiago",
            "Venezuela Standard Time - (GMT-04:30) Caracas",
            "SA Pacific Standard Time - (GMT-05:00) Bogota, Lima, Quito, Rio Branco",
            "Eastern Standard Time - (GMT-05:00) Eastern Time (US & Canada)",
            "US Eastern Standard Time - (GMT-05:00) Indiana (East)",
            "Central America Standard Time - (GMT-06:00) Central America",
            "Central Standard Time - (GMT-06:00) Central Time (US & Canada)",
            "Central Standard Time (Mexico) - (GMT-06:00) Guadalajara, Mexico City, Monterrey",
            "Canada Central Standard Time - (GMT-06:00) Saskatchewan",
            "US Mountain Standard Time - (GMT-07:00) Arizona",
            "Mountain Standard Time (Mexico) - (GMT-07:00) Chihuahua, La Paz, Mazatlan",
            "Mountain Standard Time - (GMT-07:00) Mountain Time (US & Canada)",
            "Pacific Standard Time - (GMT-08:00) Pacific Time (US & Canada)",
            "Pacific Standard Time (Mexico) - (GMT-08:00) Tijuana, Baja California",
            "Alaskan Standard Time - (GMT-09:00) Alaska",
            "Hawaiian Standard Time - (GMT-10:00) Hawaii",
            "Samoa Standard Time - (GMT-11:00) Midway Island, Samoa",
            "Dateline Standard Time - (GMT-12:00) International Date Line West"
          ],
          "x-ms-summary": "Source Time Zone"
        },
        "target": {
          "type": "string",
          "default": "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
          "enum": [
            "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
            "Greenwich Standard Time - (GMT) Monrovia, Reykjavik",
            "W. Europe Standard Time - (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
            "Central Europe Standard Time - (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
            "Central European Standard Time - (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
            "W. Central Africa Standard Time - (GMT+01:00) West Central Africa",
            "GTB Standard Time - (GMT+02:00) Athens, Bucharest, Istanbul",
            "Middle East Standard Time - (GMT+02:00) Beirut",
            "Egypt Standard Time - (GMT+02:00) Cairo",
            "South Africa Standard Time - (GMT+02:00) Harare, Pretoria",
            "FLE Standard Time - (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",
            "Israel Standard Time - (GMT+02:00) Jerusalem",
            "E. Europe Standard Time - (GMT+02:00) Minsk",
            "Namibia Standard Time - (GMT+02:00) Windhoek",
            "Arabic Standard Time - (GMT+03:00) Baghdad",
            "Arab Standard Time - (GMT+03:00) Kuwait, Riyadh",
            "Russian Standard Time - (GMT+03:00) Moscow, St. Petersburg, Volgograd",
            "E. Africa Standard Time - (GMT+03:00) Nairobi",
            "Georgian Standard Time - (GMT+03:00) Tbilisi",
            "Iran Standard Time - (GMT+03:30) Tehran",
            "Arabian Standard Time - (GMT+04:00) Abu Dhabi, Muscat",
            "Azerbaijan Standard Time - (GMT+04:00) Baku",
            "Mauritius Standard Time - (GMT+04:00) Port Louis",
            "Caucasus Standard Time - (GMT+04:00) Yerevan",
            "Afghanistan Standard Time - (GMT+04:30) Kabul",
            "Ekaterinburg Standard Time - (GMT+05:00) Ekaterinburg",
            "Pakistan Standard Time - (GMT+05:00) Islamabad, Karachi",
            "West Asia Standard Time - (GMT+05:00) Tashkent",
            "India Standard Time - (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi",
            "Sri Lanka Standard Time - (GMT+05:30) Sri Jayawardenepura",
            "Nepal Standard Time - (GMT+05:45) Kathmandu",
            "N. Central Asia Standard Time - (GMT+06:00) Almaty, Novosibirsk",
            "Central Asia Standard Time - (GMT+06:00) Astana, Dhaka",
            "Myanmar Standard Time - (GMT+06:30) Yangon (Rangoon)",
            "SE Asia Standard Time - (GMT+07:00) Bangkok, Hanoi, Jakarta",
            "North Asia Standard Time - (GMT+07:00) Krasnoyarsk",
            "China Standard Time - (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
            "North Asia East Standard Time - (GMT+08:00) Irkutsk, Ulaan Bataar",
            "Singapore Standard Time - (GMT+08:00) Kuala Lumpur, Singapore",
            "W. Australia Standard Time - (GMT+08:00) Perth",
            "Taipei Standard Time - (GMT+08:00) Taipei",
            "Tokyo Standard Time - (GMT+09:00) Osaka, Sapporo, Tokyo",
            "Korea Standard Time - (GMT+09:00) Seoul",
            "Yakutsk Standard Time - (GMT+09:00) Yakutsk",
            "Cen. Australia Standard Time - (GMT+09:30) Adelaide",
            "AUS Central Standard Time - (GMT+09:30) Darwin",
            "E. Australia Standard Time - (GMT+10:00) Brisbane",
            "AUS Eastern Standard Time - (GMT+10:00) Canberra, Melbourne, Sydney",
            "West Pacific Standard Time - (GMT+10:00) Guam, Port Moresby",
            "Tasmania Standard Time - (GMT+10:00) Hobart",
            "Vladivostok Standard Time - (GMT+10:00) Vladivostok",
            "Central Pacific Standard Time - (GMT+11:00) Magadan, Solomon Is., New Caledonia",
            "New Zealand Standard Time - (GMT+12:00) Auckland, Wellington",
            "Fiji Standard Time - (GMT+12:00) Fiji, Kamchatka, Marshall Is.",
            "Tonga Standard Time - (GMT+13:00) Nuku'alofa",
            "Azores Standard Time - (GMT-01:00) Azores",
            "Cape Verde Standard Time - (GMT-01:00) Cape Verde Is.",
            "Mid-Atlantic Standard Time - (GMT-02:00) Mid-Atlantic",
            "E. South America Standard Time - (GMT-03:00) Brasilia",
            "Argentina Standard Time - (GMT-03:00) Buenos Aires",
            "SA Eastern Standard Time - (GMT-03:00) Georgetown",
            "Greenland Standard Time - (GMT-03:00) Greenland",
            "Montevideo Standard Time - (GMT-03:00) Montevideo",
            "Newfoundland Standard Time - (GMT-03:30) Newfoundland",
            "Atlantic Standard Time - (GMT-04:00) Atlantic Time (Canada)",
            "SA Western Standard Time - (GMT-04:00) La Paz",
            "Central Brazilian Standard Time - (GMT-04:00) Manaus",
            "Pacific SA Standard Time - (GMT-04:00) Santiago",
            "Venezuela Standard Time - (GMT-04:30) Caracas",
            "SA Pacific Standard Time - (GMT-05:00) Bogota, Lima, Quito, Rio Branco",
            "Eastern Standard Time - (GMT-05:00) Eastern Time (US & Canada)",
            "US Eastern Standard Time - (GMT-05:00) Indiana (East)",
            "Central America Standard Time - (GMT-06:00) Central America",
            "Central Standard Time - (GMT-06:00) Central Time (US & Canada)",
            "Central Standard Time (Mexico) - (GMT-06:00) Guadalajara, Mexico City, Monterrey",
            "Canada Central Standard Time - (GMT-06:00) Saskatchewan",
            "US Mountain Standard Time - (GMT-07:00) Arizona",
            "Mountain Standard Time (Mexico) - (GMT-07:00) Chihuahua, La Paz, Mazatlan",
            "Mountain Standard Time - (GMT-07:00) Mountain Time (US & Canada)",
            "Pacific Standard Time - (GMT-08:00) Pacific Time (US & Canada)",
            "Pacific Standard Time (Mexico) - (GMT-08:00) Tijuana, Baja California",
            "Alaskan Standard Time - (GMT-09:00) Alaska",
            "Hawaiian Standard Time - (GMT-10:00) Hawaii",
            "Samoa Standard Time - (GMT-11:00) Midway Island, Samoa",
            "Dateline Standard Time - (GMT-12:00) International Date Line West"
          ],
          "x-ms-summary": "Target Time Zone"
        },
        "format": {
          "type": "string",
          "x-ms-summary": "Format",
          "description": "Display format (defaults to 'yyyy-MM-dd HH:mm:ss')"
        }
      },
      "example": {
        "input": "03/10/2010 09:00:00",
        "source": "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
        "target": "Central Standard Time - (GMT-06:00) Central Time (US & Canada)",
        "format": "yyyy-MM-dd HH:mm:ss"
      }
    },
    "inputDateTimeFormat": {
      "type": "object",
      "required": [
        "input",
        "culture",
        "format"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Source date and time"
        },
        "culture": {
          "type": "string",
          "default": "en-US",
          "enum": [
            "en-US",
            "af-ZA",
            "ar-AE",
            "ar-BH",
            "ar-DZ",
            "ar-EG",
            "ar-IQ",
            "ar-JO",
            "ar-KW",
            "ar-LB",
            "ar-LY",
            "ar-MA",
            "ar-OM",
            "ar-QA",
            "ar-SA",
            "ar-SY",
            "ar-TN",
            "ar-YE",
            "az-AZ",
            "be-BY",
            "bg-BG",
            "bs-BA",
            "ca-ES",
            "cs-CZ",
            "cy-GB",
            "da-DK",
            "de-AT",
            "de-CH",
            "de-DE",
            "de-LI",
            "de-LU",
            "el-GR",
            "en-AU",
            "en-BZ",
            "en-CA",
            "en-CB",
            "en-GB",
            "en-IE",
            "en-JM",
            "en-NZ",
            "en-PH",
            "en-TT",
            "en-ZA",
            "en-ZW",
            "es-AR",
            "es-BO",
            "es-CL",
            "es-CO",
            "es-CR",
            "es-DO",
            "es-EC",
            "es-ES",
            "es-GT",
            "es-HN",
            "es-MX",
            "es-NI",
            "es-PA",
            "es-PE",
            "es-PR",
            "es-PY",
            "es-SV",
            "es-UY",
            "es-VE",
            "et-EE",
            "eu-ES",
            "fa-IR",
            "fi-FI",
            "fo-FO",
            "fr-BE",
            "fr-CA",
            "fr-CH",
            "fr-FR",
            "fr-LU",
            "fr-MC",
            "gl-ES",
            "gu-IN",
            "he-IL",
            "hi-IN",
            "hr-BA",
            "hr-HR",
            "hu-HU",
            "hy-AM",
            "id-ID",
            "is-IS",
            "it-CH",
            "it-IT",
            "ja-JP",
            "ka-GE",
            "kk-KZ",
            "kn-IN",
            "ko-KR",
            "ky-KG",
            "lt-LT",
            "lv-LV",
            "mi-NZ",
            "mn-MN",
            "mr-IN",
            "ms-BN",
            "ms-MY",
            "mt-MT",
            "nl-BE",
            "nl-NL",
            "nn-NO",
            "ns-ZA",
            "pa-IN",
            "pl-PL",
            "ps-AR",
            "pt-BR",
            "pt-PT",
            "ro-RO",
            "ru-RU",
            "sa-IN",
            "sk-SK",
            "sl-SI",
            "sq-AL",
            "sr-BA",
            "sr-SP",
            "sv-FI",
            "sv-SE",
            "sw-KE",
            "ta-IN",
            "te-IN",
            "th-TH",
            "tl-PH",
            "tn-ZA",
            "tr-TR",
            "uk-UA",
            "ur-PK",
            "uz-UZ",
            "vi-VN",
            "zh-CN",
            "zh-HK",
            "zh-MO",
            "zh-SG",
            "zh-TW",
            "zu-ZA"
          ],
          "x-ms-summary": "Culture",
          "description": "Language culture"
        },
        "format": {
          "type": "string",
          "x-ms-summary": "Format",
          "description": "Output format"
        }
      },
      "example": {
        "input": "03/10/2010 00:00:00",
        "culture": "en-GB",
        "format": "ddd"
      }
    },
    "inputDateTimeDifference": {
      "type": "object",
      "required": [
        "dateTime1",
        "dateTime2"
      ],
      "properties": {
        "dateTime1": {
          "type": "string",
          "x-ms-summary": "First date/time value",
          "description": "First date/time value"
        },
        "dateTime2": {
          "type": "string",
          "x-ms-summary": "Second date/time value",
          "description": "Second date/time value"
        }
      },
      "example": {
        "dateTime1": "1/1/2010 12:37:19",
        "dateTime2": "3/15/2011 14:27:49"
      }
    },
    "inputGenerateUniqueID": {
      "type": "object",
      "required": [
        "uppercase"
      ],
      "properties": {
        "uppercase": {
          "type": "string",
          "x-ms-summary": "Uppercase",
          "description": "All uppercase alpha characters",
          "enum": [
            "True",
            "False"
          ]
        }
      },
      "example": {
        "uppercase": "True"
      }
    },
    "inputJoinStrings": {
      "type": "object",
      "required": [
        "input",
        "separator",
        "lower",
        "trim"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Values",
          "description": "Collection of strings to be joined"
        },
        "separator": {
          "type": "string",
          "x-ms-summary": "Separator",
          "description": "Separator character"
        },
        "lower": {
          "type": "string",
          "x-ms-summary": "Lowercase",
          "description": "Convert strings in collection to lowercase",
          "enum": [
            "True",
            "False"
          ]
        },
        "trim": {
          "type": "string",
          "x-ms-summary": "Trim",
          "description": "Trim strings in collection",
          "enum": [
            "True",
            "False"
          ]
        }
      },
      "example": {
        "input": [
          "The",
          "brown",
          "cow"
        ],
        "separator": ";",
        "lower": "True",
        "trim": "True"
      }
    },
    "inputNumberRange": {
      "type": "object",
      "required": [
        "start",
        "end"
      ],
      "properties": {
        "start": {
          "type": "number",
          "x-ms-summary": "Start",
          "description": "Start of range",
          "minimum": 0,
          "default": 0
        },
        "end": {
          "type": "number",
          "x-ms-summary": "End",
          "description": "End of range",
          "minimum": 0,
          "default": 0
        }
      },
      "example": {
        "start": 1,
        "end": 1000000
      }
    },
    "inputRedactString": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "value": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Individual string to redact"
        },
        "source": {
          "type": "string",
          "x-ms-summary": "Source String",
          "description": "String containing the complete text"
        },
        "values": {
          "type": "array",
          "x-ms-summary": "-OR- Values",
          "description": "Collection of strings to redact",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "value": "brown",
        "source": "The brown cow",
        "values": [
          "The",
          "brown",
          "cow"
        ]
      }
    },
    "inputReplaceString": {
      "type": "object",
      "required": [
        "source",
        "value",
        "replacement"
      ],
      "properties": {
        "source": {
          "type": "string",
          "x-ms-summary": "Source",
          "description": "String containing the text to be replaced"
        },
        "value": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Text to replace"
        },
        "replacement": {
          "type": "string",
          "x-ms-summary": "Replacement",
          "description": "Replacement text"
        }
      },
      "example": {
        "source": "The brown cow",
        "value": "cow",
        "replacement": "dog"
      }
    },
    "inputSplitString": {
      "type": "object",
      "required": [
        "input",
        "characters"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Text to split"
        },
        "characters": {
          "type": "string",
          "x-ms-summary": "Character(s)",
          "description": "One or more characters that will be used to split the text"
        }
      },
      "example": {
        "input": "The,brown,cow",
        "characters": ","
      }
    },
    "inputStringComparison": {
      "type": "object",
      "required": [
        "input",
        "compare",
        "lower",
        "trim"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Source",
          "description": "Original string"
        },
        "compare": {
          "type": "string",
          "x-ms-summary": "Target",
          "description": "Comparison string"
        },
        "lower": {
          "type": "string",
          "enum": [
            "True",
            "False"
          ],
          "x-ms-summary": "Lowercase",
          "description": "Convert strings to lowercase before comparison"
        },
        "trim": {
          "type": "string",
          "enum": [
            "True",
            "False"
          ],
          "x-ms-summary": "Trim",
          "description": "Trim strings before comparison"
        }
      },
      "example": {
        "input": "Cow",
        "compare": "dog",
        "lower": "True",
        "trim": "True"
      }
    },
    "inputStringContains": {
      "type": "object",
      "required": [
        "input",
        "find",
        "lower"
      ],
      "properties": {
        "find": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Text to match"
        },
        "input": {
          "type": "string",
          "x-ms-summary": "Target",
          "description": "Text to search"
        },
        "lower": {
          "type": "string",
          "enum": [
            "True",
            "False"
          ],
          "x-ms-summary": "Lowercase",
          "description": "Convert strings to lowercase"
        }
      },
      "example": {
        "find": "cow",
        "input": "The brown cow",
        "lower": "True"
      }
    },
    "inputString": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "x-ms-summary": "Source",
          "description": "String variable or text value"
        }
      },
      "example": {
        "source": "The brown cow"
      }
    },
    "inputTrimString": {
      "type": "object",
      "required": [
        "source",
        "type"
      ],
      "properties": {
        "source": {
          "type": "string",
          "x-ms-summary": "Source",
          "description": "String containing the text to be trimmed"
        },
        "type": {
          "type": "string",
          "x-ms-summary": "Type",
          "description": "Type of white space to remove",
          "enum": [
            "Start",
            "End",
            "Both"
          ]
        }
      },
      "example": {
        "source": "  The brown cow  ",
        "type": "Both"
      }
    },
    "outputStringArray": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "data",
          "x-ms-summary": "data"
        }
      },
      "example": {
        "data": [
          "string"
        ]
      }
    },
    "outputDateDifference": {
      "type": "object",
      "properties": {
        "years": {
          "type": "number",
          "description": "Years",
          "x-ms-summary": "Years"
        },
        "months": {
          "type": "number",
          "description": "Months",
          "x-ms-summary": "Months"
        },
        "days": {
          "type": "number",
          "description": "Days",
          "x-ms-summary": "Days"
        },
        "hours": {
          "type": "number",
          "description": "Hours",
          "x-ms-summary": "Hours"
        },
        "minutes": {
          "type": "number",
          "description": "Minutes",
          "x-ms-summary": "Minutes"
        },
        "milliseconds": {
          "type": "number",
          "description": "Milliseconds",
          "x-ms-summary": "Milliseconds"
        },
        "totalYears": {
          "type": "number",
          "format": "double",
          "description": "Total Years",
          "x-ms-summary": "Total Years"
        },
        "totalMonths": {
          "type": "number",
          "format": "double",
          "description": "Total Months",
          "x-ms-summary": "Total Months"
        },
        "totalDays": {
          "type": "number",
          "format": "double",
          "description": "Total Days",
          "x-ms-summary": "Total Days"
        },
        "totalHours": {
          "type": "number",
          "format": "double",
          "description": "Total Hours",
          "x-ms-summary": "Total Hours"
        },
        "totalMinutes": {
          "type": "number",
          "format": "double",
          "description": "Total Minutes",
          "x-ms-summary": "Total Minutes"
        },
        "totalSeconds": {
          "type": "number",
          "format": "double",
          "description": "Total Seconds",
          "x-ms-summary": "Total Seconds"
        },
        "totalMilliseconds": {
          "type": "number",
          "format": "double",
          "description": "Total Milliseconds",
          "x-ms-summary": "Total Milliseconds"
        },
        "ticks": {
          "type": "number",
          "description": "Ticks",
          "x-ms-summary": "Ticks"
        }
      },
      "example": {
        "years": 1,
        "months": 2,
        "days": 14,
        "hours": 1,
        "minutes": 50,
        "seconds": 30,
        "milliseconds": 0,
        "totalYears": 1.2,
        "totalMonths": 14.39,
        "totalDays": 438.08,
        "totalHours": 10513.84,
        "totalMinutes": 630830.5,
        "totalSeconds": 37849830,
        "totalMilliseconds": 37849830000,
        "ticks": 378498300000000
      }
    },
    "outputCollectionResult": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Modified collection result",
          "x-ms-summary": "Modified collection result"
        }
      },
      "example": {
        "result": [
          "a",
          "b",
          "c"
        ]
      }
    },
    "outputCollectionString": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Success",
          "x-ms-summary": "Success"
        },
        "item": {
          "type": "string",
          "description": "First Value",
          "x-ms-summary": "First Value"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "All Values",
          "x-ms-summary": "All Values"
        }
      },
      "example": {
        "status": false,
        "item": "string",
        "items": [
          "string"
        ]
      }
    },
    "outputCollectionNumber": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Success",
          "x-ms-summary": "Success"
        },
        "item": {
          "type": "number",
          "description": "First matching value",
          "x-ms-summary": "First Match"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "description": "All matching values",
          "x-ms-summary": "All Matches"
        }
      },
      "example": {
        "value": false,
        "item": 1.25,
        "items": [
          1.25,
          51.25,
          301.25
        ]
      }
    },
    "outputMultiCollection": {
      "type": "object",
      "properties": {
        "result1": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "First collection result",
          "x-ms-summary": "First collection result"
        },
        "result2": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Second collection result",
          "x-ms-summary": "Second collection result"
        }
      },
      "example": {
        "result1": [
          "a",
          "b",
          "c"
        ],
        "result2": [
          "d",
          "e",
          "f"
        ]
      }
    },
    "outputString": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "description": "Result",
          "x-ms-summary": "Result"
        }
      },
      "example": {
        "result": "string"
      }
    },
    "outputNumber": {
      "type": "object",
      "properties": {
        "result": {
          "type": "number",
          "description": "Result",
          "x-ms-summary": "Result"
        }
      },
      "example": {
        "result": 1
      }
    }
  },
  "tags": [
    {
      "name": "Collections",
      "description": "Arrays of base values (strings and numbers)."
    },
    {
      "name": "DateTime",
      "description": "Date and time operations."
    },
    {
      "name": "Math",
      "description": "Mathematical calculations and conversions."
    },
    {
      "name": "Text",
      "description": "String manipulation, parsing, conversion and related operations."
    }
  ],
  "x-ms-connector-metadata": [
      {
        "propertyName": "Website",
        "propertyValue": "https://www.apptigent.com"
      },
      {
        "propertyName": "Privacy policy",
        "propertyValue": "https://www.apptigent.com/help/privacy-policy/"
      },
      {
        "propertyName": "Categories",
        "propertyValue": "Productivity"
      }
    ]
}