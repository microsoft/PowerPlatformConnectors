{
  "swagger": "2.0",
  "info": {
    "title": "Apptigent PowerTools LITE",
    "version": "3.0",
    "description": "Apptigent PowerTools LITE (Community Edition) is a FREE suite of essential utilities for enterprise workflow, forms and cloud applications. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, and more. PowerTools is the ultimate power user toolkit - FREE!",
    "x-ibm-name": "powertools-community",
    "contact": {
      "name": "Customer Support",
      "url": "https://www.apptigent.com/help/",
      "email": "support@apptigent.com"
    }
  },
  "host": "api.apptigent.com",
  "basePath": "/powertools-community",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/AddToCollection": {
      "post": {
        "description": "Add an item to a collection",
        "operationId": "AddToCollection",
        "summary": "Collections - Add to collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "inputCollectionModify",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionModify"
            },
            "description": "Collection modification parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            },
            "examples": {
              "application/json": {
                "result": [
                  "a",
                  "b",
                  "c"
                ]
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/RemoveFromCollection": {
      "post": {
        "description": "Remove an item from a collection",
        "operationId": "RemoveFromCollection",
        "summary": "Collections - Remove from collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "inputCollectionModify",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionModify"
            },
            "description": "Collection modification parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            },
            "examples": {
              "application/json": {
                "result": [
                  "a",
                  "b",
                  "c"
                ]
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/FilterCollection": {
      "post": {
        "description": "Filter a collection of strings by keyword",
        "operationId": "FilterCollection",
        "summary": "Collections - Filter collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "inputCollectionFilter",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionFilter"
            },
            "description": "Filter collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            },
            "examples": {
              "application/json": {
                "result": [
                  "a",
                  "b",
                  "c"
                ]
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/SortCollection": {
      "post": {
        "description": "Sort a collection of strings",
        "operationId": "SortCollection",
        "summary": "Collections - Sort collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "inputCollectionSort",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSort"
            },
            "description": "Sort collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            },
            "examples": {
              "application/json": {
                "result": [
                  "a",
                  "b",
                  "c"
                ]
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CountCollection": {
      "post": {
        "description": "Count a collection of items",
        "operationId": "CountCollection",
        "summary": "Collections - Count collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "inputCollectionCount",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionCount"
            },
            "description": "Count collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/SplitCollection": {
      "post": {
        "description": "Split a collection of items by matching value or index",
        "operationId": "SplitCollection",
        "summary": "Collections - Split collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "inputCollectionSplit",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSplit"
            },
            "description": "Split collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputMultiCollection"
            },
            "examples": {
              "application/json": {
                "result1": [
                  "a",
                  "b",
                  "c"
                ],
                "result2": [
                  "d",
                  "e",
                  "f"
                ]
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/RemoveDuplicates": {
      "post": {
        "description": "Remove duplicate items from a collection",
        "operationId": "RemoveDuplicates",
        "summary": "Collections - Remove duplicates from collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "inputCollectionDeduplicate",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionDeduplicate"
            },
            "description": "Collection deduplication parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            },
            "examples": {
              "application/json": {
                "result": [
                  "a",
                  "b",
                  "c"
                ]
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/ReplaceValuesInCollection": {
      "post": {
        "description": "Replace whole or partial strings in a collection",
        "operationId": "ReplaceValuesInCollection",
        "summary": "Collections - Replace values in collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "inputCollectionReplace",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionReplace"
            },
            "description": "Replace values in collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            },
            "examples": {
              "application/json": {
                "result": [
                  "a",
                  "b",
                  "c"
                ]
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CollectionContainsString": {
      "post": {
        "description": "Determine if any items in a collection contain a specific string",
        "operationId": "CollectionContainsString",
        "summary": "Collections - Contains string",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "inputCollectionSearch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSearch"
            },
            "description": "Collection search parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionString"
            },
            "examples": {
              "application/json": {
                "status": false,
                "item": "string",
                "items": [
                  "string"
                ]
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CollectionStartsWithString": {
      "post": {
        "description": "Determine if any items in a collection start with a specific string",
        "operationId": "CollectionStartsWithString",
        "summary": "Collections - Starts with string",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "inputCollectionSearch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSearch"
            },
            "description": "Collection search parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionString"
            },
            "examples": {
              "application/json": {
                "status": false,
                "item": "string",
                "items": [
                  "string"
                ]
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CollectionEndsWithString": {
      "post": {
        "description": "Determine if any items in a collection end with a specific string",
        "operationId": "CollectionEndsWithString",
        "summary": "Collections - Ends with string",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "inputCollectionSearch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSearch"
            },
            "description": "Collection search parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionString"
            },
            "examples": {
              "application/json": {
                "status": false,
                "item": "string",
                "items": [
                  "string"
                ]
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CollectionContainsNumber": {
      "post": {
        "description": "Determine if a collection contains a specific number",
        "operationId": "CollectionContainsNumber",
        "summary": "Collections - Contains number",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "inputCollectionSearchNumeric",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSearchNumeric"
            },
            "description": "Collection search parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionNumber"
            },
            "examples": {
              "application/json": {
                "status": false,
                "item": 1.25,
                "items": [
                  1.25,
                  2.5,
                  3.75
                ]
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/DateTimeDifference": {
      "post": {
        "description": "Calculate the difference between two dates",
        "operationId": "DateTimeDifference",
        "summary": "DateTime - DateTime difference",
        "tags": [
          "DateTime"
        ],
        "parameters": [
          {
            "name": "inputDateTimeDifference",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputDateTimeDifference"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputDateDifference"
            },
            "examples": {
              "application/json": {
                "years": 1,
                "months": 2,
                "days": 14,
                "hours": 1,
                "minutes": 50,
                "seconds": 30,
                "milliseconds": 0,
                "totalYears": 1.2,
                "totalMonths": 14.39,
                "totalDays": 438.08,
                "totalHours": 10513.84,
                "totalMinutes": 630830.5,
                "totalSeconds": 37849830,
                "totalMilliseconds": 37849830000,
                "ticks": 378498300000000
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/FormatDateTime": {
      "post": {
        "description": "Create a date/time string in a specific format",
        "operationId": "FormatDateTime",
        "summary": "DateTime - Format date and time",
        "tags": [
          "DateTime"
        ],
        "parameters": [
          {
            "name": "inputDateTimeFormat",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputDateTimeFormat"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/WorldTime": {
      "post": {
        "description": "Convert date and time from one time zone to another",
        "operationId": "WorldTime",
        "summary": "DateTime - Get world time",
        "tags": [
          "DateTime"
        ],
        "parameters": [
          {
            "name": "inputDateTimeConversion",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputDateTimeConversion"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateAverage": {
      "post": {
        "description": "Calculate the average of two or more numbers",
        "operationId": "CalculateAverage",
        "summary": "Math - Calculate average",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateMedian": {
      "post": {
        "description": "Calculate the median of two or more numbers",
        "operationId": "CalculateMedian",
        "summary": "Math - Calculate median",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateMinMax": {
      "post": {
        "description": "Calculate the minimum or maximum value in a sequence of numbers",
        "operationId": "CalculateMinMax",
        "summary": "Math - Calculate minimum or maximum",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateMinMax",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateMinMax"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateSum": {
      "post": {
        "description": "Calculate the sum of two or more numbers",
        "operationId": "CalculateSum",
        "summary": "Math - Calculate sum",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculatePower": {
      "post": {
        "description": "Raise number to a specified power",
        "operationId": "CalculatePower",
        "summary": "Math - Calculate power",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculatePower",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculatePower"
            },
            "description": "Power calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateVariance": {
      "post": {
        "description": "Calculate the statistical variance of two or more numbers",
        "operationId": "CalculateVariance",
        "summary": "Math - Calculate variance",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateAddition": {
      "post": {
        "description": "Calculate the sum of two numbers",
        "operationId": "CalculateAddition",
        "summary": "Math - Calculate Addition",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateNumbers",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumbers"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateSubtraction": {
      "post": {
        "description": "Calculate the difference between two numbers",
        "operationId": "CalculateSubtraction",
        "summary": "Math - Calculate Subtraction",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateNumbers",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumbers"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateMultiplication": {
      "post": {
        "description": "Calculate the product of two numbers",
        "operationId": "CalculateMultiplication",
        "summary": "Math - Calculate Multiplication",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateNumbers",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumbers"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateDivision": {
      "post": {
        "description": "Calculate the quotient of two numbers",
        "operationId": "CalculateDivision",
        "summary": "Math - Calculate Division",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateNumbers",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumbers"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateModulo": {
      "post": {
        "description": "Calculate the remainder of dividing two numbers",
        "operationId": "CalculateModulo",
        "summary": "Math - Calculate Modulo",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateNumbers",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumbers"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateNthRoot": {
      "post": {
        "description": "Calculate the n-th root of a number",
        "operationId": "CalculateNthRoot",
        "summary": "Math - Calculate Nth Root",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateNumbers",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumbers"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateSquareRoot": {
      "post": {
        "description": "Calculate the square root of a number",
        "operationId": "CalculateSquareRoot",
        "summary": "Math - Calculate Square Root",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateLogarithm": {
      "post": {
        "description": "Calculate the logarithm of a number",
        "operationId": "CalculateLogarithm",
        "summary": "Math - Calculate Logarithm",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateSine": {
      "post": {
        "description": "Calculate the sine value of an angle",
        "operationId": "CalculateSine",
        "summary": "Math - Calculate Sine",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateCosine": {
      "post": {
        "description": "Calculate the cosine value of an angle",
        "operationId": "CalculateCosine",
        "summary": "Math - Calculate Cosine",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateTangent": {
      "post": {
        "description": "Calculate the tangent value of an angle",
        "operationId": "CalculateTangent",
        "summary": "Math - Calculate Tangent",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CalculateAbsolute": {
      "post": {
        "description": "Calculate the absolute value of a number",
        "operationId": "CalculateAbsolute",
        "summary": "Math - Calculate Absolute",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/ConvertAngle": {
      "post": {
        "description": "Convert value from one angle measurement to another",
        "operationId": "ConvertAngle",
        "summary": "Math - Convert angle",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputConvertAngle",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertAngle"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/ConvertArea": {
      "post": {
        "description": "Convert value from one area measurement to another",
        "operationId": "ConvertArea",
        "summary": "Math - Convert area",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputConvertArea",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertArea"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/ConvertDistance": {
      "post": {
        "description": "Convert value from one distance measurement to another",
        "operationId": "ConvertDistance",
        "summary": "Math - Convert distance",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputConvertDistance",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertDistance"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/ConvertDuration": {
      "post": {
        "description": "Convert value from one duration measurement to another",
        "operationId": "ConvertDuration",
        "summary": "Math - Convert duration",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputConvertDuration",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertDuration"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/ConvertEnergy": {
      "post": {
        "description": "Convert value from one energy measurement to another",
        "operationId": "ConvertEnergy",
        "summary": "Math - Convert energy",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputConvertEnergy",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertEnergy"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/ConvertPower": {
      "post": {
        "description": "Convert value from one power measurement to another",
        "operationId": "ConvertPower",
        "summary": "Math - Convert power",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputConvertPower",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertPower"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/ConvertSpeed": {
      "post": {
        "description": "Convert value from one speed measurement to another",
        "operationId": "ConvertSpeed",
        "summary": "Math - Convert speed",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputConvertSpeed",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertSpeed"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/ConvertTemperature": {
      "post": {
        "description": "Convert value from one temperature measurement to another",
        "operationId": "ConvertTemperature",
        "summary": "Math - Convert temperature",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputConvertTemperature",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertTemperature"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/ConvertVolume": {
      "post": {
        "description": "Convert value from one volume measurement to another",
        "operationId": "ConvertVolume",
        "summary": "Math - Convert volume",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputConvertVolume",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertVolume"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/ConvertWeight": {
      "post": {
        "description": "Convert value from one weight measurement to another",
        "operationId": "ConvertWeight",
        "summary": "Math - Convert weight",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputConvertWeight",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertWeight"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/RandomNumber": {
      "post": {
        "description": "Generate a random number within a specified range",
        "operationId": "RandomNumber",
        "summary": "Math - Random number",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputNumberRange",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputNumberRange"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/RoundNumber": {
      "post": {
        "description": "Round a numeric value up or down",
        "operationId": "RoundNumber",
        "summary": "Math - Round number",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Numeric calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/StandardDeviation": {
      "post": {
        "description": "Calculate the standard deviation of two or more numbers",
        "operationId": "StandardDeviation",
        "summary": "Math - Calculate standard deviation",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "inputCalculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            },
            "examples": {
              "application/json": {
                "result": 1
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/CompareStrings": {
      "post": {
        "description": "Perform a comparison of two strings",
        "operationId": "CompareStrings",
        "summary": "Text - Compare strings",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "inputStringComparison",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputStringComparison"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/ContainsString": {
      "post": {
        "description": "Determine if a string contains another string",
        "operationId": "ContainsString",
        "summary": "Text - Contains string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "inputStringContains",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputStringContains"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/ConvertCase": {
      "post": {
        "description": "Convert string to upper, lower or title case",
        "operationId": "ConvertCase",
        "summary": "Text - Convert case",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "inputCaseConversion",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCaseConversion"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/DecodeString": {
      "post": {
        "description": "Decode a string encoded with Base64 encoding",
        "operationId": "DecodeString",
        "summary": "Text - Decode string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringInput",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StringInput"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/EncodeString": {
      "post": {
        "description": "Encode a string using Base64 encoding",
        "operationId": "EncodeString",
        "summary": "Text - Encode string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "inputString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/GenerateGuid": {
      "post": {
        "description": "Generate a globally unique identifier",
        "operationId": "GenerateGuid",
        "summary": "Text - Generate GUID",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "inputGenerateUniqueID",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputGenerateUniqueID"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/JoinStrings": {
      "post": {
        "description": "Join a collection of strings",
        "operationId": "JoinStrings",
        "summary": "Text - Join strings",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "inputJoinStrings",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputJoinStrings"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/RedactString": {
      "post": {
        "description": "Redact a strng containing sensitive content",
        "operationId": "RedactString",
        "summary": "Text - Redact string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "inputRedactString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputRedactString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/ReplaceString": {
      "post": {
        "description": "Replace one value with another in a string",
        "operationId": "ReplaceString",
        "summary": "Text - Replace string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "inputReplaceString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputReplaceString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/SplitString": {
      "post": {
        "description": "Split a string based upon one or more characters",
        "operationId": "SplitString",
        "summary": "Text - Split string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "inputSplitString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputSplitString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputStringArray"
            },
            "examples": {
              "application/json": {
                "data": [
                  "string"
                ]
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/TrimString": {
      "post": {
        "description": "Trim leading or trailing whitespace from a string",
        "operationId": "TrimString",
        "summary": "Text - Trim string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "inputTrimString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputTrimString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/URLDecode": {
      "post": {
        "description": "Decode an encoded URL",
        "operationId": "UrlDecode",
        "summary": "Text - Decode URL",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "inputUrlDecode",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputUrlDecode"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    },
    "/URLEncode": {
      "post": {
        "description": "Generate an encoded string from a complex hyperlink",
        "operationId": "UrlEncode",
        "summary": "Text - Encode URL",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "inputString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            },
            "examples": {
              "application/json": {
                "result": "string"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "StringInput": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "x-ms-summary": "Source",
          "description": "string variable or text value"
        }
      },
      "example": {
        "source": "This is an example string"
      }
    },
    "inputCollectionSearch": {
      "type": "object",
      "required": [
        "input",
        "match"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Values",
          "description": "Collection of strings to search"
        },
        "match": {
          "type": "string",
          "description": "Text to match",
          "x-ms-summary": "Text"
        },
        "trim": {
          "type": "string",
          "description": "Trim white space from comparison string",
          "x-ms-summary": "Trim",
          "enum": [
            "True",
            "False"
          ]
        },
        "ignorecase": {
          "type": "string",
          "x-ms-summary": "Ignore Case",
          "description": "Ignore case when performing comparison",
          "enum": [
            "True",
            "False"
          ]
        }
      },
      "example": {
        "input": [
          "the",
          "brown",
          "cow "
        ],
        "match": "cow",
        "trim": "True",
        "ignorecase": "True"
      }
    },
    "inputCollectionSearchNumeric": {
      "type": "object",
      "required": [
        "input",
        "match"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "x-ms-summary": "Values",
          "description": "Collection of strings to search"
        },
        "match": {
          "type": "number",
          "description": "Number to match",
          "x-ms-summary": "Number"
        },
        "type": {
          "type": "string",
          "x-ms-summary": "Number Type",
          "description": "Type of number - integer or decimal",
          "default": "Integer",
          "enum": [
            "Integer",
            "Decimal"
          ]
        }
      },
      "example": {
        "input": [
          1.25,
          10.5,
          20.75,
          51.25,
          119.6,
          301.25
        ],
        "match": "1.25,",
        "type": "Decimal"
      }
    },
    "inputCollectionModify": {
      "type": "object",
      "required": [
        "input"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of values or objects to modify"
        },
        "item": {
          "type": "string",
          "description": "Item (for multiple items, leave blank and use Items)",
          "x-ms-summary": "Item"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Items (Collection, for a single item leave blank and use Item)",
          "x-ms-summary": "Items"
        },
        "index": {
          "type": "string",
          "x-ms-summary": "Index",
          "description": "Index position for operation (leave blank to specify end of collection)"
        }
      },
      "example": {
        "input": [
          "a",
          "b",
          "c"
        ],
        "item": "d",
        "items": "",
        "index": "0"
      }
    },
    "inputCollectionFilter": {
      "type": "object",
      "required": [
        "input",
        "match",
        "keywords"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of strings to filter"
        },
        "match": {
          "type": "string",
          "default": "Any",
          "enum": [
            "Any",
            "All",
            "None"
          ],
          "x-ms-summary": "Match",
          "description": "Match type"
        },
        "keywords": {
          "type": "string",
          "x-ms-summary": "Keywords",
          "description": "Keywords (separate multiple values with commas)"
        }
      },
      "example": {
        "input": [
          "the cow",
          "jumped over",
          "the moon"
        ],
        "match": "Any",
        "keywords": "cow,moon"
      }
    },
    "inputCollectionSort": {
      "type": "object",
      "required": [
        "input",
        "order"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of strings to sort"
        },
        "order": {
          "type": "string",
          "default": "Ascending",
          "enum": [
            "Ascending",
            "Descending"
          ],
          "x-ms-summary": "Order",
          "description": "Sort order"
        }
      },
      "example": {
        "input": [
          "a",
          "d",
          "c",
          "b",
          "e"
        ],
        "order": "Ascending"
      }
    },
    "inputCollectionCount": {
      "type": "object",
      "required": [
        "input"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of items to count"
        }
      },
      "example": {
        "input": [
          "a",
          "d",
          "c",
          "b",
          "e"
        ]
      }
    },
    "inputCollectionSplit": {
      "type": "object",
      "required": [
        "input"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of items to split"
        },
        "match": {
          "type": "string",
          "x-ms-summary": "Match Value",
          "description": "String to match (explicit, case-insensitive, leave empty to use Index)"
        },
        "index": {
          "type": "string",
          "x-ms-summary": "Index",
          "description": "Index location to split (leave empty to use Match value)"
        }
      },
      "example": {
        "input": [
          "the cow",
          "jumped over",
          "the moon"
        ],
        "match": "jumped over",
        "index": ""
      }
    },
    "inputCollectionReplace": {
      "type": "object",
      "required": [
        "input",
        "match",
        "replacement",
        "ignoreCase"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of strings"
        },
        "match": {
          "type": "string",
          "x-ms-summary": "Match value",
          "description": "Match value"
        },
        "replacement": {
          "type": "string",
          "x-ms-summary": "Replacement value",
          "description": "Replacement value"
        },
        "ignoreCase": {
          "type": "string",
          "default": "True",
          "enum": [
            "True",
            "False"
          ],
          "x-ms-summary": "Ignore case",
          "description": "Ignore case"
        }
      },
      "example": {
        "input": [
          "the brown cow",
          "jumped over",
          "the brown dog"
        ],
        "match": "Brown",
        "replacement": "spotted",
        "ignoreCase": "True"
      }
    },
    "inputCollectionDeduplicate": {
      "type": "object",
      "required": [
        "input"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of items to de-duplicate"
        }
      },
      "example": {
        "input": [
          "a",
          "b",
          "b",
          "c",
          "d"
        ]
      }
    },
    "inputCalculateNumber": {
      "type": "object",
      "required": [
        "input",
        "decimals"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Value",
          "description": "Numeric value to calculate"
        },
        "decimals": {
          "type": "number",
          "x-ms-summary": "Decimal Places",
          "description": "Round to number of decimal places",
          "minimum": 0,
          "default": 0
        }
      },
      "example": {
        "input": 0.195928,
        "decimals": 2
      }
    },
    "inputCalculateNumbers": {
      "type": "object",
      "required": [
        "input",
        "value",
        "decimals"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Primary Value",
          "description": "Numeric value"
        },
        "value": {
          "type": "number",
          "x-ms-summary": "Secondary Value",
          "description": "Addend, subtrahend, factor, divisor or radicand"
        },
        "decimals": {
          "type": "number",
          "x-ms-summary": "Decimal Places",
          "description": "Round to number of decimal places",
          "minimum": 0,
          "default": 0
        }
      },
      "example": {
        "input": 4,
        "value": 2,
        "decimals": 2
      }
    },
    "inputCalculateSeries": {
      "type": "object",
      "required": [
        "input",
        "decimals"
      ],
      "properties": {
        "input": {
          "type": "array",
          "description": "Collection of values to calculate",
          "x-ms-summary": "Values",
          "items": {
            "type": "number"
          }
        },
        "decimals": {
          "type": "number",
          "description": "Round to number of decimal places",
          "x-ms-summary": "Decimal Places",
          "minimum": 0,
          "default": 0
        }
      },
      "example": {
        "input": [
          1,
          2,
          3,
          4,
          5
        ],
        "decimals": 2
      }
    },
    "inputCalculatePower": {
      "type": "object",
      "required": [
        "input",
        "power",
        "decimals"
      ],
      "properties": {
        "input": {
          "type": "number",
          "description": "Number to raise",
          "x-ms-summary": "Number"
        },
        "power": {
          "type": "number",
          "description": "Power",
          "x-ms-summary": "Power"
        },
        "decimals": {
          "type": "number",
          "description": "Round to number of decimal places",
          "x-ms-summary": "Decimal Places",
          "minimum": 0,
          "default": 0
        }
      },
      "example": {
        "input": 5.53,
        "power": 4,
        "decimals": 2
      }
    },
    "inputCalculateMinMax": {
      "type": "object",
      "required": [
        "input",
        "type"
      ],
      "properties": {
        "input": {
          "type": "array",
          "description": "Collection of values to calculate",
          "x-ms-summary": "Values",
          "items": {
            "type": "number"
          }
        },
        "type": {
          "type": "string",
          "description": "Minimum or Maximum",
          "x-ms-summary": "Min or Max",
          "enum": [
            "Minimum",
            "Maximum"
          ],
          "default": "Minimum"
        }
      },
      "example": {
        "input": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "Minimum"
      }
    },
    "inputCaseConversion": {
      "type": "object",
      "required": [
        "input",
        "alphacase"
      ],
      "properties": {
        "input": {
          "type": "string",
          "description": "String containing the text to convert",
          "x-ms-summary": "Value"
        },
        "alphacase": {
          "type": "string",
          "enum": [
            "Upper",
            "Lower",
            "Title"
          ],
          "description": "Case of conversion result",
          "x-ms-summary": "Case"
        }
      },
      "example": {
        "input": "the brown cow",
        "alphacase": "Upper"
      }
    },
    "inputConvertAngle": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "Arcminute",
            "Arcsecond",
            "Centiradian",
            "Deciradian",
            "Degree",
            "Gradian",
            "Microdegree",
            "Microradian",
            "Millidegree",
            "Milliradian",
            "Nanodegree",
            "Nanoradian",
            "Radian",
            "Revolution"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "Arcminute",
            "Arcsecond",
            "Centiradian",
            "Deciradian",
            "Degree",
            "Gradian",
            "Microdegree",
            "Microradian",
            "Millidegree",
            "Milliradian",
            "Nanodegree",
            "Nanoradian",
            "Radian",
            "Revolution"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 16.036844,
        "source": "Arcminute",
        "target": "Arcsecond"
      }
    },
    "inputConvertDuration": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "Day",
            "Hour",
            "Microsecond",
            "Millisecond",
            "Minute",
            "Month",
            "Nanosecond",
            "Second",
            "Week",
            "Year"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "Day",
            "Hour",
            "Microsecond",
            "Millisecond",
            "Minute",
            "Month",
            "Nanosecond",
            "Second",
            "Week",
            "Year"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 0.66375,
        "source": "Day",
        "target": "Hour"
      }
    },
    "inputConvertDistance": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "Centimeter",
            "Decimeter",
            "Fathom",
            "Foot",
            "Hectometer",
            "Inch",
            "Kilometer",
            "LightYear",
            "Meter",
            "Micrometer",
            "Mile",
            "Millimeter",
            "Nanometer",
            "NauticalMile",
            "Yard"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "Centimeter",
            "Decimeter",
            "Fathom",
            "Foot",
            "Hectometer",
            "Inch",
            "Kilometer",
            "LightYear",
            "Meter",
            "Micrometer",
            "Mile",
            "Millimeter",
            "Nanometer",
            "NauticalMile",
            "Yard"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 0.525505,
        "source": "Meter",
        "target": "Foot"
      }
    },
    "inputConvertArea": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "Acre",
            "Hectare",
            "SquareCentimeter",
            "SquareDecimeter",
            "SquareFoot",
            "SquareInch",
            "SquareKilometer",
            "SquareMeter",
            "SquareMicrometer",
            "SquareMile",
            "SquareMillimeter",
            "SquareYard"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "Acre",
            "Hectare",
            "SquareCentimeter",
            "SquareDecimeter",
            "SquareFoot",
            "SquareInch",
            "SquareKilometer",
            "SquareMeter",
            "SquareMicrometer",
            "SquareMile",
            "SquareMillimeter",
            "SquareYard"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 0.416714,
        "source": "Acre",
        "target": "SquareFoot"
      }
    },
    "inputConvertEnergy": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "BritishThermalUnit",
            "Calorie",
            "ElectronVolt",
            "FootPound",
            "GigawattHour",
            "Joule",
            "Kilocalorie",
            "Kilojoule",
            "KilowattHour",
            "Megajoule",
            "MegawattHour",
            "TerawattHour",
            "Therm (EU)",
            "Therm (UK)",
            "Therm (US)",
            "WattHour"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "BritishThermalUnit",
            "Calorie",
            "ElectronVolt",
            "FootPound",
            "GigawattHour",
            "Joule",
            "Kilocalorie",
            "Kilojoule",
            "KilowattHour",
            "Megajoule",
            "MegawattHour",
            "TerawattHour",
            "Therm (EU)",
            "Therm (UK)",
            "Therm (US)",
            "WattHour"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 0.397155,
        "source": "Calorie",
        "target": "Joule"
      }
    },
    "inputConvertPower": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "BritishThermalUnitPerHour",
            "Decawatt",
            "Deciwatt",
            "ElectricalHorsepower",
            "Femtowatt",
            "Gigawatt",
            "HydraulicHorsepower",
            "Kilowatt",
            "MechanicalHorsepower",
            "Megawatt",
            "Microwatt",
            "Milliwatt",
            "Nanowatt",
            "Petawatt",
            "Picowatt",
            "Terawatt",
            "Watt"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "BritishThermalUnitPerHour",
            "Decawatt",
            "Deciwatt",
            "ElectricalHorsepower",
            "Femtowatt",
            "Gigawatt",
            "HydraulicHorsepower",
            "Kilowatt",
            "MechanicalHorsepower",
            "Megawatt",
            "Microwatt",
            "Milliwatt",
            "Nanowatt",
            "Petawatt",
            "Picowatt",
            "Terawatt",
            "Watt"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 0.866107,
        "source": "Gigawatt",
        "target": "Kilowatt"
      }
    },
    "inputConvertSpeed": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "CentimeterPerHour",
            "CentimeterPerMinute",
            "CentimeterPerSecond",
            "DecimeterPerMinute",
            "DecimeterPerSecond",
            "FootPerHour",
            "FootPerMinute",
            "FootPerSecond",
            "InchPerHour",
            "InchPerMinute",
            "InchPerSecond",
            "KilometerPerHour",
            "KilometerPerMinute",
            "KilometerPerSecond",
            "Knot",
            "MeterPerHour",
            "MeterPerMinute",
            "MeterPerSecond",
            "MicrometerPerMinute",
            "MicrometerPerSecond",
            "MilePerHour",
            "MillimeterPerHour",
            "MillimeterPerMinute",
            "MillimeterPerSecond",
            "NanometerPerMinute",
            "NanometerPerSecond",
            "YardPerHour",
            "YardPerMinute",
            "YardPerSecond"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "CentimeterPerHour",
            "CentimeterPerMinute",
            "CentimeterPerSecond",
            "DecimeterPerMinute",
            "DecimeterPerSecond",
            "FootPerHour",
            "FootPerMinute",
            "FootPerSecond",
            "InchPerHour",
            "InchPerMinute",
            "InchPerSecond",
            "KilometerPerHour",
            "KilometerPerMinute",
            "KilometerPerSecond",
            "Knot",
            "MeterPerHour",
            "MeterPerMinute",
            "MeterPerSecond",
            "MicrometerPerMinute",
            "MicrometerPerSecond",
            "MilePerHour",
            "MillimeterPerHour",
            "MillimeterPerMinute",
            "MillimeterPerSecond",
            "NanometerPerMinute",
            "NanometerPerSecond",
            "YardPerHour",
            "YardPerMinute",
            "YardPerSecond"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 0.278054,
        "source": "Knot",
        "target": "MilePerHour"
      }
    },
    "inputConvertTemperature": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "Celsius",
            "Fahrenheit",
            "Newton",
            "Kelvin"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "Celsius",
            "Fahrenheit",
            "Newton",
            "Kelvin"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 10,
        "source": "Celsius",
        "target": "Fahrenheit"
      }
    },
    "inputConvertVolume": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "Centiliter",
            "CubicCentimeter",
            "CubicDecimeter",
            "CubicFoot",
            "CubicHectometer",
            "CubicInch",
            "CubicKilometer",
            "CubicMeter",
            "CubicMillimeter",
            "CubicYard",
            "Deciliter",
            "ImperialBeerBarrel",
            "ImperialGallon",
            "ImperialOunce",
            "ImperialPint",
            "Kiloliter",
            "Liter",
            "Microliter",
            "Milliliter",
            "Gallon",
            "Cup",
            "Ounce",
            "Pint",
            "Quart",
            "Tablespoon",
            "Teaspoon"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "Centiliter",
            "CubicCentimeter",
            "CubicDecimeter",
            "CubicFoot",
            "CubicHectometer",
            "CubicInch",
            "CubicKilometer",
            "CubicMeter",
            "CubicMillimeter",
            "CubicYard",
            "Deciliter",
            "ImperialBeerBarrel",
            "ImperialGallon",
            "ImperialOunce",
            "ImperialPint",
            "Kiloliter",
            "Liter",
            "Microliter",
            "Milliliter",
            "Gallon",
            "Cup",
            "Ounce",
            "Pint",
            "Quart",
            "Tablespoon",
            "Teaspoon"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 1.5,
        "source": "CubicFoot",
        "target": "CubicMeter"
      }
    },
    "inputConvertWeight": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "Centigram",
            "Decagram",
            "Decigram",
            "Grain",
            "Gram",
            "Hectogram",
            "Kilogram",
            "Microgram",
            "Milligram",
            "Nanogram",
            "Ounce",
            "Pound",
            "Stone",
            "Solar Mass",
            "Earth Mass",
            "Slug",
            "Short Ton",
            "Long Ton",
            "Ton",
            "Megaton",
            "Short Hundredweight",
            "Long Hundredweight"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "Centigram",
            "Decagram",
            "Decigram",
            "Grain",
            "Gram",
            "Hectogram",
            "Kilogram",
            "Microgram",
            "Milligram",
            "Nanogram",
            "Ounce",
            "Pound",
            "Stone",
            "Ton"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 5.7,
        "source": "Gram",
        "target": "Ounce"
      }
    },
    "inputDateTimeConversion": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Source date and time"
        },
        "source": {
          "type": "string",
          "default": "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
          "enum": [
            "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
            "Greenwich Standard Time - (GMT) Monrovia, Reykjavik",
            "W. Europe Standard Time - (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
            "Central Europe Standard Time - (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
            "Central European Standard Time - (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
            "W. Central Africa Standard Time - (GMT+01:00) West Central Africa",
            "GTB Standard Time - (GMT+02:00) Athens, Bucharest, Istanbul",
            "Middle East Standard Time - (GMT+02:00) Beirut",
            "Egypt Standard Time - (GMT+02:00) Cairo",
            "South Africa Standard Time - (GMT+02:00) Harare, Pretoria",
            "FLE Standard Time - (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",
            "Israel Standard Time - (GMT+02:00) Jerusalem",
            "E. Europe Standard Time - (GMT+02:00) Minsk",
            "Namibia Standard Time - (GMT+02:00) Windhoek",
            "Arabic Standard Time - (GMT+03:00) Baghdad",
            "Arab Standard Time - (GMT+03:00) Kuwait, Riyadh",
            "Russian Standard Time - (GMT+03:00) Moscow, St. Petersburg, Volgograd",
            "E. Africa Standard Time - (GMT+03:00) Nairobi",
            "Georgian Standard Time - (GMT+03:00) Tbilisi",
            "Iran Standard Time - (GMT+03:30) Tehran",
            "Arabian Standard Time - (GMT+04:00) Abu Dhabi, Muscat",
            "Azerbaijan Standard Time - (GMT+04:00) Baku",
            "Mauritius Standard Time - (GMT+04:00) Port Louis",
            "Caucasus Standard Time - (GMT+04:00) Yerevan",
            "Afghanistan Standard Time - (GMT+04:30) Kabul",
            "Ekaterinburg Standard Time - (GMT+05:00) Ekaterinburg",
            "Pakistan Standard Time - (GMT+05:00) Islamabad, Karachi",
            "West Asia Standard Time - (GMT+05:00) Tashkent",
            "India Standard Time - (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi",
            "Sri Lanka Standard Time - (GMT+05:30) Sri Jayawardenepura",
            "Nepal Standard Time - (GMT+05:45) Kathmandu",
            "N. Central Asia Standard Time - (GMT+06:00) Almaty, Novosibirsk",
            "Central Asia Standard Time - (GMT+06:00) Astana, Dhaka",
            "Myanmar Standard Time - (GMT+06:30) Yangon (Rangoon)",
            "SE Asia Standard Time - (GMT+07:00) Bangkok, Hanoi, Jakarta",
            "North Asia Standard Time - (GMT+07:00) Krasnoyarsk",
            "China Standard Time - (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
            "North Asia East Standard Time - (GMT+08:00) Irkutsk, Ulaan Bataar",
            "Singapore Standard Time - (GMT+08:00) Kuala Lumpur, Singapore",
            "W. Australia Standard Time - (GMT+08:00) Perth",
            "Taipei Standard Time - (GMT+08:00) Taipei",
            "Tokyo Standard Time - (GMT+09:00) Osaka, Sapporo, Tokyo",
            "Korea Standard Time - (GMT+09:00) Seoul",
            "Yakutsk Standard Time - (GMT+09:00) Yakutsk",
            "Cen. Australia Standard Time - (GMT+09:30) Adelaide",
            "AUS Central Standard Time - (GMT+09:30) Darwin",
            "E. Australia Standard Time - (GMT+10:00) Brisbane",
            "AUS Eastern Standard Time - (GMT+10:00) Canberra, Melbourne, Sydney",
            "West Pacific Standard Time - (GMT+10:00) Guam, Port Moresby",
            "Tasmania Standard Time - (GMT+10:00) Hobart",
            "Vladivostok Standard Time - (GMT+10:00) Vladivostok",
            "Central Pacific Standard Time - (GMT+11:00) Magadan, Solomon Is., New Caledonia",
            "New Zealand Standard Time - (GMT+12:00) Auckland, Wellington",
            "Fiji Standard Time - (GMT+12:00) Fiji, Kamchatka, Marshall Is.",
            "Tonga Standard Time - (GMT+13:00) Nuku'alofa",
            "Azores Standard Time - (GMT-01:00) Azores",
            "Cape Verde Standard Time - (GMT-01:00) Cape Verde Is.",
            "Mid-Atlantic Standard Time - (GMT-02:00) Mid-Atlantic",
            "E. South America Standard Time - (GMT-03:00) Brasilia",
            "Argentina Standard Time - (GMT-03:00) Buenos Aires",
            "SA Eastern Standard Time - (GMT-03:00) Georgetown",
            "Greenland Standard Time - (GMT-03:00) Greenland",
            "Montevideo Standard Time - (GMT-03:00) Montevideo",
            "Newfoundland Standard Time - (GMT-03:30) Newfoundland",
            "Atlantic Standard Time - (GMT-04:00) Atlantic Time (Canada)",
            "SA Western Standard Time - (GMT-04:00) La Paz",
            "Central Brazilian Standard Time - (GMT-04:00) Manaus",
            "Pacific SA Standard Time - (GMT-04:00) Santiago",
            "Venezuela Standard Time - (GMT-04:30) Caracas",
            "SA Pacific Standard Time - (GMT-05:00) Bogota, Lima, Quito, Rio Branco",
            "Eastern Standard Time - (GMT-05:00) Eastern Time (US & Canada)",
            "US Eastern Standard Time - (GMT-05:00) Indiana (East)",
            "Central America Standard Time - (GMT-06:00) Central America",
            "Central Standard Time - (GMT-06:00) Central Time (US & Canada)",
            "Central Standard Time (Mexico) - (GMT-06:00) Guadalajara, Mexico City, Monterrey",
            "Canada Central Standard Time - (GMT-06:00) Saskatchewan",
            "US Mountain Standard Time - (GMT-07:00) Arizona",
            "Mountain Standard Time (Mexico) - (GMT-07:00) Chihuahua, La Paz, Mazatlan",
            "Mountain Standard Time - (GMT-07:00) Mountain Time (US & Canada)",
            "Pacific Standard Time - (GMT-08:00) Pacific Time (US & Canada)",
            "Pacific Standard Time (Mexico) - (GMT-08:00) Tijuana, Baja California",
            "Alaskan Standard Time - (GMT-09:00) Alaska",
            "Hawaiian Standard Time - (GMT-10:00) Hawaii",
            "Samoa Standard Time - (GMT-11:00) Midway Island, Samoa",
            "Dateline Standard Time - (GMT-12:00) International Date Line West"
          ],
          "x-ms-summary": "Source Time Zone"
        },
        "target": {
          "type": "string",
          "default": "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
          "enum": [
            "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
            "Greenwich Standard Time - (GMT) Monrovia, Reykjavik",
            "W. Europe Standard Time - (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
            "Central Europe Standard Time - (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
            "Central European Standard Time - (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
            "W. Central Africa Standard Time - (GMT+01:00) West Central Africa",
            "GTB Standard Time - (GMT+02:00) Athens, Bucharest, Istanbul",
            "Middle East Standard Time - (GMT+02:00) Beirut",
            "Egypt Standard Time - (GMT+02:00) Cairo",
            "South Africa Standard Time - (GMT+02:00) Harare, Pretoria",
            "FLE Standard Time - (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",
            "Israel Standard Time - (GMT+02:00) Jerusalem",
            "E. Europe Standard Time - (GMT+02:00) Minsk",
            "Namibia Standard Time - (GMT+02:00) Windhoek",
            "Arabic Standard Time - (GMT+03:00) Baghdad",
            "Arab Standard Time - (GMT+03:00) Kuwait, Riyadh",
            "Russian Standard Time - (GMT+03:00) Moscow, St. Petersburg, Volgograd",
            "E. Africa Standard Time - (GMT+03:00) Nairobi",
            "Georgian Standard Time - (GMT+03:00) Tbilisi",
            "Iran Standard Time - (GMT+03:30) Tehran",
            "Arabian Standard Time - (GMT+04:00) Abu Dhabi, Muscat",
            "Azerbaijan Standard Time - (GMT+04:00) Baku",
            "Mauritius Standard Time - (GMT+04:00) Port Louis",
            "Caucasus Standard Time - (GMT+04:00) Yerevan",
            "Afghanistan Standard Time - (GMT+04:30) Kabul",
            "Ekaterinburg Standard Time - (GMT+05:00) Ekaterinburg",
            "Pakistan Standard Time - (GMT+05:00) Islamabad, Karachi",
            "West Asia Standard Time - (GMT+05:00) Tashkent",
            "India Standard Time - (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi",
            "Sri Lanka Standard Time - (GMT+05:30) Sri Jayawardenepura",
            "Nepal Standard Time - (GMT+05:45) Kathmandu",
            "N. Central Asia Standard Time - (GMT+06:00) Almaty, Novosibirsk",
            "Central Asia Standard Time - (GMT+06:00) Astana, Dhaka",
            "Myanmar Standard Time - (GMT+06:30) Yangon (Rangoon)",
            "SE Asia Standard Time - (GMT+07:00) Bangkok, Hanoi, Jakarta",
            "North Asia Standard Time - (GMT+07:00) Krasnoyarsk",
            "China Standard Time - (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
            "North Asia East Standard Time - (GMT+08:00) Irkutsk, Ulaan Bataar",
            "Singapore Standard Time - (GMT+08:00) Kuala Lumpur, Singapore",
            "W. Australia Standard Time - (GMT+08:00) Perth",
            "Taipei Standard Time - (GMT+08:00) Taipei",
            "Tokyo Standard Time - (GMT+09:00) Osaka, Sapporo, Tokyo",
            "Korea Standard Time - (GMT+09:00) Seoul",
            "Yakutsk Standard Time - (GMT+09:00) Yakutsk",
            "Cen. Australia Standard Time - (GMT+09:30) Adelaide",
            "AUS Central Standard Time - (GMT+09:30) Darwin",
            "E. Australia Standard Time - (GMT+10:00) Brisbane",
            "AUS Eastern Standard Time - (GMT+10:00) Canberra, Melbourne, Sydney",
            "West Pacific Standard Time - (GMT+10:00) Guam, Port Moresby",
            "Tasmania Standard Time - (GMT+10:00) Hobart",
            "Vladivostok Standard Time - (GMT+10:00) Vladivostok",
            "Central Pacific Standard Time - (GMT+11:00) Magadan, Solomon Is., New Caledonia",
            "New Zealand Standard Time - (GMT+12:00) Auckland, Wellington",
            "Fiji Standard Time - (GMT+12:00) Fiji, Kamchatka, Marshall Is.",
            "Tonga Standard Time - (GMT+13:00) Nuku'alofa",
            "Azores Standard Time - (GMT-01:00) Azores",
            "Cape Verde Standard Time - (GMT-01:00) Cape Verde Is.",
            "Mid-Atlantic Standard Time - (GMT-02:00) Mid-Atlantic",
            "E. South America Standard Time - (GMT-03:00) Brasilia",
            "Argentina Standard Time - (GMT-03:00) Buenos Aires",
            "SA Eastern Standard Time - (GMT-03:00) Georgetown",
            "Greenland Standard Time - (GMT-03:00) Greenland",
            "Montevideo Standard Time - (GMT-03:00) Montevideo",
            "Newfoundland Standard Time - (GMT-03:30) Newfoundland",
            "Atlantic Standard Time - (GMT-04:00) Atlantic Time (Canada)",
            "SA Western Standard Time - (GMT-04:00) La Paz",
            "Central Brazilian Standard Time - (GMT-04:00) Manaus",
            "Pacific SA Standard Time - (GMT-04:00) Santiago",
            "Venezuela Standard Time - (GMT-04:30) Caracas",
            "SA Pacific Standard Time - (GMT-05:00) Bogota, Lima, Quito, Rio Branco",
            "Eastern Standard Time - (GMT-05:00) Eastern Time (US & Canada)",
            "US Eastern Standard Time - (GMT-05:00) Indiana (East)",
            "Central America Standard Time - (GMT-06:00) Central America",
            "Central Standard Time - (GMT-06:00) Central Time (US & Canada)",
            "Central Standard Time (Mexico) - (GMT-06:00) Guadalajara, Mexico City, Monterrey",
            "Canada Central Standard Time - (GMT-06:00) Saskatchewan",
            "US Mountain Standard Time - (GMT-07:00) Arizona",
            "Mountain Standard Time (Mexico) - (GMT-07:00) Chihuahua, La Paz, Mazatlan",
            "Mountain Standard Time - (GMT-07:00) Mountain Time (US & Canada)",
            "Pacific Standard Time - (GMT-08:00) Pacific Time (US & Canada)",
            "Pacific Standard Time (Mexico) - (GMT-08:00) Tijuana, Baja California",
            "Alaskan Standard Time - (GMT-09:00) Alaska",
            "Hawaiian Standard Time - (GMT-10:00) Hawaii",
            "Samoa Standard Time - (GMT-11:00) Midway Island, Samoa",
            "Dateline Standard Time - (GMT-12:00) International Date Line West"
          ],
          "x-ms-summary": "Target Time Zone"
        },
        "format": {
          "type": "string",
          "x-ms-summary": "Format",
          "description": "Display format (defaults to 'yyyy-MM-dd HH:mm:ss')"
        }
      },
      "example": {
        "input": "03/10/2010 09:00:00",
        "source": "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
        "target": "Central Standard Time - (GMT-06:00) Central Time (US & Canada)",
        "format": "yyyy-MM-dd HH:mm:ss"
      }
    },
    "inputDateTimeFormat": {
      "type": "object",
      "required": [
        "input",
        "culture",
        "format"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Source date and time"
        },
        "culture": {
          "type": "string",
          "default": "en-US",
          "enum": [
            "en-US",
            "af-ZA",
            "ar-AE",
            "ar-BH",
            "ar-DZ",
            "ar-EG",
            "ar-IQ",
            "ar-JO",
            "ar-KW",
            "ar-LB",
            "ar-LY",
            "ar-MA",
            "ar-OM",
            "ar-QA",
            "ar-SA",
            "ar-SY",
            "ar-TN",
            "ar-YE",
            "az-AZ",
            "be-BY",
            "bg-BG",
            "bs-BA",
            "ca-ES",
            "cs-CZ",
            "cy-GB",
            "da-DK",
            "de-AT",
            "de-CH",
            "de-DE",
            "de-LI",
            "de-LU",
            "el-GR",
            "en-AU",
            "en-BZ",
            "en-CA",
            "en-CB",
            "en-GB",
            "en-IE",
            "en-JM",
            "en-NZ",
            "en-PH",
            "en-TT",
            "en-ZA",
            "en-ZW",
            "es-AR",
            "es-BO",
            "es-CL",
            "es-CO",
            "es-CR",
            "es-DO",
            "es-EC",
            "es-ES",
            "es-GT",
            "es-HN",
            "es-MX",
            "es-NI",
            "es-PA",
            "es-PE",
            "es-PR",
            "es-PY",
            "es-SV",
            "es-UY",
            "es-VE",
            "et-EE",
            "eu-ES",
            "fa-IR",
            "fi-FI",
            "fo-FO",
            "fr-BE",
            "fr-CA",
            "fr-CH",
            "fr-FR",
            "fr-LU",
            "fr-MC",
            "gl-ES",
            "gu-IN",
            "he-IL",
            "hi-IN",
            "hr-BA",
            "hr-HR",
            "hu-HU",
            "hy-AM",
            "id-ID",
            "is-IS",
            "it-CH",
            "it-IT",
            "ja-JP",
            "ka-GE",
            "kk-KZ",
            "kn-IN",
            "ko-KR",
            "ky-KG",
            "lt-LT",
            "lv-LV",
            "mi-NZ",
            "mn-MN",
            "mr-IN",
            "ms-BN",
            "ms-MY",
            "mt-MT",
            "nl-BE",
            "nl-NL",
            "nn-NO",
            "ns-ZA",
            "pa-IN",
            "pl-PL",
            "ps-AR",
            "pt-BR",
            "pt-PT",
            "ro-RO",
            "ru-RU",
            "sa-IN",
            "sk-SK",
            "sl-SI",
            "sq-AL",
            "sr-BA",
            "sr-SP",
            "sv-FI",
            "sv-SE",
            "sw-KE",
            "ta-IN",
            "te-IN",
            "th-TH",
            "tl-PH",
            "tn-ZA",
            "tr-TR",
            "uk-UA",
            "ur-PK",
            "uz-UZ",
            "vi-VN",
            "zh-CN",
            "zh-HK",
            "zh-MO",
            "zh-SG",
            "zh-TW",
            "zu-ZA"
          ],
          "x-ms-summary": "Culture",
          "description": "Language culture"
        },
        "format": {
          "type": "string",
          "x-ms-summary": "Format",
          "description": "Output format"
        }
      },
      "example": {
        "input": "03/10/2010 00:00:00",
        "culture": "en-GB",
        "format": "ddd"
      }
    },
    "inputDateTimeDifference": {
      "type": "object",
      "required": [
        "dateTime1",
        "dateTime2"
      ],
      "properties": {
        "dateTime1": {
          "type": "string",
          "x-ms-summary": "First date/time value",
          "description": "First date/time value"
        },
        "dateTime2": {
          "type": "string",
          "x-ms-summary": "Second date/time value",
          "description": "Second date/time value"
        }
      },
      "example": {
        "dateTime1": "1/1/2010 12:37:19",
        "dateTime2": "3/15/2011 14:27:49"
      }
    },
    "inputGenerateUniqueID": {
      "type": "object",
      "required": [
        "uppercase"
      ],
      "properties": {
        "uppercase": {
          "type": "string",
          "x-ms-summary": "Uppercase",
          "description": "All uppercase alpha characters",
          "enum": [
            "True",
            "False"
          ]
        }
      },
      "example": {
        "uppercase": "True"
      }
    },
    "inputJoinStrings": {
      "type": "object",
      "required": [
        "input",
        "separator",
        "lower",
        "trim"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Values",
          "description": "Collection of strings to be joined"
        },
        "separator": {
          "type": "string",
          "x-ms-summary": "Separator",
          "description": "Separator character"
        },
        "lower": {
          "type": "string",
          "x-ms-summary": "Lowercase",
          "description": "Convert strings in collection to lowercase",
          "enum": [
            "True",
            "False"
          ]
        },
        "trim": {
          "type": "string",
          "x-ms-summary": "Trim",
          "description": "Trim strings in collection",
          "enum": [
            "True",
            "False"
          ]
        }
      },
      "example": {
        "input": [
          "The",
          "brown",
          "cow"
        ],
        "separator": ";",
        "lower": "True",
        "trim": "True"
      }
    },
    "inputNumberRange": {
      "type": "object",
      "required": [
        "start",
        "end"
      ],
      "properties": {
        "start": {
          "type": "number",
          "x-ms-summary": "Start",
          "description": "Start of range",
          "minimum": 0,
          "default": 0
        },
        "end": {
          "type": "number",
          "x-ms-summary": "End",
          "description": "End of range",
          "minimum": 0,
          "default": 0
        }
      },
      "example": {
        "start": 1,
        "end": 1000000
      }
    },
    "inputRedactString": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "x-ms-summary": "Source String",
          "description": "String containing the complete text"
        },
        "value": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Individual string to redact"
        },
        "values": {
          "type": "array",
          "x-ms-summary": "-OR- Values Collection",
          "description": "Collection of strings to redact",
          "items": {
            "type": "string"
          }
        },
        "regex": {
          "type": "string",
          "x-ms-summary": "-OR- Regular Expression",
          "description": "Regular expression pattern for matching strings"
        }
      },
      "example": {
        "value": "brown",
        "source": "The brown cow",
        "values": [
          "The",
          "brown",
          "cow"
        ],
        "regex": "[A-Za-z]{5}"
      }
    },
    "inputReplaceString": {
      "type": "object",
      "required": [
        "source",
        "value",
        "replacement"
      ],
      "properties": {
        "source": {
          "type": "string",
          "x-ms-summary": "Source",
          "description": "String containing the text to be replaced"
        },
        "value": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Text to replace"
        },
        "replacement": {
          "type": "string",
          "x-ms-summary": "Replacement",
          "description": "Replacement text"
        }
      },
      "example": {
        "source": "The brown cow",
        "value": "cow",
        "replacement": "dog"
      }
    },
    "inputSplitString": {
      "type": "object",
      "required": [
        "input",
        "characters"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Text to split"
        },
        "characters": {
          "type": "string",
          "x-ms-summary": "Character(s)",
          "description": "One or more characters that will be used to split the text"
        }
      },
      "example": {
        "input": "The,brown,cow",
        "characters": ","
      }
    },
    "inputStringComparison": {
      "type": "object",
      "required": [
        "input",
        "compare",
        "lower",
        "trim"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Source",
          "description": "Original string"
        },
        "compare": {
          "type": "string",
          "x-ms-summary": "Target",
          "description": "Comparison string"
        },
        "lower": {
          "type": "string",
          "enum": [
            "True",
            "False"
          ],
          "x-ms-summary": "Lowercase",
          "description": "Convert strings to lowercase before comparison"
        },
        "trim": {
          "type": "string",
          "enum": [
            "True",
            "False"
          ],
          "x-ms-summary": "Trim",
          "description": "Trim strings before comparison"
        }
      },
      "example": {
        "input": "Cow",
        "compare": "dog",
        "lower": "True",
        "trim": "True"
      }
    },
    "inputStringContains": {
      "type": "object",
      "required": [
        "input",
        "find",
        "lower"
      ],
      "properties": {
        "find": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Text to match"
        },
        "input": {
          "type": "string",
          "x-ms-summary": "Target",
          "description": "Text to search"
        },
        "lower": {
          "type": "string",
          "enum": [
            "True",
            "False"
          ],
          "x-ms-summary": "Lowercase",
          "description": "Convert strings to lowercase"
        }
      },
      "example": {
        "find": "cow",
        "input": "The brown cow",
        "lower": "True"
      }
    },
    "inputString": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "x-ms-summary": "Source",
          "description": "String variable or text value"
        }
      },
      "example": {
        "source": "The brown cow"
      }
    },
    "inputTrimString": {
      "type": "object",
      "required": [
        "source",
        "type"
      ],
      "properties": {
        "source": {
          "type": "string",
          "x-ms-summary": "Source",
          "description": "String containing the text to be trimmed"
        },
        "type": {
          "type": "string",
          "x-ms-summary": "Type",
          "description": "Type of white space to remove",
          "enum": [
            "Start",
            "End",
            "Both"
          ]
        }
      },
      "example": {
        "source": "  The brown cow  ",
        "type": "Both"
      }
    },
    "inputUrlDecode": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "x-ms-summary": "Source",
          "description": "String variable or text value"
        }
      },
      "example": {
        "source": "The%20brown%20cow"
      }
    },
    "outputStringArray": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "data",
          "x-ms-summary": "data"
        }
      },
      "example": {
        "data": [
          "string"
        ]
      }
    },
    "outputDateInfo": {
      "type": "object",
      "properties": {
        "DayOfYear": {
          "type": "number",
          "description": "Day of the year",
          "x-ms-summary": "DayOfYear"
        },
        "DayOfWeek": {
          "type": "number",
          "description": "Day of the week",
          "x-ms-summary": "DayOfWeek"
        },
        "WeekOfYear": {
          "type": "number",
          "description": "Week of the year",
          "x-ms-summary": "WeekOfYear"
        },
        "SecondsInDay": {
          "type": "number",
          "description": "Seconds in the day",
          "x-ms-summary": "SecondsInDay"
        },
        "MinutesInDay": {
          "type": "number",
          "description": "Minutes in the day",
          "x-ms-summary": "MinutesInDay"
        },
        "Ticks": {
          "type": "number",
          "description": "Tick count",
          "x-ms-summary": "Ticks"
        }
      },
      "example": {
        "DayOfYear": 25,
        "DayOfWeek": 2,
        "WeekOfYear": 10,
        "SecondsInDay": 1234,
        "MinutesInDay": 359,
        "Ticks": 1234567890
      }
    },
    "outputDateDifference": {
      "type": "object",
      "properties": {
        "years": {
          "type": "number",
          "description": "Years",
          "x-ms-summary": "Years"
        },
        "months": {
          "type": "number",
          "description": "Months",
          "x-ms-summary": "Months"
        },
        "days": {
          "type": "number",
          "description": "Days",
          "x-ms-summary": "Days"
        },
        "hours": {
          "type": "number",
          "description": "Hours",
          "x-ms-summary": "Hours"
        },
        "minutes": {
          "type": "number",
          "description": "Minutes",
          "x-ms-summary": "Minutes"
        },
        "milliseconds": {
          "type": "number",
          "description": "Milliseconds",
          "x-ms-summary": "Milliseconds"
        },
        "totalYears": {
          "type": "number",
          "format": "double",
          "description": "Total Years",
          "x-ms-summary": "Total Years"
        },
        "totalMonths": {
          "type": "number",
          "format": "double",
          "description": "Total Months",
          "x-ms-summary": "Total Months"
        },
        "totalDays": {
          "type": "number",
          "format": "double",
          "description": "Total Days",
          "x-ms-summary": "Total Days"
        },
        "totalHours": {
          "type": "number",
          "format": "double",
          "description": "Total Hours",
          "x-ms-summary": "Total Hours"
        },
        "totalMinutes": {
          "type": "number",
          "format": "double",
          "description": "Total Minutes",
          "x-ms-summary": "Total Minutes"
        },
        "totalSeconds": {
          "type": "number",
          "format": "double",
          "description": "Total Seconds",
          "x-ms-summary": "Total Seconds"
        },
        "totalMilliseconds": {
          "type": "number",
          "format": "double",
          "description": "Total Milliseconds",
          "x-ms-summary": "Total Milliseconds"
        },
        "ticks": {
          "type": "number",
          "description": "Ticks",
          "x-ms-summary": "Ticks"
        }
      },
      "example": {
        "years": 1,
        "months": 2,
        "days": 14,
        "hours": 1,
        "minutes": 50,
        "seconds": 30,
        "milliseconds": 0,
        "totalYears": 1.2,
        "totalMonths": 14.39,
        "totalDays": 438.08,
        "totalHours": 10513.84,
        "totalMinutes": 630830.5,
        "totalSeconds": 37849830,
        "totalMilliseconds": 37849830000,
        "ticks": 378498300000000
      }
    },
    "outputCollectionNumber": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Success",
          "x-ms-summary": "Success"
        },
        "item": {
          "type": "number",
          "description": "First Value",
          "x-ms-summary": "First Value"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "description": "All Values",
          "x-ms-summary": "All Values"
        }
      },
      "example": {
        "status": false,
        "item": 1.25,
        "items": [
          1.25,
          2.5,
          3.75
        ]
      }
    },
    "outputCollectionResult": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Modified collection result",
          "x-ms-summary": "Modified collection result"
        }
      },
      "example": {
        "result": [
          "a",
          "b",
          "c"
        ]
      }
    },
    "outputCollectionString": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Success",
          "x-ms-summary": "Success"
        },
        "item": {
          "type": "string",
          "description": "First Value",
          "x-ms-summary": "First Value"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "All Values",
          "x-ms-summary": "All Values"
        }
      },
      "example": {
        "status": false,
        "item": "string",
        "items": [
          "string"
        ]
      }
    },
    "outputMultiCollection": {
      "type": "object",
      "properties": {
        "result1": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "First collection result",
          "x-ms-summary": "First collection result"
        },
        "result2": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Second collection result",
          "x-ms-summary": "Second collection result"
        }
      },
      "example": {
        "result1": [
          "a",
          "b",
          "c"
        ],
        "result2": [
          "d",
          "e",
          "f"
        ]
      }
    },
    "outputString": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "description": "Result",
          "x-ms-summary": "Result"
        }
      },
      "example": {
        "result": "string"
      }
    },
    "outputNumber": {
      "type": "object",
      "properties": {
        "result": {
          "type": "number",
          "description": "Result",
          "x-ms-summary": "Result"
        }
      },
      "example": {
        "result": 1
      }
    },
    "outputBoolean": {
      "type": "object",
      "properties": {
        "result": {
          "type": "boolean",
          "description": "Result",
          "x-ms-summary": "Result"
        }
      },
      "example": {
        "result": true
      }
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "X-Apptigent-Id",
      "in": "header"
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "name": "apptigent-id",
      "in": "query"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "tags": [
    {
      "name": "Collections",
      "description": "Arrays of base values (strings and numbers)."
    },
    {
      "name": "DateTime",
      "description": "Date and time operations."
    },
    {
      "name": "Math",
      "description": "Mathematical calculations and conversions."
    },
    {
      "name": "Text",
      "description": "String manipulation, parsing, conversion and related operations."
    }
  ],
  "x-ms-connector-metadata": [
      {
        "propertyName": "Website",
        "propertyValue": "https://www.apptigent.com"
      },
      {
        "propertyName": "Privacy policy",
        "propertyValue": "https://www.apptigent.com/help/privacy-policy/"
      },
      {
        "propertyName": "Categories",
        "propertyValue": "Productivity;Business Management"
      }
    ]
}