{
  "swagger": "2.0",
  "info": {
    "title": "Oodrive Sign",
    "description": "Connect and consume Oodrive sign's service through your workflows.",
    "version": "1.0",
    "contact": {
      "name": "Oodrive Sign",
      "url": "https://www.oodrive.com/products/oodrive-sign/",
      "email": "support-sign@oodrive.com"
    }
  },
  "host": "mpp.integration.oodrive-sign.com",
  "basePath": "/api/v4/",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "x-ms-connector-metadata":[
    {
      "propertyName": "Website",
      "propertyValue": "https://www.oodrive.com/products/oodrive-sign/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.oodrive.com/privacy-policy/"
    },
    {
      "propertyName": "Categories",
      "propertyValue" : "IT Operations;Productivity"
    }
  ],
  "paths": {
    "/contracts": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/ArrayOfContract"
            }
          }
        },
        "summary": "Get a list of all contracts",
        "description": "Retrieve all contracts from the associated license.",
        "operationId": "ListAllContracts",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Size of the returned array",
            "description": "The maximum size of the returned array of contract.",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Skip first n contracts",
            "description": "The sequence number of contract that will be skipped.",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "get_properties",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "Show contract properties",
            "description": "If true, contract properties will be listed in the response.",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "get_perimeters",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "Show contract perimeters",
            "description": "If true, contract perimeters will be listed in the response.",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Created before",
            "description": "Will list contract created before the given date.",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Will list contract created after the given date.",
            "x-ms-summary": "Created after",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "perimeter",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "Only with perimeter",
            "description": "List contracts only in a given perimeter.",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "status",
            "in": "query",
            "x-ms-summary": "Only with status",
            "type": "array",
            "collectionFormat": "csv",
            "description": "Retrieve contract only with specified status.",
            "x-ms-visibility": "advanced",
            "items": {
              "type": "string",
              "enum": [
                "OPEN",
                "CLOSED",
                "SIGNED",
                "PENDING",
                "ARCHIVED",
                "ABANDONED"
              ]
            }
          }
        ],
        "x-ms-visibility": "important"
      }
    },
    "/contracts/{id}/transaction/": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        },
        "summary": "Get a contract's status",
        "description": "Check a specific contract's status.",
        "operationId": "GetContractStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "x-ms-visibility": "important",
            "x-ms-url-encoding": "single",
            "x-ms-summary": "Contract ID",
            "description": "ID of the contract to retrieve status."
          }
        ]
      }
    },
    "/contracts/allinone": {
      "post": {
        "summary": "Create contract and send it for signature",
        "description": "All in one operation. Create contract, add recipients, documents, and send it for signature to recipients.",
        "operationId": "AllInOneCreateContract",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "type": "string",
            "required": true,
            "x-ms-visibility": "internal",
            "default": "multipart/form-data"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Metadata of the all in one contract.",
            "schema": {
              "type": "object",
              "properties": {
                "contract": {
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "properties": {
                    "contract_id": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The ID of the contract.",
                      "x-ms-summary": "Contract ID",
                      "x-ms-visibility": "advanced"
                    },
                    "date": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Date at which the contract has been created.",
                      "x-ms-summary": "Creation Date",
                      "x-ms-visibility": "advanced"
                    },
                    "vendor_email": {
                      "type": "string",
                      "description": "E-mail address of the Oodrive's license owner.",
                      "x-ms-summary": "Vendor E-mail Address",
                      "x-ms-visibility": "advanced"
                    },
                    "contract_definition_id": {
                      "type": "integer",
                      "format": "int32",
                      "description": "ID of the contract definition used for this contract.",
                      "x-ms-summary": "Contract Definition ID",
                      "x-ms-visibility": "advanced"
                    },
                    "message_title": {
                      "type": "string",
                      "description": "E-mail subject when sent for signature.",
                      "x-ms-summary": "Message Subject",
                      "x-ms-visibility": "advanced"
                    },
                    "message_body": {
                      "type": "string",
                      "description": "E-mail body when sent for signature.",
                      "x-ms-summary": "Message Body",
                      "x-ms-visibility": "advanced"
                    },
                    "name": {
                      "type": "string",
                      "description": "Contract's main document name.",
                      "x-ms-summary": "Contract Name",
                      "x-ms-visibility": "important"
                    },
                    "keep_on_move": {
                      "type": "boolean",
                      "description": "Determine if the offline signature on mobile device is activated.",
                      "x-ms-summary": "Offline Signature Activated",
                      "x-ms-visibility": "advanced"
                    },
                    "closed_date": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Date of closure of the contract, if there are any.",
                      "x-ms-summary": "Contract Closed Date",
                      "x-ms-visibility": "advanced"
                    },
                    "canceled_reason": {
                      "type": "string",
                      "description": "Reason of the cancel, if there are any.",
                      "x-ms-summary": "Contract Canceled Reason",
                      "x-ms-visibility": "advanced"
                    },
                    "auto_close": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Specify if the contract will be countersigned automatically or need a human intervention.",
                      "x-ms-summary": "Auto-close Enabled"
                    },
                    "deleted": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Specify if the contract has been deleted or not.",
                      "x-ms-summary": "Is Deleted"
                    },
                    "perimeters": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ContractPerimeterKey"
                      },
                      "description": "List of all perimeters of the contract (if queried).",
                      "x-ms-summary": "Perimeters"
                    },
                    "options": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ContractOption"
                      },
                      "description": "List of all specific options of the contract (if queried).",
                      "x-ms-summary": "Options"
                    },
                    "contract_properties": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ContractProperty"
                      },
                      "description": "List of all optional contract properties (if queried).",
                      "x-ms-summary": "Custom properties"
                    }
                  }
                },
                "recipients": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "signature_mode": {
                        "type": "integer",
                        "format": "int32",
                        "x-ms-summary": "Signature Mode"
                      },
                      "firstname": {
                        "type": "string"
                      },
                      "lastname": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "cell_phone": {
                        "type": "string"
                      }
                    }
                  }
                },
                "pdfparts": {
                  "type": "string"
                },
                "appendixparts": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contract, recipient for contract, document and attachments information.",
            "schema": {
              "type": "object",
              "properties": {
                "recipients": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Recipient"
                  }
                },
                "recipientForcontract": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ContractRecipient"
                  }
                },
                "contract": {
                  "$ref": "#/definitions/Contract"
                },
                "pdfparts": {
                  "type": "array",
                  "x-ms-summary": "PDF",
                  "description": "Array of PDF bound to the contract.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "description": "ID of the PDF.",
                        "x-ms-summary": "PDF ID"
                      },
                      "rank": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Rank of the PDF.",
                        "x-ms-summary": "PDF Rank"
                      },
                      "has_smart_field": {
                        "type": "boolean",
                        "description": "Specify if there is smart fields in the contract.",
                        "x-ms-summary": "Has SmartFields"
                      },
                      "size": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Size of the document.",
                        "x-ms-summary": "PDF Size"
                      },
                      "filename": {
                        "type": "string",
                        "description": "Name of the pdf.",
                        "x-ms-summary": "File name"
                      }
                    }
                  }
                },
                "appendixparts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          },
          "404": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "errors",
                  "x-ms-summary": "Error message"
                }
              }
            }
          }
        },
        "summary": "Get a specific contract",
        "description": "Retrieve metadata of a specific contract.",
        "operationId": "GetSpecificContract",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The contract ID to retrieve.",
            "x-ms-summary": "Contract ID",
            "x-ms-visibility": "important",
            "x-ms-url-encoding": "single"
          }
        ]
      }
    },
    "/contracts/{id}/transaction/signedcontract": {
      "get": {
        "responses": {
          "200": {
            "description": "A PDF File.",
            "schema": {
              "type": "file",
              "x-ms-summary": "Document Binary",
              "description": "Binary content of the pdf file."
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "errors",
                  "x-ms-summary": "Error message"
                }
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "errors",
                  "x-ms-summary": "Error message"
                }
              }
            }
          }
        },
        "produces": [
          "application/pdf"
        ],
        "summary": "Download a contract's signed document",
        "description": "Retrieve a pdf file from the contract's signed document.",
        "operationId": "DownloadContractSignedDocument",
        "x-ms-visibility": "important",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the contract which contains documents.",
            "x-ms-summary": "Contract ID",
            "x-ms-visibility": "important",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "filename",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "File name",
            "description": "The name that you want to give to the downloaded document.",
            "x-ms-visibility": "important"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/pdf",
            "x-ms-visibility": "internal"
          }
        ]
      }
    },
    "/contracts/{id}/documents/": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentAdded"
              }
            }
          },
          "404": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "errors",
                  "x-ms-summary": "Error message"
                }
              }
            }
          }
        },
        "summary": "List contract's documents",
        "description": "Retrieve all documents bound to a contract.",
        "operationId": "ListContractDocuments",
        "x-ms-visibility": "important",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Contract ID",
            "description": "ID of the contract to retrieve documents.",
            "x-ms-visibility": "important",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          }
        ]
      },
      "post": {
        "summary": "Upload a document and attach it to a contract",
        "description": "Upload a document to the environment and attach it to a specific contract.",
        "operationId": "UploadDocumentAndAttachToContract",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Contract ID",
            "description": "ID of the contract to attach a new document to.",
            "x-ms-visibility": "important",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "type": "string",
            "x-ms-visibility": "internal",
            "required": true,
            "default": "multipart/form-data; boundary=abcde"
          },
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "x-ms-summary": "File",
            "description": "File binary to upload."
          }
        ],
        "responses": {
          "201": {
            "description": "documents parts added.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentAdded"
              }
            }
          }
        }
      }
    },
    "/contracts/{id}/documentresult/": {
      "get": {
        "responses": {
          "200": {
            "description": "A PDF File.",
            "schema": {
              "type": "file",
              "title": "PDF Document Binary"
            }
          }
        },
        "summary": "Download the contract's documents",
        "produces": [
          "application/pdf"
        ],
        "description": "Retrieve a PDF file that contains all the documents from a contract.",
        "operationId": "DownloadContractDocuments",
        "x-ms-visibility": "important",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Contract ID",
            "description": "ID of the contract to retrieve the pdf file.",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "filename",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "contract.pdf",
            "x-ms-summary": "Output file name",
            "description": "Name of the file which will be downloaded.",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/pdf",
            "x-ms-visibility": "internal"
          }
        ]
      }
    },
    "/contracts/{id}/recipients/": {
      "get": {
        "responses": {
          "200": {
            "description": "Recipients of the contract.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContractRecipient"
              }
            }
          }
        },
        "summary": "List a contract's recipients",
        "description": "Retrieve all recipients for a specific contract.",
        "operationId": "ListContractRecipients",
        "x-ms-visibility": "important",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Contract ID",
            "description": "ID of the contract to retrieve all recipients.",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          }
        ]
      },
      "post": {
        "summary": "Add a recipient to a contract",
        "description": "Attach an existing recipient to the contract.",
        "operationId": "AddRecipientToContract",
        "x-ms-visibility": "advanced",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Contract ID",
            "description": "ID of the contract to attach recipient.",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "recipient_id": {
                    "type": "integer",
                    "format": "int32",
                    "x-ms-summary": "Recipient ID",
                    "description": "ID of the recipient to attach to the contract."
                  },
                  "signature_mode": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Mode of signature. See documentation for further informations.",
                    "x-ms-summary": "Signature mode"
                  },
                  "message_title": {
                    "type": "string",
                    "description": "Title of the message to send by e-mail if there will be one.",
                    "x-ms-summary": "Message title"
                  },
                  "message_body": {
                    "type": "string",
                    "description": "Body of the message to send by e-mail if there will be one.",
                    "x-ms-summary": "Message content"
                  },
                  "rank": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Place of the recipient in the signature process. Rank and Smartrole are mutually exclusive. Choose only one of them or not at all.",
                    "x-ms-summary": "Rank"
                  },
                  "smartrole": {
                    "type": "string",
                    "description": "Smart role to give to the recipient. See documentation for further informations.",
                    "x-ms-summary": "Smart role name"
                  },
                  "transport_mode": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Transport mode of the signature. See documentation for further informations.",
                    "x-ms-summary": "Transport mode"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Recipient for Contract added.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContractRecipient"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error's message."
                }
              }
            }
          },
          "409": {
            "description": "Conflict (already added)."
          }
        }
      }
    },
    "/contracts/{id}/appendices": {
      "post": {
        "summary": "Upload an attachment and add it to a contract",
        "description": "Upload a new attachment to the environment and attach it to a specific contract.",
        "operationId": "UploadAttachmentAndAddToContract",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-ms-summary": "Contract ID",
            "description": "ID of the contract to add an attachment.",
            "type": "string",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "contract_definition_id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "description": "Contract definition ID defined in your environment. Default is pdfadhoc.",
            "x-ms-summary": "Contract definition ID"
          },
          {
            "name": "option_definition_name",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": "Definition name.",
            "x-ms-summary": "Option definition name"
          },
          {
            "name": "file",
            "in": "formData",
            "type": "array",
            "description" : "Files to add as attachments",
            "x-ms-summary": "Files",
            "items": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Appendices added.",
            "schema": {
              "$ref": "#/definitions/AppendixAdded"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{id}/transaction/start": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully sent.",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        },
        "summary": "Send a contract to be signed",
        "description": "Send a specific contract and all his documents to be signed by recipients.",
        "operationId": "SendContractToBeSigned",
        "x-ms-visibility": "important",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Contract ID",
            "description": "ID of the contract to send for signature.",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          }
        ]
      }
    },
    "/contracts/{id}/transaction/close": {
      "get": {
        "summary": "Validate a contract",
        "description": "Validate (countersign) a contract.",
        "operationId": "ValidateAContract",
        "x-ms-visibility": "important",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Contract ID",
            "description": "ID of the contract to validate.",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "Force",
            "description": "Specify if the contract validation must be forced, even if some signatories have not signed yet."
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction information.",
            "schema": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string",
                  "description": "Date of validation.",
                  "x-ms-summary": "Validation Date"
                },
                "id": {
                  "type": "string",
                  "description": "The certification authority's transaction ID.",
                  "x-ms-summary": "Transaction ID"
                }
              }
            }
          },
          "404": {
            "description": "Bad request.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error."
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{id}/transaction/cancel": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully cancelled.",
            "schema": {
              "type": "object",
              "properties": {
                "succeed": {
                  "type": "boolean",
                  "description": "Specify if the contract has been cancelled."
                }
              }
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        },
        "summary": "Withdraw a contract",
        "description": "Set the status of the contract to ABANDONED, even if the contract was sent for signature.",
        "operationId": "WithdrawContract",
        "x-ms-visibility": "important",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Contract ID",
            "description": "ID of the contract to withdraw.",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "reason": {
                  "type": "string",
                  "description": "The reason of the withdraw.",
                  "x-ms-summary": "Reason",
                  "default": "no specific reason"
                }
              }
            }
          }
        ]
      }
    },
    "/contracts/{id}/transaction/stop": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully stopped.",
            "schema": {
              "type": "object",
              "properties": {
                "succeed": {
                  "type": "boolean",
                  "description": "Specify if the contract has been cancelled."
                }
              }
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        },
        "summary": "Stop a contract's transaction",
        "description": "Stop the contract's transaction so you can modify contract documents and/or signatories.",
        "operationId": "StopContract",
        "x-ms-visibility": "important",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Contract ID",
            "description": "ID of the contract to stop.",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Force transaction close even if signatories have already signed.",
            "x-ms-summary": "Force"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          }
        ]
      }
    },
    "/contracts/{id}/transaction/recipients": {
      "get": {
        "responses": {
          "200": {
            "description": "List of signature informations.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecipientForContractWithRefusal"
              }
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        },
        "summary": "Get signatures of a contract",
        "description": "List all the signatures informations from a specific contract.",
        "operationId": "ListSignatureStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Contract ID",
            "description": "ID of the contract to list all signatures.",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          }
        ]
      }
    },
    "/contracts/{id}/transaction/recipients/{cfc_id}/relaunch": {
      "get": {
        "summary": "Resend notification email to a recipient",
        "description": "Send a notification email to a specific recipient for contract.",
        "operationId": "ResendNotificationRecipient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Contract ID",
            "description": "ID of the contract to resend notification.",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "cfc_id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Recipient for Contract ID",
            "description": "ID of the recipient for contract object to send a notification.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "type": "object",
              "properties": {
                "succeed": {
                  "type": "boolean",
                  "description": "Specify if the notification was successfully resend."
                }
              }
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error messages."
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{id}/transaction/recipients/relaunch": {
      "get": {
        "summary": "Resend the notification email to all recipients",
        "description": "Send a notification email to all the recipients of a specific contract.",
        "operationId": "ResendNotificationAllRecipients",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract to resend notification.",
            "x-ms-summary": "Contract ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "type": "object",
              "properties": {
                "succeed": {
                  "type": "boolean",
                  "description": "Specify if the notification was successfully resend."
                }
              }
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{id}/transaction/prooffiles": {
      "get": {
        "summary": "Download a contract's proof file",
        "description": "Download the proof file of the contract.",
        "operationId": "DownloadProofFileContract",
        "consumes": [
          "application/zip"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contract to download the proof file.",
            "x-ms-summary": "Contract ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "filename",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Name of the file which will be downloaded.",
            "x-ms-summary": "Output file name",
            "default": "proof.zip"
          },
          {
            "name": "Accept",
            "in": "header",
            "type": "string",
            "default": "application/zip",
            "x-ms-visibility": "internal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "File downloaded.",
            "schema": {
              "type": "file"
            }
          }
        }
      }
    },
    "/contracts/recipients/{cfc_id}": {
      "delete": {
        "summary": "Delete a recipient for contract",
        "description": "Delete a recipient from a contract, by his recipient for contract ID. More information in the documentation.",
        "operationId": "DeleteRecipientForContract",
        "parameters": [
          {
            "name": "cfc_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the recipient for contract object to delete.",
            "x-ms-summary": "Recipient for contract ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "type": "object",
              "properties": {
                "succeed": {
                  "type": "boolean",
                  "description": "Specify if it was removed successfully."
                }
              }
            }
          }
        }
      }
    },
    "/bundle": {
      "post": {
        "summary": "Create a Bundle",
        "operationId": "CreateNewBundle",
        "description": "Create a new Bundle with at least one existing contract.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "contract_id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The bundle first contract's ID.",
                  "x-ms-summary": "Contract ID",
                  "x-ms-url-encoding": "single"
                },
                "same_signatories": {
                  "type": "boolean",
                  "description": "Set to false if contracts in the bundle do not have the same set of signatories.",
                  "x-ms-summary": "Same signatories"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Bundle information.",
            "schema": {
              "$ref": "#/definitions/BundleResponse"
            }
          },
          "404": {
            "description": "Contract not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        }
      }
    },
    "/bundle/{id}/contracts": {
      "get": {
        "responses": {
          "200": {
            "description": "List of contract information.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContractInBundle"
              }
            }
          },
          "404": {
            "description": "Bundle not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        },
        "summary": "List a bundle's contracts",
        "description": "Retrieve all contracts from a specific bundle.",
        "x-ms-visibility": "important",
        "operationId": "ListBundleContracts",

        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Bundle ID",
            "description": "ID of the bundle to retrieve contracts from.",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          }
        ]
      },
      "post": {
        "summary": "Add a contract to a bundle",
        "description": "Add an existing contract to an existing Bundle.",
        "operationId": "AddContractToBundle",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Bundle ID",
            "description": "ID of the Bundle to add contract.",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "contract_id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "ID of the contract to add to the bundle.",
                  "x-ms-summary": "Contract ID"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/BundleResponse"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        }
      }
    },
    "/bundle/{id}/transaction/start": {
      "post": {
        "summary": "Send a bundle for signature",
        "description": "Send a bundle for signature.",
        "operationId": "SendBundleForSignature",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Bundle ID",
            "description": "ID of the bundle to send for signature.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction information.",
            "schema": {
              "type": "object",
              "properties": {
                "succeed": {
                  "type": "boolean",
                  "description": "Says if transaction has been sent or not."
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        }
      }
    },
    "/bundle/{id}/transaction/cancel": {
      "post": {
        "summary": "Withdraw a bundle",
        "description": "Withdraw all contract in a bundle.",
        "operationId": "WithdrawBundle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Bundle ID",
            "description": "ID of the bundle to withdraw all contract.",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "type": "object",
              "properties": {
                "succeed": {
                  "type": "boolean",
                  "description": "Says if bundle was withdrawn."
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        }
      }
    },
    "/bundle/{id}/transaction/stop": {
      "get": {
        "summary": "Stop a bundle transaction",
        "description": "Stop a bundle transaction.",
        "operationId": "StopBundleTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Bundle ID",
            "description": "ID of the Bundle to stop transaction.",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false,
            "description": "Force transaction close, even if signatories have already signed.",
            "x-ms-summary": "Force close"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "type": "object",
              "properties": {
                "succeed": {
                  "type": "boolean",
                  "description": "Says bundle was successfully stopped."
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        }
      }
    },
    "/bundle/{id}/transaction/close": {
      "get": {
        "summary": "Validate contracts in a bundle",
        "description": "Counter-sign (validate) all contract in a bundle.",
        "operationId": "ValidateContractsInBundle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Bundle ID",
            "description": "ID of the bundle to validate all contract.",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false,
            "description": "Force the contracts validation if some signatories have not signed yet (or have refused to sign).",
            "x-ms-summary": "Force validation"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "Date of close state."
                  },
                  "id": {
                    "type": "string",
                    "description": "ID of the contract stopped.",
                    "x-ms-summary": "Contract ID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        }
      }
    },
    "/perimeters": {
      "get": {
        "responses": {
          "200": {
            "description": "List of perimeter.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Perimeter"
              }
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message."
                }
              }
            }
          }
        },
        "summary": "List all perimeters",
        "description": "Retrieve all perimeters associated to the connected environment.",
        "operationId": "ListAllPerimeters"
      }
    },
    "/recipients": {
      "get": {
        "summary": "List all recipients",
        "description": "Retrieve all the recipients associated to the current license.",
        "operationId": "ListAllRecipients",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Size",
            "description": "Maximum size of the returned array."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Offset",
            "description": "Sequence number of the first recipient listed."
          },
          {
            "name": "perimeter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Search only in the given perimeter.",
            "x-ms-summary": "Perimeter"
          },
          {
            "name": "get_custom_props",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "List recipients custom properties (increases response time).",
            "x-ms-summary": "Get Custom Props"
          },
          {
            "name": "get_perimeters",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "List recipient's perimeters in the responses (increases response time).",
            "x-ms-summary": "Get Perimeters"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter on the lastname.",
            "x-ms-summary": "Filter lastname (contains)"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter on the email.",
            "x-ms-summary": "Filter email (contains)"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of recipient information.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Recipient"
              },
              "x-ms-summary": "Recipients"
            }
          },
          "404": {
            "description": "Recipients not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error message.",
                  "x-ms-summary": "Error message"
                }
              }
            }
          }
        }
      }
    },
    "/recipients/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Recipient information.",
            "schema": {
              "$ref": "#/definitions/Recipient"
            }
          },
          "404": {
            "description": "Recipient not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Get a specific recipient",
        "description": "Retrieve a specific recipient in the saved list of recipients of the current environment.",
        "operationId": "GetRecipient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-summary": "Recipient ID",
            "description": "ID of the recipient to retrieve.",
            "x-ms-url-encoding": "single"
          }
        ]
      }
    },
    "/webhook/contract": {
      "x-ms-notification-content": {
        "schema": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "type"
            },
            "contractId": {
              "type": "integer",
              "format": "int32",
              "description": "contractId"
            },
            "timestamp": {
              "type": "integer",
              "format": "int32",
              "description": "timestamp"
            },
            "contractStatus": {
              "type": "string",
              "description": "contractStatus"
            }
          }
        },
        "description": "Webhook response"
      },
      "post": {
        "responses": {
          "201": {
            "description": "Successfully registered.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Specify if successfully registered or not."
                },
                "webhook_id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "ID of the webhook to retrieve it."
                }
              }
            }
          },
          "400": {
            "description": "Webhook control error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Specify if successfully registered or not."
                },
                "key": {
                  "type": "string",
                  "description": "Unique identifier to determine error informations."
                },
                "message": {
                  "type": "string",
                  "description": "Full error message."
                }
              }
            }
          },
          "404": {
            "description": "Webhook contract not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "string",
                  "description": "Error messages."
                }
              }
            }
          },
          "405": {
            "description": "Webhook error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Specify if successfully registered or not."
                },
                "key": {
                  "type": "string",
                  "description": "Unique identifier to determine error informations."
                },
                "message": {
                  "type": "string",
                  "description": "Full error message."
                }
              }
            }
          },
          "410": {
            "description": "webhook filters error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Specify if successfully registered or not."
                },
                "key": {
                  "type": "string",
                  "description": "Unique identifier to determine error informations."
                },
                "message": {
                  "type": "string",
                  "description": "Full error message."
                }
              }
            }
          }
        },
        "summary": "When a contract's status change",
        "description": "This operation is triggered whenever a contract's status has changed.",
        "operationId": "WhenContractStatusChanged",
        "x-ms-visibility": "important",
        "x-ms-trigger": "single",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "x-ms-visibility": "internal"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "description"
                },
                "events": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "events"
                },
                "endpoint": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "url",
                      "x-ms-notification-url": true,
                      "x-ms-visibility": "internal",
                      "title": "Webhook URL"
                    }
                  },
                  "description": "endpoint",
                  "required": [
                    "url"
                  ]
                },
                "filter": {
                  "type": "object",
                  "properties": {
                    "contractDefinition": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "description": "contractDefinition"
                    },
                    "perimeter": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "description": "perimeter"
                    }
                  },
                  "description": "filter"
                },
                "concernedUserEmail": {
                  "type": "string",
                  "description": "concernedUserEmail"
                }
              },
              "required": [
                "endpoint"
              ]
            }
          }
        ]
      }
    },
    "/webhook/{id}": {
      "delete": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "succeed": {
                  "type": "boolean",
                  "description": "succeed"
                }
              }
            }
          }
        },
        "summary": "Delete a contract's webhook",
        "description": "Will delete a webhook by ID.",
        "operationId": "DeleteWebhookContract",
        "x-ms-visibility": "internal",
        "parameters": [
          {
            "name": "accept",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "x-ms-url-encoding": "single"
          }
        ]
      }
    }
  },
  "definitions": {
    "ArrayOfContract": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Contract"
      }
    },
    "Contract": {
      "type": "object",
      "properties": {
        "contract_id": {
          "type": "integer",
          "format": "int32",
          "description": "The ID of the contract.",
          "x-ms-summary": "Contract ID",
          "x-ms-url-encoding": "single"
        },
        "date": {
          "type": "integer",
          "format": "int32",
          "description": "Date at which the contract has been created.",
          "x-ms-summary": "Creation Date"
        },
        "document_token": {
          "type": "string",
          "description": "Token of the contract's main document.",
          "x-ms-summary": "Document Token"
        },
        "vendor_email": {
          "type": "string",
          "description": "E-mail address of the Oodrive's license owner.",
          "x-ms-summary": "Vendor E-mail Address"
        },
        "closed": {
          "type": "boolean",
          "description": "Specify if the contract is closed or not.",
          "x-ms-summary": "Is Closed"
        },
        "status": {
          "type": "string",
          "description": "Contract's current status.",
          "x-ms-summary": "Contract Status"
        },
        "contract_definition_id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the contract definition used for this contract.",
          "x-ms-summary": "Contract Definition ID"
        },
        "message_title": {
          "type": "string",
          "description": "E-mail subject when sent for signature.",
          "x-ms-summary": "Message Subject"
        },
        "message_body": {
          "type": "string",
          "description": "E-mail body when sent for signature.",
          "x-ms-summary": "Message Body"
        },
        "name": {
          "type": "string",
          "description": "Contract's main document name.",
          "x-ms-summary": "Contract Name"
        },
        "keep_on_move": {
          "type": "boolean",
          "description": "Determine if the offline signature on mobile device is activated.",
          "x-ms-summary": "Offline Signature Activated"
        },
        "closed_date": {
          "type": "integer",
          "format": "int32",
          "description": "Date of closure of the contract, if there are any.",
          "x-ms-summary": "Contract Closed Date"
        },
        "canceled_reason": {
          "type": "string",
          "description": "Reason of the cancel, if there are any.",
          "x-ms-summary": "Contract Canceled Reason"
        },
        "version_number": {
          "type": "integer",
          "format": "int32",
          "description": "Version number of the contract.",
          "x-ms-summary": "Contract Version Number"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "Full size of the contract.",
          "x-ms-summary": "Contract Size"
        },
        "auto_close": {
          "type": "integer",
          "format": "int32",
          "description": "Specify if the contract will be countersigned automatically or need a human intervention.",
          "x-ms-summary": "Auto-close Enabled"
        },
        "deleted": {
          "type": "integer",
          "format": "int32",
          "description": "Specify if the contract has been deleted or not.",
          "x-ms-summary": "Is Deleted"
        },
        "perimeters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContractPerimeterKey"
          },
          "description": "List of all perimeters of the contract (if queried).",
          "x-ms-summary": "Perimeters"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContractOption"
          },
          "description": "List of all specific options of the contract (if queried).",
          "x-ms-summary": "Options"
        },
        "contract_properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContractProperty"
          },
          "description": "List of all optional contract properties (if queried).",
          "x-ms-summary": "Custom properties"
        }
      }
    },
    "ContractOption": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the contract's option.",
          "x-ms-summary": "Option ID"
        },
        "contract_id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the contract bound to this option.",
          "x-ms-summary": "Contract ID"
        },
        "element_definition_id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the element definition of the option.",
          "x-ms-summary": "Element Definition ID"
        },
        "sync_timer": {
          "type": "integer",
          "format": "int32",
          "description": "Timer that is used for synchronization issue.",
          "x-ms-summary": "Sync Timer"
        },
        "value": {
          "type": "string",
          "description": "Value of the option.",
          "x-ms-summary": "Option Value"
        },
        "last_modification_place": {
          "type": "string",
          "description": "Indicates where the last modification took place.",
          "x-ms-summary": "Last modification place"
        },
        "control": {
          "type": "string",
          "description": "Control field.",
          "x-ms-summary": "Option Control"
        }
      }
    },
    "ContractProperty": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the custom property.",
          "x-ms-summary": "Property ID"
        },
        "key": {
          "type": "string",
          "description": "Key of the custom property.",
          "x-ms-summary": "Property Key"
        },
        "placeholder": {
          "type": "string",
          "description": "Label shown to the recipient when invited to fill in the property.",
          "x-ms-summary": "Property Placeholder"
        },
        "value": {
          "type": "string",
          "description": "Value of the custom property.",
          "x-ms-summary": "Property Value"
        },
        "contract_id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the contract associated to this custom property.",
          "x-ms-summary": "Property Contract ID"
        },
        "to_fill_by_user": {
          "type": "boolean",
          "description": "Specify if user need to fill property or not.",
          "x-ms-summary": "Property Is Required"
        },
        "field_type": {
          "type": "string",
          "enum": [
            "TEXT",
            "TEXTAREA",
            "NUMBER",
            "DATE",
            "SINGLE",
            "IMAGE"
          ],
          "description": "Specify the type of the custom property. More informations in the documentation.",
          "x-ms-summary": "Property Type"
        },
        "input_filter": {
          "type": "string",
          "description": "List of possible choice for the property.",
          "x-ms-summary": "Property Choices"
        },
        "logical_removed": {
          "type": "boolean",
          "description": "Specify if the property is logically removed.",
          "x-ms-summary": "Property Logically Removed",
          "x-ms-visibility": "internal"
        },
        "used_by_contract": {
          "type": "boolean",
          "description": "Set to true if the information must appear on the contract document.",
          "x-ms-summary": "Property Is Used By Contract"
        },
        "required": {
          "type": "boolean",
          "description": "Specify if property is required or not.",
          "x-ms-summary": "Property Is Required"
        }
      }
    },
    "ContractPerimeterKey": {
      "type": "string",
      "description": "Key of the perimeter.",
      "x-ms-summary": "Perimeter Key"
    },
    "ContractRecipient": {
      "type": "object",
      "properties": {
        "recipient_for_contract_id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier of the couple contract and recipient.",
          "title": "Recipient for contract ID"
        },
        "recipient_id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the recipient.",
          "title": "Recipient ID"
        },
        "contract_id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the contract.",
          "title": "Contract ID"
        },
        "signature_status": {
          "type": "string",
          "description": "Status of the sign mark.",
          "title": "Signature status"
        },
        "signature_date": {
          "type": "integer",
          "format": "int32",
          "description": "Timestamp of the date of the sign mark.",
          "title": "Signature date"
        },
        "signature_mode": {
          "type": "integer",
          "format": "int32",
          "description": "Sign mark mode.",
          "title": "Signature mode"
        },
        "message_title": {
          "type": "string",
          "description": "Title of the message.",
          "title": "Message title"
        },
        "message_body": {
          "type": "string",
          "description": "Body of the message.",
          "title": "Message content"
        },
        "rank": {
          "type": "integer",
          "format": "int32",
          "description": "Rank in the sign process.",
          "title": "Rank"
        },
        "smartrole": {
          "type": "string",
          "description": "Smart Role associated to the recipient.",
          "title": "Smart role"
        },
        "transport_mode": {
          "type": "integer",
          "format": "int32",
          "description": "Transport mode.",
          "title": "Transport mode"
        },
        "signature_id": {
          "type": "string",
          "description": "ID of the signature from the recipient.",
          "title": "Signature ID"
        }
      }
    },
    "DocumentAdded": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the document.",
          "title": "Document ID",
          "x-ms-visibility": "important"
        },
        "rank": {
          "type": "integer",
          "format": "int32",
          "description": "Place in the list of document.",
          "title": "Rank",
          "x-ms-visibility": "important"
        },
        "has_smart_field": {
          "type": "boolean",
          "description": "Specify if the document has SmartFields.",
          "title": "Has SmartField",
          "x-ms-visibility": "advanced"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "Size of the document in bytes.",
          "title": "Document Size",
          "x-ms-visibility": "important"
        },
        "filename": {
          "type": "string",
          "description": "Name of the document.",
          "title": "Document Name",
          "x-ms-visibility": "important"
        }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "transaction_id": {
          "type": "string",
          "description": "Specify the transaction ID bound to the contract.",
          "title": "Contract Transaction ID",
          "x-ms-visibility": "advanced"
        },
        "is_closed": {
          "type": "boolean",
          "description": "Specify if the contract is closed.",
          "title": "Is Closed",
          "x-ms-visibility": "important"
        },
        "contract_name": {
          "type": "string",
          "description": "Name of the contract.",
          "title": "Contract Name",
          "x-ms-visibility": "important"
        },
        "status": {
          "type": "string",
          "description": "Specify the status of the contract.",
          "title": "Contract Status",
          "x-ms-visibility": "important",
          "enum": [
            "OPEN",
            "CLOSED",
            "SIGNED",
            "PENDING",
            "ARCHIVED",
            "ABANDONED"
          ]
        }
      }
    },
    "Perimeter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the perimeter.",
          "title": "Perimeter ID"
        },
        "key": {
          "type": "string",
          "description": "Key of the perimeter (used by contracts).",
          "title": "Perimeter key"
        },
        "description": {
          "type": "string",
          "description": "Description of the perimeter."
        }
      }
    },
    "RecipientForContractWithRefusal": {
      "type": "object",
      "properties": {
        "recipient_for_contract_id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the object that bound the contract and the recipient.",
          "title": "Recipient for contract ID"
        },
        "recipient_id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the signature's recipient.",
          "title": "Recipient ID"
        },
        "signature_status": {
          "type": "string",
          "description": "Status of the signature.",
          "title": "Signature Status"
        },
        "signature_date": {
          "type": "integer",
          "format": "int32",
          "description": "Date of the last changes of the signature.",
          "title": "Signature date"
        },
        "signature_mode": {
          "type": "integer",
          "format": "int32",
          "description": "Mode of the signature.",
          "title": "Signature mode"
        },
        "message_title": {
          "type": "string",
          "description": "Title of the message bound to the contract's signature.",
          "title": "Message title"
        },
        "message_body": {
          "type": "string",
          "description": "Body of the message bound to the contract's signature.",
          "title": "Message content"
        },
        "rank": {
          "type": "integer",
          "format": "int32",
          "description": "Rank of the signature's recipient in the contract process.",
          "title": "Rank"
        },
        "smartrole": {
          "type": "string",
          "description": "Role of the signature's recipient in the contract.",
          "title": "Smart role name"
        },
        "transport_mode": {
          "type": "integer",
          "format": "int32",
          "description": "Transport mode of the contract bound to the signature.",
          "title": "Transport mode"
        },
        "signature_id": {
          "type": "string",
          "description": "ID of the signature.",
          "title": "Signature ID"
        },
        "has_refusal": {
          "type": "boolean",
          "description": "Specify if the recipient did refuse the contract.",
          "title": "Has Refusal"
        },
        "last_refusal_date": {
          "type": "integer",
          "format": "int32",
          "description": "Specify the date of refusal.",
          "title": "Last refusal date"
        },
        "last_refusal_message": {
          "type": "string",
          "description": "Specify the refusal message.",
          "title": "Last refusal message"
        }
      }
    },
    "ContractInBundle": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the contract.",
          "title": "Contract ID"
        },
        "name": {
          "type": "string",
          "description": "Name of the contract.",
          "title": "Contract Name"
        },
        "contract_definition_type": {
          "type": "string",
          "description": "Type of definition of the contract.",
          "title": "Contract definition type"
        },
        "contract_definition_id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the contract's definition.",
          "title": "Contract definition ID"
        },
        "company_name": {
          "type": "string",
          "description": "Name of the company bound to the contract.",
          "title": "Company name"
        }
      }
    },
    "Recipient": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the recipient.",
          "x-ms-summary": "Recipient ID"
        },
        "civility": {
          "type": "string",
          "enum": [
            "MONSIEUR",
            "MADAME"
          ],
          "description": "Civility of the recipient",
          "x-ms-summary": "Civility"
        },
        "firstname": {
          "type": "string",
          "description": "Firstname of the recipient.",
          "x-ms-summary": "First Name"
        },
        "lastname": {
          "type": "string",
          "description": "Lastname of the recipient.",
          "x-ms-summary": "Last Name"
        },
        "address_1": {
          "type": "string",
          "description": "Main postal address of the recipient.",
          "x-ms-summary": "Main address"
        },
        "postal_code": {
          "type": "string",
          "description": "Postal code of the recipient.",
          "x-ms-summary": "Postal Code"
        },
        "city": {
          "type": "string",
          "description": "City of the recipient.",
          "x-ms-summary": "City"
        },
        "cell_phone": {
          "type": "string",
          "description": "Mobile Phone number of the recipient.",
          "x-ms-summary": "Mobile Phone number"
        },
        "email": {
          "type": "string",
          "description": "Mail address of the recipient.",
          "x-ms-summary": "Mail address"
        },
        "country": {
          "type": "string",
          "description": "Country of the recipient.",
          "x-ms-summary": "Country"
        },
        "address_2": {
          "type": "string",
          "description": "Secondary postal address of the recipient.",
          "x-ms-summary": "Secondary Address"
        },
        "company_name": {
          "type": "string",
          "description": "Company name of the recipient.",
          "x-ms-summary": "Company Name"
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the recipient.",
          "x-ms-summary": "Phone number"
        },
        "job_title": {
          "type": "string",
          "description": "Job title of the recipient.",
          "x-ms-summary": "Job Title"
        },
        "birthdate": {
          "type": "integer",
          "format": "int32",
          "description": "Birth date (timestamp) of the recipient.",
          "x-ms-summary": "Birthdate"
        },
        "birthplace": {
          "type": "string",
          "description": "Birth place of the recipient.",
          "x-ms-summary": "Birth place"
        },
        "custom_properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecipientProperty"
          }
        },
        "perimeters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RecipientProperty": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the property.",
          "title": "Property ID"
        },
        "key": {
          "type": "string",
          "description": "Key of the property.",
          "title": "Property key"
        },
        "value": {
          "type": "string",
          "description": "Value of the property.",
          "title": "Property value"
        },
        "contractor_id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the contractor.",
          "title": "Contractor ID"
        },
        "sync_timer": {
          "type": "integer",
          "format": "int32",
          "description": "Timer of the last synchronization.",
          "title": "Synchronization timer"
        },
        "last_modification_place": {
          "type": "string",
          "description": "Location of the last modification.",
          "title": "Last modification place"
        }
      }
    },
    "AppendixAdded": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the Appendix.",
          "title": "Appendix ID"
        },
        "filename": {
          "type": "string",
          "description": "Name of the Appendix.",
          "title": "Appendix Name"
        },
        "option_id": {
          "type": "integer",
          "format": "int32",
          "description": "Option ID for the Appendix",
          "title": "Appendix option ID"
        },
        "content_type": {
          "type": "string",
          "description": "Content-Type of the Appendix (image/jpeg for example).",
          "title": "Appendix Content-Type"
        }
      }
    },
    "BundleResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the Bundle.",
          "title": "Bundle ID"
        },
        "actor_id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the creator of the Bundle.",
          "title": "Author ID"
        },
        "contract_id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the first contract of the created Bundle.",
          "title": "First Contract ID"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Status of the bundle.",
          "title": "Bundle Status"
        },
        "master": {
          "type": "integer",
          "format": "int32",
          "description": "Master of the bundle.",
          "title": "Bundle Master"
        }
      }
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "j_token"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": []
}