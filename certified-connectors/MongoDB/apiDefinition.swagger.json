{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "MongoDB",
    "description": "MongoDB is a general purpose, distributed, document data platform which is loved by developers and used across enterprises to run variety of workloads.You can now explore the various endpoints and perform CRUD operations and aggregations on your collection using the MongoDB Connector.",
    "contact": {
      "name": "MongoDB Support",
      "url": "https://www.mongodb.com/community/forums/",
      "email": "support-operations@mongodb.com"
    }
  },
  "host": "data.mongodb-api.com",
  "basePath": "/app/<Data API App ID>/endpoint/data/v1/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/action/insertOne": {
      "post": {
        "summary": "Insert Document",
        "description": "Using the insertOne endpoint, you can add a document to a collection. Use the document property in the request body to specify the document that should be created.",
        "operationId": "InsertDocument",
        "parameters": [
          {
            "name": "Content-Type",
            "x-ms-summary": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "description": "Content-Type",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Access-Control-Request-Headers",
            "x-ms-summary": "Access-Control-Request-Headers",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "*",
            "description": "Access-Control-Request-Headers",
            "x-ms-visibility": "internal"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "The name of the cluster.",
                  "title": "MongoDB Cluster Name"
                },
                "database": {
                  "type": "string",
                  "description": "The name of the database.",
                  "title": "MongoDB Database Name"
                },
                "collection": {
                  "type": "string",
                  "description": "The name of the collection.",
                  "title": "MongoDB Collection Name"
                },
                "document": {
                  "type": "object",
                  "description": "An EJSON document to insert into the collection."
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "document": "{{DOCUMENT}}"
              },
              "required": [
                "document",
                "collection",
                "database",
                "dataSource"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "A JSON object containing objectid of the inserted document.",
            "schema": {
              "type": "object",
              "properties": {
                "insertedId": {
                  "type": "string",
                  "description": "insertedId"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "description": "Content-Type",
                "type": "string"
              },
              "Accept": {
                "description": "Accept",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/action/findOne": {
      "post": {
        "summary": "Find Document",
        "description": "Using the findOne endpoint will let you retrieve a single document from a collection. Use the filter property in the request body to specify the search criteria. If more than one document matches the criteria, only the first match will be returned.",
        "operationId": "FindDocument",
        "parameters": [
          {
            "name": "Content-Type",
            "x-ms-summary": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "description": "Content-Type",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Access-Control-Request-Headers",
            "x-ms-summary": "Access-Control-Request-Headers",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "*",
            "description": "Access-Control-Request-Headers",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Accept",
            "x-ms-summary": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "description": "Accept",
            "x-ms-visibility": "internal"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "The name of the cluster.",
                  "title": "MongoDB Cluster Name"
                },
                "database": {
                  "type": "string",
                  "description": "The name of the database.",
                  "title": "MongoDB Database Name"
                },
                "collection": {
                  "type": "string",
                  "description": "The name of the collection.",
                  "title": "MongoDB Collection Name"
                },
                "filter": {
                  "type": "object",
                  "description": "A MongoDB Query Filter. The findOne action returns the first document in the collection that matches this filter."
                },
                "projection": {
                  "type": "object",
                  "description": "A MongoDB Query Projection. Depending on the projection the returned document will either omit specific fields or include only specified fields or values"
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "filter": "{{QUERY_FILTER}}",
                "projection": "{{PROJECTION}}"
              },
              "required": [
                "collection",
                "dataSource",
                "database"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object containing the document that is fetched.",
            "schema": {
              "type": "object",
              "properties": {
                "document": {
                  "type": "object",
                  "description": "document"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "description": "Content-Type",
                "type": "string"
              },
              "Accept": {
                "description": "Accept",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/action/updateOne": {
      "post": {
        "summary": "Update Document",
        "description": "You can use the updateOne endpoint to update a single record. Use the filter property in the request body to specify the search criteria. If more than one document matches the criteria, only the first match will be returned. Then use the update field to specify what should be updated. You should use one of the update operators to update your documents.",
        "operationId": "UpdateDocument",
        "parameters": [
          {
            "name": "Content-Type",
            "x-ms-summary": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "description": "Content-Type",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Access-Control-Request-Headers",
            "x-ms-summary": "Access-Control-Request-Headers",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "*",
            "description": "Access-Control-Request-Headers",
            "x-ms-visibility": "internal"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "The name of the cluster.",
                  "title": "MongoDB Cluster Name"
                },
                "database": {
                  "type": "string",
                  "description": "The name of the database.",
                  "title": "MongoDB Database Name"
                },
                "collection": {
                  "type": "string",
                  "description": "The name of the collection.",
                  "title": "MongoDB Collection Name"
                },
                "filter": {
                  "type": "object",
                  "description": "A MongoDB Query Filter.The UpdateOne action modifies the first document in the collection that matches this filter."
                },
                "update": {
                  "type": "object",
                  "description": "A MongoDB Update Expression that specifies how to modify the matched document."
                },
                "upsert": {
                  "type": "boolean",
                  "description": "The Upsert flag only applies if no documents match the specified filter. If true, the updateOne action inserts a new document that matches the filter with the specified update applied to it.",
                  "title": "",
                  "enum": [
                    true,
                    false
                  ]
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "filter": "{{FILTER}}",
                "update": "{{UPDATE}}",
                "upsert": false
              },
              "required": [
                "collection",
                "dataSource",
                "database",
                "update",
                "filter"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object containing the count of documents matched and count of documents modified.",
            "schema": {
              "type": "object",
              "properties": {
                "matchedCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "matchedcount"
                },
                "modifiedCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "modifiedcount"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "description": "Content-Type",
                "type": "string"
              },
              "Accept": {
                "description": "Accept",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/action/deleteOne": {
      "post": {
        "summary": "Delete Document",
        "description": "To delete a single document, use the deleteOne endpoint. Use the filter property in the request body to specify the search criteria. If more than one document matches the criteria, only the first match will be deleted.",
        "operationId": "DeleteDocument",
        "parameters": [
          {
            "name": "Content-Type",
            "x-ms-summary": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "description": "Content-Type",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Access-Control-Request-Headers",
            "x-ms-summary": "Access-Control-Request-Headers",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "*",
            "description": "Access-Control-Request-Headers",
            "x-ms-visibility": "internal"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "The name of the cluster.",
                  "title": "MongoDB Cluster Name"
                },
                "database": {
                  "type": "string",
                  "description": "The name of the database.",
                  "title": "MongoDB Database Name"
                },
                "collection": {
                  "type": "string",
                  "description": "The name of the collection.",
                  "title": "MongoDB Collection Name"
                },
                "filter": {
                  "type": "object",
                  "description": "A MongoDB Query Filter. The deleteOne action deletes the first document in the collection that matches this filter."
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "filter": "{{FILTER}}"
              },
              "required": [
                "collection",
                "dataSource",
                "database",
                "filter"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object containing the count of documents deleted.",
            "schema": {
              "type": "object",
              "properties": {
                "deletedCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "deletedcount"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "description": "Content-Type",
                "type": "string"
              },
              "Accept": {
                "description": "Accept",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/action/insertMany": {
      "post": {
        "summary": "Insert Multiple Documents",
        "description": "You can add more than one document at a time by using the insertMany endpoint. In that case, you must use the documents property in the body of the request to specify the array of documents you want to insert into the collection.",
        "operationId": "InsertMultipleDocuments",
        "parameters": [
          {
            "name": "Content-Type",
            "x-ms-summary": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "description": "Content-Type",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Access-Control-Request-Headers",
            "x-ms-summary": "Access-Control-Request-Headers",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "*",
            "description": "Access-Control-Request-Headers",
            "x-ms-visibility": "internal"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "The name of the cluster.",
                  "title": "MongoDB Cluster Name"
                },
                "database": {
                  "type": "string",
                  "description": "The name of the database.",
                  "title": "MongoDB Database Name"
                },
                "collection": {
                  "type": "string",
                  "description": "The name of the collection.",
                  "title": "MongoDB Collection Name"
                },
                "documents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "items"
                  },
                  "description": "An array of one or more EJSON documents to insert into the collection."
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "documents": "{{DOCUMENTS}}"
              },
              "required": [
                "collection",
                "dataSource",
                "database",
                "documents"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "A JSON object containing the objectids of the inserted documents.",
            "schema": {
              "type": "object",
              "properties": {
                "insertedIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "insertedIds"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "description": "Content-Type",
                "type": "string"
              },
              "Accept": {
                "description": "Accept",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/action/find": {
      "post": {
        "summary": "Find Multiple Documents",
        "description": "Using the find endpoint, you can fetch multiple documents at once. Use the filter property in the body of the request to specify the criteria on which to filter. If you pass an empty object, all the documents in the collection will be returned.",
        "operationId": "FindMultipleDocuments",
        "parameters": [
          {
            "name": "Content-Type",
            "x-ms-summary": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "description": "Content-Type",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Access-Control-Request-Headers",
            "x-ms-summary": "Access-Control-Request-Headers",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "*",
            "description": "Access-Control-Request-Headers",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Accept",
            "x-ms-summary": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/{{CONTENT_TYPE}}",
            "description": "Accept",
            "x-ms-visibility": "internal"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "The name of the cluster.",
                  "title": "MongoDB Cluster Name"
                },
                "database": {
                  "type": "string",
                  "description": "The name of the database.",
                  "title": "MongoDB Database Name"
                },
                "collection": {
                  "type": "string",
                  "description": "The name of the collection.",
                  "title": "MongoDB Collection Name"
                },
                "filter": {
                  "type": "object",
                  "description": "A MongoDB Query Filter.The find action returns documents in the collection that match this filter.If you do not specify a filter, the action matches all document the collection."
                },
                "projection": {
                  "type": "object",
                  "description": "A MongoDB Query projection.Depending on the projection, the returned documents either omit specific fields or include only specified fields and values."
                },
                "sort": {
                  "type": "object",
                  "description": "A MongoDB Sort Expression. Matched documents are returned in ascending or descending order of the fields specified in the expression."
                },
                "limit": {
                  "type": "integer",
                  "description": "The maximum number of matched documents to include in the returned result set. Each request may return up to 50,000 documents."
                },
                "skip": {
                  "type": "integer",
                  "description": "The number of matched documents to skip before adding matched documents to the result set."
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "filter": "{{FILTER}}",
                "sort": "{{SORT}}",
                "limit": "{{LIMIT}}",
                "skip": "{{SKIP}}"
              },
              "required": [
                "collection",
                "dataSource",
                "database"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object containing an array of all the documents fetched.",
            "schema": {
              "type": "object",
              "properties": {
                "documents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "_id"
                      },
                      "name": {
                        "type": "string",
                        "description": "name"
                      },
                      "age": {
                        "type": "integer",
                        "format": "int32",
                        "description": "age"
                      }
                    }
                  },
                  "description": "documents"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "description": "Content-Type",
                "type": "string"
              },
              "Accept": {
                "description": "Accept",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/action/updateMany": {
      "post": {
        "summary": "Update Multiple Documents",
        "description": "Using updateMany, you can update all the documents matching a specific filter specified in the body of the request. Use one of the update operators in the update field to update your documents.",
        "operationId": "UpdateMultipleDocuments",
        "parameters": [
          {
            "name": "Content-Type",
            "x-ms-summary": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "description": "Content-Type",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Access-Control-Request-Headers",
            "x-ms-summary": "Access-Control-Request-Headers",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "*",
            "description": "Access-Control-Request-Headers",
            "x-ms-visibility": "internal"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "The name of the cluster.",
                  "title": "MongoDB Cluster Name"
                },
                "database": {
                  "type": "string",
                  "description": "The name of the database.",
                  "title": "MongoDB Database Name"
                },
                "collection": {
                  "type": "string",
                  "description": "The name of the collection.",
                  "title": "MongoDB Collection Name"
                },
                "filter": {
                  "type": "object",
                  "description": "A MongoDB Query Filter . The updateMany action modifies all documents in the collection that match this filter."
                },
                "update": {
                  "type": "object",
                  "description": "A MongoDB Update Expression that specifies how to modify matched documents."
                },
                "upsert": {
                  "type": "boolean",
                  "description": "The upsert flag only applies if no documents match the specified filter. If true, the updateMany action inserts a new document that matches the filter with the specified update applied to it."
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "filter": "{{FILTER}}",
                "update": "{{UPDATE}}"
              },
              "required": [
                "collection",
                "dataSource",
                "database",
                "update",
                "filter"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object containing the count of documents matched and count of documents modified.",
            "schema": {
              "type": "object",
              "properties": {
                "matchedCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "matchedcount"
                },
                "modifiedCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "modifiedcount"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "description": "Content-Type",
                "type": "string"
              },
              "Accept": {
                "description": "Accept",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/action/deleteMany": {
      "post": {
        "summary": "Delete Many Documents",
        "description": "You can use deleteMany to delete multiple documents at once. Use the filter property to specify which documents to delete. Beware that using this API without any filters will delete all the documents in the collection. Use deletemany with care.",
        "operationId": "DeleteManyDocuments",
        "parameters": [
          {
            "name": "Content-Type",
            "x-ms-summary": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "description": "Content-Type",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Access-Control-Request-Headers",
            "x-ms-summary": "Access-Control-Request-Headers",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "*",
            "description": "Access-Control-Request-Headers",
            "x-ms-visibility": "internal"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "The name of the cluster.",
                  "title": "MongoDB Cluster Name"
                },
                "database": {
                  "type": "string",
                  "description": "The name of the database.",
                  "title": "MongoDB Database Name"
                },
                "collection": {
                  "type": "string",
                  "description": "The name of the collection.",
                  "title": "MongoDB Collection Name"
                },
                "filter": {
                  "type": "object",
                  "description": "A MongoDB Query Filter . The deleteMany action deletes all documents in the collection that match this filter."
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "filter": "{{FILTER}}"
              },
              "required": [
                "dataSource",
                "database",
                "collection",
                "filter"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object containing the count of documents deleted.",
            "schema": {
              "type": "object",
              "properties": {
                "deletedCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "deletedCount"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "description": "Content-Type",
                "type": "string"
              },
              "Accept": {
                "description": "Accept",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/action/aggregate": {
      "post": {
        "summary": "Run Aggregation Pipeline",
        "description": "You can even run aggregation pipelines with the Data API. To do so, use the aggregate endpoint and specify your pipeline in the pipeline field of the request body.",
        "operationId": "RunAggregationPipeline",
        "parameters": [
          {
            "name": "Content-Type",
            "x-ms-summary": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/json",
            "description": "Content-Type",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Access-Control-Request-Headers",
            "x-ms-summary": "Access-Control-Request-Headers",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "*",
            "description": "Access-Control-Request-Headers",
            "x-ms-visibility": "internal"
          },
          {
            "name": "Accept",
            "x-ms-summary": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "default": "application/{{CONTENT_TYPE}}",
            "description": "Accept",
            "x-ms-visibility": "internal"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "dataSource": {
                  "type": "string",
                  "description": "The name of the cluster.",
                  "title": "MongoDB Cluster Name"
                },
                "database": {
                  "type": "string",
                  "description": "The name of the database.",
                  "title": "MongoDB Database Name"
                },
                "collection": {
                  "type": "string",
                  "description": "The name of the collection.",
                  "title": "MongoDB Collection Name"
                },
                "pipeline": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "items"
                  },
                  "description": "A MongoDB Aggregation Pipeline."
                }
              },
              "default": {
                "dataSource": "{{DATA_SOURCE}}",
                "database": "{{DATABASE}}",
                "collection": "{{COLLECTION}}",
                "pipeline": "{{PIPELINE}}"
              },
              "required": [
                "collection",
                "dataSource",
                "database",
                "pipeline"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object containing an array of all the documents fetched after aggregation.",
            "schema": {
              "type": "object",
              "properties": {
                "documents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "_id"
                      },
                      "Name": {
                        "type": "string",
                        "description": "Name"
                      },
                      "Age": {
                        "type": "string",
                        "description": "Age"
                      }
                    }
                  },
                  "description": "documents"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "description": "Content-Type",
                "type": "string"
              },
              "Accept": {
                "description": "Accept",
                "type": "string"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {},
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "api-key"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": [],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.mongodb.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.mongodb.com/legal/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Data"
    }
  ]
}
