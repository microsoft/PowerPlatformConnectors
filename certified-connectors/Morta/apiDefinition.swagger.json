{
  "swagger": "2.0",
  "info": {
    "title": "Morta",
    "description": "The Morta API is based around REST. Our API accepts json encoded request bodies and returns JSON encoded respones. We use standard HTTP responses, authentication and verbs. All API requests must have an authorization header of the form: { 'Authorization': 'Bearer <API_KEY>' }",
    "version": "1.0",
    "contact": {
      "name": "Mort Support",
      "url": "https://morta.io",
      "email": "support@morta.io"
    }
  },
  "host": "api.morta.io",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/v1/user/projects/favourites": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User's Favourite Projects",
        "description": "Get all favourite projects the currently logged in user is part of",
        "operationId": "GetFavouriteProjects",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's favourite projects",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "isDeleted": {
                        "description": "Indicates if the project is deleted",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Name of the project",
                        "type": "string"
                      },
                      "projectRole": {
                        "description": "User's role in the project",
                        "type": "string"
                      },
                      "publicId": {
                        "format": "uuid",
                        "description": "Public ID of the project",
                        "type": "string"
                      }
                    }
                  }
                },
                "metadata": {
                  "description": "Additional metadata",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/comment_thread/stats": {
      "get": {
        "tags": [
          "Comment"
        ],
        "summary": "Get Comment Thread Statistics",
        "description": "Retrieve statistics for comment threads based on reference type and main reference ID",
        "operationId": "GetCommentThreadStatsByReference",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "reference_type",
            "description": "Type of the reference (process_section, table, or table_view) for which to gather statistics",
            "required": true,
            "type": "string",
            "x-ms-summary": "Reference Type",
            "enum": [
              "process_section",
              "table",
              "table_view"
            ]
          },
          {
            "in": "query",
            "name": "main_reference_id",
            "description": "UUID of the main reference for which to gather statistics",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Main Reference ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved comment thread statistics",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CommentThreadStats"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/notifications/event-types": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Get a list of all supported event types",
        "description": "Retrieve a list of all supported event types for notifications.",
        "operationId": "GetNotificationEventTypes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of event types.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/integrations/passthrough-download": {
      "post": {
        "tags": [
          "Integrations"
        ],
        "summary": "Create Passthrough Download Request",
        "description": "Make a passthrough API call to an external source system for downloading files.",
        "operationId": "IntegrationsPassthroughDownloadApiCall",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IntegrationsPassthroughApiCall"
            },
            "x-ms-summary": "IntegrationsPassthroughApiCall Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully made the passthrough download request.",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions or cannot make requests on behalf of another user."
          },
          "404": {
            "description": "User not found."
          },
          "422": {
            "description": "Validation error - Necessary account connection missing or invalid source system specified."
          }
        }
      }
    },
    "/v1/integrations/passthrough": {
      "post": {
        "tags": [
          "Integrations"
        ],
        "summary": "Create Passthrough Request to Source System",
        "description": "Make a passthrough API call to an external source system.",
        "operationId": "IntegrationsPassthroughApiCall",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IntegrationsPassthroughApiCall"
            },
            "x-ms-summary": "IntegrationsPassthroughApiCall Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully made the passthrough request.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/IntegrationsPassthroughResponse"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions or cannot make requests on behalf of another user."
          },
          "404": {
            "description": "User or requested resource not found."
          },
          "422": {
            "description": "Validation error - Necessary account connection missing."
          }
        }
      }
    },
    "/v1/permissions/tag": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Get Tag by Public ID",
        "description": "Retrieve a tag by its public ID.",
        "operationId": "GetTagByPublicId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "tag_id",
            "description": "Public ID of the tag to retrieve.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Tag Public ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the tag.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Tag"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found."
          }
        }
      }
    },
    "/v1/process/duplicate": {
      "post": {
        "tags": [
          "Process"
        ],
        "summary": "Duplicate Process",
        "description": "Duplicate an existing process, optionally into a different project",
        "operationId": "DuplicateProcess",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DuplicateProcess"
            },
            "x-ms-summary": "DuplicateProcess Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully duplicated the process",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcess"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to duplicate this process"
          },
          "404": {
            "description": "Process or target project not found"
          }
        }
      }
    },
    "/v1/user/public-projects": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User's Public Projects",
        "description": "Get all public projects where the user is a member",
        "operationId": "GetUserPublicProjects",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's public projects",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/HomeProject"
                  }
                },
                "metadata": {
                  "description": "Additional metadata",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/owner-projects": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User's Owned and Administered Projects",
        "description": "Get all projects where the user is the owner or an admin",
        "operationId": "GetUserOwnerProjects",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's owned and administered projects",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/HomeProject"
                  }
                },
                "metadata": {
                  "description": "Additional metadata",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/templates": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User Templates",
        "description": "Get all templates the currently logged in user has access to",
        "operationId": "GetUserTemplates",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's templates",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "createdBy": {
                        "$ref": "#/definitions/SummaryUser"
                      }
                    }
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/projects": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User Projects",
        "description": "Get all projects the currently logged in user is part of",
        "operationId": "GetUserProjects",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the projects",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/HomeProject"
                  }
                },
                "metadata": {
                  "description": "Additional metadata",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user/account": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update User Account",
        "description": "Update the account details for the currently logged in user",
        "operationId": "UpdateUserAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserAccount"
            },
            "x-ms-summary": "UpdateUserAccount Body"
          }
        ],
        "responses": {
          "200": {
            "description": "User account updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/UserWithToken"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Two factor code is invalid or required"
          },
          "401": {
            "description": "Old password is invalid"
          }
        }
      }
    },
    "/v1/user/apikey": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create API Key for User",
        "description": "Create an API key for the currently logged in user",
        "operationId": "CreateApiKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateApiKey"
            },
            "x-ms-summary": "CreateApiKey Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created an API key",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/ApiKey"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/v1/user/search": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Search for Users",
        "description": "Search for users by project or process",
        "operationId": "SearchUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "project_id",
            "description": "Project ID to restrict search",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "query",
            "name": "process_id",
            "description": "Process ID to restrict search",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "query",
            "name": "table_view_id",
            "description": "Table View ID to restrict search",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table View Id"
          },
          {
            "in": "query",
            "name": "query",
            "description": "Query string for searching users",
            "required": true,
            "type": "string",
            "x-ms-summary": "Query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved search results",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SummaryUser"
                  }
                },
                "metadata": {
                  "description": "Additional metadata",
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions for this action"
          },
          "404": {
            "description": "Project, process, or table view not found"
          }
        }
      }
    },
    "/v1/user/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get my details",
        "description": "Get info on the current user",
        "operationId": "GetMe",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return the current user's information",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                },
                "metadata": {
                  "description": "The metadata object",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/comment_thread": {
      "get": {
        "tags": [
          "Comment"
        ],
        "summary": "Get Comment Threads by Reference",
        "description": "Retrieve all comment threads associated with a specific reference",
        "operationId": "GetCommentThreadsByReference",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "reference_type",
            "description": "Type of the reference (process_section, table, or table_view) associated with the comment threads",
            "required": true,
            "type": "string",
            "enum": [
              "process_section",
              "table",
              "table_view"
            ],
            "x-ms-summary": "Reference Type"
          },
          {
            "in": "query",
            "name": "reference_id",
            "description": "UUID of the reference associated with the comment threads",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Reference Id"
          },
          {
            "in": "query",
            "name": "main_reference",
            "description": "Optional main reference for additional filtering",
            "type": "string",
            "x-ms-summary": "Main Reference"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the comment threads",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CommentThread"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Comment"
        ],
        "summary": "Create New Comment Thread",
        "description": "Create a new comment thread",
        "operationId": "CreateCommentThread",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCommentThread"
            },
            "x-ms-summary": "CreateCommentThread Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a new comment thread",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/CommentThread"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "change": {
                      "description": "Changes made in this operation",
                      "type": "object"
                    },
                    "event": {
                      "description": "Event type for the operation",
                      "type": "string"
                    },
                    "resourceId": {
                      "description": "UUID of the newly created comment thread",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/notifications": {
      "x-ms-notification-content": {
        "description": "Morta Notification",
        "schema": {
          "type": "object",
          "$ref": "#/definitions/WebhookResponse"
        }
      },
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created notification",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Notification"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User is not an admin or owner."
          },
          "404": {
            "description": "Project not found"
          }
        },
        "summary": "Notification Creation",
        "description": "Create a notification on the Morta platform",
        "operationId": "NotificationCreation",
        "x-ms-trigger": "single",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "string",
                  "description": "projectId",
                  "title": ""
                },
                "webhookUrl": {
                  "type": "string",
                  "description": "webhookUrl",
                  "x-ms-notification-url": true,
                  "x-ms-visibility": "internal",
                  "title": ""
                },
                "description": {
                  "type": "string",
                  "description": "description",
                  "title": "",
                  "x-ms-visibility": "internal",
                  "default": "Process response submitted webhook"
                },
                "triggers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "resource": {
                        "type": "string",
                        "description": "resource",
                        "title": "",
                        "enum": [
                          "project",
                          "table",
                          "process",
                          "policy",
                          "member"
                        ]
                      },
                      "verb": {
                        "type": "string",
                        "description": "verb",
                        "title": "",
                        "enum": [
                          "joined",
                          "read",
                          "updated",
                          "deleted",
                          "restored",
                          "searched",
                          "duplicated",
                          "created",
                          "csv_uploaded",
                          "column_created",
                          "column_updated",
                          "column_deleted",
                          "column_restored",
                          "row_created",
                          "row_deleted",
                          "row_updated",
                          "cell_updated",
                          "comment_created",
                          "comment_updated",
                          "comment_deleted",
                          "thread_created",
                          "thread_resolved",
                          "thread_reopened",
                          "thread_deleted",
                          "view_read",
                          "view_created",
                          "view_deleted",
                          "view_updated",
                          "view_duplicated",
                          "truncated",
                          "script_error",
                          "sync_created",
                          "sync_deleted",
                          "sync_completed",
                          "sync_error",
                          "section_created",
                          "section_updated",
                          "section_deleted",
                          "section_duplicated",
                          "section_restored",
                          "response_created",
                          "response_updated",
                          "response_submitted",
                          "response_deleted",
                          "response_restored",
                          "response_reset"
                        ]
                      }
                    },
                    "required": [
                      "verb",
                      "resource"
                    ]
                  },
                  "description": "triggers"
                },
                "tables": {
                  "type": "array",
                  "items": {},
                  "description": "tables"
                },
                "processes": {
                  "type": "array",
                  "items": {},
                  "description": "processes"
                }
              },
              "required": [
                "webhookUrl",
                "triggers",
                "projectId",
                "description"
              ]
            }
          }
        ]
      }
    },
    "/v1/permissions": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Get Resource Permissions",
        "description": "Retrieve permissions for a specified resource, such as a table, table view, or process.",
        "operationId": "GetResourcePermissions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "resource",
            "description": "The kind of resource for which to retrieve permissions. Valid options are 'process', 'table', or 'table_view'.",
            "required": true,
            "type": "string",
            "enum": [
              "process",
              "table",
              "table_view"
            ],
            "x-ms-summary": "Resource"
          },
          {
            "in": "query",
            "name": "resource_id",
            "description": "UUID of the resource for which to retrieve permissions.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Resource Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved permissions for the resource.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AccessPolicy"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          }
        }
      },
      "post": {
        "tags": [
          "Permissions"
        ],
        "summary": "Create Permissions for a Resource",
        "description": "Create permissions for a specific resource (such as a table, table view, or process).",
        "operationId": "CreateResourcePermissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePermissions"
            },
            "x-ms-summary": "CreatePermissions Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created permissions for the resource.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/AccessPolicy"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Resource or accessor not found."
          },
          "422": {
            "description": "Validation error for the provided data."
          }
        }
      }
    },
    "/v1/project": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a New Project",
        "description": "Create a new project with the specified name",
        "operationId": "CreateProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProject"
            },
            "x-ms-summary": "CreateProject Body"
          }
        ],
        "responses": {
          "200": {
            "description": "New project successfully created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/SimpleProject"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/process": {
      "post": {
        "tags": [
          "Process"
        ],
        "summary": "Create a New Process",
        "description": "Create a new process in a specified project",
        "operationId": "CreateProcess",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProcess"
            },
            "x-ms-summary": "CreateProcess Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Process successfully created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Process"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "change": {
                      "description": "The changes made during process creation",
                      "type": "object"
                    },
                    "event": {
                      "description": "The event type, e.g., 'process.created'",
                      "type": "string"
                    },
                    "resourceId": {
                      "format": "uuid",
                      "description": "The UUID of the newly created process",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to create a process in this project"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/table": {
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Create new document table",
        "description": "Create a new document table within a project.",
        "operationId": "CreateTable",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTable"
            },
            "x-ms-summary": "CreateTable Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created the table",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Table"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "That project does not exist."
          }
        }
      }
    },
    "/v1/user": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create New User",
        "description": "Create a new user",
        "operationId": "CreateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUser"
            },
            "x-ms-summary": "CreateUser Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a new user",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update Current User Profile",
        "description": "Update the profile of the currently logged in user",
        "operationId": "UpdateCurrentUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUser"
            },
            "x-ms-summary": "UpdateUser Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated user profile",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/v1/process/{process_id}/section/{process_section_id}/response/{process_response_id}/restore": {
      "put": {
        "tags": [
          "Process Response"
        ],
        "summary": "Restore Process Response",
        "description": "Restore a previously deleted process response.",
        "operationId": "RestoreProcessResponse",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "path",
            "name": "process_section_id",
            "description": "The UUID of the process section.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Section Id"
          },
          {
            "in": "path",
            "name": "process_response_id",
            "description": "The UUID of the process response to be restored.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Response Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully restored the process response.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/ProcessResponse"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Process, process section, or process response not found, or the response is not eligible for restoration."
          }
        }
      }
    },
    "/v1/process/{process_id}/section/{process_section_id}/response/{process_response_id}/submit": {
      "put": {
        "tags": [
          "Process Response"
        ],
        "summary": "Submit Process Response",
        "description": "Submit a process response, marking it as completed.",
        "operationId": "SubmitProcessResponse",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "path",
            "name": "process_section_id",
            "description": "The UUID of the process section.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Section Id"
          },
          {
            "in": "path",
            "name": "process_response_id",
            "description": "The UUID of the process response to be submitted.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Response Id"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SubmitProcessResponse"
            },
            "x-ms-summary": "SubmitProcessResponse Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully submitted the process response.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcessSection"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions or is not a responder."
          },
          "404": {
            "description": "Process, process section, or process response not found, already submitted, or submission is not allowed after due date."
          }
        }
      }
    },
    "/v1/process/{process_id}/section/{process_section_id}/response/{process_response_id}/reset": {
      "put": {
        "tags": [
          "Process Response"
        ],
        "summary": "Reset Process Response",
        "description": "Reset an existing process response to its initial state.",
        "operationId": "ResetProcessResponse",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "path",
            "name": "process_section_id",
            "description": "The UUID of the process section.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Section Id"
          },
          {
            "in": "path",
            "name": "process_response_id",
            "description": "The UUID of the process response to be reset.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Response Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully reset the process response.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcessSection"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Process, process section, or process response not found, or the response is not eligible for reset."
          }
        }
      }
    },
    "/v1/process/{process_id}/section/{process_section_id}/response/{process_response_id}/draft": {
      "put": {
        "tags": [
          "Process Response"
        ],
        "summary": "Submit Process Response Draft",
        "description": "Submit a draft of a process response for later completion.",
        "operationId": "SubmitProcessResponseDraft",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "path",
            "name": "process_section_id",
            "description": "The UUID of the process section.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Section Id"
          },
          {
            "in": "path",
            "name": "process_response_id",
            "description": "The UUID of the process response to submit as a draft.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Response Id"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SubmitProcessResponse"
            },
            "x-ms-summary": "SubmitProcessResponse Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully submitted the process response draft.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/ProcessSection"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions or is not a responder."
          },
          "404": {
            "description": "Process, process section, or process response not found, already submitted, or submission is not allowed after due date."
          }
        }
      }
    },
    "/v1/table/views/{view_id}/column/{column_id}/distinct": {
      "get": {
        "tags": [
          "Table View"
        ],
        "summary": "Get the unique values for a column",
        "description": "Retrieve the unique/distinct values for a specific column in a table view.",
        "operationId": "GetTableViewDistinctValues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "path",
            "name": "column_id",
            "description": "The UUID of the column for which distinct values are to be retrieved.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Column Id"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filters to apply to the data retrieval.",
            "type": "string",
            "x-ms-summary": "Filter"
          },
          {
            "in": "query",
            "name": "group_columns",
            "description": "Optional columns to group the distinct values.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-ms-summary": "Group Columns"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved distinct values for the column.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view or column not found."
          }
        }
      }
    },
    "/v1/table/views/{view_id}/chart/image": {
      "get": {
        "tags": [
          "Table View"
        ],
        "summary": "Download chart image",
        "description": "Download an image file of a chart based on data from a specific table view.",
        "operationId": "DownloadTableViewChartImage",
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view for which the chart image is generated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "query",
            "name": "chart_type",
            "description": "Type of chart for which image is being generated.",
            "type": "string",
            "x-ms-summary": "Chart Type"
          },
          {
            "in": "query",
            "name": "show_legend",
            "description": "Flag to indicate whether to include the legend in the chart image.",
            "type": "boolean",
            "x-ms-summary": "Show Legend"
          },
          {
            "in": "query",
            "name": "show_values",
            "description": "Flag to indicate whether to include values in the chart image.",
            "type": "boolean",
            "x-ms-summary": "Show Values"
          },
          {
            "in": "query",
            "name": "column_value_id",
            "description": "UUID of the column used as the value source for the chart image.",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Column Value Id"
          },
          {
            "in": "query",
            "name": "column_label_id",
            "description": "UUID of the column used as the label source for the chart image.",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Column Label Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully downloaded the chart image file.",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found."
          }
        }
      }
    },
    "/v1/table/views/{view_id}/rows/upsert": {
      "post": {
        "tags": [
          "Table View"
        ],
        "summary": "Add or update rows in a table",
        "description": "Upsert (add or update) rows in a table view based on a specified column.",
        "operationId": "UpsertTableRowsInView",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view where rows are to be upserted.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpsertTableRows"
            },
            "x-ms-summary": "UpsertTableRows Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully upserted rows in the table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "publicId": {
                        "type": "string"
                      },
                      "rowData": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "sortOrder": {
                        "type": "number"
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found."
          }
        }
      }
    },
    "/v1/process/{process_id}/section/{process_section_id}/duplicate-async": {
      "post": {
        "tags": [
          "Process Section"
        ],
        "summary": "Duplicate Process Section",
        "description": "Duplicate a specific process section asynchronously.",
        "operationId": "DuplicateProcessSectionAsync",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "path",
            "name": "process_section_id",
            "description": "The UUID of the process section to duplicate.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Section Id"
          }
        ],
        "responses": {
          "201": {
            "description": "Process section duplication started successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "Process section duplication started successfully"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to duplicate this process section"
          },
          "404": {
            "description": "Process or process section not found"
          }
        }
      }
    },
    "/v1/process/{process_id}/section/{process_section_id}/duplicate": {
      "post": {
        "tags": [
          "Process Section"
        ],
        "summary": "Duplicate Process Section",
        "description": "Duplicate a specific process section.",
        "operationId": "DuplicateProcessSection",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "path",
            "name": "process_section_id",
            "description": "The UUID of the process section to duplicate.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Section Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully duplicated the process section.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcessSection"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Process or process section not found."
          }
        }
      }
    },
    "/v1/process/{process_id}/section/{process_section_id}/response/{process_response_id}": {
      "delete": {
        "tags": [
          "Process Response"
        ],
        "summary": "Delete Process Response",
        "description": "Delete a specific process response.",
        "operationId": "DeleteProcessResponse",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "path",
            "name": "process_section_id",
            "description": "The UUID of the process section.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Section Id"
          },
          {
            "in": "path",
            "name": "process_response_id",
            "description": "The UUID of the process response to be deleted.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Response Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the process response.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcessSection"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Process, process section, or process response not found."
          }
        }
      },
      "put": {
        "tags": [
          "Process Response"
        ],
        "summary": "Update Existing Process Response",
        "description": "Update an existing response for a process section.",
        "operationId": "UpdateProcessResponse",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "path",
            "name": "process_section_id",
            "description": "The UUID of the process section.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Section Id"
          },
          {
            "in": "path",
            "name": "process_response_id",
            "description": "The UUID of the process response to be updated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Response Id"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateProcessResponse"
            },
            "x-ms-summary": "UpdateProcessResponse Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the process response.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcessResponse"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          },
          "404": {
            "description": "Process, process section, or process response not found."
          }
        }
      }
    },
    "/v1/process/{process_id}/section/{process_section_id}/response": {
      "post": {
        "tags": [
          "Process Response"
        ],
        "summary": "Create New Process Response",
        "description": "Create a new response for a process section.",
        "operationId": "CreateProcessResponse",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "path",
            "name": "process_section_id",
            "description": "The UUID of the process section.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Section Id"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CreateProcessResponse"
            },
            "x-ms-summary": "CreateProcessResponse Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created the process response.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/ProcessResponse"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Process or process section not found."
          }
        }
      }
    },
    "/v1/process/{process_id}/section/{process_section_id}/restore": {
      "put": {
        "tags": [
          "Process Section"
        ],
        "summary": "Restore Process Section",
        "description": "Restore a previously deleted process section.",
        "operationId": "RestoreProcessSection",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "path",
            "name": "process_section_id",
            "description": "The UUID of the process section to be restored.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Section Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully restored the process section.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcessSection"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Process or process section not found."
          }
        }
      }
    },
    "/v1/table/views/{view_id}/preview-row": {
      "post": {
        "tags": [
          "Table View"
        ],
        "summary": "Preview resulting row from inputs",
        "description": "Preview the resulting row from given inputs in a specific table view.",
        "operationId": "PreviewTableRowInView",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view for which the row preview is generated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PreviewTableRow"
            },
            "x-ms-summary": "PreviewTableRow Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully generated a preview of the row.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "publicId": {
                      "type": "string"
                    },
                    "rowData": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "sortOrder": {
                      "type": "number"
                    }
                  },
                  "additionalProperties": false
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found."
          }
        }
      }
    },
    "/v1/table/views/{view_id}/rows-stream": {
      "get": {
        "tags": [
          "Table View"
        ],
        "summary": "Stream all rows for the view",
        "description": "Stream the data of all rows for a specific table view.",
        "operationId": "StreamTableViewRows",
        "produces": [
          "application/x-msgppack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view for which data streaming is requested.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filters to apply to the streaming data.",
            "type": "string",
            "x-ms-summary": "Filter"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sorting parameters for the streaming data.",
            "type": "string",
            "x-ms-summary": "Sort"
          },
          {
            "in": "query",
            "name": "process_id",
            "description": "Optional UUID of a process to filter the data.",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number for pagination",
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "x-ms-summary": "Page"
          },
          {
            "in": "query",
            "name": "size",
            "description": "Number of items per page for pagination",
            "type": "integer",
            "default": 50,
            "maximum": 2500,
            "minimum": 1,
            "x-ms-summary": "Size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully initiated streaming of table view rows.",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view or process not found."
          }
        }
      }
    },
    "/v1/table/views/{view_id}/columns/{column_id}": {
      "put": {
        "tags": [
          "Table View"
        ],
        "summary": "Update column on view",
        "description": "Update a specific column in a table view.",
        "operationId": "UpdateColumnOnTableView",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view containing the column to be updated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "path",
            "name": "column_id",
            "description": "The UUID of the column in the table view to be updated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Column Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTableViewColumn"
            },
            "x-ms-summary": "UpdateTableViewColumn Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the column in the table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/TableViewColumn"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions or joined column kind cannot be updated."
          },
          "404": {
            "description": "Table view or column not found."
          }
        }
      }
    },
    "/v1/table/views/{view_id}/default": {
      "post": {
        "tags": [
          "Table View"
        ],
        "summary": "Set the view as the default view",
        "description": "Designate a specific table view as the default view for the table.",
        "operationId": "SetTableViewAsDefault",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view to be set as the default.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully set the table view as the default.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/TableView"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found."
          }
        }
      }
    },
    "/v1/table/views/{view_id}/columns": {
      "post": {
        "tags": [
          "Table View"
        ],
        "summary": "Add a column to a view",
        "description": "Add a new column to a specific table view.",
        "operationId": "AddColumnToTableView",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view to which a column is to be added.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTableViewColumn"
            },
            "x-ms-summary": "CreateTableViewColumn Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added a column to the table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/TableViewColumn"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found."
          }
        }
      }
    },
    "/v1/table/views/{view_id}/stats": {
      "get": {
        "tags": [
          "Table View"
        ],
        "summary": "Get stats on table columns",
        "description": "Retrieve statistical data for columns in a specific table view.",
        "operationId": "GetTableViewStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view for which stats are to be retrieved.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filters to apply to the statistical data retrieval.",
            "type": "string",
            "x-ms-summary": "Filter"
          },
          {
            "in": "query",
            "name": "sum, avg, max, min, count",
            "description": "Specify columns to perform sum, average, max, min, or count operations.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-ms-summary": "Sum, avg, max, min, count"
          },
          {
            "in": "query",
            "name": "process_id",
            "description": "Optional UUID of a process to filter the data.",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved statistics for table view columns.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TableColumnWithAggregation"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found or process not found."
          }
        }
      }
    },
    "/v1/table/views/{view_id}/cells": {
      "put": {
        "tags": [
          "Table View"
        ],
        "summary": "Update existing table cells",
        "description": "Update specific cells in a table view.",
        "operationId": "UpdateDocumentTableCellsInView",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view where cells are to be updated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDocumentTableCells"
            },
            "x-ms-summary": "UpdateDocumentTableCells Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated cells in the table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "publicId": {
                        "type": "string"
                      },
                      "rowData": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "sortOrder": {
                        "type": "number"
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found."
          }
        }
      }
    },
    "/v1/table/views/{view_id}/chart": {
      "get": {
        "tags": [
          "Table View"
        ],
        "summary": "Get chart data for the view",
        "description": "Retrieve data for generating a chart based on a specific table view.",
        "operationId": "GetTableViewChartData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view for which chart data is requested.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "query",
            "name": "chart_type",
            "description": "Type of chart for which data is being fetched.",
            "type": "string",
            "x-ms-summary": "Chart Type"
          },
          {
            "in": "query",
            "name": "show_legend",
            "description": "Flag to indicate whether to show the legend in the chart.",
            "type": "boolean",
            "x-ms-summary": "Show Legend"
          },
          {
            "in": "query",
            "name": "show_values",
            "description": "Flag to indicate whether to show values in the chart.",
            "type": "boolean",
            "x-ms-summary": "Show Values"
          },
          {
            "in": "query",
            "name": "column_value_id",
            "description": "UUID of the column to be used as the value source for the chart.",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Column Value Id"
          },
          {
            "in": "query",
            "name": "column_label_id",
            "description": "UUID of the column to be used as the label source for the chart.",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Column Label Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved chart data for the table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found."
          }
        }
      }
    },
    "/v1/table/views/{view_id}/rows": {
      "get": {
        "tags": [
          "Table View"
        ],
        "summary": "Get actual table view data",
        "description": "Retrieve the actual data for a specific table view.",
        "operationId": "GetTableViewRows",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view for which data is to be retrieved.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filters to apply to the data retrieval.",
            "type": "string",
            "x-ms-summary": "Filter"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sorting parameters for the data retrieval.",
            "type": "string",
            "x-ms-summary": "Sort"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number for pagination.",
            "type": "integer",
            "x-ms-summary": "Page"
          },
          {
            "in": "query",
            "name": "size",
            "description": "Number of items per page for pagination.",
            "type": "integer",
            "x-ms-summary": "Size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved table view data.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "publicId": {
                        "type": "string"
                      },
                      "rowData": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "sortOrder": {
                        "type": "number"
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "nextPageToken": {
                      "type": "string"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "total": {
                      "type": "integer"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Table View"
        ],
        "summary": "Delete specific rows",
        "description": "Delete specific rows from a table view based on row IDs.",
        "operationId": "DeleteTableRowsInView",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view from which rows are to be deleted.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted specified rows from the table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions or row deletion not allowed."
          },
          "404": {
            "description": "Table view not found."
          }
        }
      },
      "post": {
        "tags": [
          "Table View"
        ],
        "summary": "Add rows to end of table",
        "description": "Insert new rows at the end of the specified table view.",
        "operationId": "InsertTableRowsInView",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view where rows are to be added.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTableRows"
            },
            "x-ms-summary": "CreateTableRows Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added rows to the table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "publicId": {
                        "type": "string"
                      },
                      "rowData": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "sortOrder": {
                        "type": "number"
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found."
          }
        }
      },
      "put": {
        "tags": [
          "Table View"
        ],
        "summary": "Update existing rows",
        "description": "Update existing rows in a specified table view.",
        "operationId": "UpdateTableRowsInView",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view where rows are to be updated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTableRows"
            },
            "x-ms-summary": "UpdateTableRows Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated rows in the table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "publicId": {
                        "type": "string"
                      },
                      "rowData": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "sortOrder": {
                        "type": "number"
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found."
          }
        }
      }
    },
    "/v1/table/views/{view_id}/csv": {
      "get": {
        "tags": [
          "Table View"
        ],
        "summary": "Download view data as a csv file",
        "description": "Download the data of a specific table view in CSV format.",
        "operationId": "DownloadTableViewCSV",
        "produces": [
          "text/csv"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view to be downloaded as CSV.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filters to apply to the CSV data.",
            "type": "string",
            "x-ms-summary": "Filter"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sorting parameters for the CSV data.",
            "type": "string",
            "x-ms-summary": "Sort"
          },
          {
            "in": "query",
            "name": "process_id",
            "description": "Optional UUID of a process to filter the data.",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully downloaded the table view data as a CSV file.",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found or process not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/column/{column_id}/distinct": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Get Unique Values for a Column",
        "description": "Retrieve a list of distinct (unique) values for a specified column in a table.",
        "operationId": "GetDistinctValuesForColumn",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table containing the column",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "path",
            "name": "column_id",
            "description": "UUID of the column for which to retrieve distinct values",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Column Id"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criteria for the distinct values",
            "type": "string",
            "x-ms-summary": "Filter"
          },
          {
            "in": "query",
            "name": "group_columns",
            "description": "Specify columns for grouping values",
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-ms-summary": "Group Columns"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of unique values for the specified column.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table or column not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/column/{column_id}/restore": {
      "put": {
        "tags": [
          "Table"
        ],
        "summary": "Restore Table Column",
        "description": "Restore a previously deleted column in a table.",
        "operationId": "RestoreTableColumn",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table containing the column to be restored",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "path",
            "name": "column_id",
            "description": "UUID of the column to be restored",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Column Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully restored the column",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/TableColumn"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/column/{column_id}/views": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Check Views Column Is Used In",
        "description": "Retrieve all views in which a specific table column is used.",
        "operationId": "CheckColumnInViews",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table containing the column",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "path",
            "name": "column_id",
            "description": "UUID of the column to check in views",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Column Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of views using the specified column",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TableView"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table column not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/views/duplicate-default": {
      "post": {
        "tags": [
          "Table View"
        ],
        "summary": "Duplicate the default view for a table",
        "description": "Create a duplicate of the default view for a specific table.",
        "operationId": "DuplicateDefaultTableView",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "The UUID of the table for which the default view is to be duplicated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDuplicateDefaultTableView"
            },
            "x-ms-summary": "CreateDuplicateDefaultTableView Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully duplicated the default table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/TableView"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table or view not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/views/{view_id}/duplicate": {
      "post": {
        "tags": [
          "Table View"
        ],
        "summary": "Duplicate a view for a table",
        "description": "Create a duplicate of an existing view for a specific table.",
        "operationId": "DuplicateTableView",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "The UUID of the table for which the view is to be duplicated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the view to be duplicated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully duplicated the table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/TableView"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table or view not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/row/upsert": {
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Upsert Row in Table",
        "description": "Add or update a row in the specified table based on a unique column value.",
        "operationId": "UpsertTableRows",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table to upsert the row",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpsertTableRows"
            },
            "x-ms-summary": "UpsertTableRows Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully upserted rows in the table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "publicId": {
                        "type": "string"
                      },
                      "rowData": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "sortOrder": {
                        "type": "number"
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/user/projects/{project_id}/favourite": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Toggle Favourite Status of a Project",
        "description": "Change whether the project is a favourite for the currently logged in user",
        "operationId": "ChangeUserFavourite",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "Public ID of the project to toggle favourite status",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully toggled the favourite status of the project",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "isDeleted": {
                        "description": "Indicates if the project is deleted",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Name of the project",
                        "type": "string"
                      },
                      "projectRole": {
                        "description": "User's role in the project",
                        "type": "string"
                      },
                      "publicId": {
                        "format": "uuid",
                        "description": "Public ID of the project",
                        "type": "string"
                      }
                    }
                  }
                },
                "metadata": {
                  "description": "Additional metadata",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "User or project not found"
          }
        }
      }
    },
    "/v1/user/projects/{project_id}/pin": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Toggle Pin Status of a Project",
        "description": "Change whether the project is pinned for the currently logged in user",
        "operationId": "ChangeUserPin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "Public ID of the project to toggle pin status",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully toggled the pin status of the project",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "contributors": {
                        "description": "Number of contributors to the project",
                        "type": "integer"
                      },
                      "name": {
                        "description": "Name of the project",
                        "type": "string"
                      },
                      "primaryColour": {
                        "description": "Primary colour of the project",
                        "type": "string"
                      },
                      "publicId": {
                        "format": "uuid",
                        "description": "Public ID of the project",
                        "type": "string"
                      },
                      "views": {
                        "description": "Number of views of the project",
                        "type": "integer"
                      }
                    }
                  }
                },
                "metadata": {
                  "description": "Additional metadata",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "User or project not found"
          }
        }
      }
    },
    "/v1/comment_thread/{comment_thread_id}/comment/{comment_id}": {
      "delete": {
        "tags": [
          "Comment"
        ],
        "summary": "Delete Comment",
        "description": "Delete a specific comment within a comment thread",
        "operationId": "DeleteComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "comment_thread_id",
            "description": "UUID of the comment thread containing the comment",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Comment Thread Id"
          },
          {
            "in": "path",
            "name": "comment_id",
            "description": "UUID of the comment to be deleted",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Comment Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the comment",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Comment"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "change": {
                      "description": "Changes made to the comment",
                      "type": "object"
                    },
                    "event": {
                      "description": "Event type for the operation",
                      "type": "string"
                    },
                    "resourceId": {
                      "description": "UUID of the deleted comment",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Comment"
        ],
        "summary": "Update Comment",
        "description": "Update a specific comment within a comment thread",
        "operationId": "UpdateComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "comment_thread_id",
            "description": "UUID of the comment thread containing the comment",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Comment Thread Id"
          },
          {
            "in": "path",
            "name": "comment_id",
            "description": "UUID of the comment to be updated",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Comment Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateComment"
            },
            "x-ms-summary": "UpdateComment Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the comment",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Comment"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "change": {
                      "description": "Changes made to the comment",
                      "type": "object"
                    },
                    "event": {
                      "description": "Event type for the operation",
                      "type": "string"
                    },
                    "resourceId": {
                      "description": "UUID of the updated comment",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/comment_thread/{comment_thread_id}/resolve": {
      "put": {
        "tags": [
          "Comment"
        ],
        "summary": "Resolve Comment Thread",
        "description": "Resolve a comment thread",
        "operationId": "ResolveCommentThread",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "comment_thread_id",
            "description": "UUID of the comment thread to resolve",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Comment Thread Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully resolved the comment thread",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/CommentThread"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "change": {
                      "description": "Changes made to the comment thread",
                      "type": "object"
                    },
                    "event": {
                      "description": "Event type for the operation",
                      "type": "string"
                    },
                    "resourceId": {
                      "description": "UUID of the resolved comment thread",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/comment_thread/{comment_thread_id}/comment": {
      "post": {
        "tags": [
          "Comment"
        ],
        "summary": "Create New Comment",
        "description": "Create a new comment within a specific comment thread",
        "operationId": "CreateComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "comment_thread_id",
            "description": "UUID of the comment thread to which the comment is being added",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Comment Thread Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateComment"
            },
            "x-ms-summary": "CreateComment Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a new comment",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Comment"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "change": {
                      "description": "Changes made in this operation",
                      "type": "object"
                    },
                    "event": {
                      "description": "Event type for the operation",
                      "type": "string"
                    },
                    "resourceId": {
                      "description": "UUID of the newly created comment",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/comment_thread/{comment_thread_id}/reopen": {
      "put": {
        "tags": [
          "Comment"
        ],
        "summary": "Reopen Comment Thread",
        "description": "Reopen a previously resolved comment thread",
        "operationId": "ReopenCommentThread",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "comment_thread_id",
            "description": "UUID of the comment thread to reopen",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Comment Thread Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully reopened the comment thread",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/CommentThread"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "change": {
                      "description": "Changes made to the comment thread",
                      "type": "object"
                    },
                    "event": {
                      "description": "Event type for the operation",
                      "type": "string"
                    },
                    "resourceId": {
                      "description": "UUID of the reopened comment thread",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/notifications/events/{resource_id}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get all events for a resource",
        "description": "Retrieve all events associated with a specific resource, filtered by various criteria.",
        "operationId": "GetEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "resource_id",
            "description": "The UUID of the resource for which events are to be retrieved.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Resource Id"
          },
          {
            "in": "query",
            "name": "type",
            "description": "The type of the resource (e.g., user, process, table, project).",
            "required": true,
            "type": "string",
            "enum": [
              "process",
              "process_section",
              "process_response",
              "table",
              "project",
              "user"
            ],
            "x-ms-summary": "Type"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number for pagination.",
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "x-ms-summary": "Page"
          },
          {
            "in": "query",
            "name": "user",
            "description": "Optional UUID of a user to filter the events.",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "User"
          },
          {
            "in": "query",
            "name": "verb",
            "description": "Optional list of verbs to filter the events.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-ms-summary": "Verb"
          },
          {
            "in": "query",
            "name": "start_date",
            "description": "Optional start date to filter the events.",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Start Date"
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Optional end date to filter the events.",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "End Date"
          },
          {
            "in": "query",
            "name": "search",
            "description": "Optional search term to filter the events.",
            "type": "string",
            "x-ms-summary": "Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the events.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Event"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions or is not a super admin."
          },
          "404": {
            "description": "Resource or user not found."
          }
        }
      }
    },
    "/v1/permissions/request/{project_id}/{type}/{id}": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Request Permissions for a Resource",
        "description": "Request permissions for a specific resource (such as a table, table view, or process).",
        "operationId": "RequestResourcePermissions",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "UUID of the project that the resource belongs to.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "path",
            "name": "type",
            "description": "The kind of resource for which to request permissions. Valid options are 'project', 'process', 'table', or 'view'.",
            "required": true,
            "type": "string",
            "enum": [
              "project",
              "process",
              "table",
              "view"
            ],
            "x-ms-summary": "Type"
          },
          {
            "in": "path",
            "name": "id",
            "description": "UUID of the resource for which to request permissions.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully requested permissions for the resource."
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Resource not found."
          }
        }
      }
    },
    "/v1/process/{process_id}/update-multiple-section": {
      "put": {
        "tags": [
          "Process Section"
        ],
        "summary": "Update Multiple Process Sections",
        "description": "Update multiple existing process sections.",
        "operationId": "UpdateMultipleProcessSections",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateMultipleProcessSection"
            },
            "x-ms-summary": "UpdateMultipleProcessSection Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated multiple process sections.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MortaProcessSection"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          },
          "404": {
            "description": "Process not found."
          }
        }
      }
    },
    "/v1/project/{project_id}/add_heading_styling": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create New Project Heading Styling",
        "description": "Create new heading styling for a specific project",
        "operationId": "CreateProjectHeadingStyling",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project for which to create the heading styling",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created the project heading styling",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/SimpleProject"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to create heading styling for this project"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/sent-notifications": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Sent Notifications for a Project",
        "description": "Retrieve all sent notifications for a specified project",
        "operationId": "GetProjectSentNotifications",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project for which sent notifications are to be retrieved",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of the notification executions",
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "x-ms-summary": "Page"
          },
          {
            "in": "query",
            "name": "size",
            "description": "Number of notification executions per page",
            "type": "integer",
            "default": 50,
            "maximum": 50,
            "minimum": 1,
            "x-ms-summary": "Size"
          },
          {
            "in": "query",
            "name": "notification_id",
            "description": "UUID of a specific notification to filter the executions",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Notification Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved sent notifications",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NotificationExecution"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to access this project's notifications"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/process/{process_id}/changesectionorder": {
      "put": {
        "tags": [
          "Process Section"
        ],
        "summary": "Update Process Section Order",
        "description": "Update the order of process sections within a process.",
        "operationId": "UpdateProcessSectionOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateProcessSectionOrder"
            },
            "x-ms-summary": "UpdateProcessSectionOrder Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the process section order.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcess"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Process not found."
          }
        }
      }
    },
    "/v1/project/{project_id}/deletedprocesses": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieve Deleted Processes within a Project",
        "description": "Get all deleted processes associated with a specific project, identified by its UUID",
        "operationId": "GetProjectDeletedProcesses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "UUID of the project for which deleted processes are to be retrieved",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved deleted processes within the project",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SimpleProcess"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "You do not have the appropriate permissions"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/delete_top_style": {
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete Top Project Heading Styling",
        "description": "Delete the top heading styling for a specific project",
        "operationId": "DeleteTopProjectHeadingStyling",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project for which to delete the top heading styling",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the top project heading styling",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/SimpleProject"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to delete heading styling for this project"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/process/{process_id}/setallresponders": {
      "put": {
        "tags": [
          "Process"
        ],
        "summary": "Update Process Responders",
        "description": "Update the list of responders for a given process identified by its UUID",
        "operationId": "UpdateProcessResponders",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process whose responders are to be updated",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProcessResponders"
            },
            "x-ms-summary": "UpdateProcessResponders Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Process responders successfully updated",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcess"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "User lacks ownership or responders lack necessary permissions"
          },
          "404": {
            "description": "Process or responding user not found"
          }
        }
      }
    },
    "/v1/process/{process_id}/multiple-section": {
      "post": {
        "tags": [
          "Process"
        ],
        "summary": "Create Multiple New Process Sections",
        "description": "Create multiple new sections within a specified process, each with an optional parent section",
        "operationId": "CreateMultipleProcessSections",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process where new sections will be created",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMultipleProcessSection"
            },
            "x-ms-summary": "CreateMultipleProcessSection Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created multiple new process sections",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "OK"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "resourceIds": {
                      "description": "List of UUIDs for the newly created process sections",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Process or a parent process section not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/invite-multiple": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Invite Multiple Users to a Project",
        "description": "Invite multiple users to join a project, by email. If users already exist, they are added directly, otherwise, an invite is sent. Requires owner or admin permissions.",
        "operationId": "InviteMultipleUsersToProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project to which users are being invited",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateInvites"
            },
            "x-ms-summary": "CreateInvites Body"
          }
        ],
        "responses": {
          "201": {
            "description": "Users invited successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "Users added successfully"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Error in sending invite email or user already invited"
          },
          "403": {
            "description": "Not authorized to invite users to this project"
          },
          "404": {
            "description": "Project not found"
          },
          "405": {
            "description": "Project is not active"
          }
        }
      }
    },
    "/v1/process/{process_id}/deletedsections": {
      "get": {
        "tags": [
          "Process"
        ],
        "summary": "Get Deleted Process Sections",
        "description": "Retrieve all deleted sections of a specific process, with an optional filter for a specific process section",
        "operationId": "GetDeletedProcessSections",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process to retrieve deleted sections from",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "query",
            "name": "process_section_id",
            "description": "Optional UUID of a specific process section to filter deleted sections",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Section Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved deleted sections",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MortaProcessSection"
              }
            }
          },
          "404": {
            "description": "Process or process section not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/changeuserrole/{firebase_id}": {
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Change a User's Role in a Project",
        "description": "Change the role of a user in a specific project, identified by the project's UUID and user's Firebase ID",
        "operationId": "ChangeUserRoleOnProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "UUID of the project",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "path",
            "name": "firebase_id",
            "description": "Firebase ID of the user whose role is to be changed",
            "required": true,
            "type": "string",
            "x-ms-summary": "Firebase Id"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ChangeUserRole"
            },
            "x-ms-summary": "ChangeUserRole Body"
          }
        ],
        "responses": {
          "200": {
            "description": "User's role successfully changed in the project",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/SimpleProject"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to change the user's role"
          },
          "404": {
            "description": "Project or user not found"
          },
          "405": {
            "description": "Operation not allowed on a non-active project"
          }
        }
      }
    },
    "/v1/project/{project_id}/invitedmembers": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Invited Project Members",
        "description": "Retrieve all invited members for a specified project",
        "operationId": "GetInvitedProjectMembers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project for which invited members are to be retrieved",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved invited project members",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/InvitedMember"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to access this project's invited members"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/deletedtables": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Deleted Tables in a Project",
        "description": "Retrieve all deleted tables from a specific project, identified by its UUID. Only accessible by project owners.",
        "operationId": "GetProjectDeletedTables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project for which to retrieve deleted tables",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved deleted tables for the project",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Table"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to access this project's deleted tables"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/notifications": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Notifications for a Project",
        "description": "Retrieve all notifications associated with a specific project. This endpoint is accessible only to users with owner-level permissions for the project.",
        "operationId": "GetProjectNotifications",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project for which notifications are to be retrieved",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of notifications for the project",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Notification"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to access notifications for this project"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/removeuser/{firebase_id}": {
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete a User from a Project",
        "description": "Remove a user from a specific project, identified by the project's UUID and user's Firebase ID",
        "operationId": "RemoveUserFromProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "UUID of the project",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "path",
            "name": "firebase_id",
            "description": "Firebase ID of the user to be removed",
            "required": true,
            "type": "string",
            "x-ms-summary": "Firebase Id"
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully removed from the project",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/SimpleProject"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to remove the user"
          },
          "404": {
            "description": "Project or user not found"
          },
          "405": {
            "description": "Operation not allowed on a non-active project"
          }
        }
      }
    },
    "/v1/project/{project_id}/resources": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Get Project Resources",
        "description": "Retrieve resources associated with a specific project identified by its UUID",
        "operationId": "GetProjectResources",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "UUID of the project whose resources are to be retrieved",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetResources"
            },
            "x-ms-summary": "GetResources Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved project resources",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name of the resource",
                        "type": "string"
                      },
                      "process": {
                        "$ref": "#/definitions/PermissionedProcess"
                      },
                      "table": {
                        "$ref": "#/definitions/SimpleDocumentTable"
                      },
                      "type": {
                        "description": "Type of the resource (process or table)",
                        "type": "string"
                      }
                    }
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "You do not have the appropriate permissions"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/processes": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieve Processes within a Project",
        "description": "Get all processes associated with a specific project, identified by its UUID",
        "operationId": "GetProjectProcesses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "UUID of the project for which processes are to be retrieved",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved processes within the project",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SimpleProcess"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "You do not have the appropriate permissions"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/variables": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Project Variables",
        "description": "Retrieve all variables associated with a specified project",
        "operationId": "GetProjectVariables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project for which variables are to be retrieved",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved variables for the project",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cells": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "column": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "publicId": {
                                  "format": "uuid",
                                  "type": "string"
                                }
                              }
                            },
                            "id": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      },
                      "publicId": {
                        "format": "uuid",
                        "type": "string"
                      }
                    }
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to access this project's variables"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/duplicate": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Duplicate a Project",
        "description": "Create a duplicate of an existing project",
        "operationId": "DuplicateProject",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project to be duplicated",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DuplicateProject"
            },
            "x-ms-summary": "DuplicateProject Body"
          }
        ],
        "responses": {
          "201": {
            "description": "Project duplication started successfully"
          },
          "403": {
            "description": "Not authorized to duplicate this project"
          },
          "404": {
            "description": "Project not found or project has been deleted"
          }
        }
      }
    },
    "/v1/process/{process_id}/duplicate": {
      "post": {
        "tags": [
          "Process"
        ],
        "summary": "Duplicate a Process",
        "description": "Duplicate an existing process, potentially in a different project",
        "operationId": "DuplicateProcessAsync",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process to be duplicated",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DuplicateProcessAsync"
            },
            "x-ms-summary": "DuplicateProcessAsync Body"
          }
        ],
        "responses": {
          "201": {
            "description": "Process duplication started successfully"
          },
          "403": {
            "description": "Not authorized to duplicate this process"
          },
          "404": {
            "description": "Process not found or has been deleted"
          }
        }
      }
    },
    "/v1/process/{process_id}/sections": {
      "post": {
        "tags": [
          "Process"
        ],
        "summary": "Create New Process Sections",
        "description": "Create multiple new sections within a process",
        "operationId": "CreateProcessSections",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process where new sections will be created",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProcessSections"
            },
            "x-ms-summary": "CreateProcessSections Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created new process sections",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MortaProcessSection"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Process not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/secrets/{secret_id}": {
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete a Project Secret",
        "description": "Delete a specific secret from a project",
        "operationId": "DeleteProjectSecret",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project from which the secret will be deleted",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "path",
            "name": "secret_id",
            "description": "The UUID of the secret to be deleted",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Secret Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the project secret",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "Secret deleted"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to delete the secret in this project"
          },
          "404": {
            "description": "Project or secret not found"
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update a Project Secret",
        "description": "Update a specific secret in a project",
        "operationId": "UpdateProjectSecret",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project where the secret is located",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "path",
            "name": "secret_id",
            "description": "The UUID of the secret to be updated",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Secret Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProjectSecret"
            },
            "x-ms-summary": "UpdateProjectSecret Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the project secret",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/ProjectSecret"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update the secret in this project"
          },
          "404": {
            "description": "Project or secret not found"
          }
        }
      }
    },
    "/v1/process/{process_id}/section/{process_section_id}": {
      "get": {
        "tags": [
          "Process Section"
        ],
        "summary": "Get Process Section",
        "description": "Retrieve a specific process section.",
        "operationId": "GetProcessSection",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "path",
            "name": "process_section_id",
            "description": "The UUID of the process section.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Section Id"
          },
          {
            "in": "query",
            "name": "main_parent_section",
            "description": "Flag to retrieve the main parent section of the process section",
            "type": "boolean",
            "x-ms-summary": "Main Parent Section"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the process section.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcessSection"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Process or process section not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Process Section"
        ],
        "summary": "Delete Process Section",
        "description": "Delete a specific process section.",
        "operationId": "DeleteProcessSection",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "path",
            "name": "process_section_id",
            "description": "The UUID of the process section to be deleted.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Section Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the process section.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcessSection"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Process or process section not found."
          }
        }
      },
      "put": {
        "tags": [
          "Process Section"
        ],
        "summary": "Update an Existing Process Section",
        "description": "Update an existing process section's details by process section ID",
        "operationId": "UpdateProcessSection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "path",
            "name": "process_section_id",
            "description": "The UUID of the process section to update.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Section Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProcessSection"
            },
            "x-ms-summary": "UpdateProcessSection Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Process section successfully updated",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcessSection"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update this process section"
          },
          "404": {
            "description": "Process or process section not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/restore": {
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Restore a Project",
        "description": "Restore a specific project, identified by its UUID, that has been previously deleted",
        "operationId": "RestoreProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "UUID of the project to be restored",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Project successfully restored",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "Project restored"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "You do not have the appropriate permissions"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/secrets": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Project Secrets",
        "description": "Retrieve all secrets for a specified project",
        "operationId": "GetProjectSecrets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project for which secrets are to be retrieved",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved project secrets",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ProjectSecret"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to access this project's secrets"
          },
          "404": {
            "description": "Project not found"
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a New Project Secret",
        "description": "Create a new secret for a specified project",
        "operationId": "CreateProjectSecret",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project where the secret will be created",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProjectSecret"
            },
            "x-ms-summary": "CreateProjectSecret Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created the project secret",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/ProjectSecret"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Secret with the provided name already exists"
          },
          "403": {
            "description": "Not authorized to create a secret in this project"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/members": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Project Members",
        "description": "Retrieve all members associated with a specified project",
        "operationId": "GetProjectMembers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project for which members are to be retrieved",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved project members",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ProjectListWithUserTags"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to access this project's members"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/process/{process_id}/restore": {
      "put": {
        "tags": [
          "Process"
        ],
        "summary": "Restore Process",
        "description": "Restore a deleted process identified by its UUID",
        "operationId": "RestoreProcess",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process to restore",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Process successfully restored",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcess"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to restore this process"
          },
          "404": {
            "description": "Process not found or not deleted"
          }
        }
      }
    },
    "/v1/process/{process_id}/section": {
      "post": {
        "tags": [
          "Process"
        ],
        "summary": "Create a New Process Section",
        "description": "Create a new section within a specified process, with an option to set a parent section",
        "operationId": "CreateProcessSection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process to create a new section in",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProcessSection"
            },
            "x-ms-summary": "CreateProcessSection Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created new process section",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcessSection"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Process or process section not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/invite/{invite_id}": {
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete a Project Invite",
        "description": "Delete an invite to a project",
        "operationId": "DeleteProjectInvite",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project from which the invite is to be deleted",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "path",
            "name": "invite_id",
            "description": "The UUID of the invite to be deleted",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Invite Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the invite",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to delete this invite"
          },
          "404": {
            "description": "Project or invite not found"
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Resend an Invite to a User for a Project",
        "description": "Resend an invitation to a user for a project. This is applicable for both new users and existing users who have previously been invited. Requires owner or admin permissions.",
        "operationId": "ResendInviteToUserForProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project for which the invite is being resent",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "path",
            "name": "invite_id",
            "description": "The UUID of the invite to be resent",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Invite Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Invite successfully resent",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "Invite successfully resent!"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Error in sending invite email"
          },
          "404": {
            "description": "Project or invite not found"
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update a Project Invite",
        "description": "Update an existing invite in a project",
        "operationId": "UpdateProjectInvite",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project in which the invite is located",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "path",
            "name": "invite_id",
            "description": "The UUID of the invite to be updated",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Invite Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateInvite"
            },
            "x-ms-summary": "UpdateInvite Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the invite",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/InvitedMember"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update this invite"
          },
          "404": {
            "description": "Project or invite not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/search": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Search within a Project",
        "description": "Perform a search operation within a specific project, identified by its UUID",
        "operationId": "SearchProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "UUID of the project where the search is to be performed",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "query",
            "name": "search",
            "description": "Search query string",
            "required": true,
            "type": "string",
            "x-ms-summary": "Search"
          },
          {
            "in": "query",
            "name": "process_public_id",
            "description": "Optional UUID of a process to restrict the search within a specific process",
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Public Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully executed search within the project",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Answer"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "You do not have the appropriate permissions"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/tables": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Project Tables",
        "description": "Retrieve tables associated with a specific project, identified by its UUID",
        "operationId": "GetProjectTables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project for which to retrieve tables",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved tables for the project",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Table"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to access this project"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/invite": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Invite a User to a Project",
        "description": "Invite a single user to join a project by email. If the user already exists, they are added directly; otherwise, an invite is sent. Requires owner or admin permissions.",
        "operationId": "InviteUserToProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project to which the user is being invited",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateInvite"
            },
            "x-ms-summary": "CreateInvite Body"
          }
        ],
        "responses": {
          "201": {
            "description": "User invited or added successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "User added successfully"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Error in sending invite email or user already invited"
          },
          "403": {
            "description": "Not authorized to invite users to this project"
          },
          "404": {
            "description": "Project not found"
          },
          "405": {
            "description": "Project is not active"
          }
        }
      }
    },
    "/v1/process/{process_id}/export": {
      "get": {
        "tags": [
          "Process"
        ],
        "summary": "Export Process",
        "description": "Export a specific process by its UUID into different formats (PDF or DOCX)",
        "operationId": "ExportProcess",
        "produces": [
          "application/pdf",
          "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process to export",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "query",
            "name": "export_format",
            "description": "The format of the export (PDF or DOCX)",
            "type": "string",
            "enum": [
              "pdf",
              "docx"
            ],
            "x-ms-summary": "Export Format"
          },
          {
            "in": "query",
            "name": "table_links",
            "description": "Include table links in the export",
            "type": "boolean",
            "x-ms-summary": "Table Links"
          },
          {
            "in": "query",
            "name": "description",
            "description": "Include process description in the export",
            "type": "boolean",
            "x-ms-summary": "Description"
          },
          {
            "in": "query",
            "name": "page_format",
            "description": "Page format for the export",
            "type": "string",
            "enum": [
              "A1",
              "A2",
              "A3",
              "A4",
              "letter",
              "legal"
            ],
            "x-ms-summary": "Page Format"
          },
          {
            "in": "query",
            "name": "page_orientation",
            "description": "Page orientation for the export",
            "type": "string",
            "enum": [
              "portrait",
              "landscape"
            ],
            "x-ms-summary": "Page Orientation"
          },
          {
            "in": "query",
            "name": "font_type",
            "description": "Font type for the export",
            "type": "string",
            "enum": [
              "arial",
              "verdana"
            ],
            "x-ms-summary": "Font Type"
          },
          {
            "in": "query",
            "name": "font_size",
            "description": "Font size for the export",
            "type": "integer",
            "x-ms-summary": "Font Size"
          }
        ],
        "responses": {
          "200": {
            "description": "Exported process successfully",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "400": {
            "description": "Error during export"
          },
          "404": {
            "description": "Process not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/style/{style_id}": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Update Project Heading Styling",
        "description": "Update heading styling for a specific project",
        "operationId": "UpdateProjectHeadingStyling",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project for which to update the heading styling",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "path",
            "name": "style_id",
            "description": "The UUID of the style to be updated",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Style Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateStyling"
            },
            "x-ms-summary": "UpdateStyling Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the project heading styling",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/SimpleProject"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update heading styling for this project"
          },
          "404": {
            "description": "Project or style not found"
          }
        }
      }
    },
    "/v1/project/{project_id}/tags": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Project Tags",
        "description": "Retrieve all tags associated with a specified project",
        "operationId": "GetProjectTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project for which tags are to be retrieved",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved tags for the project",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cells": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "column": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "publicId": {
                                  "format": "uuid",
                                  "type": "string"
                                }
                              }
                            },
                            "id": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      },
                      "publicId": {
                        "format": "uuid",
                        "type": "string"
                      }
                    }
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to access this project's tags"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    "/v1/table/views/{view_id}": {
      "get": {
        "tags": [
          "Table View"
        ],
        "summary": "Get a single view for a table",
        "description": "Retrieve a specific view by its ID for a table.",
        "operationId": "GetTableView",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view to be retrieved.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "query",
            "name": "ignore_cached_options",
            "description": "Flag to indicate whether to ignore cached options in the response.",
            "type": "boolean",
            "x-ms-summary": "Ignore Cached Options"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the specified table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/TableViewWithTable"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Table View"
        ],
        "summary": "Delete a view for a table",
        "description": "Delete a specific view of a table.",
        "operationId": "DeleteTableView",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view to be deleted.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete the default view."
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found."
          }
        }
      },
      "put": {
        "tags": [
          "Table View"
        ],
        "summary": "Update a view for a table",
        "description": "Update an existing view for a specific table.",
        "operationId": "UpdateTableView",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "view_id",
            "description": "The UUID of the table view to be updated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "View Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTableView"
            },
            "x-ms-summary": "UpdateTableView Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/TableView"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table view not found or restricted name for a table view."
          }
        }
      }
    },
    "/v1/table/{table_id}/rows-stream": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Stream all rows for the table",
        "description": "Stream the data of all rows for a specific table.",
        "operationId": "StreamTableRows",
        "produces": [
          "application/x-msgppack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table to stream rows from.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filters to apply to the streaming data.",
            "type": "string",
            "x-ms-summary": "Filter"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sorting parameters for the streaming data.",
            "type": "string",
            "x-ms-summary": "Sort"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number for pagination",
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "x-ms-summary": "Page"
          },
          {
            "in": "query",
            "name": "size",
            "description": "Number of items per page for pagination",
            "type": "integer",
            "default": 50,
            "maximum": 2500,
            "minimum": 1,
            "x-ms-summary": "Size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully initiated streaming of table rows.",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table or process not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/duplicate": {
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Duplicate a table",
        "description": "Create a duplicate of an existing table along with its data, settings, and optionally linked tables.",
        "operationId": "DuplicateTable",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table to be duplicated",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DuplicateTableQueryParams"
            },
            "x-ms-summary": "DuplicateTableQueryParams Body"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully started the table duplication process",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "Table duplication started successfully"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/truncate": {
      "delete": {
        "tags": [
          "Table"
        ],
        "summary": "Delete All Rows from Table",
        "description": "Deletes all rows from the specified table.",
        "operationId": "TruncateTable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table from which all rows are to be deleted.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted all rows from the table.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "All table rows deleted"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/restore": {
      "put": {
        "tags": [
          "Table"
        ],
        "summary": "Restore a deleted table",
        "description": "Restore a previously deleted table using its UUID.",
        "operationId": "RestoreTable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table to be restored",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully restored the table",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Table"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/columns": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Get Table Columns",
        "description": "Retrieve all active columns of a specific table.",
        "operationId": "GetTableColumns",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table whose columns are to be retrieved",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the columns of the table",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TableColumn"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/indexes": {
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Create Index on Table Column",
        "description": "Create an index on one or more columns of a table to improve query performance.",
        "operationId": "CreateTableIndexes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table for which indexes are to be created.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTableIndexes"
            },
            "x-ms-summary": "CreateTableIndexes Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created indexes on the specified columns.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TableColumn"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table or column not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/column/{column_id}": {
      "delete": {
        "tags": [
          "Table"
        ],
        "summary": "Delete Table Column",
        "description": "Delete a specific column from a table.",
        "operationId": "DeleteTableColumn",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table containing the column",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "path",
            "name": "column_id",
            "description": "UUID of the column to delete",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Column Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the table column",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "Table column deleted"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table column not found."
          }
        }
      },
      "put": {
        "tags": [
          "Table"
        ],
        "summary": "Update Table Column",
        "description": "Update the properties of a specific column in a table.",
        "operationId": "UpdateTableColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table containing the column",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "path",
            "name": "column_id",
            "description": "UUID of the column to update",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Column Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTableColumn"
            },
            "x-ms-summary": "UpdateTableColumn Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the table column",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/TableColumn"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table column not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/column": {
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Create Table Column",
        "description": "Add a new column to an existing table.",
        "operationId": "CreateTableColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table to which the column will be added",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTableColumn"
            },
            "x-ms-summary": "CreateTableColumn Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created the new column",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/TableColumn"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/stats": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Get Table Column Statistics",
        "description": "Retrieve statistics for table columns based on specified parameters.",
        "operationId": "GetTableColumnStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table for which statistics are being retrieved",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "query",
            "name": "aggregation",
            "description": "Aggregation functions to apply on columns",
            "type": "string",
            "x-ms-summary": "Aggregation"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criteria for the columns",
            "type": "string",
            "x-ms-summary": "Filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the table column statistics.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TableColumnWithAggregation"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/cells": {
      "put": {
        "tags": [
          "Table"
        ],
        "summary": "Update Table Cells",
        "description": "Update specific cells in a table.",
        "operationId": "UpdateTableCells",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table containing the cells to be updated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDocumentTableCells"
            },
            "x-ms-summary": "UpdateDocumentTableCells Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the specified cells in the table.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/joins": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Get All Table Joins",
        "description": "Retrieve all joins associated with a table.",
        "operationId": "GetTableJoins",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table for which joins are to be retrieved.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all table joins.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TableJoin"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/views": {
      "get": {
        "tags": [
          "Table View"
        ],
        "summary": "Get all views for a table",
        "description": "Retrieve all views associated with a specific table.",
        "operationId": "GetTableViews",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "The UUID of the table for which views are to be retrieved.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "query",
            "name": "ignore_columns",
            "description": "Flag to indicate whether to ignore column data in the response.",
            "type": "boolean",
            "x-ms-summary": "Ignore Columns"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all views for the table.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TableView"
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      },
      "post": {
        "tags": [
          "Table View"
        ],
        "summary": "Create a new view for a table",
        "description": "Create a new view for a specific table.",
        "operationId": "CreateTableView",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "The UUID of the table for which the view is to be created.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTableView"
            },
            "x-ms-summary": "CreateTableView Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created the table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/TableView"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/join/{join_id}": {
      "delete": {
        "tags": [
          "Table"
        ],
        "summary": "Delete Table Join",
        "description": "Delete a join from a table.",
        "operationId": "DeleteTableJoin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table from which the join will be deleted.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "path",
            "name": "join_id",
            "description": "UUID of the join to be deleted.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Join Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the table join.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "Join deleted"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table or Join not found."
          }
        }
      },
      "put": {
        "tags": [
          "Table"
        ],
        "summary": "Update Table Join",
        "description": "Update an existing join on a table.",
        "operationId": "UpdateTableJoin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table with the join to be updated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "path",
            "name": "join_id",
            "description": "UUID of the join to be updated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Join Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTableJoin"
            },
            "x-ms-summary": "UpdateTableJoin Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the table join.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Table"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table or Join not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/sync/{integration_name}": {
      "delete": {
        "tags": [
          "Table"
        ],
        "summary": "Delete Integration from Table",
        "description": "Remove a specific integration from a table.",
        "operationId": "DeleteIntegrationFromTable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table from which the integration will be removed.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "path",
            "name": "integration_name",
            "description": "Name of the integration to be removed.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Integration Name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed the integration from the table.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "OK"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table or User not found."
          }
        }
      },
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Sync Table with Integration",
        "description": "Sync a table with a specified integration.",
        "operationId": "SyncTableWithIntegration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table to sync.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "path",
            "name": "integration_name",
            "description": "Name of the integration to sync with.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Integration Name"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SyncTable"
            },
            "x-ms-summary": "SyncTable Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully started synchronization process.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "OK"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions or table already synced."
          },
          "404": {
            "description": "Table or User not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/used": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Check Processes Table is Used In",
        "description": "Check and return a list of processes, table joins, and selects where the specified table is used.",
        "operationId": "GetWhereTableUsed",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table to check usage",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the usage information of the table",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "link": {
                        "description": "Direct link to the process, join or select",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the process, join or select where the table is used",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of usage (process, sourceJoin, targetJoin, sourceSelect, etc.)",
                        "type": "string"
                      }
                    }
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/table/{table_id}/file": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Get File for Table Cell",
        "description": "Retrieve a file associated with a specific cell in a table.",
        "operationId": "GetFileForTableCell",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table containing the file.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "query",
            "name": "column_id",
            "description": "UUID of the column containing the cell.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Column Id"
          },
          {
            "in": "query",
            "name": "filename",
            "description": "Name of the file to retrieve.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Filename"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the file.",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "File not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/rows": {
      "delete": {
        "tags": [
          "Table"
        ],
        "summary": "Delete Table Rows",
        "description": "Delete all rows or specific rows from a table.",
        "operationId": "DeleteTableRows",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table from which rows are to be deleted.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the specified rows from the table.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/join": {
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Create Table Join",
        "description": "Create a join between two tables.",
        "operationId": "CreateTableJoin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table to create the join on.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTableJoin"
            },
            "x-ms-summary": "CreateTableJoin Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a table join.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Table"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/row": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Get Table Rows",
        "description": "Retrieve rows from a table based on provided query parameters.",
        "operationId": "GetTableRows",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table from which rows are to be retrieved",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number for pagination",
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "x-ms-summary": "Page"
          },
          {
            "in": "query",
            "name": "size",
            "description": "Number of items per page for pagination",
            "type": "integer",
            "default": 50,
            "maximum": 2500,
            "minimum": 1,
            "x-ms-summary": "Size"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sorting criteria for the table rows",
            "type": "string",
            "x-ms-summary": "Sort"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criteria for the table rows",
            "type": "string",
            "x-ms-summary": "Filter"
          },
          {
            "in": "query",
            "name": "last_updated_at",
            "description": "Filter for rows updated after this date",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Last Updated At"
          },
          {
            "in": "query",
            "name": "last_created_at",
            "description": "Filter for rows created after this date",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Last Created At"
          },
          {
            "in": "query",
            "name": "next_page_token",
            "description": "Token for fetching the next page of results",
            "type": "string",
            "x-ms-summary": "Next Page Token"
          },
          {
            "in": "query",
            "name": "columns",
            "description": "Specific columns to include in the response",
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-ms-summary": "Columns"
          },
          {
            "in": "query",
            "name": "distinct_columns",
            "description": "Columns to apply distinct filtering",
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-ms-summary": "Distinct Columns"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved table rows",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "publicId": {
                        "type": "string"
                      },
                      "rowData": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "sortOrder": {
                        "type": "number"
                      }
                    }
                  }
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "next_page_token": {
                      "type": "string"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "total": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      },
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Add Row to Table",
        "description": "Add a new row to the specified table.",
        "operationId": "CreateTableRows",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table to which the row will be added",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTableRows"
            },
            "x-ms-summary": "CreateTableRows Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added rows to the table view.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "publicId": {
                        "type": "string"
                      },
                      "rowData": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "sortOrder": {
                        "type": "number"
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      },
      "put": {
        "tags": [
          "Table"
        ],
        "summary": "Update Existing Rows in Table",
        "description": "Update existing rows in the specified table.",
        "operationId": "UpdateTableRows",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table where rows will be updated",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTableRows"
            },
            "x-ms-summary": "UpdateTableRows Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated rows in the table.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "publicId": {
                        "type": "string"
                      },
                      "rowData": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "sortOrder": {
                        "type": "number"
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/table/{table_id}/csv": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Download Table Data as CSV",
        "description": "Download the data of a specified table as a CSV file.",
        "operationId": "DownloadTableAsCSV",
        "produces": [
          "text/csv"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table to download data from",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sorting criteria for the table rows",
            "type": "string",
            "x-ms-summary": "Sort"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criteria for the table rows",
            "type": "string",
            "x-ms-summary": "Filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully downloaded the table data as a CSV file.",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/user/public/{public_id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User Details by Public ID",
        "description": "Get information on a specific user by their public ID",
        "operationId": "GetUserByPublicId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "public_id",
            "description": "Public UUID of the user to retrieve",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Public Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user information",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                },
                "metadata": {
                  "description": "Metadata object",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/v1/user/apikey/{api_key_id}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete API Key",
        "description": "Delete an API key for the currently logged in user",
        "operationId": "DeleteApiKey",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "api_key_id",
            "description": "The UUID of the API key to delete",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Api Key Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the API key",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "API Key Deleted"
                },
                "metadata": {
                  "description": "Additional metadata",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "API key not found"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update API Key",
        "description": "Update an API key for the currently logged in user",
        "operationId": "UpdateApiKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "api_key_id",
            "description": "The UUID of the API key to update",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Api Key Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateApiKey"
            },
            "x-ms-summary": "UpdateApiKey Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the API key",
            "schema": {
              "type": "object",
              "properties": {
                "apiKey": {
                  "description": "Updated API key details",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/v1/user/{firebase_id}/public-contributions": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User's Public Contributions",
        "description": "Get the public contributions made by a user, identified by their Firebase ID",
        "operationId": "GetUserPublicContributions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "firebase_id",
            "description": "Firebase ID of the user whose public contributions are to be retrieved",
            "required": true,
            "type": "string",
            "x-ms-summary": "Firebase Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved public contributions",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Event"
                  }
                },
                "metadata": {
                  "description": "Metadata object",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/v1/user/{firebase_id}/pinned-projects": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User's Pinned Projects",
        "description": "Get the projects pinned by a user identified by their Firebase ID",
        "operationId": "GetUserPinnedProjects",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "firebase_id",
            "description": "Firebase ID of the user whose pinned projects are to be retrieved",
            "required": true,
            "type": "string",
            "x-ms-summary": "Firebase Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved pinned projects",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "contributors": {
                        "description": "Number of contributors to the project",
                        "type": "integer"
                      },
                      "name": {
                        "description": "Name of the project",
                        "type": "string"
                      },
                      "primaryColour": {
                        "description": "Primary colour of the project",
                        "type": "string"
                      },
                      "publicId": {
                        "format": "uuid",
                        "description": "Public ID of the project",
                        "type": "string"
                      },
                      "views": {
                        "description": "Number of views of the project",
                        "type": "integer"
                      }
                    }
                  }
                },
                "metadata": {
                  "description": "Metadata object",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/v1/user/{firebase_id}/contributions": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User Contributions",
        "description": "Get the number of contributions per day made by a user, identified by their Firebase ID",
        "operationId": "GetUserContributions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "firebase_id",
            "description": "Firebase ID of the user whose contributions are to be retrieved",
            "required": true,
            "type": "string",
            "x-ms-summary": "Firebase Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user contributions",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "Contributions per day, keyed by date",
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer"
                  }
                },
                "metadata": {
                  "description": "Metadata object",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/v1/user/{firebase_id}/achievements": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User Achievements",
        "description": "Get the achievement badges of a user by their Firebase ID",
        "operationId": "GetUserAchievements",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "firebase_id",
            "description": "Firebase ID of the user whose achievements are to be retrieved",
            "required": true,
            "type": "string",
            "x-ms-summary": "Firebase Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user achievements",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "createdProcesses": {
                      "description": "Number of processes created by the user",
                      "type": "integer"
                    },
                    "createdTables": {
                      "description": "Number of tables created by the user",
                      "type": "integer"
                    }
                  }
                },
                "metadata": {
                  "description": "Metadata object",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/v1/user/{user_id}/tags/{tag_id}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete Tag from User",
        "description": "Delete a tag from a specific user",
        "operationId": "UserDeleteTag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "description": "Public UUID of the user from whom the tag is to be deleted",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "User Id"
          },
          {
            "in": "path",
            "name": "tag_id",
            "description": "Public UUID of the tag to be deleted",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Tag Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the tag from the user",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "Tag removed from user"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions for this action"
          },
          "404": {
            "description": "User or tag not found"
          }
        }
      }
    },
    "/v1/user/{user_id}/tags": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add Tag to User",
        "description": "Add a tag to a specific user",
        "operationId": "UserAddTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "description": "Public UUID of the user to add the tag to",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "User Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserTag"
            },
            "x-ms-summary": "CreateUserTag Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added the tag to the user",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Tag"
                },
                "metadata": {
                  "description": "Additional metadata",
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions for this action"
          },
          "404": {
            "description": "User account not found"
          }
        }
      }
    },
    "/v1/comment_thread/{comment_thread_id}": {
      "get": {
        "tags": [
          "Comment"
        ],
        "summary": "Get Comment Thread",
        "description": "Retrieve a specific comment thread by its ID",
        "operationId": "GetCommentThread",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "comment_thread_id",
            "description": "UUID of the comment thread to retrieve",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Comment Thread Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the comment thread",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/CommentThread"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Comment"
        ],
        "summary": "Delete Comment Thread",
        "description": "Delete a comment thread",
        "operationId": "DeleteCommentThread",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "comment_thread_id",
            "description": "UUID of the comment thread to delete",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Comment Thread Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the comment thread",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/CommentThread"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "change": {
                      "description": "Changes made to the comment thread",
                      "type": "object"
                    },
                    "event": {
                      "description": "Event type for the operation",
                      "type": "string"
                    },
                    "resourceId": {
                      "description": "UUID of the deleted comment thread",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/notifications/{id}": {
      "delete": {
        "tags": [
          "Notification"
        ],
        "summary": "Delete a single notification",
        "description": "Delete a specific notification by its ID.",
        "operationId": "DeleteNotification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The UUID of the notification to be deleted.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the notification.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User is not an admin or owner."
          },
          "404": {
            "description": "Notification not found."
          }
        }
      },
      "put": {
        "tags": [
          "Notification"
        ],
        "summary": "Update a single notification",
        "description": "Update a specific notification by its ID.",
        "operationId": "UpdateNotification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The UUID of the notification to be updated.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateNotification"
            },
            "x-ms-summary": "UpdateNotification Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the notification.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Notification"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User is not an admin or owner."
          },
          "404": {
            "description": "Notification not found."
          }
        }
      }
    },
    "/v1/permissions/{id}": {
      "delete": {
        "tags": [
          "Permissions"
        ],
        "summary": "Delete Permissions for a Resource",
        "description": "Delete permissions for a specific resource (such as a table, table view, or process).",
        "operationId": "DeleteResourcePermissions",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "UUID of the policy to delete.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted permissions for the resource."
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Resource or accessor not found."
          }
        }
      },
      "put": {
        "tags": [
          "Permissions"
        ],
        "summary": "Update Permissions for a Resource",
        "description": "Update permissions for a specific resource (such as a table, table view, or process).",
        "operationId": "UpdateResourcePermissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "UUID of the policy to update.",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccessPolicy"
            },
            "x-ms-summary": "UpdateAccessPolicy Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated permissions for the resource.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/AccessPolicy"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Resource or accessor not found."
          },
          "422": {
            "description": "Validation error for the provided data."
          }
        }
      }
    },
    "/v1/project/{project_id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Project Information",
        "description": "Retrieve detailed information about a specific project identified by its UUID",
        "operationId": "GetProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "UUID of the project to retrieve",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved project information",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "folders": {
                      "type": "array",
                      "items": {
                        "description": "List of folders associated with the project, each with a name and potentially child folders",
                        "type": "object",
                        "properties": {
                          "childFolders": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "projectDetails": {
                      "$ref": "#/definitions/SimpleProject"
                    },
                    "role": {
                      "description": "User's role in the project",
                      "type": "string"
                    }
                  }
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "You do not have the appropriate permissions"
          },
          "404": {
            "description": "Project not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete a Project",
        "description": "Delete a specific project identified by its UUID",
        "operationId": "DeleteProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "UUID of the project to be deleted",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Project successfully deleted",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "Project deleted"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "You do not have the appropriate permissions"
          },
          "404": {
            "description": "Project not found"
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update an Existing Project",
        "description": "Update an existing project's details by project ID",
        "operationId": "UpdateProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "description": "The UUID of the project to update",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Project Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProject"
            },
            "x-ms-summary": "UpdateProject Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Project successfully updated",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/SimpleProject"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update this project"
          },
          "404": {
            "description": "Project not found"
          },
          "405": {
            "description": "Project is not active"
          }
        }
      }
    },
    "/v1/process/{process_id}": {
      "get": {
        "tags": [
          "Process"
        ],
        "summary": "Get Process Details",
        "description": "Retrieve detailed information of a specific process by its UUID",
        "operationId": "GetProcess",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process to retrieve",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "query",
            "name": "exclude_children",
            "description": "Flag to exclude child elements from the process response",
            "type": "boolean",
            "x-ms-summary": "Exclude Children"
          }
        ],
        "responses": {
          "200": {
            "description": "Process details successfully retrieved",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcess"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view this process"
          },
          "404": {
            "description": "Process not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Process"
        ],
        "summary": "Delete Process",
        "description": "Delete a process identified by its UUID",
        "operationId": "DeleteProcess",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process to delete",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Process successfully deleted",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/MortaProcess"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unable to delete due to existing webhooks or lack of owner permissions"
          },
          "404": {
            "description": "Process not found"
          }
        }
      },
      "put": {
        "tags": [
          "Process"
        ],
        "summary": "Update an Existing Process",
        "description": "Update an existing process's details by process ID",
        "operationId": "UpdateProcess",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "process_id",
            "description": "The UUID of the process to update",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Process Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProcess"
            },
            "x-ms-summary": "UpdateProcess Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Process successfully updated",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/SimpleProcess"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update this process"
          },
          "404": {
            "description": "Process not found or user lacks ownership"
          }
        }
      }
    },
    "/v1/table/{table_id}": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Get Table and Its Rows",
        "description": "Retrieve a table and its rows based on provided parameters",
        "operationId": "GetTable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table to retrieve",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number for pagination",
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "x-ms-summary": "Page"
          },
          {
            "in": "query",
            "name": "size",
            "description": "Number of items per page for pagination",
            "type": "integer",
            "default": 50,
            "maximum": 2500,
            "minimum": 1,
            "x-ms-summary": "Size"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sorting criteria for the table rows",
            "type": "string",
            "x-ms-summary": "Sort"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criteria for the table rows",
            "type": "string",
            "x-ms-summary": "Filter"
          },
          {
            "in": "query",
            "name": "last_updated_at",
            "description": "Filter for rows updated after this date",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Last Updated At"
          },
          {
            "in": "query",
            "name": "last_created_at",
            "description": "Filter for rows created after this date",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Last Created At"
          },
          {
            "in": "query",
            "name": "next_page_token",
            "description": "Token for fetching the next page of results",
            "type": "string",
            "x-ms-summary": "Next Page Token"
          },
          {
            "in": "query",
            "name": "columns",
            "description": "Specific columns to include in the response",
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-ms-summary": "Columns"
          },
          {
            "in": "query",
            "name": "distinct_columns",
            "description": "Columns to apply distinct filtering",
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-ms-summary": "Distinct Columns"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the table and its rows",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Table"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "description": "Current page number",
                      "type": "integer"
                    },
                    "size": {
                      "description": "Number of items per page",
                      "type": "integer"
                    },
                    "total": {
                      "description": "Total number of rows in the table",
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Table"
        ],
        "summary": "Delete a table",
        "description": "Delete a specified table by its UUID.",
        "operationId": "DeleteTable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table to delete",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the table",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "example": "Table deleted"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      },
      "put": {
        "tags": [
          "Table"
        ],
        "summary": "Update existing table",
        "description": "Update the properties of an existing table.",
        "operationId": "UpdateTable",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "table_id",
            "description": "UUID of the table to update",
            "required": true,
            "type": "string",
            "format": "uuid",
            "x-ms-summary": "Table Id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTable"
            },
            "x-ms-summary": "UpdateTable Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the table",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Table"
                },
                "metadata": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized action - User lacks necessary permissions."
          },
          "404": {
            "description": "Table not found."
          }
        }
      }
    },
    "/v1/user/{firebase_id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Specific User Details",
        "description": "Get information on a specific user",
        "operationId": "GetUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "firebase_id",
            "description": "Firebase ID of the user to retrieve",
            "required": true,
            "type": "string",
            "x-ms-summary": "Firebase Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user information",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                },
                "metadata": {
                  "description": "Metadata object",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessAttribute": {
      "type": "object",
      "properties": {
        "documentTable": {
          "$ref": "#/definitions/Table3"
        },
        "kind": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "tag": {
          "$ref": "#/definitions/Tag"
        },
        "user": {
          "$ref": "#/definitions/User3"
        }
      }
    },
    "AccessPolicy": {
      "type": "object",
      "properties": {
        "accessAttribute": {
          "$ref": "#/definitions/AccessAttribute"
        },
        "accessResource": {
          "$ref": "#/definitions/AccessResource"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "role": {
          "type": "integer"
        },
        "roleLabel": {
          "type": "string"
        }
      }
    },
    "AccessResource": {
      "type": "object",
      "properties": {
        "documentTable": {
          "$ref": "#/definitions/Table3"
        },
        "kind": {
          "type": "string"
        },
        "process": {
          "$ref": "#/definitions/Process"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "Action": {
      "required": [
        "kind",
        "publicId"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "webhookUrl": {
          "type": "string"
        }
      }
    },
    "Answer": {
      "type": "object",
      "properties": {
        "answers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchProjectAnswerResources"
          }
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchProjectResources"
          }
        }
      }
    },
    "ApiKey": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "BaseRequestContext": {
      "type": "object",
      "properties": {
        "processPublicId": {
          "format": "uuid",
          "default": null,
          "type": "string"
        },
        "processResponsePublicId": {
          "format": "uuid",
          "default": null,
          "type": "string"
        },
        "processSectionPublicId": {
          "format": "uuid",
          "default": null,
          "type": "string"
        },
        "projectId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "ChangeUserRole": {
      "required": [
        "role"
      ],
      "type": "object",
      "properties": {
        "role": {
          "enum": [
            "owner",
            "admin",
            "member"
          ],
          "type": "string"
        }
      }
    },
    "Chart": {
      "type": "object",
      "properties": {
        "chartType": {
          "type": "string"
        },
        "columnLabelId": {
          "format": "uuid",
          "type": "string"
        },
        "columnValueId": {
          "format": "uuid",
          "type": "string"
        },
        "showLegend": {
          "default": false,
          "type": "boolean"
        },
        "showValues": {
          "default": false,
          "type": "boolean"
        }
      }
    },
    "Colour": {
      "required": [
        "backgroundColour",
        "columnName",
        "filterType",
        "fontColour"
      ],
      "type": "object",
      "properties": {
        "backgroundColour": {
          "type": "string"
        },
        "columnId": {
          "format": "uuid",
          "type": "string"
        },
        "columnName": {
          "type": "string"
        },
        "filterType": {
          "enum": [
            "eq",
            "lt",
            "gt",
            "lte",
            "gte",
            "neq",
            "contains",
            "in",
            "row_id",
            "is",
            "is_not",
            "one_of",
            "not_one_of",
            "is_null",
            "is_not_null",
            "not_contains",
            "starts_with",
            "ends_with"
          ],
          "type": "string"
        },
        "fontColour": {
          "type": "string"
        },
        "multipleValues": {
          "type": "array",
          "items": {}
        },
        "value": {}
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "commentText": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "deletedAt": {
          "format": "date-time",
          "type": "string"
        },
        "isOwner": {
          "readOnly": true
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/SummaryUser"
        }
      }
    },
    "CommentThread": {
      "type": "object",
      "properties": {
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "deletedAt": {
          "format": "date-time",
          "type": "string"
        },
        "isCommentInitiator": {
          "readOnly": true
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "resolvedAt": {
          "format": "date-time",
          "type": "string"
        },
        "resolver": {
          "$ref": "#/definitions/User1"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CommentThreadStats": {
      "required": [
        "openCommentThreads",
        "resolvedCommentThreads"
      ],
      "type": "object",
      "properties": {
        "openCommentThreads": {
          "type": "integer"
        },
        "referenceId": {
          "format": "uuid",
          "type": "string"
        },
        "resolvedCommentThreads": {
          "type": "integer"
        }
      }
    },
    "CreateApiKey": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "CreateComment": {
      "required": [
        "commentText"
      ],
      "type": "object",
      "properties": {
        "commentText": {
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        }
      }
    },
    "CreateCommentThread": {
      "required": [
        "commentText",
        "referenceId",
        "referenceType"
      ],
      "type": "object",
      "properties": {
        "commentText": {
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "mainReferenceId": {
          "format": "uuid",
          "type": "string"
        },
        "referenceId": {
          "format": "uuid",
          "type": "string"
        },
        "referenceType": {
          "type": "string"
        }
      }
    },
    "CreateDuplicateDefaultTableView": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "name": {
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "default": 0,
          "type": "integer"
        }
      }
    },
    "CreateInvite": {
      "required": [
        "email"
      ],
      "type": "object",
      "properties": {
        "email": {
          "format": "email",
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateInvites": {
      "type": "object",
      "properties": {
        "emails": {
          "type": "array",
          "items": {
            "format": "email",
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateMultipleProcessSection": {
      "required": [
        "sections"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateProcessSection"
          }
        }
      }
    },
    "CreateNotification": {
      "required": [
        "description",
        "projectId",
        "triggers",
        "webhookUrl"
      ],
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "processes": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "projectId": {
          "format": "uuid",
          "type": "string"
        },
        "tables": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateTrigger"
          }
        },
        "webhookUrl": {
          "type": "string"
        }
      }
    },
    "CreatePermissions": {
      "required": [
        "attributeKind",
        "resourceId",
        "resourceKind",
        "role"
      ],
      "type": "object",
      "properties": {
        "attributeId": {
          "format": "uuid",
          "type": "string"
        },
        "attributeKind": {
          "enum": [
            "user",
            "tag",
            "project",
            "all_table_tags"
          ],
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "resourceId": {
          "format": "uuid",
          "type": "string"
        },
        "resourceKind": {
          "enum": [
            "process",
            "table",
            "table_view"
          ],
          "type": "string"
        },
        "role": {
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "tagReferenceId": {
          "type": "string"
        }
      }
    },
    "CreateProcess": {
      "required": [
        "name",
        "projectId",
        "type"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "name": {
          "type": "string"
        },
        "projectId": {
          "format": "uuid",
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "CreateProcessResponse": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "type": {
          "enum": [
            "Flexible",
            "File Upload",
            "Table",
            "Signature",
            "Selection"
          ],
          "type": "string"
        }
      }
    },
    "CreateProcessSection": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "description": {
          "default": null,
          "allOf": [
            {
              "$ref": "#/definitions/Draftjs"
            }
          ]
        },
        "name": {
          "type": "string"
        },
        "parentId": {
          "format": "uuid",
          "type": "string"
        },
        "plaintextDescription": {
          "default": null,
          "type": "string"
        }
      }
    },
    "CreateProcessSections": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateProcessSection"
          }
        }
      }
    },
    "CreateProject": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "CreateProjectSecret": {
      "required": [
        "name",
        "value"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "CreateTable": {
      "required": [
        "columns",
        "name",
        "projectId"
      ],
      "type": "object",
      "properties": {
        "columns": {
          "minItems": 0,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableColumn"
          }
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "joins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableJoin2"
          }
        },
        "name": {
          "type": "string"
        },
        "projectId": {
          "format": "uuid",
          "type": "string"
        },
        "type": {
          "default": "n/a",
          "type": "string"
        }
      }
    },
    "CreateTableColumn": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "aconexSynced": {
          "type": "integer"
        },
        "aggregate": {
          "type": "integer"
        },
        "alterOptions": {
          "default": null,
          "allOf": [
            {
              "$ref": "#/definitions/TableColumnAlter"
            }
          ]
        },
        "autodeskBim360Synced": {
          "type": "integer"
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "dateFormat": {
          "type": "string"
        },
        "decimalPlaces": {
          "type": "integer"
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Draftjs"
            }
          ]
        },
        "isIndexed": {
          "type": "boolean"
        },
        "kind": {
          "enum": [
            "text",
            "datetime",
            "date",
            "link",
            "multilink",
            "select",
            "multiselect",
            "integer",
            "float",
            "created",
            "modified",
            "createdby",
            "modifiedby",
            "percentage",
            "tag",
            "variable",
            "attachment",
            "phone",
            "email",
            "vote",
            "checkbox",
            "duration",
            "autonumber"
          ],
          "type": "string"
        },
        "kindOptions": {
          "$ref": "#/definitions/SelectOptionsLookup"
        },
        "mortaSynced": {
          "type": "integer"
        },
        "name": {
          "minLength": 1,
          "type": "string"
        },
        "procoreSynced": {
          "type": "integer"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "reviztoIssuesSynced": {
          "type": "integer"
        },
        "script": {
          "type": "string"
        },
        "scriptEnabled": {
          "type": "boolean"
        },
        "thousandSeparator": {
          "type": "boolean"
        },
        "viewpointSynced": {
          "type": "integer"
        },
        "width": {
          "type": "integer"
        }
      }
    },
    "CreateTableIndexes": {
      "required": [
        "columns"
      ],
      "type": "object",
      "properties": {
        "columns": {
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableColumnIndex"
          }
        }
      }
    },
    "CreateTableJoin": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "dataColumns": {
          "minItems": 1,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isOneToMany": {
          "default": false,
          "type": "boolean"
        },
        "joinColumns": {
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableColumnJoin"
          }
        },
        "joinViewId": {
          "type": "string"
        }
      }
    },
    "CreateTableRows": {
      "required": [
        "rows"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "rows": {
          "maxItems": 2500,
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableRowAction"
          }
        }
      }
    },
    "CreateTableView": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "allowContributorDelete": {
          "default": false,
          "type": "boolean"
        },
        "chartSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/Chart"
            }
          ]
        },
        "collapsedGroupView": {
          "default": false,
          "type": "boolean"
        },
        "colourSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Colour"
          }
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ViewColumn"
          }
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Draftjs"
            }
          ]
        },
        "disableNewRow": {
          "default": false,
          "type": "boolean"
        },
        "displayCommentRows": {
          "default": 0,
          "maximum": 3,
          "minimum": 0,
          "type": "integer"
        },
        "displayValidationErrorRows": {
          "default": 0,
          "maximum": 2,
          "minimum": 0,
          "type": "integer"
        },
        "filterSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filter"
          }
        },
        "frozenIndex": {
          "default": 0,
          "minimum": 0,
          "type": "integer"
        },
        "groupSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "includeAllColumns": {
          "default": false,
          "type": "boolean"
        },
        "isDefault": {
          "default": false,
          "type": "boolean"
        },
        "name": {
          "minLength": 1,
          "type": "string"
        },
        "rowHeight": {
          "default": 0,
          "maximum": 2,
          "minimum": 0,
          "type": "integer"
        },
        "sortSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sort"
          }
        },
        "type": {
          "default": 0,
          "type": "integer"
        },
        "unpackMultiselectGroupView": {
          "default": false,
          "type": "boolean"
        }
      }
    },
    "CreateTableViewColumn": {
      "required": [
        "locked",
        "name",
        "required",
        "sortOrder"
      ],
      "type": "object",
      "properties": {
        "aconexSynced": {
          "type": "integer"
        },
        "aggregate": {
          "type": "integer"
        },
        "alterOptions": {
          "default": null,
          "allOf": [
            {
              "$ref": "#/definitions/TableColumnAlter"
            }
          ]
        },
        "autodeskBim360Synced": {
          "type": "integer"
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "dateFormat": {
          "type": "string"
        },
        "decimalPlaces": {
          "type": "integer"
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Draftjs"
            }
          ]
        },
        "hardValidation": {
          "type": "boolean"
        },
        "isIndexed": {
          "type": "boolean"
        },
        "isJoined": {
          "type": "boolean"
        },
        "kind": {
          "enum": [
            "text",
            "datetime",
            "date",
            "link",
            "multilink",
            "select",
            "multiselect",
            "integer",
            "float",
            "created",
            "modified",
            "createdby",
            "modifiedby",
            "percentage",
            "tag",
            "variable",
            "attachment",
            "phone",
            "email",
            "vote",
            "checkbox",
            "duration",
            "autonumber"
          ],
          "type": "string"
        },
        "kindOptions": {
          "$ref": "#/definitions/SelectOptionsLookup"
        },
        "locked": {
          "type": "boolean"
        },
        "mortaSynced": {
          "type": "integer"
        },
        "name": {
          "minLength": 1,
          "type": "string"
        },
        "procoreSynced": {
          "type": "integer"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "reviztoIssuesSynced": {
          "type": "integer"
        },
        "script": {
          "type": "string"
        },
        "scriptEnabled": {
          "type": "boolean"
        },
        "sortOrder": {
          "maximum": 2147483647,
          "minimum": 0,
          "type": "number"
        },
        "stringValidation": {
          "type": "string"
        },
        "thousandSeparator": {
          "type": "boolean"
        },
        "validationMessage": {
          "type": "string"
        },
        "validationNoBlanks": {
          "type": "boolean"
        },
        "validationNoDuplicates": {
          "type": "boolean"
        },
        "viewpointSynced": {
          "type": "integer"
        },
        "width": {
          "type": "integer"
        }
      }
    },
    "CreateTrigger": {
      "required": [
        "resource",
        "verb"
      ],
      "type": "object",
      "properties": {
        "resource": {
          "type": "string"
        },
        "verb": {
          "type": "string"
        }
      }
    },
    "CreateUser": {
      "required": [
        "email",
        "name",
        "password"
      ],
      "type": "object",
      "properties": {
        "email": {
          "format": "email",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "projectId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "CreateUserTag": {
      "required": [
        "tagReferenceId"
      ],
      "type": "object",
      "properties": {
        "tagReferenceId": {
          "type": "string"
        }
      }
    },
    "CsvUpload": {
      "required": [
        "csv",
        "name",
        "projectId"
      ],
      "type": "object",
      "properties": {
        "csv": {},
        "hasHeader": {
          "default": false,
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "projectId": {
          "format": "uuid",
          "type": "string"
        },
        "type": {
          "default": "Uploaded CSV",
          "type": "string"
        }
      }
    },
    "DeleteTableRows": {
      "required": [
        "rowIds"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "rowIds": {
          "minItems": 1,
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        }
      }
    },
    "Draftjs": {
      "type": "object",
      "properties": {
        "content": {
          "$ref": "#/definitions/DraftjsContent"
        }
      }
    },
    "DraftjsBlock": {
      "type": "object",
      "properties": {
        "data": {},
        "depth": {
          "type": "integer"
        },
        "entityRanges": {
          "type": "array",
          "items": {}
        },
        "inlineStyleRanges": {
          "type": "array",
          "items": {}
        },
        "key": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "DraftjsContent": {
      "type": "object",
      "properties": {
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DraftjsBlock"
          }
        },
        "entityMap": {}
      }
    },
    "DuplicateProcess": {
      "required": [
        "processId"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "processId": {
          "format": "uuid",
          "type": "string"
        },
        "projectId": {
          "format": "uuid",
          "default": null,
          "type": "string"
        }
      }
    },
    "DuplicateProcessAsync": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "duplicateLinkedTables": {
          "default": false,
          "type": "boolean"
        },
        "duplicatePermissions": {
          "default": false,
          "type": "boolean"
        },
        "targetProjectId": {
          "type": "string"
        }
      }
    },
    "DuplicateProject": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "duplicatePermissions": {
          "type": "boolean"
        }
      }
    },
    "DuplicateTableQueryParams": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "duplicateLinkedTables": {
          "default": false,
          "type": "boolean"
        },
        "duplicatePermissions": {
          "default": false,
          "type": "boolean"
        },
        "targetProjectId": {
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "change": {},
        "changeId": {
          "type": "string"
        },
        "context": {},
        "contextProcessId": {
          "type": "integer"
        },
        "contextProcessResponseId": {
          "type": "integer"
        },
        "contextProcessSectionId": {
          "type": "integer"
        },
        "contextTableColumnId": {
          "type": "integer"
        },
        "contextTableId": {
          "type": "integer"
        },
        "contextTableViewId": {
          "type": "integer"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "projectId": {
          "type": "integer"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "resourcePublicId": {
          "format": "uuid",
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "verb": {
          "type": "string"
        }
      }
    },
    "ExtendedUpdateProcessSection": {
      "required": [
        "publicId"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Draftjs"
            }
          ]
        },
        "name": {
          "type": "string"
        },
        "pageBreakBefore": {
          "type": "boolean"
        },
        "pdfIncludeDescription": {
          "type": "boolean"
        },
        "pdfIncludeSection": {
          "type": "boolean"
        },
        "plaintextDescription": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "Filter": {
      "required": [
        "columnName",
        "filterType"
      ],
      "type": "object",
      "properties": {
        "columnId": {
          "format": "uuid",
          "type": "string"
        },
        "columnName": {
          "type": "string"
        },
        "filterType": {
          "enum": [
            "eq",
            "lt",
            "gt",
            "lte",
            "gte",
            "neq",
            "contains",
            "in",
            "row_id",
            "is",
            "is_not",
            "one_of",
            "not_one_of",
            "is_null",
            "is_not_null",
            "not_contains",
            "starts_with",
            "ends_with"
          ],
          "type": "string"
        },
        "multipleValues": {
          "type": "array",
          "items": {}
        },
        "orGroup": {
          "default": "main",
          "type": "string"
        },
        "value": {}
      }
    },
    "GetResources": {
      "type": "object",
      "properties": {
        "adminView": {
          "type": "boolean"
        },
        "excludeProcesses": {
          "type": "boolean"
        },
        "excludeTables": {
          "type": "boolean"
        },
        "onlyDeleted": {
          "type": "boolean"
        },
        "projectPermissions": {
          "type": "boolean"
        },
        "typeId": {
          "type": "string"
        }
      }
    },
    "Group": {
      "required": [
        "columnName",
        "direction"
      ],
      "type": "object",
      "properties": {
        "columnId": {
          "format": "uuid",
          "type": "string"
        },
        "columnName": {
          "type": "string"
        },
        "direction": {
          "type": "string"
        }
      }
    },
    "HeadingStyle": {
      "type": "object",
      "properties": {
        "bold": {
          "type": "boolean"
        },
        "colour": {
          "type": "string"
        },
        "fontSize": {
          "type": "number"
        },
        "italic": {
          "type": "boolean"
        },
        "level": {
          "type": "integer"
        },
        "numberingStyle": {
          "type": "integer"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "startAt0": {
          "type": "boolean"
        },
        "underline": {
          "type": "boolean"
        }
      }
    },
    "HomeProject": {
      "type": "object",
      "properties": {
        "deletedAt": {
          "format": "date-time",
          "type": "string"
        },
        "hideProcessCreated": {
          "type": "boolean"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "mfaRequired": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "primaryColour": {
          "type": "string"
        },
        "publicId": {
          "type": "string"
        }
      }
    },
    "IntegrationsPassthroughApiCall": {
      "required": [
        "method",
        "path",
        "sourceSystem"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "data": {
          "default": null
        },
        "headers": {},
        "method": {
          "enum": [
            "GET",
            "PUT",
            "POST",
            "DELETE",
            "PATCH"
          ],
          "type": "string"
        },
        "onBehalfUserId": {
          "format": "uuid",
          "default": null,
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "sourceSystem": {
          "enum": [
            "viewpoint",
            "aconex",
            "autodesk-bim360",
            "procore",
            "revizto",
            "morta"
          ],
          "type": "string"
        }
      }
    },
    "IntegrationsPassthroughResponse": {
      "type": "object",
      "properties": {
        "body": {},
        "contentType": {
          "type": "string"
        },
        "headers": {},
        "status": {
          "type": "string"
        }
      }
    },
    "InvitedMember": {
      "type": "object",
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "invitedBy": {
          "$ref": "#/definitions/SummaryUser"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "MortaProcess": {
      "type": "object",
      "properties": {
        "allowComments": {
          "type": "boolean"
        },
        "allowDuplication": {
          "type": "boolean"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessSection1"
          }
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "deletedAt": {
          "format": "date-time",
          "type": "string"
        },
        "description": {},
        "expandByDefault": {
          "type": "boolean"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "isTemplate": {
          "type": "boolean"
        },
        "logo": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "templateCategory": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "variableValues": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MortaProcessResponse": {
      "type": "object",
      "properties": {
        "approved": {
          "type": "boolean"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "deletedAt": {
          "format": "date-time",
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "expireResponse": {
          "type": "boolean"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "pdfIncludeResponse": {
          "type": "boolean"
        },
        "position": {
          "type": "integer"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "resetAfterResponse": {
          "type": "boolean"
        },
        "responders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "response": {},
        "responseDate": {
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "typeOptions": {},
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/SummaryUser"
        },
        "userResponders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SummaryUser"
          }
        }
      }
    },
    "MortaProcessSection": {
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MortaProcessSection"
          }
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "deletedAt": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/Draftjs"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "openCommentThreads": {
          "type": "integer"
        },
        "pageBreakBefore": {
          "type": "boolean"
        },
        "parentId": {
          "format": "uuid",
          "type": "string"
        },
        "pdfIncludeDescription": {
          "type": "boolean"
        },
        "pdfIncludeSection": {
          "type": "boolean"
        },
        "position": {
          "type": "integer"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessResponse"
          }
        },
        "status": {
          "type": "integer"
        }
      }
    },
    "Notification": {
      "required": [
        "actions",
        "publicId",
        "triggers"
      ],
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Action"
          }
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "default": null,
          "type": "string"
        },
        "processes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Process"
          }
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Table1"
          }
        },
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Trigger"
          }
        },
        "user": {
          "$ref": "#/definitions/SummaryUser"
        }
      }
    },
    "WebhookResponse": {
      "required": [
        "id",
        "event",
        "change",
        "resourceId",
        "context",
        "user",
        "createdAt",
        "contextProjectId"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "event": {
          "type": "string"
        },
        "change": {
          "type": "object",
          "properties": {
            "type_changes": {
              "type": "object",
              "properties": {
                "root['responseDate']": {
                  "type": "object",
                  "properties": {
                    "old_value": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "new_value": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "root['user']": {
                  "type": "object",
                  "properties": {
                    "old_value": {
                      "type": "string"
                    },
                    "new_value": {
                      "type": "object",
                      "properties": {
                        "profilePicture": {
                          "type": "string",
                          "format": "uri"
                        },
                        "name": {
                          "type": "string"
                        },
                        "publicId": {
                          "type": "string"
                        },
                        "firebaseUserId": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        }
                      }
                    }
                  }
                }
              }
            },
            "values_changed": {
              "type": "object",
              "properties": {
                "root['approved']": {
                  "type": "object",
                  "properties": {
                    "old_value": {
                      "type": "boolean"
                    },
                    "new_value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "resourceId": {
          "type": "string"
        },
        "context": {
          "type": "object",
          "properties": {
            "processResponse": {
              "type": "object",
              "properties": {
                "responseDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "publicId": {
                  "type": "string"
                },
                "expireResponse": {
                  "type": "boolean"
                },
                "type": {
                  "type": "string"
                },
                "responders": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "isDeleted": {
                  "type": "boolean"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "profilePicture": {
                      "type": "string",
                      "format": "uri"
                    },
                    "name": {
                      "type": "string"
                    },
                    "publicId": {
                      "type": "string"
                    },
                    "firebaseUserId": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    }
                  }
                },
                "deletedAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "response": {
                  "type": "string"
                },
                "pdfIncludeResponse": {
                  "type": "boolean"
                },
                "userResponders": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "profilePicture": {
                        "type": "string",
                        "format": "uri"
                      },
                      "name": {
                        "type": "string"
                      },
                      "publicId": {
                        "type": "string"
                      },
                      "firebaseUserId": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string",
                        "format": "email"
                      }
                    }
                  }
                },
                "typeOptions": {
                  "type": "object",
                  "properties": {
                    "table": {
                      "type": "string"
                    },
                    "tableView": {
                      "type": "string"
                    },
                    "selectionColumn": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "publicId": {
                          "type": "string"
                        }
                      }
                    },
                    "selectionOptions": {
                      "type": "string"
                    }
                  }
                },
                "resetAfterResponse": {
                  "type": "boolean"
                },
                "position": {
                  "type": "integer"
                },
                "dueDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "approved": {
                  "type": "boolean"
                }
              }
            },
            "processSection": {
              "type": "object",
              "properties": {
                "publicId": {
                  "type": "string"
                }
              }
            }
          }
        },
        "user": {
          "type": "object",
          "properties": {
            "profilePicture": {
              "type": "string",
              "format": "uri"
            },
            "name": {
              "type": "string"
            },
            "publicId": {
              "type": "string"
            },
            "firebaseUserId": {
              "type": "string"
            },
            "email": {
              "type": "string",
              "format": "email"
            }
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "contextProjectId": {
          "type": "string"
        },
        "contextProcessId": {
          "type": "string"
        },
        "contextProcessSectionId": {
          "type": "string"
        },
        "contextProcessResponseId": {
          "type": "string"
        },
        "contextTableId": {
          "type": "string"
        },
        "contextTableViewId": {
          "type": "string"
        },
        "contextTableColumnId": {
          "type": "string"
        },
        "querystring": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Notification1": {
      "required": [
        "actions",
        "publicId",
        "triggers"
      ],
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Action"
          }
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "default": null,
          "type": "string"
        },
        "processes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Process"
          }
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Table1"
          }
        },
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Trigger"
          }
        }
      }
    },
    "NotificationExecution": {
      "required": [
        "publicId"
      ],
      "type": "object",
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "default": null,
          "type": "string"
        },
        "isSuccess": {
          "type": "boolean"
        },
        "notification": {
          "$ref": "#/definitions/Notification1"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "PermissionedProcess": {
      "type": "object",
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "deletedAt": {
          "format": "date-time",
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "PreviewTableRow": {
      "required": [
        "rowData"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "rowData": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "Process": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "ProcessResponse": {
      "type": "object",
      "properties": {
        "approved": {
          "type": "boolean"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "deletedAt": {
          "format": "date-time",
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "expireResponse": {
          "type": "boolean"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "pdfIncludeResponse": {
          "type": "boolean"
        },
        "position": {
          "type": "integer"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "resetAfterResponse": {
          "type": "boolean"
        },
        "responders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "response": {},
        "responseDate": {
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "typeOptions": {},
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/SummaryUser"
        },
        "userResponders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SummaryUser"
          }
        }
      }
    },
    "ProcessSection": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "status": {
          "type": "integer"
        }
      }
    },
    "ProcessSection1": {
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessSection1"
          }
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "deletedAt": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/Draftjs"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "openCommentThreads": {
          "type": "integer"
        },
        "pageBreakBefore": {
          "type": "boolean"
        },
        "parentId": {
          "format": "uuid",
          "type": "string"
        },
        "pdfIncludeDescription": {
          "type": "boolean"
        },
        "pdfIncludeSection": {
          "type": "boolean"
        },
        "position": {
          "type": "integer"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessResponse"
          }
        },
        "status": {
          "type": "integer"
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "publicId": {
          "type": "string"
        }
      }
    },
    "ProjectList": {
      "type": "object",
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "favourite": {
          "type": "boolean"
        },
        "projectRole": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User4"
        }
      }
    },
    "ProjectListWithUserTags": {
      "type": "object",
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "favourite": {
          "type": "boolean"
        },
        "projectRole": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User2"
        }
      }
    },
    "ProjectSecret": {
      "type": "object",
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "SearchProjectAnswerResources": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "originalText": {
          "type": "string"
        },
        "similarity": {
          "type": "number"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "SearchProjectResources": {
      "type": "object",
      "properties": {
        "link": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "SectionOrder": {
      "type": "object",
      "properties": {
        "parentId": {
          "format": "uuid",
          "type": "string"
        },
        "position": {
          "minimum": 0,
          "type": "integer"
        },
        "sectionId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "SelectOptionsLookup": {
      "type": "object",
      "properties": {
        "manualOptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tableOptions": {
          "allOf": [
            {
              "$ref": "#/definitions/SelectTableOptions"
            }
          ]
        }
      }
    },
    "SelectTableDependency": {
      "required": [
        "columnId"
      ],
      "type": "object",
      "properties": {
        "columnId": {
          "type": "string"
        },
        "columnJoinId": {
          "type": "string"
        }
      }
    },
    "SelectTableOptions": {
      "type": "object",
      "properties": {
        "columnId": {
          "type": "string"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelectTableDependency"
          }
        },
        "liveValues": {
          "type": "boolean"
        },
        "tableId": {
          "type": "string"
        },
        "viewId": {
          "type": "string"
        }
      }
    },
    "SimpleDocumentTable": {
      "type": "object",
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "defaultViewId": {
          "type": "string"
        },
        "deletedAt": {
          "format": "date-time",
          "type": "string"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "joins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableJoin"
          }
        },
        "logo": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "SimpleProcess": {
      "type": "object",
      "properties": {
        "allowComments": {
          "type": "boolean"
        },
        "allowDuplication": {
          "type": "boolean"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessSection"
          }
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "deletedAt": {
          "format": "date-time",
          "type": "string"
        },
        "description": {},
        "expandByDefault": {
          "type": "boolean"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "isTemplate": {
          "type": "boolean"
        },
        "logo": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "templateCategory": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "variableValues": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SimpleProject": {
      "type": "object",
      "properties": {
        "adminLimit": {
          "type": "integer"
        },
        "automationLimit": {
          "type": "integer"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "defaultProcessId": {
          "type": "string"
        },
        "deletedAt": {
          "format": "date-time",
          "type": "string"
        },
        "headingStyles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HeadingStyle"
          }
        },
        "hideProcessCreated": {
          "type": "boolean"
        },
        "image": {
          "type": "string"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "logo": {
          "type": "string"
        },
        "mfaRequired": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "noOfAdmins": {
          "type": "integer"
        },
        "primaryColour": {
          "type": "string"
        },
        "processTitleBold": {
          "type": "boolean"
        },
        "processTitleColour": {
          "type": "string"
        },
        "processTitleFontSize": {
          "type": "number"
        },
        "processTitleItalic": {
          "type": "boolean"
        },
        "processTitleUnderline": {
          "type": "boolean"
        },
        "projectList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectList"
          }
        },
        "public": {
          "type": "boolean"
        },
        "publicId": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "Sort": {
      "required": [
        "columnName",
        "direction"
      ],
      "type": "object",
      "properties": {
        "columnId": {
          "format": "uuid",
          "type": "string"
        },
        "columnName": {
          "type": "string"
        },
        "direction": {
          "type": "string"
        }
      }
    },
    "SubmitProcessResponse": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "response": {}
      }
    },
    "SummaryUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firebaseUserId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "profilePicture": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "SyncTable": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "enterpriseId": {
          "type": "string"
        },
        "folderId": {
          "type": "string"
        },
        "hubId": {
          "type": "string"
        },
        "licenseId": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "projectIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "topFolderId": {
          "type": "string"
        },
        "type": {
          "enum": [
            "Projects",
            "Resources",
            "Users"
          ],
          "type": "string"
        }
      }
    },
    "Table": {
      "type": "object",
      "properties": {
        "allowDuplication": {
          "type": "boolean"
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableColumn"
          }
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "defaultViewId": {
          "type": "string"
        },
        "deletedAt": {
          "format": "date-time",
          "type": "string"
        },
        "isAconexSynced": {
          "type": "boolean"
        },
        "isAutodeskBim360Synced": {
          "type": "boolean"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "isMortaProjectsSynced": {
          "type": "boolean"
        },
        "isMortaResourcesSynced": {
          "type": "boolean"
        },
        "isMortaSynced": {
          "type": "boolean"
        },
        "isMortaUsersSynced": {
          "type": "boolean"
        },
        "isProcoreSynced": {
          "type": "boolean"
        },
        "isReviztoIssuesSynced": {
          "type": "boolean"
        },
        "isSynced": {
          "type": "boolean"
        },
        "isViewpointSynced": {
          "type": "boolean"
        },
        "joins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableJoin"
          }
        },
        "keepColoursInSync": {
          "type": "boolean"
        },
        "keepValidationsInSync": {
          "type": "boolean"
        },
        "lastSync": {
          "format": "date-time",
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "syncHourlyFrequency": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "variables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Table1": {
      "type": "object",
      "properties": {
        "defaultViewId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "Table2": {
      "type": "object",
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "Table3": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "TableColumn": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "aconexSynced": {
          "type": "integer"
        },
        "aggregate": {
          "type": "integer"
        },
        "alterOptions": {
          "default": null,
          "allOf": [
            {
              "$ref": "#/definitions/TableColumnAlter"
            }
          ]
        },
        "autodeskBim360Synced": {
          "type": "integer"
        },
        "dateFormat": {
          "type": "string"
        },
        "decimalPlaces": {
          "type": "integer"
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Draftjs"
            }
          ]
        },
        "isIndexed": {
          "type": "boolean"
        },
        "isJoined": {
          "type": "boolean"
        },
        "kind": {
          "enum": [
            "text",
            "datetime",
            "date",
            "link",
            "multilink",
            "select",
            "multiselect",
            "integer",
            "float",
            "created",
            "modified",
            "createdby",
            "modifiedby",
            "percentage",
            "tag",
            "variable",
            "attachment",
            "phone",
            "email",
            "vote",
            "checkbox",
            "duration",
            "autonumber"
          ],
          "type": "string"
        },
        "kindOptions": {
          "$ref": "#/definitions/SelectOptionsLookup"
        },
        "mortaSynced": {
          "type": "integer"
        },
        "name": {
          "minLength": 1,
          "type": "string"
        },
        "procoreSynced": {
          "type": "integer"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "reviztoIssuesSynced": {
          "type": "integer"
        },
        "script": {
          "type": "string"
        },
        "scriptEnabled": {
          "type": "boolean"
        },
        "thousandSeparator": {
          "type": "boolean"
        },
        "viewpointSynced": {
          "type": "integer"
        },
        "width": {
          "type": "integer"
        }
      }
    },
    "TableColumnAggregationResult": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      }
    },
    "TableColumnAlter": {
      "type": "object",
      "properties": {
        "dateConversionFormat": {
          "enum": [
            "DD/MM/YYYY",
            "MM/DD/YYYY",
            "ISO8601",
            "DD-Mon-YY"
          ],
          "type": "string"
        },
        "runScriptOnAllCells": {
          "default": false,
          "type": "boolean"
        }
      }
    },
    "TableColumnIndex": {
      "required": [
        "publicId"
      ],
      "type": "object",
      "properties": {
        "publicId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "TableColumnJoin": {
      "type": "object",
      "properties": {
        "sourceColumnId": {
          "type": "string"
        },
        "targetColumnId": {
          "type": "string"
        }
      }
    },
    "TableColumnWithAggregation": {
      "type": "object",
      "properties": {
        "aggregation": {
          "$ref": "#/definitions/TableColumnAggregationResult"
        },
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "TableJoin": {
      "type": "object",
      "properties": {
        "dataColumns": {
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableJoinImportedColumns"
          }
        },
        "isOneToMany": {
          "type": "boolean"
        },
        "joinColumns": {
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableColumnJoin"
          }
        },
        "joinTableId": {
          "type": "string"
        },
        "joinViewId": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "TableJoin1": {
      "type": "object",
      "properties": {
        "dataColumns": {
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableJoinImportedColumns"
          }
        },
        "isOneToMany": {
          "type": "boolean"
        },
        "joinColumns": {
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableColumnJoin"
          }
        },
        "joinTableName": {
          "type": "string"
        },
        "joinViewId": {
          "type": "string"
        },
        "joinViewName": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "TableJoin2": {
      "type": "object",
      "properties": {
        "dataColumns": {
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableJoinImportedColumns"
          }
        },
        "isOneToMany": {
          "type": "boolean"
        },
        "joinColumns": {
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableColumnJoin"
          }
        },
        "joinTableName": {
          "type": "string"
        },
        "joinViewId": {
          "type": "string"
        },
        "joinViewName": {
          "type": "string"
        }
      }
    },
    "TableJoinImportedColumns": {
      "type": "object",
      "properties": {
        "sourceColumnId": {
          "type": "string"
        },
        "targetColumnId": {
          "type": "string"
        }
      }
    },
    "TableRowAction": {
      "required": [
        "rowData"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "rowData": {
          "type": "object",
          "additionalProperties": {}
        },
        "sortOrder": {
          "type": "number"
        }
      }
    },
    "TableRowAction1": {
      "required": [
        "publicId",
        "rowData"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "rowData": {
          "type": "object",
          "additionalProperties": {}
        },
        "sortOrder": {
          "type": "number"
        }
      }
    },
    "TableView": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "allowContributorDelete": {
          "type": "boolean"
        },
        "chartSettings": {
          "$ref": "#/definitions/Chart"
        },
        "collapsedGroupView": {
          "type": "boolean"
        },
        "colourSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Colour"
          }
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableViewColumn"
          }
        },
        "description": {
          "$ref": "#/definitions/Draftjs"
        },
        "disableNewRow": {
          "type": "boolean"
        },
        "displayCommentRows": {
          "type": "integer"
        },
        "displayValidationErrorRows": {
          "type": "integer"
        },
        "filterSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filter"
          }
        },
        "frozenIndex": {
          "type": "integer"
        },
        "groupSettings": {
          "default": null,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "isDefault": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "rowHeight": {
          "type": "integer"
        },
        "sortSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sort"
          }
        },
        "type": {
          "type": "integer"
        },
        "unpackMultiselectGroupView": {
          "type": "boolean"
        }
      }
    },
    "TableViewColumn": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "aconexSynced": {
          "type": "integer"
        },
        "aggregate": {
          "type": "integer"
        },
        "alterOptions": {
          "default": null,
          "allOf": [
            {
              "$ref": "#/definitions/TableColumnAlter"
            }
          ]
        },
        "autodeskBim360Synced": {
          "type": "integer"
        },
        "dateFormat": {
          "type": "string"
        },
        "decimalPlaces": {
          "type": "integer"
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Draftjs"
            }
          ]
        },
        "hardValidation": {
          "type": "boolean"
        },
        "isIndexed": {
          "type": "boolean"
        },
        "isJoined": {
          "type": "boolean"
        },
        "kind": {
          "enum": [
            "text",
            "datetime",
            "date",
            "link",
            "multilink",
            "select",
            "multiselect",
            "integer",
            "float",
            "created",
            "modified",
            "createdby",
            "modifiedby",
            "percentage",
            "tag",
            "variable",
            "attachment",
            "phone",
            "email",
            "vote",
            "checkbox",
            "duration",
            "autonumber"
          ],
          "type": "string"
        },
        "kindOptions": {
          "$ref": "#/definitions/SelectOptionsLookup"
        },
        "locked": {
          "type": "boolean"
        },
        "mortaSynced": {
          "type": "integer"
        },
        "name": {
          "minLength": 1,
          "type": "string"
        },
        "procoreSynced": {
          "type": "integer"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "reviztoIssuesSynced": {
          "type": "integer"
        },
        "script": {
          "type": "string"
        },
        "scriptEnabled": {
          "type": "boolean"
        },
        "sortOrder": {
          "type": "number"
        },
        "stringValidation": {
          "type": "string"
        },
        "thousandSeparator": {
          "type": "boolean"
        },
        "validationMessage": {
          "type": "string"
        },
        "validationNoBlanks": {
          "type": "boolean"
        },
        "validationNoDuplicates": {
          "type": "boolean"
        },
        "viewpointSynced": {
          "type": "integer"
        },
        "width": {
          "type": "integer"
        }
      }
    },
    "TableViewWithTable": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "allowContributorDelete": {
          "type": "boolean"
        },
        "chartSettings": {
          "$ref": "#/definitions/Chart"
        },
        "collapsedGroupView": {
          "type": "boolean"
        },
        "colourSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Colour"
          }
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableViewColumn"
          }
        },
        "description": {
          "$ref": "#/definitions/Draftjs"
        },
        "disableNewRow": {
          "type": "boolean"
        },
        "displayCommentRows": {
          "type": "integer"
        },
        "displayValidationErrorRows": {
          "type": "integer"
        },
        "documentTable": {
          "$ref": "#/definitions/Table2"
        },
        "filterSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filter"
          }
        },
        "frozenIndex": {
          "type": "integer"
        },
        "groupSettings": {
          "default": null,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "isDefault": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "rowHeight": {
          "type": "integer"
        },
        "sortSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sort"
          }
        },
        "type": {
          "type": "integer"
        },
        "unpackMultiselectGroupView": {
          "type": "boolean"
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "documentTableId": {
          "type": "string"
        },
        "projectPublicId": {
          "format": "uuid",
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "referencePublicId": {
          "type": "string"
        },
        "value": {}
      }
    },
    "Trigger": {
      "required": [
        "publicId",
        "resource",
        "verb"
      ],
      "type": "object",
      "properties": {
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "verb": {
          "type": "string"
        }
      }
    },
    "UpdateAccessPolicy": {
      "required": [
        "role"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "role": {
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        }
      }
    },
    "UpdateApiKey": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "UpdateComment": {
      "required": [
        "commentText"
      ],
      "type": "object",
      "properties": {
        "commentText": {
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        }
      }
    },
    "UpdateDocumentTableCell": {
      "required": [
        "columnName",
        "rowId"
      ],
      "type": "object",
      "properties": {
        "columnName": {
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "rowId": {
          "type": "string"
        },
        "value": {}
      }
    },
    "UpdateDocumentTableCells": {
      "required": [
        "cells"
      ],
      "type": "object",
      "properties": {
        "cells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateDocumentTableCell"
          }
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        }
      }
    },
    "UpdateInvite": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateMultipleProcessSection": {
      "required": [
        "sections"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedUpdateProcessSection"
          }
        }
      }
    },
    "UpdateNotification": {
      "required": [
        "webhookUrl"
      ],
      "type": "object",
      "properties": {
        "description": {
          "default": null,
          "type": "string"
        },
        "processes": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "tables": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string"
          }
        },
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateTrigger"
          }
        },
        "webhookUrl": {
          "type": "string"
        }
      }
    },
    "UpdateProcess": {
      "type": "object",
      "properties": {
        "allowComments": {
          "type": "boolean"
        },
        "allowDuplication": {
          "type": "boolean"
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Draftjs"
            }
          ]
        },
        "expandByDefault": {
          "type": "boolean"
        },
        "isTemplate": {
          "type": "boolean"
        },
        "logo": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "plaintextDescription": {
          "type": "string"
        },
        "templateCategory": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "variables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateProcessResponders": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "responders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateProcessResponse": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "expireResponse": {
          "type": "boolean"
        },
        "pdfIncludeResponse": {
          "type": "boolean"
        },
        "resetAfterResponse": {
          "type": "boolean"
        },
        "responders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "enum": [
            "Flexible",
            "File Upload",
            "Table",
            "Signature",
            "Selection"
          ],
          "type": "string"
        },
        "typeOptions": {}
      }
    },
    "UpdateProcessSection": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Draftjs"
            }
          ]
        },
        "name": {
          "type": "string"
        },
        "pageBreakBefore": {
          "type": "boolean"
        },
        "pdfIncludeDescription": {
          "type": "boolean"
        },
        "pdfIncludeSection": {
          "type": "boolean"
        },
        "plaintextDescription": {
          "type": "string"
        }
      }
    },
    "UpdateProcessSectionOrder": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "processSections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SectionOrder"
          }
        }
      }
    },
    "UpdateProject": {
      "type": "object",
      "properties": {
        "defaultProcessId": {
          "format": "uuid",
          "type": "string"
        },
        "hideProcessCreated": {
          "type": "boolean"
        },
        "logo": {
          "type": "string"
        },
        "mfaRequired": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "primaryColour": {
          "type": "string"
        },
        "processTitleBold": {
          "type": "boolean"
        },
        "processTitleColour": {
          "type": "string"
        },
        "processTitleFontSize": {
          "type": "number"
        },
        "processTitleItalic": {
          "type": "boolean"
        },
        "processTitleUnderline": {
          "type": "boolean"
        },
        "public": {
          "type": "boolean"
        }
      }
    },
    "UpdateProjectSecret": {
      "required": [
        "name",
        "value"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "UpdateStyling": {
      "type": "object",
      "properties": {
        "bold": {
          "default": true,
          "type": "boolean"
        },
        "colour": {
          "default": "#000",
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "fontSize": {
          "default": 1,
          "type": "number"
        },
        "italic": {
          "default": false,
          "type": "boolean"
        },
        "numberingStyle": {
          "default": 0,
          "type": "integer"
        },
        "startAt0": {
          "default": false,
          "type": "boolean"
        },
        "underline": {
          "default": false,
          "type": "boolean"
        }
      }
    },
    "UpdateTable": {
      "type": "object",
      "properties": {
        "allowDuplication": {
          "type": "boolean"
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "joins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableJoin1"
          }
        },
        "keepColoursInSync": {
          "type": "boolean"
        },
        "keepValidationsInSync": {
          "type": "boolean"
        },
        "logo": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "syncHourlyFrequency": {
          "enum": [
            1,
            3,
            6,
            12,
            24
          ],
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "variables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateTableColumn": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "aconexSynced": {
          "type": "integer"
        },
        "aggregate": {
          "type": "integer"
        },
        "alterOptions": {
          "default": null,
          "allOf": [
            {
              "$ref": "#/definitions/TableColumnAlter"
            }
          ]
        },
        "autodeskBim360Synced": {
          "type": "integer"
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "dateFormat": {
          "type": "string"
        },
        "decimalPlaces": {
          "type": "integer"
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Draftjs"
            }
          ]
        },
        "isIndexed": {
          "type": "boolean"
        },
        "kind": {
          "enum": [
            "text",
            "datetime",
            "date",
            "link",
            "multilink",
            "select",
            "multiselect",
            "integer",
            "float",
            "created",
            "modified",
            "createdby",
            "modifiedby",
            "percentage",
            "tag",
            "variable",
            "attachment",
            "phone",
            "email",
            "vote",
            "checkbox",
            "duration",
            "autonumber"
          ],
          "type": "string"
        },
        "kindOptions": {
          "$ref": "#/definitions/SelectOptionsLookup"
        },
        "mortaSynced": {
          "type": "integer"
        },
        "name": {
          "minLength": 1,
          "type": "string"
        },
        "procoreSynced": {
          "type": "integer"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "reviztoIssuesSynced": {
          "type": "integer"
        },
        "script": {
          "type": "string"
        },
        "scriptEnabled": {
          "type": "boolean"
        },
        "thousandSeparator": {
          "type": "boolean"
        },
        "viewpointSynced": {
          "type": "integer"
        },
        "width": {
          "type": "integer"
        }
      }
    },
    "UpdateTableJoin": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "dataColumns": {
          "minItems": 1,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isOneToMany": {
          "type": "boolean"
        },
        "joinColumns": {
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableColumnJoin"
          }
        },
        "joinViewId": {
          "type": "string"
        }
      }
    },
    "UpdateTableRows": {
      "required": [
        "rows"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "rows": {
          "maxItems": 2500,
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableRowAction1"
          }
        }
      }
    },
    "UpdateTableView": {
      "type": "object",
      "properties": {
        "allowContributorDelete": {
          "type": "boolean"
        },
        "chartSettings": {
          "allOf": [
            {
              "$ref": "#/definitions/Chart"
            }
          ]
        },
        "collapsedGroupView": {
          "type": "boolean"
        },
        "colourSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Colour"
          }
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateTableViewColumn"
          }
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Draftjs"
            }
          ]
        },
        "disableNewRow": {
          "type": "boolean"
        },
        "displayCommentRows": {
          "maximum": 3,
          "minimum": 0,
          "type": "integer"
        },
        "displayValidationErrorRows": {
          "maximum": 2,
          "minimum": 0,
          "type": "integer"
        },
        "filterSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filter"
          }
        },
        "frozenIndex": {
          "type": "integer"
        },
        "groupSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "name": {
          "minLength": 1,
          "type": "string"
        },
        "rowHeight": {
          "type": "integer"
        },
        "sortSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sort"
          }
        },
        "type": {
          "type": "integer"
        },
        "unpackMultiselectGroupView": {
          "type": "boolean"
        }
      }
    },
    "UpdateTableViewColumn": {
      "type": "object",
      "properties": {
        "aconexSynced": {
          "type": "integer"
        },
        "aggregate": {
          "type": "integer"
        },
        "alterOptions": {
          "default": null,
          "allOf": [
            {
              "$ref": "#/definitions/TableColumnAlter"
            }
          ]
        },
        "autodeskBim360Synced": {
          "type": "integer"
        },
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "dateFormat": {
          "type": "string"
        },
        "decimalPlaces": {
          "type": "integer"
        },
        "description": {
          "allOf": [
            {
              "$ref": "#/definitions/Draftjs"
            }
          ]
        },
        "hardValidation": {
          "type": "boolean"
        },
        "isIndexed": {
          "type": "boolean"
        },
        "isJoined": {
          "type": "boolean"
        },
        "kind": {
          "enum": [
            "text",
            "datetime",
            "date",
            "link",
            "multilink",
            "select",
            "multiselect",
            "integer",
            "float",
            "created",
            "modified",
            "createdby",
            "modifiedby",
            "percentage",
            "tag",
            "variable",
            "attachment",
            "phone",
            "email",
            "vote",
            "checkbox",
            "duration",
            "autonumber"
          ],
          "type": "string"
        },
        "kindOptions": {
          "$ref": "#/definitions/SelectOptionsLookup"
        },
        "locked": {
          "type": "boolean"
        },
        "mortaSynced": {
          "type": "integer"
        },
        "name": {
          "minLength": 1,
          "type": "string"
        },
        "procoreSynced": {
          "type": "integer"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "reviztoIssuesSynced": {
          "type": "integer"
        },
        "script": {
          "type": "string"
        },
        "scriptEnabled": {
          "type": "boolean"
        },
        "sortOrder": {
          "maximum": 2147483647,
          "minimum": 0,
          "type": "number"
        },
        "stringValidation": {
          "type": "string"
        },
        "thousandSeparator": {
          "type": "boolean"
        },
        "validationMessage": {
          "type": "string"
        },
        "validationNoBlanks": {
          "type": "boolean"
        },
        "validationNoDuplicates": {
          "type": "boolean"
        },
        "viewpointSynced": {
          "type": "integer"
        },
        "width": {
          "minimum": 100,
          "type": "integer"
        }
      }
    },
    "UpdateTrigger": {
      "required": [
        "resource",
        "verb"
      ],
      "type": "object",
      "properties": {
        "publicId": {
          "format": "uuid",
          "default": null,
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "verb": {
          "type": "string"
        }
      }
    },
    "UpdateUser": {
      "type": "object",
      "properties": {
        "bio": {
          "type": "string"
        },
        "linkedin": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organisation": {
          "type": "string"
        },
        "profilePicture": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "university": {
          "type": "string"
        },
        "universityDegree": {
          "type": "string"
        },
        "website": {
          "type": "string"
        }
      }
    },
    "UpdateUserAccount": {
      "required": [
        "oldPassword",
        "password",
        "passwordConfirm"
      ],
      "type": "object",
      "properties": {
        "oldPassword": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "passwordConfirm": {
          "type": "string"
        },
        "twoFactorCode": {
          "type": "string"
        }
      }
    },
    "UpsertTableRows": {
      "required": [
        "rows",
        "upsertColumnName"
      ],
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/BaseRequestContext"
        },
        "rows": {
          "maxItems": 2500,
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableRowAction"
          }
        },
        "upsertColumnName": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "aconexConnected": {
          "type": "boolean"
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiKey"
          }
        },
        "autodeskConnected": {
          "type": "boolean"
        },
        "bio": {
          "type": "string"
        },
        "constructionSoftware": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "type": "string"
        },
        "firebaseUserId": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "linkedin": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organisation": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "procoreConnected": {
          "type": "boolean"
        },
        "profilePicture": {
          "type": "string"
        },
        "projectsWorkedOn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "reviztoConnected": {
          "type": "boolean"
        },
        "signature": {
          "type": "string"
        },
        "specialisms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "readOnly": true
        },
        "twitter": {
          "type": "string"
        },
        "university": {
          "type": "string"
        },
        "universityDegree": {
          "type": "string"
        },
        "viewpointConnected": {
          "type": "boolean"
        },
        "website": {
          "type": "string"
        }
      }
    },
    "User1": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "User2": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firebaseUserId": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "profilePicture": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "tags": {
          "readOnly": true
        }
      }
    },
    "User3": {
      "type": "object",
      "properties": {
        "firebaseUserId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "User4": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firebaseUserId": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "UserWithToken": {
      "type": "object",
      "properties": {
        "aconexConnected": {
          "type": "boolean"
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiKey"
          }
        },
        "authToken": {
          "type": "string"
        },
        "autodeskConnected": {
          "type": "boolean"
        },
        "bio": {
          "type": "string"
        },
        "constructionSoftware": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "type": "string"
        },
        "firebaseUserId": {
          "type": "string"
        },
        "hasPassword": {
          "readOnly": true
        },
        "id": {
          "type": "integer"
        },
        "is2FaEnabled": {
          "readOnly": true
        },
        "isSuperAdmin": {
          "type": "boolean"
        },
        "kind": {
          "type": "string"
        },
        "lastLoginAt": {
          "format": "date-time",
          "type": "string"
        },
        "linkedin": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organisation": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "procoreConnected": {
          "type": "boolean"
        },
        "profilePicture": {
          "type": "string"
        },
        "projectsWorkedOn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicId": {
          "format": "uuid",
          "type": "string"
        },
        "reviztoConnected": {
          "type": "boolean"
        },
        "signature": {
          "type": "string"
        },
        "specialisms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "readOnly": true
        },
        "twitter": {
          "type": "string"
        },
        "university": {
          "type": "string"
        },
        "universityDegree": {
          "type": "string"
        },
        "viewpointConnected": {
          "type": "boolean"
        },
        "website": {
          "type": "string"
        }
      }
    },
    "ViewColumn": {
      "required": [
        "columnName"
      ],
      "type": "object",
      "properties": {
        "columnId": {
          "format": "uuid",
          "type": "string"
        },
        "columnName": {
          "type": "string"
        },
        "description": {
          "default": null,
          "allOf": [
            {
              "$ref": "#/definitions/Draftjs"
            }
          ]
        },
        "locked": {
          "default": false,
          "type": "boolean"
        },
        "required": {
          "default": false,
          "type": "boolean"
        }
      }
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": [],
  "x-ms-openai-manifest": {
    "humanName": "Morta Plugin",
    "modelDescription": "Plugin to interact with your information on the Morta platform.",
    "contactEmail": "matt@morta.io",
    "legalUrl": "https://morta.io/termsofservice"
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://morta.io"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://morta.io/termsofservice"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Productivity;Content and Files"
    }
  ]
}