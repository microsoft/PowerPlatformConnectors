{
  "swagger": "2.0",
  "info": {
    "title": "IA-Connect Web Browser",
    "description": "IA-Connect is a Robotic Process Automation (RPA) platform which adds RPA functionality from the Cloud to on-premises virtual machines or over Citrix or Microsoft Remote Desktop (RDS) connections. This is the module for Web Browser automation.",
    "version": "9.0",
    "contact": {
      "name": "Ultima Labs",
      "url": "https://www.ultima.com/ultima-labs",
      "email": "IAConnect@ultima.com"
    }
  },
  "host": "DefinedInConnectionParameters",
  "basePath": "/IAConnectRESTClient",
  "schemes": [
    "https"
  ],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.ultima.com/ultima-labs"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.ultima.com/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "IT Operations;Productivity"
    }
  ],
  "paths": {
    "/BrowserControl/GetChromeBrowserVersionFromFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Google Chrome EXE version from file",
        "description": "Gets the version of Google Chrome installed in the session where the Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetChromeBrowserVersionFromFile",
            "description": "Inputs for IA-Connect BrowserGetChromeBrowserVersionFromFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ChromeBrowserEXE": {
                  "type": "string",
                  "title": "Chrome EXE path",
                  "description": "An optional path to the Chrome.exe, if this is not installed in the default location (or you are using a Dev or Canary version of Chrome)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ChromeBrowserFileVersion": {
                  "type": "string",
                  "title": "Chrome EXE file version",
                  "description": "The version of the Chrome.exe file installed in the session where the IA-Connect Agent is running."
                },
                "ChromeBrowserMajorVersion": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Chrome EXE major version",
                  "description": "The major version of the Chrome browser (e.g. 91) installed in the session where the IA-Connect Agent is running."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetChromeBrowserVersionFromFile"
      }
    },
    "/BrowserControl/GetChromeDriverFolder": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get ChromeDriver folder",
        "description": "Gets the ChromeDriver folder path for the ChromeDriver version that is used with the current Chrome EXE version. This is used by the 'Open Chrome' action and it is unlikely that you would need to call this directly.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetChromeDriverFolder",
            "description": "Inputs for IA-Connect BrowserGetChromeDriverFolder action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DirectoryPath": {
                  "type": "string",
                  "title": "ChromeDriver parent folder",
                  "description": "The parent folder which contains a ChromeDriver folder (which itself contains the ChromeDriver.exe) for the major version of Chrome."
                },
                "ChromeMajorVersion": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Chrome EXE major version",
                  "description": "The major version of the Chrome browser (e.g. 91) installed in the session where the Agent is running."
                },
                "ChromeBrowserEXE": {
                  "type": "string",
                  "title": "Chrome EXE path",
                  "description": "An optional path to the Chrome.exe, if this is not installed in the default location (or you are using a Dev or Canary version of Chrome)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "DirectoryPath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ChromeDriverFolder": {
                  "type": "string",
                  "title": "ChromeDriver folder",
                  "description": "The folder path containing the correct version of ChromeDriver.exe for the Chrome browser major version."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetChromeDriverFolder"
      }
    },
    "/BrowserControl/IsSuitableChromeDriverAvailable": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Is suitable remote ChromeDriver available",
        "description": "Searches for a suitable version of ChromeDriver for the installed version of Google Chrome in the session where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserIsSuitableChromeDriverAvailable",
            "description": "Inputs for IA-Connect BrowserIsSuitableChromeDriverAvailable action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ChromeDriverFolder": {
                  "type": "string",
                  "title": "Chrome driver parent folder",
                  "description": "The parent folder which contains a ChromeDriver folder (which itself contains the ChromeDriver.exe) for the major version of Chrome."
                },
                "ChromeBrowserEXE": {
                  "type": "string",
                  "title": "Chrome EXE path",
                  "description": "An optional path to the Chrome.exe, if this is not installed in the default location (or you are using a Dev or Canary version of Chrome)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ChromeBrowserFileVersion": {
                  "type": "string",
                  "title": "Chrome EXE file version",
                  "description": "The version of the Chrome.exe file installed in the session where the IA-Connect Agent is running."
                },
                "ChromeBrowserMajorVersion": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Chrome EXE major version",
                  "description": "The major version of the Chrome browser (e.g. 91) installed in the session where the IA-Connect Agent is running."
                },
                "SuitableChromeDriverAvailable": {
                  "type": "boolean",
                  "title": "Suitable ChromeDriver available",
                  "description": "Returns true if a suitable version of ChromeDriver can be found for the installed version of Google Chrome in the session where the Agent is running."
                },
                "SuitableChromeDriverPath": {
                  "type": "string",
                  "title": "Suitable ChromeDriver path",
                  "description": "The file path to the suitable version of ChromeDriver for the installed version of Google Chrome in the session where the Agent is running."
                }
              }
            }
          }
        },
        "operationId": "BrowserIsSuitableChromeDriverAvailable"
      }
    },
    "/BrowserControl/UploadNewChromeDriver": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Upload new ChromeDriver",
        "description": "Uploads a new version of ChromeDriver from the local system (the digital worker) to the IA-Connect Agent session to be used with Google Chrome.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserUploadNewChromeDriver",
            "description": "Inputs for IA-Connect BrowserUploadNewChromeDriver action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "LocalChromeDriverFilePath": {
                  "type": "string",
                  "title": "Local ChromeDriver file path",
                  "description": "The file path to ChromeDriver.exe in the local session (where the IA-Connect Director is running) for the Chrome browser major version. This will be uploaded to the IA-Connect Agent session and should only be used when running the IA-Connect Agent in a Citrix or RDP session."
                },
                "Compress": {
                  "type": "boolean",
                  "default": false,
                  "title": "Compress",
                  "description": "Should the ChromeDriver be compressed when uploading?",
                  "x-ms-visibility": "advanced"
                },
                "ChromeBrowserMajorVersion": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Chrome EXE major version",
                  "description": "The major version of the Chrome browser (e.g. 91) installed in the session where the IA-Connect Agent is running."
                },
                "ChromeDriverRootSaveFolder": {
                  "type": "string",
                  "title": "ChromeDriver remote parent save folder",
                  "description": "The file path to the folder where the ChromeDriver should be saved in the IA-Connect Agent session."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "LocalChromeDriverFilePath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserUploadNewChromeDriver"
      }
    },
    "/BrowserControl/OpenChrome": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Open Google Chrome browser",
        "description": "Opens the Google Chrome web browser, allowing it to to be automated using the actions in this IA-Connect module. If the web browser was opened manually, by another application or using the 'Run Process' action then it can only be automated using UIA actions and not by the actions in this IA-Connect module.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserOpenChrome",
            "description": "Inputs for IA-Connect BrowserOpenChrome action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ChromeDriverFolder": {
                  "type": "string",
                  "title": "Chrome driver folder",
                  "description": "The folder path containing the correct version of ChromeDriver.exe for the Chrome browser major version in the IA-Connect Agent session."
                },
                "KillExistingChromeDriver": {
                  "type": "boolean",
                  "default": true,
                  "title": "Kill existing ChromeDriver",
                  "description": "Should any existing instances of ChromeDriver.exe be killed when Chrome is opened?"
                },
                "UserDataDir": {
                  "type": "string",
                  "title": "User data directory",
                  "description": "An optional path to the Google Chrome user data directory if it has been changed from the default (normally this is '%LOCALAPPDATA%\\Google\\Chrome\\User Data').",
                  "x-ms-visibility": "advanced"
                },
                "PrintToDefaultPrinter": {
                  "type": "boolean",
                  "default": true,
                  "title": "Print to default printer",
                  "description": "Should Chrome print to the default printer in the IA-Connect Agent session automatically without displaying a print dialog? The default printer can be changed using the 'Set default printer' action in the IA-Connect Environment / Session actions.",
                  "x-ms-visibility": "advanced"
                },
                "DefaultDownloadDirectory": {
                  "type": "string",
                  "title": "Default download directory",
                  "description": "An optional path to a default download directory where all downloads will be saved to.",
                  "x-ms-visibility": "advanced"
                },
                "DownloadPDFInsteadOfOpening": {
                  "type": "boolean",
                  "default": false,
                  "title": "Download PDF instead of opening",
                  "description": "Should PDF files automatically be downloaded instead of opening them?",
                  "x-ms-visibility": "advanced"
                },
                "ChromeDriverLogFilename": {
                  "type": "string",
                  "title": "Chrome driver log filename",
                  "description": "An optional path to the location where ChromeDriver log files will be stored.",
                  "x-ms-visibility": "advanced"
                },
                "LocalChromeDriverFolder": {
                  "type": "string",
                  "title": "Local Chrome driver folder",
                  "description": "The folder path in the local session (where the IA-Connect Director is running) to the folder containing the correct version of ChromeDriver.exe for the Chrome browser major version. This will be automatically uploaded to the IA-Connect Agent session and should only be used when running the IA-Connect Agent in a Citrix or RDP session."
                },
                "ChromeBrowserEXE": {
                  "type": "string",
                  "title": "Chrome EXE path",
                  "description": "An optional path to the Chrome.exe, if this is not installed in the default location (or you are using a Dev or Canary version of Chrome)."
                },
                "IgnoreCertificateErrors": {
                  "type": "boolean",
                  "default": false,
                  "title": "Ignore certificate errors",
                  "description": "Should Chrome ignore webpage certificate errors?",
                  "x-ms-visibility": "advanced"
                },
                "AdditionalArguments": {
                  "type": "string",
                  "title": "Additional arguments",
                  "description": "An optional space separated list of additional arguments to pass to the browser. A full list of command line switches can be found on the Chromium website.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ChromeDriverPID": {
                  "type": "integer",
                  "format": "int32",
                  "title": "ChromeDriver process Id",
                  "description": "The process ID of the ChromeDriver process that has been launched."
                },
                "ChromeDriverTCPPort": {
                  "type": "integer",
                  "format": "int32",
                  "title": "ChromeDriver TCP port",
                  "description": "The TCP port that ChromeDriver is listening on to receive requests from the IA-Connect Agent."
                },
                "ChromePID": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Chrome process Id",
                  "description": "The process ID of the Chrome process that has been launched."
                },
                "ChromeTCPPort": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Chrome TCP port",
                  "description": "The TCP port that Chrome DevTools is listening on, to receive requests from ChromeDriver."
                },
                "ChromeInstanceUserDataDir": {
                  "type": "string",
                  "title": "Chrome instance user data directory",
                  "description": "The path to the user data directory being used by Chrome, e.g. 'C:\\Users\\Robot1\\AppData\\Local\\Google\\Chrome\\User Data'."
                }
              }
            }
          }
        },
        "operationId": "BrowserOpenChrome"
      }
    },
    "/BrowserControl/CloseChrome": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Close Google Chrome browser",
        "description": "Closes the Google Chrome web browser which was opened using the 'Open Chrome' action.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserCloseChrome",
            "description": "Inputs for IA-Connect BrowserCloseChrome action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "PurgeDynamicUserDataDir": {
                  "type": "boolean",
                  "default": true,
                  "title": "Purge dynamic user data dir",
                  "description": "Should a dynamic user data directory be purged when closing Chrome? By default this is set to true as a dynamic user data directory is generated when Chrome is not using a specific user profile and is designed for one time use.",
                  "x-ms-visibility": "advanced"
                },
                "PurgeStaticUserDataDir": {
                  "type": "boolean",
                  "default": false,
                  "title": "Purge static user data dir",
                  "description": "Should a static user data directory be purged when closing Chrome? By default this is set to false as a static user data directory is used when Chrome is using a specific user profile and can be re-used between Chrome sessions.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserCloseChrome"
      }
    },
    "/BrowserControl/OpenInternetExplorer": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Open Internet Explorer browser",
        "description": "Opens the Internet Explorer web browser, allowing it to to be automated using the actions in this IA-Connect module. If the web browser was opened manually, by another application or using the 'Run Process' action then it can only be automated using UIA actions and not by the actions in this IA-Connect module.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserOpenInternetExplorer",
            "description": "Inputs for IA-Connect BrowserOpenInternetExplorer action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "IEDriverFolder": {
                  "type": "string",
                  "title": "Internet Explorer driver folder",
                  "description": "This parameter allows you to specify an alternative location for the folder containing IEDriver.dll. By default, IA-Connect handles this automatically so you would only need to use this parameter if directed by Ultima Technical Support.",
                  "x-ms-visibility": "advanced"
                },
                "KillExistingIEDriver": {
                  "type": "boolean",
                  "default": false,
                  "title": "Kill existing IEDriverServer",
                  "description": "Should any existing instances of IEDriverServer.exe (legacy) be killed or should any existing IEDriver be unloaded before launching a new instance of Internet Explorer? This should be left as false unless directed by Ultima Technical Support.",
                  "x-ms-visibility": "advanced"
                },
                "KillExistingIE": {
                  "type": "boolean",
                  "default": true,
                  "title": "Kill existing IE",
                  "description": "Should any existing sessions of Internet Explorer be killed before launching a new instance?"
                },
                "CleanSession": {
                  "type": "boolean",
                  "default": false,
                  "title": "Clean session",
                  "description": "Should Internet Explorer launch a clean session? This will clear all browsing history and other temporary files before launching.",
                  "x-ms-visibility": "advanced"
                },
                "EnableNativeEvents": {
                  "type": "boolean",
                  "default": true,
                  "title": "Enable native events",
                  "description": "Should native events be enabled? This is generally more reliable and better simulates user interactions. If set to false, user interactions are simulated by JavaScript events.",
                  "x-ms-visibility": "advanced"
                },
                "WebDriverLogFile": {
                  "type": "string",
                  "title": "Web driver log file",
                  "description": "An optional file path to the location where web driver log files will be stored.",
                  "x-ms-visibility": "advanced"
                },
                "WebDriverLogLevel": {
                  "type": "string",
                  "title": "Web driver log level",
                  "description": "An optional number to indicate the level of web driver logging as indicated: Fatal (1), Error (2), Warn (3), Info (4), Debug (5) or Trace (6).",
                  "x-ms-visibility": "advanced"
                },
                "DisableIEFirstRunCustomise": {
                  "type": "boolean",
                  "default": true,
                  "title": "Disable IE first run customise",
                  "description": "Should the first-run customisation dialogs be suppressed? These dialogs can typically interrupt an automated process.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserOpenInternetExplorer"
      }
    },
    "/BrowserControl/CloseInternetExplorer": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Close Internet Explorer browser",
        "description": "Closes the Internet Explorer browser which was opened using the 'Open Internet Explorer' action.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserCloseInternetExplorer",
            "description": "Inputs for IA-Connect BrowserCloseInternetExplorer action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "UnloadIEDriver": {
                  "type": "boolean",
                  "default": false,
                  "title": "Unload IE driver",
                  "description": "Should the IE driver be unloaded when IA-Connect Agent closes Internet Explorer? This is typically unnecessary and should only be used if approved by Ultima Technical Support.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserCloseInternetExplorer"
      }
    },
    "/BrowserControl/GetChromiumEdgeDriverFolder": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Chromium Edge driver folder",
        "description": "Gets the ChromiumEdgeDriver folder path for the ChromiumEdgeDriver version that is used with the current Chromium Edge EXE version. This is used by the 'Open Chromium Edge' action and it is unlikely that you would need to call this directly.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetChromiumEdgeDriverFolder",
            "description": "Inputs for IA-Connect BrowserGetChromiumEdgeDriverFolder action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DirectoryPath": {
                  "type": "string",
                  "title": "Chromium Edge driver parent folder",
                  "description": "The parent folder which contains a msedgedriver folder (which itself contains the msedgedriver.exe) for the version of major version of Chromium Edge."
                },
                "ChromiumEdgeMajorVersion": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Chromium Edge EXE major version",
                  "description": "The major version of the Chromium Edge browser (e.g. 91) installed in the session where the Agent is running."
                },
                "ChromiumEdgeBrowserEXE": {
                  "type": "string",
                  "title": "Chromium Edge EXE path",
                  "description": "An optional path to the msedge.exe if this is not installed in the default location (or you are using a Dev or Canary version of Chromium Edge)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "DirectoryPath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ChromiumEdgeDriverFolder": {
                  "type": "string",
                  "title": "ChromiumEdgeDriver folder",
                  "description": "The folder path containing the correct version of msedgedriver.exe for the Chromium Edge browser major version."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetChromiumEdgeDriverFolder"
      }
    },
    "/BrowserControl/GetChromiumEdgeBrowserVersionFromFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Chromium Edge EXE version from file",
        "description": "Gets the version of Chromium Edge installed in the session where the Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetChromiumEdgeBrowserVersionFromFile",
            "description": "Inputs for IA-Connect BrowserGetChromiumEdgeBrowserVersionFromFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ChromiumEdgeBrowserEXE": {
                  "type": "string",
                  "title": "Chromium Edge EXE path",
                  "description": "An optional path to the msedge.exe if this is not installed in the default location (or you are using a Dev or Canary version of Chromium Edge)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ChromiumEdgeBrowserFileVersion": {
                  "type": "string",
                  "title": "Chromium Edge EXE file version",
                  "description": "The version of the msedge.exe file installed in the session where the IA-Connect Agent is running."
                },
                "ChromiumEdgeBrowserMajorVersion": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Chromium Edge EXE major version",
                  "description": "The major version of the Chromium Edge browser (e.g. 91) installed in the session where the IA-Connect Agent is running."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetChromiumEdgeBrowserVersionFromFile"
      }
    },
    "/BrowserControl/IsSuitableChromiumEdgeDriverAvailable": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Is suitable remote Chromium Edge driver available",
        "description": "Searches for a suitable version of ChromiumEdgeDriver for the installed version of Chromium Edge in the session where the Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserIsSuitableChromiumEdgeDriverAvailable",
            "description": "Inputs for IA-Connect BrowserIsSuitableChromiumEdgeDriverAvailable action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ChromiumEdgeDriverFolder": {
                  "type": "string",
                  "title": "Chromium Edge driver parent folder",
                  "description": "The parent folder which contains a msedgedriver folder (which itself contains the msedgedriver.exe) for the version of major version of Chromium Edge."
                },
                "ChromiumEdgeBrowserEXE": {
                  "type": "string",
                  "title": "Chromium Edge EXE path",
                  "description": "An optional path to the msedge.exe if this is not installed in the default location (or you are using a Dev or Canary version of Chromium Edge)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ChromiumEdgeBrowserFileVersion": {
                  "type": "string",
                  "title": "Chromium Edge EXE file version",
                  "description": "The version of the msedge.exe file installed in the session where the IA-Connect Agent is running."
                },
                "ChromiumEdgeBrowserMajorVersion": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Chromium Edge EXE major version",
                  "description": "The major version of the Chromium Edge browser (e.g. 91) installed in the session where the IA-Connect Agent is running."
                },
                "SuitableChromiumEdgeDriverAvailable": {
                  "type": "boolean",
                  "title": "Suitable ChromiumEdgeDriver available",
                  "description": "Returns true if a suitable version of ChromiumEdgeDriver can be found for the installed version of Chromium Edge in the session where the Agent is running."
                },
                "SuitableChromiumEdgeDriverPath": {
                  "type": "string",
                  "title": "Suitable ChromiumEdgeDriver path",
                  "description": "The file path to the suitable version of ChromiumEdgeDriver for the installed version of Chromium Edge in the session where the Agent is running."
                }
              }
            }
          }
        },
        "operationId": "BrowserIsSuitableChromiumEdgeDriverAvailable"
      }
    },
    "/BrowserControl/UploadNewChromiumEdgeDriver": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Upload new Chromium Edge driver",
        "description": "Uploads a new version of ChromiumEdgeDriver from the local system (the digital worker) to the IA-Connect Agent session to be used with Chromium Edge.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserUploadNewChromiumEdgeDriver",
            "description": "Inputs for IA-Connect BrowserUploadNewChromiumEdgeDriver action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "LocalChromiumEdgeDriverFilePath": {
                  "type": "string",
                  "title": "Local ChromiumEdgeDriver file path",
                  "description": "The file path to msedgedriver.exe in the local session (where the IA-Connect Director is running) for the Chromium Edge browser major version. This will be uploaded to the IA-Connect Agent session and should only be used when running the IA-Connect Agent in a Citrix or RDP session."
                },
                "Compress": {
                  "type": "boolean",
                  "default": false,
                  "title": "Compress",
                  "description": "Should the ChromiumEdgeDriver be compressed when uploading?",
                  "x-ms-visibility": "advanced"
                },
                "ChromiumEdgeBrowserMajorVersion": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Chromium Edge EXE major version",
                  "description": "The major version of the Chromium Edge browser (e.g. 91) installed in the session where the IA-Connect Agent is running."
                },
                "ChromiumEdgeDriverRootSaveFolder": {
                  "type": "string",
                  "title": "ChromiumEdgeDriver remote parent save folder",
                  "description": "The file path to the folder where the ChromiumEdgeDriver should be saved in the IA-Connect Agent session."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "LocalChromiumEdgeDriverFilePath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserUploadNewChromiumEdgeDriver"
      }
    },
    "/BrowserControl/OpenChromiumEdge": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Open Chromium Edge browser",
        "description": "Opens the Chromium Edge web browser, allowing it to to be automated using the actions in this IA-Connect module. If the web browser was opened manually, by another application or using the 'Run Process' action then it can only be automated using UIA actions and not by the actions in this IA-Connect module.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserOpenChromiumEdge",
            "description": "Inputs for IA-Connect BrowserOpenChromiumEdge action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ChromiumEdgeDriverFolder": {
                  "type": "string",
                  "title": "Chromium Edge driver folder",
                  "description": "The folder path containing the correct version of msedgedriver.exe for the Chromium Edge browser major version in the IA-Connect Agent session."
                },
                "UserDataDir": {
                  "type": "string",
                  "title": "User data directory",
                  "description": "An optional path to the Chromium Edge user data directory if it has been changed from the default (normally this is '%LOCALAPPDATA%\\Microsoft\\Edge\\User Data').",
                  "x-ms-visibility": "advanced"
                },
                "KillExistingChromiumEdgeDriver": {
                  "type": "boolean",
                  "default": true,
                  "title": "Kill existing Chromium Edge driver",
                  "description": "Should any existing instances of msedgedriver.exe be killed when Chromium Edge is opened?"
                },
                "PrintToDefaultPrinter": {
                  "type": "boolean",
                  "default": true,
                  "title": "Print to default printer",
                  "description": "Should Chromium Edge print to the default printer in the IA-Connect Agent session automatically without displaying a print dialog? The default printer can be changed using the 'Set default printer' action in the IA-Connect Environment / Session actions.",
                  "x-ms-visibility": "advanced"
                },
                "DefaultDownloadDirectory": {
                  "type": "string",
                  "title": "Default download directory",
                  "description": "An optional path to a default download directory where all downloads will be saved to.",
                  "x-ms-visibility": "advanced"
                },
                "DownloadPDFInsteadOfOpening": {
                  "type": "boolean",
                  "default": false,
                  "title": "Download PDF instead of opening",
                  "description": "Should PDF files automatically be downloaded instead of opening them?",
                  "x-ms-visibility": "advanced"
                },
                "ChromiumEdgeDriverLogFilename": {
                  "type": "string",
                  "title": "Chromium Edge driver log filename",
                  "description": "An optional path to the location where msedgedriver log files will be stored.",
                  "x-ms-visibility": "advanced"
                },
                "LocalChromiumEdgeDriverFolder": {
                  "type": "string",
                  "title": "Local Chromium Edge driver folder",
                  "description": "The folder path in the local session (where the IA-Connect Director is running) to the folder containing the correct version of msedgedriver.exe for the Chromium Edge browser major version. This will be automatically uploaded to the IA-Connect Agent session and should only be used when running the IA-Connect Agent in a Citrix or RDP session."
                },
                "HideBrowserIsBeingAutomatedMessage": {
                  "type": "boolean",
                  "default": true,
                  "title": "Hide browser is being automated message",
                  "description": "Should the 'Browser is being automated' message that is displayed by Chromium Edge be hidden?",
                  "x-ms-visibility": "advanced"
                },
                "ChromiumEdgeBrowserEXE": {
                  "type": "string",
                  "title": "Chromium Edge EXE path",
                  "description": "An optional path to the msedge.exe if this is not installed in the default location (or you are using a Dev or Canary version of Chromium Edge)."
                },
                "IgnoreCertificateErrors": {
                  "type": "boolean",
                  "default": false,
                  "title": "Ignore certificate errors",
                  "description": "Should Chromium Edge ignore webpage certificate errors?",
                  "x-ms-visibility": "advanced"
                },
                "AdditionalArguments": {
                  "type": "string",
                  "title": "Additional arguments",
                  "description": "An optional space separated list of additional arguments to pass to the browser. A full list of command line switches can be found on the Chromium website.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ChromiumEdgeDriverPID": {
                  "type": "integer",
                  "format": "int32",
                  "title": "ChromiumEdgeDriver process Id",
                  "description": "The process ID of the msedgedriver process that has been launched."
                },
                "ChromiumEdgeDriverTCPPort": {
                  "type": "integer",
                  "format": "int32",
                  "title": "ChromiumEdgeDriver TCP port",
                  "description": "The TCP port that msedgedriver is listening on to receive requests from the IA-Connect Agent."
                },
                "ChromiumEdgePID": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Chromium Edge process Id",
                  "description": "The process ID of the Chromium Edge process that has been launched."
                },
                "ChromiumEdgeTCPPort": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Chromium Edge TCP port",
                  "description": "The TCP port that Chromium Edge DevTools is listening on, to receive requests from msedgedriver."
                },
                "ChromiumEdgeInstanceUserDataDir": {
                  "type": "string",
                  "title": "Chromium Edge instance user data directory",
                  "description": "The path to the user data directory being used by Chromium Edge, e.g. 'C:\\Users\\Robot1\\AppData\\Local\\Microsoft\\Edge\\User Data'."
                }
              }
            }
          }
        },
        "operationId": "BrowserOpenChromiumEdge"
      }
    },
    "/BrowserControl/CloseChromiumEdge": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Close Chromium Edge browser",
        "description": "Closes the Chromium Edge browser which was opened using the 'Open Chromium Edge' action.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserCloseChromiumEdge",
            "description": "Inputs for IA-Connect BrowserCloseChromiumEdge action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "PurgeDynamicUserDataDir": {
                  "type": "boolean",
                  "default": true,
                  "title": "Purge dynamic user data dir",
                  "description": "Should a dynamic user data directory be purged when closing Chromium Edge? By default this is set to true as a dynamic user data directory is generated when Chromium Edge is not using a specific user profile and is designed for one time use.",
                  "x-ms-visibility": "advanced"
                },
                "PurgeStaticUserDataDir": {
                  "type": "boolean",
                  "default": false,
                  "title": "Purge static user data dir",
                  "description": "Should a static user data directory be purged when closing Chromium Edge? By default this is set to false as a static user data directory is used when Chromium Edge is using a specific user profile and can be re-used between Chromium Edge sessions.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserCloseChromiumEdge"
      }
    },
    "/BrowserControl/MaximiseBrowser": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Maximise active browser",
        "description": "Maximises the web browser currently being controlled (the last browser opened using a browser 'Open' action).",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserMaximise",
            "description": "Inputs for IA-Connect BrowserMaximise action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserMaximise"
      }
    },
    "/BrowserControl/MinimiseBrowser": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Minimise active browser",
        "description": "Minimises the web browser currently being controlled (the last browser opened using a browser 'Open' action).",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserMinimise",
            "description": "Inputs for IA-Connect BrowserMinimise action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserMinimise"
      }
    },
    "/BrowserControl/FullscreenBrowser": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Fullscreen active browser",
        "description": "Sets the web browser to full screen so the website occupies the entire screen (hides the browser navigation toolbar, address bar, start bar etc).",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserFullscreen",
            "description": "Inputs for IA-Connect BrowserFullscreen action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserFullscreen"
      }
    },
    "/BrowserControl/NormaliseBrowser": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Normalise active browser",
        "description": "Normalises the browser window by resizing window to the provided dimensions and moving the window to the provided coordinates.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserNormaliseBrowser",
            "description": "Inputs for IA-Connect BrowserNormaliseBrowser action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "X": {
                  "type": "integer",
                  "format": "int32",
                  "default": 20,
                  "title": "X",
                  "description": "The X coordinate in pixels of the top left corner of the browser window."
                },
                "Y": {
                  "type": "integer",
                  "format": "int32",
                  "default": 20,
                  "title": "Y",
                  "description": "The Y coordinate in pixels of the top left corner of the browser window."
                },
                "Width": {
                  "type": "integer",
                  "format": "int32",
                  "default": -40,
                  "title": "Width",
                  "description": "The width of the browser window."
                },
                "Height": {
                  "type": "integer",
                  "format": "int32",
                  "default": -40,
                  "title": "Height",
                  "description": "The height of the browser window."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserNormaliseBrowser"
      }
    },
    "/BrowserControl/SetBrowserWindowSize": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set active browser window size",
        "description": "Resizes the browser window to the width and height dimensions specified.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserSetWindowSize",
            "description": "Inputs for IA-Connect BrowserSetWindowSize action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Width": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Width",
                  "description": "The width of the browser window in pixels."
                },
                "Height": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Height",
                  "description": "The height of the browser window in pixels."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Width",
                "Height",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserSetWindowSize"
      }
    },
    "/BrowserControl/SetBrowserWindowPosition": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set active browser window position",
        "description": "Moves the browser window to the pixel coordinates specified.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserSetWindowPosition",
            "description": "Inputs for IA-Connect BrowserSetWindowPosition action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "X": {
                  "type": "integer",
                  "format": "int32",
                  "title": "X",
                  "description": "The X pixel coordinate to set the browser window to."
                },
                "Y": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y",
                  "description": "The Y pixel coordinate to set the browser window to."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "X",
                "Y",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserSetWindowPosition"
      }
    },
    "/BrowserControl/SetTimeouts": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set browser timeouts",
        "description": "Sets the internal timeouts that IA-Connect uses when interacting with the web browser.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserSetTimeouts",
            "description": "Inputs for IA-Connect BrowserSetTimeouts action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ElementWaitTimeoutSeconds": {
                  "type": "number",
                  "format": "double",
                  "title": "Element wait timeout seconds",
                  "description": "The number of seconds that IA-Connect will wait for an element to be visible."
                },
                "PageLoadTimeoutSeconds": {
                  "type": "number",
                  "format": "double",
                  "title": "Page load timeout seconds",
                  "description": "The number of seconds that IA-Connect will wait for pages to finish loading."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserSetTimeouts"
      }
    },
    "/BrowserControl/NavigateToURL": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Navigate active browser to URL",
        "description": "Navigates the browser to the provided URL. IA-Connect will wait for the page to load before returning.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserNavigateToURL",
            "description": "Inputs for IA-Connect BrowserNavigateToURL action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "URL": {
                  "type": "string",
                  "title": "URL",
                  "description": "The URL of the page to be navigated to."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "URL",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "PageTitle": {
                  "type": "string",
                  "title": "Page title",
                  "description": "The title of the page once it has loaded."
                },
                "PageURL": {
                  "type": "string",
                  "title": "Page URL",
                  "description": "The URL of the page once it has loaded."
                }
              }
            }
          }
        },
        "operationId": "BrowserNavigateToURL"
      }
    },
    "/BrowserControl/RefreshPage": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Refresh current webpage in active browser",
        "description": "Refreshes the current browser page.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserRefreshPage",
            "description": "Inputs for IA-Connect BrowserRefreshPage action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserRefreshPage"
      }
    },
    "/BrowserControl/ResetAllElementHandles": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Reset all web element handles",
        "description": "Resets all web element handles that are currently held by the IA-Connect Agent. This action is generally used for memory clean-up and is only recommended for use in large complex processes which will result in high numbers of element handles (10,000+) being stored.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserResetAllElementHandles",
            "description": "Inputs for IA-Connect BrowserResetAllElementHandles action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserResetAllElementHandles"
      }
    },
    "/BrowserControl/DoesElementExist": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Does web element exist",
        "description": "Reports whether a HTML element currently exists. This action does not wait for the HTML element.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserDoesElementExist",
            "description": "Inputs for IA-Connect BrowserDoesElementExist action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementExists": {
                  "type": "boolean",
                  "title": "Element exists",
                  "description": "Returns true if a matching element exists or false if not."
                }
              }
            }
          }
        },
        "operationId": "BrowserDoesElementExist"
      }
    },
    "/BrowserControl/CreateHandleToElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create handle to web element",
        "description": "Creates a handle to a HTML element. This handle can be used to automate child HTML elements.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserCreateHandleToElement",
            "description": "Inputs for IA-Connect BrowserCreateHandleToElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Element handle",
                  "description": "The handle for the matching element. This can be used as an input to further actions acting on this element."
                },
                "ElementTagName": {
                  "type": "string",
                  "title": "Element tag name",
                  "description": "The HTML tag name of the matching element."
                }
              }
            }
          }
        },
        "operationId": "BrowserCreateHandleToElement"
      }
    },
    "/BrowserControl/CreateHandleToParentElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create handle to parent web element",
        "description": "Creates a handle to a HTML elements parent.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserCreateHandleToParentElement",
            "description": "Inputs for IA-Connect BrowserCreateHandleToParentElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Element handle",
                  "description": "The handle for the matching element. This can be used as an input to further actions acting on this element."
                },
                "ElementTagName": {
                  "type": "string",
                  "title": "Element tag name",
                  "description": "The HTML tag name of the matching elementd."
                }
              }
            }
          }
        },
        "operationId": "BrowserCreateHandleToParentElement"
      }
    },
    "/BrowserControl/GetElementProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get web element properties",
        "description": "Gets the properties of a HTML element.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetElementProperties",
            "description": "Inputs for IA-Connect BrowserGetElementProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "GetHTMLCode": {
                  "type": "boolean",
                  "default": false,
                  "title": "Get HTML code",
                  "description": "Should the HTML code (both Inner and Outer) for the elements be returned?",
                  "x-ms-visibility": "advanced"
                },
                "ReturnElementHandle": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return Element handle",
                  "description": "Should IA-Connect return an element handle for any matching elements? This could be used as an input to further actions acting on this element."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The HTML name of the matching element."
                },
                "ElementID": {
                  "type": "string",
                  "title": "Element ID",
                  "description": "The HTML ID of the matching element."
                },
                "ElementTagName": {
                  "type": "string",
                  "title": "Element tag name",
                  "description": "The HTML tag name of the matching element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The HTML class name of the matching element."
                },
                "ElementValue": {
                  "type": "string",
                  "title": "Element value",
                  "description": "The HTML value of the matching element."
                },
                "ElementText": {
                  "type": "string",
                  "title": "Element text",
                  "description": "The HTML text value of the matching element."
                },
                "ElementEnabled": {
                  "type": "boolean",
                  "title": "Element enabled",
                  "description": "Returns true if the matching element is enabled or false if not."
                },
                "ElementDisplayed": {
                  "type": "boolean",
                  "title": "Element displayed",
                  "description": "Returns true if the matching element is displayed or false if not."
                },
                "ElementXCoordinate": {
                  "type": "number",
                  "format": "double",
                  "title": "Element X coordinate",
                  "description": "The X coordinate of the top left corner of the matching element in pixels."
                },
                "ElementYCoordinate": {
                  "type": "number",
                  "format": "double",
                  "title": "Element Y coordinate",
                  "description": "The Y coordinate of the top left corner of the matching element in pixels."
                },
                "ElementWidth": {
                  "type": "number",
                  "format": "double",
                  "title": "Element width",
                  "description": "The element width in pixels."
                },
                "ElementHeight": {
                  "type": "number",
                  "format": "double",
                  "title": "Element height",
                  "description": "The element height in pixels."
                },
                "ElementSelected": {
                  "type": "boolean",
                  "title": "Element selected",
                  "description": "Returns true if the matching element is selected or false if not."
                },
                "ElementType": {
                  "type": "string",
                  "title": "Element type",
                  "description": "The HTML type of the matching element."
                },
                "InnerHTML": {
                  "type": "string",
                  "title": "Inner HTML",
                  "description": "The inner HTML code of the matching element, containing all direct child elements. This property is only returned if the 'Get HTML code' parameter is set to true."
                },
                "OuterHTML": {
                  "type": "string",
                  "title": "Outer HTML",
                  "description": "The outer HTML code of the matching element, containing all direct child elements and the matching element code. This property is only returned if the 'Get HTML code' parameter is set to true."
                },
                "ChildElementCount": {
                  "type": "number",
                  "format": "double",
                  "title": "Child element count",
                  "description": "The number of direct child elements found for the matching element."
                },
                "ParentTagName": {
                  "type": "string",
                  "title": "Parent tag name",
                  "description": "The HTML tag name of the parent element of the matching element."
                },
                "ElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Element handle",
                  "description": "The handle for the matching element. This can be used as an input to further actions acting on this element."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetElementProperties"
      }
    },
    "/BrowserControl/GetMultipleElementProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get multiple web element properties",
        "description": "Gets the properties of all HTML elements that matches search criteria.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetMultipleElementProperties",
            "description": "Inputs for IA-Connect BrowserGetMultipleElementProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "GetHTMLCode": {
                  "type": "boolean",
                  "default": false,
                  "title": "Get HTML code",
                  "description": "Should the HTML code (both Inner and Outer) for the elements be returned?",
                  "x-ms-visibility": "advanced"
                },
                "CreateHandle": {
                  "type": "boolean",
                  "default": true,
                  "title": "Create handle",
                  "description": "Should IA-Connect return an element handle for any matching elements? This could be used as an input to further actions acting on this element.",
                  "x-ms-visibility": "advanced"
                },
                "ReturnValue": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return value",
                  "description": "Should IA-Connect return the HTML value of each matching element?",
                  "x-ms-visibility": "advanced"
                },
                "ReturnText": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return text",
                  "description": "Should IA-Connect return the HTML text value of each matching element?",
                  "x-ms-visibility": "advanced"
                },
                "MaxValueLength": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max value length",
                  "description": "The maximum number of characters from the HTML value to be returned. This is useful to limit the amount of data returned if the HTML elements have long values. If set to 0, the entire value will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "MaxTextLength": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max text length",
                  "description": "The maximum number of characters from the HTML text value to be returned. This is useful to limit the amount of data returned if the HTML elements have long text values. If set to 0, the entire text value will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "ReturnIsDisplayed": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return is displayed",
                  "description": "Should IA-Connect return whether each matching element is displayed?",
                  "x-ms-visibility": "advanced"
                },
                "ReturnCoordinates": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return coordinates",
                  "description": "Should IA-Connect return the coordinates of each matching element?",
                  "x-ms-visibility": "advanced"
                },
                "ReturnDimensions": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return dimensions",
                  "description": "Should IA-Connect return the height and width of each matching element?",
                  "x-ms-visibility": "advanced"
                },
                "ReturnChildElementCount": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return child element count",
                  "description": "Should IA-Connect return the child element count of each matching element?",
                  "x-ms-visibility": "advanced"
                },
                "ReturnParentTag": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return parent tag",
                  "description": "Should IA-Connect return the HTML tag of the parent of each matching element?",
                  "x-ms-visibility": "advanced"
                },
                "FirstItemToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "First item to return",
                  "description": "The index of the first item to return, starting from 1.",
                  "x-ms-visibility": "advanced"
                },
                "MaxItemsToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max items to return",
                  "description": "The maximum number of elements to return, or 0 for all elements.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfElementsFound": {
                  "type": "number",
                  "format": "double",
                  "title": "Number of elements found",
                  "description": "The number of elements found that matched the search criteria."
                },
                "ElementProperties": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Element properties",
                  "description": "A list of all elements that matched the search criteria."
                },
                "MoreElementsAvailable": {
                  "type": "boolean",
                  "title": "More elements available",
                  "description": "The number of additional elements that matched the search criteria but were not returned (e.g. the search was limited by the 'Max items to return' parameter)."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetMultipleElementProperties"
      }
    },
    "/BrowserControl/GetElementParentProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get web element parents properties",
        "description": "Gets the properties of the parent elements of the matching HTML element.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetElementParentProperties",
            "description": "Inputs for IA-Connect BrowserGetElementParentProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "GetHTMLCode": {
                  "type": "boolean",
                  "default": false,
                  "title": "Get HTML code",
                  "description": "Should the HTML code (both Inner and Outer) for the elements be returned?",
                  "x-ms-visibility": "advanced"
                },
                "CreateHandle": {
                  "type": "boolean",
                  "default": true,
                  "title": "Create handle",
                  "description": "Should IA-Connect return an element handle for the parent elements? This could be used as an input to further actions acting on this element."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfElementsFound": {
                  "type": "number",
                  "format": "double",
                  "title": "Number of elements found",
                  "description": "The number of parent elements found for the element that matched the search criteria."
                },
                "ElementProperties": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Element properties",
                  "description": "A list of all parent elements for the element that matched the search criteria."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetElementParentProperties"
      }
    },
    "/BrowserControl/GetElementChildrenProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get web element children properties",
        "description": "Gets the properties of the child elements of the matching HTML element.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetElementChildrenProperties",
            "description": "Inputs for IA-Connect BrowserGetElementChildrenProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "GetHTMLCode": {
                  "type": "boolean",
                  "default": false,
                  "title": "Get HTML code",
                  "description": "Should the HTML code (both Inner and Outer) for the elements be returned?",
                  "x-ms-visibility": "advanced"
                },
                "CreateHandle": {
                  "type": "boolean",
                  "default": true,
                  "title": "Create handle",
                  "description": "Should IA-Connect return an element handle for the child elements? This could be used as an input to further actions acting on this element.",
                  "x-ms-visibility": "advanced"
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": false,
                  "title": "Search sub tree",
                  "description": "If set to true then the whole HTML tree below the parent element handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent element handle in the HTML tree will be searched."
                },
                "ReturnValue": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return value",
                  "description": "Should IA-Connect return the HTML value of each matching element?",
                  "x-ms-visibility": "advanced"
                },
                "ReturnText": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return text",
                  "description": "Should IA-Connect return the HTML text value of each matching element?",
                  "x-ms-visibility": "advanced"
                },
                "MaxValueLength": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max value length",
                  "description": "The maximum number of characters from the HTML value to be returned. This is useful to limit the amount of data returned if the HTML elements have long values. If set to 0, the entire value will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "MaxTextLength": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max text length",
                  "description": "The maximum number of characters from the HTML text value to be returned. This is useful to limit the amount of data returned if the HTML elements have long text values. If set to 0, the entire text value will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "ReturnIsDisplayed": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return is displayed",
                  "description": "Should IA-Connect return whether each matching element is displayed?",
                  "x-ms-visibility": "advanced"
                },
                "ReturnCoordinates": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return coordinates",
                  "description": "Should IA-Connect return the coordinates of each matching element?",
                  "x-ms-visibility": "advanced"
                },
                "ReturnDimensions": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return dimensions",
                  "description": "Should IA-Connect return the height and width of each matching element?",
                  "x-ms-visibility": "advanced"
                },
                "ReturnChildElementCount": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return child element count",
                  "description": "Should IA-Connect return the child element count of each matching element?",
                  "x-ms-visibility": "advanced"
                },
                "ReturnParentTag": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return parent tag",
                  "description": "Should IA-Connect return the HTML tag of the parent of each matching element?",
                  "x-ms-visibility": "advanced"
                },
                "FirstItemToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "First item to return",
                  "description": "The index of the first item to return, starting from 1.",
                  "x-ms-visibility": "advanced"
                },
                "MaxItemsToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max items to return",
                  "description": "The maximum number of elements to return, or 0 for all elements.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfElementsFound": {
                  "type": "number",
                  "format": "double",
                  "title": "Number of elements found",
                  "description": "The number of child elements found for the element that matched the search criteria."
                },
                "ElementProperties": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Element properties",
                  "description": "A list of all child elements for the element that matched the search criteria."
                },
                "MoreElementsAvailable": {
                  "type": "boolean",
                  "title": "More elements available",
                  "description": "The number of additional child elements for the element that matched the search criteria but were not returned (e.g. the search was limited by the 'Max items to return' parameter)."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetElementChildrenProperties"
      }
    },
    "/BrowserControl/InputTextIntoElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Input text into web element",
        "description": "Inputs text into a HTML element (typically a text input field), either replacing the existing text or appending the new value to any existing value.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserInputTextIntoElement",
            "description": "Inputs for IA-Connect BrowserInputTextIntoElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "TextToInput": {
                  "type": "string",
                  "title": "Text to input",
                  "description": "The text value to enter into the matching element. If the 'Reset existing value' parameter is set to true then any existing text in the element will be overwritten. If the 'Reset existing value' parameter is set to false, then this will be appended to the existing text."
                },
                "ResetExistingValue": {
                  "type": "boolean",
                  "default": true,
                  "title": "Reset existing value",
                  "description": "Should any existing text in the matching element be removed? By default, this is set to true."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "TextToInput",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "PreviousValue": {
                  "type": "string",
                  "title": "Previous value",
                  "description": "The previous value of the matching element before text was input."
                }
              }
            }
          }
        },
        "operationId": "BrowserInputTextIntoElement"
      }
    },
    "/BrowserControl/BrowserInputTextIntoMultipleElements": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Input text into multiple web elements",
        "description": "Inputs text into multiple HTML elements (typically text input fields), either replacing the existing text or appending the new value to any existing value.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserInputTextIntoMultipleElements",
            "description": "Inputs for IA-Connect BrowserInputTextIntoMultipleElements action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "InputElementsJSON": {
                  "type": "string",
                  "title": "Input elements as JSON",
                  "description": "The properties of the HTML elements to input text into, in JSON format."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "InputElementsJSON",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserInputTextIntoMultipleElements"
      }
    },
    "/BrowserControl/PressCtrlKeyOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Press CTRL key on web element",
        "description": "Presses the CTRL key on a HTML element. This can be used with the 'Control key' parameter to perform shortcuts such as Ctrl-a (Select all), Ctrl-c (Copy), Ctrl-x (Cut) or Ctrl-v (Paste).",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserPressCtrlKeyOnElement",
            "description": "Inputs for IA-Connect BrowserPressCtrlKeyOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "ControlKey": {
                  "type": "string",
                  "title": "Control key",
                  "description": "An optional key to use with the CTRL key to perform shortcuts, for example 'a' (Select all), 'c' (Copy), 'x' (Cut) or 'v' (Paste)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ControlKey",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserPressCtrlKeyOnElement"
      }
    },
    "/BrowserControl/ClickElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Click web element",
        "description": "Clicks an element (typically a button or hyperlink) in the web browser.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserClickElement",
            "description": "Inputs for IA-Connect BrowserClickElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserClickElement"
      }
    },
    "/BrowserControl/SubmitElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Submit web element",
        "description": "Submits a HTML element. This is typically performed on any input element in a form element and will cause the form to be submitted.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserSubmitElement",
            "description": "Inputs for IA-Connect BrowserSubmitElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserSubmitElement"
      }
    },
    "/BrowserControl/CheckElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check web element",
        "description": "Checks / ticks a HTML element (typically a checkbox or radio box).",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserCheckElement",
            "description": "Inputs for IA-Connect BrowserCheckElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "CheckElement": {
                  "type": "boolean",
                  "default": true,
                  "title": "Check element",
                  "description": "Set to true to check / tick an element or false to uncheck / untick."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserCheckElement"
      }
    },
    "/BrowserControl/BrowserCheckMultipleElements": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check multiple web elements",
        "description": "Checks / ticks multiple HTML elements (typically a checkbox or radio box).",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserCheckMultipleElements",
            "description": "Inputs for IA-Connect BrowserCheckMultipleElements action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "InputElementsJSON": {
                  "type": "string",
                  "title": "Input elements as JSON",
                  "description": "The properties of the HTML elements to check, in JSON format."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "InputElementsJSON",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserCheckMultipleElements"
      }
    },
    "/BrowserControl/GetSelectionProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get web selection list properties",
        "description": "Returns all the options of a select HTML element and their properties.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetSelectionProperties",
            "description": "Inputs for IA-Connect BrowserGetSelectionProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "SelectedOptionText": {
                  "type": "string",
                  "title": "Selected option text",
                  "description": "The text value of the currently selected option."
                },
                "SelectedOptionValue": {
                  "type": "string",
                  "title": "Selected option value",
                  "description": "The value of the currently selected option."
                },
                "NumberOfOptions": {
                  "type": "number",
                  "format": "double",
                  "title": "Number of options",
                  "description": "The number of options available to be selected."
                },
                "SelectionOptions": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Selection options",
                  "description": "A collection containing all available option values and whether the option is currently selected."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetSelectionProperties"
      }
    },
    "/BrowserControl/SelectSelection": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Select web selection list item",
        "description": "Selects an option on a select HTML element, either by Text, Value or Index. The text, value or index of each option in a selection can be discovered using the 'Get selection properties' action.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserSelectSelection",
            "description": "Inputs for IA-Connect BrowserSelectSelection action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "ValueToSelect": {
                  "type": "string",
                  "title": "Value to select",
                  "description": "The value of the selection option to select."
                },
                "TextToSelect": {
                  "type": "string",
                  "title": "Text to select",
                  "description": "The text value of the selection option to select."
                },
                "IndexToSelect": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Index to select",
                  "description": "The index of the selection option to select."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserSelectSelection"
      }
    },
    "/BrowserControl/DeselectSelection": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Deselect web selection list item",
        "description": "Deselects an option on a select HTML element, either by Text, Value or Index. The text, value or index of each option in a selection can be discovered using the 'Get selection properties' action.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserDeselectSelection",
            "description": "Inputs for IA-Connect BrowserDeselectSelection action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "ValueToDeselect": {
                  "type": "string",
                  "title": "Value to deselect",
                  "description": "The value of the selection option to deselect."
                },
                "TextToDeselect": {
                  "type": "string",
                  "title": "Text to deselect",
                  "description": "The text value of the selection option to deselect."
                },
                "IndexToDeselect": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Index to deselect",
                  "description": "The index of the selection option to deselect."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserDeselectSelection"
      }
    },
    "/BrowserControl/DeselectAllSelection": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Deselect all items in web selection list",
        "description": "Deselects all currently selected options in a select element that supports multi-select.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserDeselectAllSelection",
            "description": "Inputs for IA-Connect BrowserDeselectAllSelection action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserDeselectAllSelection"
      }
    },
    "/BrowserControl/GetTableContents": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get web table contents",
        "description": "Returns the contents of a HTML table element.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetTableContents",
            "description": "Inputs for IA-Connect BrowserGetTableContents action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "CreateColumnNamesFromRow": {
                  "type": "number",
                  "format": "double",
                  "default": 0,
                  "title": "Create column names from row",
                  "description": "The index number of the row that should be used to create the column headers in the output.",
                  "x-ms-visibility": "advanced"
                },
                "MergeChildTables": {
                  "type": "boolean",
                  "default": false,
                  "title": "Merge child tables",
                  "description": "Should any child tables be merged into the output?",
                  "x-ms-visibility": "advanced"
                },
                "ReturnAsDataTable": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return as DataTable",
                  "description": "Should IA-Connect return the HTML table as a DataTable?",
                  "x-ms-visibility": "internal"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow",
                "ReturnAsDataTable"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfRows": {
                  "type": "number",
                  "format": "double",
                  "title": "Number of rows",
                  "description": "The number of rows in the HTML table"
                },
                "NumberOfColumns": {
                  "type": "number",
                  "format": "double",
                  "title": "Number of columns",
                  "description": "The number of columns in the HTML table"
                },
                "TableContentsJSON": {
                  "type": "string",
                  "title": "Table contents JSON",
                  "description": "The content of the HTML table, in JSON format"
                }
              }
            }
          }
        },
        "operationId": "BrowserGetTableContents"
      }
    },
    "/BrowserControl/ScrollElementIntoView": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Scroll web element into view",
        "description": "Scrolls the web page up, down, left or right until the HTML element is on screen.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserScrollElementIntoView",
            "description": "Inputs for IA-Connect BrowserScrollElementIntoView action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserScrollElementIntoView"
      }
    },
    "/BrowserControl/ExecuteJavaScript": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Execute JavaScript in webpage",
        "description": "Executes the provided JavaScript code in the web page.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserExecuteJavaScript",
            "description": "Inputs for IA-Connect BrowserExecuteJavaScript action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "JavaScriptCode": {
                  "type": "string",
                  "title": "JavaScript code",
                  "description": "The JavaScript code to be executed in the web page."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "JavaScriptCode",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "JavaScriptResponse": {
                  "type": "string",
                  "title": "JavaScript response",
                  "description": "The JavaScript response message received after executing the code."
                }
              }
            }
          }
        },
        "operationId": "BrowserExecuteJavaScript"
      }
    },
    "/BrowserControl/GetElementBoundingRect": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get web element bounding rectangle",
        "description": "Returns the pixel coordinates of the left, right, top, and bottom edges of the HTML element relative to the browser document window (the area which displays the webpage).",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetElementBoundingRect",
            "description": "Inputs for IA-Connect BrowserGetElementBoundingRect action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementLeftPixels": {
                  "type": "number",
                  "format": "double",
                  "title": "Element left pixels",
                  "description": "The coordinate of the element left edge in pixels, relative to the parent browser window."
                },
                "ElementRightPixels": {
                  "type": "number",
                  "format": "double",
                  "title": "Element right pixels",
                  "description": "The coordinate of the element right edge in pixels, relative to the parent browser window."
                },
                "ElementTopPixels": {
                  "type": "number",
                  "format": "double",
                  "title": "Element top pixels",
                  "description": "The coordinate of the element top edge in pixels, relative to the parent browser window."
                },
                "ElementBottomPixels": {
                  "type": "number",
                  "format": "double",
                  "title": "Element bottom pixels",
                  "description": "The coordinate of the element bottom edge in pixels, relative to the parent browser window."
                },
                "ElementCenterXPixels": {
                  "type": "number",
                  "format": "double",
                  "title": "Element center X pixels",
                  "description": "The X coordinate of the center of the element in pixels, relative to the parent browser window."
                },
                "ElementCenterYPixels": {
                  "type": "number",
                  "format": "double",
                  "title": "Element center Y pixels",
                  "description": "The Y coordinate of the center of the element in pixels, relative to the parent browser window."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetElementBoundingRect"
      }
    },
    "/BrowserControl/DrawRectangleAroundElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Draw rectangle around web element",
        "description": "Draws a rectangle around the perimeter of a HTML element to aid in identifying that the element found is the one required. The rectangle is automatically removed after 5 seconds.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserDrawRectangleAroundElement",
            "description": "Inputs for IA-Connect BrowserDrawRectangleAroundElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "PenColour": {
                  "type": "string",
                  "default": "green",
                  "title": "Pen colour",
                  "description": "The colour of the rectangle to be drawn (e.g. red, green, blue, yellow, purple or orange) or a string hex code e.g. #FF0000."
                },
                "PenThicknessPixels": {
                  "type": "integer",
                  "format": "int32",
                  "default": 4,
                  "title": "Pen thickness pixels",
                  "description": "The thickness (in pixels) of the highlight rectangle border."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserDrawRectangleAroundElement"
      }
    },
    "/BrowserControl/GetBrowserParentWindowDetails": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get browser parent window details",
        "description": "Returns properties of the browser parent window that the IA-Connect Agent is currently interacting with.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetBrowserParentWindowDetails",
            "description": "Inputs for IA-Connect BrowserGetBrowserParentWindowDetails action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "BrowserPID": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Browser process Id",
                  "description": "The optional process ID of the running browser process. If this parameter is not specified then IA-Connect will use the process ID of the last browser process that was launched."
                },
                "SearchDocumentElementClassName": {
                  "type": "string",
                  "title": "Search document element class name",
                  "description": "The optional UIA element class name of the browser document element."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "MainWindowElementName": {
                  "type": "string",
                  "title": "Browser parent window element name",
                  "description": "The HTML name of the browser parent window element."
                },
                "MainWindowElementClassName": {
                  "type": "string",
                  "title": "Browser parent window element class name",
                  "description": "The HTML class name of the browser parent window element."
                },
                "MainWindowLeftXPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Browser parent window element left X pixels",
                  "description": "The X coordinate of the browser parent window element left edge in pixels."
                },
                "MainWindowTopYPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Browser parent window element top Y pixels",
                  "description": "The Y coordinate of the browser parent window element top edge in pixels."
                },
                "MainWindowWidthPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Browser parent window element width pixels",
                  "description": "The width of the browser parent window element in pixels."
                },
                "MainWindowHeightPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Browser parent window element height pixels",
                  "description": "The height of the browser parent window element in pixels."
                },
                "DocumentElementName": {
                  "type": "string",
                  "title": "Browser document element name",
                  "description": "The HTML name of the browser document element."
                },
                "DocumentElementClassName": {
                  "type": "string",
                  "title": "Browser document element class name",
                  "description": "The HTML class name of the browser document element."
                },
                "DocumentLeftXPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Browser document element left X pixels",
                  "description": "The X coordinate of the browser document element left edge in pixels."
                },
                "DocumentTopYPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Browser document element top Y pixels",
                  "description": "The Y coordinate of the browser document element top edge in pixels."
                },
                "DocumentWidthPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Browser document element width pixels",
                  "description": "The width of the browser document element in pixels."
                },
                "DocumentHeightPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Browser document element height pixels",
                  "description": "The height of the browser document element in pixels."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetBrowserParentWindowDetails"
      }
    },
    "/BrowserControl/GetElementScreenBoundingRect": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get web element screen bounding rect",
        "description": "Returns the pixel coordinates of the left, right, top, and bottom edges of the HTML element relative to the sessions screen.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetElementScreenBoundingRect",
            "description": "Inputs for IA-Connect BrowserGetElementScreenBoundingRect action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementScreenLeftPixels": {
                  "type": "number",
                  "format": "double",
                  "title": "Element screen left pixels",
                  "description": "The coordinate of the element left edge in pixels, relative to the sessions screen."
                },
                "ElementScreenRightPixels": {
                  "type": "number",
                  "format": "double",
                  "title": "Element screen right pixels",
                  "description": "The coordinate of the element right edge in pixels, relative to the sessions screen."
                },
                "ElementScreenTopPixels": {
                  "type": "number",
                  "format": "double",
                  "title": "Element screen top pixels",
                  "description": "The coordinate of the element top edge in pixels, relative to the sessions screen."
                },
                "ElementScreenBottomPixels": {
                  "type": "number",
                  "format": "double",
                  "title": "Element screen bottom pixels",
                  "description": "The coordinate of the element bottom edge in pixels, relative to the sessions screen."
                },
                "ElementScreenCenterXPixels": {
                  "type": "number",
                  "format": "double",
                  "title": "Element screen center X pixels",
                  "description": "The X coordinate of the center of the element in pixels, relative to the sessions screen."
                },
                "ElementScreenCenterYPixels": {
                  "type": "number",
                  "format": "double",
                  "title": "Element screen center Y pixels",
                  "description": "The Y coordinate of the center of the element in pixels, relative to the sessions screen."
                },
                "ElementIsOnscreen": {
                  "type": "boolean",
                  "title": "Element is onscreen",
                  "description": "Returns true if the element is currently onscreen or false if not."
                },
                "OffscreenDirection": {
                  "type": "string",
                  "title": "Offscreen direction",
                  "description": "If the element is not currently on screen then this will return the offscreen direction (top, bottom, left or right)."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetElementScreenBoundingRect"
      }
    },
    "/BrowserControl/FocusElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Focus web element",
        "description": "Focusses an HTML element. This makes the element the active element for keyboard focus and may bring the element to the foreground.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserFocusElement",
            "description": "Inputs for IA-Connect BrowserFocusElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserFocusElement"
      }
    },
    "/BrowserControl/PressEnterOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Press enter on web element",
        "description": "Presses the enter key on an HTML element. This can be used to submit the element or in some cases to interact with buttons.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserPressEnterOnElement",
            "description": "Inputs for IA-Connect BrowserPressEnterOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserPressEnterOnElement"
      }
    },
    "/BrowserControl/MouseLeftClickOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Simulate mouse left click on web element",
        "description": "Simulates a mouse action by telling the browser that a mouse left click action was performed. This is usually sufficient for the web page to react as expected. If this fails, consider using 'Global mouse left click on element' which moves the mouse and clicks in exactly the same way as a user would.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserMouseLeftClickOnElement",
            "description": "Inputs for IA-Connect BrowserMouseLeftClickOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "FocusFirst": {
                  "type": "boolean",
                  "default": false,
                  "title": "Focus first",
                  "description": "Should the HTML element be focused first before attempting to click?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserMouseLeftClickOnElement"
      }
    },
    "/BrowserControl/MouseRightClickOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Simulate mouse right click on web element",
        "description": "Simulates a mouse action by telling the browser that a mouse right click action was performed. This is usually sufficient for the web page to react as expected. If this fails, consider using 'Global mouse right click on element' which moves the mouse and clicks in exactly the same way as a user would.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserMouseRightClickOnElement",
            "description": "Inputs for IA-Connect BrowserMouseRightClickOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "FocusFirst": {
                  "type": "boolean",
                  "default": false,
                  "title": "Focus first",
                  "description": "Should the HTML element be focused first before attempting to click?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserMouseRightClickOnElement"
      }
    },
    "/BrowserControl/JavaScriptClickOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "JavaScript simulate click on web element",
        "description": "Simulates a mouse action by telling the browser's JavaScript engine to perform a left click. This is an alternative to the action 'Simulate mouse left click on element' and is usually sufficient for the web page to react as expected.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserJavaScriptClickOnElement",
            "description": "Inputs for IA-Connect BrowserJavaScriptClickOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserJavaScriptClickOnElement"
      }
    },
    "/BrowserControl/ExecuteJavaScriptOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Execute JavaScript on web element",
        "description": "Executes the provided JavaScript code on the selected HTML element.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserExecuteJavaScriptOnElement",
            "description": "Inputs for IA-Connect BrowserExecuteJavaScriptOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "JavaScriptToExecute": {
                  "type": "string",
                  "title": "JavaScript code",
                  "description": "The JavaScript code to be executed on the matching element."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "JavaScriptToExecute",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "JavaScriptResponse": {
                  "type": "string",
                  "title": "JavaScript response",
                  "description": "The JavaScript response message received after executing the code."
                }
              }
            }
          }
        },
        "operationId": "BrowserExecuteJavaScriptOnElement"
      }
    },
    "/BrowserControl/GlobalMouseLeftClickOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global mouse left click on web element",
        "description": "Moves the mouse to the centre of an HTML element and presses the left mouse button. This is sometimes used instead of 'Click element' in scenarios where the element expects the mouse to be over the element before you press it.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGlobalMouseLeftClickOnElement",
            "description": "Inputs for IA-Connect BrowserGlobalMouseLeftClickOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetX": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Click offset X",
                  "description": "An optional value in pixels to offset the click from the centre of the matching element. To click further to the right, provide a positive value and to click further to the left, provide a negative value. By default, this is set to 0.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetY": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Click offset Y",
                  "description": "An optional value in pixels to offset the click from the centre of the matching element. To click further down, provide a positive value and to click further up, provide a negative value. By default, this is set to 0.",
                  "x-ms-visibility": "advanced"
                },
                "FocusFirst": {
                  "type": "boolean",
                  "default": false,
                  "title": "Focus first",
                  "description": "Should the HTML element be focused first before attempting to click?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserGlobalMouseLeftClickOnElement"
      }
    },
    "/BrowserControl/GlobalMouseRightClickOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global mouse right click on web element",
        "description": "Moves the mouse to the centre of an HTML element and presses the right mouse button. This is sometimes used instead of 'Click element' in scenarios where the element expects the mouse to be over the element before you press it.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGlobalMouseRightClickOnElement",
            "description": "Inputs for IA-Connect BrowserGlobalMouseRightClickOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetX": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Click offset X",
                  "description": "An optional value in pixels to offset the click from the centre of the matching element. To click further to the right, provide a positive value and to click further to the left, provide a negative value. By default, this is set to 0.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetY": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Click offset Y",
                  "description": "An optional value in pixels to offset the click from the centre of the matching element. To click further down, provide a positive value and to click further up, provide a negative value. By default, this is set to 0.",
                  "x-ms-visibility": "advanced"
                },
                "FocusFirst": {
                  "type": "boolean",
                  "default": false,
                  "title": "Focus first",
                  "description": "Should the HTML element be focused first before attempting to click?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserGlobalMouseRightClickOnElement"
      }
    },
    "/BrowserControl/OpenNewTab": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Open new web browser tab",
        "description": "Opens a new tab in the browser window. In Internet Explorer, this action opens a new window but the new window behaves as a tab and can be interacted with in the same way as a tab with the 'Get browser tabs' or 'Set browser tab' actions.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserOpenNewTab",
            "description": "Inputs for IA-Connect BrowserOpenNewTab action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "URL": {
                  "type": "string",
                  "title": "URL",
                  "description": "The URL of the page to be opened in a new tab."
                },
                "SwitchControlToNewTab": {
                  "type": "boolean",
                  "default": true,
                  "title": "Switch control to new tab",
                  "description": "If set to true, IA-Connect will switch control to the new tab. If set to false, control will be kept in the current tab."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NewTabName": {
                  "type": "string",
                  "title": "New tab name",
                  "description": "The internal tab name of the new tab."
                },
                "NewTabIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "New tab index",
                  "description": "The tab index of the new tab."
                }
              }
            }
          }
        },
        "operationId": "BrowserOpenNewTab"
      }
    },
    "/BrowserControl/GetTabs": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get web browser tabs",
        "description": "Returns the current tabs that are open in the browser window.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetTabs",
            "description": "Inputs for IA-Connect BrowserGetTabs action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfTabs": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of tabs",
                  "description": "The number of tabs that are currently open in the browser window."
                },
                "CurrentTabHandle": {
                  "type": "string",
                  "title": "Current tab handle",
                  "description": "An internal browser tab handle string."
                },
                "BrowserTabsJSON": {
                  "type": "string",
                  "title": "Browser tabs as JSON",
                  "description": "The properties of the open browser tabs, in JSON format."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetTabs"
      }
    },
    "/BrowserControl/SetTab": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set web browser tab",
        "description": "Sets the active tab and switches the IA-Connect Agent to control this tab so that it can interact with it.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserSetTab",
            "description": "Inputs for IA-Connect BrowserSetTab action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "TabName": {
                  "type": "string",
                  "title": "Tab name",
                  "description": "The internal tab name to switch to. This can be retrieved from the 'Get browser tabs' action."
                },
                "TabIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Tab index",
                  "description": "The tab index of the tab to switch to."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserSetTab"
      }
    },
    "/BrowserControl/CloseActiveTab": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Close active web browser tab",
        "description": "Closes the current active browser tab. After calling this action the IA-Connect Agent will not switch to a new active tab by default. To re-attach to another tab you will need to the call 'Set browser tab' action before attempting to interact with the page.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserCloseActiveTab",
            "description": "Inputs for IA-Connect BrowserCloseActiveTab action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserCloseActiveTab"
      }
    },
    "/BrowserControl/SavePageToFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Save webpage to file",
        "description": "Saves the current HTML page to a file on disk.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserSavePageToFile",
            "description": "Inputs for IA-Connect BrowserSavePageToFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SaveFilename": {
                  "type": "string",
                  "title": "Filename",
                  "description": "The full file path to save the current HTML page to."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SaveFilename",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserSavePageToFile"
      }
    },
    "/BrowserControl/GetPageText": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get webpage text",
        "description": "Gets all the text on the current page by selecting the entire browser page, copying it into the clipboard in the session where the IA-Connect Agent is running and then returning the clipboard contents.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetPageText",
            "description": "Inputs for IA-Connect BrowserGetPageText action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "PageText": {
                  "type": "string",
                  "title": "Page text",
                  "description": "Returns all of the text on the current page."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetPageText"
      }
    },
    "/BrowserControl/SwitchToFrameElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Switch to webpage frame",
        "description": "Switches the IA-Connect Agent to controlling or interacting with an alternative frame within a browser page.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserSwitchToFrameElement",
            "description": "Inputs for IA-Connect BrowserSwitchToFrameElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserSwitchToFrameElement"
      }
    },
    "/BrowserControl/GetCurrentFrameWindowPixelCoordinate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get current webpage frame window pixel coordinate",
        "description": "Returns the pixel coordinates of the current HTML frame, relative to the browser document window (the area which displays the webpage).",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserGetCurrentFrameWindowPixelCoordinate",
            "description": "Inputs for IA-Connect BrowserGetCurrentFrameWindowPixelCoordinate action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "X": {
                  "type": "integer",
                  "format": "int32",
                  "title": "X",
                  "description": "The X coordinate in pixels of the top left corner of the current HTML frame, relative to the browser document window."
                },
                "Y": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y",
                  "description": "The Y coordinate in pixels of the top left corner of the current HTML frame, relative to the browser document window."
                },
                "Width": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Width",
                  "description": "The width of the current HTML frame."
                },
                "Height": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Height",
                  "description": "The height of the current HTML frame."
                }
              }
            }
          }
        },
        "operationId": "BrowserGetCurrentFrameWindowPixelCoordinate"
      }
    },
    "/BrowserControl/SwitchToParentFrameElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Switch to webpage parent frame",
        "description": "Switches the IA-Connect Agent to controlling or interacting with the parent frame of the current frame within a web page.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserSwitchToParentFrameElement",
            "description": "Inputs for IA-Connect BrowserSwitchToParentFrameElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserSwitchToParentFrameElement"
      }
    },
    "/BrowserControl/SwitchToRootFrameElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Switch to webpage root frame",
        "description": "Switches the IA-Connect Agent to controlling or interacting with the root frame within a web page.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserSwitchToRootFrameElement",
            "description": "Inputs for IA-Connect BrowserSwitchToRootFrameElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserSwitchToRootFrameElement"
      }
    },
    "/BrowserControl/ResetFrameStack": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Reset browser webpage frame stack",
        "description": "Resets the browser frame stack. This should only be used if approved by Ultima Technical Support.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserResetFrameStack",
            "description": "Inputs for IA-Connect BrowserResetFrameStack action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserResetFrameStack"
      }
    },
    "/BrowserControl/ClearElementText": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Clear all web element text",
        "description": "Clears all existing text from a web element.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserClearElementText",
            "description": "Inputs for IA-Connect BrowserClearElementText action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "PreviousValue": {
                  "type": "string",
                  "title": "Previous value",
                  "description": "The previous value of the matching element before it was cleared."
                }
              }
            }
          }
        },
        "operationId": "BrowserClearElementText"
      }
    },
    "/BrowserControl/CopySelectedTextOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Copy selected text on web element",
        "description": "Copies all of the currently selected text from a web element into the clipboard.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserCopySelectedTextOnElement",
            "description": "Inputs for IA-Connect BrowserCopySelectedTextOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserCopySelectedTextOnElement"
      }
    },
    "/BrowserControl/InputPasswordIntoElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Input password into web element",
        "description": "Inputs a password into a HTML element (typically a text input field), either replacing the existing value or appending the new value to any existing value.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserInputPasswordIntoElement",
            "description": "Inputs for IA-Connect BrowserInputPasswordIntoElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "PasswordToInput": {
                  "type": "string",
                  "format": "password",
                  "title": "Password to input",
                  "description": "The password value to enter into the matching element. If the 'Reset existing value' parameter is set to true then any existing text in the element will be overwritten. If the 'Reset existing value' parameter is set to false, then this will be appended to the existing text."
                },
                "ResetExistingValue": {
                  "type": "boolean",
                  "default": true,
                  "title": "Reset existing value",
                  "description": "Should any existing text in the matching element be removed? By default, this is set to true."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "PasswordToInput",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserInputPasswordIntoElement"
      }
    },
    "/BrowserControl/PasteIntoElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Paste into web element",
        "description": "Pastes the contents of the clipboard into a HTML element (typically a text input field).",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserPasteIntoElement",
            "description": "Inputs for IA-Connect BrowserPasteIntoElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserPasteIntoElement"
      }
    },
    "/BrowserControl/PrintCurrentPage": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Print the current web page",
        "description": "Prints the current web page.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserPrintCurrentPage",
            "description": "Inputs for IA-Connect BrowserPrintCurrentPage action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserPrintCurrentPage"
      }
    },
    "/BrowserControl/ScrollWindowByPixels": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Scroll browser window by pixels",
        "description": "Scrolls the browser window by the specified number of pixels.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserScrollWindowByPixels",
            "description": "Inputs for IA-Connect BrowserScrollWindowByPixels action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "X": {
                  "type": "number",
                  "format": "double",
                  "title": "X pixels",
                  "description": "The number of X pixels to scroll the window. A positive number of pixels will scroll to the right and a negative number will scroll to the left."
                },
                "Y": {
                  "type": "number",
                  "format": "double",
                  "title": "Y pixels",
                  "description": "The number of Y pixels to scroll the window. A positive number of pixels will scroll down and a negative number will scroll up."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserScrollWindowByPixels"
      }
    },
    "/BrowserControl/ScrollWindowToPixels": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Scroll browser window to pixels",
        "description": "Scrolls the browser window to the specified pixel coordinates.",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserScrollWindowToPixels",
            "description": "Inputs for IA-Connect BrowserScrollWindowToPixels action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "X": {
                  "type": "number",
                  "format": "double",
                  "title": "X pixels",
                  "description": "The X pixel to scroll the current window to, with 0 being the left-most edge."
                },
                "Y": {
                  "type": "number",
                  "format": "double",
                  "title": "Y pixels",
                  "description": "The Y pixel to scroll the current window to, with 0 being the top-most edge."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserScrollWindowToPixels"
      }
    },
    "/BrowserControl/SelectAllOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Select all on a web element",
        "description": "Selects all of the contents of a HTML element (typically a text field).",
        "parameters": [
          {
            "in": "body",
            "name": "BrowserSelectAllOnElement",
            "description": "Inputs for IA-Connect BrowserSelectAllOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Parent Element handle",
                  "description": "The parent element handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Create handle to element'. If no value is provided then the whole page DOM structure is searched."
                },
                "SearchElementHandle": {
                  "type": "number",
                  "format": "double",
                  "title": "Search Element handle",
                  "description": "The element handle to the target element. This could be located using 'Get multiple element properties' or some other search which returns an element handle. If a value is entered into this field then all other search criteria are ignored since this handle uniquely identifies an element and hence no other details are required."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search Element name",
                  "description": "The optional HTML name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementID": {
                  "type": "string",
                  "title": "Search Element ID",
                  "description": "The optional HTML ID of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementTagName": {
                  "type": "string",
                  "title": "Search Element tag name",
                  "description": "The optional HTML tag name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementXPath": {
                  "type": "string",
                  "title": "Search Element XPath",
                  "description": "An optional XPath query to identify the element. Wildcards are supported."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search Element class name",
                  "description": "The optional HTML class name of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementCSSSelector": {
                  "type": "string",
                  "title": "Search Element CSS selector",
                  "description": "An optional CSS selector to identify the element. Wildcards are supported."
                },
                "SearchElementIndex": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched."
                },
                "SearchElementMatchValue": {
                  "type": "string",
                  "title": "Search Element match value",
                  "description": "The optional HTML value of the element to search for. This can be discovered via inspection.Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMatchText": {
                  "type": "string",
                  "title": "Search Element match text",
                  "description": "The optional HTML text value of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementType": {
                  "type": "string",
                  "title": "Search Element type",
                  "description": "The optional HTML type of the element to search for. This can be discovered via inspection. Wildcards are not supported in this parameter but can instead be used as part of an XPath or CSS selector."
                },
                "SearchElementMinimumWidth": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum width",
                  "description": "An optional minimum width of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a width of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementMinimumHeight": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Search Element minimum height",
                  "description": "An optional minimum height of elements to be returned. By default, this is set to 1 to avoid returning hidden elements which typically have a height of 0.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxLeft": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box left",
                  "description": "An optional HTML document coordinate value for the left side of the bounding box in whichthe search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxRight": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box right",
                  "description": "An optional HTML document coordinate value for the right side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxTop": {
                  "type": "number",
                  "format": "double",
                  "default": -99999,
                  "title": "Search Element bounding box top",
                  "description": "An optional HTML document coordinate value for the top side of the bounding box in which the search element should be found. By default, this is set to -99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "SearchElementBoundingBoxBottom": {
                  "type": "number",
                  "format": "double",
                  "default": 99999,
                  "title": "Search Element bounding box bottom",
                  "description": "An optional HTML document coordinate value for the bottom side of the bounding box in which the search element should be found. By default, this is set to 99999 to return all elements.",
                  "x-ms-visibility": "advanced"
                },
                "OnlyElementTopLeftNeedsToBeInBoundingBox": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only Element top left needs to be in bounding box",
                  "description": "Should only the top left of the search element found within the bounding box, or the entire element. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BrowserSelectAllOnElement"
      }
    }
  },
  "definitions": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "RESTAPIKey"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": []
}