{
  "swagger": "2.0",
  "info": {
    "description": "Allow interaction with impower.de accounting system for property managers ",
    "x-ms-summary": "Allow interaction with impower.de accounting system for property managers ",
    "version": "2.227.915b4950",
    "title": "Impower ERP",
    "termsOfService": "https://impower.de",
    "contact": {
      "name": "Api Support",
      "url": "https://impower.de",
      "email": "support+api@impower.de"
    },
    "license": {
      "name": "Private License",
      "url": "https://impower.de"
    }
  },
  "host": "api.app.impower.de",
  "tags": [
    {
      "name": "Connection",
      "description": "Connection Controller",
      "x-ms-summary": "Connection Controller"
    },
    {
      "name": "Contact",
      "description": "Contact Controller",
      "x-ms-summary": "Contact Controller"
    },
    {
      "name": "Contract",
      "description": "Contract Controller",
      "x-ms-summary": "Contract Controller"
    },
    {
      "name": "Document",
      "description": "Document Controller",
      "x-ms-summary": "Document Controller"
    },
    {
      "name": "Document Tag",
      "description": "Document Tag Controller",
      "x-ms-summary": "Document Tag Controller"
    },
    {
      "name": "Error Code",
      "description": "Error Code Controller",
      "x-ms-summary": "Error Code Controller"
    },
    {
      "name": "Invoice",
      "description": "Invoice Controller",
      "x-ms-summary": "Invoice Controller"
    },
    {
      "name": "Invoice Item",
      "description": "Invoice Item Controller",
      "x-ms-summary": "Invoice Item Controller"
    },
    {
      "name": "Property",
      "description": "Property Controller",
      "x-ms-summary": "Property Controller"
    },
    {
      "name": "Unit",
      "description": "Unit Controller",
      "x-ms-summary": "Unit Controller"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/api/v1/error-codes": {
      "get": {
        "tags": [
          "Error Code"
        ],
        "summary": "Get all predefined error code values",
        "description": "Returns a list of all predefined error codes",
        "x-ms-summary": "Returns a list of all predefined error codes",
        "operationId": "errorCodesUsingGET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "BAD_CONTACT_ADDRESS",
                  "BAD_TYPE_OF_EP",
                  "BAD_STATE_OF_EP",
                  "DUPLICATE_START_DATE",
                  "MISSING_CORRECTION_BOOKING_DATE",
                  "INVALID_ACCOUNT_AMOUNTS",
                  "INVALID_PROPERTY",
                  "NOT_FOUND",
                  "MUST_REGENERATE_HGA",
                  "FAILED_RETRIEVING_REQUIRED_DATA",
                  "WATERMARK_PDF_MUST_BE_ONE_PAGE",
                  "DOCUMENT_DOCUMENT_IS_REFERENCED",
                  "DS_NAME_NOT_UNIQUE",
                  "DV_INVALID_START_END_DATE_MARKERS",
                  "DV_INVALID",
                  "USER_DOMAIN_ALREADY_EXISTS",
                  "USER_DOMAIN_REGISTRATION_DISABLED",
                  "COMMON_VALIDATION_INVALID_DATA",
                  "WEG_OWNED_UNIT_CANNOT_HAVE_OWNER_CONTRACT"
                ]
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/api/v1/error-codes/{value}": {
      "get": {
        "tags": [
          "Error Code"
        ],
        "summary": "Get details of a specific error code",
        "description": "Retrieves the description of a specific error code",
        "x-ms-summary": "Retrieves the description of a specific error code",
        "operationId": "errorCodeUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "value",
            "x-ms-summary": "value",
            "required": true,
            "type": "string",
            "enum": [
              "BAD_CONTACT_ADDRESS",
              "BAD_TYPE_OF_EP",
              "BAD_STATE_OF_EP",
              "DUPLICATE_START_DATE",
              "MISSING_CORRECTION_BOOKING_DATE",
              "INVALID_ACCOUNT_AMOUNTS",
              "INVALID_PROPERTY",
              "NOT_FOUND",
              "MUST_REGENERATE_HGA",
              "FAILED_RETRIEVING_REQUIRED_DATA",
              "WATERMARK_PDF_MUST_BE_ONE_PAGE",
              "DOCUMENT_DOCUMENT_IS_REFERENCED",
              "DS_NAME_NOT_UNIQUE",
              "DV_INVALID_START_END_DATE_MARKERS",
              "DV_INVALID",
              "USER_DOMAIN_ALREADY_EXISTS",
              "USER_DOMAIN_REGISTRATION_DISABLED",
              "COMMON_VALIDATION_INVALID_DATA",
              "WEG_OWNED_UNIT_CANNOT_HAVE_OWNER_CONTRACT"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/ErrorCodeDetailsDto"
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/connections": {
      "x-ms-notification-content": {
        "schema": {
          "$ref": "#/definitions/ConnectionNotificationDto"
        },
        "headers": {
          "Content-type": {
            "description": "Content-type",
            "type": "string"
          }
        },
        "description": "The body of the webhook"
      },
      "post": {
        "tags": [
          "Connection"
        ],
        "summary": "Create an application connection",
        "description": "Create an application connection",
        "x-ms-summary": "Create an application connection",
        "operationId": "createConnectionUsingPOST",
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectionCreateDto",
            "description": "Connection data. appId: 4(powerautomate); 8(generic rest app)",
            "x-ms-summary": "Connection data. appId: 4(powerautomate); 8(generic rest app)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectionCreateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/ConnectionDto"
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/connections/{connectionIdX}": {
      "put": {
        "tags": [
          "Connection"
        ],
        "summary": "Update a connection",
        "description": "Update a connection",
        "x-ms-summary": "Update a connection",
        "operationId": "updateConnectionUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionIdX",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "Id of the connection",
            "x-ms-summary": "Id of the connection",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "connectionUpdateDto",
            "description": "Information for updating a connection",
            "x-ms-summary": "Information for updating a connection",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConnectionUpdateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/ConnectionDto"
            }
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Connection"
        ],
        "summary": "Delete a connection",
        "description": "Delete a connection",
        "x-ms-summary": "Delete a connection",
        "operationId": "deleteConnectionUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "connectionIdX",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "Id of the connection",
            "x-ms-summary": "Id of the connection",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "x-ms-summary": "No Content"
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      },
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Read a connection",
        "description": "Read a connection",
        "x-ms-summary": "Read a connection",
        "operationId": "getConnectionUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "connectionIdX",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "The id of the connection",
            "x-ms-summary": "The id of the connection",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/ConnectionDto"
            }
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/contacts": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Get contacts by the given filter parameters",
        "description": "Retrieve contacts by the given filter parameters",
        "x-ms-summary": "Retrieve contacts by the given filter parameters",
        "operationId": "getContactsByFilterUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactIds",
            "in": "query",
            "description": "List of contact ids to filter contacts by.",
            "x-ms-summary": "List of contact ids to filter contacts by.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email address of the contact.",
            "x-ms-summary": "Email address of the contact.",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Any name of the contact. Might be first name, last name or company name.",
            "x-ms-summary": "Any name of the contact. Might be first name, last name or company name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorting direction. Possible values: ASC, DESC",
            "x-ms-summary": "Sorting direction. Possible values: ASC, DESC",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to be returned",
            "x-ms-summary": "Page number to be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to be returned in single page",
            "x-ms-summary": "Number of items to be returned in single page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting parameter",
            "x-ms-summary": "Sorting parameter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfContactDto"
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/contacts/{contactId}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Get a contact by the given id",
        "description": "Retrieves a contact by the given id",
        "x-ms-summary": "Retrieves a contact by the given id",
        "operationId": "getContactByIdUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "Unique identifier of a contact",
            "x-ms-summary": "Unique identifier of a contact",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/ContactDto"
            }
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/contracts": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get contracts by the given filter parameters",
        "description": "Retrieve contracts by the given filter parameters",
        "x-ms-summary": "Retrieve contracts by the given filter parameters",
        "operationId": "getContractsByFilterUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "query",
            "description": "ID of the contact instance the contract is associated with.",
            "x-ms-summary": "ID of the contact instance the contract is associated with.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "contractIds",
            "in": "query",
            "description": "List of contract ids to filter contracts by.",
            "x-ms-summary": "List of contract ids to filter contracts by.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorting direction. Possible values: ASC, DESC",
            "x-ms-summary": "Sorting direction. Possible values: ASC, DESC",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to be returned",
            "x-ms-summary": "Page number to be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "propertyId",
            "in": "query",
            "description": "ID of the property instance the contract belongs to.",
            "x-ms-summary": "ID of the property instance the contract belongs to.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to be returned in single page",
            "x-ms-summary": "Number of items to be returned in single page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting parameter",
            "x-ms-summary": "Sorting parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the contract. Options: OWNER | TENANT | PROPERTY_OWNER",
            "x-ms-summary": "Type of the contract. Options: OWNER | TENANT | PROPERTY_OWNER",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "OWNER",
                "TENANT",
                "PROPERTY_OWNER"
              ]
            }
          },
          {
            "name": "unitId",
            "in": "query",
            "description": "ID of the unit instance the contract is associated with.",
            "x-ms-summary": "ID of the unit instance the contract is associated with.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "validAtDate",
            "in": "query",
            "description": "Return valid contracts at date. Null is interpreted as beginning/end of time.",
            "x-ms-summary": "Return valid contracts at date. Null is interpreted as beginning/end of time.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfContractDto"
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/contracts/{contractId}": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get a contract by the given id",
        "description": "Retrieves a contract by the given id",
        "x-ms-summary": "Retrieves a contract by the given id",
        "operationId": "getContractByIdUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "Unique identifier of a contract",
            "x-ms-summary": "Unique identifier of a contract",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/ContractDto"
            }
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/document-tags": {
      "get": {
        "tags": [
          "Document Tag"
        ],
        "summary": "Get document tags",
        "description": "Standard and domain specific document tags will be returned as response",
        "x-ms-summary": "Standard and domain specific document tags will be returned as response",
        "operationId": "getDocumentTagsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "Search string applied to name and description",
            "x-ms-summary": "Search string applied to name and description",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentTagDto"
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Document Tag"
        ],
        "summary": "Create a new document tag",
        "description": "The newly created document tag will be returned as response",
        "x-ms-summary": "The newly created document tag will be returned as response",
        "operationId": "createDocumentTagUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createDto",
            "description": "createDto",
            "x-ms-summary": "createDto",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTagCreateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentTagDto"
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/document-tags/{tagId}": {
      "put": {
        "tags": [
          "Document Tag"
        ],
        "summary": "Update an existing document tag based on the given id",
        "description": "The updated document tag will be returned as response",
        "x-ms-summary": "The updated document tag will be returned as response",
        "operationId": "updateDocumentTagUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "Unique identifier of a document tag",
            "x-ms-summary": "Unique identifier of a document tag",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateDto",
            "description": "updateDto",
            "x-ms-summary": "updateDto",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentTagUpdateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentTagDto"
            }
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Document Tag"
        ],
        "summary": "Delete an existing document tag based on the given id",
        "description": "System generated tags cannot be deleted",
        "x-ms-summary": "System generated tags cannot be deleted",
        "operationId": "deleteDocumentTagUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "Unique identifier of the document tag to be deleted",
            "x-ms-summary": "Unique identifier of the document tag to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK"
          },
          "204": {
            "description": "No Content",
            "x-ms-summary": "No Content"
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          },
          "409": {
            "description": "Conflict",
            "x-ms-summary": "Conflict"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/documents": {
      "get": {
        "tags": [
          "Document"
        ],
        "summary": "Get documents by the given filter parameters",
        "description": "Retrieve documents by the given filter parameters",
        "x-ms-summary": "Retrieve documents by the given filter parameters",
        "operationId": "getDocumentsByFilterUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountant",
            "in": "query",
            "description": "Accountant name of the property.",
            "x-ms-summary": "Accountant name of the property.",
            "required": false,
            "type": "string"
          },
          {
            "name": "administrator",
            "in": "query",
            "description": "Administrator name of the property.",
            "x-ms-summary": "Administrator name of the property.",
            "required": false,
            "type": "string"
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "ID of the contact entity the document belongs to.",
            "x-ms-summary": "ID of the contact entity the document belongs to.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "contractName",
            "in": "query",
            "description": "Documents linked to contracts with similar name.",
            "x-ms-summary": "Documents linked to contracts with similar name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "documentIds",
            "in": "query",
            "description": "IDs of the documents to be returned.",
            "x-ms-summary": "IDs of the documents to be returned.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "documentName",
            "in": "query",
            "description": "Name of the documents to be returned.",
            "x-ms-summary": "Name of the documents to be returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "issuedDate",
            "in": "query",
            "description": "Issued date of the document.",
            "x-ms-summary": "Issued date of the document.",
            "required": false,
            "type": "string"
          },
          {
            "name": "maxIssuedDate",
            "in": "query",
            "description": "Documents having issued date before.",
            "x-ms-summary": "Documents having issued date before.",
            "required": false,
            "type": "string"
          },
          {
            "name": "minIssuedDate",
            "in": "query",
            "description": "Documents having issued date after.",
            "x-ms-summary": "Documents having issued date after.",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorting direction. Possible values: ASC, DESC",
            "x-ms-summary": "Sorting direction. Possible values: ASC, DESC",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to be returned",
            "x-ms-summary": "Page number to be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "propertyHrId",
            "in": "query",
            "description": "Human readable id of the property the document belongs to.",
            "x-ms-summary": "Human readable id of the property the document belongs to.",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyId",
            "in": "query",
            "description": "ID of the property the document belongs to.",
            "x-ms-summary": "ID of the property the document belongs to.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "propertyName",
            "in": "query",
            "description": "Name of the property the document belongs to.",
            "x-ms-summary": "Name of the property the document belongs to.",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to be returned in single page",
            "x-ms-summary": "Number of items to be returned in single page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting parameter",
            "x-ms-summary": "Sorting parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceId",
            "in": "query",
            "description": "ID of the source entity the document belongs to.",
            "x-ms-summary": "ID of the source entity the document belongs to.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sourceType",
            "in": "query",
            "description": "Source types of the document.",
            "x-ms-summary": "Source types of the document.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "HOUSE_MONEY_SETTLEMENT",
                "ECONOMIC_PLAN",
                "BANK_ORDER",
                "BANK_TRANSACTION",
                "HEATING_COST_DISTRIBUTION",
                "INVOICE",
                "SERIAL_LETTER",
                "OWNERS_MEETING_INVITATION",
                "OWNERS_MEETING_PROTOCOL",
                "PROFIT_AND_LOSS",
                "OPS_COST_REPORT",
                "SPECIAL_CONTRIBUTION",
                "DUNNING_ANNEX",
                "DUNNING",
                "DUNNING_DD_MANDATE",
                "WATERMARK",
                "MESSAGE",
                "OTHER"
              ]
            }
          },
          {
            "name": "tagIds",
            "in": "query",
            "description": "IDs of tags the document is associated to.",
            "x-ms-summary": "IDs of tags the document is associated to.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tagName",
            "in": "query",
            "description": "Similar name of tag the document is associate to.",
            "x-ms-summary": "Similar name of tag the document is associate to.",
            "required": false,
            "type": "string"
          },
          {
            "name": "unitId",
            "in": "query",
            "description": "ID of the unit entity the document belongs to.",
            "x-ms-summary": "ID of the unit entity the document belongs to.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfDocumentDto"
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "Document"
        ],
        "summary": "Update an existing document based on the given request body",
        "description": "All the need information is in the request body",
        "x-ms-summary": "All the need information is in the request body",
        "operationId": "updateDocumentsUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "documentUpdateDtos",
            "description": "documentUpdateDtos",
            "x-ms-summary": "documentUpdateDtos",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentUpdateDto"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentDto"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/documents/download-zip": {
      "get": {
        "tags": [
          "Document"
        ],
        "summary": "Download multiple documents by given filter conditions",
        "description": "Documents come in zip format",
        "x-ms-summary": "Documents come in zip format",
        "operationId": "downloadDocumentsByFilterUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountant",
            "in": "query",
            "description": "Accountant name of the property.",
            "x-ms-summary": "Accountant name of the property.",
            "required": false,
            "type": "string"
          },
          {
            "name": "administrator",
            "in": "query",
            "description": "Administrator name of the property.",
            "x-ms-summary": "Administrator name of the property.",
            "required": false,
            "type": "string"
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "ID of the contact entity the document belongs to.",
            "x-ms-summary": "ID of the contact entity the document belongs to.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "contractName",
            "in": "query",
            "description": "Documents linked to contracts with similar name.",
            "x-ms-summary": "Documents linked to contracts with similar name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "documentIds",
            "in": "query",
            "description": "IDs of the documents to be returned.",
            "x-ms-summary": "IDs of the documents to be returned.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "documentName",
            "in": "query",
            "description": "Name of the documents to be returned.",
            "x-ms-summary": "Name of the documents to be returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "issuedDate",
            "in": "query",
            "description": "Issued date of the document.",
            "x-ms-summary": "Issued date of the document.",
            "required": false,
            "type": "string"
          },
          {
            "name": "maxIssuedDate",
            "in": "query",
            "description": "Documents having issued date before.",
            "x-ms-summary": "Documents having issued date before.",
            "required": false,
            "type": "string"
          },
          {
            "name": "minIssuedDate",
            "in": "query",
            "description": "Documents having issued date after.",
            "x-ms-summary": "Documents having issued date after.",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyHrId",
            "in": "query",
            "description": "Human readable id of the property the document belongs to.",
            "x-ms-summary": "Human readable id of the property the document belongs to.",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyId",
            "in": "query",
            "description": "ID of the property the document belongs to.",
            "x-ms-summary": "ID of the property the document belongs to.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "propertyName",
            "in": "query",
            "description": "Name of the property the document belongs to.",
            "x-ms-summary": "Name of the property the document belongs to.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceId",
            "in": "query",
            "description": "ID of the source entity the document belongs to.",
            "x-ms-summary": "ID of the source entity the document belongs to.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sourceType",
            "in": "query",
            "description": "Source types of the document.",
            "x-ms-summary": "Source types of the document.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "HOUSE_MONEY_SETTLEMENT",
                "ECONOMIC_PLAN",
                "BANK_ORDER",
                "BANK_TRANSACTION",
                "HEATING_COST_DISTRIBUTION",
                "INVOICE",
                "SERIAL_LETTER",
                "OWNERS_MEETING_INVITATION",
                "OWNERS_MEETING_PROTOCOL",
                "PROFIT_AND_LOSS",
                "OPS_COST_REPORT",
                "SPECIAL_CONTRIBUTION",
                "DUNNING_ANNEX",
                "DUNNING",
                "DUNNING_DD_MANDATE",
                "WATERMARK",
                "MESSAGE",
                "OTHER"
              ]
            }
          },
          {
            "name": "tagIds",
            "in": "query",
            "description": "IDs of tags the document is associated to.",
            "x-ms-summary": "IDs of tags the document is associated to.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tagName",
            "in": "query",
            "description": "Similar name of tag the document is associate to.",
            "x-ms-summary": "Similar name of tag the document is associate to.",
            "required": false,
            "type": "string"
          },
          {
            "name": "unitId",
            "in": "query",
            "description": "ID of the unit entity the document belongs to.",
            "x-ms-summary": "ID of the unit entity the document belongs to.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/documents/upload": {
      "post": {
        "tags": [
          "Document"
        ],
        "summary": "Create a new document based on given the file",
        "description": "The newly created document will be returned as response",
        "x-ms-summary": "The newly created document will be returned as response",
        "operationId": "createDocumentByUploadUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "PDF file to upload",
            "x-ms-summary": "PDF file to upload",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentDto"
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/documents/{documentId}": {
      "delete": {
        "tags": [
          "Document"
        ],
        "summary": "Delete an existing document based on the given id",
        "description": "System generated documents cannot be deleted",
        "x-ms-summary": "System generated documents cannot be deleted",
        "operationId": "deleteDocumentUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "documentId",
            "x-ms-summary": "documentId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK"
          },
          "204": {
            "description": "No Content",
            "x-ms-summary": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "x-ms-summary": "Bad Request"
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/documents/{documentId}/download": {
      "get": {
        "tags": [
          "Document"
        ],
        "summary": "Download a single document by given id",
        "description": "Format of the document is defined by the mimetype",
        "x-ms-summary": "Format of the document is defined by the mimetype",
        "operationId": "downloadUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "Unique identifier of a document",
            "x-ms-summary": "Unique identifier of a document",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/invoice-items/{invoiceItemId}": {
      "put": {
        "tags": [
          "Invoice Item"
        ],
        "summary": "Update booking text of the given invoice booking item",
        "description": "Update booking text",
        "x-ms-summary": "Update booking text",
        "operationId": "updateInvoiceItemUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceItemId",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "Unique id of invoice booking item",
            "x-ms-summary": "Unique id of invoice booking item",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateDto",
            "description": "updateDto",
            "x-ms-summary": "updateDto",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceItemUpdateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/InvoiceItemDto"
            }
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/invoices": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Get invoices by the given filter parameters",
        "description": "Retrieves invoices by the given filter parameters",
        "x-ms-summary": "Retrieves invoices by the given filter parameters",
        "operationId": "getInvoicesByFilterUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "counterpartContactId",
            "in": "query",
            "description": "Unique identifier of the counterpart contact",
            "x-ms-summary": "Unique identifier of the counterpart contact",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "issuedDate",
            "in": "query",
            "description": "Date of the invoices to be retrieved",
            "x-ms-summary": "Date of the invoices to be retrieved",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorting direction. Possible values: ASC, DESC",
            "x-ms-summary": "Sorting direction. Possible values: ASC, DESC",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to be returned",
            "x-ms-summary": "Page number to be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "propertyId",
            "in": "query",
            "description": "Unique identifier of the property an invoice belongs to",
            "x-ms-summary": "Unique identifier of the property an invoice belongs to",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to be returned in single page",
            "x-ms-summary": "Number of items to be returned in single page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting parameter",
            "x-ms-summary": "Sorting parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "states",
            "in": "query",
            "description": "States of the invoices to be retrieved",
            "x-ms-summary": "States of the invoices to be retrieved",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DRAFT",
                "READY",
                "BOOKED",
                "SCHEDULED",
                "REVERSED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfInvoiceDto"
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/invoices/upload": {
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Upload invoice PDF document",
        "description": "By default, the document will go though an OCR analysis",
        "x-ms-summary": "By default, the document will go though an OCR analysis",
        "operationId": "uploadInvoiceUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "PDF file of an invoice",
            "x-ms-summary": "PDF file of an invoice",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "x-ms-summary": "Ok",
            "schema": {
              "$ref": "#/definitions/InvoiceDto"
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/invoices/{invoiceId}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Get a invoice by the given id",
        "description": "Retrieves an invoice by the given id",
        "x-ms-summary": "Retrieves an invoice by the given id",
        "operationId": "getInvoiceByIdUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "Unique identifier of an invoice",
            "x-ms-summary": "Unique identifier of an invoice",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/InvoiceDto"
            }
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "Invoice"
        ],
        "summary": "Update an invoice based on provided fields",
        "description": "Update invoice",
        "x-ms-summary": "Update invoice",
        "operationId": "updateInvoiceUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "Unique id of an invoice",
            "x-ms-summary": "Unique id of an invoice",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateDto",
            "description": "updateDto",
            "x-ms-summary": "updateDto",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceUpdateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/InvoiceDto"
            }
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/properties": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "Get properties by the given filter parameters",
        "description": "Retrieve properties by the given filter parameters",
        "x-ms-summary": "Retrieve properties by the given filter parameters",
        "operationId": "getPropertiesByFilterUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the property.",
            "x-ms-summary": "Name of the property.",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sorting direction. Possible values: ASC, DESC",
            "x-ms-summary": "Sorting direction. Possible values: ASC, DESC",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to be returned",
            "x-ms-summary": "Page number to be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "propertyHrId",
            "in": "query",
            "description": "Human readable id of the property.",
            "x-ms-summary": "Human readable id of the property.",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to be returned in single page",
            "x-ms-summary": "Number of items to be returned in single page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting parameter",
            "x-ms-summary": "Sorting parameter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfPropertyDto"
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/properties/{propertyId}": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "Get a property by the given id",
        "description": "Retrieves a property by the given id",
        "x-ms-summary": "Retrieves a property by the given id",
        "operationId": "getPropertyByIdUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "Unique identifier of a property",
            "x-ms-summary": "Unique identifier of a property",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/PropertyDto"
            }
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/units": {
      "get": {
        "tags": [
          "Unit"
        ],
        "summary": "Get all units by given filter parameters",
        "description": "Returns all units respecting the given filter criteria",
        "x-ms-summary": "Returns all units respecting the given filter criteria",
        "operationId": "getUnitsByFilterUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order",
            "in": "query",
            "description": "Sorting direction. Possible values: ASC, DESC",
            "x-ms-summary": "Sorting direction. Possible values: ASC, DESC",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to be returned",
            "x-ms-summary": "Page number to be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "propertyId",
            "in": "query",
            "description": "Unique identifier of the property a unit belongs to",
            "x-ms-summary": "Unique identifier of the property a unit belongs to",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items to be returned in single page",
            "x-ms-summary": "Number of items to be returned in single page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting parameter",
            "x-ms-summary": "Sorting parameter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/PageOfUnitDto"
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/v2/units/{unitId}": {
      "get": {
        "tags": [
          "Unit"
        ],
        "summary": "Get a unit by the given id",
        "description": "Return the unit having the given id",
        "x-ms-summary": "Return the unit having the given id",
        "operationId": "getUnitByIdUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "x-ms-url-encoding": "single",
            "description": "Unique id of a unit",
            "x-ms-summary": "Unique id of a unit",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/UnitDto"
            }
          },
          "404": {
            "description": "Not Found",
            "x-ms-summary": "Not Found"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ],
        "deprecated": false
      }
    },
    "/services/pmp-accounting/api/v1/invoices/upload": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/LegacyInvoiceDto"
            }
          }
        },
        "summary": "(Legacy) Upload invoice",
        "description": "Upload a pdf file to Impower using legacy API. Use the uploadInvoiceUsingPOST operation instead.",
        "x-ms-summary": "Upload a pdf file to Impower using legacy API. Use the uploadInvoiceUsingPOST operation instead.",
        "operationId": "UploadInvoice",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "Specify the pdf file to upload",
            "x-ms-summary": "Specify the pdf file to upload",
            "required": true,
            "type": "file"
          }
        ]
      }
    },
    "/services/pmp-accounting/api/v1/invoices/id": {
      "get": {
        "summary": "Legacy Invoice details",
        "description": "Get invoice details from Impower via legacy API. Use getInvoiceByIdUsingGET instead.",
        "x-ms-summary": "Get invoice details from Impower via legacy API. Use getInvoiceByIdUsingGET instead.",
        "operationId": "GetInvoice",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "query",
            "description": "Specify the invoice ID for details",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Invoice ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "x-ms-summary": "OK",
            "schema": {
              "$ref": "#/definitions/LegacyInvoiceDto"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    }
  },
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "ConnectionNotificationDto": {
      "type": "object",
      "properties": {
        "connectionId": {
          "type": "integer",
          "format": "int32",
          "description": "connectionId",
          "title": "The id of the connection the notification applies to"
        },
        "entityType": {
          "type": "string",
          "description": "entityType"
        },
        "entityId": {
          "type": "integer",
          "format": "int32",
          "description": "entityId"
        },
        "eventType": {
          "type": "string",
          "description": "eventType"
        }
      }
    },
    "ConnectionCreateDto": {
      "type": "object",
      "required": [
        "appId",
        "name",
        "webhookUrl"
      ],
      "properties": {
        "appId": {
          "type": "integer",
          "format": "int32",
          "example": 8,
          "description": "Id of the application to connect to the domain.",
          "x-ms-summary": "Id of the application to connect to the domain.",
          "x-ms-visibility": "internal",
          "default": 4
        },
        "name": {
          "type": "string",
          "description": "Name of the connection as it shall be presented in the UI.\nIf not specified, will be defaulted to the name of the application ",
          "x-ms-summary": "Name of the connection as it shall be presented in the UI.\nIf not specified, will be defaulted to the name of the application ",
          "default": "Powerautomate webhook",
          "x-ms-visibility": "internal"
        },
        "webhookUrl": {
          "type": "string",
          "example": "https://your.callback.com/path",
          "description": "The URL will be called with an authorization token you may validate and the following body: {\"connectionId\":123,\"entityType\":\"properties\",\"entityId\":123,\"eventType\": \"UPDATE\"}",
          "x-ms-summary": "The URL will be called with an authorization token you may validate and the following body: {\"connectionId\":123,\"entityType\":\"properties\",\"entityId\":123,\"eventType\": \"UPDATE\"}",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        }
      },
      "title": "ConnectionCreateDto",
      "description": "Data that describes a new connection",
      "x-ms-summary": "Data that describes a new connection"
    },
    "ConnectionDto": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "integer",
          "format": "int32",
          "example": 8,
          "description": "Id of an application",
          "x-ms-summary": "Id of an application"
        },
        "appName": {
          "type": "string",
          "description": "Name of the application of the connection",
          "x-ms-summary": "Name of the application of the connection"
        },
        "created": {
          "type": "string",
          "description": "Creation time of the entity.",
          "x-ms-summary": "Creation time of the entity."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the entity.",
          "x-ms-summary": "Id of the entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the connection",
          "x-ms-summary": "Name of the connection"
        },
        "updated": {
          "type": "string",
          "description": "Last update time of the entity.",
          "x-ms-summary": "Last update time of the entity."
        },
        "webhookUrl": {
          "type": "string",
          "description": "Webhook of the connection that will be called like\n```\nPOST https://your.webhook.url/path/somewhere\nAuthorization: Bearer TOKEN\n\n{\n  \"connectionId\": 0,\n  \"entityType\": \"properties|contacts|invoices|etc.\",\n  \"entityId\": 0,\n  \"eventType\": \"CREATE|UPDATE|DELETE\"\n}```",
          "x-ms-summary": "Webhook of the connection that will be called like\n```\nPOST https://your.webhook.url/path/somewhere\nAuthorization: Bearer TOKEN\n\n{\n  \"connectionId\": 0,\n  \"entityType\": \"properties|contacts|invoices|etc.\",\n  \"entityId\": 0,\n  \"eventType\": \"CREATE|UPDATE|DELETE\"\n}```"
        }
      },
      "title": "ConnectionDto",
      "description": "Data that describes an existing connection",
      "x-ms-summary": "Data that describes an existing connection"
    },
    "ConnectionUpdateDto": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the connection as it shall be presented in the UI.\nIf not specified, will be defaulted to the name of the application ",
          "x-ms-summary": "Name of the connection as it shall be presented in the UI.\nIf not specified, will be defaulted to the name of the application "
        },
        "webhookUrl": {
          "type": "string",
          "example": "https://your.callback.com/path",
          "description": "The URL will be called with an authorization token you may validate and the following body: {\"connectionId\":123,\"entityType\":\"properties\",\"entityId\":123,\"eventType\": \"UPDATE\"}",
          "x-ms-summary": "The URL will be called with an authorization token you may validate and the following body: {\"connectionId\":123,\"entityType\":\"properties\",\"entityId\":123,\"eventType\": \"UPDATE\"}"
        }
      },
      "title": "ConnectionUpdateDto",
      "description": "Data that describes an existing connection",
      "x-ms-summary": "Data that describes an existing connection"
    },
    "ContactDetailsDto": {
      "type": "object",
      "properties": {
        "businessPhoneNumber": {
          "type": "array",
          "description": "Business telephone number of the contact",
          "x-ms-summary": "Business telephone number of the contact",
          "items": {
            "type": "string"
          }
        },
        "dateOfBirth": {
          "type": "string",
          "description": "Date of birth of the contact.",
          "x-ms-summary": "Date of birth of the contact."
        },
        "email": {
          "type": "array",
          "description": "Email address of the contact",
          "x-ms-summary": "Email address of the contact",
          "items": {
            "type": "string"
          }
        },
        "fax": {
          "type": "array",
          "description": "Fax number of the contact",
          "x-ms-summary": "Fax number of the contact",
          "items": {
            "type": "string"
          }
        },
        "mobilePhoneNumber": {
          "type": "array",
          "description": "Mobile telephone number of the contact",
          "x-ms-summary": "Mobile telephone number of the contact",
          "items": {
            "type": "string"
          }
        },
        "privatePhoneNumber": {
          "type": "array",
          "description": "Private telephone number of the contact",
          "x-ms-summary": "Private telephone number of the contact",
          "items": {
            "type": "string"
          }
        },
        "tradeRegisterNumber": {
          "type": "string",
          "description": "Trade register number.",
          "x-ms-summary": "Trade register number."
        },
        "vatId": {
          "type": "string",
          "description": "VAT id of the contact.",
          "x-ms-summary": "VAT id of the contact."
        },
        "website": {
          "type": "array",
          "description": "Website of the contact",
          "x-ms-summary": "Website of the contact",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ContactDetailsDto",
      "description": "Contact details",
      "x-ms-summary": "Contact details"
    },
    "ContactDto": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string",
          "description": "Name of the city.",
          "x-ms-summary": "Name of the city."
        },
        "companyName": {
          "type": "string",
          "description": "Name of the company, in case the contact is a company.",
          "x-ms-summary": "Name of the company, in case the contact is a company."
        },
        "country": {
          "type": "string",
          "description": "Country code according to ISO 3166-1 alpha-2 standard.",
          "x-ms-summary": "Country code according to ISO 3166-1 alpha-2 standard."
        },
        "created": {
          "type": "string",
          "description": "Creation time of the contact.",
          "x-ms-summary": "Creation time of the contact."
        },
        "details": {
          "$ref": "#/definitions/ContactDetailsDto"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the contact, in case the contact is a person.",
          "x-ms-summary": "First name of the contact, in case the contact is a person."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the contact instance.",
          "x-ms-summary": "ID of the contact instance."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the contact, in case the contact is a person.",
          "x-ms-summary": "Last name of the contact, in case the contact is a person."
        },
        "number": {
          "type": "string",
          "description": "Street number.",
          "x-ms-summary": "Street number."
        },
        "postalCode": {
          "type": "string",
          "description": "Postal or zip code. Ensure it is specified for every person requiring physical letter contact via e-post.",
          "x-ms-summary": "Postal or zip code. Ensure it is specified for every person requiring physical letter contact via e-post."
        },
        "recipientName": {
          "type": "string",
          "description": "Recipient name of the contact.",
          "x-ms-summary": "Recipient name of the contact."
        },
        "salutation": {
          "type": "string",
          "description": "A standard formula of words used to address the contact.",
          "x-ms-summary": "A standard formula of words used to address the contact."
        },
        "state": {
          "type": "string",
          "description": "State name, also called province, subdivision, or region.",
          "x-ms-summary": "State name, also called province, subdivision, or region."
        },
        "street": {
          "type": "string",
          "description": "Name of the street.",
          "x-ms-summary": "Name of the street."
        },
        "title": {
          "type": "string",
          "description": "Job title of the contact.",
          "x-ms-summary": "Job title of the contact."
        },
        "updated": {
          "type": "string",
          "description": "Last update time of the contact.",
          "x-ms-summary": "Last update time of the contact."
        }
      },
      "title": "ContactDto",
      "description": "A contact represents a natural person or legal entity, and the way to contact them. Shall an identity/company have multiple postal addresses through which it may be contacted. These are represented as 2 different contacts.",
      "x-ms-summary": "A contact represents a natural person or legal entity, and the way to contact them. Shall an identity/company have multiple postal addresses through which it may be contacted. These are represented as 2 different contacts."
    },
    "ContactSimpleDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the contact instance.",
          "x-ms-summary": "ID of the contact instance."
        },
        "name": {
          "type": "string",
          "description": "The name of the contact. For more detailed information load the contact via id.",
          "x-ms-summary": "The name of the contact. For more detailed information load the contact via id."
        }
      },
      "title": "ContactSimpleDto",
      "description": "Contact simplified data structure.",
      "x-ms-summary": "Contact simplified data structure."
    },
    "ContractDto": {
      "type": "object",
      "properties": {
        "contacts": {
          "type": "array",
          "description": "List of the contacts associated to the contract.",
          "x-ms-summary": "List of the contacts associated to the contract.",
          "items": {
            "$ref": "#/definitions/ContactSimpleDto"
          }
        },
        "contractNumber": {
          "type": "string",
          "description": "Number of the contract.",
          "x-ms-summary": "Number of the contract."
        },
        "created": {
          "type": "string",
          "description": "Creation time of the contract.",
          "x-ms-summary": "Creation time of the contract."
        },
        "endDate": {
          "type": "string",
          "description": "Date the validity period of the contract ends to. Null is interpreted as end of time.",
          "x-ms-summary": "Date the validity period of the contract ends to. Null is interpreted as end of time."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the contract instance.",
          "x-ms-summary": "ID of the contract instance."
        },
        "isVacant": {
          "type": "boolean",
          "description": "Describes whether this contract is a vacant type contract. As of now it can only be true in case the contract is of type is TENANT. Vacant contract means the unit is not rented out. ",
          "x-ms-summary": "Describes whether this contract is a vacant type contract. As of now it can only be true in case the contract is of type is TENANT. Vacant contract means the unit is not rented out. "
        },
        "name": {
          "type": "string",
          "description": "Name of the contract consisting of the unit key and name of the mailing contact.",
          "x-ms-summary": "Name of the contract consisting of the unit key and name of the mailing contact."
        },
        "propertyId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the property instance the contract belongs to.",
          "x-ms-summary": "ID of the property instance the contract belongs to."
        },
        "startDate": {
          "type": "string",
          "description": "Date the validity period of the contract starts from. Null is interpreted as beginning of time.",
          "x-ms-summary": "Date the validity period of the contract starts from. Null is interpreted as beginning of time."
        },
        "type": {
          "type": "string",
          "description": "Type of the contract. \n1. OWNER - a contract of such type proves ownership of the unit. \n2. TENANT - a contract of such type is renting the unit. \n3. PROPERTY_OWNER - a contract of such type proves ownership of the property.",
          "x-ms-summary": "Type of the contract. \n1. OWNER - a contract of such type proves ownership of the unit. \n2. TENANT - a contract of such type is renting the unit. \n3. PROPERTY_OWNER - a contract of such type proves ownership of the property.",
          "enum": [
            "OWNER",
            "TENANT",
            "PROPERTY_OWNER"
          ]
        },
        "unitId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the unit instance the contract belongs to.",
          "x-ms-summary": "ID of the unit instance the contract belongs to."
        },
        "updated": {
          "type": "string",
          "description": "Last update time of the contract.",
          "x-ms-summary": "Last update time of the contract."
        }
      },
      "title": "ContractDto",
      "description": "Contract data structure.",
      "x-ms-summary": "Contract data structure."
    },
    "DocumentDto": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float",
          "description": "Total amount present on the document.",
          "x-ms-summary": "Total amount present on the document."
        },
        "buildingId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the building the document belongs to.",
          "x-ms-summary": "ID of the building the document belongs to."
        },
        "contactId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the contact the document belongs to.",
          "x-ms-summary": "ID of the contact the document belongs to."
        },
        "contractId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the contract the document belongs to.",
          "x-ms-summary": "ID of the contract the document belongs to."
        },
        "created": {
          "type": "string",
          "description": "Creation time of the document.",
          "x-ms-summary": "Creation time of the document."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the document instance.",
          "x-ms-summary": "ID of the document instance."
        },
        "issuedDate": {
          "type": "string",
          "description": "Issued date of the document.",
          "x-ms-summary": "Issued date of the document."
        },
        "name": {
          "type": "string",
          "description": "Name of the document instance.",
          "x-ms-summary": "Name of the document instance."
        },
        "propertyHrId": {
          "type": "string",
          "description": "Human readable id of the property the document is assigned to.",
          "x-ms-summary": "Human readable id of the property the document is assigned to."
        },
        "propertyId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the property the document belongs to.",
          "x-ms-summary": "ID of the property the document belongs to."
        },
        "propertyName": {
          "type": "string",
          "description": "Name of the property the document is assigned to.",
          "x-ms-summary": "Name of the property the document is assigned to."
        },
        "sourceId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the source entity the document belongs to.",
          "x-ms-summary": "ID of the source entity the document belongs to."
        },
        "sourceType": {
          "type": "string",
          "description": "Source type of the document.\nTogether with the id identifies the business process of the same name the document originates from/is attached to.\nIt may be null.",
          "x-ms-summary": "Source type of the document.\nTogether with the id identifies the business process of the same name the document originates from/is attached to.\nIt may be null.",
          "enum": [
            "HOUSE_MONEY_SETTLEMENT",
            "ECONOMIC_PLAN",
            "BANK_ORDER",
            "BANK_TRANSACTION",
            "HEATING_COST_DISTRIBUTION",
            "INVOICE",
            "SERIAL_LETTER",
            "OWNERS_MEETING_INVITATION",
            "OWNERS_MEETING_PROTOCOL",
            "PROFIT_AND_LOSS",
            "OPS_COST_REPORT",
            "SPECIAL_CONTRIBUTION",
            "DUNNING_ANNEX",
            "DUNNING",
            "DUNNING_DD_MANDATE",
            "WATERMARK",
            "MESSAGE",
            "OTHER"
          ]
        },
        "state": {
          "type": "string",
          "description": "State of the document.",
          "x-ms-summary": "State of the document.",
          "enum": [
            "DRAFT",
            "GENERATING",
            "READY",
            "FAILED",
            "DELETED"
          ]
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentTagSimpleDto"
          }
        },
        "unitHrId": {
          "type": "string",
          "description": "Human readable id of the unit the document is assigned to.",
          "x-ms-summary": "Human readable id of the unit the document is assigned to."
        },
        "unitId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the unit the document belongs to.",
          "x-ms-summary": "ID of the unit the document belongs to."
        },
        "updated": {
          "type": "string",
          "description": "Last update time of the document.",
          "x-ms-summary": "Last update time of the document."
        }
      },
      "title": "DocumentDto",
      "description": "Document data structure.",
      "x-ms-summary": "Document data structure."
    },
    "DocumentTagCreateDto": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the newly created document tag.",
          "x-ms-summary": "Description of the newly created document tag."
        },
        "name": {
          "type": "string",
          "description": "Name of the newly created document tag.",
          "x-ms-summary": "Name of the newly created document tag."
        }
      },
      "title": "DocumentTagCreateDto",
      "description": "Model class used for creating a new document tag.",
      "x-ms-summary": "Model class used for creating a new document tag."
    },
    "DocumentTagDto": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the document tag.",
          "x-ms-summary": "Description of the document tag."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the document tag.",
          "x-ms-summary": "ID of the document tag."
        },
        "name": {
          "type": "string",
          "description": "Name of the document tag.",
          "x-ms-summary": "Name of the document tag."
        }
      },
      "title": "DocumentTagDto",
      "description": "Model class of a document tag.",
      "x-ms-summary": "Model class of a document tag."
    },
    "DocumentTagSimpleDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier of the document tag.",
          "x-ms-summary": "Unique identifier of the document tag."
        },
        "name": {
          "type": "string",
          "description": "Name of the document tag.",
          "x-ms-summary": "Name of the document tag."
        }
      },
      "title": "DocumentTagSimpleDto",
      "description": "Model class of a document tag.",
      "x-ms-summary": "Model class of a document tag."
    },
    "DocumentTagUpdateDto": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "New description of the document tag.",
          "x-ms-summary": "New description of the document tag."
        },
        "name": {
          "type": "string",
          "description": "New name of the document tag.",
          "x-ms-summary": "New name of the document tag."
        }
      },
      "title": "DocumentTagUpdateDto",
      "description": "Model class used for updating an existing document tag.",
      "x-ms-summary": "Model class used for updating an existing document tag."
    },
    "DocumentUpdateDto": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "format": "float",
          "description": "New value the document amount to be updated to",
          "x-ms-summary": "New value the document amount to be updated to"
        },
        "buildingId": {
          "type": "integer",
          "format": "int32",
          "description": "New building building the document to be assigned to.",
          "x-ms-summary": "New building building the document to be assigned to."
        },
        "contactId": {
          "type": "integer",
          "format": "int32",
          "description": "New contact the document to be assigned to",
          "x-ms-summary": "New contact the document to be assigned to"
        },
        "contractId": {
          "type": "integer",
          "format": "int32",
          "description": "New contract the document to be assigned to",
          "x-ms-summary": "New contract the document to be assigned to"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The unique identifier of the document to be updated",
          "x-ms-summary": "The unique identifier of the document to be updated"
        },
        "issuedDate": {
          "type": "string",
          "description": "New date the document issued date to be updated to",
          "x-ms-summary": "New date the document issued date to be updated to"
        },
        "name": {
          "type": "string",
          "description": "New value the document name to be updated to",
          "x-ms-summary": "New value the document name to be updated to"
        },
        "propertyId": {
          "type": "integer",
          "format": "int32",
          "description": "New property the document to be assigned to",
          "x-ms-summary": "New property the document to be assigned to"
        },
        "sourceId": {
          "type": "integer",
          "format": "int32",
          "description": "New source process id the document to be assigned to",
          "x-ms-summary": "New source process id the document to be assigned to"
        },
        "tagIds": {
          "type": "array",
          "description": "Identifiers of tags to be assigned to the document",
          "x-ms-summary": "Identifiers of tags to be assigned to the document",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "unitId": {
          "type": "integer",
          "format": "int32",
          "description": "New unit the document to be assigned to",
          "x-ms-summary": "New unit the document to be assigned to"
        }
      },
      "title": "DocumentUpdateDto",
      "description": "Model class used for updating a document",
      "x-ms-summary": "Model class used for updating a document"
    },
    "ErrorCodeDetailsDto": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "title": "ErrorCodeDetailsDto"
    },
    "InvoiceDto": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float",
          "description": "Amount to be payed according to the invoice.",
          "x-ms-summary": "Amount to be payed according to the invoice."
        },
        "counterpartContactId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the counterpart contact of the invoice.",
          "x-ms-summary": "ID of the counterpart contact of the invoice."
        },
        "counterpartContactName": {
          "type": "string",
          "description": "Name of the counterpart contact of the invoice.",
          "x-ms-summary": "Name of the counterpart contact of the invoice."
        },
        "created": {
          "type": "string",
          "description": "Creation time of the entity.",
          "x-ms-summary": "Creation time of the entity."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the entity.",
          "x-ms-summary": "Id of the entity."
        },
        "issuedDate": {
          "type": "string",
          "description": "Issued date of the invoice.",
          "x-ms-summary": "Issued date of the invoice."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvoiceItemDto"
          }
        },
        "name": {
          "type": "string",
          "description": "Name of the invoice.",
          "x-ms-summary": "Name of the invoice."
        },
        "orderCounterpartBic": {
          "type": "string",
          "description": "BIC number of the counterpart's bank account.",
          "x-ms-summary": "BIC number of the counterpart's bank account."
        },
        "orderCounterpartIban": {
          "type": "string",
          "description": "IBAN of the counterpart's bank account.",
          "x-ms-summary": "IBAN of the counterpart's bank account."
        },
        "orderDayOffset": {
          "type": "integer",
          "format": "int32",
          "description": "The number of days before or after the booking date where the bank order shall appear for execution.",
          "x-ms-summary": "The number of days before or after the booking date where the bank order shall appear for execution."
        },
        "orderPropertyBankAccountId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier of the bank account of the property.",
          "x-ms-summary": "Unique identifier of the bank account of the property."
        },
        "orderPropertyBic": {
          "type": "string",
          "description": "BIC number of the property bank account.",
          "x-ms-summary": "BIC number of the property bank account."
        },
        "orderPropertyIban": {
          "type": "string",
          "description": "IBAN of the property bank account.",
          "x-ms-summary": "IBAN of the property bank account."
        },
        "orderRequired": {
          "type": "boolean",
          "description": "True in case there is a corresponding order of the invoice.",
          "x-ms-summary": "True in case there is a corresponding order of the invoice."
        },
        "orderStatement": {
          "type": "string",
          "description": "Statement of the generated order.",
          "x-ms-summary": "Statement of the generated order."
        },
        "propertyHrId": {
          "type": "string",
          "description": "Human readable id of the property the invoice belongs to.",
          "x-ms-summary": "Human readable id of the property the invoice belongs to."
        },
        "propertyId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the property the invoice belongs to.",
          "x-ms-summary": "ID of the property the invoice belongs to."
        },
        "propertyName": {
          "type": "string",
          "description": "Name of the property the invoice belongs to.",
          "x-ms-summary": "Name of the property the invoice belongs to."
        },
        "state": {
          "type": "string",
          "description": "State of the invoice. Possible values: \n1. DRAFT - invoice created, but incomplete. \n2. READY - invoice ready to be booked. \n3. BOOKED - invoice booked. \n4. SCHEDULED - only applies to recurring invoices. \n5. REVERSED - all bookings generated by the invoice have been reversed.",
          "x-ms-summary": "State of the invoice. Possible values: \n1. DRAFT - invoice created, but incomplete. \n2. READY - invoice ready to be booked. \n3. BOOKED - invoice booked. \n4. SCHEDULED - only applies to recurring invoices. \n5. REVERSED - all bookings generated by the invoice have been reversed.",
          "enum": [
            "DRAFT",
            "READY",
            "BOOKED",
            "SCHEDULED",
            "REVERSED"
          ]
        },
        "updated": {
          "type": "string",
          "description": "Last update time of the entity.",
          "x-ms-summary": "Last update time of the entity."
        }
      },
      "title": "InvoiceDto",
      "description": "Invoice data structure.",
      "x-ms-summary": "Invoice data structure."
    },
    "InvoiceItemDto": {
      "type": "object",
      "properties": {
        "accountCode": {
          "type": "string",
          "description": "Account code of the booking item.",
          "x-ms-summary": "Account code of the booking item."
        },
        "accountId": {
          "type": "integer",
          "format": "int32",
          "description": "Account id of the booking item.",
          "x-ms-summary": "Account id of the booking item."
        },
        "accountName": {
          "type": "string",
          "description": "Account name of the booking item.",
          "x-ms-summary": "Account name of the booking item."
        },
        "amount": {
          "type": "number",
          "format": "float",
          "description": "Amount corresponding to the booking item.",
          "x-ms-summary": "Amount corresponding to the booking item."
        },
        "bookingText": {
          "type": "string",
          "description": "Booking text of the booking item.",
          "x-ms-summary": "Booking text of the booking item."
        },
        "created": {
          "type": "string",
          "description": "Creation time of the invoice item.",
          "x-ms-summary": "Creation time of the invoice item."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier of the booking item.",
          "x-ms-summary": "Unique identifier of the booking item."
        },
        "laborCostAmount": {
          "type": "number",
          "format": "float",
          "description": "Amount relevant for income tax declaration according to the Income Tax Act: [Einkommenstueregesetz EStG 35a](https://www.gesetze-im-internet.de/estg/__35a.html).",
          "x-ms-summary": "Amount relevant for income tax declaration according to the Income Tax Act: [Einkommenstueregesetz EStG 35a](https://www.gesetze-im-internet.de/estg/__35a.html)."
        },
        "laborCostType": {
          "type": "string",
          "description": "Depending on the selected type: percentages of the amounts will be reported on the 35a annexes of multiple reports according to the Income Tax Act: [Einkommenstueregesetz EStG 35a](https://www.gesetze-im-internet.de/estg/__35a.html). \n\nEx: Housemoney Settlement (Hausgeldabrechnung) or Opscost Report (Nebenkostenabrechnung). \n\n1. HOUSEHOLD_RELATED_SERVICES - haushaltsnahe Dienstleistungen \n2. TECHNICIAN_SERVICE - haushaltsnahe Handwerkerleistungen \n3. MARGINAL_EMPLOYMENT - haushaltsnahe geringfügige Beschäftigungsverhältnisse \n4. INSURABLE_EMPLOYMENT - sozialversicherungspflichtigen haushaltsnahen Beschäftigungsverhältnissen",
          "x-ms-summary": "Depending on the selected type: percentages of the amounts will be reported on the 35a annexes of multiple reports according to the Income Tax Act: [Einkommenstueregesetz EStG 35a](https://www.gesetze-im-internet.de/estg/__35a.html). \n\nEx: Housemoney Settlement (Hausgeldabrechnung) or Opscost Report (Nebenkostenabrechnung). \n\n1. HOUSEHOLD_RELATED_SERVICES - haushaltsnahe Dienstleistungen \n2. TECHNICIAN_SERVICE - haushaltsnahe Handwerkerleistungen \n3. MARGINAL_EMPLOYMENT - haushaltsnahe geringfügige Beschäftigungsverhältnisse \n4. INSURABLE_EMPLOYMENT - sozialversicherungspflichtigen haushaltsnahen Beschäftigungsverhältnissen",
          "enum": [
            "HOUSEHOLD_RELATED_SERVICES",
            "TECHNICIAN_SERVICE",
            "MARGINAL_EMPLOYMENT",
            "INSURABLE_EMPLOYMENT"
          ]
        },
        "updated": {
          "type": "string",
          "description": "Last update time of the invoice item.",
          "x-ms-summary": "Last update time of the invoice item."
        },
        "vatAmount": {
          "type": "number",
          "format": "float",
          "description": "Corresponding vat amount of the booking item.",
          "x-ms-summary": "Corresponding vat amount of the booking item."
        },
        "vatPercentage": {
          "type": "number",
          "format": "float",
          "description": "Corresponding vat percentage of the vat amount of the total amount.",
          "x-ms-summary": "Corresponding vat percentage of the vat amount of the total amount."
        }
      },
      "title": "InvoiceItemDto"
    },
    "InvoiceItemUpdateDto": {
      "type": "object",
      "properties": {
        "bookingText": {
          "type": "string",
          "description": "Booking text of the invoice item.",
          "x-ms-summary": "Booking text of the invoice item."
        }
      },
      "title": "InvoiceItemUpdateDto"
    },
    "InvoiceUpdateDto": {
      "type": "object",
      "properties": {
        "issuedDate": {
          "type": "string",
          "description": "New issued date of the invoice.",
          "x-ms-summary": "New issued date of the invoice."
        },
        "name": {
          "type": "string",
          "description": "New name of the invoice.",
          "x-ms-summary": "New name of the invoice."
        }
      },
      "title": "InvoiceUpdateDto"
    },
    "PageOfConnectionDto": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectionDto"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int32"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfConnectionDto"
    },
    "PageOfContactDto": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactDto"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int32"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfContactDto"
    },
    "PageOfContractDto": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContractDto"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int32"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfContractDto"
    },
    "PageOfDocumentDto": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentDto"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int32"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfDocumentDto"
    },
    "PageOfInvoiceDto": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvoiceDto"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int32"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfInvoiceDto"
    },
    "PageOfPropertyDto": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyDto"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int32"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfPropertyDto"
    },
    "PageOfUnitDto": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnitDto"
          }
        },
        "empty": {
          "type": "boolean"
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int32"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageOfUnitDto"
    },
    "Pageable": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "paged": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "unpaged": {
          "type": "boolean"
        }
      },
      "title": "Pageable"
    },
    "PropertyDto": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "description": "Creation time of the property instance.",
          "x-ms-summary": "Creation time of the property instance."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the property instance.",
          "x-ms-summary": "ID of the property instance."
        },
        "name": {
          "type": "string",
          "description": "Name of the property instance.",
          "x-ms-summary": "Name of the property instance."
        },
        "propertyHrId": {
          "type": "string",
          "description": "Human readable id of the property instance.",
          "x-ms-summary": "Human readable id of the property instance."
        },
        "state": {
          "type": "string",
          "description": "Current state of the property. \n1. DRAFT - property not activated yet, therefore no bookings/bank orders/reports can be generated. \n2. READY - property has been activated and can be used for bookings/bank orders/reports generation. \n3. DISABLED - property has been deactivated, and can no longer generate bookings/bank orders/reports.\n",
          "x-ms-summary": "Current state of the property. \n1. DRAFT - property not activated yet, therefore no bookings/bank orders/reports can be generated. \n2. READY - property has been activated and can be used for bookings/bank orders/reports generation. \n3. DISABLED - property has been deactivated, and can no longer generate bookings/bank orders/reports.\n",
          "enum": [
            "DRAFT",
            "READY",
            "DISABLED"
          ]
        },
        "type": {
          "type": "string",
          "description": "Administration type of the property. OWNER - Home Owner Association. RENTAL - Tenant Management.",
          "x-ms-summary": "Administration type of the property. OWNER - Home Owner Association. RENTAL - Tenant Management.",
          "enum": [
            "OWNER",
            "RENTAL"
          ]
        },
        "updated": {
          "type": "string",
          "description": "Update time of the property instance.",
          "x-ms-summary": "Update time of the property instance."
        }
      },
      "title": "PropertyDto",
      "description": "Property data structure.",
      "x-ms-summary": "Property data structure."
    },
    "Sort": {
      "type": "object",
      "properties": {
        "empty": {
          "type": "boolean"
        },
        "sorted": {
          "type": "boolean"
        },
        "unsorted": {
          "type": "boolean"
        }
      },
      "title": "Sort"
    },
    "UnitDto": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "description": "Creation time of the unit instance.",
          "x-ms-summary": "Creation time of the unit instance."
        },
        "floor": {
          "type": "string",
          "description": "Floor the unit is located on.",
          "x-ms-summary": "Floor the unit is located on."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the unit instance.",
          "x-ms-summary": "ID of the unit instance."
        },
        "position": {
          "type": "string",
          "description": "Position of the unit within the floor.",
          "x-ms-summary": "Position of the unit within the floor."
        },
        "propertyId": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the property instance the unit belongs to.",
          "x-ms-summary": "ID of the property instance the unit belongs to."
        },
        "type": {
          "type": "string",
          "description": "Purpose the unit is used for.APARTMENT - unit used for residential purposes. PARKING - unit used for parking purposes. COMMERCIAL - unit used for business/commercial purposes. OTHER - unit used for other purposes.",
          "x-ms-summary": "Purpose the unit is used for.APARTMENT - unit used for residential purposes. PARKING - unit used for parking purposes. COMMERCIAL - unit used for business/commercial purposes. OTHER - unit used for other purposes.",
          "enum": [
            "APARTMENT",
            "PARKING",
            "OTHER",
            "COMMERCIAL"
          ]
        },
        "unitHrId": {
          "type": "string",
          "description": "Human readable id of the unit instance.",
          "x-ms-summary": "Human readable id of the unit instance."
        },
        "unitRank": {
          "type": "integer",
          "format": "int32",
          "description": "The rank defines the order how units are displayed on the UI / Reports. The user may update it in the UI.",
          "x-ms-summary": "The rank defines the order how units are displayed on the UI / Reports. The user may update it in the UI."
        },
        "updated": {
          "type": "string",
          "description": "Update time of the unit instance.",
          "x-ms-summary": "Update time of the unit instance."
        }
      },
      "title": "UnitDto",
      "description": "Unit data structure.",
      "x-ms-summary": "Unit data structure."
    },
    "LegacyInvoiceDto": {
      "type": "object",
      "properties": {
        "counterpartBic": {
          "type": "string",
          "description": "BIC Counterpart",
          "x-ms-summary": "BIC Counterpart"
        },
        "counterpartContactId": {
          "type": "integer",
          "format": "int32",
          "description": "ContactID Counterpart",
          "x-ms-summary": "ContactID Counterpart"
        },
        "counterpartIban": {
          "type": "string",
          "description": "IBAN Counterpart",
          "x-ms-summary": "IBAN Counterpart"
        },
        "counterpartName": {
          "type": "string",
          "description": "Counterpart",
          "x-ms-summary": "Counterpart"
        },
        "created": {
          "type": "string",
          "description": "Date",
          "x-ms-summary": "Date"
        },
        "documentUrl": {
          "type": "string",
          "description": "Invoice URL",
          "x-ms-summary": "Invoice URL"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID",
          "x-ms-summary": "ID"
        },
        "invoiceDate": {
          "type": "string",
          "description": "Invoice Date",
          "x-ms-summary": "Invoice Date"
        },
        "invoiceHrId": {
          "type": "string",
          "description": "Invoice ID",
          "x-ms-summary": "Invoice ID"
        },
        "invoiceNumber": {
          "type": "string",
          "description": "Invoice Number",
          "x-ms-summary": "Invoice Number"
        },
        "paymentTargetDate": {
          "type": "string",
          "description": "Payment target date",
          "x-ms-summary": "Payment target date"
        },
        "paymentType": {
          "type": "string",
          "description": "Payment Type",
          "x-ms-summary": "Payment Type"
        },
        "propertyHrId": {
          "type": "string",
          "description": "Property NR",
          "x-ms-summary": "Property NR"
        },
        "propertyId": {
          "type": "integer",
          "format": "int32",
          "description": "Property ID",
          "x-ms-summary": "Property ID"
        },
        "propertyIdInternal": {
          "type": "string",
          "description": "Property Internal ID",
          "x-ms-summary": "Property Internal ID"
        },
        "propertyName": {
          "type": "string",
          "description": "Property Name",
          "x-ms-summary": "Property Name"
        },
        "refNr": {
          "type": "string",
          "description": "Reference Nr",
          "x-ms-summary": "Reference Nr"
        },
        "state": {
          "type": "string",
          "enum": [
            "NEW",
            "APPROVED",
            "RECURRING",
            "RECURRING_STOPPED",
            "DELETED"
          ],
          "description": "Status of Invoice",
          "x-ms-summary": "Status of Invoice"
        },
        "totalGross": {
          "type": "number",
          "format": "float",
          "description": "Total Gross",
          "x-ms-summary": "Total Gross"
        },
        "totalNet": {
          "type": "number",
          "format": "float",
          "description": "Total Net",
          "x-ms-summary": "Total Net"
        },
        "vatIncluded": {
          "type": "boolean",
          "description": "VAT incl.",
          "x-ms-summary": "VAT incl."
        },
        "vatPercentage": {
          "type": "number",
          "format": "float",
          "description": "VAT percentage",
          "x-ms-summary": "VAT percentage"
        }
      },
      "title": "LegacyInvoiceDto"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.impower.de"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.impower.de/datenschutzerklaerung"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Business Management;Finance"
    }
  ]
}
