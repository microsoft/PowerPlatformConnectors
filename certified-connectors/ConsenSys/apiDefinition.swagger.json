{
  "swagger": "2.0",
  "info": {
    "version": "2.0",
    "title": "ConsenSys Ethereum",
    "description": "Read from and write to an Ethereum RPC Endpoint",
    "contact": {
      "name": "ConsenSys Support",
      "email": "qbs-ops@consensys.net",
      "url": "https://consensys.net/"
    }
  },
  "host": "ethereumconnector.onquorum.net",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "paths": {
    "/testConnection": {
      "get": {
        "tags": [
          "ethereum"
        ],
        "summary": "Test connection",
        "description": "Test the connection.",
        "operationId": "TestConnection",
        "consumes": [],
        "produces": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/account/nextNonce": {
      "get": {
        "tags": [
          "ethereum"
        ],
        "summary": "Get the next transaction nonce",
        "description": "Get the next transaction nonce.",
        "operationId": "NextNonce",
        "consumes": [],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NonceResult"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "important"
      }
    },
    "/contract/transactionReceipt": {
      "get": {
        "tags": [
          "ethereum"
        ],
        "summary": "Get the transaction submission receipt",
        "description": "Get the transaction submission receipt.",
        "operationId": "TransactionReceipt",
        "consumes": [],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [ 
          {
          "name": "transactionHash",
          "in": "query",
          "description": "The transaction hash",
          "required": true,
          "x-ms-summary": "Transaction Hash",
          "type": "string"
        }
      ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SmartContractReceiptResult"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "important"
      }
    },    
    "/contract/stateQuery": {
      "get": {
        "tags": [
          "ethereum"
        ],
        "summary": "Get smart contract state (all properties)",
        "description": "Get smart contract state (all properties).",
        "operationId": "GetSmartContractProperties",
        "consumes": [],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "abi",
            "in": "query",
            "description": "The smart contract ABI.",
            "required": true,
            "x-ms-summary": "Contract ABI",
            "type": "string"
          },
          {
            "name": "contractAddress",
            "in": "query",
            "description": "The smart contract address.",
            "required": true,
            "x-ms-summary": "Smart Contract Address",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Object"
              },
              "x-ms-dynamic-schema": {
                "operationId": "GetSmartContractPropertiesMetadata",
                "parameters": {
                  "abi": {
                    "parameter": "abi"
                  }
                },
                "value-path": "Schema/SmartContractProperties"
              }
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "important"
      }
    },
    "/contractSchema/functions/constant": {
      "post": {
        "tags": [
          "ethereum"
        ],
        "summary": "Get names of constant contract functions",
        "description": "Get names of constant contract functions.",
        "operationId": "GetConstantSmartContractFunctionNames",
        "consumes": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "abi",
            "in": "query",
            "description": "The smart contract ABI.",
            "required": true,
            "x-ms-summary": "Contract ABI",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SmartContractFunction"
              }
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/contractSchema/functions/mutable": {
      "post": {
        "tags": [
          "ethereum"
        ],
        "summary": "Get names of mutable contract functions",
        "description": "Get names of mutable contract functions.",
        "operationId": "GetMutableSmartFunctionNames",
        "consumes": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "abi",
            "in": "query",
            "description": "The smart contract ABI.",
            "required": true,
            "x-ms-summary": "Contract ABI",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SmartContractFunction"
              }
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/contractSchema/events": {
      "post": {
        "tags": [
          "ethereum"
        ],
        "summary": "Get list of smart contract events",
        "description": "Get list of smart contract events.",
        "operationId": "GetSmartContractEvents",
        "consumes": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "abi",
            "in": "query",
            "description": "The smart contract ABI.",
            "required": true,
            "x-ms-summary": "Contract ABI",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SmartContractEvent"
              }
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/contractSchema/functions/{functionName}/metadata": {
      "post": {
        "tags": [
          "ethereum"
        ],
        "summary": "Get smart contract function metadata",
        "description": "Get smart contract function metadata.",
        "operationId": "GetSmartContractFunctionMetadata",
        "consumes": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "abi",
            "in": "query",
            "description": "The smart contract ABI.",
            "required": true,
            "x-ms-summary": "Contract ABI",
            "type": "string"
          },
          {
            "name": "functionName",
            "in": "path",
            "description": "The function name.",
            "required": true,
            "x-ms-summary": "Smart Contract Function Name",
            "x-ms-url-encoding": "double",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SmartContractFunctionMetadata"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/contractSchema/constructor/metadata": {
      "post": {
        "tags": [
          "ethereum"
        ],
        "summary": "Get smart contract constructor metadata",
        "description": "Get smart contract constructor metadata.",
        "operationId": "GetSmartContractConstructorMetadata",
        "consumes": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "abi",
            "in": "query",
            "description": "The smart contract ABI.",
            "required": true,
            "x-ms-summary": "Contract ABI",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SmartContractFunctionMetadata"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/contractSchema/properties/metadata": {
      "post": {
        "tags": [
          "ethereum"
        ],
        "summary": "Get smart contract properties metadata",
        "description": "Get smart contract properties metadata.",
        "operationId": "GetSmartContractPropertiesMetadata",
        "consumes": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "abi",
            "in": "query",
            "description": "The smart contract ABI.",
            "required": true,
            "x-ms-summary": "Contract ABI",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SmartContractPropertiesMetadata"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/contractSchema/event/metadata": {
      "post": {
        "tags": [
          "ethereum"
        ],
        "summary": "Get smart contract event metadata",
        "description": "Get smart contract event metadata.",
        "operationId": "GetSmartContractEventMetadata",
        "consumes": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "abi",
            "in": "query",
            "description": "The smart contract ABI.",
            "required": true,
            "x-ms-summary": "Contract ABI",
            "type": "string"
          },
          {
            "name": "eventName",
            "in": "query",
            "description": "The name of the event.",
            "required": true,
            "x-ms-summary": "Event Name",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SmartContractEventMetadata"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/contractSchema/functions/{functionName}/resultMetadata": {
      "post": {
        "tags": [
          "ethereum"
        ],
        "summary": "Get query smart contract function result metadata",
        "description": "Get query smart contract function result metadata.",
        "operationId": "GetSmartContractFunctionResultMetadata",
        "consumes": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "abi",
            "in": "query",
            "description": "The smart contract ABI.",
            "required": true,
            "x-ms-summary": "Contract ABI",
            "type": "string"
          },
          {
            "name": "functionName",
            "in": "path",
            "description": "The name of the function.",
            "required": true,
            "x-ms-summary": "Smart Contract Function Name",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SmartContractFunctionResultMetadata"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/contract/functions/{functionName}/query": {
      "post": {
        "tags": [
          "ethereum"
        ],
        "summary": "Query smart contract function (incurring no gas cost)",
        "description": "Query smart contract function (incurring no gas cost).",
        "operationId": "ExecuteSmartContractFunction",
        "consumes": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "abi",
            "in": "query",
            "description": "The smart contract ABI.",
            "required": true,
            "x-ms-summary": "Contract ABI",
            "type": "string"
          },
          {
            "name": "contractAddress",
            "in": "query",
            "description": "The smart contract address.",
            "required": true,
            "x-ms-summary": "Smart Contract Address",
            "type": "string"
          },          
          {
            "name": "functionName",
            "in": "path",
            "description": "The Function Name.",
            "required": true,
            "x-ms-summary": "Smart Contract Function Name",
            "x-ms-dynamic-values": {
              "operationId": "GetConstantSmartContractFunctionNames",
              "parameters": {
                "abi": {
                  "parameter": "abi"
                }
              },
              "value-path": "Name"
            },
            "x-ms-url-encoding": "double",
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "The input parameters to the function.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Object"
              },
              "x-ms-dynamic-schema": {
                "operationId": "GetSmartContractFunctionMetadata",
                "parameters": {
                  "abi": {
                    "parameter": "abi"
                  },
                  "functionName": {
                    "parameter": "functionName"
                  }
                },
                "value-path": "Schema/InputParameters"
              }
            },
            "x-ms-summary": "Smart Contract Function Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Object"
              },
              "x-ms-dynamic-schema": {
                "operationId": "GetSmartContractFunctionResultMetadata",
                "parameters": {
                  "abi": {
                    "parameter": "abi"
                  },
                  "functionName": {
                    "parameter": "functionName"
                  }
                },
                "value-path": "Schema/Results"
              }
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "important"
      }
    },
    "/contract/deploy": {
      "post": {
        "tags": [
          "ethereum"
        ],
        "summary": "Deploy smart contract",
        "description": "Deploy smart contract.",
        "operationId": "DeployContract",
        "consumes": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "abi",
            "in": "query",
            "description": "The smart contract ABI.",
            "required": true,
            "x-ms-summary": "Contract ABI",
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "The smart contract constructor parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Object"
              },
              "x-ms-dynamic-schema": {
                "operationId": "GetSmartContractConstructorMetadata",
                "parameters": {
                  "abi": {
                    "parameter": "abi"
                  }
                },
                "value-path": "Schema/InputParameters"
              }
            },
            "x-ms-summary": "Smart Contract Function Parameters"
          },
          {
            "name": "maxPriorityFee",
            "in": "query",
            "description": "Optional: Max gas priority fee in wei in non-hex format. (EIP1559 only)",
            "required": false,
            "x-ms-summary": "Max gas priority fee in Wei",
            "x-ms-visibility": "advanced",
            "type": "string"
          },
          {
            "name": "maxFee",
            "in": "query",
            "description": "Optional: Max gas fee in wei in non-hex format. (EIP1559 only)",
            "required": false,
            "x-ms-summary": "Max gas fee in Wei",
            "x-ms-visibility": "advanced",
            "type": "string"
          },
          {
            "name": "gasPrice",
            "in": "query",
            "description": "Optional: gas price in wei in non-hex format. (non-EIP1559 only)",
            "required": false,
            "x-ms-summary": "Gas Price in Wei",
            "x-ms-visibility": "advanced",
            "type": "string"
          },
          {
            "name": "gasLimit",
            "in": "query",
            "description": "Optional: gas limit in non-hex format.",
            "required": false,
            "x-ms-summary": "Gas Limit",
            "x-ms-visibility": "advanced",
            "type": "string"
          },
          {
            "name": "privateForKeyList",
            "in": "query",
            "description": "[Quorum] Optional: list of public keys that are allowed to see this transaction (eg. Q2/x..., 2mN... ).",
            "required": false,
            "x-ms-summary": "Private For List",
            "x-ms-visibility": "advanced",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeploySmartContractResult"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "important"
      }
    },
    "/contract/functions/{functionName}/execute": {
      "post": {
        "tags": [
          "ethereum"
        ],
        "summary": "Execute smart contract function (incurring gas cost)",
        "description": "Execute smart contract function (incurring gas cost).",
        "operationId": "ExecuteContractFunction",
        "consumes": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "abi",
            "in": "query",
            "description": "The smart contract ABI.",
            "required": true,
            "x-ms-summary": "Contract ABI",
            "type": "string"
          },
          {
            "name": "contractAddress",
            "in": "query",
            "description": "The smart contract address.",
            "required": true,
            "x-ms-summary": "Smart Contract Address",
            "type": "string"
          },
          {
            "name": "functionName",
            "in": "path",
            "description": "The name of the function to invoke.",
            "required": true,
            "x-ms-summary": "Smart Contract Function Name",
            "x-ms-url-encoding": "double",
            "type": "string",
            "x-ms-dynamic-values": {
              "operationId": "GetMutableSmartFunctionNames",
              "value-path": "Name",
              "parameters": {
                "abi": {
                  "parameter": "abi"
                }
              }
            }
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "The parameters of the function.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Object"
              },
              "x-ms-dynamic-schema": {
                "operationId": "GetSmartContractFunctionMetadata",
                "parameters": {
                  "abi": {
                    "parameter": "abi"
                  },
                  "functionName": {
                    "parameter": "functionName"
                  }
                },
                "value-path": "Schema/InputParameters"
              }
            },
            "x-ms-summary": "Smart Contract Function Parameters"
          },
          {
            "name": "maxPriorityFee",
            "in": "query",
            "description": "Optional: Max gas priority fee in wei in non-hex format. (EIP1559 only)",
            "required": false,
            "x-ms-summary": "Max gas priority fee in Wei",
            "x-ms-visibility": "advanced",
            "type": "string"
          },
          {
            "name": "maxFee",
            "in": "query",
            "description": "Optional: Max gas fee in wei in non-hex format. (EIP1559 only)",
            "required": false,
            "x-ms-summary": "Max gas fee in Wei",
            "x-ms-visibility": "advanced",
            "type": "string"
          },
          {
            "name": "gasPrice",
            "in": "query",
            "description": "Optional: gas price in wei in non-hex format. (non-EIP1559 only)",
            "required": false,
            "x-ms-summary": "Gas Price in Wei",
            "x-ms-visibility": "advanced",
            "type": "string"
          },
          {
            "name": "gasLimit",
            "in": "query",
            "description": "Optional: gas limit in non-hex format.",
            "required": false,
            "x-ms-summary": "Gas Limit",
            "x-ms-visibility": "advanced",
            "type": "string"
          },
          {
            "name": "privateForKeyList",
            "in": "query",
            "description": "[Quorum] Optional: list of public keys that are allowed to see this transaction (eg. Q2/x..., 2mN... ).",
            "required": false,
            "x-ms-summary": "Private For List",
            "x-ms-visibility": "advanced",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExecuteSmartContractFunctionResult"
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "important"
      }
    },
    "/contract/OnNewEvent": {
      "get": {
        "tags": [
          "ethereum"
        ],
        "summary": "When a smart contract event occurs",
        "description": "When a smart contract event occurs.",
        "operationId": "OnNewEvent",
        "consumes": [],
        "produces": [
          "application/json",
          "text/plain",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "abi",
            "in": "query",
            "description": "The smart contract ABI.",
            "required": false,
            "x-ms-summary": "Contract ABI",
            "x-ms-visibility": "important",
            "type": "string"
          },
          {
            "name": "contractAddress",
            "in": "query",
            "description": "The smart contract address.",
            "required": false,
            "x-ms-summary": "Smart Contract Address",
            "x-ms-visibility": "important",
            "type": "string"
          },
          {
            "name": "eventName",
            "in": "query",
            "description": "Event name.",
            "required": false,
            "x-ms-summary": "Event Name",
            "x-ms-visibility": "important",
            "x-ms-dynamic-values": {
              "operationId": "GetSmartContractEvents",
              "parameters": {
                "abi": {
                  "parameter": "abi"
                }
              },
              "value-path": "Name"
            },
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Object"
              },
              "x-ms-dynamic-schema": {
                "operationId": "GetSmartContractEventMetadata",
                "parameters": {
                  "abi": {
                    "parameter": "abi"
                  },
                  "eventName": {
                    "parameter": "eventName"
                  }
                },
                "value-path": "Schema/Parameters"
              }
            }
          },
          "default": {
            "description": "Operation Failed."
          }
        },
        "x-ms-visibility": "important",
        "x-ms-trigger": "single",
        "x-ms-trigger-hint": "To see it work now, call a contract function that will fire this event."
      }
    }
  },
  "definitions": {
    "Object": {
      "type": "object",
      "properties": {}
    },    
    "SmartContractFunction": {
      "description": "Smart Contract Function and Parameters",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The Smart Contract Function Name",
          "type": "string",
          "x-ms-summary": "Smart Contract Function Name",
          "x-ms-visibility": "important"
        }
      }
    },
    "SmartContractEvent": {
      "description": "Smart Contract Event",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The Smart Contract Event Name",
          "type": "string",
          "x-ms-summary": "Event Name",
          "x-ms-visibility": "important"
        }
      }
    },
    "NonceResult": {
      "description": "Next nonce",
      "type": "object",
      "properties": {
        "Nonce": {
          "description": "Next nonce",
          "type": "string",
          "x-ms-summary": "Next nonce",
          "x-ms-visibility": "important"
        }
      }
    },
    "SmartContractFunctionMetadata": {
      "description": "SmartContract Function Metadata",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Function name",
          "type": "string"
        },
        "title": {
          "description": "Function title",
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/Object"
        }
      }
    },
    "SmartContractPropertiesMetadata": {
      "description": "SmartContract Properties Metadata",
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/Object"
        }
      }
    },
    "SmartContractEventMetadata": {
      "description": "SmartContract Event Metadata",
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/Object"
        }
      }
    },
    "SmartContractFunctionResultMetadata": {
      "description": "SmartContract function result metadata",
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/Object"
        }
      }
    },
    "DeploySmartContractResult": {
      "description": "The deploy smart contract action result",
      "type": "object",
      "properties": {
        "TransactionHash": {
          "description": "The transaction hash",
          "type": "string",
          "x-ms-summary": "Transaction Hash",
          "x-ms-visibility": "important"
        }
      }
    },
    "SmartContractReceiptResult": {
      "description": "The transaction receipt result",
      "type": "object",
      "properties": {
        "TransactionHash": {
          "description": "The transaction hash",
          "type": "string",
          "x-ms-summary": "Transaction Hash",
          "x-ms-visibility": "important"
        },
        "ContractAddress": {
          "description": "The contract address (deployment transaction)",
          "type": "string",
          "x-ms-summary": "Contract Address",
          "x-ms-visibility": "important"
        },
        "IsProcessed": {
          "description": "Indicator of transaction receipt by the network",
          "type": "boolean",
          "x-ms-summary": "Is Processed",
          "x-ms-visibility": "important"
        } ,
        "HasFailed": {
          "description": "Indicator of transaction failure",
          "type": "boolean",
          "x-ms-summary": "Has Failed",
          "x-ms-visibility": "important"
        }
      }
    },
    "ExecuteSmartContractFunctionResult": {
      "description": "The execute smart contract function action result",
      "type": "object",
      "properties": {
        "TransactionHash": {
          "description": "The transaction hash",
          "type": "string",
          "x-ms-summary": "Transaction Hash",
          "x-ms-visibility": "important"
        }
      }
    }
  },
  "x-ms-capabilities": {
    "testConnection": {
      "operationId": "TestConnection",
      "parameters": {}
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {},
  "security": [],
  "tags": [],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://consensys.net/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://consensys.net/privacy-policy/"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Finance"
    }
  ]
}