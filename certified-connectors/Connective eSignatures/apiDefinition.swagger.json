{
  "swagger": "2.0",
  "info": {
    "description": "Connective eSignatures is a renowned digital signature solution offering a vast amount of signature methods & compliance to the most stringent (inter)national regulations. eSignatures allows you to transform any paper-based process into an end-to-end digital flow with an unparalleled user experience. Streamline the signing process exactly how you want it to and send, sign & track all types of documents directly from your favorite business applications. Join more than 500 satisfied customers.",
    "version": "0.1",
    "title": "Connective eSignatures",
	  "contact": {
      "name": "Connective Support",
      "url": "https://connective.eu/contact-support/",
      "email": "service@connective.eu"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "host": "esignatures.connective.eu",
  "basePath": "/webportalapi/v3",
  "securityDefinitions": {
    "basic_auth": {
      "type": "basic"
    }
  },
  "definitions": {
    "Package": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PackageStatus": {
          "type": "string"
        },
        "ExternalPackageReference": {
          "type": "string"
        }
      }
    },
    "SigningType": {
      "type": "object",
      "properties": {
        "SigningType": {
          "type": "string",
          "description": "The signing type used in this actor's session."
        },
        "CommitmentTypes": {
          "description": "One or more OIDs of commitment types. Can only be passed when signature policy is used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MandatedSignerValidation": {
          "type": "string",
          "description": "Type of validation to execute during eID other smart card, or itsme signing session."
        },
        "MandatedSignerIds": {
          "description": "Defines which eID or other smart cards are allowed to sign during this session.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SignaturePolicyId": {
          "type": "string",
          "description": "Signing policy details for the signature."
        }
      }
    },
    "SigningField": {
      "type": "object",
      "properties": {
        "PageNumber": {
          "type": "integer",
          "description": "Number of the page on which to add a signing location"
        },
        "Width": {
          "type": "string",
          "description": "Width"
        },
        "Height": {
          "type": "string",
          "description": "Height"
        },
        "Left": {
          "type": "string",
          "description": "Position from the left of the page"
        },
        "Top": {
          "type": "string",
          "description": "Position from top of the page"
        },
        "MarkerOrFieldId": {
          "type": "string",
          "description": "Unique reference to a signing field, text marker or textfield."
        }
      }
    },
    "Request.Actor": {
      "description": "This object gives information about what the stakeholder must do.",
      "type": "object",
      "properties": {
        "Type": {
          "type": "string",
          "description": "Signer / Receiver"
        },
        "OrderIndex": {
          "type": "integer",
          "format": "int32",
          "description": "This number specifies in which order actors need to execute their action."
        },
        "SigningFields": {
          "description": "Define the locations where this actor should sign",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SigningField"
          }
        },
        "SigningTypes": {
          "description": "One or more signing type info objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SigningType"
          }
        },
        "Phonenumber": {
          "type": "string",
          "description": "Phone number to receive an SMS OTP."
        },
        "RedirectUrl": {
          "type": "string",
          "description": "Url to which the end user is redirected after signing."
        },
        "SendNotifications": {
          "type": "boolean",
          "description": "eSignatures can send e-mails to all the people who are allowed to sign."
        },
        "UserRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Role or function of the signer."
        },
        "LegalNoticeCode": {
          "type": "string",
          "description": "Legal Notice"
        },
        "LegalNoticeText": {
          "type": "string",
          "description": "Custom legal notice text in case none of the three predefined legal notices apply. "
        }
      }
    },
    "Stakeholder": {
      "description": "Information about the people who are involved in the process.",
      "type": "object",
      "properties": {
        "Actors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Request.Actor"
          }
        },
        "EmailAddress": {
          "type": "string",
          "description": "EmailAddress"
        },
        "FirstName": {
          "type": "string",
          "description": "FirstName"
        },
        "LastName": {
          "type": "string",
          "description": "LastName"
        },
        "BirthDate": {
          "type": "string",
          "description": "BirthDate"
        },
        "Language": {
          "type": "string",
          "description": "Language"
        },
        "ExternalStakeholderReference": {
          "type": "string",
          "description": "ExternalStakeholderReference"
        }
      }
    },
    "ErrorHandlingResponse": {
      "description": "The eSignatures API v3 uses HTTP error codes to give a rough idea of whether a call succeeded or failed, and a system of error codes in the response body to give more information incase things went wrong.",
      "type": "object",
      "properties": {
        "ErrorCode": {
          "type": "string",
          "description": "Error code with variable information."
        },
        "Message": {
          "type": "string",
          "description": "Error message detail text, not localized"
        }
      }
    },
    "PackageDocument": {
      "type": "object",
      "description": "Details for each of the documents in the package",
      "properties": {
        "DocumentId": {
          "type": "string",
          "description": "Unique id of the document"
        },
        "ExternalDocumentReference": {
          "type": "string",
          "description": "Returns the external reference of this document as it was passed in through the Add document to package call."
        },
        "DocumentName": {
          "type": "string",
          "description": "Name of the document"
        },
        "DocumentType": {
          "type": "string",
          "description": "Type of document within the package."
        }
      }
    },
    "PackageStatus": {
      "description": "Description for the Package shown to the eSignatures Portal user as file name.",
      "type": "object",
      "properties": {
        "PackageName": {
          "type": "string",
          "description": "Description for the Package shown to the eSignatures Portal user as file name."
        },
        "CreationTimestamp": {
          "type": "string",
          "description": "Date and time when the package was created according to the server."
        },
        "Initiator": {
          "type": "string",
          "description": "Initiator field of the package as it was passed in at creation time."
        },
        "ExpiryTimestamp": {
          "type": "string",
          "description": "UTC formatted time at which the document expires. Can be null."
        },
        "ExternalPackageReference": {
          "type": "string",
          "description": "Returns the external reference id of the package as it was passed in at creation time."
        },
        "F2FSigningUrl": {
          "type": "string",
          "description": "Link to the package which allows to pick from all the signing session at once."
        },
        "PackageStatus": {
          "type": "string",
          "description": "Status of the package as a whole:"
        },
        "PackageDocuments": {
          "type": "array",
          "description": "Details for each of the documents in the package.",
          "items": {
            "$ref": "#/definitions/PackageDocument"
          }
        },
        "Stakeholders": {
          "type": "array",
          "description": "Details for each of the persons which will interact with the package.",
          "items": {
            "type": "object",
            "properties": {
              "Type": {
                "type": "string",
                "description": "Type of stakeholder: Person, PersonGroup, or ContactGroup."
              },
              "PersonGroupName": {
                "type": "string",
                "description": "Name of the person group. Only returned if Type was set to PersonGroup in the request."
              },
              "ContactGroupCode": {
                "type": "string",
                "description": "Code of the contact group. Only returned if Type was set to ContactGroup in the request."
              },
              "EmailAddress": {
                "type": "string",
                "description": "Email address of the signer."
              },
              "ExternalStakeholderReference": {
                "type": "string",
                "description": "External reference identifying this person in the external system."
              },
              "StakeholderId": {
                "type": "string",
                "description": "Unique id."
              },
              "Actors": {
                "type": "array",
                "description": "Details of all steps to take.",
                "items": {
                  "type": "object",
                  "properties": {
                    "ActorId": {
                      "type": "string",
                      "description": "Unique id for this combination of action, stakeholder and document."
                    },
                    "ActionUrl": {
                      "type": "string",
                      "description": "URL that this person can open to interact with the package."
                    },
                    "ActionUrls": {
                      "type": "array",
                      "description": "Array of URLs that the different persons of the PersonGroup or ContactGroup can open to interact with the package.",
                      "items": {
                        "description": "Array of URLs that the different persons can open to interact with the package.",
                        "type": "object",
                        "properties": {
                          "EmailAddress": {
                            "type": "string",
                            "description": "Email address of the person."
                          },
                          "Url": {
                            "type": "string",
                            "description": "URL that this person can open to interact with the package."
                          }
                        }
                      }
                    },
                    "ActorStatus": {
                      "type": "string",
                      "description": "Draft (package has status Draft)"
                    },
                    "Type": {
                      "type": "string",
                      "description": "Signer / Receiver"
                    },
                    "CompletedBy": {
                      "type": "string",
                      "description": "The name of the end user who completed the action. "
                    },
                    "CompletedTimestamp": {
                      "type": "string",
                      "description": "Timestamp of the moment on which this action was completed."
                    },
                    "Reason": {
                      "type": "string",
                      "description": "Returns the text entered by the person who changed the status of a package to a final state (e.g. a reject)."
                    },
                    "Locations": {
                      "type": "array",
                      "description": "Represents a possible location for a signature.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "Id": {
                            "type": "string",
                            "description": "Unique id for this location  "
                          },
                          "UsedSigningType": {
                            "type": "string",
                            "description": "Returns the signing type that was used to sign the document."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "example": {
        "PackageName": "package-docu1.pdf",
        "Initiator": "signer@gmail.com",
        "ExpiryTimestamp": null,
        "ExternalPackageReference": "reference",
        "F2FSigningUrl": "http://myserver/signinit?packageSignId=6bc402eb-6cbd-423a-bf00-1157e8d68f37&f2f=True",
        "PackageStatus": "Pending",
        "PackageDocuments": [
          {
            "DocumentId": "dc2691d8-e3c0-470b-9715-e55b489ea493",
            "DocumentType": "application/pdf",
            "ExternalDocumentReference": null,
            "DocumentName": "docu1"
          }
        ],
        "Stakeholders": [
          {
            "Type": "PersonGroup",
            "EmailAddress": null,
            "ContactGroupCode": null,
            "ExternalStakeholderReference": "stakeref",
            "StakeholderId": "6b2cda0c-ab81-4984-9e16-159fe20d983f",
            "Actors": [
              {
                "Type": "Signer",
                "Reason": null,
                "CompletedBy": null,
                "CompletedTimestamp": null,
                "Locations": [
                  {
                    "Id": "24ab070a-29e4-496e-9b79-e66c0edcced7",
                    "UsedSigningType": null
                  }
                ],
                "ActorId": "2806f94d-2a45-4168-8667-cbd4ce4ce090",
                "ActionUrl": null,
                "ActionUrls": [
                  {
                    "EmailAddress": "john.smith@mail.com",
                    "Url": "https://MyURL.com"
                  },
                  {
                    "EmailAddress": "jane.jefferson@mail.com",
                    "Url": "https://HerURL.com"
                  }
                ],
                "ActorStatus": "Available"
              },
              {
                "Type": "Receiver",
                "ActorId": "e3da1877-fac9-43c4-9949-bacef76718fa",
                "ActionUrl": null,
                "ActionUrls": [],
                "ActorStatus": "asd"
              }
            ],
            "PersonGroupName": "APIGroup"
          },
          {
            "Type": "Person",
            "EmailAddress": "signer@gmail.com",
            "ContactGroupCode": null,
            "ExternalStakeholderReference": "3",
            "StakeholderId": "490e242f-43c4-4bc0-a1b4-e2d67dc1fdac",
            "Actors": {
              "Type": "Receiver",
              "ActorId": "0903c863-9197-4abf-93f4-694fddde9d99",
              "ActionUrl": null,
              "ActionUrls": [],
              "ActorStatus": ""
            },
            "PersonGroupName": null
          }
        ],
        "CreationTimestamp": "2019-10-23T13:34:12Z"
      }
    },
    "Content": {
      "type": "object",
      "xml": {
        "prefix": "xs"
      },
      "properties": {
        "uploads": {
          "type": "array",
          "minimum": 0,
          "items": {
            "type": "object",
            "properties": {
              "upload": {
                "type": "array",
                "minimum": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "start": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "end": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "signatures": {
                      "type": "array",
                      "minimum": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "proofs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "proof": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "boolean"
                                    },
                                    "ipAddress": {
                                      "type": "string",
                                      "xml": {
                                        "attribute": true
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "locationId": {
                            "type": "string",
                            "xml": {
                              "attribute": true
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "indexes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "index": {
                      "type": "object",
                      "properties": {
                        "identifier": {
                          "type": "boolean"
                        },
                        "content": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "packageCorrelationId": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "packageId": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/packages/instant": {
      "post": {
        "summary": "Create Instant Package",
        "description": "This call creates a package with a single document in it and instantly prepares it for signing",
        "operationId": "CreateInstantPackage",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "Document": {
                  "type": "string",
                  "description": "Attached document in base64 encoded format. Required unless Multipart format is used.",
                  "default": "",
				  "format":"byte"
                },
                "DocumentLanguage": {
                  "type": "string",
                  "enum": [
                    "en",
                    "nl",
                    "de",
                    "fr",
                    "es"
                  ],
                  "description": "Language to use in signature texts. Currently supported: en, nl, de, fr, es.",
                  "example": "en"
                },
                "DocumentName": {
                  "type": "string",
                  "description": "Name of the document and package to be shown in the eSignatures Portal."
                },
                "ExternalPackageData": {
                  "type": "string",
                  "description": "ExternalPackageData"
                },
                "Initiator": {
                  "type": "string",
                  "description": "Email address of a registered user"
                },
                "Stakeholders": {
                  "type": "array",
                  "description": "Information about the people who are involved in the process.",
                  "items": {
                    "$ref": "#/definitions/Stakeholder"
                  }
                },
                "CallBackUrl": {
                  "type": "string",
                  "description": "REST API URL that will be called each time an action has been completed for this package"
                },
                "CorrelationId": {
                  "type": "string",
                  "description": "Id that indicates which packages or documents are correlated"
                },
                "DocumentGroupCode": {
                  "type": "string",
                  "description": "The \u2018Code\u2019 which identifies a document group in which the document should be shown",
                  "default": "\"00001\""
                },
                "ThemeCode": {
                  "type": "string",
                  "description": "Theme that must be applied to the package"
                },
                "DownloadUnsignedFiles": {
                  "type": "boolean",
                  "description": "This parameter determines whether packages can be downloaded from the WYSIWYS before signing"
                },
                "ExpiryTimestamp": {
                  "type": "string",
                  "description": "Reference given by the calling application. This parameter will not be used by the eSignatures Portal"
                },
                "ExternalDocumentReference": {
                  "type": "string",
                  "description": "Reference given by the calling application, this parameter will not be used by the eSignatures Portal"
                },
                "ExternalPackageReference": {
                  "type": "string",
                  "description": "Reference given by the calling application, this parameter will not be used by the eSignatures Portal"
                },
                "F2FRedirectUrl": {
                  "type": "string",
                  "description": "Url to which the end user is redirected after all fields have been signed with \u2018face to face\u2019 signing, or when all fields have been rejected."
                },
                "NotificationCallBackUrl": {
                  "type": "string",
                  "description": "REST API URL that will be called when an end user requests to be notified. If no URL is supplied no call back is performed"
                },
                "PdfErrorHandling": {
                  "type": "string",
                  "description": "How to deal with PDFs containing minor flaws"
                },
                "Representation": {
                  "type": "string",
                  "description": "Attached representation document in base64 format"
                },
                "RepresentationType": {
                  "type": "string",
                  "description": "Type of the representation document, must be present when Representation is filled. Only \u201capplication/pdf\u201d is supported."
                },
                "SigningTemplateCode": {
                  "type": "string",
                  "description": "The template configured in the portal will provide all necessary information"
                },
                "TargetType": {
                  "type": "string",
                  "description": "The TargetType defines if an extra conversion to PDF/A needs to be done before signing"
                }
              },
              "example": {
                "PackageId": "3bb6a2d1-35db-4a3a-a434-868c01bcca9d",
                "PackageName": "instant Package",
                "Initiator": "john.smith@mail.com",
                "ExpiryTimestamp": null,
                "ExternalPackageReference": "reference",
                "F2FSigningUrl": "https://yourFTFSignUrl",
                "PackageStatus": "Pending",
                "PackageDocuments": [
                  {
                    "DocumentId": "97cfc102-70c2-4c17-9fb7-74b29360d53f",
                    "DocumentType": "application/pdf",
                    "ExternalDocumentReference": null,
                    "DocumentName": "instant package",
                    "Locations": [
                      {
                        "Id": "e3ba68ac-e737-4e15-b61f-229034cf0797",
                        "Label": "d28d483a-824d-43c9-93d1-026117d8ebaf",
                        "PageNumber": 2
                      }
                    ]
                  }
                ],
                "Stakeholders": [
                  {
                    "Type": "Person",
                    "EmailAddress": "john.smith@mail.com",
                    "ContactGroupCode": null,
                    "ExternalStakeholderReference": "stakeref",
                    "StakeholderId": "7aa76f03-7981-44c1-8b91-598256edf260",
                    "Actors": [
                      {
                        "Type": "Signer",
                        "Reason": null,
                        "CompletedBy": null,
                        "CompletedTimestamp": null,
                        "Locations": [
                          {
                            "Id": "e3ba68ac-e737-4e15-b61f-229034cf0797",
                            "UserSigningType": null
                          }
                        ],
                        "ActorId": "db4a380f-fbd8-4bd7-b9e3-23507e986f66",
                        "ActionUrl": "https://ActionUrl",
                        "ActionUrls": [],
                        "ActorStatus": "Available"
                      }
                    ],
                    "PersonGroupName": null
                  }
                ],
                "CreationTimestamp": "2019-10-24T11:20:55Z",
                "Warnings": []
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "PackageId": {
                  "type": "string",
                  "description": "Unique identifier of the package."
                },
                "CreationTimestamp": {
                  "type": "string",
                  "description": "Date and time when the package was created according to the server."
                }
              }
            }
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/packages": {
      "get": {
        "summary": "Package List",
        "description": "Get a list of packages with their current status",
        "operationId": "PackageList",
        "parameters": [
          {
            "name": "ContinuationToken",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The continuation token / guid to know what page to return. MUST BE EMPTY or the token returned from a PREVIOUS call.",
            "x-ms-summary": "The continuation token / guid to know what page to return."
          },
          {
            "name": "MaxQuantity",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "required": false,
            "description": "Gets or sets the maximum quantity.",
            "x-ms-summary": "Gets or sets the maximum quantity."
          },
          {
            "name": "SortField",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Gets or sets the sort field.",
            "x-ms-summary": "Gets or sets the sort field."
          },
          {
            "name": "SortOrder",
            "default": "\"ASC\"",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Gets or sets the sort field.",
            "x-ms-summary": "Gets or sets the sort field."
          },
          {
            "name": "CreatedBeforeDate",
            "default": "{{$timestamp}}",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Gets or sets the created before date.",
            "x-ms-summary": "Gets or sets the created before date."
          },
          {
            "name": "Status",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Gets or sets the status.",
            "x-ms-summary": "Gets or sets the status."
          },
          {
            "name": "createdAfterDate",
            "default": "{{eSigner - FutureDate}}",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Gets or sets the created after date.",
            "x-ms-summary": "Gets or sets the created after date."
          }
        ],
        "responses": {
          "200": {
            "description": "The packagelist gets returned successfully",
            "schema": {
              "type": "object",
              "properties": {
                "ContinuationToken": {
                  "type": "string",
                  "description": "ContinuationToken",
                  "example": "68036c7f-db6c-4dd0-bc1d-cb7337b2259f"
                },
                "MaxQuantity": {
                  "type": "integer",
                  "format": "int32",
                  "description": "MaxQuantity",
                  "example": "2"
                },
                "Total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Total",
                  "example": 21
                },
                "Items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Package"
                  }
                }
              },
              "example": {
                "Id": "c3940cf6-fa80-441f-8971-55af6d00fb9d",
                "PackageStatus": "DRAFT",
                "ExternalPackageReference": "INVOICE-18-0048"
              }
            }
          },
          "400": {
            "description": "A request parameter was invalid."
          }
        },
        "x-ms-visibility": "advanced"
      },
      "post": {
        "summary": "Create Package",
        "description": "This call creates an empty package, allowing documents to be added to it",
        "operationId": "CreatePackage",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "default": " application/json",
            "description": "Content-Type",
            "x-ms-summary": "Content-Type"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "Initiator": {
                  "type": "string",
                  "description": "Email address of a registered user."
                },
                "PackageName": {
                  "type": "string",
                  "description": "Package name, seen in the eSignatures Portal and when downloading as zip file."
                },
                "CallBackUrl": {
                  "type": "string",
                  "description": "REST API URL that will be called each time an action has been completed for this package."
                },
                "CorrelationId": {
                  "type": "string",
                  "description": "Id that indicates which packages are correlated."
                },
                "DocumentGroupCode": {
                  "type": "string",
                  "description": "The \u2018Code\u2019 which identifies a document group in which the package should be shown."
                },
                "ThemeCode": {
                  "type": "string",
                  "description": "Theme that must be applied to the package"
                },
                "DownloadUnsignedFiles": {
                  "type": "boolean",
                  "description": "This parameter determines whether packages can be downloaded from the WYSIWYS before signing."
                },
                "ExpiryTimestamp": {
                  "type": "string",
                  "description": "The date and time when this package expires and can no longer be signed."
                },
                "ExternalPackageReference": {
                  "type": "string",
                  "description": "Reference given by the calling application. This parameter will not be used by the eSignatures Portal."
                },
                "ExternalPackageData": {
                  "type": "string",
                  "description": "This field is reserved for future use. It can be used for customer-specific extensions to integrate with third-party services, such as Debit Card signing."
                },
                "F2FRedirectUrl": {
                  "type": "string",
                  "description": "URL to which the end user is redirected after all fields have been signed with 'face to face' signing, or when all fields have been rejected."
                },
                "NotificationCallBackUrl": {
                  "type": "string",
                  "description": "REST API URL that will be called when an end user requests to be notified."
                }
              },
              "example": {
                "PackageName": "Contracts Mr. Doe",
                "Initiator": "info@mail.com",
                "DocumentGroupCode": "00001",
                "ExternalPackageReference": "2019-CR-5891"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "PackageId": {
                  "type": "string",
                  "description": "Unique identifier of the package."
                },
                "CreationTimestamp": {
                  "type": "string",
                  "description": "Date and time when the package was created according to the server."
                }
              },
              "example": {
                "PackageId": "25892e17-80f6-415f-9c65-7395632f0223",
                "CreationTimestamp": "2019-02-28T14:05:11+00:00"
              }
            }
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/packages/{PackageId}/documents": {
      "post": {
        "summary": "Add document to package",
        "description": "This call will add a document to an existing package.",
        "operationId": "AddDocumentToPackage",
        "parameters": [
          {
            "name": "PackageId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Package Unique Id",
            "x-ms-summary": "The package identifier."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "Document": {
                  "type": "string",
                  "description": "Attached document in base64 encoded format."
                },
                "DocumentLanguage": {
                  "type": "string",
                  "description": "Language to use in signature texts."
                },
                "DocumentName": {
                  "type": "string",
                  "description": "Name of the document to be shown in the eSignatures Portal."
                },
                "SigningFields": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SigningField"
                  },
                  "description": "One or more signing locations in the document."
                },
                "CorrelationId": {
                  "type": "string",
                  "description": "Id that indicates which documents within this package are correlated with documents that have been signed in the past in other packages."
                },
                "DocumentType": {
                  "type": "string",
                  "description": "Type of document that will be signed."
                },
                "ExternalDocumentReference": {
                  "type": "string",
                  "description": "Reference given by the calling application."
                },
                "PdfErrorHandling": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ErrorHandlingResponse"
                  }
                },
                "Representation": {
                  "type": "string",
                  "description": "Attached representation document in base64 format. This must be PDF data."
                },
                "RepresentationType": {
                  "type": "string",
                  "description": "Type of the representation document."
                },
                "TargetType": {
                  "type": "string",
                  "description": "The TargetType defines if an extra conversion to PDF/A needs to be done before signing."
                }
              },
              "example": {
                "Document": "JVBERi....rest-of-the-document",
                "DocumentName": "Invoice",
                "DocumentLanguage": "nl",
                "ExternalDocumentReference": "INV-2019-04-01-0038",
                "SigningFields": [
                  {
                    "PageNumber": 1,
                    "Width": "120",
                    "Height": "200",
                    "Left": "100",
                    "Top": "200",
                    "Label": "ThisIdentifiesJohnDoeHisSignatureLabel"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The document was correctly added to the package. The response contains more information about the locations where a signer can place a signature.",
            "schema": {
              "type": "object",
              "properties": {
                "DocumentId": {
                  "type": "string",
                  "description": "Unique id for the document"
                },
                "CreationTimestamp": {
                  "type": "string",
                  "description": "Date and time the flow was created. Format: YYYY-MM-DDThh:mm:ss+zz:zz"
                },
                "Locations": {
                  "type": "array",
                  "description": "Represents a possible location for a signature",
                  "items": {
                    "type": "object",
                    "properties": {
                      "Id": {
                        "type": "string",
                        "description": "Unique id for this location"
                      },
                      "Label": {
                        "type": "string",
                        "description": "Detected or specified label"
                      },
                      "PageNumber": {
                        "type": "boolean",
                        "description": "The page on which the location was found."
                      }
                    }
                  }
                }
              },
              "example": {
                "DocumentId": "e0cb4de4-673d-49fc-9bd1-7c81248984f9",
                "CreationTimestamp": "2019-03-28T08:54:38+00:00",
                "Locations": [
                  {
                    "Id": "8a96613f-b6ed-4227-9bde-c20d3ee0c9d6",
                    "Label": "ThisIdentifiesJohnDoeHisSignatureLabel",
                    "PageNumber": 1
                  }
                ]
              }
            }
          },
          "400": {
            "description": "The request contained parameters which could not be accepted."
          },
          "404": {
            "description": "The package id could not be found in the database."
          },
          "409": {
            "description": "When certain document conversions are forbidden, when the input document has issues, or when marker ids are not matched."
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/packages/{Id}/locations": {
      "get": {
        "summary": "Get Signing Locations",
        "description": "This call provides an overview of all signing locations inside the documents within a package. ",
        "operationId": "GetSigningLocations",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Id of the signing field",
            "x-ms-summary": "Id of the signing field"
          }
        ],
        "responses": {
          "200": {
            "description": "The signing locations from the package are returned successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "Documents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "DocumentId": {
                        "type": "string",
                        "description": "Unique id for the document"
                      },
                      "ExternalDocumentReference": {
                        "type": "string",
                        "description": "External reference for identification. Make sure to use a unique value."
                      },
                      "Locations": {
                        "description": "Represents a possible location for a signature",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "Id": {
                              "type": "string",
                              "description": "Unique id for this location."
                            },
                            "Label": {
                              "type": "string",
                              "description": "Value you entered as Request parameter."
                            },
                            "PageNumber": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of the page on which the signature can be found."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "Documents": [
                  {
                    "DocumentId": "7c0af947-e3db-417a-900a-c25852be3d97",
                    "ExternalDocumentReference": "INV-2019-04-23-0037",
                    "Locations": [
                      {
                        "Id": "ae554ac8-bacc-4e8a-81a1-46af780142ea",
                        "Label": "SIG01",
                        "PageNumber": 1
                      }
                    ]
                  },
                  {
                    "DocumentId": "176232c3-c97b-4b4a-91e3-c2f347c92e9f",
                    "ExternalDocumentReference": "INV-2019-04-23-0038",
                    "Locations": [
                      {
                        "Id": "2dd4ed18-ce80-49a8-aa75-f177045b2488",
                        "Label": "SIG02",
                        "PageNumber": 1
                      }
                    ]
                  }
                ]
              }
            }
          },
          "404": {
            "description": "The package Id given does not exist."
          },
          "409": {
            "description": "The package with the specified id was made with an old version of the api."
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/packages/{Id}/status": {
      "get": {
        "summary": "Get Package Status",
        "description": "Retrieves the current state of the package and its documents.",
        "operationId": "GetPackageStatus",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique id for the signing package",
            "x-ms-summary": "Unique id for the signing package"
          }
        ],
        "responses": {
          "200": {
            "description": "The package was returned successfully.",
            "schema": {
              "$ref": "#/definitions/PackageStatus"
            }
          },
          "404": {
            "description": "The package with the specified id could not be found."
          },
          "409": {
            "description": "The package with the specified id was made with an old version of the api."
          }
        },
        "x-ms-visibility": "advanced"
      },
      "put": {
        "summary": "Set Package Status",
        "description": "By means of the Set Package Status call, you can change the status of a package.",
        "operationId": "SetPackageStatus",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Unique id for the signing package",
            "x-ms-summary": "Unique id for the signing package"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Status": {
                  "type": "string",
                  "description": "Pending / Revoked"
                }
              },
              "example": {
                "Status": "Pending"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The package was successfully changed to the new status.",
            "schema": {
              "$ref": "#/definitions/PackageStatus"
            }
          },
          "400": {
            "description": "When invalid parameters are passed."
          },
          "404": {
            "description": "When an unknown package id is passed."
          },
          "409": {
            "description": "When the package doesn't contain any documents or the status doesn't allow revocation."
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/packages/{PackageId}/skipsigners": {
      "post": {
        "summary": "Skip Signers",
        "description": "This call skips all signers that haven\u2019t signed yet and sets their status to \u201cSkipped\u201d, which results in the complete package being marked as \u201cFinished\u201d.",
        "operationId": "SkipSigners",
        "parameters": [
          {
            "name": "PackageId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Unique id of the Package",
            "x-ms-summary": "Unique id of the Package"
          }
        ],
        "responses": {
          "200": {
            "description": "All signers that hadn\u2019t signed yet were successfully skipped."
          },
          "404": {
            "description": "Package.NotFound:{packageId}"
          },
          "409": {
            "description": "Package.NotSigned:{packageId}"
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/packages/{id}/download": {
      "get": {
        "summary": "Download Package",
        "description": "The package containing the signed documents can be downloaded by an external system using this call.",
        "operationId": "DownloadPackage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Unique ID of the Package",
            "x-ms-summary": "Unique ID of the Package"
          }
        ],
        "responses": {
          "200": {
            "description": "The package gets downloaded successfully.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "The package cannot be found."
          },
          "409": {
            "description": "The package hasn't been fully signed."
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/packages/{id}/expirytimestamp": {
      "put": {
        "summary": "Expiry Time Stamp",
        "description": "A package may have the status Expired when a package passed a value for the ExpiryTimestamp parameter in the Create Package call. Such a package can no longer be signed.",
        "operationId": "ExpiryTimeStamp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Unique ID of the Package",
            "x-ms-summary": "Unique ID of the Package"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "ExpiryTimestamp": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The update package expiry timestamp was set."
          },
          "400": {
            "description": "The request contained parameters which could not be accepted."
          },
          "409": {
            "description": "When the status of the document does not allow to extend the expiration period."
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/packages/{PackageId}/reminders": {
      "post": {
        "summary": "Send Package Reminders",
        "description": "Company policy might require that a document is handled within a given timespan. Triggering the \u201csend reminders\u201d call will look up everybody who hasn\u2019t signed and send them an extra notification as a reminder.",
        "operationId": "SendPackageReminders",
        "parameters": [
          {
            "name": "PackageId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Unique ID of the Package",
            "x-ms-summary": "Unique ID of the Package"
          }
        ],
        "responses": {
          "200": {
            "description": "The reminders have been sent."
          },
          "400": {
            "description": "The package with the given id could not be found."
          },
          "409": {
            "description": "The package did not have status Pending."
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/packages/{id}": {
      "delete": {
        "summary": "Delete Package",
        "description": "eSignatures does not automatically delete packages from the database once they have reached a final state. They are stored indefinitely. To delete packages from the database, users can use the Delete Package call.",
        "operationId": "DeletePackage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Unique ID of the Package",
            "x-ms-summary": "Unique ID of the Package"
          }
        ],
        "responses": {
          "200": {
            "description": "The package was deleted."
          },
          "404": {
            "description": "The package with the given id could not be found."
          },
          "409": {
            "description": "The package\u2019s status is still in a non-final state (e.g. Pending, Expired) so it can\u2019t be deleted yet."
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/packages/{id}/process": {
      "put": {
        "summary": "Set Process Information",
        "description": "This webservice method updates the people involved in the process (stakeholders) and assigns them steps which need to be taken.",
        "operationId": "SetProcessInformation",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Unique ID of the Package",
            "x-ms-summary": "Unique ID of the Package"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "Stakeholders": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "Actors": {
                        "type": "array",
                        "description": "Array with more information about what the stakeholder must do.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "Type": {
                              "type": "string",
                              "enum": [
                                "Signer",
                                "Receiver"
                              ],
                              "description": "Type"
                            },
                            "OrderIndex": {
                              "type": "string",
                              "description": "This number specifies in which order actors need to execute their action."
                            },
                            "LocationIds": {
                              "type": "array",
                              "description": "The location ids where a signature must be placed by this person.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "SigningTypes": {
                              "type": "array",
                              "description": "One or more signing type info objects.",
                              "items": {
                                "$ref": "#/definitions/SigningType"
                              }
                            },
                            "Phonenumber": {
                              "type": "string",
                              "description": "Phone number to receive an SMS OTP."
                            },
                            "RedirectURL": {
                              "type": "string",
                              "description": "Url to which the end user is redirected after signing, or rejecting. The redirect occurs immediately after signing or rejecting."
                            },
                            "SendNotifications": {
                              "type": "boolean",
                              "description": "eSignatures can send e-mails to the actors whose action is required, such as signing"
                            },
                            "UserRoles": {
                              "type": "array",
                              "description": "The location ids where a signature must be placed by this person.",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "LEGALNOTICE1",
                                  "LEGALNOTICE2",
                                  "LEGALNOTICE3"
                                ]
                              }
                            },
                            "LegalNoticeCode": {
                              "type": "string",
                              "description": "The 3 values will point to the 3 legal notices built into the application. These can be altered in the Configuration Index."
                            },
                            "LegalNoticetext": {
                              "type": "string",
                              "description": "Custom legal notice text in case none of the three predefined legal notices apply"
                            }
                          }
                        }
                      },
                      "EmailAddress": {
                        "type": "string",
                        "description": "Email Address"
                      },
                      "FirstName": {
                        "type": "string",
                        "description": "First Name"
                      },
                      "Language": {
                        "type": "string",
                        "description": "UI language of this stakeholder. Currently supported: en, nl, de, fr, es."
                      },
                      "LastName": {
                        "type": "string",
                        "description": "Last Name"
                      },
                      "BirthDate": {
                        "type": "string",
                        "description": "Date of birth in format: YYYY-MM-DD"
                      },
                      "ExternalStakeholderReference": {
                        "type": "string",
                        "description": "Reference given by the calling application. This parameter will not be used by the eSignatures Portal."
                      }
                    }
                  }
                }
              },
              "example": {
                "Stakeholders": [
                  {
                    "FirstName": "John",
                    "LastName": "Doe",
                    "EmailAddress": "john.doe@example.org",
                    "Language": "en",
                    "BirthDate": "1972-09-24",
                    "ExternalStakeholderReference": "C0004105",
                    "Actors": [
                      {
                        "Type": "Signer",
                        "OrderIndex": 1,
                        "LocationIds": [
                          "68f35693-5530-4770-b8d8-76284719e524",
                          "c2e325a4-7b1d-42a6-8179-5377707d007c"
                        ],
                        "SigningTypes": [
                          {
                            "SigningType": "BeId",
                            "MandatedSignerValidation": "MatchId",
                            "MandatedSignerIds": [
                              "72092400465",
                              "72092630155"
                            ]
                          },
                          {
                            "SigningType": "BeLawyer",
                            "MandatedSignerValidation": "MatchId",
                            "MandatedSignerIds": [
                              "83fc726f-9e4a-486f-9d99-87c6604bde7d",
                              "7ab8594b-4cd0-4c7e-862e-3cc226622149"
                            ]
                          }
                        ],
                        "PhoneNumber": "+32477123456",
                        "UserRoles": [
                          "Lawyer"
                        ],
                        "SendNotifications": true,
                        "RedirectUrl": "https://www.mycompany.com"
                      }
                    ]
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The process information has successfully been added to the package."
          },
          "400": {
            "description": "There are invalid parameters in the request."
          },
          "404": {
            "description": "When an unknown package id is passed."
          },
          "409": {
            "description": "Some parameters conflict with the data found in the database or configuration."
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/packages/{packageId}/auditproof/download": {
      "get": {
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/xml"
        ],
        "description": "A package\u2019s audit proofs xml can be retrieved when the package is fully signed. The same applies for a document: it only works when the containing package is fully signed.",
        "summary": "Package Audit Proof",
        "operationId": "PackageAuditProof",
        "parameters": [
          {
            "name": "packageId",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "Unique ID of the Package",
            "x-ms-summary": "Unique ID of the Package"
          }
        ],
        "responses": {
          "200": {
            "description": "The Audit proofs xml is returned.",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          "404": {
            "description": "Not Found  The documentation/package id could not be found."
          },
          "409": {
            "description": "Conflict  The package is not fully signed."
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/packages/{packageId}/auditproof/download/{documentId}": {
      "get": {
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/xml"
        ],
        "description": "A package\u2019s audit proofs xml can be retrieved when the package is fully signed. The same applies for a document: it only works when the containing package is fully signed.",
        "summary": "Package Audit Proof with document ID",
        "operationId": "PackageAuditProofDoc",
        "parameters": [
          {
            "name": "packageId",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "Unique ID of the Package",
            "x-ms-summary": "Unique ID of the Package"
          },
          {
            "name": "documentId",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "Unique ID of the Document",
            "x-ms-summary": "Unique ID of the Document"
          }
        ],
        "responses": {
          "200": {
            "description": "The Audit proofs xml is returned.",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          "404": {
            "description": "Not Found  The documentation/package id could not be found."
          },
          "409": {
            "description": "Conflict  The package is not fully signed."
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/packagecorrelations/{correlationId}/auditproof/download": {
      "get": {
        "produces": [
          "application/xml"
        ],
        "description": "Correlation ids are used to track packages or documents across several passes through the eSignatures application.",
        "summary": "Package Correlation Audit Proof Download",
        "operationId": "PackageCorrelationAuditProof",
        "parameters": [
          {
            "name": "correlationId",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The correlation identifier.",
            "x-ms-summary": "The correlation identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "The Audit proofs xml is returned.",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          "404": {
            "description": "Not Found  The documentation/package id could not be found."
          },
          "409": {
            "description": "Conflict  The package is not fully signed."
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/documentcorrelations/{correlationId}/auditproof/download": {
      "get": {
        "produces": [
          "application/xml"
        ],
        "description": "Correlation ids are used to track packages or documents across several passes through the eSignatures application.",
        "summary": "Document Correlation Audit Proof Download",
        "operationId": "DocumentCorrelationAuditProof",
        "parameters": [
          {
            "name": "correlationId",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The correlation identifier.",
            "x-ms-summary": "The correlation identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "The Audit proofs xml is returned.",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          "404": {
            "description": "Not Found  The documentation/package id could not be found."
          },
          "409": {
            "description": "Conflict  The package is not fully signed."
          }
        },
        "x-ms-visibility": "advanced"
      }
    },
    "/packages/{packageId}/auditproof/proofs": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "description": "This call allows API users to add extra proofs from an external source to a location on a document.",
        "summary": "Add Proof from External Source",
        "operationId": "ProofExternalSource",
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique ID of the Package",
            "x-ms-summary": "The unique ID of the Package"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "Content": {
                  "type": "string",
                  "description": "The actual content of the proof."
                },
                "LocationId": {
                  "type": "string",
                  "description": "Location of the signature for which the proof content was generated."
                },
                "Name": {
                  "type": "string",
                  "description": "Name of the proof."
                },
                "Type": {
                  "type": "string",
                  "description": "A machine-readable \u201ctype\u201d key. Can be freely chosen."
                },
                "Description": {
                  "type": "string",
                  "description": "Brief human-readable description of the proof."
                },
                "IpAddress": {
                  "type": "string",
                  "description": "IP address of the end user of the external source for which the proof was added."
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The proof was created for the requested location."
          },
          "400": {
            "description": "The request contained parameters which could not be accepted."
          },
          "404": {
            "description": "The documentId or the LocationId could not be found."
          },
          "409": {
            "description": "The proof could not be added due to some other reason."
          }
        },
        "x-ms-visibility": "advanced"
      }
    }
  },
  "x-ms-connector-metadata": [
      {
        "propertyName": "Website",
        "propertyValue": "https://www.connective.eu"
      },
      {
        "propertyName": "Privacy policy",
        "propertyValue": "https://connective.eu/privacy-policy/"
      },
      {
        "propertyName": "Categories",
        "propertyValue": "IT Operations;Productivity"
      }
    ],
  "security": [
    {
      "basic_auth": []
    }
  ]
}