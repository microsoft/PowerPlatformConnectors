{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "TeamWherx",
    "description": "TeamWherx(TW) is an all-in-one service management platform that helps you more effectively manage your remote teams of employees and general business operations away from the office. As a cloud-based solution, TW enables remote data collection and displays it via its web app dashboard, providing managers with the additional insight they need to create smarter strategies for increased efficiency, productivity, and reduced costs while coordinating their mobile workforces.",
    "contact": {
      "name": "Actsoft Support",
      "url": "https://www.actsoft.com/self-help-wizards",
      "email": "support@actsoft.com"
    }
  },
  "host": "customerapi.wfmplatform.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/binaries/v1/binaries": {
      "post": {
        "tags": [
          "Binaries API"
        ],
        "summary": "Upload binary file",
        "description": "Use this option to upload form file attachments. Binary size is limited to 10MB. Supported file types are: JPEG, PNG, and MP4.",
        "operationId": "BinariesController_UploadBinary",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "201": {
            "description": "Binary was uploaded successfully.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Binaries.UploadBinaryResultApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "MIME type not supported."
                },
                {
                  "Code": 100,
                  "Message": "Maximum file size exceeded."
                },
                {
                  "Code": 102,
                  "Message": "Binary content is empty."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/clients/v1/{id}": {
      "get": {
        "tags": [
          "Clients API"
        ],
        "summary": "Get a client",
        "description": "Retrieves a client object by its Id.",
        "operationId": "ClientsController_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client Id.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Client is returned in body.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Client.ReadClientApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 102,
                  "Message": "Client Name is not unique."
                },
                {
                  "Code": 103,
                  "Message": "Client already deleted or deactivated."
                },
                {
                  "Code": 104,
                  "Message": "External id is not unique."
                },
                {
                  "Code": 105,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 107,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 108,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 109,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 110,
                  "Message": "Latitude/Longitude values are not valid."
                },
                {
                  "Code": 111,
                  "Message": "Internal Id is not unique."
                },
                {
                  "Code": 112,
                  "Message": "Client has active orders."
                },
                {
                  "Code": 113,
                  "Message": "Country not supported."
                },
                {
                  "Code": 114,
                  "Message": "Client not found."
                },
                {
                  "Code": 115,
                  "Message": "Region not supported."
                },
                {
                  "Code": 116,
                  "Message": "Country length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "City length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Region Code length is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Region Name length is not valid."
                },
                {
                  "Code": 120,
                  "Message": "SubRegion Code length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "SubRegion Name length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "Postal Code length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Address Line 1 length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Address Line 2 length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 126,
                  "Message": "Contact email format is not valid."
                },
                {
                  "Code": 127,
                  "Message": "Custom field negative field index."
                },
                {
                  "Code": 128,
                  "Message": "Custom field invalid data type."
                },
                {
                  "Code": 129,
                  "Message": "Custom field value length is not valid."
                },
                {
                  "Code": 130,
                  "Message": "Custom field value format is not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Client not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 102,
                  "Message": "Client Name is not unique."
                },
                {
                  "Code": 103,
                  "Message": "Client already deleted or deactivated."
                },
                {
                  "Code": 104,
                  "Message": "External id is not unique."
                },
                {
                  "Code": 105,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 107,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 108,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 109,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 110,
                  "Message": "Latitude/Longitude values are not valid."
                },
                {
                  "Code": 111,
                  "Message": "Internal Id is not unique."
                },
                {
                  "Code": 112,
                  "Message": "Client has active orders."
                },
                {
                  "Code": 113,
                  "Message": "Country not supported."
                },
                {
                  "Code": 114,
                  "Message": "Client not found."
                },
                {
                  "Code": 115,
                  "Message": "Region not supported."
                },
                {
                  "Code": 116,
                  "Message": "Country length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "City length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Region Code length is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Region Name length is not valid."
                },
                {
                  "Code": 120,
                  "Message": "SubRegion Code length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "SubRegion Name length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "Postal Code length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Address Line 1 length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Address Line 2 length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 126,
                  "Message": "Contact email format is not valid."
                },
                {
                  "Code": 127,
                  "Message": "Custom field negative field index."
                },
                {
                  "Code": 128,
                  "Message": "Custom field invalid data type."
                },
                {
                  "Code": 129,
                  "Message": "Custom field value length is not valid."
                },
                {
                  "Code": 130,
                  "Message": "Custom field value format is not valid."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Clients API"
        ],
        "summary": "Update a client",
        "description": "Updates an existing client.",
        "operationId": "ClientsController_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "clientModel",
            "in": "body",
            "description": "Client object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Client.UpdateClientApiModel"
            },
            "x-ms-summary": "clientModel"
          },
          {
            "name": "geocode",
            "in": "query",
            "description": "Should address be geocoded or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "geocode"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Client has been updated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.ReturnIdApiModel"
            }
          },
          "201": {
            "description": "Client has been created.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.ReturnIdApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 102,
                  "Message": "Client Name is not unique."
                },
                {
                  "Code": 103,
                  "Message": "Client already deleted or deactivated."
                },
                {
                  "Code": 104,
                  "Message": "External id is not unique."
                },
                {
                  "Code": 105,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 107,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 108,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 109,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 110,
                  "Message": "Latitude/Longitude values are not valid."
                },
                {
                  "Code": 111,
                  "Message": "Internal Id is not unique."
                },
                {
                  "Code": 112,
                  "Message": "Client has active orders."
                },
                {
                  "Code": 113,
                  "Message": "Country not supported."
                },
                {
                  "Code": 114,
                  "Message": "Client not found."
                },
                {
                  "Code": 115,
                  "Message": "Region not supported."
                },
                {
                  "Code": 116,
                  "Message": "Country length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "City length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Region Code length is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Region Name length is not valid."
                },
                {
                  "Code": 120,
                  "Message": "SubRegion Code length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "SubRegion Name length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "Postal Code length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Address Line 1 length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Address Line 2 length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 126,
                  "Message": "Contact email format is not valid."
                },
                {
                  "Code": 127,
                  "Message": "Custom field negative field index."
                },
                {
                  "Code": 128,
                  "Message": "Custom field invalid data type."
                },
                {
                  "Code": 129,
                  "Message": "Custom field value length is not valid."
                },
                {
                  "Code": 130,
                  "Message": "Custom field value format is not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 102,
                  "Message": "Client Name is not unique."
                },
                {
                  "Code": 103,
                  "Message": "Client already deleted or deactivated."
                },
                {
                  "Code": 104,
                  "Message": "External id is not unique."
                },
                {
                  "Code": 105,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 107,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 108,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 109,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 110,
                  "Message": "Latitude/Longitude values are not valid."
                },
                {
                  "Code": 111,
                  "Message": "Internal Id is not unique."
                },
                {
                  "Code": 112,
                  "Message": "Client has active orders."
                },
                {
                  "Code": 113,
                  "Message": "Country not supported."
                },
                {
                  "Code": 114,
                  "Message": "Client not found."
                },
                {
                  "Code": 115,
                  "Message": "Region not supported."
                },
                {
                  "Code": 116,
                  "Message": "Country length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "City length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Region Code length is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Region Name length is not valid."
                },
                {
                  "Code": 120,
                  "Message": "SubRegion Code length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "SubRegion Name length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "Postal Code length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Address Line 1 length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Address Line 2 length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 126,
                  "Message": "Contact email format is not valid."
                },
                {
                  "Code": 127,
                  "Message": "Custom field negative field index."
                },
                {
                  "Code": 128,
                  "Message": "Custom field invalid data type."
                },
                {
                  "Code": 129,
                  "Message": "Custom field value length is not valid."
                },
                {
                  "Code": 130,
                  "Message": "Custom field value format is not valid."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Clients API"
        ],
        "summary": "Delete a client",
        "description": "Deletes an existing client by its Id.",
        "operationId": "ClientsController_Delete",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Client Id.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Client deleted.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 102,
                  "Message": "Client Name is not unique."
                },
                {
                  "Code": 103,
                  "Message": "Client already deleted or deactivated."
                },
                {
                  "Code": 104,
                  "Message": "External id is not unique."
                },
                {
                  "Code": 105,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 107,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 108,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 109,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 110,
                  "Message": "Latitude/Longitude values are not valid."
                },
                {
                  "Code": 111,
                  "Message": "Internal Id is not unique."
                },
                {
                  "Code": 112,
                  "Message": "Client has active orders."
                },
                {
                  "Code": 113,
                  "Message": "Country not supported."
                },
                {
                  "Code": 114,
                  "Message": "Client not found."
                },
                {
                  "Code": 115,
                  "Message": "Region not supported."
                },
                {
                  "Code": 116,
                  "Message": "Country length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "City length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Region Code length is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Region Name length is not valid."
                },
                {
                  "Code": 120,
                  "Message": "SubRegion Code length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "SubRegion Name length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "Postal Code length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Address Line 1 length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Address Line 2 length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 126,
                  "Message": "Contact email format is not valid."
                },
                {
                  "Code": 127,
                  "Message": "Custom field negative field index."
                },
                {
                  "Code": 128,
                  "Message": "Custom field invalid data type."
                },
                {
                  "Code": 129,
                  "Message": "Custom field value length is not valid."
                },
                {
                  "Code": 130,
                  "Message": "Custom field value format is not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 102,
                  "Message": "Client Name is not unique."
                },
                {
                  "Code": 103,
                  "Message": "Client already deleted or deactivated."
                },
                {
                  "Code": 104,
                  "Message": "External id is not unique."
                },
                {
                  "Code": 105,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 107,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 108,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 109,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 110,
                  "Message": "Latitude/Longitude values are not valid."
                },
                {
                  "Code": 111,
                  "Message": "Internal Id is not unique."
                },
                {
                  "Code": 112,
                  "Message": "Client has active orders."
                },
                {
                  "Code": 113,
                  "Message": "Country not supported."
                },
                {
                  "Code": 114,
                  "Message": "Client not found."
                },
                {
                  "Code": 115,
                  "Message": "Region not supported."
                },
                {
                  "Code": 116,
                  "Message": "Country length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "City length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Region Code length is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Region Name length is not valid."
                },
                {
                  "Code": 120,
                  "Message": "SubRegion Code length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "SubRegion Name length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "Postal Code length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Address Line 1 length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Address Line 2 length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 126,
                  "Message": "Contact email format is not valid."
                },
                {
                  "Code": 127,
                  "Message": "Custom field negative field index."
                },
                {
                  "Code": 128,
                  "Message": "Custom field invalid data type."
                },
                {
                  "Code": 129,
                  "Message": "Custom field value length is not valid."
                },
                {
                  "Code": 130,
                  "Message": "Custom field value format is not valid."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/clients/v1/clients": {
      "get": {
        "tags": [
          "Clients API"
        ],
        "summary": "Get a list of clients",
        "description": "Retrieves a list of clients. You can specify the number of pages returned and the number of elements per page. \r\nThe results are automatically sorted by Name, and in ascending order. Sort parameters are not configurable.",
        "operationId": "ClientsController_GetClients",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Start page number.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageNumber"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageSize"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Client list is returned in body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.Client.ReadClientApiModel"
              }
            }
          },
          "204": {
            "description": "No clients found. Body is empty.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 5,
                  "Message": "Minor version is not valid."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Clients API"
        ],
        "summary": "Create a client",
        "description": "Creates a new client.",
        "operationId": "ClientsController_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientModel",
            "in": "body",
            "description": "Client object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Client.UpdateClientApiModel"
            },
            "x-ms-summary": "clientModel"
          },
          {
            "name": "geocode",
            "in": "query",
            "description": "Should address be geocoded or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "geocode"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "201": {
            "description": "Client has been created.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.ReturnIdApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 102,
                  "Message": "Client Name is not unique."
                },
                {
                  "Code": 103,
                  "Message": "Client already deleted or deactivated."
                },
                {
                  "Code": 104,
                  "Message": "External id is not unique."
                },
                {
                  "Code": 105,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 107,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 108,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 109,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 110,
                  "Message": "Latitude/Longitude values are not valid."
                },
                {
                  "Code": 111,
                  "Message": "Internal Id is not unique."
                },
                {
                  "Code": 112,
                  "Message": "Client has active orders."
                },
                {
                  "Code": 113,
                  "Message": "Country not supported."
                },
                {
                  "Code": 114,
                  "Message": "Client not found."
                },
                {
                  "Code": 115,
                  "Message": "Region not supported."
                },
                {
                  "Code": 116,
                  "Message": "Country length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "City length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Region Code length is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Region Name length is not valid."
                },
                {
                  "Code": 120,
                  "Message": "SubRegion Code length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "SubRegion Name length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "Postal Code length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Address Line 1 length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Address Line 2 length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 126,
                  "Message": "Contact email format is not valid."
                },
                {
                  "Code": 127,
                  "Message": "Custom field negative field index."
                },
                {
                  "Code": 128,
                  "Message": "Custom field invalid data type."
                },
                {
                  "Code": 129,
                  "Message": "Custom field value length is not valid."
                },
                {
                  "Code": 130,
                  "Message": "Custom field value format is not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 102,
                  "Message": "Client Name is not unique."
                },
                {
                  "Code": 103,
                  "Message": "Client already deleted or deactivated."
                },
                {
                  "Code": 104,
                  "Message": "External id is not unique."
                },
                {
                  "Code": 105,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "Client Name length is not valid."
                },
                {
                  "Code": 107,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 108,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 109,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 110,
                  "Message": "Latitude/Longitude values are not valid."
                },
                {
                  "Code": 111,
                  "Message": "Internal Id is not unique."
                },
                {
                  "Code": 112,
                  "Message": "Client has active orders."
                },
                {
                  "Code": 113,
                  "Message": "Country not supported."
                },
                {
                  "Code": 114,
                  "Message": "Client not found."
                },
                {
                  "Code": 115,
                  "Message": "Region not supported."
                },
                {
                  "Code": 116,
                  "Message": "Country length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "City length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Region Code length is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Region Name length is not valid."
                },
                {
                  "Code": 120,
                  "Message": "SubRegion Code length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "SubRegion Name length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "Postal Code length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Address Line 1 length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Address Line 2 length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 126,
                  "Message": "Contact email format is not valid."
                },
                {
                  "Code": 127,
                  "Message": "Custom field negative field index."
                },
                {
                  "Code": 128,
                  "Message": "Custom field invalid data type."
                },
                {
                  "Code": 129,
                  "Message": "Custom field value length is not valid."
                },
                {
                  "Code": 130,
                  "Message": "Custom field value format is not valid."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/custom-lists/v1/custom-lists/definitions": {
      "get": {
        "tags": [
          "Custom lists API"
        ],
        "summary": "Get custom list definitions",
        "description": "Retrieves a Custom List definition listing. The definition listing contains the CustomListID, Name and Version for all existing custom lists.",
        "operationId": "CustomListsController_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom List Definitions list is returned in body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.CustomLists.CustomListDefinitionListItemApiModel"
              }
            }
          },
          "204": {
            "description": "Custom List Definition not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/custom-lists/v1/custom-lists/definitions/{customListId}": {
      "get": {
        "tags": [
          "Custom lists API"
        ],
        "summary": "Get custom list fields listing by CustomListID",
        "description": "Retrieves a list of fields for a single custom list, using the CustomListID.",
        "operationId": "CustomListsController_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customListId",
            "in": "path",
            "description": "Custom list id.",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-ms-summary": "customListId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "CustomListDefinition is returned in body.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.CustomLists.CustomListApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Custom List Definition not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/custom-lists/v1/custom-lists/{customListId}": {
      "get": {
        "tags": [
          "Custom lists API"
        ],
        "summary": "Get custom list data by CustomListID",
        "description": "Retrieves all the data records in a single custom list using the CustomListID.\r\n\r\nResults are sorted by column, and paging is supported.\r\n\r\nErrors:\r\n\r\n404 - there is no custom list for provided customListId.",
        "operationId": "CustomListsController_GetCustomListRows",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customListId",
            "in": "path",
            "description": "Custom list id.",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-ms-summary": "customListId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Start page number.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageNumber"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageSize"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "List of custom list data is returned in body.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.CustomLists.CustomListColumnValuesContainerApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                },
                {
                  "Code": 124,
                  "Message": "Address Line 2 length is not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Custom List Definition not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/custom-lists/v1/custom-lists/{customListId}/{id}": {
      "get": {
        "tags": [
          "Custom lists API"
        ],
        "summary": "Get single record from custom list",
        "description": "Retrieves single custom list data record found by CustomListId and unique column value.\r\n\r\nErrors:\r\n\r\n404 - there is no custom list record for provided customListId and unique column value",
        "operationId": "CustomListsController_GetSingleRecord",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customListId",
            "in": "path",
            "description": "Custom list id.",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-ms-summary": "customListId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique value.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom list record is returned in body.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.CustomLists.CustomListColumnValuesContainerApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Custom List Definition not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Custom lists API"
        ],
        "summary": "Create or update custom list record",
        "description": "Creates or updates custom list data record. The value of unique column can be omitted, but if present, it should match the Unique ID value in the query parameter.",
        "operationId": "CustomListsController_PutRecord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customListId",
            "in": "path",
            "description": "Custom list id.",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-ms-summary": "customListId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique value.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.CustomLists.CustomListColumnValuesContainerApiModel"
            },
            "x-ms-summary": "body"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom list records have been put.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Custom List Definition not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "No custom list is associated with the customListId provided."
                },
                {
                  "Code": 102,
                  "Message": "Unique value in body of PUT method doesn't match URL parameters."
                },
                {
                  "Code": 103,
                  "Message": "Email address Invalid - Email address provided does not fit the required syntax for the column."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Custom lists API"
        ],
        "summary": "Delete custom list record",
        "description": "Deletes existing record in custom list by its customListId and id.\r\n\r\nid  - is unique value of custom list record.\r\n\r\nErrors:\r\n\r\n404 - customListId or id not found.",
        "operationId": "CustomListsController_DeleteRecord",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customListId",
            "in": "path",
            "description": "Custom list id.",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-ms-summary": "customListId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique value.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "CustomListDefinition is returned in body.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "No custom list is associated with the customListId provided."
                },
                {
                  "Code": 102,
                  "Message": "Unique value in body of PUT method doesn't match URL parameters."
                },
                {
                  "Code": 103,
                  "Message": "Email address Invalid - Email address provided does not fit the required syntax for the column."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Custom List Definition not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "No custom list is associated with the customListId provided."
                },
                {
                  "Code": 102,
                  "Message": "Unique value in body of PUT method doesn't match URL parameters."
                },
                {
                  "Code": 103,
                  "Message": "Email address Invalid - Email address provided does not fit the required syntax for the column."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/events/v1/definitions/{id}": {
      "get": {
        "tags": [
          "Events API"
        ],
        "summary": "Get a custom event definition by ID",
        "description": "Retrieves a single custom event definition by ID.",
        "operationId": "EventsController_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event definition id.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom event definition is returned in body.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.CustomEventDefinitions.ReadCustomEventDefinitionApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Custom event definition not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Events API"
        ],
        "summary": "Create or update a custom event definition",
        "description": "Creates or updates a custom event definition.",
        "operationId": "EventsController_Put",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event definition id.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Custom event definition data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.CustomEventDefinitions.CreateUpdateCustomEventDefinitionApiModel"
            },
            "x-ms-summary": "body"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "201": {
            "description": "Custom event definition is created.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "204": {
            "description": "Request has been processed, but there is no content in the body.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 3,
                  "Message": "InvalidDataFormat. Request body cannot be empty."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 102,
                  "Message": "Parameters JSON string must not exceed 4000 characters."
                },
                {
                  "Code": 103,
                  "Message": "Custom event definition param data type not set."
                },
                {
                  "Code": 104,
                  "Message": "Non unique external Id."
                },
                {
                  "Code": 105,
                  "Message": "Non unique param name."
                },
                {
                  "Code": 106,
                  "Message": "Parameter can not be removed."
                },
                {
                  "Code": 107,
                  "Message": "Parameter data type can not be changed."
                },
                {
                  "Code": 109,
                  "Message": "Name: The length of the value must fall within the range \"1\" (Inclusive) - \"4000\" (Inclusive)."
                },
                {
                  "Code": 110,
                  "Message": "Caption: The length of the value must fall within the range \"1\" (Inclusive) - \"4000\" (Inclusive)."
                },
                {
                  "Code": 111,
                  "Message": "Name: The length of the value must fall within the range \"1\" (Inclusive) - \"100\" (Inclusive)."
                },
                {
                  "Code": 112,
                  "Message": "ExternalId: The length of the value must fall within the range \"1\" (Inclusive) - \"64\" (Inclusive)."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Events API"
        ],
        "summary": "Delete a custom event definition",
        "description": "Deletes a custom event definition.",
        "operationId": "EventsController_Delete",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event definition id.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "204": {
            "description": "Request has been processed, but there is no content in the body."
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Custom event definition not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/events/v1/definitions": {
      "get": {
        "tags": [
          "Events API"
        ],
        "summary": "Get a list of custom event definitions",
        "description": "Retrieves a list of custom event definitions.",
        "operationId": "EventsController_GetList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom event definitions list is returned in body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.CustomEventDefinitions.ReadCustomEventDefinitionApiModel"
              }
            }
          },
          "204": {
            "description": "Request has been processed, but there is no content in the body.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/events/v1/data": {
      "post": {
        "tags": [
          "Events API"
        ],
        "summary": "Submit event",
        "description": "Submits event.",
        "operationId": "EventsController_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Custom event data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.CustomEventData.PostCustomEventDataApiModel"
            },
            "x-ms-summary": "data"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "201": {
            "description": "Created."
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 3,
                  "Message": "InvalidDataFormat. Request body cannot be empty."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Registered event not found."
                },
                {
                  "Code": 102,
                  "Message": "Entity identification is missing or identification type is invalid."
                },
                {
                  "Code": 103,
                  "Message": "Entity (User, Vehicle or Device) not found or it's inactive."
                },
                {
                  "Code": 104,
                  "Message": "Parameter not recognized."
                },
                {
                  "Code": 105,
                  "Message": "Required parameter is missing."
                },
                {
                  "Code": 106,
                  "Message": "Parameter type mismatch. Example: integer value is required, but text is provided that can't be converted to integer."
                },
                {
                  "Code": 107,
                  "Message": "Time must be set."
                },
                {
                  "Code": 108,
                  "Message": "Event definition id cannot be null."
                },
                {
                  "Code": 109,
                  "Message": "One and only one property to identify: device, user or vehicle must be supplied."
                },
                {
                  "Code": 110,
                  "Message": "Currently API supports only EmployeeNumber as Entity identification."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/events/v1/events": {
      "get": {
        "tags": [
          "Events API"
        ],
        "summary": "Get a list of events",
        "description": "Retrieves a list of events for a specific time period. You can specify the number of pages returned and the number of elements per page.\r\n\r\nFilter by event type to get specific events.\r\nVehicle events can be returned for an employee if the employee is associated with the vehicle.",
        "operationId": "EventsController_GetEvents",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "Date range start.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "fromDate"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Date range end.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "toDate"
          },
          {
            "name": "employeeNumber",
            "in": "query",
            "description": "Employee number.",
            "required": false,
            "type": "string",
            "x-ms-summary": "employeeNumber"
          },
          {
            "name": "vehicleNumber",
            "in": "query",
            "description": "Vehicle number.",
            "required": false,
            "type": "string",
            "x-ms-summary": "vehicleNumber"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Start page number.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageNumber"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageSize"
          },
          {
            "name": "eventType",
            "in": "query",
            "description": "Filter by event type. \r\n\r\nemployee number is specified:\r\n* UserEvents(0) - only user events.\r\n* VehicleEvents(1) - only vehicle events, including sensor events.\r\n* ExternalEvents(2) - only external events.\r\n\r\nvehicle number is specified:\r\n* UserEvents(0) - N/A.\r\n* VehicleEvents(1) - only vehicle events, including sensor events.\r\n* ExternalEvents(2) - only external events.\r\n\r\nNeither employee number nor vehicle number is specified:\r\n* UserEvents(0) - only user events.\r\n* VehicleEvents(1) - only vehicle events, including sensor events.\r\n* ExternalEvents(2) - only external events.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2
            ],
            "x-ms-summary": "eventType"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was executed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.CustomEventData.ReadEventListItemApiModel"
              }
            }
          },
          "204": {
            "description": "No events found. Body is empty.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 111,
                  "Message": "Invalid fromDate."
                },
                {
                  "Code": 112,
                  "Message": "Invalid toDate."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                },
                {
                  "Code": 113,
                  "Message": "Both Employee Number are provided."
                },
                {
                  "Code": 115,
                  "Message": "There is no user with the employee number."
                },
                {
                  "Code": 116,
                  "Message": "There is no vehicle with the vehicle number."
                },
                {
                  "Code": 118,
                  "Message": "eventType = 0 is unacceptable for vehicle events."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/events/v1/subscribe": {
      "post": {
        "tags": [
          "Events API"
        ],
        "summary": "Subscribe to events web hook",
        "description": "Adds new events web hook subscription. Web hooks allow you to receive automatic notifications on company events occurring on a specified URL.",
        "operationId": "EventsController_SubscribeToEventsDataFeed",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionParams",
            "in": "body",
            "description": "Subscription parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.WebHookSubscription.WebHookSubscriptionParamsApiModel"
            },
            "x-ms-summary": "subscriptionParams"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "New web hook subscription for events was created successfully.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.WebHookSubscription.WebHookSubscriptionResultApiModel"
            }
          },
          "204": {
            "description": "This is returned when there are no records.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 3,
                  "Message": "Request body cannot be empty."
                },
                {
                  "Code": 149,
                  "Message": "Url: The length of the value must fall within the range \"10\" (Inclusive) - \"2083\" (Inclusive)."
                },
                {
                  "Code": 151,
                  "Message": "Url: Invalid URL."
                },
                {
                  "Code": 150,
                  "Message": "Security token is too long."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Events API"
        ],
        "summary": "Unsubscribe from events web hook",
        "description": "Deletes an events web hook subscription by its ID.",
        "operationId": "EventsController_RemoveEventsDataFeedSubscription",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id to delete.",
            "required": true,
            "type": "string",
            "x-ms-summary": "subscriptionId"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "204": {
            "description": "No events found. Body is empty.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 148,
                  "Message": "Invalid subscriptionId."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/events/v1/subscriptions": {
      "get": {
        "tags": [
          "Events API"
        ],
        "summary": "Get a list of event web hook subscriptions",
        "description": "Retrieves a list of event web hook subscriptions. You can specify the number of pages returned and the number of elements per page. Results are automatically sorted by\r\nSubscriptionId, and in ascending order. Sort parameters are not configurable.",
        "operationId": "EventsController_GetSubscriptions",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was executed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.WebHookSubscription.WebHookSubscriptionInfoApiModel"
              }
            }
          },
          "204": {
            "description": "This is returned when there are no records.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Events API"
        ],
        "summary": "Web hook callback with events feed",
        "description": "This example method is used by events/subscribe to post back event data feed using customer provided URL.",
        "operationId": "EventsController_subscribe_callback",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "event",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.WebHookEventApiModel"
            },
            "x-ms-summary": "event"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/events/v1/subscription/{subscriptionId}/reset": {
      "put": {
        "tags": [
          "Events API"
        ],
        "summary": "Resets event web hook subscription status",
        "description": "Changes subscription status to the status = 1 (\"Running\").",
        "operationId": "EventsController_ResetSubscriptionHealthStatus",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Subscription id.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "subscriptionId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "204": {
            "description": "This is returned when there are no records.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/forms/v1/poll": {
      "get": {
        "tags": [
          "Forms API"
        ],
        "summary": "Form data poll",
        "description": "The Forms API polling endpoint allows your application to continually poll and process recently submitted standalone forms.\r\n\r\nIntegration:\r\n\r\nThis endpoint is designed to work out of the box with Microsoft Flow as a polling trigger integration. Alternatively, you may develop your own \r\ncustom integration using any language.\r\n\r\nUsage:\r\n\r\nIn a typical scenario, the first request to this endpoint should not provide any parameters. There are two (2) possible successful responses:\r\n* HTTP Response code 200 - Recently submitted form records exist; response body will display form data.\r\n* HTTP Response code 202 - No recently submitted records exist; response body will be empty.\r\n\r\nIn both cases, there are two (2) important headers in the response:\r\n* Location - The URL for the next request.\r\n* Retry-After - The recommended time interval in seconds for next request. For example, if there is data to retrieve, the Retry-After header will have a value of 1 or 60. \r\nIf there is no data to retrieve, the value of the Retry-After header will be 300.\r\n\r\nNote: These are just recommended values - your application may choose to poll at a different frequency depending on your requirements. After the first request, all subsequent \r\nrequests should use the URL provided in the Location header of the most recent response. Do not add more parameters to the URL, as it already contains the necessary \r\nparameters required to ensure forms are not missing from the request.\r\n\r\nResults are automatically sorted by ModifiedUtc and then by FormHeaderId, in ascending order. Sort parameters are not configurable.\r\n\r\nModifiedUtc definition: internal time tag = time of latest form data change.",
        "operationId": "FormsController_Poll",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of forms data is returned in body as json string.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.Forms.StandaloneFormApiModel"
              }
            },
            "headers": {
              "Retry-After": {
                "description": "Time interval in seconds for next request in seconds",
                "type": "string"
              }
            }
          },
          "202": {
            "description": "No data to return since last time, and Retry-After = 300 (5 minutes).",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Examples: formHeaderId was passed in, but modifiedTime was not or formHeaderId data is earlier than 01/01/2000.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        },
        "x-ms-trigger": "batch",
        "x-ms-trigger-metadata": {
          "mode": "polling",
          "kind": "query"
        }
      }
    },
    "/forms/v1/forms/{id}": {
      "get": {
        "tags": [
          "Forms API"
        ],
        "summary": "Get a form",
        "description": "Retrieves a form by its Id.",
        "operationId": "FormsController_GetFormAsync",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Form id.",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the form.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Forms.StandaloneFormApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Module not found."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/forms/v1/forms": {
      "get": {
        "tags": [
          "Forms API"
        ],
        "summary": "Get a list of forms",
        "description": "Retrieves a list of forms using any of the filters from the request parameters shown below. You can specify the number of pages returned and the number \r\nof elements per page. The results are automatically sorted by SubmittedTime, and in descending order. Sort parameters are not configurable.",
        "operationId": "FormsController_GetFormsAsync",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "submittedStartDate",
            "in": "query",
            "description": "Start date of the submitted form.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "submittedStartDate"
          },
          {
            "name": "submittedEndDate",
            "in": "query",
            "description": "End date of the submitted form.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "submittedEndDate"
          },
          {
            "name": "apiModuleId",
            "in": "query",
            "description": "Form module Id.",
            "required": false,
            "type": "string",
            "x-ms-summary": "apiModuleId"
          },
          {
            "name": "employeeNumber",
            "in": "query",
            "description": "Employee number.",
            "required": false,
            "type": "string",
            "x-ms-summary": "employeeNumber"
          },
          {
            "name": "reviewed",
            "in": "query",
            "description": "Only retrieves reviewed forms or not. The default is null for all.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "reviewed"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Starting page number. The default is 1.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageNumber"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. The default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageSize"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of forms.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.Forms.StandaloneFormApiModel"
              }
            }
          },
          "204": {
            "description": "This is returned when there are no records.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Module not found."
                },
                {
                  "Code": 102,
                  "Message": "Invalid start date."
                },
                {
                  "Code": 103,
                  "Message": "Invalid end date."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Forms API"
        ],
        "summary": "Create a form",
        "description": "Adds a new form.",
        "operationId": "FormsController_PostFormAsync",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "formModel",
            "in": "body",
            "description": "Form object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Forms.CreateStandaloneFormApiModel"
            },
            "x-ms-summary": "formModel"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "201": {
            "description": "Form has been created. Form Id is returned.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.ReturnIdApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 104,
                  "Message": "A user with 'UserId' was not found."
                },
                {
                  "Code": 105,
                  "Message": "Lookup field was not found by value."
                },
                {
                  "Code": 106,
                  "Message": "Future date time is found."
                },
                {
                  "Code": 107,
                  "Message": "Address provided without latitude and longitude."
                },
                {
                  "Code": 108,
                  "Message": "User is required."
                },
                {
                  "Code": 109,
                  "Message": "A valid UserId or Employee number must be provided. Both cannot be provided."
                },
                {
                  "Code": 110,
                  "Message": "APIModuleId is required."
                },
                {
                  "Code": 111,
                  "Message": "Company module not found."
                },
                {
                  "Code": 112,
                  "Message": "Company module not published."
                },
                {
                  "Code": 113,
                  "Message": "FormData is missed or empty."
                },
                {
                  "Code": 114,
                  "Message": "Form field is not found by ApiFieldId."
                },
                {
                  "Code": 115,
                  "Message": "Forms with AudioFields are not supported using this version on the API."
                },
                {
                  "Code": 116,
                  "Message": "Forms with CameraFields are not supported using this version on the API."
                },
                {
                  "Code": 117,
                  "Message": "Forms with SignatureFields are not supported using this version on the API."
                },
                {
                  "Code": 118,
                  "Message": "FormData Value is invalid."
                },
                {
                  "Code": 119,
                  "Message": "APIFieldId is required."
                },
                {
                  "Code": 120,
                  "Message": "User is not active or already deleted."
                },
                {
                  "Code": 121,
                  "Message": "Invalid submitted time."
                },
                {
                  "Code": 122,
                  "Message": "Invalid NFC field value"
                },
                {
                  "Code": 123,
                  "Message": "Inappropriate referenced binary type."
                },
                {
                  "Code": 124,
                  "Message": "Binary for the field doesn't exist."
                },
                {
                  "Code": 125,
                  "Message": "Invalid image reference."
                },
                {
                  "Code": 126,
                  "Message": "Invalid audio reference."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 104,
                  "Message": "A user with 'UserId' was not found."
                },
                {
                  "Code": 105,
                  "Message": "Lookup field was not found by value."
                },
                {
                  "Code": 106,
                  "Message": "Future date time is found."
                },
                {
                  "Code": 107,
                  "Message": "Address provided without latitude and longitude."
                },
                {
                  "Code": 108,
                  "Message": "User is required."
                },
                {
                  "Code": 109,
                  "Message": "A valid UserId or Employee number must be provided. Both cannot be provided."
                },
                {
                  "Code": 110,
                  "Message": "APIModuleId is required."
                },
                {
                  "Code": 111,
                  "Message": "Company module not found."
                },
                {
                  "Code": 112,
                  "Message": "Company module not published."
                },
                {
                  "Code": 113,
                  "Message": "FormData is missed or empty."
                },
                {
                  "Code": 114,
                  "Message": "Form field is not found by ApiFieldId."
                },
                {
                  "Code": 115,
                  "Message": "Forms with AudioFields are not supported using this version on the API."
                },
                {
                  "Code": 116,
                  "Message": "Forms with CameraFields are not supported using this version on the API."
                },
                {
                  "Code": 117,
                  "Message": "Forms with SignatureFields are not supported using this version on the API."
                },
                {
                  "Code": 118,
                  "Message": "FormData Value is invalid."
                },
                {
                  "Code": 119,
                  "Message": "APIFieldId is required."
                },
                {
                  "Code": 120,
                  "Message": "User is not active or already deleted."
                },
                {
                  "Code": 121,
                  "Message": "Invalid submitted time."
                },
                {
                  "Code": 122,
                  "Message": "Invalid NFC field value"
                },
                {
                  "Code": 123,
                  "Message": "Inappropriate referenced binary type."
                },
                {
                  "Code": 124,
                  "Message": "Binary for the field doesn't exist."
                },
                {
                  "Code": 125,
                  "Message": "Invalid image reference."
                },
                {
                  "Code": 126,
                  "Message": "Invalid audio reference."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/geofences/v1/geofences": {
      "get": {
        "tags": [
          "Geofences API"
        ],
        "summary": "Get a list of geofences",
        "description": "Retrieves a list of geofences. You can specify the number of pages returned and the number of elements per page, as well as whether the geofence coordinates are metric.\r\nThe results are automatically sorted by Name, and in ascending order. Sort parameters are not configurable.",
        "operationId": "GeofencesController_GetGeofences",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Start page number. The default is 1.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageNumber"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. The default is 500.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageSize"
          },
          {
            "name": "useMetric",
            "in": "query",
            "description": "Use metric system or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "useMetric"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Geofence list is returned in body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.Geofence.GeofenceListItemApiModel"
              }
            }
          },
          "204": {
            "description": "No geofences found. Body is empty.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "Geofence name is not unique."
                },
                {
                  "Code": 2,
                  "Message": "Geofence is already deleted."
                },
                {
                  "Code": 3,
                  "Message": "Geofence type is not found."
                },
                {
                  "Code": 4,
                  "Message": "Unsupported shape type."
                },
                {
                  "Code": 6,
                  "Message": "Number of points in polygon less than minimum."
                },
                {
                  "Code": 7,
                  "Message": "GroupName is invalid."
                },
                {
                  "Code": 8,
                  "Message": "Latitude is out of range."
                },
                {
                  "Code": 8,
                  "Message": "Longitude is out of range."
                },
                {
                  "Code": 10,
                  "Message": "Polygon points are required."
                },
                {
                  "Code": 11,
                  "Message": "Polygon shape has intersects."
                },
                {
                  "Code": 12,
                  "Message": "Number of points in polygon exceeds maximum."
                },
                {
                  "Code": 13,
                  "Message": "Pushpin point outside of polygon."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Geofences API"
        ],
        "summary": "Create a geofence",
        "description": "Creates a new geofence.",
        "operationId": "GeofencesController_CreateGeofence",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "geofenceCreateModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Geofence.GeofenceCreateApiModel"
            },
            "x-ms-summary": "geofenceCreateModel"
          },
          {
            "name": "useMetric",
            "in": "query",
            "description": "Use metric system or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "useMetric"
          },
          {
            "name": "geocode",
            "in": "query",
            "description": "Should address be geocoded or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "geocode"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "201": {
            "description": "Geofence has been created.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.ReturnIdApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "Geofence name is not unique."
                },
                {
                  "Code": 2,
                  "Message": "Geofence is already deleted."
                },
                {
                  "Code": 3,
                  "Message": "Geofence type is not found."
                },
                {
                  "Code": 4,
                  "Message": "Unsupported shape type."
                },
                {
                  "Code": 6,
                  "Message": "Number of points in polygon less than minimum."
                },
                {
                  "Code": 7,
                  "Message": "GroupName is invalid."
                },
                {
                  "Code": 8,
                  "Message": "Latitude is out of range."
                },
                {
                  "Code": 8,
                  "Message": "Longitude is out of range."
                },
                {
                  "Code": 10,
                  "Message": "Polygon points are required."
                },
                {
                  "Code": 11,
                  "Message": "Polygon shape has intersects."
                },
                {
                  "Code": 12,
                  "Message": "Number of points in polygon exceeds maximum."
                },
                {
                  "Code": 13,
                  "Message": "Pushpin point outside of polygon."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "Geofence name is not unique."
                },
                {
                  "Code": 2,
                  "Message": "Geofence is already deleted."
                },
                {
                  "Code": 3,
                  "Message": "Geofence type is not found."
                },
                {
                  "Code": 4,
                  "Message": "Unsupported shape type."
                },
                {
                  "Code": 6,
                  "Message": "Number of points in polygon less than minimum."
                },
                {
                  "Code": 7,
                  "Message": "GroupName is invalid."
                },
                {
                  "Code": 8,
                  "Message": "Latitude is out of range."
                },
                {
                  "Code": 8,
                  "Message": "Longitude is out of range."
                },
                {
                  "Code": 10,
                  "Message": "Polygon points are required."
                },
                {
                  "Code": 11,
                  "Message": "Polygon shape has intersects."
                },
                {
                  "Code": 12,
                  "Message": "Number of points in polygon exceeds maximum."
                },
                {
                  "Code": 13,
                  "Message": "Pushpin point outside of polygon."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/geofences/v1/geofences/{id}": {
      "get": {
        "tags": [
          "Geofences API"
        ],
        "summary": "Get a geofence",
        "description": "Retrieves a geofence by its id.",
        "operationId": "GeofencesController_GetGeofence",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "useMetric",
            "in": "query",
            "description": "Use metric system or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "useMetric"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Geofence is returned in body.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Geofence.GeofenceApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "Geofence name is not unique."
                },
                {
                  "Code": 2,
                  "Message": "Geofence is already deleted."
                },
                {
                  "Code": 3,
                  "Message": "Geofence type is not found."
                },
                {
                  "Code": 4,
                  "Message": "Unsupported shape type."
                },
                {
                  "Code": 6,
                  "Message": "Number of points in polygon less than minimum."
                },
                {
                  "Code": 7,
                  "Message": "GroupName is invalid."
                },
                {
                  "Code": 8,
                  "Message": "Latitude is out of range."
                },
                {
                  "Code": 8,
                  "Message": "Longitude is out of range."
                },
                {
                  "Code": 10,
                  "Message": "Polygon points are required."
                },
                {
                  "Code": 11,
                  "Message": "Polygon shape has intersects."
                },
                {
                  "Code": 12,
                  "Message": "Number of points in polygon exceeds maximum."
                },
                {
                  "Code": 13,
                  "Message": "Pushpin point outside of polygon."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Geofence not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Geofences API"
        ],
        "summary": "Update an existing geofence",
        "description": "Updates an existing geofence by its Id.",
        "operationId": "GeofencesController_UpdateGeofence",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Geofence Id.",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "geofenceUpdateModel",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Geofence.GeofenceUpdateApiModel"
            },
            "x-ms-summary": "geofenceUpdateModel"
          },
          {
            "name": "useMetric",
            "in": "query",
            "description": "Use metric system or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "useMetric"
          },
          {
            "name": "geocode",
            "in": "query",
            "description": "Should address be geocoded or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "geocode"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Geofence has been updated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.ReturnIdApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "Geofence name is not unique."
                },
                {
                  "Code": 2,
                  "Message": "Geofence is already deleted."
                },
                {
                  "Code": 3,
                  "Message": "Geofence type is not found."
                },
                {
                  "Code": 4,
                  "Message": "Unsupported shape type."
                },
                {
                  "Code": 6,
                  "Message": "Number of points in polygon less than minimum."
                },
                {
                  "Code": 7,
                  "Message": "GroupName is invalid."
                },
                {
                  "Code": 8,
                  "Message": "Latitude is out of range."
                },
                {
                  "Code": 8,
                  "Message": "Longitude is out of range."
                },
                {
                  "Code": 10,
                  "Message": "Polygon points are required."
                },
                {
                  "Code": 11,
                  "Message": "Polygon shape has intersects."
                },
                {
                  "Code": 12,
                  "Message": "Number of points in polygon exceeds maximum."
                },
                {
                  "Code": 13,
                  "Message": "Pushpin point outside of polygon."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "Geofence name is not unique."
                },
                {
                  "Code": 2,
                  "Message": "Geofence is already deleted."
                },
                {
                  "Code": 3,
                  "Message": "Geofence type is not found."
                },
                {
                  "Code": 4,
                  "Message": "Unsupported shape type."
                },
                {
                  "Code": 6,
                  "Message": "Number of points in polygon less than minimum."
                },
                {
                  "Code": 7,
                  "Message": "GroupName is invalid."
                },
                {
                  "Code": 8,
                  "Message": "Latitude is out of range."
                },
                {
                  "Code": 8,
                  "Message": "Longitude is out of range."
                },
                {
                  "Code": 10,
                  "Message": "Polygon points are required."
                },
                {
                  "Code": 11,
                  "Message": "Polygon shape has intersects."
                },
                {
                  "Code": 12,
                  "Message": "Number of points in polygon exceeds maximum."
                },
                {
                  "Code": 13,
                  "Message": "Pushpin point outside of polygon."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Geofences API"
        ],
        "summary": "Delete a geofence",
        "description": "Deletes an existing geofence by its Id.",
        "operationId": "GeofencesController_DeleteGeofence",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Geofence Id.",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Geofence has been deleted.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "Geofence name is not unique."
                },
                {
                  "Code": 2,
                  "Message": "Geofence is already deleted."
                },
                {
                  "Code": 3,
                  "Message": "Geofence type is not found."
                },
                {
                  "Code": 4,
                  "Message": "Unsupported shape type."
                },
                {
                  "Code": 6,
                  "Message": "Number of points in polygon less than minimum."
                },
                {
                  "Code": 7,
                  "Message": "GroupName is invalid."
                },
                {
                  "Code": 8,
                  "Message": "Latitude is out of range."
                },
                {
                  "Code": 8,
                  "Message": "Longitude is out of range."
                },
                {
                  "Code": 10,
                  "Message": "Polygon points are required."
                },
                {
                  "Code": 11,
                  "Message": "Polygon shape has intersects."
                },
                {
                  "Code": 12,
                  "Message": "Number of points in polygon exceeds maximum."
                },
                {
                  "Code": 13,
                  "Message": "Pushpin point outside of polygon."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Geofence not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/orders/v1/orders": {
      "get": {
        "tags": [
          "Orders API"
        ],
        "summary": "Get a list of orders",
        "description": "Retrieves a list of orders using the filters from the request parameters shown below. You can specify the number of pages returned and the number of elements per page. \r\nResults are automatically sorted by Client.Name, and in ascending order. Sort parameters are not configurable.",
        "operationId": "OrdersController_GetOrders",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dueDateFrom",
            "in": "query",
            "description": "Filter by due date start date.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "dueDateFrom"
          },
          {
            "name": "dueDateTo",
            "in": "query",
            "description": "Filter by due date end date.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "dueDateTo"
          },
          {
            "name": "employeeNumber",
            "in": "query",
            "description": "Filter by employee number.",
            "required": false,
            "type": "string",
            "x-ms-summary": "employeeNumber"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Start Page number (default 1).",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageNumber"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size (default 500).",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageSize"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Order list is returned in the body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.Order.OrderListItemApiModel"
              }
            }
          },
          "204": {
            "description": "No orders found. Body is empty.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 101,
                  "Message": "Client with the external client Id not found."
                },
                {
                  "Code": 102,
                  "Message": "Client with the external client Id already deleted."
                },
                {
                  "Code": 103,
                  "Message": "Service type not found."
                },
                {
                  "Code": 104,
                  "Message": "Service type definition not found."
                },
                {
                  "Code": 105,
                  "Message": "Field caption not found."
                },
                {
                  "Code": 106,
                  "Message": "Duplicate field captions found."
                },
                {
                  "Code": 107,
                  "Message": "Company dispatch module does not exist."
                },
                {
                  "Code": 108,
                  "Message": "User with 'Employee Number' not found."
                },
                {
                  "Code": 109,
                  "Message": "Order with the external Id already exists."
                },
                {
                  "Code": 110,
                  "Message": "External client Id is required."
                },
                {
                  "Code": 111,
                  "Message": "External order Id is required."
                },
                {
                  "Code": 112,
                  "Message": "OrderDate is required."
                },
                {
                  "Code": 113,
                  "Message": "ServiceTypeName is required."
                },
                {
                  "Code": 114,
                  "Message": "User with 'Employee Number' already deleted or deactivated."
                },
                {
                  "Code": 115,
                  "Message": "Required form field not found."
                },
                {
                  "Code": 116,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Contact Email format is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Latitude\\Longitude values are not valid."
                },
                {
                  "Code": 120,
                  "Message": "Country not supported."
                },
                {
                  "Code": 121,
                  "Message": "Region not supported."
                },
                {
                  "Code": 122,
                  "Message": "DueDateFrom is required."
                },
                {
                  "Code": 123,
                  "Message": "DueDateTo is required."
                },
                {
                  "Code": 124,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Contact Email length is not valid."
                },
                {
                  "Code": 126,
                  "Message": "Order status not found."
                },
                {
                  "Code": 127,
                  "Message": "Order cannot be closed."
                },
                {
                  "Code": 128,
                  "Message": "OrderFormFields are passed but service type has no form."
                },
                {
                  "Code": 129,
                  "Message": "StatusFormFields are passed but service status has no form."
                },
                {
                  "Code": 130,
                  "Message": "Client name length is not valid."
                },
                {
                  "Code": 131,
                  "Message": "Client country length is not valid."
                },
                {
                  "Code": 132,
                  "Message": "Client city length is not valid."
                },
                {
                  "Code": 133,
                  "Message": "Client region Code length is not valid."
                },
                {
                  "Code": 134,
                  "Message": "Client region Name length is not valid."
                },
                {
                  "Code": 135,
                  "Message": "Client subRegion Code length is not valid."
                },
                {
                  "Code": 136,
                  "Message": "Client subRegion Name length is not valid."
                },
                {
                  "Code": 137,
                  "Message": "Client postal Code length is not valid."
                },
                {
                  "Code": 138,
                  "Message": "Client address Line 1 length is not valid."
                },
                {
                  "Code": 139,
                  "Message": "Client address Line 2 length is not valid."
                },
                {
                  "Code": 140,
                  "Message": "Order status Start Date Time is not unique."
                },
                {
                  "Code": 141,
                  "Message": "Include status history parameter is not valid. Should be 'true' or 'false'."
                },
                {
                  "Code": 142,
                  "Message": "Only dispatched status is allowed for new orders."
                },
                {
                  "Code": 143,
                  "Message": "RecId parameter can't be used without modifiedTime parameter."
                },
                {
                  "Code": 144,
                  "Message": "Due date is not valid."
                },
                {
                  "Code": 145,
                  "Message": "Order Created Date Time is required."
                },
                {
                  "Code": 146,
                  "Message": "Created date is greater than dispatched time."
                },
                {
                  "Code": 147,
                  "Message": "Due Date is required for minor api version <= 2."
                },
                {
                  "Code": 148,
                  "Message": "Start Time is required for minor api version >= 3."
                },
                {
                  "Code": 149,
                  "Message": "Service duration is less than minimum allowed."
                },
                {
                  "Code": 150,
                  "Message": "Service duration is more than maximum allowed."
                },
                {
                  "Code": 151,
                  "Message": "Due Date cannot be used with Start Time or End Time."
                },
                {
                  "Code": 152,
                  "Message": "End Time cannot be less than Start Time."
                },
                {
                  "Code": 153,
                  "Message": "Status type is not valid."
                },
                {
                  "Code": 154,
                  "Message": "Status start date time is required."
                },
                {
                  "Code": 155,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 156,
                  "Message": "Invalid NFC value"
                },
                {
                  "Code": 157,
                  "Message": "Employee number is required."
                },
                {
                  "Code": 158,
                  "Message": "Lookup field was not found by value."
                },
                {
                  "Code": 159,
                  "Message": "Page size or page number are not valid."
                },
                {
                  "Code": 189,
                  "Message": "Status start date time cannot be from future."
                },
                {
                  "Code": 192,
                  "Message": "Inappropriate referenced binary type."
                },
                {
                  "Code": 193,
                  "Message": "Binary for the field doesn't exist."
                },
                {
                  "Code": 190,
                  "Message": "Invalid image reference."
                },
                {
                  "Code": 191,
                  "Message": "Invalid audio reference."
                },
                {
                  "Code": 194,
                  "Message": "Address provided without latitude and longitude"
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Orders API"
        ],
        "summary": "Create an order",
        "description": "Adds a new order.",
        "operationId": "OrdersController_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderModel",
            "in": "body",
            "description": "Order object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Order.CreateOrderApiModel"
            },
            "x-ms-summary": "orderModel"
          },
          {
            "name": "geocode",
            "in": "query",
            "description": "Should address be geocoded or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "geocode"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "201": {
            "description": "Order has been created. Order Id is returned.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.ReturnIdApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 101,
                  "Message": "Client with the external client Id not found."
                },
                {
                  "Code": 102,
                  "Message": "Client with the external client Id already deleted."
                },
                {
                  "Code": 103,
                  "Message": "Service type not found."
                },
                {
                  "Code": 104,
                  "Message": "Service type definition not found."
                },
                {
                  "Code": 105,
                  "Message": "Field caption not found."
                },
                {
                  "Code": 106,
                  "Message": "Duplicate field captions found."
                },
                {
                  "Code": 107,
                  "Message": "Company dispatch module does not exist."
                },
                {
                  "Code": 108,
                  "Message": "User with 'Employee Number' not found."
                },
                {
                  "Code": 109,
                  "Message": "Order with the external Id already exists."
                },
                {
                  "Code": 110,
                  "Message": "External client Id is required."
                },
                {
                  "Code": 111,
                  "Message": "External order Id is required."
                },
                {
                  "Code": 112,
                  "Message": "OrderDate is required."
                },
                {
                  "Code": 113,
                  "Message": "ServiceTypeName is required."
                },
                {
                  "Code": 114,
                  "Message": "User with 'Employee Number' already deleted or deactivated."
                },
                {
                  "Code": 115,
                  "Message": "Required form field not found."
                },
                {
                  "Code": 116,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Contact Email format is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Latitude\\Longitude values are not valid."
                },
                {
                  "Code": 120,
                  "Message": "Country not supported."
                },
                {
                  "Code": 121,
                  "Message": "Region not supported."
                },
                {
                  "Code": 122,
                  "Message": "DueDateFrom is required."
                },
                {
                  "Code": 123,
                  "Message": "DueDateTo is required."
                },
                {
                  "Code": 124,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Contact Email length is not valid."
                },
                {
                  "Code": 126,
                  "Message": "Order status not found."
                },
                {
                  "Code": 127,
                  "Message": "Order cannot be closed."
                },
                {
                  "Code": 128,
                  "Message": "OrderFormFields are passed but service type has no form."
                },
                {
                  "Code": 129,
                  "Message": "StatusFormFields are passed but service status has no form."
                },
                {
                  "Code": 130,
                  "Message": "Client name length is not valid."
                },
                {
                  "Code": 131,
                  "Message": "Client country length is not valid."
                },
                {
                  "Code": 132,
                  "Message": "Client city length is not valid."
                },
                {
                  "Code": 133,
                  "Message": "Client region Code length is not valid."
                },
                {
                  "Code": 134,
                  "Message": "Client region Name length is not valid."
                },
                {
                  "Code": 135,
                  "Message": "Client subRegion Code length is not valid."
                },
                {
                  "Code": 136,
                  "Message": "Client subRegion Name length is not valid."
                },
                {
                  "Code": 137,
                  "Message": "Client postal Code length is not valid."
                },
                {
                  "Code": 138,
                  "Message": "Client address Line 1 length is not valid."
                },
                {
                  "Code": 139,
                  "Message": "Client address Line 2 length is not valid."
                },
                {
                  "Code": 140,
                  "Message": "Order status Start Date Time is not unique."
                },
                {
                  "Code": 141,
                  "Message": "Include status history parameter is not valid. Should be 'true' or 'false'."
                },
                {
                  "Code": 142,
                  "Message": "Only dispatched status is allowed for new orders."
                },
                {
                  "Code": 143,
                  "Message": "RecId parameter can't be used without modifiedTime parameter."
                },
                {
                  "Code": 144,
                  "Message": "Due date is not valid."
                },
                {
                  "Code": 145,
                  "Message": "Order Created Date Time is required."
                },
                {
                  "Code": 146,
                  "Message": "Created date is greater than dispatched time."
                },
                {
                  "Code": 147,
                  "Message": "Due Date is required for minor api version <= 2."
                },
                {
                  "Code": 148,
                  "Message": "Start Time is required for minor api version >= 3."
                },
                {
                  "Code": 149,
                  "Message": "Service duration is less than minimum allowed."
                },
                {
                  "Code": 150,
                  "Message": "Service duration is more than maximum allowed."
                },
                {
                  "Code": 151,
                  "Message": "Due Date cannot be used with Start Time or End Time."
                },
                {
                  "Code": 152,
                  "Message": "End Time cannot be less than Start Time."
                },
                {
                  "Code": 153,
                  "Message": "Status type is not valid."
                },
                {
                  "Code": 154,
                  "Message": "Status start date time is required."
                },
                {
                  "Code": 155,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 156,
                  "Message": "Invalid NFC value"
                },
                {
                  "Code": 157,
                  "Message": "Employee number is required."
                },
                {
                  "Code": 158,
                  "Message": "Lookup field was not found by value."
                },
                {
                  "Code": 159,
                  "Message": "Page size or page number are not valid."
                },
                {
                  "Code": 189,
                  "Message": "Status start date time cannot be from future."
                },
                {
                  "Code": 192,
                  "Message": "Inappropriate referenced binary type."
                },
                {
                  "Code": 193,
                  "Message": "Binary for the field doesn't exist."
                },
                {
                  "Code": 190,
                  "Message": "Invalid image reference."
                },
                {
                  "Code": 191,
                  "Message": "Invalid audio reference."
                },
                {
                  "Code": 194,
                  "Message": "Address provided without latitude and longitude"
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 101,
                  "Message": "Client with the external client Id not found."
                },
                {
                  "Code": 102,
                  "Message": "Client with the external client Id already deleted."
                },
                {
                  "Code": 103,
                  "Message": "Service type not found."
                },
                {
                  "Code": 104,
                  "Message": "Service type definition not found."
                },
                {
                  "Code": 105,
                  "Message": "Field caption not found."
                },
                {
                  "Code": 106,
                  "Message": "Duplicate field captions found."
                },
                {
                  "Code": 107,
                  "Message": "Company dispatch module does not exist."
                },
                {
                  "Code": 108,
                  "Message": "User with 'Employee Number' not found."
                },
                {
                  "Code": 109,
                  "Message": "Order with the external Id already exists."
                },
                {
                  "Code": 110,
                  "Message": "External client Id is required."
                },
                {
                  "Code": 111,
                  "Message": "External order Id is required."
                },
                {
                  "Code": 112,
                  "Message": "OrderDate is required."
                },
                {
                  "Code": 113,
                  "Message": "ServiceTypeName is required."
                },
                {
                  "Code": 114,
                  "Message": "User with 'Employee Number' already deleted or deactivated."
                },
                {
                  "Code": 115,
                  "Message": "Required form field not found."
                },
                {
                  "Code": 116,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Contact Email format is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Latitude\\Longitude values are not valid."
                },
                {
                  "Code": 120,
                  "Message": "Country not supported."
                },
                {
                  "Code": 121,
                  "Message": "Region not supported."
                },
                {
                  "Code": 122,
                  "Message": "DueDateFrom is required."
                },
                {
                  "Code": 123,
                  "Message": "DueDateTo is required."
                },
                {
                  "Code": 124,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Contact Email length is not valid."
                },
                {
                  "Code": 126,
                  "Message": "Order status not found."
                },
                {
                  "Code": 127,
                  "Message": "Order cannot be closed."
                },
                {
                  "Code": 128,
                  "Message": "OrderFormFields are passed but service type has no form."
                },
                {
                  "Code": 129,
                  "Message": "StatusFormFields are passed but service status has no form."
                },
                {
                  "Code": 130,
                  "Message": "Client name length is not valid."
                },
                {
                  "Code": 131,
                  "Message": "Client country length is not valid."
                },
                {
                  "Code": 132,
                  "Message": "Client city length is not valid."
                },
                {
                  "Code": 133,
                  "Message": "Client region Code length is not valid."
                },
                {
                  "Code": 134,
                  "Message": "Client region Name length is not valid."
                },
                {
                  "Code": 135,
                  "Message": "Client subRegion Code length is not valid."
                },
                {
                  "Code": 136,
                  "Message": "Client subRegion Name length is not valid."
                },
                {
                  "Code": 137,
                  "Message": "Client postal Code length is not valid."
                },
                {
                  "Code": 138,
                  "Message": "Client address Line 1 length is not valid."
                },
                {
                  "Code": 139,
                  "Message": "Client address Line 2 length is not valid."
                },
                {
                  "Code": 140,
                  "Message": "Order status Start Date Time is not unique."
                },
                {
                  "Code": 141,
                  "Message": "Include status history parameter is not valid. Should be 'true' or 'false'."
                },
                {
                  "Code": 142,
                  "Message": "Only dispatched status is allowed for new orders."
                },
                {
                  "Code": 143,
                  "Message": "RecId parameter can't be used without modifiedTime parameter."
                },
                {
                  "Code": 144,
                  "Message": "Due date is not valid."
                },
                {
                  "Code": 145,
                  "Message": "Order Created Date Time is required."
                },
                {
                  "Code": 146,
                  "Message": "Created date is greater than dispatched time."
                },
                {
                  "Code": 147,
                  "Message": "Due Date is required for minor api version <= 2."
                },
                {
                  "Code": 148,
                  "Message": "Start Time is required for minor api version >= 3."
                },
                {
                  "Code": 149,
                  "Message": "Service duration is less than minimum allowed."
                },
                {
                  "Code": 150,
                  "Message": "Service duration is more than maximum allowed."
                },
                {
                  "Code": 151,
                  "Message": "Due Date cannot be used with Start Time or End Time."
                },
                {
                  "Code": 152,
                  "Message": "End Time cannot be less than Start Time."
                },
                {
                  "Code": 153,
                  "Message": "Status type is not valid."
                },
                {
                  "Code": 154,
                  "Message": "Status start date time is required."
                },
                {
                  "Code": 155,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 156,
                  "Message": "Invalid NFC value"
                },
                {
                  "Code": 157,
                  "Message": "Employee number is required."
                },
                {
                  "Code": 158,
                  "Message": "Lookup field was not found by value."
                },
                {
                  "Code": 159,
                  "Message": "Page size or page number are not valid."
                },
                {
                  "Code": 189,
                  "Message": "Status start date time cannot be from future."
                },
                {
                  "Code": 192,
                  "Message": "Inappropriate referenced binary type."
                },
                {
                  "Code": 193,
                  "Message": "Binary for the field doesn't exist."
                },
                {
                  "Code": 190,
                  "Message": "Invalid image reference."
                },
                {
                  "Code": 191,
                  "Message": "Invalid audio reference."
                },
                {
                  "Code": 194,
                  "Message": "Address provided without latitude and longitude"
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/orders/v1/orders/{id}": {
      "get": {
        "tags": [
          "Orders API"
        ],
        "summary": "Get an order",
        "description": "Gets an existing order by its Id.",
        "operationId": "OrdersController_GetOrder",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "include-status-history",
            "in": "query",
            "description": "If true, response will contain all status history and form data for this order.",
            "required": false,
            "type": "string",
            "x-ms-summary": "include-status-history"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Order is returned in body.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Order.OrderApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 101,
                  "Message": "Client with the external client Id not found."
                },
                {
                  "Code": 102,
                  "Message": "Client with the external client Id already deleted."
                },
                {
                  "Code": 103,
                  "Message": "Service type not found."
                },
                {
                  "Code": 104,
                  "Message": "Service type definition not found."
                },
                {
                  "Code": 105,
                  "Message": "Field caption not found."
                },
                {
                  "Code": 106,
                  "Message": "Duplicate field captions found."
                },
                {
                  "Code": 107,
                  "Message": "Company dispatch module does not exist."
                },
                {
                  "Code": 108,
                  "Message": "User with 'Employee Number' not found."
                },
                {
                  "Code": 109,
                  "Message": "Order with the external Id already exists."
                },
                {
                  "Code": 110,
                  "Message": "External client Id is required."
                },
                {
                  "Code": 111,
                  "Message": "External order Id is required."
                },
                {
                  "Code": 112,
                  "Message": "OrderDate is required."
                },
                {
                  "Code": 113,
                  "Message": "ServiceTypeName is required."
                },
                {
                  "Code": 114,
                  "Message": "User with 'Employee Number' already deleted or deactivated."
                },
                {
                  "Code": 115,
                  "Message": "Required form field not found."
                },
                {
                  "Code": 116,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Contact Email format is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Latitude\\Longitude values are not valid."
                },
                {
                  "Code": 120,
                  "Message": "Country not supported."
                },
                {
                  "Code": 121,
                  "Message": "Region not supported."
                },
                {
                  "Code": 122,
                  "Message": "DueDateFrom is required."
                },
                {
                  "Code": 123,
                  "Message": "DueDateTo is required."
                },
                {
                  "Code": 124,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Contact Email length is not valid."
                },
                {
                  "Code": 126,
                  "Message": "Order status not found."
                },
                {
                  "Code": 127,
                  "Message": "Order cannot be closed."
                },
                {
                  "Code": 128,
                  "Message": "OrderFormFields are passed but service type has no form."
                },
                {
                  "Code": 129,
                  "Message": "StatusFormFields are passed but service status has no form."
                },
                {
                  "Code": 130,
                  "Message": "Client name length is not valid."
                },
                {
                  "Code": 131,
                  "Message": "Client country length is not valid."
                },
                {
                  "Code": 132,
                  "Message": "Client city length is not valid."
                },
                {
                  "Code": 133,
                  "Message": "Client region Code length is not valid."
                },
                {
                  "Code": 134,
                  "Message": "Client region Name length is not valid."
                },
                {
                  "Code": 135,
                  "Message": "Client subRegion Code length is not valid."
                },
                {
                  "Code": 136,
                  "Message": "Client subRegion Name length is not valid."
                },
                {
                  "Code": 137,
                  "Message": "Client postal Code length is not valid."
                },
                {
                  "Code": 138,
                  "Message": "Client address Line 1 length is not valid."
                },
                {
                  "Code": 139,
                  "Message": "Client address Line 2 length is not valid."
                },
                {
                  "Code": 140,
                  "Message": "Order status Start Date Time is not unique."
                },
                {
                  "Code": 141,
                  "Message": "Include status history parameter is not valid. Should be 'true' or 'false'."
                },
                {
                  "Code": 142,
                  "Message": "Only dispatched status is allowed for new orders."
                },
                {
                  "Code": 143,
                  "Message": "RecId parameter can't be used without modifiedTime parameter."
                },
                {
                  "Code": 144,
                  "Message": "Due date is not valid."
                },
                {
                  "Code": 145,
                  "Message": "Order Created Date Time is required."
                },
                {
                  "Code": 146,
                  "Message": "Created date is greater than dispatched time."
                },
                {
                  "Code": 147,
                  "Message": "Due Date is required for minor api version <= 2."
                },
                {
                  "Code": 148,
                  "Message": "Start Time is required for minor api version >= 3."
                },
                {
                  "Code": 149,
                  "Message": "Service duration is less than minimum allowed."
                },
                {
                  "Code": 150,
                  "Message": "Service duration is more than maximum allowed."
                },
                {
                  "Code": 151,
                  "Message": "Due Date cannot be used with Start Time or End Time."
                },
                {
                  "Code": 152,
                  "Message": "End Time cannot be less than Start Time."
                },
                {
                  "Code": 153,
                  "Message": "Status type is not valid."
                },
                {
                  "Code": 154,
                  "Message": "Status start date time is required."
                },
                {
                  "Code": 155,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 156,
                  "Message": "Invalid NFC value"
                },
                {
                  "Code": 157,
                  "Message": "Employee number is required."
                },
                {
                  "Code": 158,
                  "Message": "Lookup field was not found by value."
                },
                {
                  "Code": 159,
                  "Message": "Page size or page number are not valid."
                },
                {
                  "Code": 189,
                  "Message": "Status start date time cannot be from future."
                },
                {
                  "Code": 192,
                  "Message": "Inappropriate referenced binary type."
                },
                {
                  "Code": 193,
                  "Message": "Binary for the field doesn't exist."
                },
                {
                  "Code": 190,
                  "Message": "Invalid image reference."
                },
                {
                  "Code": 191,
                  "Message": "Invalid audio reference."
                },
                {
                  "Code": 194,
                  "Message": "Address provided without latitude and longitude"
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Order not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Orders API"
        ],
        "summary": "Update an order",
        "description": "Updates an existing order.",
        "operationId": "OrdersController_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "orderModel",
            "in": "body",
            "description": "Order object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Order.UpdateOrderApiModel"
            },
            "x-ms-summary": "orderModel"
          },
          {
            "name": "geocode",
            "in": "query",
            "description": "Should address be geocoded or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "geocode"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Order has been updated. Order Id is returned.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.ReturnIdApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 101,
                  "Message": "Client with the external client Id not found."
                },
                {
                  "Code": 102,
                  "Message": "Client with the external client Id already deleted."
                },
                {
                  "Code": 103,
                  "Message": "Service type not found."
                },
                {
                  "Code": 104,
                  "Message": "Service type definition not found."
                },
                {
                  "Code": 105,
                  "Message": "Field caption not found."
                },
                {
                  "Code": 106,
                  "Message": "Duplicate field captions found."
                },
                {
                  "Code": 107,
                  "Message": "Company dispatch module does not exist."
                },
                {
                  "Code": 108,
                  "Message": "User with 'Employee Number' not found."
                },
                {
                  "Code": 109,
                  "Message": "Order with the external Id already exists."
                },
                {
                  "Code": 110,
                  "Message": "External client Id is required."
                },
                {
                  "Code": 111,
                  "Message": "External order Id is required."
                },
                {
                  "Code": 112,
                  "Message": "OrderDate is required."
                },
                {
                  "Code": 113,
                  "Message": "ServiceTypeName is required."
                },
                {
                  "Code": 114,
                  "Message": "User with 'Employee Number' already deleted or deactivated."
                },
                {
                  "Code": 115,
                  "Message": "Required form field not found."
                },
                {
                  "Code": 116,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Contact Email format is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Latitude\\Longitude values are not valid."
                },
                {
                  "Code": 120,
                  "Message": "Country not supported."
                },
                {
                  "Code": 121,
                  "Message": "Region not supported."
                },
                {
                  "Code": 122,
                  "Message": "DueDateFrom is required."
                },
                {
                  "Code": 123,
                  "Message": "DueDateTo is required."
                },
                {
                  "Code": 124,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Contact Email length is not valid."
                },
                {
                  "Code": 126,
                  "Message": "Order status not found."
                },
                {
                  "Code": 127,
                  "Message": "Order cannot be closed."
                },
                {
                  "Code": 128,
                  "Message": "OrderFormFields are passed but service type has no form."
                },
                {
                  "Code": 129,
                  "Message": "StatusFormFields are passed but service status has no form."
                },
                {
                  "Code": 130,
                  "Message": "Client name length is not valid."
                },
                {
                  "Code": 131,
                  "Message": "Client country length is not valid."
                },
                {
                  "Code": 132,
                  "Message": "Client city length is not valid."
                },
                {
                  "Code": 133,
                  "Message": "Client region Code length is not valid."
                },
                {
                  "Code": 134,
                  "Message": "Client region Name length is not valid."
                },
                {
                  "Code": 135,
                  "Message": "Client subRegion Code length is not valid."
                },
                {
                  "Code": 136,
                  "Message": "Client subRegion Name length is not valid."
                },
                {
                  "Code": 137,
                  "Message": "Client postal Code length is not valid."
                },
                {
                  "Code": 138,
                  "Message": "Client address Line 1 length is not valid."
                },
                {
                  "Code": 139,
                  "Message": "Client address Line 2 length is not valid."
                },
                {
                  "Code": 140,
                  "Message": "Order status Start Date Time is not unique."
                },
                {
                  "Code": 141,
                  "Message": "Include status history parameter is not valid. Should be 'true' or 'false'."
                },
                {
                  "Code": 142,
                  "Message": "Only dispatched status is allowed for new orders."
                },
                {
                  "Code": 143,
                  "Message": "RecId parameter can't be used without modifiedTime parameter."
                },
                {
                  "Code": 144,
                  "Message": "Due date is not valid."
                },
                {
                  "Code": 145,
                  "Message": "Order Created Date Time is required."
                },
                {
                  "Code": 146,
                  "Message": "Created date is greater than dispatched time."
                },
                {
                  "Code": 147,
                  "Message": "Due Date is required for minor api version <= 2."
                },
                {
                  "Code": 148,
                  "Message": "Start Time is required for minor api version >= 3."
                },
                {
                  "Code": 149,
                  "Message": "Service duration is less than minimum allowed."
                },
                {
                  "Code": 150,
                  "Message": "Service duration is more than maximum allowed."
                },
                {
                  "Code": 151,
                  "Message": "Due Date cannot be used with Start Time or End Time."
                },
                {
                  "Code": 152,
                  "Message": "End Time cannot be less than Start Time."
                },
                {
                  "Code": 153,
                  "Message": "Status type is not valid."
                },
                {
                  "Code": 154,
                  "Message": "Status start date time is required."
                },
                {
                  "Code": 155,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 156,
                  "Message": "Invalid NFC value"
                },
                {
                  "Code": 157,
                  "Message": "Employee number is required."
                },
                {
                  "Code": 158,
                  "Message": "Lookup field was not found by value."
                },
                {
                  "Code": 159,
                  "Message": "Page size or page number are not valid."
                },
                {
                  "Code": 189,
                  "Message": "Status start date time cannot be from future."
                },
                {
                  "Code": 192,
                  "Message": "Inappropriate referenced binary type."
                },
                {
                  "Code": 193,
                  "Message": "Binary for the field doesn't exist."
                },
                {
                  "Code": 190,
                  "Message": "Invalid image reference."
                },
                {
                  "Code": 191,
                  "Message": "Invalid audio reference."
                },
                {
                  "Code": 194,
                  "Message": "Address provided without latitude and longitude"
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 101,
                  "Message": "Client with the external client Id not found."
                },
                {
                  "Code": 102,
                  "Message": "Client with the external client Id already deleted."
                },
                {
                  "Code": 103,
                  "Message": "Service type not found."
                },
                {
                  "Code": 104,
                  "Message": "Service type definition not found."
                },
                {
                  "Code": 105,
                  "Message": "Field caption not found."
                },
                {
                  "Code": 106,
                  "Message": "Duplicate field captions found."
                },
                {
                  "Code": 107,
                  "Message": "Company dispatch module does not exist."
                },
                {
                  "Code": 108,
                  "Message": "User with 'Employee Number' not found."
                },
                {
                  "Code": 109,
                  "Message": "Order with the external Id already exists."
                },
                {
                  "Code": 110,
                  "Message": "External client Id is required."
                },
                {
                  "Code": 111,
                  "Message": "External order Id is required."
                },
                {
                  "Code": 112,
                  "Message": "OrderDate is required."
                },
                {
                  "Code": 113,
                  "Message": "ServiceTypeName is required."
                },
                {
                  "Code": 114,
                  "Message": "User with 'Employee Number' already deleted or deactivated."
                },
                {
                  "Code": 115,
                  "Message": "Required form field not found."
                },
                {
                  "Code": 116,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Contact Email format is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Latitude\\Longitude values are not valid."
                },
                {
                  "Code": 120,
                  "Message": "Country not supported."
                },
                {
                  "Code": 121,
                  "Message": "Region not supported."
                },
                {
                  "Code": 122,
                  "Message": "DueDateFrom is required."
                },
                {
                  "Code": 123,
                  "Message": "DueDateTo is required."
                },
                {
                  "Code": 124,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Contact Email length is not valid."
                },
                {
                  "Code": 126,
                  "Message": "Order status not found."
                },
                {
                  "Code": 127,
                  "Message": "Order cannot be closed."
                },
                {
                  "Code": 128,
                  "Message": "OrderFormFields are passed but service type has no form."
                },
                {
                  "Code": 129,
                  "Message": "StatusFormFields are passed but service status has no form."
                },
                {
                  "Code": 130,
                  "Message": "Client name length is not valid."
                },
                {
                  "Code": 131,
                  "Message": "Client country length is not valid."
                },
                {
                  "Code": 132,
                  "Message": "Client city length is not valid."
                },
                {
                  "Code": 133,
                  "Message": "Client region Code length is not valid."
                },
                {
                  "Code": 134,
                  "Message": "Client region Name length is not valid."
                },
                {
                  "Code": 135,
                  "Message": "Client subRegion Code length is not valid."
                },
                {
                  "Code": 136,
                  "Message": "Client subRegion Name length is not valid."
                },
                {
                  "Code": 137,
                  "Message": "Client postal Code length is not valid."
                },
                {
                  "Code": 138,
                  "Message": "Client address Line 1 length is not valid."
                },
                {
                  "Code": 139,
                  "Message": "Client address Line 2 length is not valid."
                },
                {
                  "Code": 140,
                  "Message": "Order status Start Date Time is not unique."
                },
                {
                  "Code": 141,
                  "Message": "Include status history parameter is not valid. Should be 'true' or 'false'."
                },
                {
                  "Code": 142,
                  "Message": "Only dispatched status is allowed for new orders."
                },
                {
                  "Code": 143,
                  "Message": "RecId parameter can't be used without modifiedTime parameter."
                },
                {
                  "Code": 144,
                  "Message": "Due date is not valid."
                },
                {
                  "Code": 145,
                  "Message": "Order Created Date Time is required."
                },
                {
                  "Code": 146,
                  "Message": "Created date is greater than dispatched time."
                },
                {
                  "Code": 147,
                  "Message": "Due Date is required for minor api version <= 2."
                },
                {
                  "Code": 148,
                  "Message": "Start Time is required for minor api version >= 3."
                },
                {
                  "Code": 149,
                  "Message": "Service duration is less than minimum allowed."
                },
                {
                  "Code": 150,
                  "Message": "Service duration is more than maximum allowed."
                },
                {
                  "Code": 151,
                  "Message": "Due Date cannot be used with Start Time or End Time."
                },
                {
                  "Code": 152,
                  "Message": "End Time cannot be less than Start Time."
                },
                {
                  "Code": 153,
                  "Message": "Status type is not valid."
                },
                {
                  "Code": 154,
                  "Message": "Status start date time is required."
                },
                {
                  "Code": 155,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 156,
                  "Message": "Invalid NFC value"
                },
                {
                  "Code": 157,
                  "Message": "Employee number is required."
                },
                {
                  "Code": 158,
                  "Message": "Lookup field was not found by value."
                },
                {
                  "Code": 159,
                  "Message": "Page size or page number are not valid."
                },
                {
                  "Code": 189,
                  "Message": "Status start date time cannot be from future."
                },
                {
                  "Code": 192,
                  "Message": "Inappropriate referenced binary type."
                },
                {
                  "Code": 193,
                  "Message": "Binary for the field doesn't exist."
                },
                {
                  "Code": 190,
                  "Message": "Invalid image reference."
                },
                {
                  "Code": 191,
                  "Message": "Invalid audio reference."
                },
                {
                  "Code": 194,
                  "Message": "Address provided without latitude and longitude"
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/orders/v1/orders/{id}/status": {
      "put": {
        "tags": [
          "Orders API"
        ],
        "summary": "Update order status",
        "description": "Changes an existing order status.",
        "operationId": "OrdersController_ChangeStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "statusModel",
            "in": "body",
            "description": "Order status object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Order.NewOrderStatusApiModel"
            },
            "x-ms-summary": "statusModel"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Status has been changed. Order Id is returned.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.ReturnIdApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 101,
                  "Message": "Client with the external client Id not found."
                },
                {
                  "Code": 102,
                  "Message": "Client with the external client Id already deleted."
                },
                {
                  "Code": 103,
                  "Message": "Service type not found."
                },
                {
                  "Code": 104,
                  "Message": "Service type definition not found."
                },
                {
                  "Code": 105,
                  "Message": "Field caption not found."
                },
                {
                  "Code": 106,
                  "Message": "Duplicate field captions found."
                },
                {
                  "Code": 107,
                  "Message": "Company dispatch module does not exist."
                },
                {
                  "Code": 108,
                  "Message": "User with 'Employee Number' not found."
                },
                {
                  "Code": 109,
                  "Message": "Order with the external Id already exists."
                },
                {
                  "Code": 110,
                  "Message": "External client Id is required."
                },
                {
                  "Code": 111,
                  "Message": "External order Id is required."
                },
                {
                  "Code": 112,
                  "Message": "OrderDate is required."
                },
                {
                  "Code": 113,
                  "Message": "ServiceTypeName is required."
                },
                {
                  "Code": 114,
                  "Message": "User with 'Employee Number' already deleted or deactivated."
                },
                {
                  "Code": 115,
                  "Message": "Required form field not found."
                },
                {
                  "Code": 116,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Contact Email format is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Latitude\\Longitude values are not valid."
                },
                {
                  "Code": 120,
                  "Message": "Country not supported."
                },
                {
                  "Code": 121,
                  "Message": "Region not supported."
                },
                {
                  "Code": 122,
                  "Message": "DueDateFrom is required."
                },
                {
                  "Code": 123,
                  "Message": "DueDateTo is required."
                },
                {
                  "Code": 124,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Contact Email length is not valid."
                },
                {
                  "Code": 126,
                  "Message": "Order status not found."
                },
                {
                  "Code": 127,
                  "Message": "Order cannot be closed."
                },
                {
                  "Code": 128,
                  "Message": "OrderFormFields are passed but service type has no form."
                },
                {
                  "Code": 129,
                  "Message": "StatusFormFields are passed but service status has no form."
                },
                {
                  "Code": 130,
                  "Message": "Client name length is not valid."
                },
                {
                  "Code": 131,
                  "Message": "Client country length is not valid."
                },
                {
                  "Code": 132,
                  "Message": "Client city length is not valid."
                },
                {
                  "Code": 133,
                  "Message": "Client region Code length is not valid."
                },
                {
                  "Code": 134,
                  "Message": "Client region Name length is not valid."
                },
                {
                  "Code": 135,
                  "Message": "Client subRegion Code length is not valid."
                },
                {
                  "Code": 136,
                  "Message": "Client subRegion Name length is not valid."
                },
                {
                  "Code": 137,
                  "Message": "Client postal Code length is not valid."
                },
                {
                  "Code": 138,
                  "Message": "Client address Line 1 length is not valid."
                },
                {
                  "Code": 139,
                  "Message": "Client address Line 2 length is not valid."
                },
                {
                  "Code": 140,
                  "Message": "Order status Start Date Time is not unique."
                },
                {
                  "Code": 141,
                  "Message": "Include status history parameter is not valid. Should be 'true' or 'false'."
                },
                {
                  "Code": 142,
                  "Message": "Only dispatched status is allowed for new orders."
                },
                {
                  "Code": 143,
                  "Message": "RecId parameter can't be used without modifiedTime parameter."
                },
                {
                  "Code": 144,
                  "Message": "Due date is not valid."
                },
                {
                  "Code": 145,
                  "Message": "Order Created Date Time is required."
                },
                {
                  "Code": 146,
                  "Message": "Created date is greater than dispatched time."
                },
                {
                  "Code": 147,
                  "Message": "Due Date is required for minor api version <= 2."
                },
                {
                  "Code": 148,
                  "Message": "Start Time is required for minor api version >= 3."
                },
                {
                  "Code": 149,
                  "Message": "Service duration is less than minimum allowed."
                },
                {
                  "Code": 150,
                  "Message": "Service duration is more than maximum allowed."
                },
                {
                  "Code": 151,
                  "Message": "Due Date cannot be used with Start Time or End Time."
                },
                {
                  "Code": 152,
                  "Message": "End Time cannot be less than Start Time."
                },
                {
                  "Code": 153,
                  "Message": "Status type is not valid."
                },
                {
                  "Code": 154,
                  "Message": "Status start date time is required."
                },
                {
                  "Code": 155,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 156,
                  "Message": "Invalid NFC value"
                },
                {
                  "Code": 157,
                  "Message": "Employee number is required."
                },
                {
                  "Code": 158,
                  "Message": "Lookup field was not found by value."
                },
                {
                  "Code": 159,
                  "Message": "Page size or page number are not valid."
                },
                {
                  "Code": 189,
                  "Message": "Status start date time cannot be from future."
                },
                {
                  "Code": 192,
                  "Message": "Inappropriate referenced binary type."
                },
                {
                  "Code": 193,
                  "Message": "Binary for the field doesn't exist."
                },
                {
                  "Code": 190,
                  "Message": "Invalid image reference."
                },
                {
                  "Code": 191,
                  "Message": "Invalid audio reference."
                },
                {
                  "Code": 194,
                  "Message": "Address provided without latitude and longitude"
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Order not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 101,
                  "Message": "Client with the external client Id not found."
                },
                {
                  "Code": 102,
                  "Message": "Client with the external client Id already deleted."
                },
                {
                  "Code": 103,
                  "Message": "Service type not found."
                },
                {
                  "Code": 104,
                  "Message": "Service type definition not found."
                },
                {
                  "Code": 105,
                  "Message": "Field caption not found."
                },
                {
                  "Code": 106,
                  "Message": "Duplicate field captions found."
                },
                {
                  "Code": 107,
                  "Message": "Company dispatch module does not exist."
                },
                {
                  "Code": 108,
                  "Message": "User with 'Employee Number' not found."
                },
                {
                  "Code": 109,
                  "Message": "Order with the external Id already exists."
                },
                {
                  "Code": 110,
                  "Message": "External client Id is required."
                },
                {
                  "Code": 111,
                  "Message": "External order Id is required."
                },
                {
                  "Code": 112,
                  "Message": "OrderDate is required."
                },
                {
                  "Code": 113,
                  "Message": "ServiceTypeName is required."
                },
                {
                  "Code": 114,
                  "Message": "User with 'Employee Number' already deleted or deactivated."
                },
                {
                  "Code": 115,
                  "Message": "Required form field not found."
                },
                {
                  "Code": 116,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Contact Email format is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Latitude\\Longitude values are not valid."
                },
                {
                  "Code": 120,
                  "Message": "Country not supported."
                },
                {
                  "Code": 121,
                  "Message": "Region not supported."
                },
                {
                  "Code": 122,
                  "Message": "DueDateFrom is required."
                },
                {
                  "Code": 123,
                  "Message": "DueDateTo is required."
                },
                {
                  "Code": 124,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Contact Email length is not valid."
                },
                {
                  "Code": 126,
                  "Message": "Order status not found."
                },
                {
                  "Code": 127,
                  "Message": "Order cannot be closed."
                },
                {
                  "Code": 128,
                  "Message": "OrderFormFields are passed but service type has no form."
                },
                {
                  "Code": 129,
                  "Message": "StatusFormFields are passed but service status has no form."
                },
                {
                  "Code": 130,
                  "Message": "Client name length is not valid."
                },
                {
                  "Code": 131,
                  "Message": "Client country length is not valid."
                },
                {
                  "Code": 132,
                  "Message": "Client city length is not valid."
                },
                {
                  "Code": 133,
                  "Message": "Client region Code length is not valid."
                },
                {
                  "Code": 134,
                  "Message": "Client region Name length is not valid."
                },
                {
                  "Code": 135,
                  "Message": "Client subRegion Code length is not valid."
                },
                {
                  "Code": 136,
                  "Message": "Client subRegion Name length is not valid."
                },
                {
                  "Code": 137,
                  "Message": "Client postal Code length is not valid."
                },
                {
                  "Code": 138,
                  "Message": "Client address Line 1 length is not valid."
                },
                {
                  "Code": 139,
                  "Message": "Client address Line 2 length is not valid."
                },
                {
                  "Code": 140,
                  "Message": "Order status Start Date Time is not unique."
                },
                {
                  "Code": 141,
                  "Message": "Include status history parameter is not valid. Should be 'true' or 'false'."
                },
                {
                  "Code": 142,
                  "Message": "Only dispatched status is allowed for new orders."
                },
                {
                  "Code": 143,
                  "Message": "RecId parameter can't be used without modifiedTime parameter."
                },
                {
                  "Code": 144,
                  "Message": "Due date is not valid."
                },
                {
                  "Code": 145,
                  "Message": "Order Created Date Time is required."
                },
                {
                  "Code": 146,
                  "Message": "Created date is greater than dispatched time."
                },
                {
                  "Code": 147,
                  "Message": "Due Date is required for minor api version <= 2."
                },
                {
                  "Code": 148,
                  "Message": "Start Time is required for minor api version >= 3."
                },
                {
                  "Code": 149,
                  "Message": "Service duration is less than minimum allowed."
                },
                {
                  "Code": 150,
                  "Message": "Service duration is more than maximum allowed."
                },
                {
                  "Code": 151,
                  "Message": "Due Date cannot be used with Start Time or End Time."
                },
                {
                  "Code": 152,
                  "Message": "End Time cannot be less than Start Time."
                },
                {
                  "Code": 153,
                  "Message": "Status type is not valid."
                },
                {
                  "Code": 154,
                  "Message": "Status start date time is required."
                },
                {
                  "Code": 155,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 156,
                  "Message": "Invalid NFC value"
                },
                {
                  "Code": 157,
                  "Message": "Employee number is required."
                },
                {
                  "Code": 158,
                  "Message": "Lookup field was not found by value."
                },
                {
                  "Code": 159,
                  "Message": "Page size or page number are not valid."
                },
                {
                  "Code": 189,
                  "Message": "Status start date time cannot be from future."
                },
                {
                  "Code": 192,
                  "Message": "Inappropriate referenced binary type."
                },
                {
                  "Code": 193,
                  "Message": "Binary for the field doesn't exist."
                },
                {
                  "Code": 190,
                  "Message": "Invalid image reference."
                },
                {
                  "Code": 191,
                  "Message": "Invalid audio reference."
                },
                {
                  "Code": 194,
                  "Message": "Address provided without latitude and longitude"
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/orders/v1/orders/poll": {
      "get": {
        "tags": [
          "Orders API"
        ],
        "summary": "Orders poll",
        "description": "The Orders API polling endpoint allows your application to continually poll and process recent changes to orders.\r\n\r\nIntegration:\r\n\r\nThis endpoint is designed to work out of the box with Microsoft Flow as a polling trigger integration. Alternatively, you may develop your own \r\ncustom integration using any language.\r\n\r\nUsage:\r\n\r\nIn a typical scenario, the first request to this endpoint should not provide any parameters. There are two (2) possible successful responses:\r\n* HTTP Response code 200 - Recently changed orders exist; response body will display order data.\r\n* HTTP Response code 202 - No recently changed orders exist; response body will be empty.\r\n\r\nIn both cases, there are two (2) important headers in the response:\r\n* Location - The URL for the next request.\r\n* Retry-After - The recommended time interval in seconds for next request. For example, if there is data to retrieve, the Retry-After header will have a value of 1 or 60. \r\nIf there is no data to retrieve, the value of the Retry-After header will be 300.\r\n\r\nNote: These are just recommended values - your application may choose to poll at a different frequency depending on your requirements. After the first request, all \r\nsubsequent requests should use the URL provided in the Location header of the most recent response. Do not add more parameters to the URL, as it already contains the \r\nnecessary parameters required to ensure order changes are not missing from the request.\r\n\r\nResults are automatically sorted by ModifiedUtc and then by OrderId, in ascending order. Sort parameters are not configurable.\r\n\r\nModifiedUtc definition: internal time tag = time of latest order data change.",
        "operationId": "OrdersController_Poll",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "excludeFormData",
            "in": "query",
            "description": "If true, OrderFormFields will always be an empty array.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "excludeFormData"
          },
          {
            "name": "excludeCustomFieldData",
            "in": "query",
            "description": "If true, CustomFields will not be returned.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "excludeCustomFieldData"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of orders data is returned in body as json string.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.Order.OrderHeaderApiModel"
              }
            },
            "headers": {
              "Retry-After": {
                "description": "Time interval in seconds for next request in seconds",
                "type": "string"
              }
            }
          },
          "202": {
            "description": "The request is accepted. Do not trigger the workflow. The next attempt happens in one minute.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 101,
                  "Message": "Client with the external client Id not found."
                },
                {
                  "Code": 102,
                  "Message": "Client with the external client Id already deleted."
                },
                {
                  "Code": 103,
                  "Message": "Service type not found."
                },
                {
                  "Code": 104,
                  "Message": "Service type definition not found."
                },
                {
                  "Code": 105,
                  "Message": "Field caption not found."
                },
                {
                  "Code": 106,
                  "Message": "Duplicate field captions found."
                },
                {
                  "Code": 107,
                  "Message": "Company dispatch module does not exist."
                },
                {
                  "Code": 108,
                  "Message": "User with 'Employee Number' not found."
                },
                {
                  "Code": 109,
                  "Message": "Order with the external Id already exists."
                },
                {
                  "Code": 110,
                  "Message": "External client Id is required."
                },
                {
                  "Code": 111,
                  "Message": "External order Id is required."
                },
                {
                  "Code": 112,
                  "Message": "OrderDate is required."
                },
                {
                  "Code": 113,
                  "Message": "ServiceTypeName is required."
                },
                {
                  "Code": 114,
                  "Message": "User with 'Employee Number' already deleted or deactivated."
                },
                {
                  "Code": 115,
                  "Message": "Required form field not found."
                },
                {
                  "Code": 116,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Contact Email format is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Latitude\\Longitude values are not valid."
                },
                {
                  "Code": 120,
                  "Message": "Country not supported."
                },
                {
                  "Code": 121,
                  "Message": "Region not supported."
                },
                {
                  "Code": 122,
                  "Message": "DueDateFrom is required."
                },
                {
                  "Code": 123,
                  "Message": "DueDateTo is required."
                },
                {
                  "Code": 124,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Contact Email length is not valid."
                },
                {
                  "Code": 126,
                  "Message": "Order status not found."
                },
                {
                  "Code": 127,
                  "Message": "Order cannot be closed."
                },
                {
                  "Code": 128,
                  "Message": "OrderFormFields are passed but service type has no form."
                },
                {
                  "Code": 129,
                  "Message": "StatusFormFields are passed but service status has no form."
                },
                {
                  "Code": 130,
                  "Message": "Client name length is not valid."
                },
                {
                  "Code": 131,
                  "Message": "Client country length is not valid."
                },
                {
                  "Code": 132,
                  "Message": "Client city length is not valid."
                },
                {
                  "Code": 133,
                  "Message": "Client region Code length is not valid."
                },
                {
                  "Code": 134,
                  "Message": "Client region Name length is not valid."
                },
                {
                  "Code": 135,
                  "Message": "Client subRegion Code length is not valid."
                },
                {
                  "Code": 136,
                  "Message": "Client subRegion Name length is not valid."
                },
                {
                  "Code": 137,
                  "Message": "Client postal Code length is not valid."
                },
                {
                  "Code": 138,
                  "Message": "Client address Line 1 length is not valid."
                },
                {
                  "Code": 139,
                  "Message": "Client address Line 2 length is not valid."
                },
                {
                  "Code": 140,
                  "Message": "Order status Start Date Time is not unique."
                },
                {
                  "Code": 141,
                  "Message": "Include status history parameter is not valid. Should be 'true' or 'false'."
                },
                {
                  "Code": 142,
                  "Message": "Only dispatched status is allowed for new orders."
                },
                {
                  "Code": 143,
                  "Message": "RecId parameter can't be used without modifiedTime parameter."
                },
                {
                  "Code": 144,
                  "Message": "Due date is not valid."
                },
                {
                  "Code": 145,
                  "Message": "Order Created Date Time is required."
                },
                {
                  "Code": 146,
                  "Message": "Created date is greater than dispatched time."
                },
                {
                  "Code": 147,
                  "Message": "Due Date is required for minor api version <= 2."
                },
                {
                  "Code": 148,
                  "Message": "Start Time is required for minor api version >= 3."
                },
                {
                  "Code": 149,
                  "Message": "Service duration is less than minimum allowed."
                },
                {
                  "Code": 150,
                  "Message": "Service duration is more than maximum allowed."
                },
                {
                  "Code": 151,
                  "Message": "Due Date cannot be used with Start Time or End Time."
                },
                {
                  "Code": 152,
                  "Message": "End Time cannot be less than Start Time."
                },
                {
                  "Code": 153,
                  "Message": "Status type is not valid."
                },
                {
                  "Code": 154,
                  "Message": "Status start date time is required."
                },
                {
                  "Code": 155,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 156,
                  "Message": "Invalid NFC value"
                },
                {
                  "Code": 157,
                  "Message": "Employee number is required."
                },
                {
                  "Code": 158,
                  "Message": "Lookup field was not found by value."
                },
                {
                  "Code": 159,
                  "Message": "Page size or page number are not valid."
                },
                {
                  "Code": 189,
                  "Message": "Status start date time cannot be from future."
                },
                {
                  "Code": 192,
                  "Message": "Inappropriate referenced binary type."
                },
                {
                  "Code": 193,
                  "Message": "Binary for the field doesn't exist."
                },
                {
                  "Code": 190,
                  "Message": "Invalid image reference."
                },
                {
                  "Code": 191,
                  "Message": "Invalid audio reference."
                },
                {
                  "Code": 194,
                  "Message": "Address provided without latitude and longitude"
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Order not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        },
        "x-ms-trigger": "batch",
        "x-ms-trigger-metadata": {
          "mode": "polling",
          "kind": "query"
        }
      }
    },
    "/orders/v1/orders/statuses/poll": {
      "get": {
        "tags": [
          "Orders API"
        ],
        "summary": "Order statuses poll",
        "description": "The Order Statuses API polling endpoint allows your application to continually poll and process recent changes to orders.\r\n\r\nIntegration:\r\n\r\nThis endpoint is designed to work out of the box with Microsoft Flow as a polling trigger integration. Alternatively, you may develop your own \r\ncustom integration using any language.\r\n\r\nUsage:\r\n\r\nIn a typical scenario, the first request to this endpoint should not provide any parameters. There are two (2) possible successful responses:\r\n* HTTP Response code 200 - Recently changed order status records exist; response body will display order status data\r\n* HTTP Response code 202 - No recently submitted records exist; response body will be empty.\r\n\r\nIn both cases, there are two (2) important headers in the response:\r\n* Location - The URL for the next request.\r\n* Retry-After - The recommended time interval in seconds for next request. For example, if there is data to retrieve, the Retry-After header will have a value of 1 or 60. \r\nIf there is no data to retrieve, the value of the Retry-After header will be 300.\r\n\r\nNote: These are just recommended values - your application may choose to poll at a different frequency depending on your requirements. After the first request, all \r\nsubsequent requests should use the URL provided in the Location header of the most recent response. Do not add more parameters to the URL, as it already contains \r\nthose necessary to ensure order statuses are not missing from the request.\r\n\r\nResults are sorted by ModifiedUtc and then by StatusId, in ascending order. Sort parameters are not configurable.\r\n\r\nModifiedUtc definition: internal time tag = time of latest order status data change.",
        "operationId": "OrdersController_StatusesPoll",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "excludeFormData",
            "in": "query",
            "description": "If true, FieldValues will always be an empty array.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "excludeFormData"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of order statuses data is returned in body as json string.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.Order.OrderStatusHistoryListItemApiModel"
              }
            },
            "headers": {
              "Retry-After": {
                "description": "Time interval in seconds for next request in seconds",
                "type": "string"
              }
            }
          },
          "202": {
            "description": "The request is accepted. Do not trigger the workflow. The next attempt happens in one minute.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "use-external-id is not valid."
                },
                {
                  "Code": 2,
                  "Message": "Internal Id is not valid. Should be a numeric value."
                },
                {
                  "Code": 3,
                  "Message": "Invalid data format."
                },
                {
                  "Code": 4,
                  "Message": "External Id is empty."
                },
                {
                  "Code": 101,
                  "Message": "Client with the external client Id not found."
                },
                {
                  "Code": 102,
                  "Message": "Client with the external client Id already deleted."
                },
                {
                  "Code": 103,
                  "Message": "Service type not found."
                },
                {
                  "Code": 104,
                  "Message": "Service type definition not found."
                },
                {
                  "Code": 105,
                  "Message": "Field caption not found."
                },
                {
                  "Code": 106,
                  "Message": "Duplicate field captions found."
                },
                {
                  "Code": 107,
                  "Message": "Company dispatch module does not exist."
                },
                {
                  "Code": 108,
                  "Message": "User with 'Employee Number' not found."
                },
                {
                  "Code": 109,
                  "Message": "Order with the external Id already exists."
                },
                {
                  "Code": 110,
                  "Message": "External client Id is required."
                },
                {
                  "Code": 111,
                  "Message": "External order Id is required."
                },
                {
                  "Code": 112,
                  "Message": "OrderDate is required."
                },
                {
                  "Code": 113,
                  "Message": "ServiceTypeName is required."
                },
                {
                  "Code": 114,
                  "Message": "User with 'Employee Number' already deleted or deactivated."
                },
                {
                  "Code": 115,
                  "Message": "Required form field not found."
                },
                {
                  "Code": 116,
                  "Message": "Contact Phone length is not valid."
                },
                {
                  "Code": 117,
                  "Message": "Contact Name length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Contact Email format is not valid."
                },
                {
                  "Code": 119,
                  "Message": "Latitude\\Longitude values are not valid."
                },
                {
                  "Code": 120,
                  "Message": "Country not supported."
                },
                {
                  "Code": 121,
                  "Message": "Region not supported."
                },
                {
                  "Code": 122,
                  "Message": "DueDateFrom is required."
                },
                {
                  "Code": 123,
                  "Message": "DueDateTo is required."
                },
                {
                  "Code": 124,
                  "Message": "External Id length is not valid."
                },
                {
                  "Code": 125,
                  "Message": "Contact Email length is not valid."
                },
                {
                  "Code": 126,
                  "Message": "Order status not found."
                },
                {
                  "Code": 127,
                  "Message": "Order cannot be closed."
                },
                {
                  "Code": 128,
                  "Message": "OrderFormFields are passed but service type has no form."
                },
                {
                  "Code": 129,
                  "Message": "StatusFormFields are passed but service status has no form."
                },
                {
                  "Code": 130,
                  "Message": "Client name length is not valid."
                },
                {
                  "Code": 131,
                  "Message": "Client country length is not valid."
                },
                {
                  "Code": 132,
                  "Message": "Client city length is not valid."
                },
                {
                  "Code": 133,
                  "Message": "Client region Code length is not valid."
                },
                {
                  "Code": 134,
                  "Message": "Client region Name length is not valid."
                },
                {
                  "Code": 135,
                  "Message": "Client subRegion Code length is not valid."
                },
                {
                  "Code": 136,
                  "Message": "Client subRegion Name length is not valid."
                },
                {
                  "Code": 137,
                  "Message": "Client postal Code length is not valid."
                },
                {
                  "Code": 138,
                  "Message": "Client address Line 1 length is not valid."
                },
                {
                  "Code": 139,
                  "Message": "Client address Line 2 length is not valid."
                },
                {
                  "Code": 140,
                  "Message": "Order status Start Date Time is not unique."
                },
                {
                  "Code": 141,
                  "Message": "Include status history parameter is not valid. Should be 'true' or 'false'."
                },
                {
                  "Code": 142,
                  "Message": "Only dispatched status is allowed for new orders."
                },
                {
                  "Code": 143,
                  "Message": "RecId parameter can't be used without modifiedTime parameter."
                },
                {
                  "Code": 144,
                  "Message": "Due date is not valid."
                },
                {
                  "Code": 145,
                  "Message": "Order Created Date Time is required."
                },
                {
                  "Code": 146,
                  "Message": "Created date is greater than dispatched time."
                },
                {
                  "Code": 147,
                  "Message": "Due Date is required for minor api version <= 2."
                },
                {
                  "Code": 148,
                  "Message": "Start Time is required for minor api version >= 3."
                },
                {
                  "Code": 149,
                  "Message": "Service duration is less than minimum allowed."
                },
                {
                  "Code": 150,
                  "Message": "Service duration is more than maximum allowed."
                },
                {
                  "Code": 151,
                  "Message": "Due Date cannot be used with Start Time or End Time."
                },
                {
                  "Code": 152,
                  "Message": "End Time cannot be less than Start Time."
                },
                {
                  "Code": 153,
                  "Message": "Status type is not valid."
                },
                {
                  "Code": 154,
                  "Message": "Status start date time is required."
                },
                {
                  "Code": 155,
                  "Message": "Custom fields are not supported."
                },
                {
                  "Code": 156,
                  "Message": "Invalid NFC value"
                },
                {
                  "Code": 157,
                  "Message": "Employee number is required."
                },
                {
                  "Code": 158,
                  "Message": "Lookup field was not found by value."
                },
                {
                  "Code": 159,
                  "Message": "Page size or page number are not valid."
                },
                {
                  "Code": 189,
                  "Message": "Status start date time cannot be from future."
                },
                {
                  "Code": 192,
                  "Message": "Inappropriate referenced binary type."
                },
                {
                  "Code": 193,
                  "Message": "Binary for the field doesn't exist."
                },
                {
                  "Code": 190,
                  "Message": "Invalid image reference."
                },
                {
                  "Code": 191,
                  "Message": "Invalid audio reference."
                },
                {
                  "Code": 194,
                  "Message": "Address provided without latitude and longitude"
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Order not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        },
        "x-ms-trigger": "batch",
        "x-ms-trigger-metadata": {
          "mode": "polling",
          "kind": "query"
        }
      }
    },
    "/timekeeping/v1/timekeeping": {
      "get": {
        "tags": [
          "Timekeeping API"
        ],
        "summary": "Get a list of timekeeping entries",
        "description": "Retrieves a list of timekeeping entries based on date range. You can specify the number of pages returned and the number of elements per page. Results are \r\nautomatically sorted by ClockInTime, and then by TimekeepingStatusId, and in ascending order. Sort parameters are not configurable.",
        "operationId": "TimekeepingController_GetTimekeepingDataList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "Start date.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "fromDate"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "End date.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "toDate"
          },
          {
            "name": "employeeNumber",
            "in": "query",
            "description": "Employee number.",
            "required": false,
            "type": "string",
            "x-ms-summary": "employeeNumber"
          },
          {
            "name": "approved",
            "in": "query",
            "description": "Filter for approved entry only.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "approved"
          },
          {
            "name": "closedOnly",
            "in": "query",
            "description": "Filter for closed entry only.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "closedOnly"
          },
          {
            "name": "excludeFormData",
            "in": "query",
            "description": "Filter for excluding form data.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "excludeFormData"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Start Page number (default 1).",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageNumber"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size (default 1000).",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageSize"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of submitted Timekeeping data is returned in body as json string.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.Timekeeping.TimekeepingApiModel"
              }
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 100,
                  "Message": "rootSubmittedStatusId must be numeric."
                },
                {
                  "Code": 101,
                  "Message": "Invalid start date."
                },
                {
                  "Code": 102,
                  "Message": "Invalid end date."
                },
                {
                  "Code": 103,
                  "Message": "rootStatusId parameter can't be used without modifiedTime parameter."
                },
                {
                  "Code": 104,
                  "Message": "Employee number is invalid."
                },
                {
                  "Code": 105,
                  "Message": "rootSubmittedStatusId for companyId was not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/timekeeping/v1/timekeeping/{id}": {
      "get": {
        "tags": [
          "Timekeeping API"
        ],
        "summary": "Get a timekeeping entry",
        "description": "Retrieves an entry by its Id.",
        "operationId": "TimekeepingController_GetTimekeepingEntryAsync",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the record.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "The entry is returned in body as json string.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Timekeeping.TimekeepingApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 100,
                  "Message": "rootSubmittedStatusId must be numeric."
                },
                {
                  "Code": 101,
                  "Message": "Invalid start date."
                },
                {
                  "Code": 102,
                  "Message": "Invalid end date."
                },
                {
                  "Code": 103,
                  "Message": "rootStatusId parameter can't be used without modifiedTime parameter."
                },
                {
                  "Code": 104,
                  "Message": "Employee number is invalid."
                },
                {
                  "Code": 105,
                  "Message": "rootSubmittedStatusId for companyId was not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Entry not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/timekeeping/v1/timekeeping/poll": {
      "get": {
        "tags": [
          "Timekeeping API"
        ],
        "summary": "Timekeeping poll",
        "description": "The Timekeeping API polling endpoint allows your application to continually poll and process recently submitted timekeeping entries.\r\n\r\nIntegration:\r\n\r\nThis endpoint is designed to work out of the box with Microsoft Flow as a polling trigger integration. Alternatively, you may develop your own \r\ncustom integration using any language.\r\n\r\nUsage:\r\n\r\nIn a typical scenario, the first request to this endpoint should not provide any parameters. There are two (2) possible successful responses:\r\n* HTTP Response code 200 - Recently submitted timekeeping records exist; response body will display timekeeping entry data.\r\n* HTTP Response code 202 - No recently submitted records exist; response body will be empty.\r\n\r\nIn both cases, there are two (2) important headers in the response:\r\n* Location - The URL for the next request.\r\n* Retry-After - The recommended time interval in seconds for next request. For example, if there is data to retrieve, the Retry-After header will have a value of 1 or 60. \r\nIf there is no data to retrieve, the value of the Retry-After header will be 300.\r\n\r\nNote: These are just recommended values - your application may choose to poll at a different frequency depending on your requirements. After the first request, all \r\nsubsequent requests should use the URL provided in the Location header of the most recent response. Do not add more parameters to the URL, as it already contains \r\nthose necessary to ensure timekeeping entries are not missing from the request.\r\n\r\nResults are automatically sorted by ModifiedUtc and then by TimekeepingStatusId and then in ascending order. Sort parameters are not configurable.\r\n\r\nModifiedUtc definition: internal time tag = time of latest timekeeping status change.",
        "operationId": "TimekeepingController_Poll",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "excludeFormData",
            "in": "query",
            "description": "If true, ClockInFormData and ClockOutFormData will always be null.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "excludeFormData"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Timekeeping data is returned in the body. If we had to limit amount of data due to limitation of the paging, and Retry-After = 1 (1 second, we probably need to continue as soon as we can to catch up).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.Timekeeping.TimekeepingApiModel"
              }
            },
            "headers": {
              "Retry-After": {
                "description": "Time interval in seconds for next request in seconds",
                "type": "string"
              }
            }
          },
          "202": {
            "description": "No data to return since last time, and Retry-After = 300 (5 minutes).",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 100,
                  "Message": "rootSubmittedStatusId must be numeric."
                },
                {
                  "Code": 101,
                  "Message": "Invalid start date."
                },
                {
                  "Code": 102,
                  "Message": "Invalid end date."
                },
                {
                  "Code": 103,
                  "Message": "rootStatusId parameter can't be used without modifiedTime parameter."
                },
                {
                  "Code": 104,
                  "Message": "Employee number is invalid."
                },
                {
                  "Code": 105,
                  "Message": "rootSubmittedStatusId for companyId was not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        },
        "x-ms-trigger": "batch",
        "x-ms-trigger-metadata": {
          "mode": "polling",
          "kind": "query"
        }
      }
    },
    "/tracking/v1/tracking/trips": {
      "get": {
        "tags": [
          "Tracking API"
        ],
        "summary": "Get a list of trips",
        "description": "Retrieves a list of trips for a specific time period. You can specify the number of pages returned and the number of elements per page. Results are automatically\r\nsorted by StartUtcTIme, and in ascending order. Sort parameters are not configurable.",
        "operationId": "TrackingController_GetTrips",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "Date range start. Recommendation: Please use big date ranges (&gt;=4 hours) instead of small date ranges.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "fromDate"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Date range end. Recommendation: Please use big date ranges (&gt;=4 hours) instead of small date ranges.",
            "required": true,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "toDate"
          },
          {
            "name": "employeeNumber",
            "in": "query",
            "description": "Employee number.",
            "required": false,
            "type": "string",
            "x-ms-summary": "employeeNumber"
          },
          {
            "name": "vin",
            "in": "query",
            "description": "Vehicle's VIN number.",
            "required": false,
            "type": "string",
            "x-ms-summary": "vin"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Start page number. The default is 1.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageNumber"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. The default is 1000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageSize"
          },
          {
            "name": "useMetric",
            "in": "query",
            "description": "Use metric system or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "useMetric"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was executed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.Tracking.TripApiModel"
              }
            }
          },
          "204": {
            "description": "This is returned when there are no records.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Both VIN and Employee Number are provided."
                },
                {
                  "Code": 102,
                  "Message": "Invalid fromDate parameter."
                },
                {
                  "Code": 103,
                  "Message": "Invalid toDate parameter."
                },
                {
                  "Code": 104,
                  "Message": "Invalid useMetric parameter."
                },
                {
                  "Code": 105,
                  "Message": "Invalid pageNumber parameter."
                },
                {
                  "Code": 128,
                  "Message": "User not found."
                },
                {
                  "Code": 129,
                  "Message": "Vehicle not found."
                },
                {
                  "Code": 147,
                  "Message": "Token should be specified."
                },
                {
                  "Code": 148,
                  "Message": "Invalid subscriptionId."
                },
                {
                  "Code": 155,
                  "Message": "Invalid pageSize."
                },
                {
                  "Code": 153,
                  "Message": "Invalid fromDate & toDate parameters."
                },
                {
                  "Code": 154,
                  "Message": "Invalid token"
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/tracking/v1/tracking/gpsdata": {
      "get": {
        "tags": [
          "Tracking API"
        ],
        "summary": "Get GPS data entries",
        "description": "Retrieves GPS data entries for a specified date range. Also returns a continuation token and a link to get the next data portion. You can specify the number of pages\r\nreturned and the number of elements per page.\r\n            \r\nPositions for deleted users/vehicles are not returned. However, if the user/vehicle existed when data was requested and was later removed, then data for the\r\nuser/vehicle requested by a continuation token will be returned.\r\n            \r\nResults are automatically sorted by UtcTime, and in ascending order. Sort parameters are not configurable.",
        "operationId": "TrackingController_GetGpsData",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "Date range start. Recommendation: Please use big date ranges (&gt;=4 hours) instead of small date ranges.",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "fromDate"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Date range end. Recommendation: Please use big date ranges (&gt;=4 hours) instead of small date ranges.",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "toDate"
          },
          {
            "name": "employeeNumber",
            "in": "query",
            "description": "Employee number.",
            "required": false,
            "type": "string",
            "x-ms-summary": "employeeNumber"
          },
          {
            "name": "vin",
            "in": "query",
            "description": "Vehicle's VIN number.",
            "required": false,
            "type": "string",
            "x-ms-summary": "vin"
          },
          {
            "name": "useMetric",
            "in": "query",
            "description": "Use metric system or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "useMetric"
          },
          {
            "name": "token",
            "in": "query",
            "description": "Continuation token that is returned by the initial call, and shall be used in the successive call.",
            "required": false,
            "type": "string",
            "x-ms-summary": "token"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was executed successfully.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Tracking.GpsDataSegmentApiModel"
            },
            "headers": {
              "Location": {
                "description": "A link to get next data portion.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "This is returned when there are no records.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Both VIN and Employee Number are provided."
                },
                {
                  "Code": 102,
                  "Message": "Invalid fromDate parameter."
                },
                {
                  "Code": 103,
                  "Message": "Invalid toDate parameter."
                },
                {
                  "Code": 104,
                  "Message": "Invalid useMetric parameter."
                },
                {
                  "Code": 105,
                  "Message": "Invalid pageNumber parameter."
                },
                {
                  "Code": 128,
                  "Message": "User not found."
                },
                {
                  "Code": 129,
                  "Message": "Vehicle not found."
                },
                {
                  "Code": 147,
                  "Message": "Token should be specified."
                },
                {
                  "Code": 148,
                  "Message": "Invalid subscriptionId."
                },
                {
                  "Code": 155,
                  "Message": "Invalid pageSize."
                },
                {
                  "Code": 153,
                  "Message": "Invalid fromDate & toDate parameters."
                },
                {
                  "Code": 154,
                  "Message": "Invalid token"
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/tracking/v1/tracking/gpsdata/subscribe": {
      "post": {
        "tags": [
          "Tracking API"
        ],
        "summary": "Subscribe GPS data web hook",
        "description": "Adds new GPS Tracking data (GPS positions) web hook. Web hooks allow you to receive GPS positions occurring on a specified URL.",
        "operationId": "TrackingController_SubscribeToGpsDataFeed",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionParams",
            "in": "body",
            "description": "Subscription parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.WebHookSubscription.WebHookSubscriptionParamsApiModel"
            },
            "x-ms-summary": "subscriptionParams"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "New web hook subscription for GPS data was created successfully.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.WebHookSubscription.WebHookSubscriptionResultApiModel"
            }
          },
          "204": {
            "description": "This is returned when there are no records.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 3,
                  "Message": "Request body cannot be empty."
                },
                {
                  "Code": 149,
                  "Message": "Url: The length of the value must fall within the range \"10\" (Inclusive) - \"2083\" (Inclusive)."
                },
                {
                  "Code": 151,
                  "Message": "Url: Invalid URL."
                },
                {
                  "Code": 150,
                  "Message": "Security token is too long."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tracking API"
        ],
        "summary": "Unsubscribe GPS data web hook",
        "description": "Deletes a GPS data web hook subscription by its ID.",
        "operationId": "TrackingController_RemoveGpsDataFeedSubscription",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id to delete.",
            "required": true,
            "type": "string",
            "x-ms-summary": "subscriptionId"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "204": {
            "description": "Subscription was deleted successfully.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 148,
                  "Message": "Invalid subscriptionId."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/tracking/v1/tracking/gpsdata/subscriptions": {
      "get": {
        "tags": [
          "Tracking API"
        ],
        "summary": "Get a list of subscriptions",
        "description": "Retrieves a list of web hook subscriptions. You can specify the number of pages returned and the number of elements per page. Results are automatically sorted by\r\nSubscriptionId, and in ascending order. Sort parameters are not configurable.",
        "operationId": "TrackingController_GetSubscriptions",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was executed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.WebHookSubscription.WebHookSubscriptionInfoApiModel"
              }
            }
          },
          "204": {
            "description": "This is returned when there are no records.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tracking API"
        ],
        "summary": "Webhook callback with GPS data feed",
        "description": "This example method is used by gpsdata/subscribe to post back data feed using customer provided URL.",
        "operationId": "TrackingController_subscribe_callback",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "position",
            "in": "body",
            "description": "GPS position data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.WebHookGpsPositionApiModel"
            },
            "x-ms-summary": "position"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/tracking/v1/tracking/gpsdata/subscription/{subscriptionId}/reset": {
      "put": {
        "tags": [
          "Tracking API"
        ],
        "summary": "Resets subscription status",
        "description": "Changes subscription status to the status = 1 (\"Running\").",
        "operationId": "TrackingController_ResetSubscriptionHealthStatus",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Subscription id.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "subscriptionId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "204": {
            "description": "This is returned when there are no records.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/users/v1/users/{id}": {
      "get": {
        "tags": [
          "Users API"
        ],
        "summary": "Get a user",
        "description": "Gets a user by its Id.",
        "operationId": "UsersController_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "User is returned in body.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.User.ReadUserApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Employee number already exists."
                },
                {
                  "Code": 103,
                  "Message": "License Violation."
                },
                {
                  "Code": 104,
                  "Message": "Email format is not valid."
                },
                {
                  "Code": 105,
                  "Message": "Email length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "User already deleted or deactivated."
                },
                {
                  "Code": 107,
                  "Message": "Group does not exist or deleted."
                },
                {
                  "Code": 108,
                  "Message": "Not enough Licenses."
                },
                {
                  "Code": 109,
                  "Message": "Web MDN already exists."
                },
                {
                  "Code": 110,
                  "Message": "EPTT WebMDN length is not valid."
                },
                {
                  "Code": 111,
                  "Message": "EPTT Token length is not valid."
                },
                {
                  "Code": 112,
                  "Message": "EPTT Number length is not valid."
                },
                {
                  "Code": 113,
                  "Message": "Role is not found."
                },
                {
                  "Code": 114,
                  "Message": "UserName is required."
                },
                {
                  "Code": 115,
                  "Message": "UserName already exists."
                },
                {
                  "Code": 116,
                  "Message": "UserName format is not valid."
                },
                {
                  "Code": 117,
                  "Message": "UserName length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Password is required."
                },
                {
                  "Code": 119,
                  "Message": "Password format is not valid."
                },
                {
                  "Code": 120,
                  "Message": "Password length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "FirstName length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "LastName length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Phone length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Phone format is not valid."
                },
                {
                  "Code": 125,
                  "Message": "User has open orders."
                },
                {
                  "Code": 126,
                  "Message": "User has assigned vehicle."
                },
                {
                  "Code": 128,
                  "Message": "User not found or deleted."
                },
                {
                  "Code": 129,
                  "Message": "Vehicle was deleted or deactivated."
                },
                {
                  "Code": 131,
                  "Message": "'Web only' user cannot be 'Mobile only'."
                },
                {
                  "Code": 132,
                  "Message": "Invalid license type."
                },
                {
                  "Code": 133,
                  "Message": "License type required."
                },
                {
                  "Code": 135,
                  "Message": "User has public links."
                },
                {
                  "Code": 136,
                  "Message": "There must be at least one Administrator for this account."
                },
                {
                  "Code": 138,
                  "Message": "Property name not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "User not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users API"
        ],
        "summary": "Update a user",
        "description": "Updates an existing user.",
        "operationId": "UsersController_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "userModel",
            "in": "body",
            "description": "User object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.User.UpdateUserApiModel"
            },
            "x-ms-summary": "userModel"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "User has been updated. User Id is returned.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.ReturnIdApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Employee number already exists."
                },
                {
                  "Code": 103,
                  "Message": "License Violation."
                },
                {
                  "Code": 104,
                  "Message": "Email format is not valid."
                },
                {
                  "Code": 105,
                  "Message": "Email length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "User already deleted or deactivated."
                },
                {
                  "Code": 107,
                  "Message": "Group does not exist or deleted."
                },
                {
                  "Code": 108,
                  "Message": "Not enough Licenses."
                },
                {
                  "Code": 109,
                  "Message": "Web MDN already exists."
                },
                {
                  "Code": 110,
                  "Message": "EPTT WebMDN length is not valid."
                },
                {
                  "Code": 111,
                  "Message": "EPTT Token length is not valid."
                },
                {
                  "Code": 112,
                  "Message": "EPTT Number length is not valid."
                },
                {
                  "Code": 113,
                  "Message": "Role is not found."
                },
                {
                  "Code": 114,
                  "Message": "UserName is required."
                },
                {
                  "Code": 115,
                  "Message": "UserName already exists."
                },
                {
                  "Code": 116,
                  "Message": "UserName format is not valid."
                },
                {
                  "Code": 117,
                  "Message": "UserName length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Password is required."
                },
                {
                  "Code": 119,
                  "Message": "Password format is not valid."
                },
                {
                  "Code": 120,
                  "Message": "Password length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "FirstName length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "LastName length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Phone length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Phone format is not valid."
                },
                {
                  "Code": 125,
                  "Message": "User has open orders."
                },
                {
                  "Code": 126,
                  "Message": "User has assigned vehicle."
                },
                {
                  "Code": 128,
                  "Message": "User not found or deleted."
                },
                {
                  "Code": 129,
                  "Message": "Vehicle was deleted or deactivated."
                },
                {
                  "Code": 131,
                  "Message": "'Web only' user cannot be 'Mobile only'."
                },
                {
                  "Code": 132,
                  "Message": "Invalid license type."
                },
                {
                  "Code": 133,
                  "Message": "License type required."
                },
                {
                  "Code": 135,
                  "Message": "User has public links."
                },
                {
                  "Code": 136,
                  "Message": "There must be at least one Administrator for this account."
                },
                {
                  "Code": 138,
                  "Message": "Property name not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "User not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Employee number already exists."
                },
                {
                  "Code": 103,
                  "Message": "License Violation."
                },
                {
                  "Code": 104,
                  "Message": "Email format is not valid."
                },
                {
                  "Code": 105,
                  "Message": "Email length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "User already deleted or deactivated."
                },
                {
                  "Code": 107,
                  "Message": "Group does not exist or deleted."
                },
                {
                  "Code": 108,
                  "Message": "Not enough Licenses."
                },
                {
                  "Code": 109,
                  "Message": "Web MDN already exists."
                },
                {
                  "Code": 110,
                  "Message": "EPTT WebMDN length is not valid."
                },
                {
                  "Code": 111,
                  "Message": "EPTT Token length is not valid."
                },
                {
                  "Code": 112,
                  "Message": "EPTT Number length is not valid."
                },
                {
                  "Code": 113,
                  "Message": "Role is not found."
                },
                {
                  "Code": 114,
                  "Message": "UserName is required."
                },
                {
                  "Code": 115,
                  "Message": "UserName already exists."
                },
                {
                  "Code": 116,
                  "Message": "UserName format is not valid."
                },
                {
                  "Code": 117,
                  "Message": "UserName length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Password is required."
                },
                {
                  "Code": 119,
                  "Message": "Password format is not valid."
                },
                {
                  "Code": 120,
                  "Message": "Password length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "FirstName length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "LastName length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Phone length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Phone format is not valid."
                },
                {
                  "Code": 125,
                  "Message": "User has open orders."
                },
                {
                  "Code": 126,
                  "Message": "User has assigned vehicle."
                },
                {
                  "Code": 128,
                  "Message": "User not found or deleted."
                },
                {
                  "Code": 129,
                  "Message": "Vehicle was deleted or deactivated."
                },
                {
                  "Code": 131,
                  "Message": "'Web only' user cannot be 'Mobile only'."
                },
                {
                  "Code": 132,
                  "Message": "Invalid license type."
                },
                {
                  "Code": 133,
                  "Message": "License type required."
                },
                {
                  "Code": 135,
                  "Message": "User has public links."
                },
                {
                  "Code": 136,
                  "Message": "There must be at least one Administrator for this account."
                },
                {
                  "Code": 138,
                  "Message": "Property name not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users API"
        ],
        "summary": "Update part of a user",
        "description": "Updates part of user's properties.",
        "operationId": "UsersController_PartialUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "updatePropertyMap",
            "in": "body",
            "description": "User's properties that to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {}
            },
            "x-ms-summary": "updatePropertyMap"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "User has been updated. User Id is returned.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.ReturnIdApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Employee number already exists."
                },
                {
                  "Code": 103,
                  "Message": "License Violation."
                },
                {
                  "Code": 104,
                  "Message": "Email format is not valid."
                },
                {
                  "Code": 105,
                  "Message": "Email length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "User already deleted or deactivated."
                },
                {
                  "Code": 107,
                  "Message": "Group does not exist or deleted."
                },
                {
                  "Code": 108,
                  "Message": "Not enough Licenses."
                },
                {
                  "Code": 109,
                  "Message": "Web MDN already exists."
                },
                {
                  "Code": 110,
                  "Message": "EPTT WebMDN length is not valid."
                },
                {
                  "Code": 111,
                  "Message": "EPTT Token length is not valid."
                },
                {
                  "Code": 112,
                  "Message": "EPTT Number length is not valid."
                },
                {
                  "Code": 113,
                  "Message": "Role is not found."
                },
                {
                  "Code": 114,
                  "Message": "UserName is required."
                },
                {
                  "Code": 115,
                  "Message": "UserName already exists."
                },
                {
                  "Code": 116,
                  "Message": "UserName format is not valid."
                },
                {
                  "Code": 117,
                  "Message": "UserName length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Password is required."
                },
                {
                  "Code": 119,
                  "Message": "Password format is not valid."
                },
                {
                  "Code": 120,
                  "Message": "Password length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "FirstName length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "LastName length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Phone length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Phone format is not valid."
                },
                {
                  "Code": 125,
                  "Message": "User has open orders."
                },
                {
                  "Code": 126,
                  "Message": "User has assigned vehicle."
                },
                {
                  "Code": 128,
                  "Message": "User not found or deleted."
                },
                {
                  "Code": 129,
                  "Message": "Vehicle was deleted or deactivated."
                },
                {
                  "Code": 131,
                  "Message": "'Web only' user cannot be 'Mobile only'."
                },
                {
                  "Code": 132,
                  "Message": "Invalid license type."
                },
                {
                  "Code": 133,
                  "Message": "License type required."
                },
                {
                  "Code": 135,
                  "Message": "User has public links."
                },
                {
                  "Code": 136,
                  "Message": "There must be at least one Administrator for this account."
                },
                {
                  "Code": 138,
                  "Message": "Property name not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "User not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Employee number already exists."
                },
                {
                  "Code": 103,
                  "Message": "License Violation."
                },
                {
                  "Code": 104,
                  "Message": "Email format is not valid."
                },
                {
                  "Code": 105,
                  "Message": "Email length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "User already deleted or deactivated."
                },
                {
                  "Code": 107,
                  "Message": "Group does not exist or deleted."
                },
                {
                  "Code": 108,
                  "Message": "Not enough Licenses."
                },
                {
                  "Code": 109,
                  "Message": "Web MDN already exists."
                },
                {
                  "Code": 110,
                  "Message": "EPTT WebMDN length is not valid."
                },
                {
                  "Code": 111,
                  "Message": "EPTT Token length is not valid."
                },
                {
                  "Code": 112,
                  "Message": "EPTT Number length is not valid."
                },
                {
                  "Code": 113,
                  "Message": "Role is not found."
                },
                {
                  "Code": 114,
                  "Message": "UserName is required."
                },
                {
                  "Code": 115,
                  "Message": "UserName already exists."
                },
                {
                  "Code": 116,
                  "Message": "UserName format is not valid."
                },
                {
                  "Code": 117,
                  "Message": "UserName length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Password is required."
                },
                {
                  "Code": 119,
                  "Message": "Password format is not valid."
                },
                {
                  "Code": 120,
                  "Message": "Password length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "FirstName length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "LastName length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Phone length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Phone format is not valid."
                },
                {
                  "Code": 125,
                  "Message": "User has open orders."
                },
                {
                  "Code": 126,
                  "Message": "User has assigned vehicle."
                },
                {
                  "Code": 128,
                  "Message": "User not found or deleted."
                },
                {
                  "Code": 129,
                  "Message": "Vehicle was deleted or deactivated."
                },
                {
                  "Code": 131,
                  "Message": "'Web only' user cannot be 'Mobile only'."
                },
                {
                  "Code": 132,
                  "Message": "Invalid license type."
                },
                {
                  "Code": 133,
                  "Message": "License type required."
                },
                {
                  "Code": 135,
                  "Message": "User has public links."
                },
                {
                  "Code": 136,
                  "Message": "There must be at least one Administrator for this account."
                },
                {
                  "Code": 138,
                  "Message": "Property name not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/users/v1/users": {
      "get": {
        "tags": [
          "Users API"
        ],
        "summary": "Get a list of users",
        "description": "Retrieves a list of clients. You can specify the number of pages returned and the number of elements per page. Results are automatically sorted by UserId, and in\r\nascending order. Sort parameters are not configurable.",
        "operationId": "UsersController_GetUsers",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Start page number. The default is 1.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageNumber"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. The default is 500.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageSize"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "User list is returned in body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.User.ReadUserListItemApiModel"
              }
            }
          },
          "204": {
            "description": "No users found. Body is empty.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Employee number already exists."
                },
                {
                  "Code": 103,
                  "Message": "License Violation."
                },
                {
                  "Code": 104,
                  "Message": "Email format is not valid."
                },
                {
                  "Code": 105,
                  "Message": "Email length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "User already deleted or deactivated."
                },
                {
                  "Code": 107,
                  "Message": "Group does not exist or deleted."
                },
                {
                  "Code": 108,
                  "Message": "Not enough Licenses."
                },
                {
                  "Code": 109,
                  "Message": "Web MDN already exists."
                },
                {
                  "Code": 110,
                  "Message": "EPTT WebMDN length is not valid."
                },
                {
                  "Code": 111,
                  "Message": "EPTT Token length is not valid."
                },
                {
                  "Code": 112,
                  "Message": "EPTT Number length is not valid."
                },
                {
                  "Code": 113,
                  "Message": "Role is not found."
                },
                {
                  "Code": 114,
                  "Message": "UserName is required."
                },
                {
                  "Code": 115,
                  "Message": "UserName already exists."
                },
                {
                  "Code": 116,
                  "Message": "UserName format is not valid."
                },
                {
                  "Code": 117,
                  "Message": "UserName length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Password is required."
                },
                {
                  "Code": 119,
                  "Message": "Password format is not valid."
                },
                {
                  "Code": 120,
                  "Message": "Password length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "FirstName length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "LastName length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Phone length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Phone format is not valid."
                },
                {
                  "Code": 125,
                  "Message": "User has open orders."
                },
                {
                  "Code": 126,
                  "Message": "User has assigned vehicle."
                },
                {
                  "Code": 128,
                  "Message": "User not found or deleted."
                },
                {
                  "Code": 129,
                  "Message": "Vehicle was deleted or deactivated."
                },
                {
                  "Code": 131,
                  "Message": "'Web only' user cannot be 'Mobile only'."
                },
                {
                  "Code": 132,
                  "Message": "Invalid license type."
                },
                {
                  "Code": 133,
                  "Message": "License type required."
                },
                {
                  "Code": 135,
                  "Message": "User has public links."
                },
                {
                  "Code": 136,
                  "Message": "There must be at least one Administrator for this account."
                },
                {
                  "Code": 138,
                  "Message": "Property name not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users API"
        ],
        "summary": "Create a user",
        "description": "Creates a new user.",
        "operationId": "UsersController_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userModel",
            "in": "body",
            "description": "User object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.User.UpdateUserApiModel"
            },
            "x-ms-summary": "userModel"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "201": {
            "description": "User has been created. User Id is returned.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.ReturnIdApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Employee number already exists."
                },
                {
                  "Code": 103,
                  "Message": "License Violation."
                },
                {
                  "Code": 104,
                  "Message": "Email format is not valid."
                },
                {
                  "Code": 105,
                  "Message": "Email length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "User already deleted or deactivated."
                },
                {
                  "Code": 107,
                  "Message": "Group does not exist or deleted."
                },
                {
                  "Code": 108,
                  "Message": "Not enough Licenses."
                },
                {
                  "Code": 109,
                  "Message": "Web MDN already exists."
                },
                {
                  "Code": 110,
                  "Message": "EPTT WebMDN length is not valid."
                },
                {
                  "Code": 111,
                  "Message": "EPTT Token length is not valid."
                },
                {
                  "Code": 112,
                  "Message": "EPTT Number length is not valid."
                },
                {
                  "Code": 113,
                  "Message": "Role is not found."
                },
                {
                  "Code": 114,
                  "Message": "UserName is required."
                },
                {
                  "Code": 115,
                  "Message": "UserName already exists."
                },
                {
                  "Code": 116,
                  "Message": "UserName format is not valid."
                },
                {
                  "Code": 117,
                  "Message": "UserName length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Password is required."
                },
                {
                  "Code": 119,
                  "Message": "Password format is not valid."
                },
                {
                  "Code": 120,
                  "Message": "Password length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "FirstName length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "LastName length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Phone length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Phone format is not valid."
                },
                {
                  "Code": 125,
                  "Message": "User has open orders."
                },
                {
                  "Code": 126,
                  "Message": "User has assigned vehicle."
                },
                {
                  "Code": 128,
                  "Message": "User not found or deleted."
                },
                {
                  "Code": 129,
                  "Message": "Vehicle was deleted or deactivated."
                },
                {
                  "Code": 131,
                  "Message": "'Web only' user cannot be 'Mobile only'."
                },
                {
                  "Code": 132,
                  "Message": "Invalid license type."
                },
                {
                  "Code": 133,
                  "Message": "License type required."
                },
                {
                  "Code": 135,
                  "Message": "User has public links."
                },
                {
                  "Code": 136,
                  "Message": "There must be at least one Administrator for this account."
                },
                {
                  "Code": 138,
                  "Message": "Property name not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Employee number already exists."
                },
                {
                  "Code": 103,
                  "Message": "License Violation."
                },
                {
                  "Code": 104,
                  "Message": "Email format is not valid."
                },
                {
                  "Code": 105,
                  "Message": "Email length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "User already deleted or deactivated."
                },
                {
                  "Code": 107,
                  "Message": "Group does not exist or deleted."
                },
                {
                  "Code": 108,
                  "Message": "Not enough Licenses."
                },
                {
                  "Code": 109,
                  "Message": "Web MDN already exists."
                },
                {
                  "Code": 110,
                  "Message": "EPTT WebMDN length is not valid."
                },
                {
                  "Code": 111,
                  "Message": "EPTT Token length is not valid."
                },
                {
                  "Code": 112,
                  "Message": "EPTT Number length is not valid."
                },
                {
                  "Code": 113,
                  "Message": "Role is not found."
                },
                {
                  "Code": 114,
                  "Message": "UserName is required."
                },
                {
                  "Code": 115,
                  "Message": "UserName already exists."
                },
                {
                  "Code": 116,
                  "Message": "UserName format is not valid."
                },
                {
                  "Code": 117,
                  "Message": "UserName length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Password is required."
                },
                {
                  "Code": 119,
                  "Message": "Password format is not valid."
                },
                {
                  "Code": 120,
                  "Message": "Password length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "FirstName length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "LastName length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Phone length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Phone format is not valid."
                },
                {
                  "Code": 125,
                  "Message": "User has open orders."
                },
                {
                  "Code": 126,
                  "Message": "User has assigned vehicle."
                },
                {
                  "Code": 128,
                  "Message": "User not found or deleted."
                },
                {
                  "Code": 129,
                  "Message": "Vehicle was deleted or deactivated."
                },
                {
                  "Code": 131,
                  "Message": "'Web only' user cannot be 'Mobile only'."
                },
                {
                  "Code": 132,
                  "Message": "Invalid license type."
                },
                {
                  "Code": 133,
                  "Message": "License type required."
                },
                {
                  "Code": 135,
                  "Message": "User has public links."
                },
                {
                  "Code": 136,
                  "Message": "There must be at least one Administrator for this account."
                },
                {
                  "Code": 138,
                  "Message": "Property name not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/users/v1/users/{id}/active": {
      "put": {
        "tags": [
          "Users API"
        ],
        "summary": "Activate a user",
        "description": "Activates an existing user by its Id.",
        "operationId": "UsersController_Activate",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "User has been activated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Employee number already exists."
                },
                {
                  "Code": 103,
                  "Message": "License Violation."
                },
                {
                  "Code": 104,
                  "Message": "Email format is not valid."
                },
                {
                  "Code": 105,
                  "Message": "Email length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "User already deleted or deactivated."
                },
                {
                  "Code": 107,
                  "Message": "Group does not exist or deleted."
                },
                {
                  "Code": 108,
                  "Message": "Not enough Licenses."
                },
                {
                  "Code": 109,
                  "Message": "Web MDN already exists."
                },
                {
                  "Code": 110,
                  "Message": "EPTT WebMDN length is not valid."
                },
                {
                  "Code": 111,
                  "Message": "EPTT Token length is not valid."
                },
                {
                  "Code": 112,
                  "Message": "EPTT Number length is not valid."
                },
                {
                  "Code": 113,
                  "Message": "Role is not found."
                },
                {
                  "Code": 114,
                  "Message": "UserName is required."
                },
                {
                  "Code": 115,
                  "Message": "UserName already exists."
                },
                {
                  "Code": 116,
                  "Message": "UserName format is not valid."
                },
                {
                  "Code": 117,
                  "Message": "UserName length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Password is required."
                },
                {
                  "Code": 119,
                  "Message": "Password format is not valid."
                },
                {
                  "Code": 120,
                  "Message": "Password length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "FirstName length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "LastName length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Phone length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Phone format is not valid."
                },
                {
                  "Code": 125,
                  "Message": "User has open orders."
                },
                {
                  "Code": 126,
                  "Message": "User has assigned vehicle."
                },
                {
                  "Code": 128,
                  "Message": "User not found or deleted."
                },
                {
                  "Code": 129,
                  "Message": "Vehicle was deleted or deactivated."
                },
                {
                  "Code": 131,
                  "Message": "'Web only' user cannot be 'Mobile only'."
                },
                {
                  "Code": 132,
                  "Message": "Invalid license type."
                },
                {
                  "Code": 133,
                  "Message": "License type required."
                },
                {
                  "Code": 135,
                  "Message": "User has public links."
                },
                {
                  "Code": 136,
                  "Message": "There must be at least one Administrator for this account."
                },
                {
                  "Code": 138,
                  "Message": "Property name not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "User not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Employee number already exists."
                },
                {
                  "Code": 103,
                  "Message": "License Violation."
                },
                {
                  "Code": 104,
                  "Message": "Email format is not valid."
                },
                {
                  "Code": 105,
                  "Message": "Email length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "User already deleted or deactivated."
                },
                {
                  "Code": 107,
                  "Message": "Group does not exist or deleted."
                },
                {
                  "Code": 108,
                  "Message": "Not enough Licenses."
                },
                {
                  "Code": 109,
                  "Message": "Web MDN already exists."
                },
                {
                  "Code": 110,
                  "Message": "EPTT WebMDN length is not valid."
                },
                {
                  "Code": 111,
                  "Message": "EPTT Token length is not valid."
                },
                {
                  "Code": 112,
                  "Message": "EPTT Number length is not valid."
                },
                {
                  "Code": 113,
                  "Message": "Role is not found."
                },
                {
                  "Code": 114,
                  "Message": "UserName is required."
                },
                {
                  "Code": 115,
                  "Message": "UserName already exists."
                },
                {
                  "Code": 116,
                  "Message": "UserName format is not valid."
                },
                {
                  "Code": 117,
                  "Message": "UserName length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Password is required."
                },
                {
                  "Code": 119,
                  "Message": "Password format is not valid."
                },
                {
                  "Code": 120,
                  "Message": "Password length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "FirstName length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "LastName length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Phone length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Phone format is not valid."
                },
                {
                  "Code": 125,
                  "Message": "User has open orders."
                },
                {
                  "Code": 126,
                  "Message": "User has assigned vehicle."
                },
                {
                  "Code": 128,
                  "Message": "User not found or deleted."
                },
                {
                  "Code": 129,
                  "Message": "Vehicle was deleted or deactivated."
                },
                {
                  "Code": 131,
                  "Message": "'Web only' user cannot be 'Mobile only'."
                },
                {
                  "Code": 132,
                  "Message": "Invalid license type."
                },
                {
                  "Code": 133,
                  "Message": "License type required."
                },
                {
                  "Code": 135,
                  "Message": "User has public links."
                },
                {
                  "Code": 136,
                  "Message": "There must be at least one Administrator for this account."
                },
                {
                  "Code": 138,
                  "Message": "Property name not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users API"
        ],
        "summary": "Deactivate a user",
        "description": "Deactivates an existing user by its Id.",
        "operationId": "UsersController_Deactivate",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "User has been deactivated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Employee number already exists."
                },
                {
                  "Code": 103,
                  "Message": "License Violation."
                },
                {
                  "Code": 104,
                  "Message": "Email format is not valid."
                },
                {
                  "Code": 105,
                  "Message": "Email length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "User already deleted or deactivated."
                },
                {
                  "Code": 107,
                  "Message": "Group does not exist or deleted."
                },
                {
                  "Code": 108,
                  "Message": "Not enough Licenses."
                },
                {
                  "Code": 109,
                  "Message": "Web MDN already exists."
                },
                {
                  "Code": 110,
                  "Message": "EPTT WebMDN length is not valid."
                },
                {
                  "Code": 111,
                  "Message": "EPTT Token length is not valid."
                },
                {
                  "Code": 112,
                  "Message": "EPTT Number length is not valid."
                },
                {
                  "Code": 113,
                  "Message": "Role is not found."
                },
                {
                  "Code": 114,
                  "Message": "UserName is required."
                },
                {
                  "Code": 115,
                  "Message": "UserName already exists."
                },
                {
                  "Code": 116,
                  "Message": "UserName format is not valid."
                },
                {
                  "Code": 117,
                  "Message": "UserName length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Password is required."
                },
                {
                  "Code": 119,
                  "Message": "Password format is not valid."
                },
                {
                  "Code": 120,
                  "Message": "Password length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "FirstName length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "LastName length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Phone length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Phone format is not valid."
                },
                {
                  "Code": 125,
                  "Message": "User has open orders."
                },
                {
                  "Code": 126,
                  "Message": "User has assigned vehicle."
                },
                {
                  "Code": 128,
                  "Message": "User not found or deleted."
                },
                {
                  "Code": 129,
                  "Message": "Vehicle was deleted or deactivated."
                },
                {
                  "Code": 131,
                  "Message": "'Web only' user cannot be 'Mobile only'."
                },
                {
                  "Code": 132,
                  "Message": "Invalid license type."
                },
                {
                  "Code": 133,
                  "Message": "License type required."
                },
                {
                  "Code": 135,
                  "Message": "User has public links."
                },
                {
                  "Code": 136,
                  "Message": "There must be at least one Administrator for this account."
                },
                {
                  "Code": 138,
                  "Message": "Property name not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "User not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Employee number already exists."
                },
                {
                  "Code": 103,
                  "Message": "License Violation."
                },
                {
                  "Code": 104,
                  "Message": "Email format is not valid."
                },
                {
                  "Code": 105,
                  "Message": "Email length is not valid."
                },
                {
                  "Code": 106,
                  "Message": "User already deleted or deactivated."
                },
                {
                  "Code": 107,
                  "Message": "Group does not exist or deleted."
                },
                {
                  "Code": 108,
                  "Message": "Not enough Licenses."
                },
                {
                  "Code": 109,
                  "Message": "Web MDN already exists."
                },
                {
                  "Code": 110,
                  "Message": "EPTT WebMDN length is not valid."
                },
                {
                  "Code": 111,
                  "Message": "EPTT Token length is not valid."
                },
                {
                  "Code": 112,
                  "Message": "EPTT Number length is not valid."
                },
                {
                  "Code": 113,
                  "Message": "Role is not found."
                },
                {
                  "Code": 114,
                  "Message": "UserName is required."
                },
                {
                  "Code": 115,
                  "Message": "UserName already exists."
                },
                {
                  "Code": 116,
                  "Message": "UserName format is not valid."
                },
                {
                  "Code": 117,
                  "Message": "UserName length is not valid."
                },
                {
                  "Code": 118,
                  "Message": "Password is required."
                },
                {
                  "Code": 119,
                  "Message": "Password format is not valid."
                },
                {
                  "Code": 120,
                  "Message": "Password length is not valid."
                },
                {
                  "Code": 121,
                  "Message": "FirstName length is not valid."
                },
                {
                  "Code": 122,
                  "Message": "LastName length is not valid."
                },
                {
                  "Code": 123,
                  "Message": "Phone length is not valid."
                },
                {
                  "Code": 124,
                  "Message": "Phone format is not valid."
                },
                {
                  "Code": 125,
                  "Message": "User has open orders."
                },
                {
                  "Code": 126,
                  "Message": "User has assigned vehicle."
                },
                {
                  "Code": 128,
                  "Message": "User not found or deleted."
                },
                {
                  "Code": 129,
                  "Message": "Vehicle was deleted or deactivated."
                },
                {
                  "Code": 131,
                  "Message": "'Web only' user cannot be 'Mobile only'."
                },
                {
                  "Code": 132,
                  "Message": "Invalid license type."
                },
                {
                  "Code": 133,
                  "Message": "License type required."
                },
                {
                  "Code": 135,
                  "Message": "User has public links."
                },
                {
                  "Code": 136,
                  "Message": "There must be at least one Administrator for this account."
                },
                {
                  "Code": 138,
                  "Message": "Property name not found."
                },
                {
                  "Code": 152,
                  "Message": "Page size or page number are not valid."
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/vehicles/v1/vehicles": {
      "get": {
        "tags": [
          "Vehicles API"
        ],
        "summary": "Get a vehicles list",
        "description": "Retrieves a vehicles list.",
        "operationId": "VehiclesController_GetVehicles",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageNumber"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Max number of items in a page. Default = 1000. Max value = 2000.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "pageSize"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "if true - returns only active vehicles. Default value = false.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "activeOnly"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicles are returned in body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Models.Vehicles.VehicleReadApi"
              }
            }
          },
          "204": {
            "description": "Request has been processed, but there is no content in the body."
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 4,
                  "Message": "Max page size - 2000. Min page size - 1"
                },
                {
                  "Code": 5,
                  "Message": "Page number must be greater than zero."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Vehicles API"
        ],
        "summary": "Create a vehicle",
        "description": "Creates a vehicle.",
        "operationId": "VehiclesController_CreateVehicle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "createApi",
            "in": "body",
            "description": "Vehicle create Api model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Vehicles.VehicleCreateApi"
            },
            "x-ms-summary": "createApi"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "201": {
            "description": "Vehicle is created.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.ReturnIdApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 3,
                  "Message": "InvalidDataFormat. Request body cannot be empty."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Vehicle number already exists"
                },
                {
                  "Code": 102,
                  "Message": "Vehicle number is too long"
                },
                {
                  "Code": 103,
                  "Message": "Type length is too long"
                },
                {
                  "Code": 104,
                  "Message": "User does not exist or deleted"
                },
                {
                  "Code": 105,
                  "Message": "Tag is too long"
                },
                {
                  "Code": 106,
                  "Message": "Group does not exist or deleted"
                },
                {
                  "Code": 107,
                  "Message": "The value for time zone is invalid"
                },
                {
                  "Code": 108,
                  "Message": "Make is too long"
                },
                {
                  "Code": 109,
                  "Message": "Year is out of supported range"
                },
                {
                  "Code": 110,
                  "Message": "Model is too long"
                },
                {
                  "Code": 111,
                  "Message": "Color is too long"
                },
                {
                  "Code": 112,
                  "Message": "VIN is not valid"
                },
                {
                  "Code": 113,
                  "Message": "Non unique vehicle VIN."
                },
                {
                  "Code": 114,
                  "Message": "Device does not exist or deleted"
                },
                {
                  "Code": 116,
                  "Message": "Name is not valid"
                },
                {
                  "Code": 118,
                  "Message": "Not valid device type (valid values are 1 - Calamp, 2 - Geotab, 3 - Xirgo, 4 - Suntech)"
                },
                {
                  "Code": 119,
                  "Message": "Device type cannot be provided without device serial. And device serial cannot be provided without device type"
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/vehicles/v1/vehicles/{id}": {
      "get": {
        "tags": [
          "Vehicles API"
        ],
        "summary": "Get a vehicle by ID",
        "description": "Retrieves a single vehicle by ID.",
        "operationId": "VehiclesController_GetVehicle",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle is returned in body.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Vehicles.VehicleReadApi"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "Internal Id is not valid. Should be a numeric value"
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Vehicle not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Vehicles API"
        ],
        "summary": "Update a vehicle",
        "description": "Update a vehicle by ID.",
        "operationId": "VehiclesController_UpdateVehicle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "updateApi",
            "in": "body",
            "description": "Vehicle update Api model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.Vehicles.VehicleUpdateApi"
            },
            "x-ms-summary": "updateApi"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle id is returned in body.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "Internal Id is not valid. Should be a numeric value"
                },
                {
                  "Code": 3,
                  "Message": "InvalidDataFormat. Request body cannot be empty."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Vehicle not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Vehicle number already exists"
                },
                {
                  "Code": 102,
                  "Message": "Vehicle number is too long"
                },
                {
                  "Code": 103,
                  "Message": "Type length is too long"
                },
                {
                  "Code": 104,
                  "Message": "User does not exist or deleted"
                },
                {
                  "Code": 105,
                  "Message": "Tag is too long"
                },
                {
                  "Code": 106,
                  "Message": "Group does not exist or deleted"
                },
                {
                  "Code": 107,
                  "Message": "The value for time zone is invalid"
                },
                {
                  "Code": 108,
                  "Message": "Make is too long"
                },
                {
                  "Code": 109,
                  "Message": "Year is out of supported range"
                },
                {
                  "Code": 110,
                  "Message": "Model is too long"
                },
                {
                  "Code": 111,
                  "Message": "Color is too long"
                },
                {
                  "Code": 112,
                  "Message": "VIN is not valid"
                },
                {
                  "Code": 113,
                  "Message": "Non unique vehicle VIN."
                },
                {
                  "Code": 114,
                  "Message": "Device does not exist or deleted"
                },
                {
                  "Code": 115,
                  "Message": "Vehicle was changed"
                },
                {
                  "Code": 116,
                  "Message": "Name is not valid"
                },
                {
                  "Code": 118,
                  "Message": "Not valid device type (valid values are 1 - Calamp, 2 - Geotab, 3 - Xirgo, 4 - Suntech)"
                },
                {
                  "Code": 119,
                  "Message": "Device type cannot be provided without device serial. And device serial cannot be provided without device type"
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Vehicles API"
        ],
        "summary": "Delete a vehicle",
        "description": "Delete a vehicle by ID.",
        "operationId": "VehiclesController_Delete",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "204": {
            "description": "Request has been processed, but there is no content in the body.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "Internal Id is not valid. Should be a numeric value"
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Vehicle not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 115,
                  "Message": "Vehicle was changed"
                },
                {
                  "Code": 117,
                  "Message": "Vehicle has assigned device"
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Vehicles API"
        ],
        "summary": "Partial update a vehicle",
        "description": "Partial update a vehicle by ID.",
        "operationId": "VehiclesController_PartialUpdateVehicle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "updatePropertyMap",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {}
            },
            "x-ms-summary": "updatePropertyMap"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle id is returned in body.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.ReturnIdApiModel"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "Internal Id is not valid. Should be a numeric value"
                },
                {
                  "Code": 3,
                  "Message": "InvalidDataFormat. Request body cannot be empty."
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Vehicle not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 101,
                  "Message": "Vehicle number already exists"
                },
                {
                  "Code": 102,
                  "Message": "Vehicle number is too long"
                },
                {
                  "Code": 103,
                  "Message": "Type length is too long"
                },
                {
                  "Code": 104,
                  "Message": "User does not exist or deleted"
                },
                {
                  "Code": 105,
                  "Message": "Tag is too long"
                },
                {
                  "Code": 106,
                  "Message": "Group does not exist or deleted"
                },
                {
                  "Code": 107,
                  "Message": "The value for time zone is invalid"
                },
                {
                  "Code": 108,
                  "Message": "Make is too long"
                },
                {
                  "Code": 109,
                  "Message": "Year is out of supported range"
                },
                {
                  "Code": 110,
                  "Message": "Model is too long"
                },
                {
                  "Code": 111,
                  "Message": "Color is too long"
                },
                {
                  "Code": 112,
                  "Message": "VIN is not valid"
                },
                {
                  "Code": 113,
                  "Message": "Non unique vehicle VIN."
                },
                {
                  "Code": 114,
                  "Message": "Device does not exist or deleted"
                },
                {
                  "Code": 115,
                  "Message": "Vehicle was changed"
                },
                {
                  "Code": 116,
                  "Message": "Name is not valid"
                },
                {
                  "Code": 118,
                  "Message": "Not valid device type (valid values are 1 - Calamp, 2 - Geotab, 3 - Xirgo, 4 - Suntech)"
                },
                {
                  "Code": 119,
                  "Message": "Device type cannot be provided without device serial. And device serial cannot be provided without device type"
                },
                {
                  "Code": 120,
                  "Message": "Property not found"
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/vehicles/v1/vehicles/{id}/active": {
      "put": {
        "tags": [
          "Vehicles API"
        ],
        "summary": "Activate a vehicle",
        "description": "Activate a vehicle by ID.",
        "operationId": "VehiclesController_Activate",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle id is returned in body.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "Internal Id is not valid. Should be a numeric value"
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Vehicle not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 115,
                  "Message": "Vehicle was changed"
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Vehicles API"
        ],
        "summary": "Deactivate a vehicle",
        "description": "Deactivate a vehicle by ID.",
        "operationId": "VehiclesController_Deactivate",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "External or internal Id depends on the value in the use-external-id parameter.",
            "required": true,
            "type": "string",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          },
          {
            "name": "use-external-id",
            "in": "header",
            "description": "Use external id or not.",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "use-external-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle id is returned in body.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          "400": {
            "description": "Invalid request from the client. Example: missing required parameter for the GET method (which is not part of the resource name, the latter will result in 404 error). 400 error should be accompanied by error code returned in body. See format below.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 1,
                  "Message": "Internal Id is not valid. Should be a numeric value"
                }
              ]
            }
          },
          "401": {
            "description": "Request was not applied, because user credentials could not be authenticated.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "404": {
            "description": "Vehicle not found.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "422": {
            "description": "Request is well-formed, but the meaning of the request is unclear. Not all methods will return code 422. Please see description of common patterns to see if 422 status code is expected (GET single item, GET lists, GET polling triggers, POST entity, PUT entity, DELETE entity, and custom actions). 422 error should be accompanied by error code returned in the body (see format below).",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerAPI.Infrastructure.ErrorHandling.ResponseError"
              }
            },
            "examples": {
              "application/json": [
                {
                  "Code": 115,
                  "Message": "Vehicle was changed"
                }
              ]
            }
          },
          "500": {
            "description": "This error is always an indication of a bug on the server side; possibly due to an unhandled exception.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          },
          "503": {
            "description": "Service temporarily unavailable because other services (such as Azure service, or a required 3rd party service like Google API) are unavailable.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    },
    "/api/v1/minorversion": {
      "get": {
        "tags": [
          "Versions API"
        ],
        "summary": "Get minor version",
        "description": "Returns the current minor version of API.",
        "operationId": "VersionsController_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-API-Version",
            "in": "header",
            "description": "Requested current minor version. Latest version is 10.",
            "required": true,
            "type": "integer",
            "default": 10,
            "x-ms-visibility": "internal",
            "x-ms-summary": "X-API-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested current minor version. Latest version is 10.",
            "schema": {
              "$ref": "#/definitions/CustomerAPI.Models.EmptyResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CustomerAPI.Models.Binaries.UploadBinaryResultApiModel": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        }
      }
    },
    "CustomerAPI.Infrastructure.ErrorHandling.ResponseError": {
      "type": "object",
      "properties": {
        "Code": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Message": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CustomerAPI.Models.EmptyResponse": {
      "type": "object",
      "properties": {}
    },
    "CustomerAPI.Models.Client.ReadClientApiModel": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "description": "Id of the Client.",
          "type": "integer"
        },
        "ExternalId": {
          "description": "External Use Id for the Client - API Extension Property.",
          "type": "string"
        },
        "CreatedUtc": {
          "format": "date-time",
          "description": "The original point in time that the Client was created.",
          "type": "string"
        },
        "ModifiedUtc": {
          "format": "date-time",
          "description": "The last point in time that the Client was updated.",
          "type": "string"
        },
        "CustomFieldsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Client.ReadCustomFieldDataApiModel"
          }
        },
        "Name": {
          "description": "Name of the Client.",
          "type": "string"
        },
        "Address": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "Contact": {
          "$ref": "#/definitions/CustomerAPI.Models.Client.ContactApiModel"
        }
      }
    },
    "CustomerAPI.Models.Client.ReadCustomFieldDataApiModel": {
      "type": "object",
      "properties": {
        "FieldIndex": {
          "format": "int32",
          "description": "Field index.",
          "type": "integer"
        },
        "Caption": {
          "description": "Field caption.",
          "type": "string"
        },
        "DataType": {
          "format": "int32",
          "description": "Field data type.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            10,
            11,
            12,
            13
          ],
          "type": "integer"
        },
        "DateTimeFormat": {
          "format": "int32",
          "description": "DateTime format.",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "Value": {
          "description": "Field value."
        }
      }
    },
    "CustomerAPI.Models.LocationApiModel": {
      "type": "object",
      "properties": {
        "LatLon": {
          "$ref": "#/definitions/System.Nullable_1_Actsoft.Common.Geo.LatLon_"
        },
        "AddressLine1": {
          "description": "AddressLine1 of this LocationApiModel.",
          "type": "string"
        },
        "AddressLine2": {
          "description": "AddressLine1 of this LocationApiModel.",
          "type": "string"
        },
        "City": {
          "description": "City of the LocationApiModel.",
          "type": "string"
        },
        "RegionName": {
          "description": "Region Name of the LocationApiModel.",
          "type": "string"
        },
        "PostalCode": {
          "description": "Postal Code of the LocationApiModel.",
          "type": "string"
        },
        "CountryCode": {
          "description": "ISO 3166-1 alpha-2 code.",
          "type": "string"
        },
        "SubRegionName": {
          "description": "SubRegion of the LocationApiModel.",
          "type": "string"
        },
        "SubRegionCode": {
          "description": "SubRegion Code of the LocationApiModel.",
          "type": "string"
        },
        "RegionCode": {
          "description": "Region Code of the LocationApiModel.",
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.Client.ContactApiModel": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the ContactApiModel.",
          "type": "string"
        },
        "PhoneNumber": {
          "description": "PhoneNumber of the ContactApiModel.",
          "type": "string"
        },
        "Email": {
          "description": "Email of the ContactApiModel.",
          "type": "string"
        }
      }
    },
    "System.Nullable_1_Actsoft.Common.Geo.LatLon_": {
      "type": "object",
      "properties": {
        "Latitude": {
          "format": "double",
          "type": "number"
        },
        "Longitude": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "CustomerAPI.Models.Client.UpdateClientApiModel": {
      "type": "object",
      "properties": {
        "ExternalId": {
          "description": "External Use Id for the Client - API Extension Property.",
          "type": "string"
        },
        "CustomFieldsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Client.UpdateCustomFieldDataApiModel"
          }
        },
        "Name": {
          "description": "Name of the Client.",
          "type": "string"
        },
        "Address": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "Contact": {
          "$ref": "#/definitions/CustomerAPI.Models.Client.ContactApiModel"
        }
      }
    },
    "CustomerAPI.Models.Client.UpdateCustomFieldDataApiModel": {
      "type": "object",
      "properties": {
        "FieldIndex": {
          "format": "int32",
          "description": "Field index.",
          "type": "integer"
        },
        "Value": {
          "description": "Field value."
        }
      }
    },
    "CustomerAPI.Models.ReturnIdApiModel": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "description": "Object Id.",
          "type": "integer"
        }
      }
    },
    "CustomerAPI.Models.CustomLists.CustomListDefinitionListItemApiModel": {
      "description": "Defines Custom List Definition List Item API Model.",
      "type": "object",
      "properties": {
        "CustomListId": {
          "format": "int64",
          "description": "Custom List Id.",
          "type": "integer"
        },
        "Name": {
          "description": "Custom List Name.",
          "type": "string"
        },
        "Version": {
          "description": "Custom List Version.",
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.CustomLists.CustomListApiModel": {
      "description": "Custom List Model.",
      "type": "object",
      "properties": {
        "CustomListId": {
          "format": "int64",
          "description": "Custom List Id.",
          "type": "integer"
        },
        "Name": {
          "description": "Custom List Name.",
          "type": "string"
        },
        "Version": {
          "description": "Custom List Version.",
          "type": "string"
        },
        "Definition": {
          "$ref": "#/definitions/CustomerAPI.Models.CustomLists.CustomListDefinitionApiModel"
        }
      }
    },
    "CustomerAPI.Models.CustomLists.CustomListDefinitionApiModel": {
      "description": "Defines Custom List definition API model.",
      "type": "object",
      "properties": {
        "Columns": {
          "description": "Custom List Columns.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.CustomLists.CustomListDefinitionColumnApiModel"
          }
        },
        "UniqueColumnIndexIndex": {
          "format": "int32",
          "description": "Unique Column Index.",
          "type": "integer"
        }
      }
    },
    "CustomerAPI.Models.CustomLists.CustomListDefinitionColumnApiModel": {
      "description": "Defines Custom List Definition Column API Model.",
      "type": "object",
      "properties": {
        "Index": {
          "format": "int32",
          "description": "Column Index.",
          "type": "integer"
        },
        "DataType": {
          "format": "int32",
          "description": "Column DataType (Text: 0, Numeric: 1, Date: 2, Time: 3, DateTime: 4, Email: 5).",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "type": "integer"
        },
        "Name": {
          "description": "Column Name.",
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.CustomLists.CustomListColumnValuesContainerApiModel": {
      "description": "Container for custom list column data array.",
      "type": "object",
      "properties": {
        "ColumnValues": {
          "description": "Array of columns with data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.CustomLists.CustomListColumnValueApiModel"
          }
        }
      }
    },
    "CustomerAPI.Models.CustomLists.CustomListColumnValueApiModel": {
      "description": "This model defines custom list column value.",
      "type": "object",
      "properties": {
        "ColumnIndex": {
          "format": "int32",
          "description": "Custom list column index.",
          "type": "integer"
        },
        "Caption": {
          "description": "Custom list column caption.",
          "type": "string"
        },
        "Value": {
          "description": "Custom list column value."
        }
      }
    },
    "CustomerAPI.Models.CustomEventDefinitions.ReadCustomEventDefinitionApiModel": {
      "description": "Custom Event Definition Model.",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ReverseGeocode": {
          "type": "boolean"
        },
        "Parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.CustomEventDefinitions.CustomEventDefinitionParamApiModel"
          }
        }
      }
    },
    "CustomerAPI.Models.CustomEventDefinitions.CustomEventDefinitionParamApiModel": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Type": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "type": "integer"
        },
        "Caption": {
          "type": "string"
        },
        "Required": {
          "type": "boolean"
        }
      }
    },
    "CustomerAPI.Models.CustomEventDefinitions.CreateUpdateCustomEventDefinitionApiModel": {
      "description": "Custom Event Definition Model.",
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "ReverseGeocode": {
          "type": "boolean"
        },
        "Parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.CustomEventDefinitions.CustomEventDefinitionParamApiModel"
          }
        }
      }
    },
    "CustomerAPI.Models.CustomEventData.PostCustomEventDataApiModel": {
      "description": "Custom Event Data Model.",
      "type": "object",
      "properties": {
        "EventDefinitionId": {
          "description": "Event Definition Id.",
          "type": "string"
        },
        "EmployeeNumber": {
          "description": "Employee number.",
          "type": "string"
        },
        "VehicleNumber": {
          "description": "Vehicle number.",
          "type": "string"
        },
        "DeviceSerialNumber": {
          "description": "Device serial number.",
          "type": "string"
        },
        "Position": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "Time": {
          "format": "date-time",
          "type": "string"
        },
        "Parameters": {
          "description": "Event parameters.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CustomerAPI.Models.CustomEventData.ReadEventListItemApiModel": {
      "type": "object",
      "properties": {
        "EventId": {
          "format": "int64",
          "description": "Event Id.",
          "type": "integer"
        },
        "EventType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "EventCode": {
          "description": "Event code.",
          "type": "string"
        },
        "EventTime": {
          "format": "date-time",
          "description": "ISO format with Local and Offset.",
          "type": "string"
        },
        "User": {
          "$ref": "#/definitions/CustomerAPI.Models.UserReferenceApiModel"
        },
        "Vehicle": {
          "$ref": "#/definitions/CustomerAPI.Models.ReadVehicleApiModel"
        },
        "UserLinkedToVehicle": {
          "description": "If enabled then the event's vehicle has assigned user.",
          "type": "boolean"
        },
        "Location": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "PrimaryGeofence": {
          "$ref": "#/definitions/CustomerAPI.Models.Geofence.GeofenceInfoApiModel"
        },
        "CustomEventDefinitionId": {
          "description": "External event definition Id.",
          "type": "string"
        },
        "EventParams": {
          "description": "Event parameters.",
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "CustomerAPI.Models.UserReferenceApiModel": {
      "type": "object",
      "properties": {
        "UserId": {
          "format": "int32",
          "description": "UserId of the User.",
          "type": "integer"
        },
        "FirstName": {
          "description": "First name of the User.",
          "type": "string"
        },
        "LastName": {
          "description": "Last name of the User.",
          "type": "string"
        },
        "EmployeeNumber": {
          "description": "Employee number of the User.",
          "type": "string"
        },
        "GroupName": {
          "description": "Name of Group assigned to the User.",
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.ReadVehicleApiModel": {
      "type": "object",
      "properties": {
        "VehicleId": {
          "format": "int64",
          "description": "Id of the BaseVehicleApiModel.",
          "type": "integer"
        },
        "Name": {
          "description": "Name of the BaseVehicleApiModel.",
          "type": "string"
        },
        "VIN": {
          "description": "Vehicle Identification Number of the BaseVehicleApiModel.",
          "type": "string"
        },
        "DeviceName": {
          "description": "Name of Device associated with the BaseVehicleApiModel.",
          "type": "string"
        },
        "SerialNumber": {
          "description": "SerialNumber of the BaseVehicleApiModel.",
          "type": "string"
        },
        "GroupName": {
          "description": "GroupName of the BaseVehicleApiModel.",
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.Geofence.GeofenceInfoApiModel": {
      "type": "object",
      "properties": {
        "GeofenceId": {
          "format": "int64",
          "description": "Id of the Geofence.",
          "type": "integer"
        },
        "Name": {
          "description": "Name of the Geofence.",
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.WebHookSubscription.WebHookSubscriptionParamsApiModel": {
      "type": "object",
      "properties": {
        "Url": {
          "description": "Url containing the address of the WebHookSubscriptionParamsApiModel.",
          "type": "string"
        },
        "SecurityToken": {
          "description": "Security Token associated with this WebHookSubscriptionParamsApiModel.",
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.WebHookSubscription.WebHookSubscriptionResultApiModel": {
      "type": "object",
      "properties": {
        "SubscriptionId": {
          "description": "Id of the WebHookSubscriptionResultApiModel.",
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.WebHookSubscription.WebHookSubscriptionInfoApiModel": {
      "type": "object",
      "properties": {
        "SubscriptionId": {
          "type": "string"
        },
        "Url": {
          "type": "string"
        },
        "Status": {
          "format": "int32",
          "description": "Subscription status - (Running: 1, Stopped: 2).",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        }
      }
    },
    "CustomerAPI.Models.WebHookEventApiModel": {
      "type": "object",
      "properties": {
        "Id": {
          "description": "Url containing the address of the WebHookSubscriptionParamsApiModel.",
          "type": "string"
        },
        "EventType": {
          "format": "int32",
          "type": "integer"
        },
        "EventCode": {
          "type": "string"
        },
        "EventTime": {
          "format": "date-time",
          "description": "ISO format with Local and Offset.",
          "type": "string"
        },
        "DeviceId": {
          "description": "Device Id associated with the subscription.",
          "type": "string"
        },
        "DeviceType": {
          "format": "int32",
          "description": "Device type: Handset (0), CalAmp (1), Geotab (2), Xirgo (3).",
          "type": "integer"
        },
        "UserId": {
          "format": "int32",
          "description": "User Id.",
          "type": "integer"
        },
        "VehicleId": {
          "format": "int64",
          "description": "Vehicle Id.",
          "type": "integer"
        },
        "UserLinkedToVehicle": {
          "description": "Whether a user linked to the vehicle.",
          "type": "boolean"
        },
        "Lat": {
          "format": "double",
          "description": "Latitude.",
          "type": "number"
        },
        "Lon": {
          "format": "double",
          "description": "Longitude.",
          "type": "number"
        },
        "CustomEventDefinitionId": {
          "type": "string"
        },
        "EventParams": {
          "description": "Event parameters.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CustomerAPI.Models.Forms.StandaloneFormApiModel": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "description": "Id associated with this StandaloneFormApiModel - (Legacy comment: FormHeaderId).",
          "type": "integer"
        },
        "FormId": {
          "format": "int64",
          "description": "Id of the Form referenced by this StandaloneFormApiModel.",
          "type": "integer"
        },
        "FormName": {
          "description": "Name of the Form referenced by this StandaloneFormApiModel.",
          "type": "string"
        },
        "EntryNumber": {
          "description": "Form data entry number.",
          "type": "string"
        },
        "Reviewed": {
          "description": "Status of the Review of this StandaloneFormApiModel.",
          "type": "boolean"
        },
        "User": {
          "$ref": "#/definitions/CustomerAPI.Models.UserReferenceApiModel"
        },
        "SubmittedTime": {
          "format": "date-time",
          "description": "Point in time when the StandaloneFormApiModel was submitted.",
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "description": "Point in time when the StandaloneFormApiModel was started.",
          "type": "string"
        },
        "SubmittedLocation": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "FormData": {
          "description": "List of the Fields associated with this StandaloneFormApiModel.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Forms.FormFieldDataApiModel"
          },
          "readOnly": true
        },
        "ApiModuleId": {
          "description": "Id of the ApiModule associated with this StandaloneFormApiModel.",
          "type": "string"
        },
        "SharedUrl": {
          "description": "Shared url of this StandaloneFormApiModel.",
          "type": "string"
        },
        "ReviewedByUser": {
          "$ref": "#/definitions/CustomerAPI.Models.UserReferenceApiModel"
        },
        "ReviewedByTime": {
          "format": "date-time",
          "description": "Time of the form review",
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.Forms.FormFieldDataApiModel": {
      "type": "object",
      "properties": {
        "Repeatables": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CustomerAPI.Models.Forms.FormFieldDataBaseApiModel"
            }
          }
        },
        "Id": {
          "description": "Id of the FormFieldDataApiModel.",
          "type": "string"
        },
        "Value": {
          "description": "Value of the FormFieldDataApiModel."
        },
        "DisplayValue": {
          "description": "DisplayValue of the FormFieldDataApiModel."
        },
        "CapturedTime": {
          "format": "date-time",
          "description": "Point in time value was captured of the FormFieldDataApiModel.",
          "type": "string"
        },
        "CapturedLocation": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "Caption": {
          "description": "Caption content of the FormFieldDataApiModel.",
          "type": "string"
        },
        "ApiFieldId": {
          "description": "Id of the ApiField of the FormFieldDataApiModel.",
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.Forms.FormFieldDataBaseApiModel": {
      "type": "object",
      "properties": {
        "Id": {
          "description": "Id of the FormFieldDataApiModel.",
          "type": "string"
        },
        "Value": {
          "description": "Value of the FormFieldDataApiModel."
        },
        "DisplayValue": {
          "description": "DisplayValue of the FormFieldDataApiModel."
        },
        "CapturedTime": {
          "format": "date-time",
          "description": "Point in time value was captured of the FormFieldDataApiModel.",
          "type": "string"
        },
        "CapturedLocation": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "Caption": {
          "description": "Caption content of the FormFieldDataApiModel.",
          "type": "string"
        },
        "ApiFieldId": {
          "description": "Id of the ApiField of the FormFieldDataApiModel.",
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.Forms.CreateStandaloneFormApiModel": {
      "required": [
        "SubmittedTime"
      ],
      "type": "object",
      "properties": {
        "ApiModuleId": {
          "description": "Id of the ApiModule associated with this CreateStandaloneFormApiModel.",
          "type": "string"
        },
        "Reviewed": {
          "description": "Status of the Review of this CreateStandaloneFormApiModel.",
          "type": "boolean"
        },
        "User": {
          "$ref": "#/definitions/CustomerAPI.Models.UserAssignedApiModel"
        },
        "SubmittedTime": {
          "format": "date-time",
          "description": "Point in time when the CreateStandaloneFormApiModel was submitted.",
          "type": "string"
        },
        "SubmittedLocation": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "FormData": {
          "description": "Id of the Form referenced by this CreateStandaloneFormApiModel.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Forms.CreateFormFieldDataApiModel"
          }
        }
      }
    },
    "CustomerAPI.Models.UserAssignedApiModel": {
      "type": "object",
      "properties": {
        "UserId": {
          "format": "int32",
          "description": "UserId of the User.",
          "type": "integer"
        },
        "EmployeeNumber": {
          "description": "Employee number of the User.",
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.Forms.CreateFormFieldDataApiModel": {
      "required": [
        "ApiFieldId",
        "Value"
      ],
      "type": "object",
      "properties": {
        "Repeatables": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CustomerAPI.Models.Forms.CreateFormFieldDataBaseApiModel"
            }
          }
        },
        "ApiFieldId": {
          "description": "API Field Id.",
          "type": "string"
        },
        "Value": {
          "description": "Value of the FormFieldDataApiModel.\r\n\r\n\"NFC\" field value format:\r\n{\r\n\t\"Type\": number,\t\t// 0 - Text\r\n\t\"Payload\": object,\t// Should be text for Type = 0\r\n}\r\n\r\n\"Camera\" field value format (binary reference):\r\n{\r\n\t\"BinaryId\": string, // Binary ID of an uploaded image (see upload binary API)\r\n\t\"Note\": string\t\t// Note for the referenced image\r\n}\r\n\r\n\"Sign\" field value format (binary reference):\r\n{\r\n\t\"BinaryId\": string // Binary ID of an uploaded image (see upload binary API)\r\n}\r\n\r\n\"Audio\" field value format (binary reference):\r\n{\r\n\t\"BinaryId\": string,\t\t\t// Binary ID of an uploaded audio (see upload binary API)\r\n\t\"DurationSeconds\": number\t// Audio duration in seconds\r\n}"
        },
        "CapturedTime": {
          "format": "date-time",
          "description": "Time when binary data were captured. Format - date-time (as date-time in RFC3339) including offset.",
          "type": "string"
        },
        "CapturedLocation": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        }
      }
    },
    "CustomerAPI.Models.Forms.CreateFormFieldDataBaseApiModel": {
      "required": [
        "ApiFieldId",
        "Value"
      ],
      "type": "object",
      "properties": {
        "ApiFieldId": {
          "description": "API Field Id.",
          "type": "string"
        },
        "Value": {
          "description": "Value of the FormFieldDataApiModel.\r\n\r\n\"NFC\" field value format:\r\n{\r\n\t\"Type\": number,\t\t// 0 - Text\r\n\t\"Payload\": object,\t// Should be text for Type = 0\r\n}\r\n\r\n\"Camera\" field value format (binary reference):\r\n{\r\n\t\"BinaryId\": string, // Binary ID of an uploaded image (see upload binary API)\r\n\t\"Note\": string\t\t// Note for the referenced image\r\n}\r\n\r\n\"Sign\" field value format (binary reference):\r\n{\r\n\t\"BinaryId\": string // Binary ID of an uploaded image (see upload binary API)\r\n}\r\n\r\n\"Audio\" field value format (binary reference):\r\n{\r\n\t\"BinaryId\": string,\t\t\t// Binary ID of an uploaded audio (see upload binary API)\r\n\t\"DurationSeconds\": number\t// Audio duration in seconds\r\n}"
        },
        "CapturedTime": {
          "format": "date-time",
          "description": "Time when binary data were captured. Format - date-time (as date-time in RFC3339) including offset.",
          "type": "string"
        },
        "CapturedLocation": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        }
      }
    },
    "CustomerAPI.Models.Geofence.GeofenceListItemApiModel": {
      "type": "object",
      "properties": {
        "GeofenceId": {
          "format": "int64",
          "description": "GeofenceId of the GeofenceApiModel.",
          "type": "integer"
        },
        "CreatedUtc": {
          "format": "date-time",
          "description": "CreatedUtc of the GeofenceApiModel.",
          "type": "string"
        },
        "ModifiedUtc": {
          "format": "date-time",
          "description": "ModifiedUtc of the GeofenceApiModel.",
          "type": "string"
        },
        "GroupNames": {
          "description": "GroupPaths of the GeofenceApiModel.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Name": {
          "description": "Name of the GeofenceApiModelBase.",
          "type": "string"
        },
        "Type": {
          "description": "Type of the GeofenceApiModel.",
          "type": "string"
        },
        "Shape": {
          "format": "int32",
          "description": "Shape: 0 for circle, and 1 for polygon.",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "Address": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "Radius": {
          "format": "double",
          "description": "Radius of the GeofenceApiModel.",
          "type": "number"
        },
        "UseGeofenceAddress": {
          "description": "UseGeofenceAddress of the GeofenceApiModel.",
          "type": "boolean"
        }
      }
    },
    "CustomerAPI.Models.Geofence.GeofenceCreateApiModel": {
      "type": "object",
      "properties": {
        "GroupNames": {
          "description": "GroupPaths of the GeofenceCreateApiModel.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Polygon": {
          "description": "Polygon points. Should be filled when Shape equals 1.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Actsoft.Common.Geo.LatLon"
          }
        },
        "Name": {
          "description": "Name of the GeofenceApiModelBase.",
          "type": "string"
        },
        "Type": {
          "description": "Type of the GeofenceApiModel.",
          "type": "string"
        },
        "Shape": {
          "format": "int32",
          "description": "Shape: 0 for circle, and 1 for polygon.",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "Address": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "Radius": {
          "format": "double",
          "description": "Radius of the GeofenceApiModel.",
          "type": "number"
        },
        "UseGeofenceAddress": {
          "description": "UseGeofenceAddress of the GeofenceApiModel.",
          "type": "boolean"
        }
      }
    },
    "Actsoft.Common.Geo.LatLon": {
      "type": "object",
      "properties": {
        "Latitude": {
          "format": "double",
          "type": "number"
        },
        "Longitude": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "CustomerAPI.Models.Geofence.GeofenceApiModel": {
      "type": "object",
      "properties": {
        "GeofenceId": {
          "format": "int64",
          "description": "GeofenceId of the GeofenceApiModel.",
          "type": "integer"
        },
        "CreatedUtc": {
          "format": "date-time",
          "description": "CreatedUtc of the GeofenceApiModel.",
          "type": "string"
        },
        "ModifiedUtc": {
          "format": "date-time",
          "description": "ModifiedUtc of the GeofenceApiModel.",
          "type": "string"
        },
        "GroupNames": {
          "description": "GroupPaths of the GeofenceApiModel.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Polygon": {
          "description": "Polygon points. Should be filled when Shape equals 1.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Actsoft.Common.Geo.LatLon"
          }
        },
        "Name": {
          "description": "Name of the GeofenceApiModelBase.",
          "type": "string"
        },
        "Type": {
          "description": "Type of the GeofenceApiModel.",
          "type": "string"
        },
        "Shape": {
          "format": "int32",
          "description": "Shape: 0 for circle, and 1 for polygon.",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "Address": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "Radius": {
          "format": "double",
          "description": "Radius of the GeofenceApiModel.",
          "type": "number"
        },
        "UseGeofenceAddress": {
          "description": "UseGeofenceAddress of the GeofenceApiModel.",
          "type": "boolean"
        }
      }
    },
    "CustomerAPI.Models.Geofence.GeofenceUpdateApiModel": {
      "type": "object",
      "properties": {
        "GroupNames": {
          "description": "GroupPaths of the GeofenceUpdateApiModel.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Polygon": {
          "description": "Polygon points. Should be filled when Shape equals 1.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Actsoft.Common.Geo.LatLon"
          }
        },
        "Name": {
          "description": "Name of the GeofenceApiModelBase.",
          "type": "string"
        },
        "Type": {
          "description": "Type of the GeofenceApiModel.",
          "type": "string"
        },
        "Shape": {
          "format": "int32",
          "description": "Shape: 0 for circle, and 1 for polygon.",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "Address": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "Radius": {
          "format": "double",
          "description": "Radius of the GeofenceApiModel.",
          "type": "number"
        },
        "UseGeofenceAddress": {
          "description": "UseGeofenceAddress of the GeofenceApiModel.",
          "type": "boolean"
        }
      }
    },
    "CustomerAPI.Models.Order.CreateOrderApiModel": {
      "required": [
        "ExternalClientId",
        "ServiceType"
      ],
      "type": "object",
      "properties": {
        "CreatedDateTime": {
          "format": "date-time",
          "description": "Point in time this CreateUpdateOrderApiModel was created.",
          "type": "string"
        },
        "ExternalClientId": {
          "description": "External Use Id for the Client - API Extension Property.",
          "type": "string"
        },
        "ServiceType": {
          "description": "Service type associated with this CreateUpdateOrderApiModel.",
          "type": "string"
        },
        "ExternalOrderId": {
          "description": "External Use OrderId for the Client - API Extension Property.",
          "type": "string"
        },
        "Client": {
          "$ref": "#/definitions/CustomerAPI.Models.Order.OrderClientApiModel"
        },
        "DueDate": {
          "format": "date-time",
          "description": "Point in time this BaseUpdateOrderApiModel is due for completion (obsolete in v1.3).",
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "description": "Point in time this BaseUpdateOrderApiModel should start (introduced in v1.3).",
          "type": "string"
        },
        "EndTime": {
          "format": "date-time",
          "description": "Point in time this BaseUpdateOrderApiModel should end (introduced in v1.3).",
          "type": "string"
        },
        "OrderFormFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Forms.UpdateFormFieldApiModel"
          }
        },
        "Status": {
          "$ref": "#/definitions/CustomerAPI.Models.Order.NewOrderStatusApiModel"
        },
        "CustomFieldsModuleVersion": {
          "format": "int32",
          "description": "Custom fields module version.",
          "type": "integer"
        },
        "CustomFieldsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Client.UpdateCustomFieldDataApiModel"
          }
        }
      }
    },
    "CustomerAPI.Models.Order.OrderClientApiModel": {
      "type": "object",
      "properties": {
        "Address": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "Contact": {
          "$ref": "#/definitions/CustomerAPI.Models.Client.ContactApiModel"
        }
      }
    },
    "CustomerAPI.Models.Forms.UpdateFormFieldApiModel": {
      "required": [
        "Caption"
      ],
      "type": "object",
      "properties": {
        "Caption": {
          "type": "string"
        },
        "Value": {
          "description": "Value of the UpdateFormFieldApiModel.\r\n\r\n\"NFC\" field value format:\r\n{\r\n\t\"Type\": number,\t\t// 0 - Text\r\n\t\"Payload\": object,\t// Should be text for Type = 0\r\n}\r\n\r\n\"Camera\" field value format (binary reference):\r\n{\r\n\t\"BinaryId\": string, // Binary ID of an uploaded image (see upload binary API)\r\n\t\"Note\": string\t\t// Note for the referenced image\r\n}\r\n\r\n\"Signature\" field value format (binary reference):\r\n{\r\n\t\"BinaryId\": string // Binary ID of an uploaded image (see upload binary API)\r\n}\r\n\r\n\"Audio\" field value format (binary reference):\r\n{\r\n\t\"BinaryId\": string,\t\t\t// Binary ID of an uploaded audio (see upload binary API)\r\n\t\"DurationSeconds\": number\t// Audio duration in seconds\r\n}"
        },
        "CapturedTime": {
          "format": "date-time",
          "description": "Point in time value was captured.",
          "type": "string"
        },
        "CapturedLocation": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel",
          "description": "Location where value was captured."
        }
      }
    },
    "CustomerAPI.Models.Order.NewOrderStatusApiModel": {
      "required": [
        "EmployeeNumber",
        "StatusLabel",
        "StatusStartDateTime"
      ],
      "type": "object",
      "properties": {
        "EmployeeNumber": {
          "description": "EmployeeNumber of the User that created this NewOrderStatusApiModel.",
          "type": "string"
        },
        "StatusLabel": {
          "description": "Label content for the StatusLabel associated with this NewOrderStatusApiModel.",
          "type": "string"
        },
        "StatusStartDateTime": {
          "format": "date-time",
          "description": "Point in time this NewOrderStatusApiModel Status was started.",
          "type": "string"
        },
        "StatusFormFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Forms.UpdateFormFieldApiModel"
          }
        }
      }
    },
    "CustomerAPI.Models.Order.OrderListItemApiModel": {
      "type": "object",
      "properties": {
        "OrderId": {
          "format": "int32",
          "description": "Id of the OrderBaseApiModel.",
          "type": "integer"
        },
        "ExternalOrderId": {
          "description": "External Use OrderId for the Client - API Extension Property.",
          "type": "string"
        },
        "DueDate": {
          "format": "date-time",
          "description": "Point in time this OrderBaseApiModel is due for completion (obsolete in v1.3).",
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "description": "Point in time this OrderBaseApiModel should start (introduced in v1.3).",
          "type": "string"
        },
        "EndTime": {
          "format": "date-time",
          "description": "Point in time this OrderBaseApiModel is due for completion (introduced in v1.3).",
          "type": "string"
        },
        "ServiceType": {
          "description": "ServiceType associated with this OrderBaseApiModel.",
          "type": "string"
        },
        "CreatedUTCDate": {
          "format": "date-time",
          "description": "Point in time this OrderBaseApiModel was created.",
          "type": "string"
        },
        "OrderNumber": {
          "description": "Order Number associated with this OrderBaseApiModel.",
          "type": "string"
        },
        "IsClosed": {
          "description": "Status showing if the OrderBaseApiModel is closed.",
          "type": "boolean"
        },
        "Status": {
          "$ref": "#/definitions/CustomerAPI.Models.Order.OrderStatusApiModel"
        },
        "ExternalClientId": {
          "description": "External Use Id for the Client - API Extension Property.",
          "type": "string"
        },
        "ClientId": {
          "format": "int64",
          "description": "internal Use Id for the Client - API Extension Property.",
          "type": "integer"
        },
        "Client": {
          "$ref": "#/definitions/CustomerAPI.Models.Client.BaseClientApiModel"
        },
        "ApiServiceId": {
          "description": "Id of the ApiService Associated with this OrderBaseApiModel.",
          "type": "string"
        },
        "CustomFieldsModuleVersion": {
          "format": "int64",
          "description": "Custom fields module version.",
          "type": "integer"
        },
        "CustomFieldsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Client.ReadCustomFieldDataApiModel"
          }
        },
        "Recurrence": {
          "type": "boolean"
        }
      }
    },
    "CustomerAPI.Models.Order.OrderStatusApiModel": {
      "type": "object",
      "properties": {
        "StatusIndex": {
          "format": "int32",
          "description": "Index of the OrderStatusApiModel.",
          "type": "integer"
        },
        "StatusType": {
          "format": "int32",
          "description": "Order status: 0 for new order, 1 for dispatched, 2 for in-progress, 3 for complete, and 4 for cancelled.",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "StatusLabel": {
          "description": "Label content of the OrderStatusApiModel.",
          "type": "string"
        },
        "StatusId": {
          "format": "int64",
          "description": "Id of the OrderStatusApiModel.",
          "type": "integer"
        },
        "StatusStartDateTime": {
          "format": "date-time",
          "description": "Point in time of Start of the OrderStatusApiModel.",
          "type": "string"
        },
        "User": {
          "$ref": "#/definitions/CustomerAPI.Models.UserReferenceApiModel"
        }
      }
    },
    "CustomerAPI.Models.Client.BaseClientApiModel": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the Client.",
          "type": "string"
        },
        "Address": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "Contact": {
          "$ref": "#/definitions/CustomerAPI.Models.Client.ContactApiModel"
        }
      }
    },
    "CustomerAPI.Models.Order.UpdateOrderApiModel": {
      "type": "object",
      "properties": {
        "ExternalOrderId": {
          "description": "External Use OrderId for the Client - API Extension Property.",
          "type": "string"
        },
        "IsClosed": {
          "description": "Status showing if the UpdateOrderApiModel closed.",
          "type": "boolean"
        },
        "Client": {
          "$ref": "#/definitions/CustomerAPI.Models.Order.OrderClientApiModel"
        },
        "DueDate": {
          "format": "date-time",
          "description": "Point in time this BaseUpdateOrderApiModel is due for completion (obsolete in v1.3).",
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "description": "Point in time this BaseUpdateOrderApiModel should start (introduced in v1.3).",
          "type": "string"
        },
        "EndTime": {
          "format": "date-time",
          "description": "Point in time this BaseUpdateOrderApiModel should end (introduced in v1.3).",
          "type": "string"
        },
        "OrderFormFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Forms.UpdateFormFieldApiModel"
          }
        },
        "Status": {
          "$ref": "#/definitions/CustomerAPI.Models.Order.NewOrderStatusApiModel"
        },
        "CustomFieldsModuleVersion": {
          "format": "int32",
          "description": "Custom fields module version.",
          "type": "integer"
        },
        "CustomFieldsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Client.UpdateCustomFieldDataApiModel"
          }
        }
      }
    },
    "CustomerAPI.Models.Order.OrderApiModel": {
      "type": "object",
      "properties": {
        "StatusHistory": {
          "description": "List of the OrderStatusListItems Associated with this OrderApiModel.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Order.OrderStatusHistoryListItemApiModel"
          },
          "readOnly": true
        },
        "OrderFormFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Forms.FormFieldDataApiModel"
          },
          "readOnly": true
        },
        "OrderId": {
          "format": "int32",
          "description": "Id of the OrderBaseApiModel.",
          "type": "integer"
        },
        "ExternalOrderId": {
          "description": "External Use OrderId for the Client - API Extension Property.",
          "type": "string"
        },
        "DueDate": {
          "format": "date-time",
          "description": "Point in time this OrderBaseApiModel is due for completion (obsolete in v1.3).",
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "description": "Point in time this OrderBaseApiModel should start (introduced in v1.3).",
          "type": "string"
        },
        "EndTime": {
          "format": "date-time",
          "description": "Point in time this OrderBaseApiModel is due for completion (introduced in v1.3).",
          "type": "string"
        },
        "ServiceType": {
          "description": "ServiceType associated with this OrderBaseApiModel.",
          "type": "string"
        },
        "CreatedUTCDate": {
          "format": "date-time",
          "description": "Point in time this OrderBaseApiModel was created.",
          "type": "string"
        },
        "OrderNumber": {
          "description": "Order Number associated with this OrderBaseApiModel.",
          "type": "string"
        },
        "IsClosed": {
          "description": "Status showing if the OrderBaseApiModel is closed.",
          "type": "boolean"
        },
        "Status": {
          "$ref": "#/definitions/CustomerAPI.Models.Order.OrderStatusApiModel"
        },
        "ExternalClientId": {
          "description": "External Use Id for the Client - API Extension Property.",
          "type": "string"
        },
        "ClientId": {
          "format": "int64",
          "description": "internal Use Id for the Client - API Extension Property.",
          "type": "integer"
        },
        "Client": {
          "$ref": "#/definitions/CustomerAPI.Models.Client.BaseClientApiModel"
        },
        "ApiServiceId": {
          "description": "Id of the ApiService Associated with this OrderBaseApiModel.",
          "type": "string"
        },
        "CustomFieldsModuleVersion": {
          "format": "int64",
          "description": "Custom fields module version.",
          "type": "integer"
        },
        "CustomFieldsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Client.ReadCustomFieldDataApiModel"
          }
        },
        "Recurrence": {
          "type": "boolean"
        }
      }
    },
    "CustomerAPI.Models.Order.OrderStatusHistoryListItemApiModel": {
      "type": "object",
      "properties": {
        "StatusStartDateTime": {
          "format": "date-time",
          "description": "Point in time this OrderStatusHistoryListItemApiModel Status was started.",
          "type": "string"
        },
        "StatusEndDateTime": {
          "format": "date-time",
          "description": "Point in time this OrderStatusHistoryListItemApiModel Status was ended.",
          "type": "string"
        },
        "StatusId": {
          "format": "int64",
          "description": "Id associated with this OrderStatusHistoryListItemApiModel.",
          "type": "integer"
        },
        "StatusIndex": {
          "format": "int32",
          "description": "Index associated with this OrderStatusHistoryListItemApiModel.",
          "type": "integer"
        },
        "StatusLabel": {
          "description": "Label content associated with this OrderStatusHistoryListItemApiModel.",
          "type": "string"
        },
        "StatusType": {
          "format": "int32",
          "description": "Order status: 0 for new order, 1 for dispatched, 2 for in-progress, 3 for complete, and 4 for cancelled.",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "ExternalOrderId": {
          "description": "External Use OrderId for the Client - API Extension Property.",
          "type": "string"
        },
        "OrderId": {
          "format": "int32",
          "description": "OrderId associated with this OrderStatusHistoryListItemApiModel.",
          "type": "integer"
        },
        "User": {
          "$ref": "#/definitions/CustomerAPI.Models.UserReferenceApiModel"
        },
        "StartAddress": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "EndAddress": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "ApiServiceId": {
          "description": "Id of the ApiService associated with this OrderStatusHistoryListItemApiModel.",
          "type": "string"
        },
        "FieldValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Forms.FormFieldDataApiModel"
          },
          "readOnly": true
        }
      }
    },
    "CustomerAPI.Models.Order.OrderHeaderApiModel": {
      "type": "object",
      "properties": {
        "OrderFormFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Forms.FormFieldDataApiModel"
          },
          "readOnly": true
        },
        "OrderId": {
          "format": "int32",
          "description": "Id of the OrderBaseApiModel.",
          "type": "integer"
        },
        "ExternalOrderId": {
          "description": "External Use OrderId for the Client - API Extension Property.",
          "type": "string"
        },
        "DueDate": {
          "format": "date-time",
          "description": "Point in time this OrderBaseApiModel is due for completion (obsolete in v1.3).",
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "description": "Point in time this OrderBaseApiModel should start (introduced in v1.3).",
          "type": "string"
        },
        "EndTime": {
          "format": "date-time",
          "description": "Point in time this OrderBaseApiModel is due for completion (introduced in v1.3).",
          "type": "string"
        },
        "ServiceType": {
          "description": "ServiceType associated with this OrderBaseApiModel.",
          "type": "string"
        },
        "CreatedUTCDate": {
          "format": "date-time",
          "description": "Point in time this OrderBaseApiModel was created.",
          "type": "string"
        },
        "OrderNumber": {
          "description": "Order Number associated with this OrderBaseApiModel.",
          "type": "string"
        },
        "IsClosed": {
          "description": "Status showing if the OrderBaseApiModel is closed.",
          "type": "boolean"
        },
        "Status": {
          "$ref": "#/definitions/CustomerAPI.Models.Order.OrderStatusApiModel"
        },
        "ExternalClientId": {
          "description": "External Use Id for the Client - API Extension Property.",
          "type": "string"
        },
        "ClientId": {
          "format": "int64",
          "description": "internal Use Id for the Client - API Extension Property.",
          "type": "integer"
        },
        "Client": {
          "$ref": "#/definitions/CustomerAPI.Models.Client.BaseClientApiModel"
        },
        "ApiServiceId": {
          "description": "Id of the ApiService Associated with this OrderBaseApiModel.",
          "type": "string"
        },
        "CustomFieldsModuleVersion": {
          "format": "int64",
          "description": "Custom fields module version.",
          "type": "integer"
        },
        "CustomFieldsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Client.ReadCustomFieldDataApiModel"
          }
        },
        "Recurrence": {
          "type": "boolean"
        }
      }
    },
    "CustomerAPI.Models.Timekeeping.TimekeepingApiModel": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "description": "Id of the Timekeeping entry (legacy comment: RootSubmittedStatusId).",
          "type": "integer"
        },
        "User": {
          "$ref": "#/definitions/CustomerAPI.Models.UserReferenceApiModel"
        },
        "ClockInTime": {
          "format": "date-time",
          "description": "Point in time when the User clocked into the system.",
          "type": "string"
        },
        "ClockInLocation": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "ClockOutTime": {
          "format": "date-time",
          "description": "Point in time when the User clocked out of the system.",
          "type": "string"
        },
        "ClockOutLocation": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "TotalHours": {
          "format": "double",
          "description": "Total number of hours for this Timekeeping entry.",
          "type": "number"
        },
        "TotalBreakHours": {
          "format": "double",
          "description": "Total number of break (non-working) hours for this Timekeeping entry.",
          "type": "number"
        },
        "NetHours": {
          "format": "double",
          "description": "Total number of hours chargeable for this Timekeeping entry.",
          "type": "number"
        },
        "Approved": {
          "description": "Status of Supervisor approval for this Timekeeping entry.",
          "type": "boolean"
        },
        "Breaks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Timekeeping.TimekeepingBreakModel"
          }
        },
        "ClockInFormData": {
          "$ref": "#/definitions/CustomerAPI.Models.Timekeeping.TimekeepingStatusFormDataApiModel"
        },
        "ClockOutFormData": {
          "$ref": "#/definitions/CustomerAPI.Models.Timekeeping.TimekeepingStatusFormDataApiModel"
        },
        "ModuleVersion": {
          "$ref": "#/definitions/System.Version"
        },
        "CompanyModuleId": {
          "format": "int64",
          "description": "Id of the Company Module used to submit this Timekeeping entry.",
          "type": "integer"
        }
      }
    },
    "CustomerAPI.Models.Timekeeping.TimekeepingBreakModel": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "description": "SubmittedStatusId.",
          "type": "integer"
        },
        "StartTime": {
          "format": "date-time",
          "description": "Start time.",
          "type": "string"
        },
        "StartLocation": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "EndTime": {
          "format": "date-time",
          "description": "End time.",
          "type": "string"
        },
        "EndLocation": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "DurationHours": {
          "format": "double",
          "description": "Duration in hours. It can be null if EndTime is null.",
          "type": "number"
        },
        "StatusType": {
          "format": "int32",
          "description": "Status type: 1 for break, and 2 for lunch.",
          "enum": [
            1,
            2,
            3
          ],
          "type": "integer"
        },
        "StartLabel": {
          "description": "Start label.",
          "type": "string"
        },
        "EndLabel": {
          "description": "End label.",
          "type": "string"
        },
        "Caption": {
          "description": "Caption.",
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.Timekeeping.TimekeepingStatusFormDataApiModel": {
      "type": "object",
      "properties": {
        "CompanyModuleId": {
          "format": "int64",
          "type": "integer"
        },
        "ModuleVersion": {
          "$ref": "#/definitions/System.Version"
        },
        "FieldValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Forms.FormFieldDataApiModel"
          },
          "readOnly": true
        }
      }
    },
    "System.Version": {
      "type": "object",
      "properties": {
        "_Major": {
          "format": "int32",
          "type": "integer"
        },
        "_Minor": {
          "format": "int32",
          "type": "integer"
        },
        "_Build": {
          "format": "int32",
          "type": "integer"
        },
        "_Revision": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CustomerAPI.Models.Tracking.TripApiModel": {
      "type": "object",
      "properties": {
        "User": {
          "$ref": "#/definitions/CustomerAPI.Models.UserReferenceApiModel"
        },
        "Vehicle": {
          "$ref": "#/definitions/CustomerAPI.Models.ReadVehicleApiModel"
        },
        "StartTime": {
          "format": "date-time",
          "description": "Point in time this TripApiModel Status was started.",
          "type": "string"
        },
        "EndTime": {
          "format": "date-time",
          "description": "Point in time this TripApiModel Status was ended.",
          "type": "string"
        },
        "StartLocation": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "EndLocation": {
          "$ref": "#/definitions/CustomerAPI.Models.LocationApiModel"
        },
        "StartPrimaryGeofence": {
          "$ref": "#/definitions/CustomerAPI.Models.Geofence.GeofenceInfoApiModel"
        },
        "EndPrimaryGeofence": {
          "$ref": "#/definitions/CustomerAPI.Models.Geofence.GeofenceInfoApiModel"
        },
        "TotalStopTime": {
          "format": "double",
          "description": "Amount of stop time in hours associate with this TripApiModel.",
          "type": "number"
        },
        "TotalIdleTime": {
          "format": "double",
          "description": "Amount of idle time in hours associate with this TripApiModel.",
          "type": "number"
        },
        "TotalDuration": {
          "format": "double",
          "description": "Full amount of time in hours associate with this TripApiModel.",
          "type": "number"
        },
        "Distance": {
          "format": "double",
          "description": "Distance travelled in localized units associated with this TripApiModel.",
          "type": "number"
        }
      }
    },
    "CustomerAPI.Models.Tracking.GpsDataSegmentApiModel": {
      "type": "object",
      "properties": {
        "Records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAPI.Models.Tracking.GpsDataRecordApiModel"
          }
        },
        "ContinuationToken": {
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.Tracking.GpsDataRecordApiModel": {
      "type": "object",
      "properties": {
        "User": {
          "$ref": "#/definitions/CustomerAPI.Models.UserReferenceApiModel"
        },
        "Vehicle": {
          "$ref": "#/definitions/CustomerAPI.Models.ReadVehicleApiModel"
        },
        "TimeTag": {
          "format": "date-time",
          "description": "TimeTag associated with this GpsDataRecordApiModel.",
          "type": "string"
        },
        "Location": {
          "$ref": "#/definitions/System.Nullable_1_Actsoft.Common.Geo.LatLon_"
        },
        "Geofence": {
          "$ref": "#/definitions/CustomerAPI.Models.Geofence.GeofenceInfoApiModel"
        },
        "Speed": {
          "format": "double",
          "description": "Speed of movement associated with this GpsDataRecordApiModel.",
          "type": "number"
        },
        "Heading": {
          "format": "double",
          "description": "Compass direction in degrees associated with this GpsDataRecordApiModel.",
          "type": "number"
        },
        "Status": {
          "format": "int32",
          "description": "ApiMovementStatus associated with the OrderBaseApiModel - (Stopped: 1, Idle: 2, Moving: 3, NotTracking: 4) : OrderStatusApiModel.",
          "enum": [
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "StatusTime": {
          "description": "Point in time this GpsDataRecordApiModel Status was set.",
          "type": "string"
        },
        "Distance": {
          "format": "double",
          "description": "Distance traveled in localized units associated with this TripApiModel.",
          "type": "number"
        },
        "IgnitionOn": {
          "description": "Status of vehicle ignition associated with this GpsDataRecordApiModel.",
          "type": "boolean"
        },
        "LocationProvider": {
          "format": "int32",
          "description": "Api Location Provider associated with this GpsDataRecordApiModel - (GPS: 1, Network: 2).",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        }
      }
    },
    "CustomerAPI.Models.WebHookGpsPositionApiModel": {
      "type": "object",
      "properties": {
        "Id": {
          "description": "Url containing the address of the WebHookSubscriptionParamsApiModel.",
          "type": "string"
        },
        "DeviceId": {
          "description": "Device Id associated with the subscription.",
          "type": "string"
        },
        "DeviceType": {
          "format": "int32",
          "description": "Device type: Handset(0), CalAmp(1), Geotab (2), Xirgo (3).",
          "type": "integer"
        },
        "Timestamp": {
          "format": "date-time",
          "description": "ISO format with Local and Offset.",
          "type": "string"
        },
        "CompanyId": {
          "format": "int32",
          "description": "Company Id.",
          "type": "integer"
        },
        "UserId": {
          "format": "int32",
          "description": "User Id.",
          "type": "integer"
        },
        "VehicleId": {
          "format": "int64",
          "description": "Vehicle Id.",
          "type": "integer"
        },
        "UserLinkedToVehicle": {
          "description": "Whether a user linked to the vehicle.",
          "type": "boolean"
        },
        "LocationProvider": {
          "description": "Location provider name.",
          "type": "string"
        },
        "Lat": {
          "format": "double",
          "description": "Latitude.",
          "type": "number"
        },
        "Lon": {
          "format": "double",
          "description": "Longitude.",
          "type": "number"
        },
        "AccuracyFt": {
          "format": "double",
          "description": "Position accuracy (Feet).",
          "type": "number"
        },
        "AltitudeFt": {
          "format": "double",
          "description": "Altitude (Feet).",
          "type": "number"
        },
        "Heading": {
          "format": "int32",
          "description": "Compass direction in degrees.",
          "type": "integer"
        },
        "SpeedMph": {
          "format": "double",
          "description": "Speed of movement (Mph).",
          "type": "number"
        },
        "BatteryStatus": {
          "format": "int32",
          "description": "Battery status: Not charging(0), Charging(1).",
          "type": "integer"
        },
        "BatteryLevel": {
          "format": "int32",
          "description": "Battery level in percent.",
          "type": "integer"
        },
        "ActivityState": {
          "format": "int32",
          "description": "Activity state: Staying(1), Modving(2).",
          "type": "integer"
        },
        "IsNetworkConnected": {
          "description": "Is the device connected to the network at the moment.",
          "type": "boolean"
        },
        "Rssi": {
          "format": "int32",
          "description": "Received Signal Strength Indicator.",
          "type": "integer"
        },
        "DOdoMl": {
          "format": "double",
          "description": "Device Odometer (Miles).",
          "type": "number"
        },
        "VOdoMl": {
          "format": "double",
          "description": "Vehicle Odometer (Miles).",
          "type": "number"
        }
      }
    },
    "CustomerAPI.Models.User.ReadUserApiModel": {
      "type": "object",
      "properties": {
        "UserName": {
          "description": "UserName of the User.",
          "type": "string"
        },
        "UserId": {
          "format": "int32",
          "description": "Id value of the User.",
          "type": "integer"
        },
        "GroupName": {
          "description": "Name of Group of the User.",
          "type": "string"
        },
        "FirstName": {
          "description": "First name of the User.",
          "type": "string"
        },
        "LastName": {
          "description": "Last name of the User.",
          "type": "string"
        },
        "EmployeeNumber": {
          "description": "Employee number of the User.",
          "type": "string"
        },
        "Email": {
          "description": "Email address of the User.",
          "type": "string"
        },
        "Phone": {
          "description": "Phone number of the User.",
          "type": "string"
        },
        "RoleId": {
          "format": "int64",
          "description": "RoleId of the User - (Admin: 1, User: 3, Power User: 5).",
          "type": "integer"
        },
        "IsActive": {
          "description": "Active status of the User.",
          "type": "boolean"
        },
        "EPTTEnabled": {
          "description": "Status of Enhanced Push-to-Talk feature for User: boolean.",
          "type": "boolean"
        },
        "EPTTNumber": {
          "description": "Phone number for Enhanced Push-to-Talk feature for User: string.",
          "type": "string"
        },
        "EPTTWebMDN": {
          "description": "Phone number used to Authenticate the User to the Kodiak EPTT system - Provided by Kodiak.",
          "type": "string"
        },
        "EPTTToken": {
          "description": "API Token used to Authenticate the User to Kodiak EPTT system - Provided by Kodiak.",
          "type": "string"
        },
        "GPSEnabled": {
          "description": "Status of GPS Feature for the User.",
          "type": "boolean"
        },
        "MobileOnly": {
          "description": "Status of desktop web application access for CAB  - (No WebApp Access: True, Full App Access: False).",
          "type": "boolean"
        },
        "LicenseType": {
          "format": "int32",
          "description": "Type of License assigned to the user: - 0 for Undefined, 1 for Regular, 2 for WebOnly, and 3 for Employee.",
          "enum": [
            0,
            1,
            2,
            3
          ],
          "type": "integer"
        }
      }
    },
    "CustomerAPI.Models.User.UpdateUserApiModel": {
      "type": "object",
      "properties": {
        "UserName": {
          "description": "UserName of the User.",
          "type": "string"
        },
        "Password": {
          "format": "password",
          "description": "Password of the User.",
          "type": "string"
        },
        "GroupName": {
          "description": "Name of Group of the User.",
          "type": "string"
        },
        "FirstName": {
          "description": "First name of the User.",
          "type": "string"
        },
        "LastName": {
          "description": "Last name of the User.",
          "type": "string"
        },
        "EmployeeNumber": {
          "description": "Employee number of the User.",
          "type": "string"
        },
        "Email": {
          "description": "Email address of the User.",
          "type": "string"
        },
        "Phone": {
          "description": "Phone number of the User.",
          "type": "string"
        },
        "RoleId": {
          "format": "int64",
          "description": "RoleId of the User - (Admin: 1, User: 3, Power User: 5).",
          "type": "integer"
        },
        "IsActive": {
          "description": "Active status of the User.",
          "type": "boolean"
        },
        "EPTTEnabled": {
          "description": "Status of Enhanced Push-to-Talk feature for User: boolean.",
          "type": "boolean"
        },
        "EPTTNumber": {
          "description": "Phone number for Enhanced Push-to-Talk feature for User: string.",
          "type": "string"
        },
        "EPTTWebMDN": {
          "description": "Phone number used to Authenticate the User to the Kodiak EPTT system - Provided by Kodiak.",
          "type": "string"
        },
        "EPTTToken": {
          "description": "API Token used to Authenticate the User to Kodiak EPTT system - Provided by Kodiak.",
          "type": "string"
        },
        "GPSEnabled": {
          "description": "Status of GPS Feature for the User.",
          "type": "boolean"
        },
        "MobileOnly": {
          "description": "Status of desktop web application access for CAB  - (No WebApp Access: True, Full App Access: False).",
          "type": "boolean"
        },
        "LicenseType": {
          "format": "int32",
          "description": "Type of License assigned to the user: - 0 for Undefined, 1 for Regular, 2 for WebOnly, and 3 for Employee.",
          "enum": [
            0,
            1,
            2,
            3
          ],
          "type": "integer"
        }
      }
    },
    "CustomerAPI.Models.User.ReadUserListItemApiModel": {
      "type": "object",
      "properties": {
        "UserId": {
          "format": "int32",
          "description": "Id value of the User.",
          "type": "integer"
        },
        "FirstName": {
          "description": "First name of the User.",
          "type": "string"
        },
        "LastName": {
          "description": "Last name of the User.",
          "type": "string"
        },
        "EmployeeNumber": {
          "description": "Employee number of the User.",
          "type": "string"
        },
        "Email": {
          "description": "Email address of the User.",
          "type": "string"
        },
        "Phone": {
          "description": "Phone number of the User.",
          "type": "string"
        },
        "RoleId": {
          "format": "int64",
          "description": "RoleId of the User - (Admin: 1, User: 3, Power User: 5).",
          "type": "integer"
        },
        "IsActive": {
          "description": "Active status of the User.",
          "type": "boolean"
        },
        "EPTTEnabled": {
          "description": "Status of Enhanced Push-to-Talk feature for User: boolean.",
          "type": "boolean"
        },
        "EPTTNumber": {
          "description": "Phone number for Enhanced Push-to-Talk feature for User: string.",
          "type": "string"
        },
        "EPTTWebMDN": {
          "description": "Phone number used to Authenticate the User to the Kodiak EPTT system - Provided by Kodiak.",
          "type": "string"
        },
        "EPTTToken": {
          "description": "API Token used to Authenticate the User to Kodiak EPTT system - Provided by Kodiak.",
          "type": "string"
        },
        "GPSEnabled": {
          "description": "Status of GPS Feature for the User.",
          "type": "boolean"
        },
        "MobileOnly": {
          "description": "Status of desktop web application access for CAB  - (No WebApp Access: True, Full App Access: False).",
          "type": "boolean"
        },
        "LicenseType": {
          "format": "int32",
          "description": "Type of License assigned to the user: - 0 for Undefined, 1 for Regular, 2 for WebOnly, and 3 for Employee.",
          "enum": [
            0,
            1,
            2,
            3
          ],
          "type": "integer"
        }
      }
    },
    "CustomerAPI.Models.Vehicles.VehicleCreateApi": {
      "description": "Vehicle Data Model.",
      "type": "object",
      "properties": {
        "Number": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Tag": {
          "type": "string"
        },
        "UserEmployeeNumber": {
          "type": "string"
        },
        "GroupName": {
          "type": "string"
        },
        "TimeZone": {
          "type": "string"
        },
        "Make": {
          "type": "string"
        },
        "Year": {
          "format": "int32",
          "type": "integer"
        },
        "Model": {
          "type": "string"
        },
        "Color": {
          "type": "string"
        },
        "VIN": {
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "DeviceType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "type": "integer"
        },
        "DeviceSerialNumber": {
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.Vehicles.VehicleReadApi": {
      "description": "Vehicle Data Model.",
      "type": "object",
      "properties": {
        "InternalId": {
          "format": "int64",
          "type": "integer"
        },
        "Number": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Tag": {
          "type": "string"
        },
        "UserEmployeeNumber": {
          "type": "string"
        },
        "GroupName": {
          "type": "string"
        },
        "TimeZone": {
          "type": "string"
        },
        "Make": {
          "type": "string"
        },
        "Year": {
          "format": "int32",
          "type": "integer"
        },
        "Model": {
          "type": "string"
        },
        "Color": {
          "type": "string"
        },
        "VIN": {
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "DeviceType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "type": "integer"
        },
        "DeviceSerialNumber": {
          "type": "string"
        }
      }
    },
    "CustomerAPI.Models.Vehicles.VehicleUpdateApi": {
      "description": "Vehicle Data Model.",
      "type": "object",
      "properties": {
        "Number": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Tag": {
          "type": "string"
        },
        "UserEmployeeNumber": {
          "type": "string"
        },
        "GroupName": {
          "type": "string"
        },
        "TimeZone": {
          "type": "string"
        },
        "Make": {
          "type": "string"
        },
        "Year": {
          "format": "int32",
          "type": "integer"
        },
        "Model": {
          "type": "string"
        },
        "Color": {
          "type": "string"
        },
        "VIN": {
          "type": "string"
        },
        "IsActive": {
          "type": "boolean"
        },
        "DeviceType": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "type": "integer"
        },
        "DeviceSerialNumber": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Geofences API",
      "description": " Use the Geofences API to create, update, delete a geofence, or get a list of geofences. "
    },
    {
      "name": "Orders API",
      "description": " Use the Orders API to create new orders, submit forms for orders, and change order statuses. Additionally, you can retrieve any orders data from the application. "
    },
    {
      "name": "Custom lists API",
      "description": "Use this API to read Custom Lists definitions. And to read, create, update and delete custom list data."
    },
    {
      "name": "Clients API",
      "description": " Use the Client API to create, read, update, delete clients, and return a list of client information records. "
    },
    {
      "name": "Forms API",
      "description": " Use the Forms API to retrieve single or a list of submitted forms, and make continuous system form data requests (polling trigger) until a desired form event occurs. "
    },
    {
      "name": "Binaries API",
      "description": "\n            Use the Binaries API to upload binaries. Later the binaries can be referenced by their ids.\n            "
    },
    {
      "name": "Vehicles API",
      "description": "\n            Use the Vehicles API to get, reate, update, patch update, activate, deactivate or delete a vehicle, and get a list of vehicles.\n            "
    },
    {
      "name": "Versions API"
    },
    {
      "name": "Timekeeping API",
      "description": "\n                Use the Timekeeping API to return a list of timekeeping records for a specific period, or make continuous system timekeeping data requests (polling trigger) until a\n                desired timekeeping event occurs.\n            "
    },
    {
      "name": "Users API",
      "description": " Use the Users API to create, update, delete, activate, deactivate an user, or get a list of users. "
    },
    {
      "name": "Tracking API",
      "description": "\n                Use the tracking API to return GPS data entries in specified date range. It also returns a continuation token to get next part of data and a link to get next data\n                portion. Positions for deleted users/vehicles are not returned. If user/vehicle existed at the moment when data pulling started and were removed later, the deleted\n                user/vehicle will still be returned for the same data pulling session.\n            "
    },
    {
      "name": "Events API",
      "description": "\n            Use the Events API to submit event data, create, update, or delete a custom event definition, and get a list of custom event definitions.\n            "
    }
  ],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://actsoft.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.actsoft.com/privacy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Productivity"
    }
  ],
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "name": "subscription-key",
      "in": "query"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    },
    {
      "apiKeyQuery": []
    }
  ]
}