{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Cloudmersive NLP",
    "description": "The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.",
    "contact": {
      "name": "Cloumdersive Support",
      "url": "https://account.cloudmersive.com/contact-support",
      "email": "support@cloudmersive.com"
    }
  },
  "host": "api.cloudmersive.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/nlp-v2/analytics/sentiment": {
      "post": {
        "tags": [
          "Analytics"
        ],
        "summary": "Perform Sentiment Analysis and Classification on Text",
        "description": "Analyze input text using advanced Sentiment Analysis to determine if the input is positive, negative, or neutral.  Supports English language input.  Consumes 1-2 API calls per sentence.",
        "operationId": "Analytics_Sentiment",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Input sentiment analysis request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SentimentAnalysisRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SentimentAnalysisResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/analytics/profanity": {
      "post": {
        "tags": [
          "Analytics"
        ],
        "summary": "Perform Profanity and Obscene Language Analysis and Detection on Text",
        "description": "Analyze input text using advanced Profanity and Obscene Language Analysis to determine if the input contains profane language.  Supports English language input.  Consumes 1-2 API calls per sentence.",
        "operationId": "Analytics_Profanity",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Input profanity analysis request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProfanityAnalysisRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProfanityAnalysisResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/analytics/subjectivity": {
      "post": {
        "tags": [
          "Analytics"
        ],
        "summary": "Perform Subjectivity and Objectivity Analysis on Text",
        "description": "Analyze input text using advanced Subjectivity and Objectivity Language Analysis to determine if the input text is objective or subjective, and how much.  Supports English language input.  Consumes 1-2 API calls per sentence.",
        "operationId": "Analytics_Subjectivity",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Input subjectivity analysis request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubjectivityAnalysisRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubjectivityAnalysisResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/extract-entities": {
      "post": {
        "tags": [
          "ExtractEntities"
        ],
        "summary": "Extract entities from string",
        "description": "Extract the named entitites from an input string.",
        "operationId": "ExtractEntities_Post",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "Input string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtractEntitiesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtractEntitiesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/language/detect": {
      "post": {
        "tags": [
          "LanguageDetection"
        ],
        "summary": "Detect language of text",
        "description": "Automatically determine which language a text string is written in.  Supports Danish (DAN), German (DEU), English (ENG), French (FRA), Italian (ITA), Japanese (JPN), Korean (KOR), Dutch (NLD), Norwegian (NOR), Portuguese (POR), Russian (RUS), Spanish (SPA), Swedish (SWE), Chinese (ZHO).",
        "operationId": "LanguageDetection_getLanguage",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LanguageDetectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LanguageDetectionResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/translate/language/deu/to/eng": {
      "post": {
        "tags": [
          "LanguageTranslation"
        ],
        "summary": "Translate German to English text with Deep Learning AI",
        "description": "Automatically translates input text in German to output text in English using advanced Deep Learning and Neural NLP.  Consumes 1-2 API calls per input sentence.",
        "operationId": "LanguageTranslation_TranslateDeuToEng",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Input translation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LanguageTranslationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LanguageTranslationResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/translate/language/eng/to/deu": {
      "post": {
        "tags": [
          "LanguageTranslation"
        ],
        "summary": "Translate English to German text with Deep Learning AI",
        "description": "Automatically translates input text in English to output text in German using advanced Deep Learning and Neural NLP.  Consumes 1-2 API calls per input sentence.",
        "operationId": "LanguageTranslation_TranslateEngToDeu",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Input translation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LanguageTranslationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LanguageTranslationResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/translate/language/rus/to/eng": {
      "post": {
        "tags": [
          "LanguageTranslation"
        ],
        "summary": "Translate Russian to English text with Deep Learning AI",
        "description": "Automatically translates input text in Russian to output text in English using advanced Deep Learning and Neural NLP.  Consumes 1-2 API calls per input sentence.",
        "operationId": "LanguageTranslation_TranslateRusToEng",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Input translation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LanguageTranslationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LanguageTranslationResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/translate/language/eng/to/rus": {
      "post": {
        "tags": [
          "LanguageTranslation"
        ],
        "summary": "Translate English to Russian text with Deep Learning AI",
        "description": "Automatically translates input text in English to output text in Russian using advanced Deep Learning and Neural NLP.  Consumes 1-2 API calls per input sentence.",
        "operationId": "LanguageTranslation_TranslateEngToRus",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Input translation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LanguageTranslationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LanguageTranslationResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/parse/tree": {
      "post": {
        "tags": [
          "Parse"
        ],
        "summary": "Parse string to syntax tree",
        "description": "Parses the input string into a Penn Treebank syntax tree",
        "operationId": "Parse_ParseString",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Input string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ParseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ParseResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/pos/tag/sentence": {
      "post": {
        "tags": [
          "PosTagger"
        ],
        "summary": "Part-of-speech tag a string",
        "description": "Part-of-speech (POS) tag a string and return result as JSON",
        "operationId": "PosTagger_TagSentence",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PosRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PosResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/pos/tag/verbs": {
      "post": {
        "tags": [
          "PosTagger"
        ],
        "summary": "Part-of-speech tag a string, filter to verbs",
        "description": "Part-of-speech (POS) tag a string, find the verbs, and return result as JSON",
        "operationId": "PosTagger_TagVerbs",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PosRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PosResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/pos/tag/nouns": {
      "post": {
        "tags": [
          "PosTagger"
        ],
        "summary": "Part-of-speech tag a string, filter to nouns",
        "description": "Part-of-speech (POS) tag a string, find the nouns, and return result as JSON",
        "operationId": "PosTagger_TagNouns",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PosRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PosResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/pos/tag/adjectives": {
      "post": {
        "tags": [
          "PosTagger"
        ],
        "summary": "Part-of-speech tag a string, filter to adjectives",
        "description": "Part-of-speech (POS) tag a string, find the adjectives, and return result as JSON",
        "operationId": "PosTagger_TagAdjectives",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PosRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PosResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/pos/tag/adverbs": {
      "post": {
        "tags": [
          "PosTagger"
        ],
        "summary": "Part-of-speech tag a string, filter to adverbs",
        "description": "Part-of-speech (POS) tag a string, find the adverbs, and return result as JSON",
        "operationId": "PosTagger_TagAdverbs",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PosRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PosResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/pos/tag/pronouns": {
      "post": {
        "tags": [
          "PosTagger"
        ],
        "summary": "Part-of-speech tag a string, filter to pronouns",
        "description": "Part-of-speech (POS) tag a string, find the pronouns, and return result as JSON",
        "operationId": "PosTagger_TagPronouns",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Input string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PosRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PosResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/rephrase/rephrase/eng/by-sentence": {
      "post": {
        "tags": [
          "Rephrase"
        ],
        "summary": "Rephrase, paraphrase English text sentence-by-sentence using Deep Learning AI",
        "description": "Automatically rephrases or paraphrases input text in English sentence by sentence using advanced Deep Learning and Neural NLP.  Creates multiple reprhasing candidates per input sentence, from 1 to 10 possible rephrasings of the original sentence.  Seeks to preserve original semantic meaning in rephrased output candidates.  Consumes 1-2 API calls per output rephrasing option generated, per sentence.",
        "operationId": "Rephrase_EnglishRephrase_SentenceBySentence",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Input rephrase request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RephraseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RephraseResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/segmentation/sentences": {
      "post": {
        "tags": [
          "Segmentation"
        ],
        "summary": "Extract sentences from string",
        "description": "Segment an input string into separate sentences, output result as a string.",
        "operationId": "Segmentation_GetSentences",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "Input string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SentenceSegmentationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SentenceSegmentationResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/segmentation/words": {
      "post": {
        "tags": [
          "Segmentation"
        ],
        "summary": "Get words in input string",
        "description": "Get the component words in an input string",
        "operationId": "Segmentation_GetWords",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "description": "String to process",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetWordsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetWordsResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/spellcheck/check/word": {
      "post": {
        "tags": [
          "Spellcheck"
        ],
        "summary": "Find spelling corrections",
        "description": "Find spelling correction suggestions and return result as JSON",
        "operationId": "Spellcheck_CorrectJson",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "Input string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckWordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CheckWordResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/nlp-v2/spellcheck/check/sentence": {
      "post": {
        "tags": [
          "Spellcheck"
        ],
        "summary": "Check if sentence is spelled correctly",
        "description": "Checks whether the sentence is spelled correctly and returns the result as JSON",
        "operationId": "Spellcheck_CheckSentence",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "Input sentence",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckSentenceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CheckSentenceResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.cloudmersive.com/nlp-api"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.cloudmersive.com/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "AI;Data"
    }
  ],
  "definitions": {
    "SentimentAnalysisRequest": {
      "description": "Input to a sentiment analysis operation",
      "type": "object",
      "properties": {
        "TextToAnalyze": {
          "description": "Text to analyze",
          "type": "string"
        }
      }
    },
    "SentimentAnalysisResponse": {
      "description": "Output of a sentiment analysis operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the sentiment analysis operation was successful, false otherwise",
          "type": "boolean"
        },
        "SentimentClassificationResult": {
          "description": "Classification of input text into a sentiment classification; possible values are \"Positive\", \"Negative\" or \"Neutral\"",
          "type": "string"
        },
        "SentimentScoreResult": {
          "format": "double",
          "description": "Sentiment classification score between -1.0 and +1.0 where scores less than 0 are negative sentiment, scores greater than 0 are positive sentiment and scores close to 0 are neutral.  The greater the value deviates from 0.0 the stronger the sentiment, with +1.0 and -1.0 being maximum positive and negative sentiment, respectively.",
          "type": "number"
        },
        "SentenceCount": {
          "format": "int32",
          "description": "Number of sentences in input text",
          "type": "integer"
        }
      }
    },
    "ProfanityAnalysisRequest": {
      "description": "Input to a profanity analysis operation",
      "type": "object",
      "properties": {
        "TextToAnalyze": {
          "description": "Text to analyze",
          "type": "string"
        }
      }
    },
    "ProfanityAnalysisResponse": {
      "description": "Output of a profanity analysis operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the profanity detection operation was successful, false otherwise",
          "type": "boolean"
        },
        "ProfanityScoreResult": {
          "format": "double",
          "description": "Profanity classification score between 0.0 and 1.0 where scores closer to zero have a low probability of being profane or contain obscene language, while scores close to 1.0 have a high probability of being profane or containing obscene language.  Values above 0.8 have a very high probability of being profane.",
          "type": "number"
        },
        "SentenceCount": {
          "format": "int32",
          "description": "Number of sentences in input text",
          "type": "integer"
        }
      }
    },
    "SubjectivityAnalysisRequest": {
      "description": "Input to a subjectivity analysis operation",
      "type": "object",
      "properties": {
        "TextToAnalyze": {
          "description": "Text to analyze",
          "type": "string"
        }
      }
    },
    "SubjectivityAnalysisResponse": {
      "description": "Output of a subjectivity analysis operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the subjectivity analysis operation was successful, false otherwise",
          "type": "boolean"
        },
        "SubjectivityScoreResult": {
          "format": "double",
          "description": "Subjectivity vs. objectivity classification score between 0.0 and 1.0 where scores closer to zero have a high probability of objectivity, while scores close to 1.0 have a high probability of subjectivity.",
          "type": "number"
        },
        "SentenceCount": {
          "format": "int32",
          "description": "Number of sentences in input text",
          "type": "integer"
        }
      }
    },
    "ExtractEntitiesRequest": {
      "description": "Request to extract named entities",
      "type": "object",
      "properties": {
        "InputString": {
          "description": "Input string to extract entities from",
          "type": "string"
        }
      }
    },
    "ExtractEntitiesResponse": {
      "description": "Result of performing an extract entities operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "Entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Entity"
          }
        }
      }
    },
    "Entity": {
      "type": "object",
      "properties": {
        "EntityType": {
          "type": "string"
        },
        "EntityText": {
          "type": "string"
        }
      }
    },
    "LanguageDetectionRequest": {
      "description": "Input to a language detection operation",
      "type": "object",
      "properties": {
        "textToDetect": {
          "description": "Text to detect the language of",
          "type": "string"
        }
      }
    },
    "LanguageDetectionResponse": {
      "description": "Output of a language detection operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the language detection operation was successful, false otherwise",
          "type": "boolean"
        },
        "DetectedLanguage_ThreeLetterCode": {
          "description": "ISO 639 three letter language code",
          "type": "string"
        },
        "DetectedLanguage_FullName": {
          "description": "The full name (in English) of the detected language",
          "type": "string"
        }
      }
    },
    "LanguageTranslationRequest": {
      "description": "Input to a language translation operation",
      "type": "object",
      "properties": {
        "TextToTranslate": {
          "description": "Text to translate",
          "type": "string"
        }
      }
    },
    "LanguageTranslationResponse": {
      "description": "Output of a language translation operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the language detection operation was successful, false otherwise",
          "type": "boolean"
        },
        "TranslatedTextResult": {
          "description": "Translated text in target language",
          "type": "string"
        },
        "SentenceCount": {
          "format": "int32",
          "description": "Number of sentences in input text",
          "type": "integer"
        }
      }
    },
    "ParseRequest": {
      "description": "Linguistic parse request",
      "type": "object",
      "properties": {
        "InputString": {
          "description": "Input string to linguistically parse",
          "type": "string"
        }
      }
    },
    "ParseResponse": {
      "description": "Result of linguistic parse operation",
      "type": "object",
      "properties": {
        "ParseTree": {
          "description": "Parse tree in Penn Treebank syntax tree format",
          "type": "string"
        }
      }
    },
    "PosRequest": {
      "description": "Part of speech tagging request",
      "type": "object",
      "properties": {
        "InputText": {
          "description": "Input text string",
          "type": "string"
        }
      }
    },
    "PosResponse": {
      "description": "Part of speech tag result",
      "type": "object",
      "properties": {
        "TaggedSentences": {
          "description": "Sentences in the string",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PosSentence"
          }
        }
      }
    },
    "PosSentence": {
      "description": "Sentence in a POS tag result",
      "type": "object",
      "properties": {
        "Words": {
          "description": "Words in the sentence",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PosTaggedWord"
          }
        }
      }
    },
    "PosTaggedWord": {
      "description": "Word tagged in a POS tag",
      "type": "object",
      "properties": {
        "Word": {
          "description": "Word that was tagged",
          "type": "object"
        },
        "Tag": {
          "description": "Penn Treebank tag applied to the word",
          "type": "object"
        }
      }
    },
    "RephraseRequest": {
      "description": "Input to a text rephrasing operation",
      "type": "object",
      "properties": {
        "TextToTranslate": {
          "description": "Text to rephrase",
          "type": "string"
        },
        "TargetRephrasingCount": {
          "format": "int32",
          "description": "The number of rephrasing output options you would like per sentence; possible values are 1 to 10.  Default is 2.",
          "type": "integer"
        }
      }
    },
    "RephraseResponse": {
      "description": "Output of a text rephrasing operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the language detection operation was successful, false otherwise",
          "type": "boolean"
        },
        "RephrasedResults": {
          "description": "Results of the rephrasing, paraphrasing operation, in the order of the input sentences",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RephrasedSentence"
          }
        },
        "SentenceCount": {
          "format": "int32",
          "description": "Number of sentences in input text",
          "type": "integer"
        }
      }
    },
    "RephrasedSentence": {
      "description": "One input sentence and associated rephrasing results",
      "type": "object",
      "properties": {
        "SentenceIndex": {
          "format": "int32",
          "description": "Index of the sentence, 1-based, ordered",
          "type": "integer"
        },
        "OriginalSentenceText": {
          "description": "Original input sentence text",
          "type": "string"
        },
        "Rephrasings": {
          "description": "Rephrasing text options, candidates of the original input sentence, in order - with best candidate first",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RephrasedSentenceOption"
          }
        }
      }
    },
    "RephrasedSentenceOption": {
      "description": "One rephrasing of an original input sentence",
      "type": "object",
      "properties": {
        "RephrasedOptionIndex": {
          "format": "int32",
          "description": "Ordered index of the rephrasing option, 1-based, with 1 being the best option",
          "type": "integer"
        },
        "RephrasedSentenceText": {
          "description": "One sentence of output rephrased text of original input sentence",
          "type": "string"
        }
      }
    },
    "SentenceSegmentationRequest": {
      "type": "object",
      "properties": {
        "InputString": {
          "type": "string"
        }
      }
    },
    "SentenceSegmentationResponse": {
      "type": "object",
      "properties": {
        "Successful": {
          "type": "boolean"
        },
        "Sentences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SentenceCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "GetWordsRequest": {
      "type": "object",
      "properties": {
        "InputText": {
          "type": "string"
        }
      }
    },
    "GetWordsResponse": {
      "description": "Words in input string",
      "type": "object",
      "properties": {
        "Words": {
          "description": "Array of words",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WordPosition"
          }
        }
      }
    },
    "WordPosition": {
      "type": "object",
      "properties": {
        "Word": {
          "description": "Word as a string",
          "type": "string"
        },
        "WordIndex": {
          "format": "int32",
          "description": "Zero-based index of the word; first word has index 0, second word has index 1 and so on",
          "type": "integer"
        },
        "StartPosition": {
          "format": "int32",
          "description": "Zero-based character offset at which the word begins in the input string",
          "type": "integer"
        },
        "EndPosition": {
          "format": "int32",
          "description": "Zero-based character offset at which the word ends in the input string",
          "type": "integer"
        }
      }
    },
    "CheckWordRequest": {
      "type": "object",
      "properties": {
        "Word": {
          "type": "string"
        }
      }
    },
    "CheckWordResponse": {
      "description": "Spelling correction check result",
      "type": "object",
      "properties": {
        "Correct": {
          "description": "True if the word is spelled correctly, false otherwise",
          "type": "boolean"
        },
        "Suggestions": {
          "description": "Suggested spelling corrections",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CheckSentenceRequest": {
      "description": "Input object for spell checking",
      "type": "object",
      "properties": {
        "Sentence": {
          "description": "Input sentence for spell check",
          "type": "string"
        }
      }
    },
    "CheckSentenceResponse": {
      "description": "Result of spell checking a sentence",
      "type": "object",
      "properties": {
        "IncorrectCount": {
          "format": "int32",
          "description": "Number of incorrect words",
          "type": "integer"
        },
        "Words": {
          "description": "Words in the sentence, both correct and incorrect",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CorrectWordInSentence"
          }
        }
      }
    },
    "CorrectWordInSentence": {
      "description": "A word in a sentence",
      "type": "object",
      "properties": {
        "Word": {
          "$ref": "#/definitions/WordPosition",
          "description": "Position of the word"
        },
        "Correct": {
          "description": "True if the word is spelled correctly, false otherwise",
          "type": "boolean"
        },
        "Suggestions": {
          "description": "Suggested spelling improvements",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Apikey": {
      "type": "apiKey",
      "description": "API Key Authentication",
      "name": "Apikey",
      "in": "header"
    }
  }
}