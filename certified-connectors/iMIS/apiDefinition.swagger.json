{
  "swagger": "2.0",
  "info": {
    "title": "iMIS",
    "description": "iMIS, a purpose-built Engagement Management System for associations and non-profit organizations.",
    "contact": {
      "name": "Computer System Innovations, Inc.",
      "url": "https://csiinc.com/support",
      "email": "support@csiinc.com"
    },
    "version": "1.0.0"
  },
  "host": "mspowerplatform.cloud.csiinc.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/api/activity/{sequenceNumber}": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Get an activity by sequence",
        "description": "Fetches a single Activity record by its sequence (SEQN) value",
        "operationId": "ActivityGetBySeqn",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sequenceNumber",
            "description": "Sequence number",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Sequence Number",
            "x-ms-visibility": "important",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ActivityDTO"
            }
          }
        }
      }
    },
    "/api/activity": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Find activities",
        "description": "Search for activities by type, iMIS ID, and more",
        "operationId": "ActivityFind",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "activityType",
            "description": "The activity type code",
            "type": "string",
            "x-ms-summary": "Activity Type",
            "x-ms-visibility": "important",
            "x-ms-dynamic-values": {
              "operationId": "ActivityMetadataTypeList"
            }
          },
          {
            "in": "query",
            "name": "imisId",
            "description": "The iMIS ID",
            "type": "string",
            "x-ms-summary": "iMIS ID",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "productCode",
            "description": "The product code",
            "type": "string",
            "x-ms-summary": "Product Code"
          },
          {
            "in": "query",
            "name": "category",
            "description": "The category",
            "type": "string",
            "x-ms-summary": "Category"
          },
          {
            "in": "query",
            "name": "transactionDateBefore",
            "description": "Transaction date on or before",
            "type": "string",
            "format": "date",
            "x-ms-summary": "Transaction Date On or Before",
            "x-ms-visibility": "advanced"
          },
          {
            "in": "query",
            "name": "transactionDateAfter",
            "description": "Transaction date after",
            "type": "string",
            "format": "date",
            "x-ms-summary": "Transaction Date After",
            "x-ms-visibility": "advanced"
          },
          {
            "in": "query",
            "name": "effectiveDateBefore",
            "description": "Effective date on or before",
            "type": "string",
            "format": "date",
            "x-ms-summary": "Effective Date On or Before",
            "x-ms-visibility": "advanced"
          },
          {
            "in": "query",
            "name": "effectiveDateAfter",
            "description": "Effective date after",
            "type": "string",
            "format": "date",
            "x-ms-summary": "Effective Date After",
            "x-ms-visibility": "advanced"
          },
          {
            "in": "query",
            "name": "thruDateBefore",
            "description": "Thru date on or before",
            "type": "string",
            "format": "date",
            "x-ms-summary": "Thru Date On or Before",
            "x-ms-visibility": "advanced"
          },
          {
            "in": "query",
            "name": "thruDateAfter",
            "description": "Thru date after",
            "type": "string",
            "format": "date",
            "x-ms-summary": "Thru Date After",
            "x-ms-visibility": "advanced"
          },
          {
            "in": "query",
            "name": "sortBy",
            "description": "The property name to sort by",
            "type": "string",
            "x-ms-summary": "Sort By",
            "x-ms-visibility": "advanced"
          },
          {
            "in": "query",
            "name": "sortDesc",
            "description": "If the sort order should be descending (default is ascending)",
            "type": "boolean",
            "x-ms-summary": "Sort Descending",
            "x-ms-visibility": "advanced"
          },
          {
            "in": "query",
            "name": "$skiptoken",
            "description": "(Internal) The skiptoken for the next page",
            "type": "string",
            "x-ms-summary": "$skiptoken",
            "x-ms-visibility": "internal"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ActivityListDTO"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink"
        }
      },
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Create an activity",
        "description": "Create a new activity record in iMIS",
        "operationId": "ActivityCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The activity to create",
            "schema": {
              "$ref": "#/definitions/ActivityCreateDTO"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ActivityDTO"
            }
          }
        },
        "x-ms-visibility": "important"
      },
      "put": {
        "tags": [
          "Activity"
        ],
        "summary": "Update an activity",
        "description": "Update an activity record in iMIS",
        "operationId": "ActivityUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The activity to update.",
            "schema": {
              "$ref": "#/definitions/ActivityUpdateDTO"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ActivityDTO"
            }
          }
        },
        "x-ms-visibility": "important"
      }
    },
    "/_metadata/activity/typeList": {
      "get": {
        "tags": [
          "ActivityMetadata"
        ],
        "summary": "Get activity type list",
        "description": "Metadata endpoint which retrieves a list of activity types.",
        "operationId": "ActivityMetadataTypeList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/trigger/Activity": {
      "get": {
        "tags": [
          "ActivityTrigger"
        ],
        "summary": "When an activity is added",
        "description": "When an activity is added",
        "operationId": "ActivityTriggerPoll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "sequence",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "x-ms-visibility": "internal",
            "x-ms-trigger-value": {
              "value-collection": "value",
              "value-path": "seqn"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ActivityListDTO"
            }
          },
          "202": {
            "description": "Accepted"
          }
        },
        "x-ms-trigger": "batch",
        "x-ms-trigger-metadata": {
          "mode": "polling",
          "kind": "query"
        },
        "x-ms-trigger-hint": "Add a new Activity record in iMIS"
      }
    },
    "/api/address/{contactId}": {
      "get": {
        "tags": [
          "Address"
        ],
        "summary": "Get all addresses for a contact",
        "description": "Retrieves a list of addresses for a contact.",
        "operationId": "AddressGetAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "description": "The iMIS ID to get the addresses for",
            "required": true,
            "type": "string",
            "x-ms-summary": "iMIS ID",
            "x-ms-visibility": "important",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddressListDTO"
            }
          }
        },
        "x-ms-visibility": "important"
      }
    },
    "/api/address/{contactId}/{addressPurpose}": {
      "get": {
        "tags": [
          "Address"
        ],
        "summary": "Get an address for a contact",
        "description": "Retrieves an address for a contact.",
        "operationId": "AddressGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "description": "The iMIS ID to get the address for",
            "required": true,
            "type": "string",
            "x-ms-summary": "iMIS ID",
            "x-ms-visibility": "important",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "path",
            "name": "addressPurpose",
            "description": "Must be a well-defined address purpose name in iMIS",
            "required": true,
            "type": "string",
            "x-ms-summary": "Address Purpose",
            "x-ms-visibility": "important",
            "x-ms-url-encoding": "single",
            "x-ms-dynamic-values": {
              "operationId": "AddressMetadataPurposeList"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddressDTO"
            }
          }
        }
      }
    },
    "/_metadata/address/purposes": {
      "get": {
        "tags": [
          "AddressMetadata"
        ],
        "summary": "Get address purpose list",
        "description": "Metadata endpoint which retrieves a list of address purposes.",
        "operationId": "AddressMetadataPurposeList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/api/contact/{contactId}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Get a contact",
        "description": "Retrieves a single contact record by their iMIS ID.",
        "operationId": "ContactGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "description": "iMIS ID",
            "required": true,
            "type": "string",
            "x-ms-summary": "iMIS ID",
            "x-ms-visibility": "important",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactDTO"
            }
          }
        },
        "x-ms-visibility": "important"
      }
    },
    "/api/contactPicture/{contactId}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Get a contact's picture",
        "description": "Retrieves a contact's profile picture by their iMIS ID.",
        "operationId": "ContactGetPicture",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "description": "iMIS ID",
            "required": true,
            "type": "string",
            "x-ms-summary": "iMIS ID",
            "x-ms-visibility": "important",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactPictureDTO"
            }
          }
        }
      }
    },
    "/api/contact/person": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create a contact",
        "description": "Creates a contact (person) record in iMIS.",
        "operationId": "ContactCreatePerson",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The new contact record to create.",
            "schema": {
              "$ref": "#/definitions/PersonCreateDTO"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactDTO"
            }
          }
        },
        "x-ms-visibility": "important"
      },
      "put": {
        "tags": [
          "Contact"
        ],
        "summary": "Update a contact",
        "description": "Updates a contact (person) record in iMIS. The iMIS ID is required in the request body, and will be used to find the contact to update. Only fields with values will be updated. If a field is left blank, it will not be updated.",
        "operationId": "ContactUpdatePerson",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The contact record to update.",
            "schema": {
              "$ref": "#/definitions/PersonUpdateDTO"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactDTO"
            }
          }
        },
        "x-ms-visibility": "important"
      }
    },
    "/api/contact/organization": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create an organization",
        "description": "Creates a contact (organization) record in iMIS.",
        "operationId": "ContactCreateOrganization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The new contact record to create.",
            "schema": {
              "$ref": "#/definitions/OrganizationCreateDTO"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactDTO"
            }
          }
        },
        "x-ms-visibility": "important"
      },
      "put": {
        "tags": [
          "Contact"
        ],
        "summary": "Update an organization",
        "description": "Updates a contact (organization) record in iMIS.",
        "operationId": "ContactUpdateOrganization",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The contact record to update.",
            "schema": {
              "$ref": "#/definitions/OrganizationUpdateDTO"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactDTO"
            }
          }
        },
        "x-ms-visibility": "important"
      }
    },
    "/api/contact/mailingAddress": {
      "put": {
        "tags": [
          "Contact"
        ],
        "summary": "Update a contact's mailing address",
        "description": "Updates a contact's mailing address in iMIS.",
        "operationId": "ContactUpdateMailingAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The address to update.",
            "schema": {
              "$ref": "#/definitions/MailingAddressUpdateDTO"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddressDTO"
            }
          }
        }
      }
    },
    "/api/contact": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Find contacts",
        "description": "Finds iMIS contact records by various criteria. Most search fields support search filters, \r\nlike \"startsWith:x\" or \"contains:x\". Refer to the documentation for a complete list.",
        "operationId": "ContactFind",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "firstName",
            "description": "Contact's first name (supports filters)",
            "type": "string",
            "x-ms-summary": "First Name",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "lastName",
            "description": "Contact's last name (supports filters)",
            "type": "string",
            "x-ms-summary": "Last Name",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "fullName",
            "description": "Contact's full name (supports filters)",
            "type": "string",
            "x-ms-summary": "Full Name",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "email",
            "description": "Contact's primary email address (supports filters)",
            "type": "string",
            "x-ms-summary": "Primary Email",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "memberType",
            "description": "Contact's member type code (supports filters)",
            "type": "string",
            "x-ms-summary": "Member Type Code",
            "x-ms-visibility": "important",
            "x-ms-dynamic-values": {
              "operationId": "ContactMetadataMemberTypeList",
              "value-path": "MemberType",
              "value-title": "Description"
            }
          },
          {
            "in": "query",
            "name": "organization",
            "description": "Contact's organization name (supports filters)",
            "type": "string",
            "x-ms-summary": "Company Name",
            "x-ms-visibility": "advanced"
          },
          {
            "in": "query",
            "name": "recordType",
            "description": "Filter record types (people, organizations)",
            "type": "string",
            "x-ms-summary": "Filter Record Types",
            "x-ms-visibility": "advanced",
            "enum": [
              "All",
              "Contacts",
              "Organizations"
            ]
          },
          {
            "in": "query",
            "name": "deleteType",
            "description": "Filter deleted status (marked for deletion)",
            "type": "string",
            "x-ms-summary": "Filter Deleted Status",
            "x-ms-visibility": "advanced",
            "x-ms-dynamic-values": {
              "operationId": "ContactMetadataFilterDeleteStatusOptions",
              "value-path": "Code",
              "value-title": "Description"
            }
          },
          {
            "in": "query",
            "name": "$skiptoken",
            "description": "(Internal) The skiptoken for the next page",
            "type": "string",
            "x-ms-summary": "$skiptoken",
            "x-ms-visibility": "internal"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ContactListDTO"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink"
        }
      }
    },
    "/_metadata/contact/memberTypeList": {
      "get": {
        "tags": [
          "ContactMetadata"
        ],
        "summary": "Get member type list",
        "description": "Metadata endpoint which retrieves a list of all member types for a contact.",
        "operationId": "ContactMetadataMemberTypeList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MemberTypeDTO"
              }
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/contact/memberTypeListForPerson": {
      "get": {
        "tags": [
          "ContactMetadata"
        ],
        "summary": "Get member type list for a person",
        "description": "Metadata endpoint which retrieves a list of member types that only apply to a person.",
        "operationId": "ContactMetadataMemberTypeListForPerson",
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MemberTypeDTO"
              }
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/contact/memberTypeListForOrganization": {
      "get": {
        "tags": [
          "ContactMetadata"
        ],
        "summary": "Get member type list for an organization",
        "description": "Metadata endpoint which retrieves a list of member types that only apply to an organization.",
        "operationId": "ContactMetadataMemberTypeListForOrganization",
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MemberTypeDTO"
              }
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/contact/functionalTitleList": {
      "get": {
        "tags": [
          "ContactMetadata"
        ],
        "summary": "Get functional titles list",
        "description": "Metadata endpoint which retrieves a list of functional titles for a person.",
        "operationId": "ContactMetadataFunctionalTitleList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GenTableDataDTO"
              }
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/contact/partyStatusList": {
      "get": {
        "tags": [
          "ContactMetadata"
        ],
        "summary": "Get contact status list",
        "description": "Metadata endpoint which retrieves a list of status codes for a contact.",
        "operationId": "ContactMetadataPartyStatusList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GenTableDataDTO"
              }
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/contact/filterDeleteStatusOptions": {
      "get": {
        "tags": [
          "ContactMetadata"
        ],
        "summary": "Get contact status list",
        "description": "Metadata endpoint which retrieves a list of deletion flag codes and descriptions.",
        "operationId": "ContactMetadataFilterDeleteStatusOptions",
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GenTableDataDTO"
              }
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/contact/genderList": {
      "get": {
        "tags": [
          "ContactMetadata"
        ],
        "summary": "Get gender list",
        "description": "Metadata endpoint which retrieves a list of gender codes for a person.",
        "operationId": "ContactMetadataGenderList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GenTableDataDTO"
              }
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/contact/billingCategoryList": {
      "get": {
        "tags": [
          "ContactMetadata"
        ],
        "summary": "Get billing category list",
        "description": "Metadata endpoint which retrieves a list of billing categories for a contact.",
        "operationId": "ContactMetadataBillingCategoryList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GenTableDataDTO"
              }
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/api/Iqa/Execute": {
      "post": {
        "tags": [
          "Iqa"
        ],
        "summary": "Execute an IQA",
        "description": "Executes an iMIS IQA at the supplied path.",
        "operationId": "IqaExecuteIqa",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "iqaPath",
            "description": "The path of the IQA to execute.",
            "type": "string",
            "x-ms-summary": "IQA Path",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "$skiptoken",
            "description": "Offset",
            "type": "string",
            "x-ms-summary": "$skiptoken",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Iqa filters.",
            "schema": {
              "type": "object",
              "x-ms-dynamic-schema": {
                "operationId": "IqaMetadataGetIqaRequestBodySchema",
                "parameters": {
                  "metadataIqaPath": {
                    "parameter": "iqaPath"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "x-ms-dynamic-schema": {
                "operationId": "IqaMetadataGetPagedResultIqaResponseBodySchema",
                "parameters": {
                  "metadataPagedIqaPath": {
                    "parameter": "iqaPath"
                  }
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink"
        }
      }
    },
    "/_metadata/Iqa/Schema": {
      "get": {
        "tags": [
          "IqaMetadata"
        ],
        "summary": "Get OpenAPI request body schema for an IQA",
        "description": "Get OpenAPI schema for an IQA.",
        "operationId": "IqaMetadataGetIqaRequestBodySchema",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "metadataIqaPath",
            "description": "The path of the IQA.",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/Iqa/PagedResultSchema": {
      "get": {
        "tags": [
          "IqaMetadata"
        ],
        "summary": "Get OpenAPI paged result schema for an IQA",
        "description": "Get OpenAPI schema for a paged collection of IQA records.",
        "operationId": "IqaMetadataGetPagedResultIqaResponseBodySchema",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "metadataPagedIqaPath",
            "description": "The path of the IQA.",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/trigger/Order": {
      "get": {
        "tags": [
          "OrderTrigger"
        ],
        "summary": "When an order is added",
        "description": "When an order is added",
        "operationId": "OrderTriggerPoll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "orderNumber",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "x-ms-visibility": "internal",
            "x-ms-trigger-value": {
              "value-collection": "value",
              "value-path": "OrderNumber"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OrderListDTO"
            }
          },
          "202": {
            "description": "Accepted"
          }
        },
        "x-ms-trigger": "batch",
        "x-ms-trigger-metadata": {
          "mode": "polling",
          "kind": "query"
        },
        "x-ms-trigger-hint": "Place a new order (e.g. store purchase, event registration) in iMIS"
      }
    },
    "/api/Panel/SingleInstance/Update": {
      "post": {
        "tags": [
          "Panel"
        ],
        "summary": "Update a single-instance panel record",
        "description": "Update a single instance panel record in iMIS.",
        "operationId": "PanelUpdateSingleInstancePanel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameSingleUpdate",
            "description": "The name of the panel to update.",
            "type": "string",
            "x-ms-summary": "Panel Name",
            "x-ms-visibility": "important",
            "x-ms-dynamic-values": {
              "operationId": "PanelMetadataGetSingleInstancePanels",
              "value-path": "EntityTypeName",
              "value-title": "DisplayText"
            }
          },
          {
            "in": "body",
            "name": "body",
            "description": "Schema generated by GetPanelSchema.",
            "schema": {
              "type": "object",
              "x-ms-dynamic-schema": {
                "operationId": "PanelMetadataGetPanelCreateSchema",
                "parameters": {
                  "panelNameSchemaCreate": {
                    "parameter": "panelNameSingleUpdate"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "x-ms-dynamic-schema": {
                "operationId": "PanelMetadataGetPanelSchema",
                "parameters": {
                  "panelNameSchema": {
                    "parameter": "panelNameSingleUpdate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Panel/SingleInstance/Delete": {
      "post": {
        "tags": [
          "Panel"
        ],
        "summary": "Delete a single-instance panel record",
        "description": "Deletes a single instance panel record in iMIS.",
        "operationId": "PanelDeleteSingleInstancePanel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameSingleDelete",
            "description": "The name of the panel to delete from.",
            "type": "string",
            "x-ms-summary": "Panel Name",
            "x-ms-visibility": "important",
            "x-ms-dynamic-values": {
              "operationId": "PanelMetadataGetSingleInstancePanels",
              "value-path": "EntityTypeName",
              "value-title": "DisplayText"
            }
          },
          {
            "in": "body",
            "name": "body",
            "description": "Schema generated by GetPanelDeleteSchema.",
            "schema": {
              "type": "object",
              "x-ms-dynamic-schema": {
                "operationId": "PanelMetadataGetPanelDeleteSchema",
                "parameters": {
                  "panelNameSchemaDelete": {
                    "parameter": "panelNameSingleDelete"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/Panel/SingleInstance/Get": {
      "post": {
        "tags": [
          "Panel"
        ],
        "summary": "Get a single-instance panel record",
        "description": "Gets a single instance panel record in iMIS.",
        "operationId": "PanelGetSingleInstancePanel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameSingleGet",
            "description": "The name of the panel to retrieve from.",
            "type": "string",
            "x-ms-summary": "Panel Name",
            "x-ms-visibility": "important",
            "x-ms-dynamic-values": {
              "operationId": "PanelMetadataGetSingleInstancePanels",
              "value-path": "EntityTypeName",
              "value-title": "DisplayText"
            }
          },
          {
            "in": "body",
            "name": "body",
            "description": "Schema generated by GetPanelGetSchema.",
            "schema": {
              "type": "object",
              "x-ms-dynamic-schema": {
                "operationId": "PanelMetadataGetPanelGetSchema",
                "parameters": {
                  "panelNameSchemaGet": {
                    "parameter": "panelNameSingleGet"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "x-ms-dynamic-schema": {
                "operationId": "PanelMetadataGetPanelSchema",
                "parameters": {
                  "panelNameSchema": {
                    "parameter": "panelNameSingleGet"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Panel/MultiInstance/Create": {
      "post": {
        "tags": [
          "Panel"
        ],
        "summary": "Create a multi-instance panel record",
        "description": "Creates a multi instance panel record in iMIS.",
        "operationId": "PanelCreateMultiInstancePanel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameMultiCreate",
            "description": "The name of the panel to create into.",
            "type": "string",
            "x-ms-summary": "Panel Name",
            "x-ms-visibility": "important",
            "x-ms-dynamic-values": {
              "operationId": "PanelMetadataGetMultiInstancePanels",
              "value-path": "EntityTypeName",
              "value-title": "DisplayText"
            }
          },
          {
            "in": "body",
            "name": "body",
            "description": "Schema generated by GetPanelCreateSchema.",
            "schema": {
              "type": "object",
              "x-ms-dynamic-schema": {
                "operationId": "PanelMetadataGetPanelCreateSchema",
                "parameters": {
                  "panelNameSchemaCreate": {
                    "parameter": "panelNameMultiCreate"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "x-ms-dynamic-schema": {
                "operationId": "PanelMetadataGetPanelSchema",
                "parameters": {
                  "panelNameSchema": {
                    "parameter": "panelNameMultiCreate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Panel/MultiInstance/Update": {
      "post": {
        "tags": [
          "Panel"
        ],
        "summary": "Update a multi-instance panel record",
        "description": "Updates a multi instance panel record in iMIS.",
        "operationId": "PanelUpdateMultiInstancePanel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameMultiUpdate",
            "description": "The name of the panel to update.",
            "type": "string",
            "x-ms-summary": "Panel Name",
            "x-ms-visibility": "important",
            "x-ms-dynamic-values": {
              "operationId": "PanelMetadataGetMultiInstancePanels",
              "value-path": "EntityTypeName",
              "value-title": "DisplayText"
            }
          },
          {
            "in": "body",
            "name": "body",
            "description": "Schema generated by GetPanelUpdateSchema.",
            "schema": {
              "type": "object",
              "x-ms-dynamic-schema": {
                "operationId": "PanelMetadataGetPanelUpdateSchema",
                "parameters": {
                  "panelNameSchemaUpdate": {
                    "parameter": "panelNameMultiUpdate"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "x-ms-dynamic-schema": {
                "operationId": "PanelMetadataGetPanelSchema",
                "parameters": {
                  "panelNameSchema": {
                    "parameter": "panelNameMultiUpdate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Panel/MultiInstance/Delete": {
      "post": {
        "tags": [
          "Panel"
        ],
        "summary": "Delete a multi-instance panel record",
        "description": "Deletes a multi instance panel record in iMIS.",
        "operationId": "PanelDeleteMultiInstancePanel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameMultiDelete",
            "description": "The name of the panel to delete from.",
            "type": "string",
            "x-ms-summary": "Panel Name",
            "x-ms-visibility": "important",
            "x-ms-dynamic-values": {
              "operationId": "PanelMetadataGetMultiInstancePanels",
              "value-path": "EntityTypeName",
              "value-title": "DisplayText"
            }
          },
          {
            "in": "body",
            "name": "body",
            "description": "Schema generated by GetPanelDeleteSchema.",
            "schema": {
              "type": "object",
              "x-ms-dynamic-schema": {
                "operationId": "PanelMetadataGetPanelDeleteSchema",
                "parameters": {
                  "panelNameSchemaDelete": {
                    "parameter": "panelNameMultiDelete"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/api/Panel/MultiInstance/Get": {
      "post": {
        "tags": [
          "Panel"
        ],
        "summary": "Get a multi-instance panel record",
        "description": "Gets a multi instance panel record in iMIS.",
        "operationId": "PanelGetMultiInstancePanel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameMultiGet",
            "description": "The name of the panel to retrieve from.",
            "type": "string",
            "x-ms-summary": "Panel Name",
            "x-ms-visibility": "important",
            "x-ms-dynamic-values": {
              "operationId": "PanelMetadataGetMultiInstancePanels",
              "value-path": "EntityTypeName",
              "value-title": "DisplayText"
            }
          },
          {
            "in": "body",
            "name": "body",
            "description": "Schema generated by GetPanelGetSchema.",
            "schema": {
              "type": "object",
              "x-ms-dynamic-schema": {
                "operationId": "PanelMetadataGetPanelGetSchema",
                "parameters": {
                  "panelNameSchemaGet": {
                    "parameter": "panelNameMultiGet"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "x-ms-dynamic-schema": {
                "operationId": "PanelMetadataGetPanelSchema",
                "parameters": {
                  "panelNameSchema": {
                    "parameter": "panelNameMultiGet"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Panel/Find": {
      "post": {
        "tags": [
          "Panel"
        ],
        "summary": "Find panel records",
        "description": "Finds iMIS panel records by various criteria. Most search fields support search filters, \r\n            like \"startsWith:x\" or \"contains:x\". Refer to the documentation for a complete list.",
        "operationId": "PanelFindPanelRecords",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameFindPost",
            "description": "The name of the panel to query.",
            "type": "string",
            "x-ms-summary": "Panel Name",
            "x-ms-visibility": "important",
            "x-ms-dynamic-values": {
              "operationId": "PanelMetadataGetPanels",
              "value-path": "EntityTypeName",
              "value-title": "DisplayText"
            }
          },
          {
            "in": "query",
            "name": "$skiptoken",
            "description": "Offset",
            "type": "string",
            "x-ms-summary": "$skiptoken",
            "x-ms-visibility": "internal"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Schema generated by GetPanelSchema.",
            "schema": {
              "type": "object",
              "x-ms-dynamic-schema": {
                "operationId": "PanelMetadataGetPanelSchema",
                "parameters": {
                  "panelNameSchema": {
                    "parameter": "panelNameFindPost"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ProblemDetails"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "x-ms-dynamic-schema": {
                "operationId": "PanelMetadataGetPagedResultPanelSchema",
                "parameters": {
                  "panelNameSchemaPaged": {
                    "parameter": "panelNameFindPost"
                  }
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "@odata.nextLink"
        }
      }
    },
    "/_metadata/Panel": {
      "get": {
        "tags": [
          "PanelMetadata"
        ],
        "summary": "Get a list of panels",
        "description": "Get a list of all panel names.",
        "operationId": "PanelMetadataGetPanels",
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PanelSummaryDTO"
              }
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/Panel/SingleInstance": {
      "get": {
        "tags": [
          "PanelMetadata"
        ],
        "summary": "Get a list of single instance panels",
        "description": "Get a list of all single instance panel names.",
        "operationId": "PanelMetadataGetSingleInstancePanels",
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PanelSummaryDTO"
              }
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/Panel/MultiInstance": {
      "get": {
        "tags": [
          "PanelMetadata"
        ],
        "summary": "Get a list of multi instance panels",
        "description": "Get a list of all multi instance panel names.",
        "operationId": "PanelMetadataGetMultiInstancePanels",
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PanelSummaryDTO"
              }
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/Panel/Schema": {
      "get": {
        "tags": [
          "PanelMetadata"
        ],
        "summary": "Get schema for a panel",
        "description": "Get schema for a panel.",
        "operationId": "PanelMetadataGetPanelSchema",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameSchema",
            "description": "The name of the panel to retrieve.",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/Panel/Schema/Get": {
      "get": {
        "tags": [
          "PanelMetadata"
        ],
        "summary": "Get schema for a panel GET (retrieve single record) operation",
        "description": "Get schema for a panel GET operation. Response schema includes all key fields as required fields.",
        "operationId": "PanelMetadataGetPanelGetSchema",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameSchemaGet",
            "description": "The name of the panel.",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/Panel/Schema/Create": {
      "get": {
        "tags": [
          "PanelMetadata"
        ],
        "summary": "Get schema for a panel create operation",
        "description": "Get schema for a panel create operation.",
        "operationId": "PanelMetadataGetPanelCreateSchema",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameSchemaCreate",
            "description": "The name of the panel to create into.",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/Panel/Schema/Update": {
      "get": {
        "tags": [
          "PanelMetadata"
        ],
        "summary": "Get schema for a panel update operation",
        "description": "Get schema for a panel update operation.",
        "operationId": "PanelMetadataGetPanelUpdateSchema",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameSchemaUpdate",
            "description": "The name of the panel to update.",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/Panel/Schema/Delete": {
      "get": {
        "tags": [
          "PanelMetadata"
        ],
        "summary": "Get schema for a panel delete operation",
        "description": "Get schema for a panel delete operation.",
        "operationId": "PanelMetadataGetPanelDeleteSchema",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameSchemaDelete",
            "description": "The name of the panel to delete from.",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/Panel/Schema/PagedResult": {
      "get": {
        "tags": [
          "PanelMetadata"
        ],
        "summary": "Get paged result schema for a panel",
        "description": "Get schema for a paged collection of panel records.",
        "operationId": "PanelMetadataGetPagedResultPanelSchema",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameSchemaPaged",
            "description": "The name of the panel to retrieve.",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/_metadata/Panel/Definition": {
      "get": {
        "tags": [
          "PanelMetadata"
        ],
        "summary": "Get a panel definition",
        "description": "Get panel metadata (parent entity, single- vs. multi-instance, and property data types/names, etc).",
        "operationId": "PanelMetadataGetPanelDefinition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "panelNameDefinition",
            "description": "The name of the panel to retrieve.",
            "type": "string",
            "x-ms-summary": "Panel Name",
            "x-ms-visibility": "important",
            "x-ms-dynamic-values": {
              "operationId": "PanelMetadataGetPanels",
              "value-path": "EntityTypeName",
              "value-title": "DisplayText"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-ms-visibility": "internal"
      }
    }
  },
  "definitions": {
    "ActivityCreateDTO": {
      "required": [
        "activityType",
        "id"
      ],
      "type": "object",
      "properties": {
        "actionCodes": {
          "type": "string",
          "x-ms-summary": "Action Codes",
          "x-ms-visibility": "advanced"
        },
        "activityType": {
          "minLength": 1,
          "type": "string",
          "x-ms-summary": "Activity Type",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "ActivityMetadataTypeList"
          }
        },
        "amount": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Amount"
        },
        "attachSeqn": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Attachment Sequence"
        },
        "attachTotal": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Attachment Total"
        },
        "batchNum": {
          "type": "string",
          "x-ms-summary": "Batch Number"
        },
        "campaignCode": {
          "type": "string",
          "x-ms-summary": "Campaign Code"
        },
        "category": {
          "type": "string",
          "x-ms-summary": "Category",
          "x-ms-visibility": "important"
        },
        "coId": {
          "type": "string",
          "x-ms-summary": "Co ID"
        },
        "description": {
          "type": "string",
          "x-ms-summary": "Description"
        },
        "effectiveDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Effective Date"
        },
        "gracePeriod": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Grace Period",
          "x-ms-visibility": "advanced"
        },
        "id": {
          "minLength": 1,
          "type": "string",
          "x-ms-summary": "iMIS ID",
          "x-ms-visibility": "important"
        },
        "intentToEdit": {
          "type": "string",
          "x-ms-summary": "Intent To Edit",
          "x-ms-visibility": "advanced"
        },
        "memTribCode": {
          "type": "string",
          "x-ms-summary": "Memorial/Tribute Code",
          "x-ms-visibility": "advanced"
        },
        "memberType": {
          "type": "string",
          "x-ms-summary": "Member Type",
          "x-ms-visibility": "advanced"
        },
        "nextInstallDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Next Install Date",
          "x-ms-visibility": "advanced"
        },
        "note": {
          "type": "string",
          "x-ms-summary": "Note"
        },
        "note2": {
          "type": "string",
          "x-ms-summary": "Note 2",
          "x-ms-visibility": "advanced"
        },
        "object": {
          "type": "string",
          "x-ms-summary": "Object",
          "x-ms-visibility": "advanced"
        },
        "orgCode": {
          "type": "string",
          "x-ms-summary": "Org Code"
        },
        "originatingTransNum": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Originating Trans Number",
          "x-ms-visibility": "advanced"
        },
        "otherCode": {
          "type": "string",
          "x-ms-summary": "Other Code",
          "x-ms-visibility": "advanced"
        },
        "otherId": {
          "type": "string",
          "x-ms-summary": "Other ID",
          "x-ms-visibility": "advanced"
        },
        "payMethod": {
          "type": "string",
          "x-ms-summary": "Pay Method",
          "x-ms-visibility": "advanced"
        },
        "productCode": {
          "type": "string",
          "x-ms-summary": "Product Code"
        },
        "quantity": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Quantity"
        },
        "recurringRequest": {
          "type": "boolean",
          "x-ms-summary": "Recurring Request"
        },
        "solicitorId": {
          "type": "string",
          "x-ms-summary": "Solicitor ID"
        },
        "sourceCode": {
          "type": "string",
          "x-ms-summary": "Source Code"
        },
        "sourceSystem": {
          "type": "string",
          "x-ms-summary": "Source System"
        },
        "statusCode": {
          "type": "string",
          "x-ms-summary": "Status Code"
        },
        "taxableValue": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Taxable Value",
          "x-ms-visibility": "advanced"
        },
        "thruDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Thru Date"
        },
        "ticklerDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Tickler Date",
          "x-ms-visibility": "advanced"
        },
        "transactionDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Transaction Date",
          "x-ms-visibility": "important"
        },
        "uF1": {
          "description": "User Field 1 (String)",
          "type": "string",
          "x-ms-summary": "UF1",
          "x-ms-visibility": "advanced"
        },
        "uF2": {
          "description": "User Field 2 (String)",
          "type": "string",
          "x-ms-summary": "UF2",
          "x-ms-visibility": "advanced"
        },
        "uF3": {
          "description": "User Field 3 (String)",
          "type": "string",
          "x-ms-summary": "UF3",
          "x-ms-visibility": "advanced"
        },
        "uF4": {
          "format": "double",
          "description": "User Field 4 (Decimal)",
          "type": "number",
          "x-ms-summary": "UF4",
          "x-ms-visibility": "advanced"
        },
        "uF5": {
          "format": "double",
          "description": "User Field 5 (Decimal)",
          "type": "number",
          "x-ms-summary": "UF5",
          "x-ms-visibility": "advanced"
        },
        "uF6": {
          "format": "date",
          "description": "User Field 6 (Date)",
          "type": "string",
          "x-ms-summary": "UF6",
          "x-ms-visibility": "advanced"
        },
        "uF7": {
          "format": "date",
          "description": "User Field 7 (Date)",
          "type": "string",
          "x-ms-summary": "UF7",
          "x-ms-visibility": "advanced"
        },
        "units": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Units"
        }
      }
    },
    "ActivityDTO": {
      "required": [
        "activityType",
        "id"
      ],
      "type": "object",
      "properties": {
        "actionCodes": {
          "type": "string",
          "x-ms-summary": "Action Codes",
          "x-ms-visibility": "advanced"
        },
        "activityType": {
          "minLength": 1,
          "type": "string",
          "x-ms-summary": "Activity Type",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "ActivityMetadataTypeList"
          }
        },
        "amount": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Amount"
        },
        "attachSeqn": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Attachment Sequence"
        },
        "attachTotal": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Attachment Total"
        },
        "batchNum": {
          "type": "string",
          "x-ms-summary": "Batch Number"
        },
        "campaignCode": {
          "type": "string",
          "x-ms-summary": "Campaign Code"
        },
        "category": {
          "type": "string",
          "x-ms-summary": "Category",
          "x-ms-visibility": "important"
        },
        "coId": {
          "type": "string",
          "x-ms-summary": "Co ID"
        },
        "description": {
          "type": "string",
          "x-ms-summary": "Description"
        },
        "effectiveDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Effective Date"
        },
        "gracePeriod": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Grace Period",
          "x-ms-visibility": "advanced"
        },
        "id": {
          "minLength": 1,
          "type": "string",
          "x-ms-summary": "iMIS ID",
          "x-ms-visibility": "important"
        },
        "intentToEdit": {
          "type": "string",
          "x-ms-summary": "Intent To Edit",
          "x-ms-visibility": "advanced"
        },
        "memTribCode": {
          "type": "string",
          "x-ms-summary": "Memorial/Tribute Code",
          "x-ms-visibility": "advanced"
        },
        "memberType": {
          "type": "string",
          "x-ms-summary": "Member Type",
          "x-ms-visibility": "advanced"
        },
        "nextInstallDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Next Install Date",
          "x-ms-visibility": "advanced"
        },
        "note": {
          "type": "string",
          "x-ms-summary": "Note"
        },
        "note2": {
          "type": "string",
          "x-ms-summary": "Note 2",
          "x-ms-visibility": "advanced"
        },
        "object": {
          "type": "string",
          "x-ms-summary": "Object",
          "x-ms-visibility": "advanced"
        },
        "orgCode": {
          "type": "string",
          "x-ms-summary": "Org Code"
        },
        "originatingTransNum": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Originating Trans Number",
          "x-ms-visibility": "advanced"
        },
        "otherCode": {
          "type": "string",
          "x-ms-summary": "Other Code",
          "x-ms-visibility": "advanced"
        },
        "otherId": {
          "type": "string",
          "x-ms-summary": "Other ID",
          "x-ms-visibility": "advanced"
        },
        "payMethod": {
          "type": "string",
          "x-ms-summary": "Pay Method",
          "x-ms-visibility": "advanced"
        },
        "productCode": {
          "type": "string",
          "x-ms-summary": "Product Code"
        },
        "quantity": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Quantity"
        },
        "recurringRequest": {
          "type": "boolean",
          "x-ms-summary": "Recurring Request"
        },
        "solicitorId": {
          "type": "string",
          "x-ms-summary": "Solicitor ID"
        },
        "sourceCode": {
          "type": "string",
          "x-ms-summary": "Source Code"
        },
        "sourceSystem": {
          "type": "string",
          "x-ms-summary": "Source System"
        },
        "statusCode": {
          "type": "string",
          "x-ms-summary": "Status Code"
        },
        "taxableValue": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Taxable Value",
          "x-ms-visibility": "advanced"
        },
        "thruDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Thru Date"
        },
        "ticklerDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Tickler Date",
          "x-ms-visibility": "advanced"
        },
        "transactionDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Transaction Date",
          "x-ms-visibility": "important"
        },
        "uF1": {
          "description": "User Field 1 (String)",
          "type": "string",
          "x-ms-summary": "UF1",
          "x-ms-visibility": "advanced"
        },
        "uF2": {
          "description": "User Field 2 (String)",
          "type": "string",
          "x-ms-summary": "UF2",
          "x-ms-visibility": "advanced"
        },
        "uF3": {
          "description": "User Field 3 (String)",
          "type": "string",
          "x-ms-summary": "UF3",
          "x-ms-visibility": "advanced"
        },
        "uF4": {
          "format": "double",
          "description": "User Field 4 (Decimal)",
          "type": "number",
          "x-ms-summary": "UF4",
          "x-ms-visibility": "advanced"
        },
        "uF5": {
          "format": "double",
          "description": "User Field 5 (Decimal)",
          "type": "number",
          "x-ms-summary": "UF5",
          "x-ms-visibility": "advanced"
        },
        "uF6": {
          "format": "date",
          "description": "User Field 6 (Date)",
          "type": "string",
          "x-ms-summary": "UF6",
          "x-ms-visibility": "advanced"
        },
        "uF7": {
          "format": "date",
          "description": "User Field 7 (Date)",
          "type": "string",
          "x-ms-summary": "UF7",
          "x-ms-visibility": "advanced"
        },
        "units": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Units"
        },
        "seqn": {
          "format": "int32",
          "description": "The activity's sequence value (primary key)",
          "type": "integer",
          "x-ms-summary": "Sequence"
        }
      }
    },
    "ActivityListDTO": {
      "type": "object",
      "properties": {
        "oDataNextLink": {
          "description": "The fully-qualified URL to the next page, or null if there is no next page.",
          "type": "string",
          "x-ms-visibility": "internal"
        },
        "value": {
          "description": "The list of activity records",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityDTO"
          },
          "x-ms-summary": "Activity List"
        }
      }
    },
    "ActivityUpdateDTO": {
      "required": [
        "seqn"
      ],
      "type": "object",
      "properties": {
        "actionCodes": {
          "type": "string",
          "x-ms-summary": "Action Codes"
        },
        "activityType": {
          "type": "string",
          "x-ms-summary": "Activity Type",
          "x-ms-dynamic-values": {
            "operationId": "ActivityMetadataTypeList"
          }
        },
        "amount": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Amount"
        },
        "attachSeqn": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Attachment Sequence"
        },
        "attachTotal": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Attachment Total"
        },
        "batchNum": {
          "type": "string",
          "x-ms-summary": "Batch Number"
        },
        "campaignCode": {
          "type": "string",
          "x-ms-summary": "Campaign Code"
        },
        "category": {
          "type": "string",
          "x-ms-summary": "Category"
        },
        "coId": {
          "type": "string",
          "x-ms-summary": "Co ID"
        },
        "description": {
          "type": "string",
          "x-ms-summary": "Description"
        },
        "effectiveDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Effective Date"
        },
        "gracePeriod": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Grace Period",
          "x-ms-visibility": "advanced"
        },
        "intentToEdit": {
          "type": "string",
          "x-ms-summary": "Intent To Edit",
          "x-ms-visibility": "advanced"
        },
        "memTribCode": {
          "type": "string",
          "x-ms-summary": "Memorial/Tribute Code",
          "x-ms-visibility": "advanced"
        },
        "memberType": {
          "type": "string",
          "x-ms-summary": "Member Type",
          "x-ms-visibility": "advanced"
        },
        "nextInstallDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Next Install Date",
          "x-ms-visibility": "advanced"
        },
        "note": {
          "type": "string",
          "x-ms-summary": "Note"
        },
        "note2": {
          "type": "string",
          "x-ms-summary": "Note 2",
          "x-ms-visibility": "advanced"
        },
        "object": {
          "type": "string",
          "x-ms-summary": "Object",
          "x-ms-visibility": "advanced"
        },
        "orgCode": {
          "type": "string",
          "x-ms-summary": "Org Code"
        },
        "originatingTransNum": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Originating Trans Number",
          "x-ms-visibility": "advanced"
        },
        "otherCode": {
          "type": "string",
          "x-ms-summary": "Other Code",
          "x-ms-visibility": "advanced"
        },
        "otherId": {
          "type": "string",
          "x-ms-summary": "Other ID",
          "x-ms-visibility": "advanced"
        },
        "payMethod": {
          "type": "string",
          "x-ms-summary": "Pay Method",
          "x-ms-visibility": "advanced"
        },
        "productCode": {
          "type": "string",
          "x-ms-summary": "Product Code"
        },
        "quantity": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Quantity"
        },
        "recurringRequest": {
          "type": "boolean",
          "x-ms-summary": "Recurring Request"
        },
        "seqn": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Sequence",
          "x-ms-visibility": "important"
        },
        "solicitorId": {
          "type": "string",
          "x-ms-summary": "Solicitor ID"
        },
        "sourceCode": {
          "type": "string",
          "x-ms-summary": "Source Code"
        },
        "sourceSystem": {
          "type": "string",
          "x-ms-summary": "Source System"
        },
        "statusCode": {
          "type": "string",
          "x-ms-summary": "Status Code"
        },
        "taxableValue": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Taxable Value",
          "x-ms-visibility": "advanced"
        },
        "thruDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Thru Date"
        },
        "ticklerDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Tickler Date",
          "x-ms-visibility": "advanced"
        },
        "transactionDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Transaction Date"
        },
        "uF1": {
          "description": "User Field 1 (String)",
          "type": "string",
          "x-ms-summary": "UF1",
          "x-ms-visibility": "advanced"
        },
        "uF2": {
          "description": "User Field 2 (String)",
          "type": "string",
          "x-ms-summary": "UF2",
          "x-ms-visibility": "advanced"
        },
        "uF3": {
          "description": "User Field 3 (String)",
          "type": "string",
          "x-ms-summary": "UF3",
          "x-ms-visibility": "advanced"
        },
        "uF4": {
          "format": "double",
          "description": "User Field 4 (Decimal)",
          "type": "number",
          "x-ms-summary": "UF4",
          "x-ms-visibility": "advanced"
        },
        "uF5": {
          "format": "double",
          "description": "User Field 5 (Decimal)",
          "type": "number",
          "x-ms-summary": "UF5",
          "x-ms-visibility": "advanced"
        },
        "uF6": {
          "format": "date",
          "description": "User Field 6 (Date)",
          "type": "string",
          "x-ms-summary": "UF6",
          "x-ms-visibility": "advanced"
        },
        "uF7": {
          "format": "date",
          "description": "User Field 7 (Date)",
          "type": "string",
          "x-ms-summary": "UF7",
          "x-ms-visibility": "advanced"
        },
        "units": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Units"
        }
      }
    },
    "AddressDTO": {
      "type": "object",
      "properties": {
        "addressId": {
          "description": "Unique ID for this address record.",
          "type": "string",
          "x-ms-summary": "Address ID",
          "x-ms-visibility": "advanced"
        },
        "addressLines": {
          "description": "Newline-separated address street lines.",
          "type": "string",
          "x-ms-summary": "Address Lines"
        },
        "city": {
          "description": "City name on the address.",
          "type": "string",
          "x-ms-summary": "City Name"
        },
        "stateProvinceCode": {
          "description": "Abbreviated code for the state/province.",
          "type": "string",
          "x-ms-summary": "State/Province Code"
        },
        "postalCode": {
          "description": "Postal or ZIP code.",
          "type": "string",
          "x-ms-summary": "Postal Code"
        },
        "countryCode": {
          "description": "Abbreviated country code.",
          "type": "string",
          "x-ms-summary": "Country Code"
        },
        "phone": {
          "description": "Formatted phone number for this address.",
          "type": "string",
          "x-ms-summary": "Phone Number"
        },
        "email": {
          "description": "Email for this address.",
          "type": "string",
          "x-ms-summary": "Email Address"
        },
        "fullAddress": {
          "description": "Full computed address with newlines.",
          "type": "string",
          "x-ms-summary": "Full Address"
        },
        "nameAndFullAddress": {
          "description": "Full computed address with the contact's name on the first line.",
          "type": "string",
          "x-ms-summary": "Name and Full Address"
        },
        "addressPurpose": {
          "description": "Address purpose (category) name.",
          "type": "string",
          "x-ms-summary": "Address Purpose"
        },
        "communicationPreferences": {
          "description": "List of communication preference types.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Communication Preference List"
        }
      }
    },
    "AddressListDTO": {
      "type": "object",
      "properties": {
        "addresses": {
          "description": "The list of address objects for the specified contact",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressDTO"
          },
          "x-ms-summary": "Address List"
        }
      }
    },
    "ContactDTO": {
      "type": "object",
      "properties": {
        "contactType": {
          "description": "The type of contact (organization or person)",
          "type": "string",
          "x-ms-summary": "Contact Type"
        },
        "id": {
          "description": "The iMIS ID (Also referred to as: Contact ID, Party ID)",
          "type": "string",
          "x-ms-summary": "iMIS ID",
          "x-ms-visibility": "important"
        },
        "name": {
          "description": "The computed person's full name, or organization name, of the contact",
          "type": "string",
          "x-ms-summary": "Name",
          "x-ms-visibility": "important"
        },
        "namePrefix": {
          "description": "The contact's name prefix (e.g. \"Mrs.\")",
          "type": "string",
          "x-ms-summary": "Name Prefix",
          "x-ms-visibility": "advanced"
        },
        "firstName": {
          "description": "The contact's first name",
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "informalName": {
          "description": "The contact's informal name (or nickname)",
          "type": "string",
          "x-ms-summary": "Informal Name"
        },
        "middleName": {
          "description": "The contact's middle name",
          "type": "string",
          "x-ms-summary": "Middle Name",
          "x-ms-visibility": "advanced"
        },
        "lastName": {
          "description": "The contact's last name",
          "type": "string",
          "x-ms-summary": "Last Name"
        },
        "nameSuffix": {
          "description": "The contact's name suffix (e.g. \"Jr.\")",
          "type": "string",
          "x-ms-summary": "Name Suffix",
          "x-ms-visibility": "advanced"
        },
        "functionalTitle": {
          "description": "The contact's functional title, including any designations",
          "type": "string",
          "x-ms-summary": "Functional Title",
          "x-ms-visibility": "advanced"
        },
        "isMember": {
          "description": "Flag that specifies if this contact is a member of the organization",
          "type": "boolean",
          "x-ms-summary": "Is Member"
        },
        "isActive": {
          "description": "Flag that specifies if this contact is marked as active (i.e. not marked for deletion, deceased, etc)",
          "type": "boolean",
          "x-ms-summary": "Is Active"
        },
        "organizationName": {
          "description": "The name of the organization that this contact belongs to",
          "type": "string",
          "x-ms-summary": "Organization Name"
        },
        "organizationId": {
          "description": "For person types, specifies the parent organization ID that is linked",
          "type": "string",
          "x-ms-summary": "Organization ID"
        },
        "email": {
          "description": "The contact's primary e-mail address",
          "type": "string",
          "x-ms-summary": "Email",
          "x-ms-visibility": "important"
        },
        "workPhone": {
          "description": "The contact's work phone number",
          "type": "string",
          "x-ms-summary": "Work Phone",
          "x-ms-visibility": "advanced"
        },
        "homePhone": {
          "description": "The contact's home phone number",
          "type": "string",
          "x-ms-summary": "Home Phone",
          "x-ms-visibility": "advanced"
        },
        "mobilePhone": {
          "description": "The contact's mobile phone number",
          "type": "string",
          "x-ms-summary": "Mobile Phone"
        },
        "fax": {
          "description": "The contact's fax number",
          "type": "string",
          "x-ms-summary": "Fax",
          "x-ms-visibility": "advanced"
        },
        "gender": {
          "description": "The contact's gender code (e.g. \"M\", \"F\", or any other defined codes)",
          "type": "string",
          "x-ms-summary": "Gender"
        },
        "memberType": {
          "description": "The contact's member type code (e.g. \"NM\" or \"WEB\")",
          "type": "string",
          "x-ms-summary": "Member Type",
          "x-ms-visibility": "important"
        },
        "billingCategory": {
          "description": "The contact's billing category name",
          "type": "string",
          "x-ms-summary": "Billing Category",
          "x-ms-visibility": "advanced"
        },
        "majorKey": {
          "description": "The contact's major key field",
          "type": "string",
          "x-ms-summary": "Major Key",
          "x-ms-visibility": "advanced"
        },
        "status": {
          "description": "The contact's status code (e.g. \"A\", \"D\", \"X\")",
          "type": "string",
          "x-ms-summary": "Status"
        },
        "contactKey": {
          "description": "The contact's key, sometimes referred to as the \"Net ID\" (a Guid)",
          "type": "string",
          "x-ms-summary": "Contact Key"
        },
        "birthDate": {
          "format": "date",
          "description": "The contact's birth date",
          "type": "string",
          "x-ms-summary": "Birth Date"
        },
        "joinDate": {
          "format": "date",
          "description": "The contact's join date",
          "type": "string",
          "x-ms-summary": "Join Date"
        },
        "paidThruDate": {
          "format": "date",
          "description": "The contact's membership paid thru date (if a member)",
          "type": "string",
          "x-ms-summary": "Paid Thru"
        },
        "renewedThruDate": {
          "format": "date",
          "description": "The contact's renewed thru date",
          "type": "string",
          "x-ms-summary": "Renewed Thru"
        }
      }
    },
    "ContactListDTO": {
      "type": "object",
      "properties": {
        "oDataNextLink": {
          "description": "The fully-qualified URL to the next page, or null if there is no next page.",
          "type": "string",
          "x-ms-visibility": "internal"
        },
        "value": {
          "description": "The list of contact records",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactDTO"
          },
          "x-ms-summary": "Contact List"
        }
      }
    },
    "ContactPictureDTO": {
      "description": "Represents a contact's profile picture",
      "type": "object",
      "properties": {
        "id": {
          "description": "The iMIS ID associated with this picture",
          "type": "string",
          "x-ms-summary": "iMIS ID"
        },
        "pictureData": {
          "format": "byte",
          "description": "The picture data",
          "type": "string",
          "x-ms-summary": "Picture Data"
        }
      }
    },
    "ErrorResponse": {
      "description": "Indicates an error occurred during processing",
      "type": "object",
      "properties": {
        "message": {
          "description": "The friendly error message",
          "type": "string"
        }
      }
    },
    "GenTableDataDTO": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "MailingAddressUpdateDTO": {
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The iMIS ID of the address to update",
          "minLength": 1,
          "type": "string",
          "x-ms-summary": "iMIS ID",
          "x-ms-visibility": "important"
        },
        "address1": {
          "description": "Address Line 1",
          "type": "string",
          "x-ms-summary": "Address 1"
        },
        "address2": {
          "description": "Address Line 2",
          "type": "string",
          "x-ms-summary": "Address 2"
        },
        "city": {
          "description": "City name on the address",
          "type": "string",
          "x-ms-summary": "City Name"
        },
        "stateProvinceCode": {
          "description": "Abbreviated code for the state/province",
          "type": "string",
          "x-ms-summary": "State/Province Code"
        },
        "postalCode": {
          "description": "Postal or ZIP code",
          "type": "string",
          "x-ms-summary": "Postal Code"
        },
        "countryCode": {
          "description": "Abbreviated country code",
          "type": "string",
          "x-ms-summary": "Country Code"
        },
        "phone": {
          "description": "Formatted phone number for this address",
          "type": "string",
          "x-ms-summary": "Phone Number"
        },
        "email": {
          "description": "Email for this address",
          "type": "string",
          "x-ms-summary": "Email Address"
        },
        "address3": {
          "description": "Address Line 3",
          "type": "string",
          "x-ms-summary": "Address 3",
          "x-ms-visibility": "advanced"
        },
        "fax": {
          "description": "Formatted fax number for this address",
          "type": "string",
          "x-ms-summary": "Fax Number",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "MemberTypeDTO": {
      "type": "object",
      "properties": {
        "memberType": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "OrderDTO": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string",
          "x-ms-summary": "Ship To Address Line 1"
        },
        "address2": {
          "type": "string",
          "x-ms-summary": "Ship To Address Line 2"
        },
        "address3": {
          "type": "string",
          "x-ms-summary": "Ship To Address Line 3"
        },
        "addressFormat": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Ship To Address Format Code"
        },
        "balance": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Balance Amount",
          "x-ms-visibility": "important"
        },
        "batchNumber": {
          "type": "string",
          "x-ms-summary": "Batch Number"
        },
        "billToId": {
          "type": "string",
          "x-ms-summary": "Bill To iMIS ID",
          "x-ms-visibility": "important"
        },
        "city": {
          "type": "string",
          "x-ms-summary": "Ship To Address City"
        },
        "companyId": {
          "type": "string",
          "x-ms-summary": "Company iMIS ID"
        },
        "companyMemberType": {
          "type": "string",
          "x-ms-summary": "Company Member Type"
        },
        "company": {
          "type": "string",
          "x-ms-summary": "Company Name"
        },
        "companySort": {
          "type": "string",
          "x-ms-summary": "Company Sort Code"
        },
        "country": {
          "type": "string",
          "x-ms-summary": "Ship To Address Country"
        },
        "customerReference": {
          "type": "string",
          "x-ms-summary": "Customer Reference"
        },
        "email": {
          "type": "string",
          "x-ms-summary": "Ship To Email Address"
        },
        "freight1": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Freight 1 Amount"
        },
        "freight2": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Freight 2 Amount"
        },
        "fullAddress": {
          "type": "string",
          "x-ms-summary": "Shipp To Full Address"
        },
        "fullName": {
          "type": "string",
          "x-ms-summary": "Ship To Full Name"
        },
        "handling1": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Handling 1 Amount"
        },
        "handling2": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Handling 2 Amount"
        },
        "holdCode": {
          "type": "string",
          "x-ms-summary": "Hold Code"
        },
        "holdComment": {
          "type": "string",
          "x-ms-summary": "Hold Comment"
        },
        "holdFlag": {
          "type": "boolean",
          "x-ms-summary": "Is Held?"
        },
        "invoiceReferenceNumber": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Invoice Reference Number",
          "x-ms-visibility": "important"
        },
        "memberType": {
          "type": "string",
          "x-ms-summary": "Ship To Member Type"
        },
        "notes": {
          "type": "string",
          "x-ms-summary": "Order Notes"
        },
        "orderDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Order Date"
        },
        "orderNumber": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Order Number",
          "x-ms-visibility": "important"
        },
        "orderTypeCode": {
          "type": "string",
          "x-ms-summary": "Order Type Code"
        },
        "entityCode": {
          "type": "string",
          "x-ms-summary": "Entity Code"
        },
        "payType": {
          "type": "string",
          "x-ms-summary": "Pay Type"
        },
        "phone": {
          "type": "string",
          "x-ms-summary": "Ship To Phone"
        },
        "sourceCode": {
          "type": "string",
          "x-ms-summary": "Source Code"
        },
        "shipToId": {
          "type": "string",
          "x-ms-summary": "Ship To iMIS ID",
          "x-ms-visibility": "important"
        },
        "stage": {
          "type": "string",
          "x-ms-summary": "Order Stage"
        },
        "stateProvince": {
          "type": "string",
          "x-ms-summary": "Ship To State/Province"
        },
        "status": {
          "type": "string",
          "x-ms-summary": "Order Status"
        },
        "tax1": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Tax 1 Amount"
        },
        "tax2": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Tax 2 Amount"
        },
        "tax3": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Tax 3 Amount"
        },
        "taxRate1": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Tax 1 Rate"
        },
        "taxRate2": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Tax 2 Rate"
        },
        "taxRate3": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Tax 3 Rate"
        },
        "title": {
          "type": "string",
          "x-ms-summary": "Order Title"
        },
        "totalCharges": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Order Total Charges",
          "x-ms-visibility": "important"
        },
        "totalPayments": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Order Total Payments",
          "x-ms-visibility": "important"
        },
        "totalQuantityBackordered": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Total Quantity Backordered"
        },
        "totalQuantityOrdered": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Total Quantity Ordered"
        },
        "zip": {
          "type": "string",
          "x-ms-summary": "Ship To Postal Code"
        },
        "sourceSystem": {
          "type": "string",
          "x-ms-summary": "Source System",
          "x-ms-visibility": "important"
        },
        "discountCode": {
          "type": "string",
          "x-ms-summary": "Discount Code"
        },
        "vatTaxCodeFh": {
          "type": "string",
          "x-ms-summary": "VAT Tax Code"
        },
        "undiscountedTotal": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Undiscounted Total"
        },
        "termsCode": {
          "type": "string",
          "x-ms-summary": "Terms Code"
        },
        "taxRateFh": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Tax Rate"
        },
        "taxAuthor1": {
          "type": "string",
          "x-ms-summary": "Tax 1 Author"
        },
        "taxAuthor2": {
          "type": "string",
          "x-ms-summary": "Tax 2 Author"
        },
        "taxAuthor3": {
          "type": "string",
          "x-ms-summary": "Tax 3 Author"
        },
        "taxExempt": {
          "type": "string",
          "x-ms-summary": "Tax Exempt"
        },
        "affectInventory": {
          "type": "boolean",
          "x-ms-summary": "Affects Inventory?"
        },
        "freightTax": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Freight Tax Amount"
        },
        "handlingTax": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Handling Tax Amount"
        },
        "invoiceDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Invoice Date"
        },
        "invoiceNumber": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Invoice Number"
        },
        "lineTotal": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Line Total Amount"
        },
        "shipMethod": {
          "type": "string",
          "x-ms-summary": "Shipping Method"
        },
        "shipPapersDateTime": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Ship Papers Date"
        },
        "shippedDateTime": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Shipped Date"
        },
        "totalWeight": {
          "format": "double",
          "type": "number",
          "x-ms-summary": "Total Weight"
        },
        "enteredBy": {
          "type": "string",
          "x-ms-summary": "Entered By"
        },
        "enteredDateTime": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Entered Date/Time"
        }
      }
    },
    "OrderListDTO": {
      "type": "object",
      "properties": {
        "oDataNextLink": {
          "description": "The fully-qualified URL to the next page, or null if there is no next page.",
          "type": "string",
          "x-ms-visibility": "internal"
        },
        "value": {
          "description": "The list of order records",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderDTO"
          },
          "x-ms-summary": "Order List"
        }
      }
    },
    "OrganizationCreateDTO": {
      "type": "object",
      "properties": {
        "organizationName": {
          "description": "The name of this organization",
          "type": "string",
          "x-ms-summary": "Organization Name",
          "x-ms-visibility": "important"
        },
        "websiteUrl": {
          "description": "The website URL for this organization's homepage",
          "type": "string",
          "x-ms-summary": "Website URL"
        },
        "email": {
          "description": "The organization's primary e-mail address",
          "type": "string",
          "x-ms-summary": "Email",
          "x-ms-visibility": "important"
        },
        "workPhone": {
          "description": "The organization's work phone number",
          "type": "string",
          "x-ms-summary": "Work Phone",
          "x-ms-visibility": "advanced"
        },
        "fax": {
          "description": "The organization's fax number",
          "type": "string",
          "x-ms-summary": "Fax",
          "x-ms-visibility": "advanced"
        },
        "memberType": {
          "description": "The organization's member type code (e.g. \"NM\" or \"WEB\")",
          "type": "string",
          "x-ms-summary": "Member Type",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "ContactMetadataMemberTypeListForOrganization",
            "value-path": "MemberType",
            "value-title": "Description"
          }
        },
        "billingCategory": {
          "description": "The organization's billing category name",
          "type": "string",
          "x-ms-summary": "Billing Category",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "ContactMetadataBillingCategoryList",
            "value-path": "Code",
            "value-title": "Description"
          }
        },
        "majorKey": {
          "description": "The organization's major key field",
          "type": "string",
          "x-ms-summary": "Major Key",
          "x-ms-visibility": "advanced"
        },
        "status": {
          "description": "The organization's status code (e.g. \"A\", \"D\", \"X\")",
          "type": "string",
          "x-ms-summary": "Status",
          "x-ms-dynamic-values": {
            "operationId": "ContactMetadataPartyStatusList",
            "value-path": "Code",
            "value-title": "Description"
          }
        },
        "joinDate": {
          "format": "date",
          "description": "The organization's join date",
          "type": "string",
          "x-ms-summary": "Join Date"
        }
      }
    },
    "OrganizationUpdateDTO": {
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The iMIS ID (Also referred to as: Contact ID, Party ID)",
          "minLength": 1,
          "type": "string",
          "x-ms-summary": "iMIS ID",
          "x-ms-visibility": "important"
        },
        "organizationName": {
          "description": "The name of this organization",
          "type": "string",
          "x-ms-summary": "Organization Name"
        },
        "websiteUrl": {
          "description": "The website URL for this organization's homepage",
          "type": "string",
          "x-ms-summary": "Website URL"
        },
        "email": {
          "description": "The organization's primary e-mail address",
          "type": "string",
          "x-ms-summary": "Email"
        },
        "workPhone": {
          "description": "The organization's work phone number",
          "type": "string",
          "x-ms-summary": "Work Phone",
          "x-ms-visibility": "advanced"
        },
        "fax": {
          "description": "The organization's fax number",
          "type": "string",
          "x-ms-summary": "Fax",
          "x-ms-visibility": "advanced"
        },
        "memberType": {
          "description": "The organization's member type code (e.g. \"NM\" or \"WEB\")",
          "type": "string",
          "x-ms-summary": "Member Type",
          "x-ms-dynamic-values": {
            "operationId": "ContactMetadataMemberTypeListForOrganization",
            "value-path": "MemberType",
            "value-title": "Description"
          }
        },
        "billingCategory": {
          "description": "The organization's billing category name",
          "type": "string",
          "x-ms-summary": "Billing Category",
          "x-ms-visibility": "advanced"
        },
        "majorKey": {
          "description": "The organization's major key field",
          "type": "string",
          "x-ms-summary": "Major Key",
          "x-ms-visibility": "advanced"
        },
        "status": {
          "description": "The organization's status code (e.g. \"A\", \"D\", \"X\")",
          "type": "string",
          "x-ms-summary": "Status",
          "x-ms-dynamic-values": {
            "operationId": "ContactMetadataPartyStatusList",
            "value-path": "Code",
            "value-title": "Description"
          }
        }
      }
    },
    "PanelSummaryDTO": {
      "type": "object",
      "properties": {
        "entityTypeName": {
          "type": "string"
        },
        "primaryParentEntityTypeName": {
          "type": "string"
        },
        "singleOrMulti": {
          "type": "string"
        },
        "displayText": {
          "type": "string"
        }
      }
    },
    "PersonCreateDTO": {
      "type": "object",
      "properties": {
        "namePrefix": {
          "description": "The contact's name prefix (e.g. \"Mrs.\")",
          "type": "string",
          "x-ms-summary": "Name Prefix",
          "x-ms-visibility": "advanced"
        },
        "firstName": {
          "description": "The contact's first name",
          "type": "string",
          "x-ms-summary": "First Name",
          "x-ms-visibility": "important"
        },
        "informalName": {
          "description": "The contact's informal name (or nickname)",
          "type": "string",
          "x-ms-summary": "Informal Name"
        },
        "middleName": {
          "description": "The contact's middle name",
          "type": "string",
          "x-ms-summary": "Middle Name",
          "x-ms-visibility": "advanced"
        },
        "lastName": {
          "description": "The contact's last name",
          "type": "string",
          "x-ms-summary": "Last Name",
          "x-ms-visibility": "important"
        },
        "nameSuffix": {
          "description": "The contact's name suffix (e.g. \"Jr.\")",
          "type": "string",
          "x-ms-summary": "Name Suffix",
          "x-ms-visibility": "advanced"
        },
        "functionalTitle": {
          "description": "The contact's functional title code value",
          "type": "string",
          "x-ms-summary": "Functional Title",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "ContactMetadataFunctionalTitleList",
            "value-path": "Code",
            "value-title": "Description"
          }
        },
        "parentOrganizationId": {
          "description": "Specify the iMIS ID of a parent organization to link this person to",
          "type": "string",
          "x-ms-summary": "Parent Organization ID",
          "x-ms-visibility": "important"
        },
        "organizationName": {
          "description": "The name of the organization that this contact belongs to (not used if Parent Organization ID is set)",
          "type": "string",
          "x-ms-summary": "Organization Name"
        },
        "email": {
          "description": "The contact's primary e-mail address",
          "type": "string",
          "x-ms-summary": "Email",
          "x-ms-visibility": "important"
        },
        "workPhone": {
          "description": "The contact's work phone number",
          "type": "string",
          "x-ms-summary": "Work Phone",
          "x-ms-visibility": "advanced"
        },
        "homePhone": {
          "description": "The contact's home phone number",
          "type": "string",
          "x-ms-summary": "Home Phone",
          "x-ms-visibility": "advanced"
        },
        "mobilePhone": {
          "description": "The contact's mobile phone number",
          "type": "string",
          "x-ms-summary": "Mobile Phone",
          "x-ms-visibility": "important"
        },
        "fax": {
          "description": "The contact's fax number",
          "type": "string",
          "x-ms-summary": "Fax",
          "x-ms-visibility": "advanced"
        },
        "gender": {
          "description": "The contact's gender code (e.g. \"M\", \"F\", or any other defined codes)",
          "type": "string",
          "x-ms-summary": "Gender",
          "x-ms-dynamic-values": {
            "operationId": "ContactMetadataGenderList",
            "value-path": "Code",
            "value-title": "Description"
          }
        },
        "memberType": {
          "description": "The contact's member type code (e.g. \"NM\" or \"WEB\")",
          "type": "string",
          "x-ms-summary": "Member Type",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "ContactMetadataMemberTypeListForPerson",
            "value-path": "MemberType",
            "value-title": "Description"
          }
        },
        "billingCategory": {
          "description": "The contact's billing category name",
          "type": "string",
          "x-ms-summary": "Billing Category",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "ContactMetadataBillingCategoryList",
            "value-path": "Code",
            "value-title": "Description"
          }
        },
        "majorKey": {
          "description": "The contact's major key field",
          "type": "string",
          "x-ms-summary": "Major Key",
          "x-ms-visibility": "advanced"
        },
        "status": {
          "description": "The contact's status code (e.g. \"A\", \"D\", \"X\")",
          "type": "string",
          "x-ms-summary": "Status",
          "x-ms-dynamic-values": {
            "operationId": "ContactMetadataPartyStatusList",
            "value-path": "Code",
            "value-title": "Description"
          }
        },
        "birthDate": {
          "format": "date",
          "description": "The contact's birth date",
          "type": "string",
          "x-ms-summary": "Birth Date"
        },
        "joinDate": {
          "format": "date",
          "description": "The contact's join date",
          "type": "string",
          "x-ms-summary": "Join Date"
        }
      }
    },
    "PersonUpdateDTO": {
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The iMIS ID (Also referred to as: Contact ID, Party ID)",
          "minLength": 1,
          "type": "string",
          "x-ms-summary": "iMIS ID",
          "x-ms-visibility": "important"
        },
        "namePrefix": {
          "description": "The contact's name prefix (e.g. \"Mrs.\")",
          "type": "string",
          "x-ms-summary": "Name Prefix",
          "x-ms-visibility": "advanced"
        },
        "firstName": {
          "description": "The contact's first name",
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "informalName": {
          "description": "The contact's informal name (or nickname)",
          "type": "string",
          "x-ms-summary": "Informal Name"
        },
        "middleName": {
          "description": "The contact's middle name",
          "type": "string",
          "x-ms-summary": "Middle Name",
          "x-ms-visibility": "advanced"
        },
        "lastName": {
          "description": "The contact's last name",
          "type": "string",
          "x-ms-summary": "Last Name"
        },
        "nameSuffix": {
          "description": "The contact's name suffix (e.g. \"Jr.\")",
          "type": "string",
          "x-ms-summary": "Name Suffix",
          "x-ms-visibility": "advanced"
        },
        "functionalTitle": {
          "description": "The contact's functional title code value",
          "type": "string",
          "x-ms-summary": "Functional Title",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "ContactMetadataFunctionalTitleList",
            "value-path": "Code",
            "value-title": "Description"
          }
        },
        "parentOrganizationId": {
          "description": "Specify the iMIS ID of a parent organization to link this person to",
          "type": "string",
          "x-ms-summary": "Parent Organization ID"
        },
        "email": {
          "description": "The contact's primary e-mail address",
          "type": "string",
          "x-ms-summary": "Email"
        },
        "workPhone": {
          "description": "The contact's work phone number",
          "type": "string",
          "x-ms-summary": "Work Phone",
          "x-ms-visibility": "advanced"
        },
        "homePhone": {
          "description": "The contact's home phone number",
          "type": "string",
          "x-ms-summary": "Home Phone",
          "x-ms-visibility": "advanced"
        },
        "mobilePhone": {
          "description": "The contact's mobile phone number",
          "type": "string",
          "x-ms-summary": "Mobile Phone"
        },
        "fax": {
          "description": "The contact's fax number",
          "type": "string",
          "x-ms-summary": "Fax",
          "x-ms-visibility": "advanced"
        },
        "gender": {
          "description": "The contact's gender code (e.g. \"M\", \"F\", or any other defined codes)",
          "type": "string",
          "x-ms-summary": "Gender",
          "x-ms-dynamic-values": {
            "operationId": "ContactMetadataGenderList",
            "value-path": "Code",
            "value-title": "Description"
          }
        },
        "memberType": {
          "description": "The contact's member type code (e.g. \"NM\" or \"WEB\")",
          "type": "string",
          "x-ms-summary": "Member Type",
          "x-ms-dynamic-values": {
            "operationId": "ContactMetadataMemberTypeListForPerson",
            "value-path": "MemberType",
            "value-title": "Description"
          }
        },
        "billingCategory": {
          "description": "The contact's billing category name",
          "type": "string",
          "x-ms-summary": "Billing Category",
          "x-ms-visibility": "advanced"
        },
        "majorKey": {
          "description": "The contact's major key field",
          "type": "string",
          "x-ms-summary": "Major Key",
          "x-ms-visibility": "advanced"
        },
        "status": {
          "description": "The contact's status code (e.g. \"A\", \"D\", \"X\")",
          "type": "string",
          "x-ms-summary": "Status",
          "x-ms-dynamic-values": {
            "operationId": "ContactMetadataPartyStatusList",
            "value-path": "Code",
            "value-title": "Description"
          }
        }
      }
    },
    "ProblemDetails": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "status": {
          "format": "int32",
          "type": "integer"
        },
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        }
      },
      "additionalProperties": { }
    }
  },
  "securityDefinitions": {
    "CSI API Key": {
      "type": "apiKey",
      "name": "X-API-Key",
      "in": "header",
      "description": "Paste your CSI API Key found in the CSI Cloud Dashboard."
    }
  },
  "security": [
    {
      "CSI API Key": [ ]
    }
  ],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.csiinc.com/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.csiinc.com/privacy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Data;Sales and CRM"
    }
  ]
}
