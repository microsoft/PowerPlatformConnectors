{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "help@almabase.com",
      "name": "Almabase Support",
      "url": "https://docs.almabase.com"
    },
    "description": "Almabase is world's most loved alumni management software to build alumni-centric programs to increase participation, donor engagement, and host engaging online communities.\n",
    "title": "Almabase",
    "version": "1.0",
    "x-ms-api-annotation": {
      "status": "Preview"
    }
  },
  "host": "api.almabaseapp.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "security": [
    {
      "API Key": []
    }
  ],
  "securityDefinitions": {
    "API Key": {
      "in": "header",
      "name": "X-API-ACCESS-TOKEN",
      "type": "apiKey"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://almabase.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.almabase.com/ecloud-privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Sales and CRM;Productivity"
    }
  ],
  "definitions": {
    "v1.FormApi.FormEntryCreatedOrUpdatedWebhookRequest": {
      "properties": {
        "callback_url": {
          "description": "Callback URL",
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-summary": "Callback URL",
          "x-ms-visibility": "internal"
        },
        "events": {
          "default": "com.almabase.customforms.customformentry.created",
          "description": "The list of events to trigger the flow.",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetFormEntryMetadataWebhookEvents"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetFormEntryMetadataWebhookEvents",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "When",
          "x-ms-visibility": "important"
        },
        "object_id": {
          "description": "System generated ID to uniquely identify a form.",
          "format": "int32",
          "type": "integer",
          "x-ms-dynamic-values": {
            "operationId": "ListForms",
            "parameters": {
              "fields": [
                "id",
                "title"
              ]
            },
            "value-path": "id",
            "value-title": "title"
          },
          "x-ms-summary": "Form",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "object_id",
        "events",
        "callback_url"
      ],
      "type": "object"
    },
    "v1.FormApi.FormEntryWebhookResponse": {
      "description": "Entry webhook schema in OpenAPI 2.0 format",
      "properties": {
        "properties": {
          "properties": {
            "data": {
              "description": "Form entry webhook data schema",
              "type": "object"
            },
            "time": {
              "description": "The event time.",
              "format": "date-time",
              "type": "string",
              "x-ms-summary": "Event Triggered At"
            },
            "type": {
              "description": "The event type.",
              "enum": [
                "com.almabase.customforms.customformentry.created",
                "com.almabase.customforms.customformentry.updated"
              ],
              "type": "string",
              "x-ms-summary": "Triggered Event Type"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1.FormApi.FormRead": {
      "description": "Form",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a form.",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "title": {
          "description": "The name of the form",
          "type": "string",
          "x-ms-summary": "Form Name"
        }
      },
      "type": "object"
    },
    "v1.FormApi.FormEntryAdd": {
      "description": "Entry webhook schema in OpenAPI 2.0 (swagger) format",
      "type": "object"
    },
    "v1.GivingApi.GiftWebhookRecordRead": {
      "description": "Record",
      "properties": {
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "first_name": {
          "description": "First name of the mapped record",
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "id": {
          "description": "System generated ID to uniquely identify a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_registered": {
          "description": "Indicate if the mapped record or donor registered on Almabase",
          "type": "boolean",
          "x-ms-summary": "Is Donor Registered on Almabase?"
        },
        "last_name": {
          "description": "Last name of the mapped record",
          "type": "string",
          "x-ms-summary": "Last Name"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.GiftSucceededOrFailedWebhookRequest": {
      "properties": {
        "callback_url": {
          "description": "callback_url",
          "title": "Callback URL",
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "events": {
          "default": "com.almabase.giving.gift.succeeded",
          "description": "The list of events to trigger the flow.",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetGiftMetadataWebhookEvents"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetGiftMetadataWebhookEvents",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "When",
          "x-ms-visibility": "important"
        },
        "object_id": {
          "description": "System generated ID to uniquely identify a giving page.",
          "format": "int32",
          "type": "integer",
          "x-ms-dynamic-values": {
            "operationId": "ListGivingPages",
            "parameters": {
              "fields": [
                "id",
                "name"
              ]
            },
            "value-path": "id",
            "value-title": "name"
          },
          "x-ms-summary": "Giving Page",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "object_id",
        "events",
        "callback_url"
      ],
      "type": "object"
    },
    "v1.GivingApi.GiftWebhookResponse": {
      "properties": {
        "data": {
          "description": "The event data.",
          "properties": {
            "amount": {
              "description": "The gift amount with two decimals.",
              "example": "10.00",
              "type": "string",
              "x-ms-summary": "Amount"
            },
            "completed_at": {
              "description": "The date when the status of the gift is marked as completed.",
              "format": "date-time",
              "type": "string",
              "x-ms-summary": "Date"
            },
            "email": {
              "description": "Email ID used by the donor for the gift.",
              "format": "email",
              "type": "string",
              "x-ms-summary": "Donor Email"
            },
            "id": {
              "description": "System generated ID to uniquely identify a gift.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "ID"
            },
            "is_email_new": {
              "description": "Indicates if the email provided by donor already exists on Almabase records.",
              "type": "boolean",
              "x-ms-summary": "Is New Email?"
            },
            "mapped_profile": {
              "description": "Mapped Record on Almabase.",
              "properties": {
                "schema": {
                  "$ref": "#/definitions/v1.GivingApi.GiftWebhookRecordRead"
                }
              },
              "type": "object",
              "x-ms-summary": "Mapped Record"
            },
            "name": {
              "description": "Full name of the donor.",
              "type": "string",
              "x-ms-summary": "Donor Name"
            },
            "page": {
              "description": "Giving Page associated with the Gift",
              "properties": {
                "id": {
                  "description": "System generated ID to uniquely identify a giving page.",
                  "format": "int32",
                  "type": "integer",
                  "x-ms-summary": "ID"
                },
                "name": {
                  "description": "Name of the associated giving page",
                  "type": "string",
                  "x-ms-summary": "Giving Page Name"
                }
              },
              "type": "object",
              "x-ms-summary": "Giving Page"
            },
            "status": {
              "description": "Status of the gift.",
              "type": "string",
              "x-ms-summary": "Status"
            }
          },
          "type": "object",
          "x-ms-summary": "Gift"
        },
        "time": {
          "description": "The event time.",
          "type": "string",
          "x-ms-summary": "Event Triggered At"
        },
        "type": {
          "description": "The event type.",
          "type": "string",
          "x-ms-summary": "Event Type"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.LocationRead": {
      "description": "The city used by the donor for the gift.",
      "properties": {
        "city": {
          "description": "The city of the donor",
          "example": "San Francisco",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "City"
        },
        "city_short_name": {
          "description": "The short representation of the City, e.g. SF",
          "example": "SF",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "City Short Name"
        },
        "coordinates": {
          "properties": {
            "latitude": {
              "description": "The latitude of the location",
              "example": "37.7749295",
              "format": "float",
              "readOnly": true,
              "type": "number",
              "x-ms-summary": "Latitude"
            },
            "longitude": {
              "description": "The longitude of the location",
              "example": "-122.4194155",
              "format": "float",
              "readOnly": true,
              "type": "number",
              "x-ms-summary": "Longitude"
            }
          },
          "readOnly": true,
          "type": "object"
        },
        "country": {
          "description": "The country of the donor",
          "example": "United States",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "Country"
        },
        "country_short_name": {
          "description": "The short representation of the country, e.g. US",
          "example": "US",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "Country Short Name"
        },
        "gpid": {
          "description": "The place id obtained from Google",
          "type": "string",
          "x-ms-summary": "Google Place Id"
        },
        "name": {
          "description": "The city of of the donor. Format: City Name, Short State Name, Short Country Name",
          "example": "San Francisco, CA, USA",
          "type": "string",
          "x-ms-summary": "City, State, Country"
        },
        "state": {
          "description": "The state of the donor",
          "example": "California",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "State"
        },
        "state_short_name": {
          "description": "The short representation of the state, e.g. CA",
          "example": "CA",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "State Short Name"
        }
      },
      "type": "object",
      "x-ms-summary": "Donor Address: Location"
    },
    "v1.GivingApi.FormFieldRead": {
      "description": "Form Field",
      "properties": {
        "display_value": {
          "description": "The formatted value entered by responders. e.g. Name of the File Upload.",
          "type": "string",
          "x-ms-summary": "Value"
        },
        "label": {
          "description": "The question/form field name on the form",
          "type": "string",
          "x-ms-summary": "Question/Form Field Name"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.FundAddOrEdit": {
      "description": "The fund associated with the gift split.",
      "properties": {
        "external_database_id": {
          "description": "A system assigned unique ID for the fund by the external database. e.g. System Record ID for Raiser Edge NXT, Object Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "is_default": {
          "default": false,
          "description": "Indicates to associated all the splits to this fund if no other funds are defined on Giving Page.",
          "type": "boolean",
          "x-ms-summary": "Is default fund?"
        },
        "is_other_fund": {
          "default": false,
          "description": "Indicates that the donors of this fund have given custom fund name.",
          "type": "boolean",
          "x-ms-summary": "Is Other Fund?",
          "x-ms-visibility": "advanced"
        },
        "name": {
          "description": "Name of the fund",
          "type": "string",
          "x-ms-summary": "Fund Name"
        }
      },
      "required": [
        "name"
      ],
      "type": "object",
      "x-ms-summary": "Fund"
    },
    "v1.GivingApi.FundRead": {
      "description": "The fund associated with the gift split.",
      "properties": {
        "external_database_id": {
          "description": "A system assigned unique ID for the fund by the external database. e.g. System Record ID for Raiser Edge NXT, Object Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "id": {
          "description": "System generated ID to uniquely identify a fund.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_default": {
          "description": "Indicates to associated all the splits to this fund if no other funds are defined on Giving Page.",
          "type": "boolean",
          "x-ms-summary": "Is default fund?"
        },
        "is_other_fund": {
          "description": "Indicates that the donors of this fund have given custom fund name.",
          "type": "boolean",
          "x-ms-summary": "Is Other Fund?"
        },
        "name": {
          "description": "Name of the fund",
          "type": "string",
          "x-ms-summary": "Name"
        }
      },
      "type": "object",
      "x-ms-summary": "Fund"
    },
    "v1.GivingApi.GiftAdd": {
      "description": "Gift",
      "properties": {
        "amount": {
          "description": "The gift amount with two decimals.",
          "example": "10.00",
          "type": "string",
          "x-ms-summary": "Gift Amount",
          "x-ms-visibility": "important"
        },
        "batch_number": {
          "description": "The batch number of the gift.",
          "type": "string",
          "x-ms-summary": "Batch Number",
          "x-ms-visibility": "advanced"
        },
        "completed_at": {
          "description": "The date when the status of the gift is marked as completed.",
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Gift Date",
          "x-ms-visibility": "important"
        },
        "currency": {
          "default": 1,
          "description": "Currency used by the donor for the gift.",
          "format": "int32",
          "type": "integer",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetGiftMetadataGiftCurrencies"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetGiftMetadataGiftCurrencies",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "Currency",
          "x-ms-visibility": "important"
        },
        "donor_address_line1": {
          "description": "The address line 1 used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Line 1",
          "x-ms-visibility": "important"
        },
        "donor_address_line2": {
          "description": "The address line 2 used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Line 2",
          "x-ms-visibility": "important"
        },
        "donor_city_place": {
          "$ref": "#/definitions/v1.GivingApi.LocationAdd"
        },
        "donor_email": {
          "description": "Email ID used by the donor for the gift.",
          "format": "email",
          "type": "string",
          "x-ms-summary": "Donor Email",
          "x-ms-visibility": "important"
        },
        "donor_name": {
          "description": "Full name of the donor.",
          "type": "string",
          "x-ms-summary": "Donor Name",
          "x-ms-visibility": "important"
        },
        "donor_phone_number": {
          "description": "Phone Number used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Phone Number",
          "x-ms-visibility": "advanced"
        },
        "donor_zip_code": {
          "description": "The zip code of the address used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Zip Code",
          "x-ms-visibility": "important"
        },
        "exclude_from_leaderboard": {
          "default": false,
          "description": "exclude_from_leaderboard",
          "type": "boolean",
          "x-ms-summary": "Is hidden from Leaderboard?",
          "x-ms-visibility": "advanced"
        },
        "honor_message": {
          "description": "A message for a gift tribute.",
          "type": "string",
          "x-ms-summary": "Tribute Message",
          "x-ms-visibility": "advanced"
        },
        "honor_prefix": {
          "description": "A prefix for a gift tribute. Available options are in_honor_of, in_memory_of, in_support_of",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetGiftMetadataGiftHonorPrefix"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetGiftMetadataGiftHonorPrefix",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "Tribute Prefix",
          "x-ms-visibility": "advanced"
        },
        "is_anonymous": {
          "description": "Indicates the wish of donor be be anonymous to other donors for this gift.",
          "type": "boolean",
          "x-ms-summary": "Is Anonymous?",
          "x-ms-visibility": "important"
        },
        "mode": {
          "description": "Mode of Payment, either online or offline.",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetGiftMetadataGiftModes"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetGiftMetadataGiftModes",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "Mode of Payment"
        },
        "note": {
          "description": "The note text.",
          "type": "string",
          "x-ms-summary": "Note",
          "x-ms-visibility": "advanced"
        },
        "other_fund_name": {
          "description": "When the donor selects a fund that's marked as is_other_fund, they add a custom fund name to attribute the gift.\n",
          "type": "string",
          "x-ms-summary": "Other Fund Name",
          "x-ms-visibility": "advanced"
        },
        "page": {
          "description": "The giving page associated with the gift.",
          "properties": {
            "id": {
              "description": "System generated ID to uniquely identify a giving page.",
              "format": "int32",
              "type": "integer",
              "x-ms-dynamic-values": {
                "operationId": "ListGivingPages",
                "parameters": {
                  "fields": [
                    "id",
                    "name"
                  ]
                },
                "value-path": "id",
                "value-title": "name"
              },
              "x-ms-summary": "Giving Page",
              "x-ms-visibility": "important"
            }
          },
          "type": "object",
          "x-ms-visibility": "important"
        },
        "profile": {
          "$ref": "#/definitions/v1.GivingApi.RecordAddOrEdit"
        },
        "splits": {
          "description": "The splits associated with the gift.",
          "items": {
            "$ref": "#/definitions/v1.GivingApi.GiftSplitAddOrEdit"
          },
          "type": "array",
          "x-ms-summary": "Splits",
          "x-ms-visibility": "important"
        },
        "status": {
          "default": "completed",
          "description": "Status of the gift.",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetGiftMetadataGiftStatus"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetGiftMetadataGiftStatus",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "Status",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "donor_name",
        "completed_at",
        "amount",
        "status",
        "mode",
        "currency",
        "splits"
      ],
      "type": "object"
    },
    "v1.GivingApi.GiftEdit": {
      "description": "Gift",
      "properties": {
        "batch_number": {
          "description": "The batch number of the gift.",
          "type": "string",
          "x-ms-summary": "Batch Number",
          "x-ms-visibility": "advanced"
        },
        "donor_address_line1": {
          "description": "The address line 1 used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Line 1",
          "x-ms-visibility": "important"
        },
        "donor_address_line2": {
          "description": "The address line 2 used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Line 2",
          "x-ms-visibility": "important"
        },
        "donor_city_place": {
          "$ref": "#/definitions/v1.GivingApi.LocationAdd"
        },
        "donor_name": {
          "description": "Full name of the donor.",
          "type": "string",
          "x-ms-summary": "Donor Name",
          "x-ms-visibility": "important"
        },
        "donor_phone_number": {
          "description": "Phone Number used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Phone Number",
          "x-ms-visibility": "advanced"
        },
        "donor_zip_code": {
          "description": "The zip code of the address used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Zip Code",
          "x-ms-visibility": "important"
        },
        "exclude_from_leaderboard": {
          "description": "exclude_from_leaderboard",
          "type": "boolean",
          "x-ms-summary": "Is hidden from Leaderboard?",
          "x-ms-visibility": "advanced"
        },
        "honor_message": {
          "description": "A message for a gift tribute.",
          "type": "string",
          "x-ms-summary": "Tribute Message",
          "x-ms-visibility": "advanced"
        },
        "honor_prefix": {
          "description": "A prefix for a gift tribute. Available options are in_honor_of, in_memory_of, in_support_of",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetGiftMetadataGiftHonorPrefix"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetGiftMetadataGiftHonorPrefix",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "Tribute Prefix",
          "x-ms-visibility": "advanced"
        },
        "is_anonymous": {
          "description": "Indicates the wish of donor be be anonymous to other donors for this gift.",
          "type": "boolean",
          "x-ms-summary": "Is Anonymous?",
          "x-ms-visibility": "important"
        },
        "note": {
          "description": "The note text.",
          "type": "string",
          "x-ms-summary": "Note",
          "x-ms-visibility": "advanced"
        },
        "other_fund_name": {
          "description": "When the donor selects a fund that's marked as is_other_fund, they add a custom fund name to attribute the gift.\n",
          "type": "string",
          "x-ms-summary": "Other Fund Name",
          "x-ms-visibility": "advanced"
        },
        "page": {
          "description": "The giving page associated with the gift.",
          "properties": {
            "id": {
              "description": "System generated ID to uniquely identify a giving page.",
              "format": "int32",
              "type": "integer",
              "x-ms-dynamic-values": {
                "operationId": "ListGivingPages",
                "parameters": {
                  "fields": [
                    "id",
                    "name"
                  ]
                },
                "value-path": "id",
                "value-title": "name"
              },
              "x-ms-summary": "Giving Page",
              "x-ms-visibility": "important"
            }
          },
          "type": "object",
          "x-ms-visibility": "important"
        },
        "profile": {
          "$ref": "#/definitions/v1.GivingApi.RecordAddOrEdit"
        },
        "splits": {
          "description": "The splits associated with the gift.",
          "items": {
            "$ref": "#/definitions/v1.GivingApi.GiftSplitAddOrEdit"
          },
          "type": "array",
          "x-ms-summary": "Splits",
          "x-ms-visibility": "important"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.GiftRead": {
      "description": "Gift",
      "properties": {
        "amount": {
          "description": "The gift amount with two decimals.",
          "example": "10.00",
          "type": "string",
          "x-ms-summary": "Gift Amount"
        },
        "batch_number": {
          "description": "The batch number of the gift.",
          "type": "string",
          "x-ms-summary": "Batch Number",
          "x-ms-visibility": "advanced"
        },
        "completed_at": {
          "description": "The date when the status of the gift is marked as completed.",
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Gift Date"
        },
        "currency": {
          "description": "Currency used by the donor for the gift.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Currency"
        },
        "device": {
          "description": "Identify the device used to make the gift, e.g. pc, mobile or tablet.",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "Device"
        },
        "donor_address_line1": {
          "description": "The address line 1 used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Line 1"
        },
        "donor_address_line2": {
          "description": "The address line 2 used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Line 2"
        },
        "donor_city_place": {
          "$ref": "#/definitions/v1.GivingApi.LocationRead"
        },
        "donor_email": {
          "description": "Email ID used by the donor for the gift.",
          "format": "email",
          "type": "string",
          "x-ms-summary": "Donor Email"
        },
        "donor_name": {
          "description": "Full name of the donor.",
          "type": "string",
          "x-ms-summary": "Donor Name"
        },
        "donor_phone_number": {
          "description": "Phone Number used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Phone Number"
        },
        "donor_zip_code": {
          "description": "The zip code of the address used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Zip Code"
        },
        "exclude_from_leaderboard": {
          "default": false,
          "description": "exclude_from_leaderboard",
          "type": "boolean",
          "x-ms-summary": "Is hidden from Leaderboard?"
        },
        "honor_message": {
          "description": "A message for a gift tribute.",
          "type": "string",
          "x-ms-summary": "Tribute Message"
        },
        "honor_prefix": {
          "description": "A prefix for a gift tribute. Available options are in_honor_of, in_memory_of, in_support_of",
          "enum": [
            "in_honor_of",
            "in_memory_of",
            "in_support_of"
          ],
          "type": "string",
          "x-ms-summary": "Tribute Prefix"
        },
        "id": {
          "description": "System generated ID to uniquely identify a gift.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "influencer": {
          "$ref": "#/definitions/v1.GivingApi.InfluencerRead"
        },
        "is_anonymous": {
          "description": "Indicates the wish of donor be be anonymous to other donors for this gift.",
          "type": "boolean",
          "x-ms-summary": "Is Anonymous?"
        },
        "is_donor_covered_charges": {
          "default": false,
          "description": "Indicates if the donor has opted to cover the payment gateway charges when making the this gift?",
          "type": "boolean",
          "x-ms-summary": "Has donor covered the payment gateway charges?"
        },
        "is_email_added_to_profile": {
          "description": "Indicates if the email provided by donor is added on Almabase record (irrespective of is_email_new status)\n",
          "readOnly": true,
          "type": "boolean",
          "x-ms-summary": "Is Email Added to a Record on Almabase?"
        },
        "is_email_new": {
          "description": "Indicates if the email provided by donor already exists on Almabase records.",
          "readOnly": true,
          "type": "boolean",
          "x-ms-summary": "Is New Email?"
        },
        "is_profile_mapping_ignored": {
          "default": false,
          "description": "Indicates if the record mapping should be ignored.",
          "type": "boolean",
          "x-ms-summary": "Is Mapping to a Record on Almabase Ignored?"
        },
        "mode": {
          "description": "Mode of Payment, either online or offline.",
          "enum": [
            "online",
            "offline",
            "offline_cheque",
            "offline_wire_transfer",
            "offline_cash",
            "offline_demand_draft"
          ],
          "type": "string",
          "x-ms-summary": "Mode of Payment"
        },
        "note": {
          "description": "The note text.",
          "type": "string",
          "x-ms-summary": "Note"
        },
        "other_fund_name": {
          "description": "When the donor selects a fund that's marked as is_other_fund, they add a custom fund name to attribute the gift.\n",
          "type": "string",
          "x-ms-summary": "Other Fund Name"
        },
        "page": {
          "$ref": "#/definitions/v1.GivingApi.GivingPageAssociatedWithGift"
        },
        "post_payment_form_entry": {
          "description": "The responses of the form filled after the gift payment.",
          "properties": {
            "fields": {
              "items": {
                "$ref": "#/definitions/v1.GivingApi.FormFieldRead"
              },
              "type": "array",
              "x-ms-summary": "Fields"
            },
            "id": {
              "description": "System generated ID to uniquely identify a form submission.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "ID"
            }
          },
          "type": "object",
          "x-ms-summary": "Post-Payment Form"
        },
        "pre_payment_form_entry": {
          "description": "The responses of the form filled prior to gift payment.",
          "properties": {
            "fields": {
              "items": {
                "$ref": "#/definitions/v1.GivingApi.FormFieldRead"
              },
              "type": "array",
              "x-ms-summary": "Fields"
            },
            "id": {
              "description": "System generated ID to uniquely identify a form submission.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "ID"
            }
          },
          "x-ms-summary": "Pre-Payment Form"
        },
        "profile": {
          "$ref": "#/definitions/v1.GivingApi.RecordRead"
        },
        "referrer_link": {
          "description": "The website link to identify the source of how the donor visit. e.g. Donor visited the Giving campaign from Facebook, Google, etc.\n",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "Referrer Link"
        },
        "refund_amount": {
          "description": "The amount refunded to the donor. If the whole amount is refunded, the status of the gift would be refunded instead of completed.\n",
          "type": "string",
          "x-ms-summary": "Refund Amount"
        },
        "splits": {
          "description": "The splits associated with the gift.",
          "items": {
            "$ref": "#/definitions/v1.GivingApi.GiftSplitRead"
          },
          "type": "array",
          "x-ms-summary": "Splits"
        },
        "status": {
          "description": "Status of the gift.",
          "type": "string",
          "x-ms-summary": "Status"
        },
        "transaction": {
          "$ref": "#/definitions/v1.GivingApi.TransactionRead"
        },
        "utm_campaign": {
          "description": "Used for keyword analysis. utm_campaign identify a specific product promotion or strategic campaign. e.g. annual_fund_2020\n",
          "type": "string",
          "x-ms-summary": "UTM Campaign"
        },
        "utm_medium": {
          "description": "utm_medium identify a medium such as email or cost-per- click. e.g. cpc",
          "type": "string",
          "x-ms-summary": "UTM Medium"
        },
        "utm_source": {
          "description": "utm_source identify a search engine, newsletter name, or other source. e.g. Google",
          "type": "string",
          "x-ms-summary": "UTM Source"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.GiftSplitAddOrEdit": {
      "description": "Gift Split",
      "properties": {
        "amount": {
          "description": "The amount of the gift split.",
          "type": "string",
          "x-ms-summary": "Amount"
        },
        "fund": {
          "description": "The fund associated with the gift split.",
          "properties": {
            "id": {
              "description": "System generated ID to uniquely identify a fund.",
              "format": "int32",
              "type": "integer",
              "x-ms-dynamic-values": {
                "operationId": "ListFunds",
                "parameters": {
                  "fields": [
                    "id",
                    "name"
                  ]
                },
                "value-path": "id",
                "value-title": "name"
              },
              "x-ms-summary": "Fund",
              "x-ms-visibility": "important"
            }
          },
          "required": [
            "id"
          ],
          "type": "object",
          "x-ms-summary": "Fund"
        }
      },
      "required": [
        "fund",
        "amount"
      ],
      "type": "object"
    },
    "v1.GivingApi.GiftSplitRead": {
      "description": "Gift Split",
      "properties": {
        "amount": {
          "description": "The amount of the gift split.",
          "type": "string",
          "x-ms-summary": "Amount"
        },
        "fund": {
          "$ref": "#/definitions/v1.GivingApi.FundRead"
        },
        "id": {
          "description": "System generated ID to uniquely identify a gift split.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.GivingPageAdd": {
      "description": "Giving Page",
      "properties": {
        "name": {
          "description": "Name of the giving page",
          "type": "string",
          "x-ms-summary": "Name"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1.GivingApi.GivingPageAssociatedWithGift": {
      "description": "The giving page associated with the gift.",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a giving page.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "name": {
          "description": "Name of the associated Giving Page.",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "Name"
        }
      },
      "type": "object",
      "x-ms-summary": "Giving Page"
    },
    "v1.GivingApi.GivingPageRead": {
      "description": "Giving Page",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a giving page.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "name": {
          "description": "Name of the giving page",
          "type": "string",
          "x-ms-summary": "Name"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.InfluencerRead": {
      "description": "The public share link and private dashboard link",
      "properties": {
        "dashboard_url": {
          "description": "The private dashboard of the donor to monitor the number of page visits and gifts influenced by them\n",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Private Influencer Dashboard Link"
        },
        "page_share_url": {
          "description": "The public link of giving page/campaign of donor to track the influence on visits to Giving Page and the gifts.\n",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Public Share Link"
        }
      },
      "type": "object",
      "x-ms-summary": "Influencer"
    },
    "v1.GivingApi.LocationAdd": {
      "description": "The city used by the donor for the gift.",
      "properties": {
        "name": {
          "description": "The city of of the donor. Format: City Name, Short State Name, Short Country Name",
          "example": "San Francisco, CA, USA",
          "type": "string",
          "x-ms-summary": "Name: City, State, Country"
        }
      },
      "type": "object",
      "x-ms-summary": "Donor Address: Location",
      "x-ms-visibility": "important"
    },
    "v1.GivingApi.PaymentAccountRead": {
      "description": "The payment account associated with the transaction, e.g. BBMS, Stripe, Paypal, etc.",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a payment account.",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "name": {
          "description": "The name of the payment account.",
          "type": "string",
          "x-ms-summary": "Name"
        },
        "type": {
          "description": "The name of the payment gateway.",
          "type": "string",
          "x-ms-summary": "Gateway"
        }
      },
      "type": "object",
      "x-ms-summary": "Payment Account"
    },
    "v1.GivingApi.RecordAddOrEdit": {
      "description": "Mapped Record on Almabase. NOTE: The gift would be automatically mapped to a record with the email address same as donor email. x-ms-summary: Mapped Record\n",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        }
      },
      "type": "object",
      "x-ms-summary": "Mapped Record",
      "x-ms-visibility": "advanced"
    },
    "v1.GivingApi.RecordRead": {
      "description": "Mapped Record on Almabase",
      "properties": {
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "first_name": {
          "description": "First name of the mapped record",
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "formatted_name": {
          "description": "Full name of the mapped record",
          "type": "string",
          "x-ms-summary": "Full Name"
        },
        "id": {
          "description": "System generated ID to uniquely identify a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_registered": {
          "description": "Indicate if the mapped record or donor registered on Almabase",
          "type": "boolean",
          "x-ms-summary": "Is Donor Registered on Almabase?"
        },
        "last_name": {
          "description": "Last name of the mapped record",
          "type": "string",
          "x-ms-summary": "Last Name"
        },
        "present_picture": {
          "description": "The url of the record picture",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Picture URL"
        },
        "profile_url": {
          "description": "The record link on Almabase",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Link"
        }
      },
      "type": "object",
      "x-ms-summary": "Mapped Record"
    },
    "v1.GivingApi.RecurringGiftAssociatedWithGift": {
      "description": "Recurring Gift",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a recurring gift.",
          "type": "integer",
          "x-ms-summary": "ID"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.TransactionRead": {
      "description": "The online payment transaction associated with the gift.",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1.GivingApi.PaymentAccountRead"
        },
        "created_at": {
          "description": "The time of creating of this transaction.",
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Created at"
        },
        "failure_reason": {
          "description": "The transaction failure reason returned by the payment gateway.",
          "type": "string",
          "x-ms-summary": "Failure Reason"
        },
        "id": {
          "description": "System generated ID to uniquely identify a transaction.",
          "format": "uuid",
          "type": "string",
          "x-ms-summary": "ID"
        },
        "status": {
          "description": "Status of the transaction. - 1 (Unprocessed) - 2 (Succeeded) - 3 (Failed) - 4 (Pending) - 5 (Error)\nNOTE: These status are associated with the status of transaction by the Payment Gateway\n",
          "enum": [
            1,
            2,
            3,
            4,
            5
          ],
          "type": "integer",
          "x-ms-summary": "Status"
        },
        "transaction_id": {
          "description": "The unique ID generated by the payment gateway to identify the transaction. e.g. Blackbaud Merchant Services (BBMS) transaction ID, or Stripe Charge ID, Paypal transaction ID\n",
          "type": "string",
          "x-ms-summary": "Payment Gateway Reference ID"
        }
      },
      "type": "object",
      "x-ms-summary": "Online Transaction"
    },
    "v1.AlmasightsApi.RecordRead": {
      "description": "Record",
      "properties": {
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "first_name": {
          "description": "First name of the mapped record",
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "formatted_name": {
          "description": "Full name of the mapped record",
          "type": "string",
          "x-ms-summary": "Full Name"
        },
        "id": {
          "description": "System generated ID to uniquely identify a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_registered": {
          "description": "Indicate if the mapped record or donor registered on Almabase",
          "type": "boolean",
          "x-ms-summary": "Is Donor Registered on Almabase?"
        },
        "last_name": {
          "description": "Last name of the mapped record",
          "type": "string",
          "x-ms-summary": "Last Name"
        },
        "present_picture": {
          "description": "The url of the record picture",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Picture URL"
        },
        "profile_url": {
          "description": "The record link on Almabase",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Link"
        }
      },
      "type": "object"
    },
    "v1.AlmasightsApi.RecordAddOrEdit": {
      "description": "Record",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        }
      },
      "type": "object"
    },
    "v1.AlmasightsApi.TouchpointCustomObjectAdd": {
      "description": "Touchpoint body to create a new touchpoint",
      "properties": {
        "email": {
          "description": "Email ID used for the activity.",
          "format": "email",
          "type": "string",
          "x-ms-summary": "Email",
          "x-ms-visibility": "important"
        },
        "mapped_profile": {
          "description": "Record on Almabase.",
          "properties": {
            "schema": {
              "$ref": "#/definitions/v1.AlmasightsApi.RecordAddOrEdit"
            }
          },
          "type": "object",
          "x-ms-summary": "Record",
          "x-ms-visibility": "important"
        },
        "recorded_at": {
          "description": "The timestamp of the activity.",
          "example": "2018-03-20T09:12:28Z",
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Recorded At",
          "x-ms-visibility": "important"
        },
        "touchpoint_type": {
          "description": "Describe the activity, must start with a verd and use past tense.",
          "properties": {
            "id": {
              "format": "int32",
              "type": "integer",
              "x-ms-dynamic-list": {
                "itemTitlePath": "name",
                "itemValuePath": "id",
                "operationId": "ListTouchpointTypes",
                "parameters": {
                  "fields": {
                    "value": [
                      "id",
                      "name"
                    ]
                  },
                  "touchpoint_program": {
                    "parameterReference": "touchpoint_program"
                  }
                }
              },
              "x-ms-dynamic-values": {
                "operationId": "ListTouchpointTypes",
                "parameters": {
                  "fields": [
                    "id",
                    "name"
                  ],
                  "touchpoint_program": {
                    "parameter": "touchpoint_program"
                  }
                },
                "value-path": "id",
                "value-title": "name"
              },
              "x-ms-summary": "Type"
            }
          },
          "required": [
            "id"
          ],
          "type": "object",
          "x-ms-visibility": "important"
        },
        "trigger_type": {
          "default": "click",
          "description": "Trigger for the the activity, e.g. click, view, or search.",
          "enum": [
            "click",
            "view",
            "search"
          ],
          "example": "click",
          "type": "string",
          "x-ms-summary": "Trigger Type",
          "x-ms-visibility": "internal"
        }
      },
      "required": [
        "touchpoint_type",
        "trigger_type",
        "recorded_at"
      ],
      "type": "object"
    },
    "v1.AlmasightsApi.TouchpointCustomObjectRead": {
      "description": "Custom Touchpoint Object",
      "properties": {
        "email": {
          "description": "Email ID used for the activity.",
          "format": "email",
          "type": "string",
          "x-ms-summary": "Email",
          "x-ms-visibility": "important"
        },
        "id": {
          "description": "System generated ID to uniquely identify a custom toouchpoint object.",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_email_new": {
          "description": "Indicates if the email provided by user already exists on Almabase records.",
          "type": "boolean",
          "x-ms-summary": "Is New Email?"
        },
        "mapped_profile": {
          "description": "Record on Almabase.",
          "properties": {
            "schema": {
              "$ref": "#/definitions/v1.AlmasightsApi.RecordRead"
            }
          },
          "type": "object",
          "x-ms-summary": "Record",
          "x-ms-visibility": "important"
        },
        "recorded_at": {
          "description": "The timestamp of the activity.",
          "example": "2018-03-20T09:12:28Z",
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Recorded At",
          "x-ms-visibility": "important"
        },
        "touchpoint_type": {
          "description": "Describe the activity, must start with a verd and use past tense.",
          "example": "made-a-gift",
          "type": "string",
          "x-ms-summary": "Touchpoint Type",
          "x-ms-visibility": "important"
        },
        "trigger_type": {
          "default": "click",
          "description": "Trigger for the the activity, e.g. click, view, or search.",
          "enum": [
            "click",
            "view",
            "search"
          ],
          "example": "click",
          "type": "string",
          "x-ms-summary": "Trigger Type",
          "x-ms-visibility": "internal"
        }
      },
      "required": [
        "touchpoint_type",
        "trigger_type",
        "recorded_at"
      ],
      "type": "object"
    },
    "v1.AlmasightsApi.TouchpointProgramRead": {
      "description": "Touchpoint Program",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a program.",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "name": {
          "description": "The name of the program",
          "type": "string",
          "x-ms-summary": "Program Name"
        }
      },
      "type": "object"
    },
    "v1.AlmasightsApi.TouchpointTypeRead": {
      "description": "Touchpoint Type",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a type.",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "name": {
          "description": "The name of the type",
          "type": "string",
          "x-ms-summary": "Touchpoint Type Name"
        }
      },
      "type": "object"
    },
    "v1.RecordApi.RecordEditOrAdd": {
      "description": "Record",
      "properties": {
        "email_addresses": {
          "description": "List of email addresses of a profile",
          "items": {
            "$ref": "#/definitions/v1.RecordApi.EmailAddressAdd"
          },
          "type": "array",
          "x-ms-summary": "Email Addresses",
          "x-ms-visibility": "advanced"
        },
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID",
          "x-ms-visibility": "important"
        },
        "external_database_lookup_id": {
          "description": "A custom user-defined lookup ID for the record in the external database. e.g. Constituent ID\n",
          "type": "string",
          "x-ms-summary": "External Database Lookup ID",
          "x-ms-visibility": "advanced"
        },
        "first_name": {
          "description": "First name of the record.",
          "type": "string",
          "x-ms-summary": "First Name",
          "x-ms-visibility": "important"
        },
        "last_name": {
          "description": "Last name of the record.",
          "type": "string",
          "x-ms-summary": "Last Name",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "last_name"
      ],
      "type": "object"
    },
    "v1.RecordApi.EmailAddressAdd": {
      "description": "Email Address",
      "properties": {
        "address": {
          "description": "The email address",
          "format": "email",
          "maxLength": 254,
          "type": "string",
          "x-ms-summary": "Address",
          "x-ms-visibility": "important"
        },
        "is_login_email": {
          "default": true,
          "description": "Indicates if the user are allowed to login to the Platform using this email address.",
          "type": "boolean",
          "x-ms-summary": "Use for Login?",
          "x-ms-visibility": "advanced"
        },
        "is_primary": {
          "description": "A primary email is used to send the automated emails triggered by the System. It is also used to send the bulk email to the profile. It's mandatory that only one email is set as primary.\n",
          "type": "boolean",
          "x-ms-summary": "Is Primary?",
          "x-ms-visibility": "important"
        },
        "source": {
          "description": "The source indicate how the email is added to the database.",
          "maxLength": 32,
          "type": "string",
          "x-ms-summary": "Source",
          "x-ms-visibility": "advanced"
        },
        "status": {
          "default": "unknown",
          "description": "Status of the email address",
          "enum": [
            "unknown",
            "hard_bounce",
            "soft_bounce",
            "marked_spam",
            "invalid",
            "contactable"
          ],
          "type": "string",
          "x-ms-summary": "Status",
          "x-ms-visibility": "advanced"
        },
        "type": {
          "description": "The type of the email",
          "maxLength": 32,
          "type": "string",
          "x-ms-summary": "Type",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "address"
      ],
      "type": "object"
    },
    "v1.RecordApi.EmailAddressEdit": {
      "description": "Email Address",
      "properties": {
        "is_login_email": {
          "default": true,
          "description": "Indicates if the user are allowed to login to the Platform using this email address.",
          "type": "boolean",
          "x-ms-summary": "Use for Login?",
          "x-ms-visibility": "advanced"
        },
        "is_primary": {
          "description": "A primary email is used to send the automated emails triggered by the System. It is also used to send the bulk email to the profile. It's mandatory that only one email is set as primary.\n",
          "type": "boolean",
          "x-ms-summary": "Is Primary?",
          "x-ms-visibility": "important"
        },
        "status": {
          "default": "unknown",
          "description": "Status of the email address",
          "enum": [
            "unknown",
            "hard_bounce",
            "soft_bounce",
            "marked_spam",
            "invalid",
            "contactable"
          ],
          "type": "string",
          "x-ms-summary": "Status",
          "x-ms-visibility": "advanced"
        },
        "type": {
          "description": "The type of the email",
          "maxLength": 32,
          "type": "string",
          "x-ms-summary": "Type",
          "x-ms-visibility": "important"
        }
      },
      "type": "object"
    },
    "v1.RecordApi.EmailAddressRead": {
      "description": "Email Address",
      "properties": {
        "address": {
          "description": "The email address",
          "format": "email",
          "type": "string",
          "x-ms-summary": "Address"
        },
        "id": {
          "description": "System generated ID to uniquely identify a email address of a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_engaged": {
          "description": "Indicates if a bulk email is clicked or open, or the user reply to a one to one email",
          "type": "boolean",
          "x-ms-summary": "Is Engaged?"
        },
        "is_login_email": {
          "description": "Indicates if the user are allowed to login to the Platform using this email address.",
          "type": "boolean",
          "x-ms-summary": "Use for Login?"
        },
        "is_primary": {
          "description": "A primary email is used to send the automated emails triggered by the System. It is also used to send the bulk email to the profile. It's mandatory that only one email is set as primary.\n",
          "type": "boolean",
          "x-ms-summary": "Is Primary?"
        },
        "is_verified": {
          "description": "Indicate if the user has verified that they own the email.",
          "type": "boolean",
          "x-ms-summary": "Is Verified by User?"
        },
        "source": {
          "description": "The source indicate how the email is added to the database.",
          "type": "string"
        },
        "status": {
          "default": "unknown",
          "enum": [
            "unknown",
            "hard_bounce",
            "soft_bounce",
            "marked_spam",
            "invalid",
            "contactable"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the email",
          "type": "string",
          "x-ms-summary": "Type"
        }
      },
      "type": "object"
    },
    "v1.RecordApi.RecordRead": {
      "description": "record",
      "properties": {
        "email_addresses": {
          "description": "List of email addresses of a profile",
          "items": {
            "$ref": "#/definitions/v1.RecordApi.EmailAddressRead"
          },
          "type": "array",
          "x-ms-summary": "Email Addresses"
        },
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "first_name": {
          "description": "First name of the record.",
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "formatted_name": {
          "description": "Full name of the record.",
          "type": "string",
          "x-ms-summary": "Full Name"
        },
        "id": {
          "description": "System generated ID to uniquely identify a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_registered": {
          "description": "Indicate if the record or donor registered on Almabase",
          "type": "boolean",
          "x-ms-summary": "Is Registered on Almabase?"
        },
        "last_name": {
          "description": "Last name of the record.",
          "type": "string",
          "x-ms-summary": "Last Name"
        },
        "present_picture": {
          "description": "The url of the record picture",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Picture URL"
        },
        "record_url": {
          "description": "The record link on Almabase",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Link"
        }
      },
      "type": "object"
    }
  },
  "paths": {
    "/v1/custom_forms/entries/metadata/webhook_events/": {
      "get": {
        "description": "Get a list of all the supported events",
        "operationId": "GetFormEntryMetadataWebhookEvents",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of webhook events available for customform entry",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/custom_forms/{form_id}/entry_openapi_schema/": {
      "get": {
        "description": "Get the OpenAPI webhook response schema for the form entry webhook",
        "operationId": "GetFormEntryWebhookResponseSchema",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a form.",
            "format": "int32",
            "in": "path",
            "name": "form_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Form ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.FormApi.FormEntryWebhookResponse"
            }
          }
        },
        "summary": "Get a form entry webhook response schema",
        "tags": [
          "Schema"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/virtual/webhooks/customforms.customformentry/": {
      "post": {
        "description": "Triggers when a form is submitted or an existing form submission is updated.",
        "operationId": "FormEntryCreateOrUpdateWebhook",
        "parameters": [
          {
            "description": "Create a webhook to receive form entry data when a form is submitted on Almabase.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.FormApi.FormEntryCreatedOrUpdatedWebhookRequest"
            },
            "x-ms-summary": "Create Form Entry Webhook"
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "type": "object"
            }
          }
        },
        "summary": "When a form is submitted or an existing form submission is updated",
        "x-ms-trigger": "single",
        "x-ms-trigger-hint": "To see it work, submit the associated form or update an existing form submission on Almabase"
      },
      "x-ms-notification-content": {
        "description": "Dynamic schema for the form entry webhook.",
        "schema": {
          "x-ms-dynamic-properties": {
            "operationId": "GetFormEntryWebhookResponseSchema",
            "parameters": {
              "form_id": {
                "parameterReference": "body/object_id"
              }
            }
          },
          "x-ms-dynamic-schema": {
            "operationId": "GetFormEntryWebhookResponseSchema",
            "parameters": {
              "form_id": {
                "parameter": "object_id"
              }
            }
          }
        }
      }
    },
    "/v1/custom_forms/": {
      "get": {
        "description": "Get a list of forms.",
        "operationId": "ListForms",
        "parameters": [
          {
            "collectionFormat": "csv",
            "default": [
              "id",
              "title"
            ],
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.FormApi.FormRead"
              },
              "type": "array"
            }
          }
        },
        "summary": "List forms",
        "tags": [
          "Form"
        ]
      }
    },
    "/v1/custom_forms/{form_id}/entries/": {
      "post": {
        "description": "Creates a new form submission for a form",
        "operationId": "CreateFormEntry",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a form.",
            "format": "int32",
            "in": "path",
            "name": "form_id",
            "required": true,
            "type": "integer",
            "x-ms-dynamic-values": {
              "operationId": "ListForms",
              "parameters": {
                "fields": [
                  "id",
                  "title"
                ]
              },
              "value-path": "id",
              "value-title": "title"
            },
            "x-ms-summary": "Form",
            "x-ms-url-encoding": "single"
          },
          {
            "description": "Create a new form submission",
            "in": "body",
            "name": "body",
            "schema": {
              "x-ms-dynamic-properties": {
                "operationId": "GetFormEntryCreateSchema",
                "parameters": {
                  "form_id": {
                    "parameterReference": "form_id"
                  }
                }
              },
              "x-ms-dynamic-schema": {
                "operationId": "GetFormEntryCreateSchema",
                "parameters": {
                  "form_id": {
                    "parameter": "form_id"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "properties": {
                "id": {
                  "description": "System generated ID to uniquely identify a form submission.",
                  "format": "int32",
                  "type": "integer",
                  "x-ms-summary": "Response ID"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Submit a form",
        "tags": [
          "Form Entry"
        ]
      }
    },
    "/v1/custom_forms/{form_id}/entries/{entry_id}/": {
      "get": {
        "description": "Returns information about a form submission.",
        "operationId": "GetFormEntry",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a form.",
            "format": "int32",
            "in": "path",
            "name": "form_id",
            "required": true,
            "type": "integer",
            "x-ms-dynamic-values": {
              "operationId": "ListForms",
              "parameters": {
                "fields": [
                  "id",
                  "title"
                ]
              },
              "value-path": "id",
              "value-title": "title"
            },
            "x-ms-summary": "Form",
            "x-ms-url-encoding": "single"
          },
          {
            "description": "System generated ID to uniquely identify a form submission.",
            "in": "path",
            "name": "entry_id",
            "required": true,
            "type": "string",
            "x-ms-summary": "Response ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "x-ms-dynamic-properties": {
                "itemValuePath": "properties/data",
                "operationId": "GetFormEntryWebhookResponseSchema",
                "parameters": {
                  "form_id": {
                    "parameterReference": "form_id"
                  }
                }
              },
              "x-ms-dynamic-schema": {
                "operationId": "GetFormEntryWebhookResponseSchema",
                "parameters": {
                  "form_id": {
                    "parameter": "form_id"
                  }
                },
                "value-path": "properties/data"
              }
            }
          }
        },
        "summary": "Get a submission of a form",
        "tags": [
          "Form Entry"
        ]
      }
    },
    "/v1/custom_forms/{form_id}/entry_openapi_schema_create/": {
      "get": {
        "description": "Get the OpenAPI schema for creating form entry",
        "operationId": "GetFormEntryCreateSchema",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a form.",
            "format": "int32",
            "in": "path",
            "name": "form_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Form ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.FormApi.FormEntryAdd"
            }
          }
        },
        "summary": "Get a schema to create form entry",
        "tags": [
          "Schema"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/givingx/gifts/metadata/webhook_events/": {
      "get": {
        "description": "Get a list of all the supported events",
        "operationId": "GetGiftMetadataWebhookEvents",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of webhook events available for gifts",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/virtual/webhooks/giving.gift/": {
      "post": {
        "description": "Triggers when a new gift is successfully recorded on a Giving Page by a donor or the payment to a gift is failed.\n",
        "operationId": "GiftSucceededOrFailedWebhook",
        "parameters": [
          {
            "description": "Register a webhook to receive gift data when a gift is successful on Almabase",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GiftSucceededOrFailedWebhookRequest"
            },
            "x-ms-summary": "Register Gift Webhook on Almabase"
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "type": "object"
            }
          }
        },
        "summary": "When a new gift is successful or an online gift payment is failed",
        "x-ms-trigger": "single",
        "x-ms-trigger-hint": "To see it work, make a gift on Almabase"
      },
      "x-ms-notification-content": {
        "description": "Schema for the gift succeeded webhook.",
        "schema": {
          "$ref": "#/definitions/v1.GivingApi.GiftWebhookResponse"
        }
      }
    },
    "/v1/givingx/funds/": {
      "get": {
        "description": "Returns a list of funds",
        "operationId": "ListFunds",
        "parameters": [
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.GivingApi.FundRead"
              },
              "type": "array"
            }
          }
        },
        "summary": "List funds",
        "tags": [
          "Fund"
        ]
      },
      "post": {
        "description": "Creates a new fund.",
        "operationId": "CreateFund",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.FundAddOrEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.FundRead"
            }
          }
        },
        "summary": "Create a fund",
        "tags": [
          "Fund"
        ]
      }
    },
    "/v1/givingx/funds/{id}/": {
      "get": {
        "description": "Returns information about a fund.",
        "operationId": "GetFund",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a fund.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Fund ID",
            "x-ms-url-encoding": "single"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.FundRead"
            }
          }
        },
        "summary": "Get a fund",
        "tags": [
          "Fund"
        ]
      },
      "patch": {
        "description": "Updates a fund.",
        "operationId": "UpdateFund",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a fund.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Fund ID",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.FundAddOrEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.FundRead"
            }
          }
        },
        "summary": "Update a fund",
        "tags": [
          "Fund"
        ]
      }
    },
    "/v1/givingx/gifts/": {
      "get": {
        "description": "Returns a list of gifts.",
        "operationId": "ListGifts",
        "parameters": [
          {
            "default": "completed",
            "description": "Filter gifts based on the status.",
            "in": "query",
            "name": "status",
            "required": true,
            "type": "string",
            "x-ms-dynamic-list": {
              "itemTitlePath": "title",
              "itemValuePath": "value",
              "operationId": "GetGiftMetadataGiftStatus"
            },
            "x-ms-dynamic-values": {
              "operationId": "GetGiftMetadataGiftStatus",
              "value-path": "value",
              "value-title": "title"
            },
            "x-ms-summary": "Status",
            "x-ms-visibility": "important"
          },
          {
            "description": "System generated ID to uniquely identify a giving page.",
            "format": "int32",
            "in": "query",
            "name": "campaign",
            "required": false,
            "type": "integer",
            "x-ms-dynamic-values": {
              "operationId": "ListGivingPages",
              "parameters": {
                "fields": [
                  "id",
                  "name"
                ]
              },
              "value-path": "id",
              "value-title": "name"
            },
            "x-ms-summary": "Giving Page",
            "x-ms-visibility": "important"
          },
          {
            "description": "System generated ID to uniquely identify a gift group or a list.",
            "format": "uuid",
            "in": "query",
            "name": "group_id",
            "required": false,
            "type": "string",
            "x-ms-summary": "Gift Group Id / List Id",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Filter gifts based on they have a batch number or not.",
            "in": "query",
            "name": "batch_number__isnull",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "Has a Batch Number?",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Search for gifts by name or email address.",
            "in": "query",
            "name": "search",
            "required": false,
            "type": "string",
            "x-ms-summary": "Search Term",
            "x-ms-visibility": "advanced"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          },
          {
            "default": 10,
            "description": "Represents the number of records to return. The default is 10. The maximum is 50.",
            "format": "int32",
            "in": "query",
            "maximum": 50,
            "minimum": 1,
            "name": "page_size",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Page Size",
            "x-ms-visibility": "advanced"
          },
          {
            "default": 1,
            "description": "Represent the page numbers (offset). For use with pagination.",
            "format": "int32",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Page Number",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Define the order of the gifts in the response. A \"-\" prefix represent descending order, and absence of the prefix would return the results in ascending order.\n",
            "enum": [
              "id",
              "donor_name",
              "-id",
              "-donor_name"
            ],
            "in": "query",
            "name": "ordering",
            "required": false,
            "type": "string",
            "x-ms-summary": "Order by",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "properties": {
                "nextlink": {
                  "description": "URL for the next page set of results. For use with pagination.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Next results URL"
                },
                "previouslink": {
                  "description": "URL for the previous set of results. For use with pagination.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Previous results URL"
                },
                "total": {
                  "description": "Total gifts for the given filters",
                  "format": "int32",
                  "type": "integer",
                  "x-ms-summary": "Total Gifts"
                },
                "value": {
                  "description": "List of gifts returned for the given filters. The results are paginated.",
                  "items": {
                    "$ref": "#/definitions/v1.GivingApi.GiftRead"
                  },
                  "type": "array",
                  "x-ms-summary": "Gifts"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "List gifts",
        "tags": [
          "Gift"
        ]
      },
      "post": {
        "description": "Creates a new gift.",
        "operationId": "CreateGift",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GiftAdd"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GiftRead"
            }
          }
        },
        "summary": "Create a gift",
        "tags": [
          "Gift"
        ]
      }
    },
    "/v1/givingx/gifts/metadata/gift_currencies/": {
      "get": {
        "description": "Get a list of curriences support for a gift",
        "operationId": "GetGiftMetadataGiftCurrencies",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "List gift currencies",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/givingx/gifts/metadata/gift_honor_prefix/": {
      "get": {
        "description": "Get a list of gift honor prefixes",
        "operationId": "GetGiftMetadataGiftHonorPrefix",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "List gift honor prefixes",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/givingx/gifts/metadata/gift_modes/": {
      "get": {
        "description": "Get a list of gift modes",
        "operationId": "GetGiftMetadataGiftModes",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "List gift modes",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/givingx/gifts/metadata/gift_status/": {
      "get": {
        "description": "Get a list of gift status",
        "operationId": "GetGiftMetadataGiftStatus",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "List gift status",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/givingx/gifts/{id}/": {
      "get": {
        "description": "Returns information about a gift.",
        "operationId": "GetGift",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a gift.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Gift ID",
            "x-ms-url-encoding": "single"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GiftRead"
            }
          }
        },
        "summary": "Get a gift",
        "tags": [
          "Gift"
        ]
      },
      "patch": {
        "description": "Updates a gift",
        "operationId": "UpdateGift",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a gift.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Gift ID",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GiftEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GiftRead"
            }
          }
        },
        "summary": "Update a gift",
        "tags": [
          "Gift"
        ]
      }
    },
    "/v1/givingx/pages/": {
      "get": {
        "description": "Returns a list of giving pages.",
        "operationId": "ListGivingPages",
        "parameters": [
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.GivingApi.GivingPageRead"
              },
              "type": "array"
            }
          }
        },
        "summary": "List giving pages",
        "tags": [
          "Giving Page"
        ]
      },
      "post": {
        "description": "Creates a new giving page.",
        "operationId": "CreateGivingPage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GivingPageAdd"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GivingPageRead"
            }
          }
        },
        "summary": "Create a giving page",
        "tags": [
          "Gift Page"
        ]
      }
    },
    "/v1/givingx/pages/{id}/": {
      "get": {
        "description": "Returns information about a giving page.",
        "operationId": "GetGivingPage",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a giving page.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Giving Page ID",
            "x-ms-url-encoding": "single"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GivingPageRead"
            }
          }
        },
        "summary": "Get a giving page",
        "tags": [
          "Giving Page"
        ]
      }
    },
    "/v1/almasights/customobjects/": {
      "post": {
        "description": "Send a new custom touchpoint to Almabase.",
        "operationId": "createTouchpointCustomObject",
        "parameters": [
          {
            "description": "Filters the types by touchpoint programs.",
            "format": "int32",
            "in": "query",
            "name": "touchpoint_program",
            "required": true,
            "type": "integer",
            "x-ms-dynamic-values": {
              "operationId": "ListTouchpointPrograms",
              "parameters": {
                "fields": [
                  "id",
                  "name"
                ]
              },
              "value-path": "id",
              "value-title": "name"
            },
            "x-ms-summary": "Program",
            "x-ms-visibility": "important"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.AlmasightsApi.TouchpointCustomObjectAdd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.AlmasightsApi.TouchpointCustomObjectAdd"
            }
          }
        },
        "summary": "Create a touchpoint",
        "tags": [
          "Custom Touchpoint Object"
        ]
      }
    },
    "/v1/almasights/programs/": {
      "get": {
        "description": "Get a list of programs.",
        "operationId": "ListTouchpointPrograms",
        "parameters": [
          {
            "collectionFormat": "csv",
            "default": [
              "id",
              "name"
            ],
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          },
          {
            "default": true,
            "description": "Indicates a custom program.",
            "in": "query",
            "name": "is_custom",
            "required": true,
            "type": "boolean",
            "x-ms-summary": "Is custom program?",
            "x-ms-visibility": "internal"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.AlmasightsApi.TouchpointProgramRead"
              },
              "type": "array"
            }
          }
        },
        "summary": "List programs",
        "tags": [
          "Touchpoint Program"
        ]
      }
    },
    "/v1/almasights/types/": {
      "get": {
        "description": "Get a list of touchpoint types.",
        "operationId": "ListTouchpointTypes",
        "parameters": [
          {
            "collectionFormat": "csv",
            "default": [
              "id",
              "title"
            ],
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Filters the types by touchpoint programs.",
            "format": "int32",
            "in": "query",
            "name": "touchpoint_program",
            "required": false,
            "type": "integer",
            "x-ms-dynamic-values": {
              "operationId": "ListTouchpointPrograms",
              "parameters": {
                "fields": [
                  "id",
                  "name"
                ]
              },
              "value-path": "id",
              "value-title": "name"
            },
            "x-ms-summary": "Program"
          },
          {
            "default": true,
            "description": "Indicates a custom touchpoint type.",
            "in": "query",
            "name": "is_custom",
            "required": true,
            "type": "boolean",
            "x-ms-summary": "Is custom?",
            "x-ms-visibility": "internal"
          },
          {
            "default": false,
            "description": "Indicates an internal touchpoint type.",
            "in": "query",
            "name": "is_internal",
            "required": true,
            "type": "boolean",
            "x-ms-summary": "Is internal?",
            "x-ms-visibility": "internal"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.AlmasightsApi.TouchpointTypeRead"
              },
              "type": "array"
            }
          }
        },
        "summary": "List touchpoint types",
        "tags": [
          "Touchpoint Type"
        ]
      }
    },
    "/v1/profiles/": {
      "get": {
        "description": "Returns a list of records.",
        "operationId": "ListRecords",
        "parameters": [
          {
            "description": "Search for records by name.",
            "in": "query",
            "name": "search",
            "required": false,
            "type": "string",
            "x-ms-summary": "Search By Name",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Search for records by email address.",
            "in": "query",
            "name": "email_addresses__address",
            "required": false,
            "type": "string",
            "x-ms-summary": "Search By Email Address",
            "x-ms-visibility": "important"
          },
          {
            "description": "Search for records by external database ID.",
            "in": "query",
            "name": "external_database_id",
            "required": false,
            "type": "string",
            "x-ms-summary": "Search By External Database Id",
            "x-ms-visibility": "advanced"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Updated on or after a date.",
            "format": "date-time",
            "in": "query",
            "name": "updated_at__gte",
            "required": false,
            "type": "string",
            "x-ms-summary": "Updated on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Created on or after a date.",
            "format": "date-time",
            "in": "query",
            "name": "created_at__gte",
            "required": false,
            "type": "string",
            "x-ms-summary": "Created on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "default": 50,
            "description": "Represents the number of records to return. The default is 10. The maximum is 50.",
            "format": "int32",
            "in": "query",
            "maximum": 50,
            "minimum": 1,
            "name": "page_size",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Page Size",
            "x-ms-visibility": "advanced"
          },
          {
            "default": 1,
            "description": "Represent the page numbers (offset). For use with pagination.",
            "format": "int32",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Page Number",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "properties": {
                "nextlink": {
                  "description": "URL for the next page set of results. For use with pagination.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Next results URL"
                },
                "previouslink": {
                  "description": "URL for the previous set of results. For use with pagination.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Previous results URL"
                },
                "total": {
                  "description": "Total records for the given filters",
                  "format": "int32",
                  "type": "integer",
                  "x-ms-summary": "Total Records"
                },
                "value": {
                  "description": "List of records of a profile returned for the given filters.",
                  "items": {
                    "$ref": "#/definitions/v1.RecordApi.RecordRead"
                  },
                  "type": "array",
                  "x-ms-summary": "Records"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "List records",
        "tags": [
          "Record"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextlink"
        }
      },
      "post": {
        "description": "Creates a new record.",
        "operationId": "CreateRecord",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.RecordEditOrAdd"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.RecordRead"
            }
          }
        },
        "summary": "Create a record",
        "tags": [
          "Record"
        ]
      }
    },
    "/v1/profiles/{id}/": {
      "get": {
        "description": "Returns information about a record.",
        "operationId": "GetRecord",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a record.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.RecordRead"
            }
          }
        },
        "summary": "Get a record",
        "tags": [
          "Record"
        ]
      },
      "patch": {
        "description": "Updates a record.",
        "operationId": "UpdateRecord",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a record.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.RecordEditOrAdd"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.RecordRead"
            }
          }
        },
        "summary": "Update a record",
        "tags": [
          "Record"
        ]
      }
    },
    "/v1/profiles/{record_id}/email_addresses/": {
      "get": {
        "description": "Returns a list of email addresses for a record.",
        "operationId": "ListRecordEmailAddresses",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a record.",
            "format": "int32",
            "in": "path",
            "name": "record_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          },
          {
            "default": 50,
            "description": "Represents the number of records to return. The default is 10. The maximum is 50.",
            "format": "int32",
            "in": "query",
            "maximum": 50,
            "minimum": 1,
            "name": "page_size",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Page Size",
            "x-ms-visibility": "advanced"
          },
          {
            "default": 1,
            "description": "Represent the page numbers (offset). For use with pagination.",
            "format": "int32",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Page Number",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "properties": {
                "nextlink": {
                  "description": "URL for the next page set of results. For use with pagination.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Next results URL"
                },
                "previouslink": {
                  "description": "URL for the previous set of results. For use with pagination.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Previous results URL"
                },
                "total": {
                  "description": "Total email addresses for the given filters",
                  "format": "int32",
                  "type": "integer",
                  "x-ms-summary": "Total Email Addresses"
                },
                "value": {
                  "description": "List of email address of a profile returned for the given filters. The results are paginated.\n",
                  "items": {
                    "$ref": "#/definitions/v1.RecordApi.EmailAddressRead"
                  },
                  "type": "array",
                  "x-ms-summary": "Email Address"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "List email addresses of a record",
        "tags": [
          "Email Address"
        ]
      },
      "post": {
        "description": "Creates a new email address for a record.",
        "operationId": "CreateRecordEmailAddress",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a record.",
            "format": "int32",
            "in": "path",
            "name": "record_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.EmailAddressAdd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.EmailAddressRead"
            }
          }
        },
        "summary": "Create an email address for a record",
        "tags": [
          "Email Address"
        ]
      }
    },
    "/v1/records/{record_id}/email_addresses/{email_id}/": {
      "get": {
        "description": "Returns information about an email address of a record.",
        "operationId": "GetRecordEmailAddress",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a record.",
            "in": "path",
            "name": "record_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single"
          },
          {
            "description": "System generated ID to uniquely identify a email address of a record.",
            "in": "path",
            "name": "email_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.EmailAddressRead"
            }
          }
        },
        "summary": "Get an email address of a record",
        "tags": [
          "Email Address"
        ]
      },
      "patch": {
        "description": "Updates the fields the email address of a record",
        "operationId": "UpdateRecordEmailAddress",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a record.",
            "in": "path",
            "name": "record_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single"
          },
          {
            "description": "System generated ID to uniquely identify a email address of a record.",
            "in": "path",
            "name": "email_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Email Address ID",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.EmailAddressEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.EmailAddressRead"
            }
          }
        },
        "summary": "Update an email address of a record",
        "tags": [
          "Email Address"
        ]
      }
    },
    "/v1/webhooks/{webhook_id}/": {
      "delete": {
        "summary": "Delete webhook",
        "description": "Delete a webhook associated with a flow",
        "operationId": "DeleteWebhook",
        "tags": [
          "Webhook"
        ],
        "x-ms-visibility": "internal",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "System generated ID to uniquely identify a webhook.",
            "x-ms-summary": "Webhook ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "Returned when the operation succeeds."
          }
        }
      }
    }
  }
}
