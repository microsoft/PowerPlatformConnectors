{
  "swagger": "2.0",
  "info": {
    "title": "TPC Portal",
    "description": "The Portal Connector (TPC) is the leading alternative for delivering Customer Engagement portals connected to Microsoft Dynamics 365. The TPC Portal Connector enables organizations and businesses to capture triggers based on the interaction of portal users within The Portal Connector. The Connector also enables administrators to execute actions within The Portal Connector like assigning roles, creating content, and managing common processes.",
    "contact": {
      "name": "TPC Support",
      "url": "https://www.portalconnector.com",
      "email": "support@portalconnector.com"
    },
    "version": "1.0"
  },
  "host": "cheese.crmportalconnector.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/PortalConnectorPowerPlatform/Services/Flow/v1/CreateContent": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Create Content",
        "description": "Create content on the portal site.",
        "operationId": "TpcActionCreateContent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create Content Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Content.Request.InitiateCreateContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "x-ms-dynamic-schema": {
                "operationId": "TpcDynamicResolveContentSchema",
                "value-path": "schema",
                "parameters": {
                  "operation": 0,
                  "phase": 1,
                  "fullName": {
                    "parameter": "contentType"
                  },
                  "version": 1
                }
              },
              "x-ms-dynamic-properties": {
                "operationId": "TpcDynamicResolveContentSchema",
                "itemValuePath": "schema",
                "parameters": {
                  "body/operation": {
                    "value": 0
                  },
                  "body/phase": {
                    "value": 1
                  },
                  "body/fullName": {
                    "parameterReference": "body/contentType"
                  },
                  "body/version": {
                    "value": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "501": {
            "description": "Not Implemented.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionCreateContent",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/DeleteContent": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Delete Content",
        "description": "Delete content on the portal site.",
        "operationId": "TpcActionDeleteContent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Delete Content Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Content.Request.InitiateDeleteContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "x-ms-dynamic-schema": {
                "operationId": "TpcDynamicResolveContentSchema",
                "value-path": "schema",
                "parameters": {
                  "operation": 3,
                  "phase": 1,
                  "fullName": {
                    "parameter": "contentType"
                  },
                  "version": 1
                }
              },
              "x-ms-dynamic-properties": {
                "operationId": "TpcDynamicResolveContentSchema",
                "itemValuePath": "schema",
                "parameters": {
                  "body/operation": {
                    "value": 3
                  },
                  "body/phase": {
                    "value": 1
                  },
                  "body/fullName": {
                    "parameterReference": "body/contentType"
                  },
                  "body/version": {
                    "value": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "501": {
            "description": "Not Implemented.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionDeleteContent",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/EditContent": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Edit Content",
        "description": "Edit content on the portal site.",
        "operationId": "TpcActionEditContent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Edit Content Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Content.Request.InitiateEditContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "x-ms-dynamic-schema": {
                "operationId": "TpcDynamicResolveContentSchema",
                "value-path": "schema",
                "parameters": {
                  "operation": 2,
                  "phase": 1,
                  "fullName": {
                    "parameter": "contentType"
                  },
                  "version": 1
                }
              },
              "x-ms-dynamic-properties": {
                "operationId": "TpcDynamicResolveContentSchema",
                "itemValuePath": "schema",
                "parameters": {
                  "body/operation": {
                    "value": 2
                  },
                  "body/phase": {
                    "value": 1
                  },
                  "body/fullName": {
                    "parameterReference": "body/contentType"
                  },
                  "body/version": {
                    "value": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "501": {
            "description": "Not Implemented.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionEditContent",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/GetAllContent": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Get All Content",
        "description": "Get all content on the portal site.",
        "operationId": "TpcActionGetAllContent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Get All Content Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Content.Request.InitiateGetAllContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "x-ms-dynamic-schema": {
                "operationId": "TpcDynamicResolveContentSchema",
                "value-path": "schema",
                "parameters": {
                  "operation": 4,
                  "phase": 1,
                  "fullName": {
                    "parameter": "contentType"
                  },
                  "version": 1
                }
              },
              "x-ms-dynamic-properties": {
                "operationId": "TpcDynamicResolveContentSchema",
                "itemValuePath": "schema",
                "parameters": {
                  "body/operation": {
                    "value": 4
                  },
                  "body/phase": {
                    "value": 1
                  },
                  "body/fullName": {
                    "parameterReference": "body/contentType"
                  },
                  "body/version": {
                    "value": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "501": {
            "description": "Not Implemented.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionGetAllContent",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/GetContent": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Get Content",
        "description": "Get content on the portal site.",
        "operationId": "TpcActionGetContent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Get Content Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Content.Request.InitiateGetContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "x-ms-dynamic-schema": {
                "operationId": "TpcDynamicResolveContentSchema",
                "value-path": "schema",
                "parameters": {
                  "operation": 1,
                  "phase": 1,
                  "fullName": {
                    "parameter": "contentType"
                  },
                  "version": 1
                }
              },
              "x-ms-dynamic-properties": {
                "operationId": "TpcDynamicResolveContentSchema",
                "itemValuePath": "schema",
                "parameters": {
                  "body/operation": {
                    "value": 1
                  },
                  "body/phase": {
                    "value": 1
                  },
                  "body/fullName": {
                    "parameterReference": "body/contentType"
                  },
                  "body/version": {
                    "value": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "501": {
            "description": "Not Implemented.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionGetContent",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SyncMetadata": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Sync Metadata",
        "description": "Trigger a metadata sync on the portal site.",
        "operationId": "TpcActionSyncMetadata",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionSyncMetadata",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/PublishContent": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Publish Content",
        "description": "Publish content on the portal site.",
        "operationId": "TpcActionPublishContent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Publish Content Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Content.Request.InitiatePublishContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "x-ms-dynamic-schema": {
                "operationId": "TpcDynamicResolveContentSchema",
                "value-path": "schema",
                "parameters": {
                  "operation": 5,
                  "phase": 1,
                  "fullName": {
                    "parameter": "contentType"
                  },
                  "version": 1
                }
              },
              "x-ms-dynamic-properties": {
                "operationId": "TpcDynamicResolveContentSchema",
                "itemValuePath": "schema",
                "parameters": {
                  "body/operation": {
                    "value": 5
                  },
                  "body/phase": {
                    "value": 1
                  },
                  "body/fullName": {
                    "parameterReference": "body/contentType"
                  },
                  "body/version": {
                    "value": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "501": {
            "description": "Not Implemented.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionPublishContent",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/CreatePortalUser": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Create Portal User",
        "description": "Create a portal user on the portal site.",
        "operationId": "TpcActionCreatePortalUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create Portal User Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.TPC.PortalUser.PortalUserInfoCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.TPC.PortalUser.Response.PortalUserResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "501": {
            "description": "Not Implemented.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionCreatePortalUser",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/EditPortalUser": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Edit Portal User",
        "description": "Edit a portal user on the portal site.",
        "operationId": "TpcActionEditPortalUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Edit Portal User Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.TPC.PortalUser.PortalUserInfoEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.TPC.PortalUser.Response.PortalUserResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "501": {
            "description": "Not Implemented.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionEditPortalUser",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/GetPortalUser": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Get Portal User",
        "description": "Get a portal user on the portal site.",
        "operationId": "TpcActionGetPortalUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Select Portal User Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.TPC.PortalUser.SelectPortalUserParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.TPC.PortalUser.Response.PortalUserResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "501": {
            "description": "Not Implemented.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionGetPortalUser",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/DeletePortalUser": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Delete Portal User",
        "description": "Deletes a portal user on the portal site.",
        "operationId": "TpcActionDeletePortalUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Select Portal User Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.TPC.PortalUser.SelectPortalUserParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "501": {
            "description": "Not Implemented.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionDeletePortalUser",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/GetAllPortalUsers": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Get All Portal Users",
        "description": "Get all portal users on the portal site.",
        "operationId": "TpcActionGetAllPortalUsers",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.TPC.PortalUser.Response.PortalUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "501": {
            "description": "Not Implemented.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionGetAllPortalUsers",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/AssignRole": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Assign Role",
        "description": "Assign a role to a sitefinity user on the portal site.",
        "operationId": "TpcActionAssignRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Initiate Role Action Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Role.Request.InitiateRoleActionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.Sitefinity.Hybrid.Response.UserRolePortalResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionAssignRole",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/UnassignRole": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Unassign Role",
        "description": "Unassign a role from a sitefinity user on the portal site.",
        "operationId": "TpcActionUnassignRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Initiate Role Action Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Role.Request.InitiateRoleActionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.Sitefinity.Hybrid.Response.UserRolePortalResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionUnassignRole",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/UnpublishContent": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Unpublish Content",
        "description": "Unpublish content on the portal site.",
        "operationId": "TpcActionUnpublishContent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Unpublish Content Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Content.Request.InitiateUnpublishContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "x-ms-dynamic-schema": {
                "operationId": "TpcDynamicResolveContentSchema",
                "value-path": "schema",
                "parameters": {
                  "operation": 6,
                  "phase": 1,
                  "fullName": {
                    "parameter": "contentType"
                  },
                  "version": 1
                }
              },
              "x-ms-dynamic-properties": {
                "operationId": "TpcDynamicResolveContentSchema",
                "itemValuePath": "schema",
                "parameters": {
                  "body/operation": {
                    "value": 6
                  },
                  "body/phase": {
                    "value": 1
                  },
                  "body/fullName": {
                    "parameterReference": "body/contentType"
                  },
                  "body/version": {
                    "value": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "501": {
            "description": "Not Implemented.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionUnpublishContent",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/LockoutUser": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Lockout User",
        "description": "Lockout a user on the portal site.",
        "operationId": "TpcActionLockoutUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Initiate User Action Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.User.Request.InitiateUserActionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.Sitefinity.User.Response.UserPortalResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionLockoutUser",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/UnlockUser": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Unlock User",
        "description": "Unlock a user on the portal site.",
        "operationId": "TpcActionUnlockUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Initiate User Action Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.User.Request.InitiateUserActionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.Sitefinity.User.Response.UserPortalResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcActionUnlockUser",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/RetrieveContentTypes": {
      "post": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Retrieve Content Types",
        "description": "Retrieve a list of all content types on the portal site.",
        "operationId": "TpcDynamicRetrieveContentTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Types Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Generic.Types.Request.TypesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.Generic.Types.Response.TypesPortalResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.Generic.Types.Response.TypesPortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.Generic.Types.Response.TypesPortalResponse"
            }
          }
        },
        "x-ms-visibility": "internal",
        "x-ms-api-annotation": {
          "family": "TpcDynamicRetrieveContentTypes",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/ResolveContentSchema": {
      "post": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Resolve Content Schema",
        "description": "Resolve a content schema for a specific content type of the portal site.",
        "operationId": "TpcDynamicResolveContentSchema",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Schema Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Generic.Schema.Request.SchemaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Generic.Schema.Response.SchemaResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Generic.Schema.Response.SchemaResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Generic.Schema.Response.SchemaResponse"
            }
          },
          "501": {
            "description": "Not Implemented.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Generic.Schema.Response.SchemaResponse"
            }
          }
        },
        "x-ms-visibility": "internal",
        "x-ms-api-annotation": {
          "family": "TpcDynamicResolveContentSchema",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/RetrieveFrontendPages": {
      "get": {
        "tags": [
          "Dynamic"
        ],
        "summary": "Retrieve Pages",
        "description": "Retrieve a list of all frontend pages on the portal site.",
        "operationId": "TpcDynamicRetrieveFrontendPages",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.Sitefinity.Page.Response.PageNodesPortalResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.Sitefinity.Page.Response.PageNodesPortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.Sitefinity.Page.Response.PageNodesPortalResponse"
            }
          }
        },
        "x-ms-visibility": "internal",
        "x-ms-api-annotation": {
          "family": "TpcDynamicRetrieveFrontendPages",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeLogin": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Login",
        "description": "Subscribes to the login event.",
        "operationId": "TpcTriggerLogin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Login Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Authentication.Request.SubscribeLoginRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerLogin",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Authentication.Request.NotifyLoginRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeLogout": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Logout",
        "description": "Subscribes to the logout event.",
        "operationId": "TpcTriggerLogout",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Logout Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Authentication.Request.SubscribeLogoutRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerLogout",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Authentication.Request.NotifyLogoutRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeCommentCreated": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Comment Created",
        "description": "Subscribes to the comment created event.",
        "operationId": "TpcTriggerCommentCreated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Comment Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Comment.Request.SubscribeCommentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerCommentCreated",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Comment.Request.NotifyCommentRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeCommentUpdated": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Comment Updated",
        "description": "Subscribes to the comment updated event.",
        "operationId": "TpcTriggerCommentUpdated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Comment Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Comment.Request.SubscribeCommentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerCommentUpdated",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Comment.Request.NotifyCommentRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeCommentDeleted": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Comment Deleted",
        "description": "Subscribes to the comment deleted event.",
        "operationId": "TpcTriggerCommentDeleted",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Comment Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Comment.Request.SubscribeCommentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerCommentDeleted",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Comment.Request.NotifyCommentRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/Unsubscribe": {
      "delete": {
        "tags": [
          "Triggers"
        ],
        "summary": "Unsubscribe Trigger",
        "description": "Deletes a web hook subscription for a trigger.",
        "operationId": "TpcTriggerDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "Id of the Web Hook to be Deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Deleted WebHook Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-visibility": "internal",
        "x-ms-api-annotation": {
          "family": "TpcTriggerDelete",
          "revision": 1
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeContentCreated": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Content Created",
        "description": "Subscribes to the content created event.",
        "operationId": "TpcTriggerContentCreated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Content Created Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Content.Request.SubscribeContentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-dynamic-schema": "TpcDynamicResolveContentSchemaschema",
        "x-ms-dynamic-properties": "TpcDynamicResolveContentSchemaschema",
        "x-ms-api-annotation": {
          "family": "TpcTriggerContentCreated",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification\n                TpcDynamicResolveContentSchemaschemaTpcDynamicResolveContentSchemaschema",
        "schema": {
          "x-ms-dynamic-schema": {
            "operationId": "TpcDynamicResolveContentSchema",
            "value-path": "schema",
            "parameters": {
              "operation": 8,
              "phase": 1,
              "fullName": {
                "parameter": "contentType"
              },
              "version": 1
            }
          },
          "x-ms-dynamic-properties": {
            "operationId": "TpcDynamicResolveContentSchema",
            "itemValuePath": "schema",
            "parameters": {
              "body/operation": {
                "value": 8
              },
              "body/phase": {
                "value": 1
              },
              "body/fullName": {
                "parameterReference": "body/contentType"
              },
              "body/version": {
                "value": 1
              }
            }
          }
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeContentUpdated": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Content Updated",
        "description": "Subscribes to the content updated event.",
        "operationId": "TpcTriggerContentUpdated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Content Updated Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Content.Request.SubscribeContentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-dynamic-schema": "TpcDynamicResolveContentSchemaschema",
        "x-ms-dynamic-properties": "TpcDynamicResolveContentSchemaschema",
        "x-ms-api-annotation": {
          "family": "TpcTriggerContentUpdated",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification\n                TpcDynamicResolveContentSchemaschemaTpcDynamicResolveContentSchemaschema",
        "schema": {
          "x-ms-dynamic-schema": {
            "operationId": "TpcDynamicResolveContentSchema",
            "value-path": "schema",
            "parameters": {
              "operation": 8,
              "phase": 1,
              "fullName": {
                "parameter": "contentType"
              },
              "version": 1
            }
          },
          "x-ms-dynamic-properties": {
            "operationId": "TpcDynamicResolveContentSchema",
            "itemValuePath": "schema",
            "parameters": {
              "body/operation": {
                "value": 8
              },
              "body/phase": {
                "value": 1
              },
              "body/fullName": {
                "parameterReference": "body/contentType"
              },
              "body/version": {
                "value": 1
              }
            }
          }
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeContentDeleted": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Content Deleted",
        "description": "Subscribes to the content deleted event.",
        "operationId": "TpcTriggerContentDeleted",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Content Deleted Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Content.Request.SubscribeContentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-dynamic-schema": "TpcDynamicResolveContentSchemaschema",
        "x-ms-dynamic-properties": "TpcDynamicResolveContentSchemaschema",
        "x-ms-api-annotation": {
          "family": "TpcTriggerContentDeleted",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification\n                TpcDynamicResolveContentSchemaschemaTpcDynamicResolveContentSchemaschema",
        "schema": {
          "x-ms-dynamic-schema": {
            "operationId": "TpcDynamicResolveContentSchema",
            "value-path": "schema",
            "parameters": {
              "operation": 9,
              "phase": 1,
              "fullName": {
                "parameter": "contentType"
              },
              "version": 1
            }
          },
          "x-ms-dynamic-properties": {
            "operationId": "TpcDynamicResolveContentSchema",
            "itemValuePath": "schema",
            "parameters": {
              "body/operation": {
                "value": 9
              },
              "body/phase": {
                "value": 1
              },
              "body/fullName": {
                "parameterReference": "body/contentType"
              },
              "body/version": {
                "value": 1
              }
            }
          }
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeFormEntryCreated": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Form Entry Created",
        "description": "Subscribes to the form entry created event.",
        "operationId": "TpcTriggerFormEntryCreated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Form Entry Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Form.Request.SubscribeFormEntryRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerFormEntryCreated",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Form.Request.NotifyFormEntryRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeFormEntryUpdated": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Form Entry Updated",
        "description": "Subscribes to the form entry updated event.",
        "operationId": "TpcTriggerFormEntryUpdated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Form Entry Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Form.Request.SubscribeFormEntryRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerFormEntryUpdated",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Form.Request.NotifyFormEntryRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeKnowledgeSearch": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "TPC Knowledge Search",
        "description": "Subscribes to the TPC knowledge search event.",
        "operationId": "TpcTriggerKnowledgeSearch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "TPC Knowledge Search Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.Search.Request.SubscribeKnowledgeSearchRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerKnowledgeSearch",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.Search.Request.NotifyKnowledgeSearchRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribePageNavigation": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Page Navigation",
        "description": "Subscribes to the page navigation event.",
        "operationId": "TpcTriggerPageNavigation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Page Navigation Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Navigation.Request.SubscribePageNavigationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerPageNavigation",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Navigation.Request.NotifyPageNavigationRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribePortalUserCreated": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Portal User Created",
        "description": "Subscribes to a portal user created event.",
        "operationId": "TpcTriggerPortalUserCreated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Portal Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Triggers.Request.PortalSubscribeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerPortalUserCreated",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.PortalUser.Request.NotifyPortalUserRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribePortalUserUpdated": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Portal User Updated",
        "description": "Subscribes to a portal user updated event.",
        "operationId": "TpcTriggerPortalUserUpdated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Portal Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Triggers.Request.PortalSubscribeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerPortalUserUpdated",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.PortalUser.Request.NotifyPortalUserRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribePortalUserDeleted": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Portal User Deleted",
        "description": "Subscribes to a portal user deleted event.",
        "operationId": "TpcTriggerPortalUserDeleted",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Portal Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Triggers.Request.PortalSubscribeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerPortalUserDeleted",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.PortalUser.Request.NotifyPortalUserDeleteRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeRoleAssigned": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Role Assigned",
        "description": "Subscribes to the role assigned event.",
        "operationId": "TpcTriggerRoleAssigned",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Role Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Role.Request.SubscribeRoleRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerRoleAssigned",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Role.Request.NotifyRoleRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeRoleUnassigned": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Role Unassigned",
        "description": "Subscribes to the role unassigned event.",
        "operationId": "TpcTriggerRoleUnassigned",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Role Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Role.Request.SubscribeRoleRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerRoleUnassigned",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Role.Request.NotifyRoleRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeSearch": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "Search",
        "description": "Subscribes to the search event.",
        "operationId": "TpcTriggerSearch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Search.Request.SubscribeSearchRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerSearch",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Search.Request.NotifySearchRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeFormSubmission": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "TPC Form Submission",
        "description": "Subscribes to the TPC form submission event.",
        "operationId": "TpcTriggerFormSubmission",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Form Submission Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.Form.Request.SubscribeFormSubmissionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerFormSubmission",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.Form.Request.NotifyFormSubmissionRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeUserCreated": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "User Created",
        "description": "Subscribes to a user created event.",
        "operationId": "TpcTriggerUserCreated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Portal Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Triggers.Request.PortalSubscribeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerUserCreated",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.User.Request.NotifyUserRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeUserUpdated": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "User Updated",
        "description": "Subscribes to a user updated event.",
        "operationId": "TpcTriggerUserUpdated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Portal Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Triggers.Request.PortalSubscribeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerUserUpdated",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.User.Request.NotifyUserRequest"
        }
      }
    },
    "/PortalConnectorPowerPlatform/Services/Flow/v1/SubscribeUserDeleted": {
      "post": {
        "tags": [
          "Triggers"
        ],
        "summary": "User Deleted",
        "description": "Subscribes to a user deleted event.",
        "operationId": "TpcTriggerUserDeleted",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Portal Subscribe Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Triggers.Request.PortalSubscribeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully Created Event Subscription.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            },
            "headers": {
              "Location": {
                "description": "Location of the Delete Method of the WebHook",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          },
          "403": {
            "description": "Unauthorized Request.",
            "schema": {
              "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse"
            }
          }
        },
        "x-ms-trigger": "single",
        "x-ms-visibility": "important",
        "x-ms-api-annotation": {
          "family": "TpcTriggerUserDeleted",
          "revision": 1
        }
      },
      "x-ms-notification-content": {
        "description": "Details for the object provided by the WebHook notification",
        "schema": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.User.Request.NotifyUserRequest"
        }
      }
    }
  },
  "definitions": {
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Content.Request.InitiateCreateContentRequest": {
      "description": "Request Object that is Used to Initiate Create Content requests on the Portal Site.",
      "required": [
        "contentType"
      ],
      "type": "object",
      "properties": {
        "contentType": {
          "description": "Content type of the create request.",
          "type": "string",
          "x-ms-summary": "Content Type",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "value-path": "fullName",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "operation": 0,
              "version": 1
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "itemsPath": "items",
            "itemValuePath": "fullName",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/operation": {
                "value": 0
              },
              "body/version": {
                "value": 1
              }
            }
          }
        },
        "schema": {
          "description": "Schema of the content create request.",
          "type": "object",
          "x-ms-summary": "Schema",
          "x-ms-visibility": "important",
          "x-ms-dynamic-schema": {
            "operationId": "TpcDynamicResolveContentSchema",
            "value-path": "schema",
            "parameters": {
              "operation": 0,
              "phase": 0,
              "fullName": {
                "parameter": "contentType"
              },
              "version": 1
            }
          },
          "x-ms-dynamic-properties": {
            "operationId": "TpcDynamicResolveContentSchema",
            "itemValuePath": "schema",
            "parameters": {
              "body/operation": {
                "value": 0
              },
              "body/phase": {
                "value": 0
              },
              "body/fullName": {
                "parameterReference": "body/contentType"
              },
              "body/version": {
                "value": 1
              }
            }
          }
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.PortalResponse": {
      "description": "Generic Portal Response Message.",
      "required": [
        "status",
        "message",
        "timestamp"
      ],
      "type": "object",
      "properties": {
        "status": {
          "description": "Boolean that indicates whether the request failed (false) or succeeded (true).",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Status",
          "x-ms-visibility": "important"
        },
        "message": {
          "description": "Message that summarizes the results of the request.",
          "type": "string",
          "x-ms-summary": "Message",
          "x-ms-visibility": "important"
        },
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the response.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Content.Request.InitiateDeleteContentRequest": {
      "description": "Request Object that is Used to Initiate Delete Content requests on the Portal Site.",
      "required": [
        "contentType"
      ],
      "type": "object",
      "properties": {
        "contentType": {
          "description": "Content type of the content delete request.",
          "type": "string",
          "x-ms-summary": "Content Type",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "value-path": "fullName",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "operation": 3,
              "version": 1
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "itemsPath": "items",
            "itemValuePath": "fullName",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/operation": {
                "value": 3
              },
              "body/version": {
                "value": 1
              }
            }
          }
        },
        "schema": {
          "description": "Schema of the content delete request.",
          "type": "object",
          "x-ms-summary": "Schema",
          "x-ms-visibility": "important",
          "x-ms-dynamic-schema": {
            "operationId": "TpcDynamicResolveContentSchema",
            "value-path": "schema",
            "parameters": {
              "operation": 3,
              "phase": 0,
              "fullName": {
                "parameter": "contentType"
              },
              "version": 1
            }
          },
          "x-ms-dynamic-properties": {
            "operationId": "TpcDynamicResolveContentSchema",
            "itemValuePath": "schema",
            "parameters": {
              "body/operation": {
                "value": 3
              },
              "body/phase": {
                "value": 0
              },
              "body/fullName": {
                "parameterReference": "body/contentType"
              },
              "body/version": {
                "value": 1
              }
            }
          }
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Content.Request.InitiateEditContentRequest": {
      "description": "Request Object that is Used to Initiate Edit Content requests on the Portal Site.",
      "required": [
        "contentType"
      ],
      "type": "object",
      "properties": {
        "contentType": {
          "description": "Content type of the edit request.",
          "type": "string",
          "x-ms-summary": "Content Type",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "value-path": "fullName",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "operation": 2,
              "version": 1
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "itemsPath": "items",
            "itemValuePath": "fullName",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/operation": {
                "value": 2
              },
              "body/version": {
                "value": 1
              }
            }
          }
        },
        "schema": {
          "description": "Schema of the content edit request.",
          "type": "object",
          "x-ms-summary": "Schema",
          "x-ms-visibility": "important",
          "x-ms-dynamic-schema": {
            "operationId": "TpcDynamicResolveContentSchema",
            "value-path": "schema",
            "parameters": {
              "operation": 2,
              "phase": 0,
              "fullName": {
                "parameter": "contentType"
              },
              "version": 1
            }
          },
          "x-ms-dynamic-properties": {
            "operationId": "TpcDynamicResolveContentSchema",
            "itemValuePath": "schema",
            "parameters": {
              "body/operation": {
                "value": 2
              },
              "body/phase": {
                "value": 0
              },
              "body/fullName": {
                "parameterReference": "body/contentType"
              },
              "body/version": {
                "value": 1
              }
            }
          }
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Content.Request.InitiateGetAllContentRequest": {
      "description": "Request Object that is Used to Initiate Get All Content requests on the Portal Site.",
      "required": [
        "contentType"
      ],
      "type": "object",
      "properties": {
        "contentType": {
          "description": "Content type of the get all request.",
          "type": "string",
          "x-ms-summary": "Content Type",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "value-path": "fullName",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "operation": 4,
              "version": 1
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "itemsPath": "items",
            "itemValuePath": "fullName",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/operation": {
                "value": 4
              },
              "body/version": {
                "value": 1
              }
            }
          }
        },
        "schema": {
          "description": "Schema of the content get all request.",
          "type": "object",
          "x-ms-summary": "Schema",
          "x-ms-visibility": "important",
          "x-ms-dynamic-schema": {
            "operationId": "TpcDynamicResolveContentSchema",
            "value-path": "schema",
            "parameters": {
              "operation": 4,
              "phase": 0,
              "fullName": {
                "parameter": "contentType"
              },
              "version": 1
            }
          },
          "x-ms-dynamic-properties": {
            "operationId": "TpcDynamicResolveContentSchema",
            "itemValuePath": "schema",
            "parameters": {
              "body/operation": {
                "value": 4
              },
              "body/phase": {
                "value": 0
              },
              "body/fullName": {
                "parameterReference": "body/contentType"
              },
              "body/version": {
                "value": 1
              }
            }
          }
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Content.Request.InitiateGetContentRequest": {
      "description": "Request Object that is Used to Initiate Get Content requests on the Portal Site.",
      "required": [
        "contentType"
      ],
      "type": "object",
      "properties": {
        "contentType": {
          "description": "Content type of the get request.",
          "type": "string",
          "x-ms-summary": "Content Type",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "value-path": "fullName",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "operation": 1,
              "version": 1
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "itemsPath": "items",
            "itemValuePath": "fullName",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/operation": {
                "value": 1
              },
              "body/version": {
                "value": 1
              }
            }
          }
        },
        "schema": {
          "description": "Schema of the content get request.",
          "type": "object",
          "x-ms-summary": "Schema",
          "x-ms-visibility": "important",
          "x-ms-dynamic-schema": {
            "operationId": "TpcDynamicResolveContentSchema",
            "value-path": "schema",
            "parameters": {
              "operation": 1,
              "phase": 0,
              "fullName": {
                "parameter": "contentType"
              },
              "version": 1
            }
          },
          "x-ms-dynamic-properties": {
            "operationId": "TpcDynamicResolveContentSchema",
            "itemValuePath": "schema",
            "parameters": {
              "body/operation": {
                "value": 1
              },
              "body/phase": {
                "value": 0
              },
              "body/fullName": {
                "parameterReference": "body/contentType"
              },
              "body/version": {
                "value": 1
              }
            }
          }
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Content.Request.InitiatePublishContentRequest": {
      "description": "Request Object that is Used to Initiate Publish Content requests on the Portal Site.",
      "required": [
        "contentType"
      ],
      "type": "object",
      "properties": {
        "contentType": {
          "description": "Content type of the publish request.",
          "type": "string",
          "x-ms-summary": "Content Type",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "value-path": "fullName",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "operation": 5,
              "version": 1
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "itemsPath": "items",
            "itemValuePath": "fullName",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/operation": {
                "value": 5
              },
              "body/version": {
                "value": 1
              }
            }
          }
        },
        "schema": {
          "description": "Schema of the content publish request.",
          "type": "object",
          "x-ms-summary": "Schema",
          "x-ms-visibility": "important",
          "x-ms-dynamic-schema": {
            "operationId": "TpcDynamicResolveContentSchema",
            "value-path": "schema",
            "parameters": {
              "operation": 5,
              "phase": 0,
              "fullName": {
                "parameter": "contentType"
              },
              "version": 1
            }
          },
          "x-ms-dynamic-properties": {
            "operationId": "TpcDynamicResolveContentSchema",
            "itemValuePath": "schema",
            "parameters": {
              "body/operation": {
                "value": 5
              },
              "body/phase": {
                "value": 0
              },
              "body/fullName": {
                "parameterReference": "body/contentType"
              },
              "body/version": {
                "value": 1
              }
            }
          }
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.TPC.PortalUser.PortalUserInfoCreate": {
      "description": "Object that is used to hold portal user information for create.",
      "required": [
        "email",
        "password",
        "passwordAnswer",
        "passwordQuestion",
        "firstName",
        "lastName"
      ],
      "type": "object",
      "properties": {
        "comment": {
          "description": "Gets or sets application-specific information for the membership user.",
          "type": "string",
          "x-ms-summary": "Comment",
          "x-ms-visibility": "advanced"
        },
        "email": {
          "description": "Gets or sets the email address for the membership user.",
          "type": "string",
          "x-ms-summary": "Email",
          "x-ms-visibility": "important"
        },
        "isApproved": {
          "description": "Gets or sets whether the membership user can be authenticated.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Approved",
          "x-ms-visibility": "advanced"
        },
        "isBackendUser": {
          "description": "Gets or sets a value indicating whether this is a backend user.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is BackendUser",
          "x-ms-visibility": "important"
        },
        "password": {
          "description": "Sets the password for the user.",
          "type": "string",
          "x-ms-summary": "Password",
          "x-ms-visibility": "important"
        },
        "passwordAnswer": {
          "description": "Sets the password answer for the user.",
          "type": "string",
          "x-ms-summary": "Password Answer",
          "x-ms-visibility": "important"
        },
        "passwordQuestion": {
          "description": "Gets the password question for the membership user.",
          "type": "string",
          "x-ms-summary": "Password Question",
          "x-ms-visibility": "important"
        },
        "about": {
          "description": "Gets or sets a descriptive text about the user.",
          "type": "string",
          "x-ms-summary": "About",
          "x-ms-visibility": "important"
        },
        "firstName": {
          "description": "Gets or sets the users first name.",
          "type": "string",
          "x-ms-summary": "First Name",
          "x-ms-visibility": "important"
        },
        "lastName": {
          "description": "Gets or sets the users last name.",
          "type": "string",
          "x-ms-summary": "Last Name",
          "x-ms-visibility": "important"
        },
        "nickname": {
          "description": "Gets or sets the nickname of the user.",
          "type": "string",
          "x-ms-summary": "Nickname",
          "x-ms-visibility": "important"
        },
        "sourceKey": {
          "description": "Gets or sets a field that can be used for synchronization with external content systems.",
          "type": "string",
          "x-ms-summary": "Source Key",
          "x-ms-visibility": "advanced"
        },
        "crmContactId": {
          "format": "uuid",
          "description": "Gets or sets CRM contact id.",
          "type": "string",
          "x-ms-summary": "Crm Contact Id",
          "x-ms-visibility": "important"
        },
        "crmUserId": {
          "format": "uuid",
          "description": "Gets or sets CRM user id.",
          "type": "string",
          "x-ms-summary": "CRM User Id",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.TPC.PortalUser.Response.PortalUserResponse": {
      "description": "Portal User Response Message.",
      "required": [
        "status",
        "message",
        "timestamp",
        "item"
      ],
      "type": "object",
      "properties": {
        "status": {
          "description": "Boolean that indicates whether the request failed (false) or succeeded (true).",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Status",
          "x-ms-visibility": "important"
        },
        "message": {
          "description": "Message that summarizes the results of the request.",
          "type": "string",
          "x-ms-summary": "Message",
          "x-ms-visibility": "important"
        },
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the response.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "item": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.TPC.PortalUser.PortalUserInfo"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.TPC.PortalUser.PortalUserInfo": {
      "description": "Object that is used to hold portal user and profile information.",
      "type": "object",
      "properties": {
        "_tpcDisplayName": {
          "description": "Internal display name.",
          "type": "string",
          "x-ms-summary": "Internal Display Name",
          "x-ms-visibility": "internal"
        },
        "comment": {
          "description": "Gets or sets application-specific information for the membership user.",
          "type": "string",
          "x-ms-summary": "Comment",
          "x-ms-visibility": "advanced"
        },
        "creationDate": {
          "format": "date-time",
          "description": "The date on which the content was created.",
          "type": "string",
          "x-ms-summary": "Creation Date",
          "x-ms-visibility": "advanced"
        },
        "email": {
          "description": "Gets or sets the email address for the membership user.",
          "type": "string",
          "x-ms-summary": "Email",
          "x-ms-visibility": "important"
        },
        "externalId": {
          "format": "uuid",
          "description": "Gets or sets the user id in the external provider.",
          "type": "string",
          "x-ms-summary": "External Id",
          "x-ms-visibility": "advanced"
        },
        "externalProviderName": {
          "description": "Gets or sets the external provider name.",
          "type": "string",
          "x-ms-summary": "External Provider Name",
          "x-ms-visibility": "advanced"
        },
        "id": {
          "format": "uuid",
          "description": "Gets or sets the identifier of the user.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Id",
          "x-ms-visibility": "important"
        },
        "isApproved": {
          "description": "Gets or sets whether the membership user can be authenticated.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Approved",
          "x-ms-visibility": "advanced"
        },
        "isBackendUser": {
          "description": "Gets or sets a value indicating whether this is a backend user.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is BackendUser",
          "x-ms-visibility": "important"
        },
        "isLockedOut": {
          "description": "Gets a value indicating whether the membership user is locked out and unable to be validated.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Locked Out",
          "x-ms-visibility": "advanced"
        },
        "isLoggedIn": {
          "description": "Gets or sets a value indicating whether the membership user is logged in.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Logged In",
          "x-ms-visibility": "advanced"
        },
        "isOnline": {
          "description": "Gets whether the user is currently online.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Online",
          "x-ms-visibility": "advanced"
        },
        "lastLoginDate": {
          "format": "date-time",
          "description": "Gets or sets the date and time that the user was last authenticated.",
          "type": "string",
          "x-ms-summary": "Last Login Date",
          "x-ms-visibility": "advanced"
        },
        "lastLoginIp": {
          "description": "Gets or sets the IP address of the last user login.",
          "type": "string",
          "x-ms-summary": "Last Login Ip",
          "x-ms-visibility": "advanced"
        },
        "lastModified": {
          "format": "date-time",
          "description": "The date on which the content was last modified.",
          "type": "string",
          "x-ms-summary": "Last Modified",
          "x-ms-visibility": "advanced"
        },
        "passwordFormat": {
          "format": "int32",
          "description": "Gets or sets the password format.",
          "type": "integer",
          "x-ms-summary": "Password Format",
          "x-ms-visibility": "advanced"
        },
        "passwordQuestion": {
          "description": "Gets the password question for the membership user.",
          "type": "string",
          "x-ms-summary": "Password Question",
          "x-ms-visibility": "important"
        },
        "providerName": {
          "description": "Gets the name of the membership provider that stores and retrieves user information for the user.",
          "type": "string",
          "x-ms-summary": "Provider Name",
          "x-ms-visibility": "advanced"
        },
        "userName": {
          "description": "Gets the username of the membership user.",
          "type": "string",
          "x-ms-summary": "User Name",
          "x-ms-visibility": "important"
        },
        "about": {
          "description": "Gets or sets a descriptive text about the user.",
          "type": "string",
          "x-ms-summary": "About",
          "x-ms-visibility": "important"
        },
        "avatar": {
          "format": "uuid",
          "description": "Gets or sets the image used as an avatar.",
          "type": "string",
          "x-ms-summary": "Avatar",
          "x-ms-visibility": "advanced"
        },
        "dateCreated": {
          "format": "date-time",
          "description": "Gets the date and time the profile was created.",
          "type": "string",
          "x-ms-summary": "Date Created",
          "x-ms-visibility": "advanced"
        },
        "firstName": {
          "description": "Gets or sets the users first name.",
          "type": "string",
          "x-ms-summary": "First Name",
          "x-ms-visibility": "important"
        },
        "lastName": {
          "description": "Gets or sets the users last name.",
          "type": "string",
          "x-ms-summary": "Last Name",
          "x-ms-visibility": "important"
        },
        "nickname": {
          "description": "Gets or sets the nickname of the user.",
          "type": "string",
          "x-ms-summary": "Nickname",
          "x-ms-visibility": "important"
        },
        "owner": {
          "format": "uuid",
          "description": "Gets the identifier of the profiles user.",
          "type": "string",
          "x-ms-summary": "Owner",
          "x-ms-visibility": "advanced"
        },
        "sourceKey": {
          "description": "Gets or sets a field that can be used for synchronization with external content systems.",
          "type": "string",
          "x-ms-summary": "Source Key",
          "x-ms-visibility": "advanced"
        },
        "crmContactId": {
          "format": "uuid",
          "description": "Gets or sets CRM contact id.",
          "type": "string",
          "x-ms-summary": "Crm Contact Id",
          "x-ms-visibility": "important"
        },
        "crmParentCustomerId": {
          "format": "uuid",
          "description": "Gets or sets CRM parent customer id.",
          "type": "string",
          "x-ms-summary": "CRM Parent Customer Id",
          "x-ms-visibility": "important"
        },
        "crmParentCustomerType": {
          "description": "Gets or sets CRM parent customer type (account, systemuser, etc).",
          "type": "string",
          "x-ms-summary": "CRM Parent Customer Type",
          "x-ms-visibility": "important"
        },
        "crmUserId": {
          "format": "uuid",
          "description": "Gets or sets CRM user id.",
          "type": "string",
          "x-ms-summary": "CRM User Id",
          "x-ms-visibility": "important"
        },
        "crmContactPriceListId": {
          "format": "uuid",
          "description": "Gets or sets CRM contact price list id.",
          "type": "string",
          "x-ms-summary": "Crm Contact Price List Id",
          "x-ms-visibility": "important"
        },
        "crmPortalUserId": {
          "format": "uuid",
          "description": "Gets or sets CRM portal user id.",
          "type": "string",
          "x-ms-summary": "Crm Portal User Id",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": "User:"
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.TPC.PortalUser.PortalUserInfoEdit": {
      "description": "Object that is used to hold portal user information for edit.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "comment": {
          "description": "Gets or sets application-specific information for the membership user.",
          "type": "string",
          "x-ms-summary": "Comment",
          "x-ms-visibility": "advanced"
        },
        "email": {
          "description": "Gets or sets the email address for the membership user.",
          "type": "string",
          "x-ms-summary": "Email",
          "x-ms-visibility": "important"
        },
        "id": {
          "format": "uuid",
          "description": "Gets or sets the identifier of the user.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Id",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcActionGetAllPortalUsers",
            "value-path": "id",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": { }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcActionGetAllPortalUsers",
            "itemsPath": "items",
            "itemValuePath": "id",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": { }
          }
        },
        "isApproved": {
          "description": "Gets or sets whether the membership user can be authenticated.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Approved",
          "x-ms-visibility": "advanced"
        },
        "isBackendUser": {
          "description": "Gets or sets a value indicating whether this is a backend user.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is BackendUser",
          "x-ms-visibility": "important"
        },
        "about": {
          "description": "Gets or sets a descriptive text about the user.",
          "type": "string",
          "x-ms-summary": "About",
          "x-ms-visibility": "important"
        },
        "firstName": {
          "description": "Gets or sets the users first name.",
          "type": "string",
          "x-ms-summary": "First Name",
          "x-ms-visibility": "important"
        },
        "lastName": {
          "description": "Gets or sets the users last name.",
          "type": "string",
          "x-ms-summary": "Last Name",
          "x-ms-visibility": "important"
        },
        "nickname": {
          "description": "Gets or sets the nickname of the user.",
          "type": "string",
          "x-ms-summary": "Nickname",
          "x-ms-visibility": "important"
        },
        "sourceKey": {
          "description": "Gets or sets a field that can be used for synchronization with external content systems.",
          "type": "string",
          "x-ms-summary": "Source Key",
          "x-ms-visibility": "advanced"
        },
        "crmContactId": {
          "format": "uuid",
          "description": "Gets or sets CRM contact id.",
          "type": "string",
          "x-ms-summary": "Crm Contact Id",
          "x-ms-visibility": "important"
        },
        "crmUserId": {
          "format": "uuid",
          "description": "Gets or sets CRM user id.",
          "type": "string",
          "x-ms-summary": "CRM User Id",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.TPC.PortalUser.SelectPortalUserParameters": {
      "description": "Object that is used to help select a portal user item. In future iterations this object may also be used to add filtering criteria.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "Gets or sets the identifier of the user.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Id",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcActionGetAllPortalUsers",
            "value-path": "id",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": { }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcActionGetAllPortalUsers",
            "itemsPath": "items",
            "itemValuePath": "id",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": { }
          }
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.TPC.PortalUser.Response.PortalUsersResponse": {
      "description": "Portal Users Response Message.",
      "required": [
        "status",
        "message",
        "timestamp",
        "count"
      ],
      "type": "object",
      "properties": {
        "status": {
          "description": "Boolean that indicates whether the request failed (false) or succeeded (true).",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Status",
          "x-ms-visibility": "important"
        },
        "message": {
          "description": "Message that summarizes the results of the request.",
          "type": "string",
          "x-ms-summary": "Message",
          "x-ms-visibility": "important"
        },
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the response.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "count": {
          "format": "int32",
          "description": "Total number of portal users.",
          "type": "integer",
          "x-ms-summary": "Portal Users Count",
          "x-ms-visibility": "important"
        },
        "items": {
          "description": "List of portal users.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.TPC.PortalUser.PortalUserInfo"
          },
          "x-ms-summary": "Portal Users",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Role.Request.InitiateRoleActionRequest": {
      "description": "Request Used to Initiate a Role Action.",
      "required": [
        "userId",
        "roleId"
      ],
      "type": "object",
      "properties": {
        "userId": {
          "format": "uuid",
          "description": "The user that the role action will be performed on.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "User Id",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcActionGetAllContent",
            "value-path": "id",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "contentType": "Telerik.Sitefinity.Security.Model.User"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcActionGetAllContent",
            "itemsPath": "items",
            "itemValuePath": "id",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/contentType": {
                "value": "Telerik.Sitefinity.Security.Model.User"
              }
            }
          }
        },
        "roleId": {
          "format": "uuid",
          "description": "The role that the action will be performed with.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Role Id",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcActionGetAllContent",
            "value-path": "id",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "contentType": "Telerik.Sitefinity.Security.Model.Role"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcActionGetAllContent",
            "itemsPath": "items",
            "itemValuePath": "id",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/contentType": {
                "value": "Telerik.Sitefinity.Security.Model.Role"
              }
            }
          }
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.Sitefinity.Hybrid.Response.UserRolePortalResponse": {
      "description": "User-Role Portal Response Message.",
      "required": [
        "status",
        "message",
        "timestamp",
        "role",
        "user"
      ],
      "type": "object",
      "properties": {
        "status": {
          "description": "Boolean that indicates whether the request failed (false) or succeeded (true).",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Status",
          "x-ms-visibility": "important"
        },
        "message": {
          "description": "Message that summarizes the results of the request.",
          "type": "string",
          "x-ms-summary": "Message",
          "x-ms-visibility": "important"
        },
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the response.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "role": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Role.RoleInfo"
        },
        "user": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.User.UserInfo"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Role.RoleInfo": {
      "description": "Object that is used to hold role information.",
      "type": "object",
      "properties": {
        "_tpcDisplayName": {
          "description": "Internal display name.",
          "type": "string",
          "x-ms-summary": "Internal Display Name",
          "x-ms-visibility": "internal"
        },
        "id": {
          "format": "uuid",
          "description": "Unique identifier of the role.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Id",
          "x-ms-visibility": "important"
        },
        "lastModified": {
          "format": "date-time",
          "description": "Datetime on which the role was last modified.",
          "type": "string",
          "x-ms-summary": "Last Modified",
          "x-ms-visibility": "advanced"
        },
        "name": {
          "description": "Name of the role.",
          "type": "string",
          "x-ms-summary": "Name",
          "x-ms-visibility": "important"
        },
        "provider": {
          "description": "Provider of the role.",
          "type": "string",
          "x-ms-summary": "Provider",
          "x-ms-visibility": "advanced"
        }
      },
      "x-ms-summary": "Role:"
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.User.UserInfo": {
      "description": "Object that is used to hold user and profile information.",
      "type": "object",
      "properties": {
        "_tpcDisplayName": {
          "description": "Internal display name.",
          "type": "string",
          "x-ms-summary": "Internal Display Name",
          "x-ms-visibility": "internal"
        },
        "comment": {
          "description": "Gets or sets application-specific information for the membership user.",
          "type": "string",
          "x-ms-summary": "Comment",
          "x-ms-visibility": "advanced"
        },
        "creationDate": {
          "format": "date-time",
          "description": "The date on which the content was created.",
          "type": "string",
          "x-ms-summary": "Creation Date",
          "x-ms-visibility": "advanced"
        },
        "email": {
          "description": "Gets or sets the email address for the membership user.",
          "type": "string",
          "x-ms-summary": "Email",
          "x-ms-visibility": "important"
        },
        "externalId": {
          "format": "uuid",
          "description": "Gets or sets the user id in the external provider.",
          "type": "string",
          "x-ms-summary": "External Id",
          "x-ms-visibility": "advanced"
        },
        "externalProviderName": {
          "description": "Gets or sets the external provider name.",
          "type": "string",
          "x-ms-summary": "External Provider Name",
          "x-ms-visibility": "advanced"
        },
        "id": {
          "format": "uuid",
          "description": "Gets or sets the identifier of the user.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Id",
          "x-ms-visibility": "important"
        },
        "isApproved": {
          "description": "Gets or sets whether the membership user can be authenticated.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Approved",
          "x-ms-visibility": "advanced"
        },
        "isBackendUser": {
          "description": "Gets or sets a value indicating whether this is a backend user.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is BackendUser",
          "x-ms-visibility": "important"
        },
        "isLockedOut": {
          "description": "Gets a value indicating whether the membership user is locked out and unable to be validated.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Locked Out",
          "x-ms-visibility": "advanced"
        },
        "isLoggedIn": {
          "description": "Gets or sets a value indicating whether the membership user is logged in.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Logged In",
          "x-ms-visibility": "advanced"
        },
        "isOnline": {
          "description": "Gets whether the user is currently online.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Online",
          "x-ms-visibility": "advanced"
        },
        "lastLoginDate": {
          "format": "date-time",
          "description": "Gets or sets the date and time that the user was last authenticated.",
          "type": "string",
          "x-ms-summary": "Last Login Date",
          "x-ms-visibility": "advanced"
        },
        "lastLoginIp": {
          "description": "Gets or sets the IP address of the last user login.",
          "type": "string",
          "x-ms-summary": "Last Login Ip",
          "x-ms-visibility": "advanced"
        },
        "lastModified": {
          "format": "date-time",
          "description": "The date on which the content was last modified.",
          "type": "string",
          "x-ms-summary": "Last Modified",
          "x-ms-visibility": "advanced"
        },
        "passwordFormat": {
          "format": "int32",
          "description": "Gets or sets the password format.",
          "type": "integer",
          "x-ms-summary": "Password Format",
          "x-ms-visibility": "advanced"
        },
        "passwordQuestion": {
          "description": "Gets the password question for the membership user.",
          "type": "string",
          "x-ms-summary": "Password Question",
          "x-ms-visibility": "important"
        },
        "providerName": {
          "description": "Gets the name of the membership provider that stores and retrieves user information for the user.",
          "type": "string",
          "x-ms-summary": "Provider Name",
          "x-ms-visibility": "advanced"
        },
        "userName": {
          "description": "Gets the username of the membership user.",
          "type": "string",
          "x-ms-summary": "User Name",
          "x-ms-visibility": "important"
        },
        "about": {
          "description": "Gets or sets a descriptive text about the user.",
          "type": "string",
          "x-ms-summary": "About",
          "x-ms-visibility": "important"
        },
        "avatar": {
          "format": "uuid",
          "description": "Gets or sets the image used as an avatar.",
          "type": "string",
          "x-ms-summary": "Avatar",
          "x-ms-visibility": "advanced"
        },
        "dateCreated": {
          "format": "date-time",
          "description": "Gets the date and time the profile was created.",
          "type": "string",
          "x-ms-summary": "Date Created",
          "x-ms-visibility": "advanced"
        },
        "firstName": {
          "description": "Gets or sets the users first name.",
          "type": "string",
          "x-ms-summary": "First Name",
          "x-ms-visibility": "important"
        },
        "lastName": {
          "description": "Gets or sets the users last name.",
          "type": "string",
          "x-ms-summary": "Last Name",
          "x-ms-visibility": "important"
        },
        "nickname": {
          "description": "Gets or sets the nickname of the user.",
          "type": "string",
          "x-ms-summary": "Nickname",
          "x-ms-visibility": "important"
        },
        "owner": {
          "format": "uuid",
          "description": "Gets the identifier of the profiles user.",
          "type": "string",
          "x-ms-summary": "Owner",
          "x-ms-visibility": "advanced"
        },
        "sourceKey": {
          "description": "Gets or sets a field that can be used for synchronization with external content systems.",
          "type": "string",
          "x-ms-summary": "Source Key",
          "x-ms-visibility": "advanced"
        }
      },
      "x-ms-summary": "User:"
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.Content.Request.InitiateUnpublishContentRequest": {
      "description": "Request Object that is Used to Initiate Unpublish Content requests on the Portal Site.",
      "required": [
        "contentType"
      ],
      "type": "object",
      "properties": {
        "contentType": {
          "description": "Content type of the unpublish request.",
          "type": "string",
          "x-ms-summary": "Content Type",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "value-path": "fullName",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "operation": 6,
              "version": 1
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "itemsPath": "items",
            "itemValuePath": "fullName",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/operation": {
                "value": 6
              },
              "body/version": {
                "value": 1
              }
            }
          }
        },
        "schema": {
          "description": "Schema of the content unpublish request.",
          "type": "object",
          "x-ms-summary": "Schema",
          "x-ms-visibility": "important",
          "x-ms-dynamic-schema": {
            "operationId": "TpcDynamicResolveContentSchema",
            "value-path": "schema",
            "parameters": {
              "operation": 6,
              "phase": 0,
              "fullName": {
                "parameter": "contentType"
              },
              "version": 1
            }
          },
          "x-ms-dynamic-properties": {
            "operationId": "TpcDynamicResolveContentSchema",
            "itemValuePath": "schema",
            "parameters": {
              "body/operation": {
                "value": 6
              },
              "body/phase": {
                "value": 0
              },
              "body/fullName": {
                "parameterReference": "body/contentType"
              },
              "body/version": {
                "value": 1
              }
            }
          }
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Sitefinity.User.Request.InitiateUserActionRequest": {
      "description": "Request Used to Initiate a User Action.",
      "required": [
        "userId"
      ],
      "type": "object",
      "properties": {
        "userId": {
          "format": "uuid",
          "description": "User that the action will be performed on.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "User Id",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcActionGetAllContent",
            "value-path": "id",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "contentType": "Telerik.Sitefinity.Security.Model.User"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcActionGetAllContent",
            "itemsPath": "items",
            "itemValuePath": "id",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/contentType": {
                "value": "Telerik.Sitefinity.Security.Model.User"
              }
            }
          }
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.Sitefinity.User.Response.UserPortalResponse": {
      "description": "User Portal Response Message.",
      "required": [
        "status",
        "message",
        "timestamp",
        "item"
      ],
      "type": "object",
      "properties": {
        "status": {
          "description": "Boolean that indicates whether the request failed (false) or succeeded (true).",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Status",
          "x-ms-visibility": "important"
        },
        "message": {
          "description": "Message that summarizes the results of the request.",
          "type": "string",
          "x-ms-summary": "Message",
          "x-ms-visibility": "important"
        },
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the response.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "item": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.User.UserInfo"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Generic.Types.Request.TypesRequest": {
      "description": "Request Object that is Used to Request Types",
      "required": [
        "operation",
        "version"
      ],
      "type": "object",
      "properties": {
        "operation": {
          "description": "Operation that is used to filter the types.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ],
          "type": "integer",
          "x-ms-summary": "Operation",
          "x-ms-visibility": "important",
          "x-ms-enum-values": [
            {
              "displayName": "Create",
              "value": 0
            },
            {
              "displayName": "Read",
              "value": 1
            },
            {
              "displayName": "Update",
              "value": 2
            },
            {
              "displayName": "Delete",
              "value": 3
            },
            {
              "displayName": "ReadMultiple",
              "value": 4
            },
            {
              "displayName": "Publish",
              "value": 5
            },
            {
              "displayName": "Unpublish",
              "value": 6
            },
            {
              "displayName": "All",
              "value": 7
            },
            {
              "displayName": "Trigger",
              "value": 8
            },
            {
              "displayName": "TriggerDelete",
              "value": 9
            }
          ]
        },
        "version": {
          "format": "int32",
          "description": "Version that is used to filter the types.",
          "type": "integer",
          "x-ms-summary": "Version",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.Generic.Types.Response.TypesPortalResponse": {
      "description": "Types Portal Response Message.",
      "required": [
        "status",
        "message",
        "timestamp",
        "count"
      ],
      "type": "object",
      "properties": {
        "status": {
          "description": "Boolean that indicates whether the request failed (false) or succeeded (true).",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Status",
          "x-ms-visibility": "important"
        },
        "message": {
          "description": "Message that summarizes the results of the request.",
          "type": "string",
          "x-ms-summary": "Message",
          "x-ms-visibility": "important"
        },
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the response.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "count": {
          "format": "int32",
          "description": "Total number of supported types.",
          "type": "integer",
          "x-ms-summary": "Type Count",
          "x-ms-visibility": "important"
        },
        "items": {
          "description": "List of type information.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Generic.Types.TypeInfo"
          },
          "x-ms-summary": "Types",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Generic.Types.TypeInfo": {
      "description": "Object that is used to hold type information.",
      "type": "object",
      "properties": {
        "_tpcDisplayName": {
          "description": "Internal display name.",
          "type": "string",
          "x-ms-summary": "Internal Display Name",
          "x-ms-visibility": "internal"
        },
        "versions": {
          "description": "Internal revision numbers that this type are included in.",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "x-ms-summary": "Versions",
          "x-ms-visibility": "internal"
        },
        "displayName": {
          "description": "Display name of the type.",
          "type": "string",
          "x-ms-summary": "Display Name",
          "x-ms-visibility": "important"
        },
        "fullName": {
          "description": "Full name of the type.",
          "type": "string",
          "x-ms-summary": "Full Name",
          "x-ms-visibility": "important"
        },
        "userFriendlyName": {
          "description": "User friendly name of the type.",
          "type": "string",
          "x-ms-summary": "User Friendly Name",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": "Type:"
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Generic.Schema.Request.SchemaRequest": {
      "description": "Request Object that is Used to Request a Dynamic Schema",
      "required": [
        "fullName",
        "operation",
        "phase",
        "version"
      ],
      "type": "object",
      "properties": {
        "fullName": {
          "description": "Full name of the object that the schema is being requested for.",
          "type": "string",
          "x-ms-summary": "Full Name",
          "x-ms-visibility": "important"
        },
        "operation": {
          "description": "Operation to be performed on the object that the schema is being requested for.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ],
          "type": "integer",
          "x-ms-summary": "Operation",
          "x-ms-visibility": "important",
          "x-ms-enum-values": [
            {
              "displayName": "Create",
              "value": 0
            },
            {
              "displayName": "Read",
              "value": 1
            },
            {
              "displayName": "Update",
              "value": 2
            },
            {
              "displayName": "Delete",
              "value": 3
            },
            {
              "displayName": "ReadMultiple",
              "value": 4
            },
            {
              "displayName": "Publish",
              "value": 5
            },
            {
              "displayName": "Unpublish",
              "value": 6
            },
            {
              "displayName": "All",
              "value": 7
            },
            {
              "displayName": "Trigger",
              "value": 8
            },
            {
              "displayName": "TriggerDelete",
              "value": 9
            }
          ]
        },
        "phase": {
          "description": "Phase (request or response) of the operation to be performed on the object that the schema is being requested for.",
          "enum": [
            0,
            1
          ],
          "type": "integer",
          "x-ms-summary": "Content Phase",
          "x-ms-visibility": "important",
          "x-ms-enum-values": [
            {
              "displayName": "Request",
              "value": 0
            },
            {
              "displayName": "Response",
              "value": 1
            }
          ]
        },
        "version": {
          "format": "int32",
          "description": "Version that is used to filter the types.",
          "type": "integer",
          "x-ms-summary": "Version",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Actions.Generic.Schema.Response.SchemaResponse": {
      "description": "Object that is used to return a dynamic schema response.",
      "required": [
        "status",
        "message",
        "timestamp",
        "typeFullName",
        "typeDisplayName",
        "requestFullName",
        "requestDisplayName",
        "schema"
      ],
      "type": "object",
      "properties": {
        "status": {
          "description": "Boolean that indicates whether the request failed (false) or succeeded (true).",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Status",
          "x-ms-visibility": "important"
        },
        "message": {
          "description": "Message that summarizes the results of the request.",
          "type": "string",
          "x-ms-summary": "Message",
          "x-ms-visibility": "important"
        },
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the response.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "typeFullName": {
          "description": "Full name of the content type.",
          "type": "string",
          "x-ms-summary": "Type Full Name",
          "x-ms-visibility": "important"
        },
        "typeDisplayName": {
          "description": "Display name of the content type.",
          "type": "string",
          "x-ms-summary": "Type Display Name",
          "x-ms-visibility": "important"
        },
        "requestFullName": {
          "description": "Full name of the request object that will be used for the specified type and operation.",
          "type": "string",
          "x-ms-summary": "Request Full Name",
          "x-ms-visibility": "important"
        },
        "requestDisplayName": {
          "description": "Display name of the request object that will be used for the specified type and operation.",
          "type": "string",
          "x-ms-summary": "Request Display Name",
          "x-ms-visibility": "important"
        },
        "schema": {
          "description": "Schema object representing the request object for the specified type and operation.",
          "type": "object",
          "x-ms-summary": "Schema",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Content.Sitefinity.Page.Response.PageNodesPortalResponse": {
      "description": "Page Nodes Portal Response Message.",
      "required": [
        "status",
        "message",
        "timestamp",
        "count"
      ],
      "type": "object",
      "properties": {
        "status": {
          "description": "Boolean that indicates whether the request failed (false) or succeeded (true).",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Status",
          "x-ms-visibility": "important"
        },
        "message": {
          "description": "Message that summarizes the results of the request.",
          "type": "string",
          "x-ms-summary": "Message",
          "x-ms-visibility": "important"
        },
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the response.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "count": {
          "format": "int32",
          "description": "Total number of page node items.",
          "type": "integer",
          "x-ms-summary": "Page Nodes Count",
          "x-ms-visibility": "important"
        },
        "items": {
          "description": "List of page nodes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Page.PageNodeInfo"
          },
          "x-ms-summary": "Page Nodes",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Page.PageNodeInfo": {
      "description": "Object that is used to hold page node information.",
      "type": "object",
      "properties": {
        "_tpcDisplayName": {
          "description": "Internal display name.",
          "type": "string",
          "x-ms-summary": "Internal Display Name",
          "x-ms-visibility": "internal"
        },
        "approvalWorkflowState": {
          "description": "Gets or sets the current state of the item in the approval workflow.",
          "type": "string",
          "x-ms-summary": "Approval Workflow State",
          "x-ms-visibility": "advanced"
        },
        "attributes": {
          "description": "Gets a dictionary of taxonomy attributes for this content.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-summary": "Attributes",
          "x-ms-visibility": "advanced"
        },
        "availableCultures": {
          "description": "Gets cultures available for this item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Generic.Culture.CultureInfo"
          },
          "x-ms-summary": "Available Cultures ->",
          "x-ms-visibility": "advanced"
        },
        "availableLanguages": {
          "description": "Gets languages available for this item.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Available Languages",
          "x-ms-visibility": "advanced"
        },
        "crawlable": {
          "description": "Gets or sets a value indicating whether this page can be indexed by external search engines.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Crawlable",
          "x-ms-visibility": "important"
        },
        "description": {
          "description": "Description of the content item.",
          "type": "string",
          "x-ms-summary": "Description",
          "x-ms-visibility": "important"
        },
        "dateCreated": {
          "format": "date-time",
          "description": "The date on which the content was created.",
          "type": "string",
          "x-ms-summary": "Date Created",
          "x-ms-visibility": "advanced"
        },
        "extension": {
          "description": "Gets or sets the extension to be used with the current page with the dot, ex .aspx, .html.",
          "type": "string",
          "x-ms-summary": "Extension",
          "x-ms-visibility": "advanced"
        },
        "id": {
          "format": "uuid",
          "description": "Unique identifier of the content.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Id",
          "x-ms-visibility": "important"
        },
        "includeInSearchIndex": {
          "description": "Gets or sets a value indicating whether to exclude the page from the Sitefinity search engine.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Include In Search Index",
          "x-ms-visibility": "important"
        },
        "isBackend": {
          "description": "Gets a value indicating whether this node is a backend node.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Backend",
          "x-ms-visibility": "important"
        },
        "isSplitPage": {
          "description": "Gets a value indicating whether this page is in split mode.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Split Page",
          "x-ms-visibility": "advanced"
        },
        "lastModified": {
          "format": "date-time",
          "description": "The date on which the content was last modified.",
          "type": "string",
          "x-ms-summary": "Last Modified",
          "x-ms-visibility": "advanced"
        },
        "localizationStrategy": {
          "description": "Gets the localization strategy.",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer",
          "x-ms-summary": "Localization Strategy",
          "x-ms-visibility": "advanced",
          "x-ms-enum-values": [
            {
              "displayName": "NotSelected",
              "value": 0
            },
            {
              "displayName": "Split",
              "value": 1
            },
            {
              "displayName": "Synced",
              "value": 2
            }
          ]
        },
        "moduleName": {
          "description": "Gets or sets the name of the module that this page node depends on.",
          "type": "string",
          "x-ms-summary": "Module Name",
          "x-ms-visibility": "advanced"
        },
        "name": {
          "description": "Gets or sets the programmatic name of the page node.",
          "type": "string",
          "x-ms-summary": "Name",
          "x-ms-visibility": "important"
        },
        "nodes": {
          "description": "Gets a list of child page nodes.",
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "x-ms-summary": "Nodes",
          "x-ms-visibility": "advanced"
        },
        "nodeType": {
          "description": "Gets or sets the type of the page.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "type": "integer",
          "x-ms-summary": "Node Type",
          "x-ms-visibility": "advanced",
          "x-ms-enum-values": [
            {
              "displayName": "Standard",
              "value": 0
            },
            {
              "displayName": "Group",
              "value": 1
            },
            {
              "displayName": "External",
              "value": 2
            },
            {
              "displayName": "InnerRedirect",
              "value": 3
            },
            {
              "displayName": "OuterRedirect",
              "value": 4
            },
            {
              "displayName": "Rewriting",
              "value": 5
            }
          ]
        },
        "ordinal": {
          "format": "float",
          "description": "Gets or sets the ordinal number.",
          "type": "number",
          "x-ms-summary": "Ordinal",
          "x-ms-visibility": "advanced"
        },
        "owner": {
          "format": "uuid",
          "description": "User id of the owner of the content.",
          "type": "string",
          "x-ms-summary": "Owner",
          "x-ms-visibility": "important"
        },
        "pageId": {
          "format": "uuid",
          "description": "Gets the Id of the page data that is linked to the node.",
          "type": "string",
          "x-ms-summary": "Page Id",
          "x-ms-visibility": "important"
        },
        "parentId": {
          "format": "uuid",
          "description": "Gets or sets the parent node.",
          "type": "string",
          "x-ms-summary": "Parent Id",
          "x-ms-visibility": "important"
        },
        "redirectUrl": {
          "description": "Gets or sets the URL where the client will be redirected to if the NodeType is set to Redirect.",
          "type": "string",
          "x-ms-summary": "Redirect Url",
          "x-ms-visibility": "advanced"
        },
        "requireSsl": {
          "description": "Gets or sets a value indicating whether this page requires SSL.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Require Ssl",
          "x-ms-visibility": "advanced"
        },
        "showInNavigation": {
          "description": "Gets or sets a value indicating whether this page should be shown in the navigation.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Show In Navigation",
          "x-ms-visibility": "important"
        },
        "title": {
          "description": "Gets or sets the title.",
          "type": "string",
          "x-ms-summary": "Title",
          "x-ms-visibility": "important"
        },
        "urlName": {
          "description": "Gets or sets the url name of the content item.",
          "type": "string",
          "x-ms-summary": "Url Name",
          "x-ms-visibility": "important"
        },
        "urls": {
          "description": "Collection of url data for this content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Url.UrlInfo"
          },
          "x-ms-summary": "Urls ->",
          "x-ms-visibility": "advanced"
        }
      },
      "x-ms-summary": "Page Node:"
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Generic.Culture.CultureInfo": {
      "description": "Object that is used to return readonly culture information.",
      "type": "object",
      "properties": {
        "_tpcDisplayName": {
          "description": "Internal display name.",
          "type": "string",
          "x-ms-summary": "Internal Display Name",
          "x-ms-visibility": "internal"
        },
        "displayName": {
          "description": "The fully localized culture name.",
          "type": "string",
          "x-ms-summary": "Display Name",
          "x-ms-visibility": "important"
        },
        "isNeutralCulture": {
          "description": "Indicates whether this culture is neutral.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Neutral Culture",
          "x-ms-visibility": "advanced"
        },
        "isReadOnly": {
          "description": "Indicates whether or not this culture is read-only.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Read-Only",
          "x-ms-visibility": "advanced"
        },
        "lcid": {
          "format": "int32",
          "description": "Gets the culture identifier.",
          "type": "integer",
          "x-ms-summary": "LCID",
          "x-ms-visibility": "important"
        },
        "name": {
          "description": "Gets the culture name in the format languagecode2-country/regioncode2.",
          "type": "string",
          "x-ms-summary": "Name",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Url.UrlInfo": {
      "description": "Object that is used to return a readonly url information.",
      "type": "object",
      "properties": {
        "_tpcDisplayName": {
          "description": "Internal display name.",
          "type": "string",
          "x-ms-summary": "Internal Display Name",
          "x-ms-visibility": "internal"
        },
        "disabled": {
          "description": "Indicates whether or not this url is disabled.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Disabled",
          "x-ms-visibility": "advanced"
        },
        "id": {
          "format": "uuid",
          "description": "Unique identifier of the url.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Id",
          "x-ms-visibility": "important"
        },
        "lastModified": {
          "format": "date-time",
          "description": "Date of the last time this url was modified.",
          "type": "string",
          "x-ms-summary": "Last Modified",
          "x-ms-visibility": "advanced"
        },
        "queryString": {
          "description": "The Query string for this url.",
          "type": "string",
          "x-ms-summary": "Query String",
          "x-ms-visibility": "advanced"
        },
        "url": {
          "description": "The url value.",
          "type": "string",
          "x-ms-summary": "URL",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Authentication.Request.NotifyLoginRequest": {
      "description": "Request Used to Notify for a Login.",
      "required": [
        "timestamp",
        "executingUserId",
        "user",
        "loginResult"
      ],
      "type": "object",
      "properties": {
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the request.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "executingUserId": {
          "format": "uuid",
          "description": "Sitefinity user id of the portal user who executed the action.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Executing User Id",
          "x-ms-visibility": "important"
        },
        "user": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.User.UserInfo"
        },
        "loginResult": {
          "description": "Indicates the final result of the login.",
          "type": "string",
          "x-ms-summary": "Result",
          "x-ms-visibility": "important"
        },
        "origin": {
          "description": "Origin of the login.",
          "type": "string",
          "x-ms-summary": "Origin",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Authentication.Request.SubscribeLoginRequest": {
      "description": "Request object that is used to subscribe for a Login on a Portal site",
      "required": [
        "callBackUrl"
      ],
      "type": "object",
      "properties": {
        "callBackUrl": {
          "description": "Callback url of the web hook request.",
          "type": "string",
          "x-ms-summary": "Call Back URL",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "userId": {
          "format": "uuid",
          "description": "User Id - leave empty to trigger on all user logins.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "User Id",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcActionGetAllContent",
            "value-path": "id",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "contentType": "Telerik.Sitefinity.Security.Model.User"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcActionGetAllContent",
            "itemsPath": "items",
            "itemValuePath": "id",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/contentType": {
                "value": "Telerik.Sitefinity.Security.Model.User"
              }
            }
          }
        },
        "loginResult": {
          "description": "Login Result - Leave empty to trigger on all login results.",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14
          ],
          "type": "integer",
          "x-ms-summary": "Login Result",
          "x-ms-visibility": "important",
          "x-ms-enum-values": [
            {
              "displayName": "Success",
              "value": 0
            },
            {
              "displayName": "UserLimitReached",
              "value": 1
            },
            {
              "displayName": "UserNotFound",
              "value": 2
            },
            {
              "displayName": "UserLoggedFromDifferentIp",
              "value": 3
            },
            {
              "displayName": "SessionExpired",
              "value": 4
            },
            {
              "displayName": "UserLoggedOff",
              "value": 5
            },
            {
              "displayName": "UserLoggedFromDifferentComputer",
              "value": 6
            },
            {
              "displayName": "Unknown",
              "value": 7
            },
            {
              "displayName": "NeedAdminRights",
              "value": 8
            },
            {
              "displayName": "UserAlreadyLoggedIn",
              "value": 9
            },
            {
              "displayName": "UserRevoked",
              "value": 10
            },
            {
              "displayName": "SiteAccessNotAllowed",
              "value": 11
            },
            {
              "displayName": "SiteNotAccessible",
              "value": 12
            },
            {
              "displayName": "LoginFailedWithError",
              "value": 13
            },
            {
              "displayName": "RejectedCustom",
              "value": 14
            }
          ]
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Authentication.Request.NotifyLogoutRequest": {
      "description": "Request Used to Notify for a Logout.",
      "required": [
        "timestamp",
        "executingUserId"
      ],
      "type": "object",
      "properties": {
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the request.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "executingUserId": {
          "format": "uuid",
          "description": "Sitefinity user id of the portal user who executed the action.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Executing User Id",
          "x-ms-visibility": "important"
        },
        "user": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.User.UserInfo"
        },
        "origin": {
          "description": "Origin of the logout.",
          "type": "string",
          "x-ms-summary": "Origin",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Authentication.Request.SubscribeLogoutRequest": {
      "description": "Request object that is used to subscribe for a logout on a portal site.",
      "required": [
        "callBackUrl"
      ],
      "type": "object",
      "properties": {
        "callBackUrl": {
          "description": "Callback url of the web hook request.",
          "type": "string",
          "x-ms-summary": "Call Back URL",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "userId": {
          "format": "uuid",
          "description": "User id - leave empty to trigger on all user logins.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "User Id",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcActionGetAllContent",
            "value-path": "id",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "contentType": "Telerik.Sitefinity.Security.Model.User"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcActionGetAllContent",
            "itemsPath": "items",
            "itemValuePath": "id",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/contentType": {
                "value": "Telerik.Sitefinity.Security.Model.User"
              }
            }
          }
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Comment.Request.NotifyCommentRequest": {
      "description": "Request Used to Notify for a comment event.",
      "required": [
        "timestamp",
        "executingUserId",
        "comment"
      ],
      "type": "object",
      "properties": {
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the request.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "executingUserId": {
          "format": "uuid",
          "description": "Sitefinity user id of the portal user who executed the action.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Executing User Id",
          "x-ms-visibility": "important"
        },
        "comment": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Comment.CommentInfo"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Comment.CommentInfo": {
      "description": "Object that is used to hold comment information.",
      "type": "object",
      "properties": {
        "_tpcDisplayName": {
          "description": "Internal display name.",
          "type": "string",
          "x-ms-summary": "Internal Display Name",
          "x-ms-visibility": "internal"
        },
        "author": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Author.AuthorInfo"
        },
        "authorIpAddress": {
          "description": "Ip address of the author.",
          "type": "string",
          "x-ms-summary": "Author Ip Address",
          "x-ms-visibility": "advanced"
        },
        "dateCreated": {
          "format": "date-time",
          "description": "Date that the comment was created.",
          "type": "string",
          "x-ms-summary": "Date Created",
          "x-ms-visibility": "important"
        },
        "key": {
          "description": "Key of the comment.",
          "type": "string",
          "x-ms-summary": "Key",
          "x-ms-visibility": "important"
        },
        "lastModified": {
          "format": "date-time",
          "description": "Date that the comment was last modified.",
          "type": "string",
          "x-ms-summary": "Last Modified",
          "x-ms-visibility": "advanced"
        },
        "lastModifiedBy": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Author.AuthorInfo"
        },
        "message": {
          "description": "Gets or sets the body/message of the comment.",
          "type": "string",
          "x-ms-summary": "Message",
          "x-ms-visibility": "important"
        },
        "rating": {
          "format": "double",
          "description": "Gets the rating of the comment.",
          "type": "number",
          "x-ms-summary": "Rating",
          "x-ms-visibility": "important"
        },
        "status": {
          "description": "Gets or sets the status of the comment.",
          "type": "string",
          "x-ms-summary": "Status",
          "x-ms-visibility": "important"
        },
        "threadKey": {
          "description": "Gets or sets the thread key (will be the content type of the commented item) of the comment.",
          "type": "string",
          "x-ms-summary": "Thread Key",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Author.AuthorInfo": {
      "description": "Object that is used to hold author information.",
      "type": "object",
      "properties": {
        "_tpcDisplayName": {
          "description": "Internal display name.",
          "type": "string",
          "x-ms-summary": "Internal Display Name",
          "x-ms-visibility": "internal"
        },
        "name": {
          "description": "Gets the name of the author.",
          "type": "string",
          "x-ms-summary": "Name",
          "x-ms-visibility": "important"
        },
        "email": {
          "description": "Gets the email of the author.",
          "type": "string",
          "x-ms-summary": "Email",
          "x-ms-visibility": "important"
        },
        "key": {
          "description": "Gets the key of the author.",
          "type": "string",
          "x-ms-summary": "Key",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Comment.Request.SubscribeCommentRequest": {
      "description": "Request object that is used to subscribe for a comment event on a portal site",
      "required": [
        "callBackUrl"
      ],
      "type": "object",
      "properties": {
        "contentType": {
          "description": "Content type - leave empty to trigger on all content types.",
          "type": "string",
          "x-ms-summary": "Content Type",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "value-path": "fullName",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "operation": 7,
              "version": 1
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "itemsPath": "items",
            "itemValuePath": "fullName",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/operation": {
                "value": 7
              },
              "body/version": {
                "value": 1
              }
            }
          }
        },
        "contentId": {
          "format": "uuid",
          "description": "Content id - leave empty to trigger on all content.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Content Id",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcActionGetAllContent",
            "value-path": "id",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "contentType": {
                "parameter": "contentType"
              }
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcActionGetAllContent",
            "itemsPath": "items",
            "itemValuePath": "id",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/contentType": {
                "parameterReference": "body/contentType"
              }
            }
          }
        },
        "callBackUrl": {
          "description": "Callback url of the web hook request.",
          "type": "string",
          "x-ms-summary": "Call Back URL",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Content.Request.SubscribeContentRequest": {
      "description": "Request object that is used to subscribe for a Content event on a portal site",
      "required": [
        "contentType",
        "callBackUrl"
      ],
      "type": "object",
      "properties": {
        "contentType": {
          "description": "Content Type - Leave empty to trigger on all content types.",
          "type": "string",
          "x-ms-summary": "Content Type",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "value-path": "fullName",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "operation": 8,
              "version": 1
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcDynamicRetrieveContentTypes",
            "itemsPath": "items",
            "itemValuePath": "fullName",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/operation": {
                "value": 8
              },
              "body/version": {
                "value": 1
              }
            }
          }
        },
        "callBackUrl": {
          "description": "Callback url of the web hook request.",
          "type": "string",
          "x-ms-summary": "Call Back URL",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Form.Request.NotifyFormEntryRequest": {
      "description": "Request Used to Notify for a Form Entry.",
      "required": [
        "timestamp",
        "executingUserId",
        "entryId",
        "form"
      ],
      "type": "object",
      "properties": {
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the request.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "executingUserId": {
          "format": "uuid",
          "description": "Sitefinity user id of the portal user who executed the action.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Executing User Id",
          "x-ms-visibility": "important"
        },
        "entryId": {
          "format": "uuid",
          "description": "Id of the form entry.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Entry Id",
          "x-ms-visibility": "important"
        },
        "form": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Form.FormInfo"
        },
        "user": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.User.UserInfo"
        },
        "values": {
          "description": "Values of the form entry.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Form.FormEntryFieldDetail"
          },
          "x-ms-summary": "Values",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Form.FormInfo": {
      "description": "Object that is used to hold form information.",
      "type": "object",
      "properties": {
        "_tpcDisplayName": {
          "description": "Internal display name.",
          "type": "string",
          "x-ms-summary": "Internal Display Name",
          "x-ms-visibility": "internal"
        },
        "allowComments": {
          "description": "Indicates whether or not comments are allowed on the content item.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Allow Comments",
          "x-ms-visibility": "advanced"
        },
        "availableCultures": {
          "description": "Gets cultures available for this item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Generic.Culture.CultureInfo"
          },
          "x-ms-summary": "Available Cultures ->",
          "x-ms-visibility": "advanced"
        },
        "availableLanguages": {
          "description": "Gets languages available for this item.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Available Languages",
          "x-ms-visibility": "advanced"
        },
        "controls": {
          "description": "Gets the identifier of all the form controls.",
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "x-ms-summary": "Controls",
          "x-ms-visibility": "advanced"
        },
        "cssClass": {
          "description": "Gets the CSS class of the form control.",
          "type": "string",
          "x-ms-summary": "CssClass",
          "x-ms-visibility": "advanced"
        },
        "dateCreated": {
          "format": "date-time",
          "description": "The date on which the content was created.",
          "type": "string",
          "x-ms-summary": "Date Created",
          "x-ms-visibility": "advanced"
        },
        "description": {
          "description": "Description of the content item.",
          "type": "string",
          "x-ms-summary": "Description",
          "x-ms-visibility": "important"
        },
        "entriesTypeName": {
          "description": "Type name of the entries that are created for the form.",
          "type": "string",
          "x-ms-summary": "Entries Type Name",
          "x-ms-visibility": "advanced"
        },
        "framework": {
          "description": "Gets the form framework (Web Forms = 0, MVC = 1).",
          "enum": [
            0,
            1
          ],
          "type": "integer",
          "x-ms-summary": "Framework",
          "x-ms-visibility": "advanced",
          "x-ms-enum-values": [
            {
              "displayName": "WebForms",
              "value": 0
            },
            {
              "displayName": "Mvc",
              "value": 1
            }
          ]
        },
        "id": {
          "format": "uuid",
          "description": "Gets or sets the identifier of the form.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Id",
          "x-ms-visibility": "important"
        },
        "owner": {
          "format": "uuid",
          "description": "User id of the owner of the content.",
          "type": "string",
          "x-ms-summary": "Owner",
          "x-ms-visibility": "important"
        },
        "libraryId": {
          "format": "uuid",
          "description": "Gets the identifier of the library that the form belongs to.",
          "type": "string",
          "x-ms-summary": "Library Id",
          "x-ms-visibility": "advanced"
        },
        "lastModified": {
          "format": "date-time",
          "description": "The date on which the content was last modified.",
          "type": "string",
          "x-ms-summary": "Last Modified",
          "x-ms-visibility": "advanced"
        },
        "lastModifiedBy": {
          "format": "uuid",
          "description": "User id of the user who last modified the content.",
          "type": "string",
          "x-ms-summary": "Last Modified By",
          "x-ms-visibility": "advanced"
        },
        "name": {
          "description": "Gets the name of the form.",
          "type": "string",
          "x-ms-summary": "Name",
          "x-ms-visibility": "important"
        },
        "publicationDate": {
          "format": "date-time",
          "description": "Gets or sets the date and time when the content will be publicly available (published).",
          "type": "string",
          "x-ms-summary": "Publication Date",
          "x-ms-visibility": "advanced"
        },
        "redirectPageUrl": {
          "description": "Gets or sets the redirect page URL.",
          "type": "string",
          "x-ms-summary": "Redirect Page Url",
          "x-ms-visibility": "advanced"
        },
        "successMessage": {
          "description": "Gets or sets the success message of the form.",
          "type": "string",
          "x-ms-summary": "Success Message",
          "x-ms-visibility": "advanced"
        },
        "title": {
          "description": "Gets or sets the title of the form.",
          "type": "string",
          "x-ms-summary": "Title",
          "x-ms-visibility": "important"
        },
        "uiStatus": {
          "description": "Gets or sets the UI status of the content item.",
          "enum": [
            0,
            1,
            2,
            3,
            666
          ],
          "type": "integer",
          "x-ms-summary": "UI Status",
          "x-ms-visibility": "advanced",
          "x-ms-enum-values": [
            {
              "displayName": "Draft",
              "value": 0
            },
            {
              "displayName": "PrivateCopy",
              "value": 1
            },
            {
              "displayName": "Published",
              "value": 2
            },
            {
              "displayName": "Scheduled",
              "value": 3
            },
            {
              "displayName": "NotSupported",
              "value": 666
            }
          ]
        },
        "urlName": {
          "description": "Gets or sets the url name of the content item.",
          "type": "string",
          "x-ms-summary": "Url Name",
          "x-ms-visibility": "advanced"
        },
        "version": {
          "format": "int32",
          "description": "Gets or sets the version of the content item.",
          "type": "integer",
          "x-ms-summary": "Version",
          "x-ms-visibility": "advanced"
        },
        "viewsCount": {
          "format": "int32",
          "description": "Gets the number of views on the content item.",
          "type": "integer",
          "x-ms-summary": "Views Count",
          "x-ms-visibility": "advanced"
        },
        "visible": {
          "description": "Gets or sets a value indicating whether or not this content is publicly visible.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Visible",
          "x-ms-visibility": "important"
        },
        "votesCount": {
          "format": "int32",
          "description": "Gets the number of votes on the content item.",
          "type": "integer",
          "x-ms-summary": "Votes Count",
          "x-ms-visibility": "advanced"
        },
        "votesSum": {
          "format": "double",
          "description": "Gets the current vote ratio on the content item.",
          "type": "number",
          "x-ms-summary": "Votes Sum",
          "x-ms-visibility": "advanced"
        }
      },
      "x-ms-summary": "Form:"
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Form.FormEntryFieldDetail": {
      "required": [
        "fieldName",
        "id",
        "value"
      ],
      "type": "object",
      "properties": {
        "fieldName": {
          "description": "Name of the field.",
          "type": "string",
          "x-ms-summary": "Field Name",
          "x-ms-visibility": "important"
        },
        "id": {
          "format": "uuid",
          "description": "Id of the field.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Id",
          "x-ms-visibility": "important"
        },
        "text": {
          "description": "Text of the field.",
          "type": "string",
          "x-ms-summary": "Text",
          "x-ms-visibility": "important"
        },
        "title": {
          "description": "Title of the field.",
          "type": "string",
          "x-ms-summary": "Title",
          "x-ms-visibility": "important"
        },
        "value": {
          "description": "Value of the field.",
          "type": "string",
          "x-ms-summary": "Value",
          "x-ms-visibility": "important"
        }
      }
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Form.Request.SubscribeFormEntryRequest": {
      "description": "Request object that is used to subscribe for a Form Entry on a Portal site",
      "required": [
        "callBackUrl"
      ],
      "type": "object",
      "properties": {
        "formId": {
          "format": "uuid",
          "description": "Form id - leave empty to trigger on all form submissions.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Form Id",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcActionGetAllContent",
            "value-path": "id",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "contentType": "Telerik.Sitefinity.Forms.Model.FormDescription"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcActionGetAllContent",
            "itemsPath": "items",
            "itemValuePath": "id",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/contentType": {
                "value": "Telerik.Sitefinity.Forms.Model.FormDescription"
              }
            }
          }
        },
        "callBackUrl": {
          "description": "Callback url of the web hook request.",
          "type": "string",
          "x-ms-summary": "Call Back URL",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.Search.Request.NotifyKnowledgeSearchRequest": {
      "description": "Request Used to Notify for a TPC Knowledge Search Search.",
      "required": [
        "timestamp",
        "executingUserId",
        "resultCount"
      ],
      "type": "object",
      "properties": {
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the request.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "executingUserId": {
          "format": "uuid",
          "description": "Sitefinity user id of the portal user who executed the action.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Executing User Id",
          "x-ms-visibility": "important"
        },
        "criteria": {
          "description": "Search Criteria of the TPC Knowledge Search.",
          "type": "string",
          "x-ms-summary": "Search Criteria",
          "x-ms-visibility": "important"
        },
        "resultCount": {
          "format": "int32",
          "description": "Number of results returned by the TPC Knowledge Search.",
          "type": "integer",
          "x-ms-summary": "Result Count",
          "x-ms-visibility": "important"
        },
        "results": {
          "description": "Object that holds an array containing the article information returned by the TPC Knowledge Search.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.Search.KnowledgeArticleDetail"
          },
          "x-ms-summary": "Results",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.Search.KnowledgeArticleDetail": {
      "type": "object"
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.Search.Request.SubscribeKnowledgeSearchRequest": {
      "description": "Request object that is used to subscribe for a TPC knowledge search on a portal site.",
      "required": [
        "callBackUrl"
      ],
      "type": "object",
      "properties": {
        "criteria": {
          "description": "Search criteria - leave empty to trigger on all searches.",
          "type": "string",
          "x-ms-summary": "Search Criteria",
          "x-ms-visibility": "important"
        },
        "callBackUrl": {
          "description": "Callback url of the web hook request.",
          "type": "string",
          "x-ms-summary": "Call Back URL",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Navigation.Request.NotifyPageNavigationRequest": {
      "description": "Request Used to Notify for a Page Navigation event.",
      "required": [
        "timestamp",
        "executingUserId",
        "pageNode"
      ],
      "type": "object",
      "properties": {
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the request.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "executingUserId": {
          "format": "uuid",
          "description": "Sitefinity user id of the portal user who executed the action.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Executing User Id",
          "x-ms-visibility": "important"
        },
        "pageNode": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Page.PageNodeInfo"
        },
        "page": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Page.PageDataInfo"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Page.PageDataInfo": {
      "description": "Object that is used to hold page data information.",
      "type": "object",
      "properties": {
        "_tpcDisplayName": {
          "description": "Internal display name.",
          "type": "string",
          "x-ms-summary": "Internal Display Name",
          "x-ms-visibility": "internal"
        },
        "attributes": {
          "description": "Gets a dictionary of taxonomy attributes for this content.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-summary": "Attributes",
          "x-ms-visibility": "advanced"
        },
        "availableCultures": {
          "description": "Gets cultures available for this item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Generic.Culture.CultureInfo"
          },
          "x-ms-summary": "Available Cultures ->",
          "x-ms-visibility": "advanced"
        },
        "codeBehindType": {
          "description": "Gets or sets the name of the code-behind type.",
          "type": "string",
          "x-ms-summary": "Code Behind Type",
          "x-ms-visibility": "advanced"
        },
        "commentsCount": {
          "format": "int32",
          "description": "Gets the number of comments added to this content.",
          "type": "integer",
          "x-ms-summary": "Comments Count",
          "x-ms-visibility": "advanced"
        },
        "contentState": {
          "description": "Current state of the content.",
          "type": "string",
          "x-ms-summary": "Content State",
          "x-ms-visibility": "advanced"
        },
        "controls": {
          "description": "Gets the collection of controls defined for this page.",
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "x-ms-summary": "Controls",
          "x-ms-visibility": "advanced"
        },
        "culture": {
          "description": "Gets or sets the culture setting for this page. The value must be a valid culture id.",
          "type": "string",
          "x-ms-summary": "Culture",
          "x-ms-visibility": "advanced"
        },
        "dateCreated": {
          "format": "date-time",
          "description": "The date on which the content was created.",
          "type": "string",
          "x-ms-summary": "Date Created",
          "x-ms-visibility": "advanced"
        },
        "description": {
          "description": "Description of the content item.",
          "type": "string",
          "x-ms-summary": "Description",
          "x-ms-visibility": "important"
        },
        "expirationDate": {
          "format": "date-time",
          "description": "Gets or sets the date and time when the content will be unpublished.",
          "type": "string",
          "x-ms-summary": "Expiration Date",
          "x-ms-visibility": "advanced"
        },
        "externalPage": {
          "description": "Gets or sets a URL for loading external page from the file system.",
          "type": "string",
          "x-ms-summary": "External Page",
          "x-ms-visibility": "advanced"
        },
        "htmlTitle": {
          "description": "Gets or sets the HTML title of the page.",
          "type": "string",
          "x-ms-summary": "Html Title",
          "x-ms-visibility": "advanced"
        },
        "id": {
          "format": "uuid",
          "description": "Unique identifier of the content.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Id",
          "x-ms-visibility": "important"
        },
        "isPersonalized": {
          "description": "Gets or sets a value indicating whether the page is personalized or not.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Is Personalized",
          "x-ms-visibility": "advanced"
        },
        "keywords": {
          "description": "Gets or sets the keywords for the page.",
          "type": "string",
          "x-ms-summary": "Keywords",
          "x-ms-visibility": "important"
        },
        "languageData": {
          "description": "Collection of culture specific language data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Language.LanguageInfo"
          },
          "x-ms-summary": "Language Data ->",
          "x-ms-visibility": "advanced"
        },
        "lastControlId": {
          "format": "uuid",
          "description": "Gets or sets the last controls id of the page.",
          "type": "string",
          "x-ms-summary": "Last Control Id",
          "x-ms-visibility": "advanced"
        },
        "lastModified": {
          "format": "date-time",
          "description": "The date on which the content was last modified.",
          "type": "string",
          "x-ms-summary": "Last Modified",
          "x-ms-visibility": "advanced"
        },
        "lastModifiedBy": {
          "format": "uuid",
          "description": "User id of the user who last modified the content.",
          "type": "string",
          "x-ms-summary": "Last Modified By",
          "x-ms-visibility": "advanced"
        },
        "navigationNodeId": {
          "format": "uuid",
          "description": "Gets or sets the navigation node id.",
          "type": "string",
          "x-ms-summary": "Navigation Node Id",
          "x-ms-visibility": "advanced"
        },
        "owner": {
          "format": "uuid",
          "description": "User id of the owner of the content.",
          "type": "string",
          "x-ms-summary": "Owner",
          "x-ms-visibility": "important"
        },
        "personalizationMasterId": {
          "format": "uuid",
          "description": "Gets or sets the id of the master if this is a personalized variation.",
          "type": "string",
          "x-ms-summary": "Personalization Master Id",
          "x-ms-visibility": "advanced"
        },
        "personalizationSegmentId": {
          "format": "uuid",
          "description": "Gets or sets the id of the segment for which the page is personalized.",
          "type": "string",
          "x-ms-summary": "Personalization Segment Id",
          "x-ms-visibility": "advanced"
        },
        "publicationDate": {
          "format": "date-time",
          "description": "Gets or sets the date and time when the content will be publicly available (published).",
          "type": "string",
          "x-ms-summary": "Publication Date",
          "x-ms-visibility": "advanced"
        },
        "publishedTranslations": {
          "description": "Gets a list of available translations.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Published Translations",
          "x-ms-visibility": "advanced"
        },
        "sourceKey": {
          "description": "Gets or sets a key that can be used for synchronization with external content systems.",
          "type": "string",
          "x-ms-summary": "Source Key",
          "x-ms-visibility": "advanced"
        },
        "status": {
          "description": "Gets or sets the publication status enumeration.",
          "enum": [
            0,
            1,
            2,
            4,
            8
          ],
          "type": "integer",
          "x-ms-summary": "Status",
          "x-ms-visibility": "advanced",
          "x-ms-enum-values": [
            {
              "displayName": "Master",
              "value": 0
            },
            {
              "displayName": "Temp",
              "value": 1
            },
            {
              "displayName": "Live",
              "value": 2
            },
            {
              "displayName": "Deleted",
              "value": 4
            },
            {
              "displayName": "PartialTemp",
              "value": 8
            }
          ]
        },
        "template": {
          "format": "uuid",
          "description": "Gets or sets the template for this page.",
          "type": "string",
          "x-ms-summary": "Template",
          "x-ms-visibility": "advanced"
        },
        "theme": {
          "description": "Gets or sets the name of the template theme.",
          "type": "string",
          "x-ms-summary": "Theme",
          "x-ms-visibility": "important"
        },
        "themes": {
          "description": "Gets or sets the name of the template themes.",
          "type": "string",
          "x-ms-summary": "Themes",
          "x-ms-visibility": "advanced"
        },
        "version": {
          "format": "int32",
          "description": "Gets or sets the version of the content item.",
          "type": "integer",
          "x-ms-summary": "Version",
          "x-ms-visibility": "advanced"
        },
        "viewsCount": {
          "format": "int32",
          "description": "Gets the number of views on the content item.",
          "type": "integer",
          "x-ms-summary": "Views Count",
          "x-ms-visibility": "advanced"
        },
        "visible": {
          "description": "Gets or sets a value indicating whether or not this content is publicly visible.",
          "enum": [
            "true",
            "false"
          ],
          "type": "boolean",
          "x-ms-summary": "Visible",
          "x-ms-visibility": "important"
        },
        "votesCount": {
          "format": "int32",
          "description": "Gets the number of votes on the content item.",
          "type": "integer",
          "x-ms-summary": "Votes Count",
          "x-ms-visibility": "advanced"
        },
        "votesSum": {
          "format": "double",
          "description": "Gets the current vote ratio on the content item.",
          "type": "number",
          "x-ms-summary": "Votes Sum",
          "x-ms-visibility": "advanced"
        }
      },
      "x-ms-summary": "Page Data:"
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Language.LanguageInfo": {
      "description": "Object that is used to return readonly language information.",
      "type": "object",
      "properties": {
        "_tpcDisplayName": {
          "description": "Internal display name.",
          "type": "string",
          "x-ms-summary": "Internal Display Name",
          "x-ms-visibility": "internal"
        },
        "contentState": {
          "description": "Current state of the content.",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer",
          "x-ms-summary": "Content State",
          "x-ms-visibility": "advanced",
          "x-ms-enum-values": [
            {
              "displayName": "None",
              "value": 0
            },
            {
              "displayName": "Published",
              "value": 1
            },
            {
              "displayName": "Deleted",
              "value": 2
            }
          ]
        },
        "expirationDate": {
          "format": "date-time",
          "description": "Gets or sets the date and time when the content will be unpublished.",
          "type": "string",
          "x-ms-summary": "Expiration Date",
          "x-ms-visibility": "advanced"
        },
        "id": {
          "format": "uuid",
          "description": "Unique identifier of the language.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Id",
          "x-ms-visibility": "important"
        },
        "lastModified": {
          "format": "date-time",
          "description": "The date on which the content was last modified.",
          "type": "string",
          "x-ms-summary": "Last Modified",
          "x-ms-visibility": "advanced"
        },
        "language": {
          "description": "Represents the culture of which the language belongs.",
          "type": "string",
          "x-ms-summary": "Language",
          "x-ms-visibility": "advanced"
        },
        "languageVersion": {
          "format": "int32",
          "description": "Gets or sets the language version.",
          "type": "integer",
          "x-ms-summary": "Language Version",
          "x-ms-visibility": "advanced"
        },
        "publicationDate": {
          "format": "date-time",
          "description": "Gets or sets the date and time when the content will be publicly available (published).",
          "type": "string",
          "x-ms-summary": "Publication Date",
          "x-ms-visibility": "advanced"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Navigation.Request.SubscribePageNavigationRequest": {
      "description": "Request object that is used to subscribe for a Page Navigation on a Portal site",
      "required": [
        "callBackUrl"
      ],
      "type": "object",
      "properties": {
        "pageId": {
          "format": "uuid",
          "description": "Page id - leave empty to trigger on all page navigation events.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Page Id",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcDynamicRetrieveFrontendPages",
            "value-path": "pageId",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": { }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcDynamicRetrieveFrontendPages",
            "itemsPath": "items",
            "itemValuePath": "pageId",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": { }
          }
        },
        "callBackUrl": {
          "description": "Callback url of the web hook request.",
          "type": "string",
          "x-ms-summary": "Call Back URL",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.PortalUser.Request.NotifyPortalUserRequest": {
      "description": "Request Used to Notify for a Portal User Event.",
      "required": [
        "timestamp",
        "executingUserId",
        "portalUser"
      ],
      "type": "object",
      "properties": {
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the request.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "executingUserId": {
          "format": "uuid",
          "description": "Sitefinity user id of the portal user who executed the action.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Executing User Id",
          "x-ms-visibility": "important"
        },
        "portalUser": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.TPC.PortalUser.PortalUserInfo"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Shared.Triggers.Request.PortalSubscribeRequest": {
      "description": "Request Object that is Used to Subscribe to a Portal Web Hook",
      "required": [
        "callBackUrl"
      ],
      "type": "object",
      "properties": {
        "callBackUrl": {
          "description": "Callback url of the web hook request.",
          "type": "string",
          "x-ms-summary": "Call Back URL",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.PortalUser.Request.NotifyPortalUserDeleteRequest": {
      "description": "Request Used to Notify for a Portal User Delete Event.",
      "required": [
        "timestamp",
        "executingUserId",
        "portalUserCrmContactId",
        "portalUserSitefinityUserId"
      ],
      "type": "object",
      "properties": {
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the request.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "executingUserId": {
          "format": "uuid",
          "description": "Sitefinity user id of the portal user who executed the action.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Executing User Id",
          "x-ms-visibility": "important"
        },
        "portalUserCrmContactId": {
          "format": "uuid",
          "description": "CRM contact id of the portal user who was deleted.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Portal User Crm Contact Id",
          "x-ms-visibility": "important"
        },
        "portalUserSitefinityUserId": {
          "format": "uuid",
          "description": "Sitefinity user id of the portal user who was deleted.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Portal User Sitefinity User Id",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Role.Request.NotifyRoleRequest": {
      "description": "Request used to notify for a role change.",
      "required": [
        "timestamp",
        "executingUserId",
        "role",
        "user"
      ],
      "type": "object",
      "properties": {
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the request.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "executingUserId": {
          "format": "uuid",
          "description": "Sitefinity user id of the portal user who executed the action.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Executing User Id",
          "x-ms-visibility": "important"
        },
        "role": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Role.RoleInfo"
        },
        "user": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.User.UserInfo"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Role.Request.SubscribeRoleRequest": {
      "description": "Request object that is used to subscribe for a role action on a portal site.",
      "required": [
        "callBackUrl"
      ],
      "type": "object",
      "properties": {
        "roleId": {
          "format": "uuid",
          "description": "Role id - leave empty to trigger on all role events.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Role Id",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcActionGetAllContent",
            "value-path": "id",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "contentType": "Telerik.Sitefinity.Security.Model.Role"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcActionGetAllContent",
            "itemsPath": "items",
            "itemValuePath": "id",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/contentType": {
                "value": "Telerik.Sitefinity.Security.Model.Role"
              }
            }
          }
        },
        "userId": {
          "format": "uuid",
          "description": "User id - leave empty to trigger on all role events regardless of user.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "User Id",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcActionGetAllContent",
            "value-path": "id",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "contentType": "Telerik.Sitefinity.Security.Model.User"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcActionGetAllContent",
            "itemsPath": "items",
            "itemValuePath": "id",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/contentType": {
                "value": "Telerik.Sitefinity.Security.Model.User"
              }
            }
          }
        },
        "callBackUrl": {
          "description": "Callback url of the web hook request.",
          "type": "string",
          "x-ms-summary": "Call Back URL",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Search.Request.NotifySearchRequest": {
      "description": "Request Used to Notify for a Search.",
      "required": [
        "timestamp",
        "executingUserId",
        "resultCount"
      ],
      "type": "object",
      "properties": {
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the request.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "executingUserId": {
          "format": "uuid",
          "description": "Sitefinity user id of the portal user who executed the action.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Executing User Id",
          "x-ms-visibility": "important"
        },
        "criteria": {
          "description": "Search Criteria of the Sitefinity search.",
          "type": "string",
          "x-ms-summary": "Search Criteria",
          "x-ms-visibility": "important"
        },
        "resultCount": {
          "format": "int32",
          "description": "Number of results returned by the Sitefinity search.",
          "type": "integer",
          "x-ms-summary": "Result Count",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.Search.Request.SubscribeSearchRequest": {
      "description": "Request object that is used to subscribe for a Sitefinity search on a portal site.",
      "required": [
        "callBackUrl"
      ],
      "type": "object",
      "properties": {
        "criteria": {
          "description": "Search criteria - leave empty to trigger on all searches.",
          "type": "string",
          "x-ms-summary": "Search Criteria",
          "x-ms-visibility": "important"
        },
        "callBackUrl": {
          "description": "Callback url of the web hook request.",
          "type": "string",
          "x-ms-summary": "Call Back URL",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.Form.Request.NotifyFormSubmissionRequest": {
      "description": "Request Used to Notify for a Form Submission.",
      "required": [
        "timestamp",
        "executingUserId",
        "form"
      ],
      "type": "object",
      "properties": {
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the request.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "executingUserId": {
          "format": "uuid",
          "description": "Sitefinity user id of the portal user who executed the action.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Executing User Id",
          "x-ms-visibility": "important"
        },
        "form": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.Form.FormInfo"
        },
        "submissionEntities": {
          "description": "Object that holds an array containing the entity logical name and unique identifier of all modified entities in CRM and actions performed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.Form.FormSubmissionEntityDetail"
          },
          "x-ms-summary": "Submission Entities ->",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.Form.FormSubmissionEntityDetail": {
      "description": "Object that holds information regarding the entity logical name and unique identifier of all modified entities in CRM and actions performed.",
      "required": [
        "entityLogicalName",
        "entityId",
        "message"
      ],
      "type": "object",
      "properties": {
        "entityLogicalName": {
          "description": "Logical name of the entity.",
          "type": "string",
          "x-ms-summary": "Entity Logical Name",
          "x-ms-visibility": "important"
        },
        "entityId": {
          "format": "uuid",
          "description": "Unique identifier of the entity.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Entity Id",
          "x-ms-visibility": "important"
        },
        "message": {
          "description": "Action that was performed on the entity.",
          "type": "string",
          "x-ms-summary": "Message",
          "x-ms-visibility": "important"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.TPC.Form.Request.SubscribeFormSubmissionRequest": {
      "description": "Request object that is used to subscribe for a form submission on a portal site.",
      "required": [
        "callBackUrl"
      ],
      "type": "object",
      "properties": {
        "formId": {
          "format": "uuid",
          "description": "Form id - Leave empty to trigger on all form submissions.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Form Id",
          "x-ms-visibility": "important",
          "x-ms-dynamic-values": {
            "operationId": "TpcActionGetAllContent",
            "value-path": "id",
            "value-title": "_tpcDisplayName",
            "value-collection": "items",
            "parameters": {
              "contentType": "Telerik.Sitefinity.Forms.Model.FormDescription"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "TpcActionGetAllContent",
            "itemsPath": "items",
            "itemValuePath": "id",
            "itemTitlePath": "_tpcDisplayName",
            "parameters": {
              "body/contentType": {
                "value": "Telerik.Sitefinity.Forms.Model.FormDescription"
              }
            }
          }
        },
        "callBackUrl": {
          "description": "Callback url of the web hook request.",
          "type": "string",
          "x-ms-summary": "Call Back URL",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        }
      },
      "x-ms-summary": ""
    },
    "pavliks.PortalConnector.PowerPlatform.Models.Services.Triggers.Sitefinity.User.Request.NotifyUserRequest": {
      "description": "Request Used to Notify for a user event.",
      "required": [
        "timestamp",
        "executingUserId",
        "user"
      ],
      "type": "object",
      "properties": {
        "timestamp": {
          "format": "date-time",
          "description": "UTC timestamp of the request.",
          "type": "string",
          "x-ms-summary": "Timestamp",
          "x-ms-visibility": "important"
        },
        "executingUserId": {
          "format": "uuid",
          "description": "Sitefinity user id of the portal user who executed the action.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "x-ms-summary": "Executing User Id",
          "x-ms-visibility": "important"
        },
        "user": {
          "$ref": "#/definitions/pavliks.PortalConnector.PowerPlatform.Models.Engine.Operations.Sitefinity.User.UserInfo"
        }
      },
      "x-ms-summary": ""
    }
  },
  "securityDefinitions": {
    "TpcApiKey": {
      "type": "apiKey",
      "name": "TpcApiKey",
      "in": "header",
      "description": "TPC API Key"
    }
  },
  "security": [
    {
      "TpcApiKey": [ ]
    }
  ],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.portalconnector.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.portalconnector.com/contactus/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Sales and CRM;Website"
    }
  ]
}