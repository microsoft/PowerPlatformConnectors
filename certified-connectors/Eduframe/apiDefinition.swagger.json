{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "description": "Eduframe is a complete solution for commercial training providers & business schools to attract more students, manage & automate the course administration, and deliver the ultimate learning experience. Eduframe seamlessly integrates with Canvas LMS. The connector opens up the opportunity to easily integrate your existing software applications with Eduframe, like your CRM and accounting software.",
    "title": "Eduframe",
    "x-copyright": null
  },
  "basePath": "/api/v1",
  "produces": [],
  "security": [
    {
      "undefined": []
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "host": "api.eduframe.nl",
  "responses": {},
  "definitions": {
    "account": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Unique identifier of the account.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The account name."
        },
        "email": {
          "type": "string",
          "description": "A string representing the billing e-mail of the account"
        },
        "account_type": {
          "type": "string",
          "enum": [
            "business",
            "personal"
          ],
          "description": "The account type.",
          "readOnly": true
        },
        "address": {
          "$ref": "#/definitions/address"
        },
        "updated_at": {
          "type": "string",
          "description": "Timestamp of last update.",
          "readOnly": true
        },
        "created_at": {
          "type": "string",
          "description": "Timestamp of creation.",
          "readOnly": true
        }
      },
      "additionalProperties": false
    },
    "address": {
      "type": "object",
      "required": [
        "addressee",
        "address",
        "postal_code",
        "city",
        "country"
      ],
      "properties": {
        "id": {
          "description": "Unique identifier of the address.",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "addressee": {
          "description": "The addressee of the address.",
          "type": "string",
          "x-ms-visibility": "advanced"
        },
        "address": {
          "description": "Concatenation of the street and house number.",
          "type": "string",
          "x-ms-visibility": "advanced"
        },
        "postal_code": {
          "description": "A string representing the postal code.",
          "type": "string",
          "x-ms-visibility": "advanced"
        },
        "city": {
          "description": "A string representing the city.",
          "type": "string",
          "x-ms-visibility": "advanced"
        },
        "country": {
          "description": "A string representing the country.",
          "type": "string",
          "x-ms-visibility": "advanced"
        },
        "updated_at": {
          "description": "Timestamp of last update.",
          "type": "string",
          "readOnly": true,
          "x-ms-visibility": "advanced"
        },
        "created_at": {
          "description": "Timestamp of creation.",
          "type": "string",
          "readOnly": true,
          "x-ms-visibility": "advanced"
        }
      },
      "additionalProperties": false
    },
    "category": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "description": "Unique identifier of the category.",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "description": "Title of the category."
        },
        "description": {
          "title": "Description",
          "type": "string",
          "description": "The description of the category."
        },
        "slug": {
          "type": "string",
          "description": "Friendly identifier of a category.",
          "x-ms-visibility": "advanced"
        },
        "position": {
          "description": "Sorting position of the category. Lower is higher.",
          "type": "number",
          "x-ms-visibility": "advanced"
        },
        "parent_id": {
          "description": "Unique identifier of the parent category",
          "type": "number",
          "x-ms-visibility": "advanced"
        },
        "avatar": {
          "description": "URL to the category avatar.",
          "type": "string",
          "readOnly": true
        },
        "is_published": {
          "title": "Published",
          "description": "If the category should be published on the website.",
          "type": "boolean"
        },
        "courses_count": {
          "description": "Number of courses directly linked to this category.",
          "type": "number",
          "readOnly": true
        },
        "children_count": {
          "description": "Number of children categories directly linked to this category.",
          "type": "number",
          "readOnly": true
        },
        "meta_title": {
          "description": "The meta title of the category, used for SEO (Search Engine Optimisation) purposes.",
          "type": "string",
          "x-ms-visibility": "advanced"
        },
        "meta_description": {
          "description": "The meta description of the category, used for SEO (Search Engine Optimisation) purposes.",
          "type": "string",
          "x-ms-visibility": "advanced"
        },
        "updated_at": {
          "description": "Timestamp of last update.",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "description": "Timestamp of creation.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "course": {
      "type": "object",
      "required": [
        "id",
        "category_id",
        "position",
        "starting_price",
        "signup_url",
        "slug",
        "slug_history",
        "avatar",
        "website_url",
        "name",
        "code",
        "updated_at",
        "created_at"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Unique identifier of the course"
        },
        "name": {
          "type": "string",
          "description": "The name of the course."
        },
        "position": {
          "type": "number",
          "description": "Sorting position of the course. Lower is higher."
        },
        "starting_price": {
          "type": "string",
          "description": "Lowest price of all of its planned courses."
        },
        "signup_url": {
          "type": "string",
          "description": "URL to the signup page for this course."
        },
        "slug": {
          "type": "string",
          "description": "Human readable identifier, unique per educator."
        },
        "slug_history": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of old slugs, old calls will be redirected."
        },
        "avatar": {
          "type": "string",
          "description": "URL to the original avatar image file."
        },
        "website_url": {
          "type": "string",
          "description": "Expected URL of the course on the educator website."
        },
        "certificate_template_id": {
          "type": "number",
          "description": "Identifier of the optionally linked certificate template."
        },
        "category_id": {
          "type": "number",
          "description": "Identifier of the category of the course."
        },
        "code": {
          "type": "string",
          "description": "The code of the course."
        },
        "duration": {
          "type": "string",
          "description": "The duration of the course."
        },
        "level": {
          "type": "string",
          "description": "A string indicating the level of the course."
        },
        "meta_title": {
          "type": "string",
          "description": "Meta title of the course for SEO purposes."
        },
        "meta_description": {
          "type": "string",
          "description": "Meta description of the course for SEO purposes."
        },
        "result": {
          "type": "string",
          "description": "The result of the course"
        },
        "cost": {
          "type": "string",
          "description": "The price to be paid for this course."
        },
        "cost_scheme": {
          "type": "string",
          "enum": [
            "student",
            "order",
            "tbd",
            "free"
          ],
          "description": "How should the course be paid by default."
        },
        "is_published": {
          "type": "boolean",
          "description": "Boolean representing the publishable status of the course."
        },
        "program": {
          "type": "string",
          "description": "The value of the property."
        },
        "conditions": {
          "type": "string",
          "description": "The conditions of the course."
        },
        "updated_at": {
          "type": "string",
          "description": "Timestamp of last update."
        },
        "created_at": {
          "type": "string",
          "description": "Timestamp of creation."
        }
      },
      "additionalProperties": false
    },
    "user": {
      "type": "object",
      "required": [
        "first_name",
        "last_name",
        "email"
      ],
      "properties": {
        "id": {
          "description": "Unique identifier of the user.",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "employee_number": {
          "title": "Employee number",
          "description": "The employee number of this user.",
          "type": "string",
          "readOnly": true
        },
        "first_name": {
          "title": "First name",
          "description": "First name of the user.",
          "type": "string"
        },
        "middle_name": {
          "title": "Middle name",
          "description": "Middle name of the user.",
          "type": "string"
        },
        "last_name": {
          "title": "Last name",
          "description": "Last name of the user.",
          "type": "string"
        },
        "email": {
          "title": "Email",
          "description": "The e-mail of the user.",
          "type": "string"
        },
        "phone": {
          "title": "Phone number",
          "description": "The telephone number of the user.",
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/label"
          }
        },
        "slug": {
          "description": "The human readable unique identifier, you can also use this to fetch the user.",
          "type": "string",
          "readOnly": true,
          "x-ms-visibility": "advanced"
        },
        "wants_newsletter": {
          "title": "Subscribe for newsletter",
          "description": "Does the user want to receive newsletters?",
          "type": "boolean",
          "x-ms-visibility": "advanced"
        },
        "with_authentication": {
          "title": "Create authentication",
          "description": "Create an authentication for the user, such that the user is able to login.",
          "type": "boolean",
          "x-ms-visibility": "advanced"
        },
        "address": {
          "$ref": "#/definitions/address"
        },
        "roles": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of roles the user has.",
          "readOnly": true,
          "x-ms-visibility": "internal"
        },
        "teacher_headline": {
          "description": "Short description of the user.",
          "type": "string",
          "x-ms-visibility": "internal"
        },
        "description": {
          "description": "Long description of the user. (same as teacher_description)",
          "type": "string",
          "x-ms-visibility": "internal"
        },
        "teacher_description": {
          "description": "Long description of the user. (same as description)",
          "type": "string",
          "x-ms-visibility": "internal"
        },
        "avatar_url": {
          "title": "Avatar",
          "description": "The relative url path to the avatar.",
          "type": "string",
          "readOnly": true
        },
        "updated_at": {
          "description": "Timestamp of last update.",
          "type": "string",
          "readOnly": true,
          "x-ms-visibility": "advanced"
        },
        "created_at": {
          "description": "Timestamp of creation.",
          "type": "string",
          "readOnly": true,
          "x-ms-visibility": "advanced"
        }
      },
      "additionalProperties": false
    },
    "invoice": {
      "type": "object",
      "required": [
        "currency",
        "account_id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Unique identifier of the invoice.",
          "readOnly": true
        },
        "account_id": {
          "title": "Account",
          "type": "number",
          "description": "Identifier of the account.",
          "x-ms-dynamic-values": {
            "operationId": "Get_accounts",
            "value-path": "id",
            "value-title": "name"
          }
        },
        "number": {
          "type": "string",
          "description": "The invoice number which is unique per educator. If left empty, it autoincrements.",
          "readOnly": true
        },
        "number_int": {
          "type": "number",
          "description": "The invoice number converted to an integer value.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "enum": [
            "concept",
            "open",
            "expired",
            "paid",
            "deleted"
          ],
          "description": "The status of the invoice. The initial status will always be concept.",
          "readOnly": true
        },
        "expiration_date": {
          "type": "string",
          "description": "The expiration date of the invoice. Is set when the invoice is set to open.",
          "readOnly": true
        },
        "opened_at": {
          "type": "string",
          "description": "The date when the invoice status was changed to open.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Human readable description of the invoice.",
          "readOnly": true
        },
        "account_name": {
          "type": "string",
          "description": "The name of the account that is paying. Is copied to the invoice and is thus not automatically updated if the account name changes.",
          "x-ms-visibility": "advanced"
        },
        "currency": {
          "type": "string",
          "enum": [
            "EUR",
            "ISK",
            "USD",
            "GBP"
          ],
          "description": "The currency of the invoice."
        },
        "total_incl": {
          "type": "string",
          "description": "The total cost of the invoice including VAT.",
          "readOnly": true
        },
        "total_excl": {
          "type": "string",
          "description": "The total cost of the invoice excluding VAT.",
          "readOnly": true
        },
        "pdf_url": {
          "type": "string",
          "description": "Url to the download path of the invoice in PDF format.",
          "readOnly": true
        },
        "xml_url": {
          "type": "string",
          "description": "Url to the download path of the invoice in UML format.",
          "readOnly": true
        },
        "feature": {
          "type": "string",
          "description": "Some description of the invoice which is displayed on the invoice.",
          "x-ms-visibility": "advanced"
        },
        "footnote": {
          "type": "string",
          "description": "The note displayed at the bottom of the invoice.",
          "x-ms-visibility": "advanced"
        },
        "invoice_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/invoice_item"
          }
        },
        "updated_at": {
          "type": "string",
          "description": "Timestamp of last update.",
          "readOnly": true
        },
        "created_at": {
          "type": "string",
          "description": "Timestamp of creation.",
          "readOnly": true
        }
      },
      "additionalProperties": false
    },
    "invoice_item": {
      "type": "object",
      "required": [
        "units",
        "unit_price",
        "name"
      ],
      "properties": {
        "id": {
          "description": "Unique identifier of the invoice item.",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "units": {
          "title": "Units",
          "description": "The number of units of the invoice item.",
          "type": "integer"
        },
        "name": {
          "title": "Description",
          "type": "string",
          "description": "The name of the invoice item."
        },
        "unit_price": {
          "title": "Price",
          "description": "The price of a single unit.",
          "type": "number",
          "format": "float"
        },
        "invoice_vat_id": {
          "title": "Vat",
          "type": "number",
          "description": "Identifier of the invoice vat.",
          "x-ms-dynamic-values": {
            "operationId": "Get_invoice_vats",
            "value-path": "id",
            "value-title": "name"
          }
        },
        "updated_at": {
          "description": "Timestamp of last update.",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "description": "Timestamp of creation.",
          "type": "string",
          "readOnly": true
        }
      },
      "additionalProperties": false
    },
    "invoice_vat": {
      "type": "object",
      "required": [
        "name",
        "percentage"
      ],
      "properties": {
        "id": {
          "description": "Unique idenitfier of the invoice vat.",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "name": {
          "description": "Name of the invoice vat.",
          "type": "string"
        },
        "percentage": {
          "description": "Number representing the VAT percentage.",
          "type": "number",
          "format": "float"
        }
      },
      "additionalProperties": false
    },
    "label": {
      "type": "object",
      "required": [
        "name",
        "color",
        "model_type"
      ],
      "properties": {
        "id": {
          "type": "number",
          "description": "Unique identifier of the label",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "description": "The name of the label"
        },
        "color": {
          "title": "Color",
          "type": "string",
          "description": "Hex code of the color of the label"
        },
        "model_type": {
          "title": "Model",
          "type": "string",
          "description": "The model type for which this label is made available"
        },
        "updated_at": {
          "type": "string",
          "description": "Timestamp of last update.",
          "readOnly": true
        },
        "created_at": {
          "type": "string",
          "description": "Timestamp of creation.",
          "readOnly": true
        }
      },
      "additionalProperties": false
    },
    "webhook": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "Unique identifier of the webhook."
        },
        "plugin_id": {
          "type": "number",
          "description": "Unique identifier of the linked plugin."
        },
        "url": {
          "type": "string",
          "description": "The callback url for Eduframe to send a HTTP POST payload to."
        },
        "active": {
          "type": "boolean",
          "description": "State of webhook."
        },
        "webhook_triggers": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "event",
              "klass"
            ],
            "properties": {
              "id": {
                "type": "number",
                "description": "Unique identifier for the Webhook Trigger"
              },
              "event": {
                "type": "string",
                "enum": [
                  "update",
                  "create"
                ],
                "description": "On which event Webhook will be fired"
              },
              "klass": {
                "type": "string",
                "enum": [
                  "Category",
                  "Course",
                  "Educator",
                  "Enrollment",
                  "Lead",
                  "Meeting",
                  "MeetingLocation",
                  "Order",
                  "Payment",
                  "PlannedCourse",
                  "Plugins::EducatorPlugin",
                  "Invoice",
                  "InvoiceItem",
                  "Settings::CourseLocation",
                  "Settings::CourseVariant",
                  "Settings::InvoiceVat",
                  "TeacherEnrollment",
                  "User"
                ],
                "description": "On which klass event be caught"
              },
              "updated_at": {
                "type": "string",
                "description": "Timestamp of last update"
              },
              "created_at": {
                "type": "string",
                "description": "Timestamp of creation"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "webhook_payload": {
      "type": "object",
      "required": [
        "educator",
        "model_type",
        "model_id"
      ],
      "properties": {
        "educator": {
          "type": "number",
          "description": "Unique identifier of the webhook."
        },
        "model_type": {
          "type": "number",
          "description": "Unique identifier of the linked plugin."
        },
        "model_id": {
          "type": "number",
          "description": "The callback url for Eduframe to send a HTTP POST payload to."
        }
      },
      "additionalProperties": false
    }
  },
  "paths": {
    "/accounts": {
      "post": {
        "operationId": "Post_accounts",
        "summary": "Add an account",
        "description": "Add a account to your administration",
        "tags": [
          "accounts"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The account name."
                },
                "email": {
                  "type": "string",
                  "description": "A string representing the billing e-mail of the account"
                },
                "address_attributes": {
                  "$ref": "#/definitions/address"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/account"
            }
          }
        }
      },
      "get": {
        "operationId": "Get_accounts",
        "summary": "List all accounts",
        "description": "Get all accounts.",
        "tags": [
          "accounts"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Page"
          },
          {
            "$ref": "#/parameters/PerPage"
          },
          {
            "items": {
              "enum": [
                "address",
                "labels"
              ],
              "type": "string"
            },
            "type": "array",
            "x-ms-summary": "Includes",
            "description": "Include relations in the results",
            "in": "query",
            "name": "include"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/account"
              },
              "type": "array"
            },
            "headers": {
              "total": {
                "description": "Total number of records",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "operationId": "Get_accounts_id",
        "summary": "Get an account",
        "description": "Get an account by id",
        "tags": [
          "accounts"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "integer",
            "format": "int64",
            "in": "path",
            "required": true,
            "x-ms-url-encoding": "single",
            "x-ms-summary": "Account id",
            "description": "Identifier of the account"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/account"
            }
          }
        }
      }
    },
    "/categories": {
      "post": {
        "operationId": "Post_categories",
        "summary": "Add a category",
        "description": "Add a category to your administration",
        "tags": [
          "categories"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "title": "Name",
                  "type": "string",
                  "description": "Title of the category."
                },
                "description": {
                  "title": "Description",
                  "type": "string",
                  "description": "The description of the category."
                },
                "slug": {
                  "type": "string",
                  "description": "Friendly identifier of a category.",
                  "x-ms-visibility": "advanced"
                },
                "position": {
                  "description": "Sorting position of the category. Lower is higher.",
                  "type": "number",
                  "x-ms-visibility": "advanced"
                },
                "parent_id": {
                  "title": "Parent",
                  "description": "The parent category",
                  "type": "number",
                  "x-ms-visibility": "advanced",
                  "x-ms-dynamic-values": {
                    "operationId": "Get_categories",
                    "value-path": "id",
                    "value-title": "name"
                  }
                },
                "is_published": {
                  "title": "Published",
                  "description": "If the category should be published on the website.",
                  "type": "boolean",
                  "default": false
                },
                "meta_title": {
                  "description": "The meta title of the category, used for SEO (Search Engine Optimisation) purposes.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "meta_description": {
                  "description": "The meta description of the category, used for SEO (Search Engine Optimisation) purposes.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/category"
            }
          }
        }
      },
      "get": {
        "operationId": "Get_categories",
        "summary": "List all categories",
        "description": "Get all categories.",
        "tags": [
          "categories"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Page"
          },
          {
            "$ref": "#/parameters/PerPage"
          },
          {
            "items": {
              "enum": [
                "position"
              ],
              "type": "string"
            },
            "type": "array",
            "x-ms-summary": "Sort",
            "description": "Sort the results. Change order by using `<sort_by>:[asc|desc]`",
            "in": "query",
            "name": "sort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/category"
              },
              "type": "array"
            },
            "headers": {
              "total": {
                "description": "Total number of records",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "operationId": "Get_categories_id",
        "summary": "Get a category",
        "description": "Get a category by id",
        "tags": [
          "categories"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "integer",
            "format": "int64",
            "in": "path",
            "required": true,
            "x-ms-url-encoding": "single",
            "x-ms-summary": "Category Id",
            "description": "Identifier of the category"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/category"
            }
          }
        }
      }
    },
    "/courses": {
      "post": {
        "operationId": "Post_courses",
        "summary": "Add a course",
        "description": "Add a course to your administration",
        "tags": [
          "courses"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "required": [
                "category_id",
                "name",
                "code"
              ],
              "properties": {
                "category_id": {
                  "title": "Category",
                  "type": "number",
                  "description": "Identifier of the category of the course.",
                  "x-ms-dynamic-values": {
                    "operationId": "Get_categories",
                    "value-path": "id",
                    "value-title": "name"
                  }
                },
                "name": {
                  "type": "string",
                  "description": "The name of the course."
                },
                "code": {
                  "type": "string",
                  "description": "The code of the course."
                },
                "cost_scheme": {
                  "type": "string",
                  "enum": [
                    "student",
                    "order",
                    "tbd",
                    "free"
                  ],
                  "description": "How should the course be paid by default."
                },
                "cost": {
                  "type": "string",
                  "description": "The price to be paid for this course."
                },
                "is_published": {
                  "type": "boolean",
                  "description": "Boolean representing the publishable status of the course.",
                  "default": false
                },
                "duration": {
                  "type": "string",
                  "description": "The duration of the course.",
                  "x-ms-visibility": "advanced"
                },
                "level": {
                  "type": "string",
                  "description": "A string indicating the level of the course.",
                  "x-ms-visibility": "advanced"
                },
                "program": {
                  "type": "string",
                  "description": "The value of the property.",
                  "x-ms-visibility": "advanced"
                },
                "conditions": {
                  "type": "string",
                  "description": "The conditions of the course.",
                  "x-ms-visibility": "advanced"
                },
                "result": {
                  "type": "string",
                  "description": "The result of the course"
                },
                "meta_title": {
                  "type": "string",
                  "description": "Meta title of the course for SEO purposes.",
                  "x-ms-visibility": "advanced"
                },
                "meta_description": {
                  "type": "string",
                  "description": "Meta description of the course for SEO purposes.",
                  "x-ms-visibility": "advanced"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/course"
            }
          }
        }
      },
      "get": {
        "operationId": "Get_courses",
        "summary": "List all courses",
        "description": "Get all courses.",
        "tags": [
          "users"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Page"
          },
          {
            "$ref": "#/parameters/PerPage"
          },
          {
            "items": {
              "enum": [
                "position"
              ],
              "type": "string"
            },
            "type": "array",
            "x-ms-summary": "Sort",
            "description": "Sort the results. Change order by using `<sort_by>:[asc|desc]`",
            "in": "query",
            "name": "sort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/course"
              },
              "type": "array"
            },
            "headers": {
              "total": {
                "description": "Total number of records",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "/courses/{id}": {
      "get": {
        "operationId": "Get_courses_id",
        "summary": "Get a course",
        "description": "Get a single course by id",
        "tags": [
          "users"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "integer",
            "format": "int64",
            "in": "path",
            "required": true,
            "x-ms-url-encoding": "single",
            "x-ms-summary": "Course id",
            "description": "Identifier of the course"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/course"
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "operationId": "Post_users",
        "summary": "Add a user",
        "description": "Add a user to your administration",
        "tags": [
          "users"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "required": [
                "first_name",
                "last_name",
                "email"
              ],
              "properties": {
                "first_name": {
                  "title": "First name",
                  "description": "First name of the user.",
                  "type": "string"
                },
                "middle_name": {
                  "title": "Middle name",
                  "description": "Middle name of the user.",
                  "type": "string"
                },
                "last_name": {
                  "title": "Last name",
                  "description": "Last name of the user.",
                  "type": "string"
                },
                "email": {
                  "title": "Email",
                  "description": "The e-mail of the user.",
                  "type": "string"
                },
                "phone": {
                  "title": "Phone number",
                  "description": "The telephone number of the user.",
                  "type": "string"
                },
                "wants_newsletter": {
                  "title": "Subscribe for newsletter",
                  "description": "Does the user want to receive newsletters?",
                  "type": "boolean",
                  "default": false,
                  "x-ms-visibility": "advanced"
                },
                "with_authentication": {
                  "title": "Create authentication",
                  "description": "Create an authentication for the user, such that the user is able to login.",
                  "type": "boolean",
                  "default": true,
                  "x-ms-visibility": "advanced"
                },
                "address_attributes": {
                  "$ref": "#/definitions/address"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/user"
            },
            "headers": {
              "total": {
                "description": "Total number of records",
                "type": "integer"
              }
            }
          }
        }
      },
      "get": {
        "operationId": "Get_users",
        "summary": "List all users",
        "description": "Get all users.",
        "tags": [
          "users"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Page"
          },
          {
            "$ref": "#/parameters/PerPage"
          },
          {
            "items": {
              "enum": [
                "address",
                "labels",
                "signup_answers.signup_question",
                "signup_answers"
              ],
              "type": "string"
            },
            "type": "array",
            "x-ms-summary": "Includes",
            "description": "Include relations in the results",
            "in": "query",
            "name": "include"
          },
          {
            "items": {
              "enum": [
                "first_name",
                "last_name",
                "middle_name"
              ],
              "type": "string"
            },
            "type": "array",
            "x-ms-summary": "Sort",
            "description": "Sort the results. Change order by using `<sort_by>:[asc|desc]`",
            "in": "query",
            "name": "sort"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/user"
              },
              "type": "array"
            },
            "headers": {
              "total": {
                "description": "Total number of records",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "Get_users_id",
        "summary": "Get a user",
        "description": "Get a single user by id",
        "tags": [
          "users"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "integer",
            "format": "int64",
            "in": "path",
            "required": true,
            "x-ms-url-encoding": "single",
            "x-ms-summary": "User id",
            "description": "Identifier of the user"
          },
          {
            "name": "include",
            "x-ms-summary": "Includes",
            "description": "Include relations in the results",
            "in": "query",
            "type": "array",
            "items": {
              "enum": [
                "address",
                "labels",
                "signup_answers.signup_question",
                "signup_answers"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "/invoices": {
      "post": {
        "operationId": "Post_invoices",
        "summary": "Add an invoice",
        "description": "Add an invoice to your administration",
        "tags": [
          "invoices"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "required": [
                "account_id",
                "currency",
                "invoice_items_attributes"
              ],
              "properties": {
                "account_id": {
                  "title": "Account",
                  "type": "number",
                  "description": "Identifier of the account.",
                  "x-ms-dynamic-values": {
                    "operationId": "Get_accounts",
                    "value-path": "id",
                    "value-title": "name"
                  }
                },
                "currency": {
                  "type": "string",
                  "enum": [
                    "EUR",
                    "ISK",
                    "USD",
                    "GBP"
                  ],
                  "description": "The currency of the invoice."
                },
                "invoice_items_attributes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/invoice_item"
                  }
                },
                "feature": {
                  "type": "string",
                  "description": "Some description of the invoice which is displayed on the invoice.",
                  "x-ms-visibility": "advanced"
                },
                "footnote": {
                  "type": "string",
                  "description": "The note displayed at the bottom of the invoice.",
                  "x-ms-visibility": "advanced"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/invoice"
            }
          }
        }
      },
      "get": {
        "operationId": "Get_invoices",
        "summary": "List all invoices",
        "description": "Get all invoices.",
        "tags": [
          "invoices"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Page"
          },
          {
            "$ref": "#/parameters/PerPage"
          },
          {
            "items": {
              "enum": [
                "invoice_items",
                "payments"
              ],
              "type": "string"
            },
            "type": "array",
            "x-ms-summary": "Include relations",
            "description": "Include relations in the results",
            "in": "query",
            "name": "include"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/invoice"
              },
              "type": "array"
            },
            "headers": {
              "total": {
                "description": "Total number of records",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "/invoices/{id}": {
      "get": {
        "operationId": "Get_invoices_id",
        "summary": "Get an invoice",
        "description": "Get a single invoice by id",
        "tags": [
          "invoices"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "integer",
            "format": "int64",
            "in": "path",
            "required": true,
            "x-ms-url-encoding": "single",
            "x-ms-summary": "Invoice id",
            "description": "Identifier of the invoice"
          },
          {
            "name": "include",
            "x-ms-summary": "Includes",
            "description": "Include relations in the results",
            "in": "query",
            "type": "array",
            "items": {
              "enum": [
                "invoice_items"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/invoice"
            }
          }
        }
      }
    },
    "/invoice_vats": {
      "get": {
        "operationId": "Get_invoice_vats",
        "summary": "List all invoice vats",
        "description": "Get all invoice vats",
        "tags": [
          "invoices"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Page"
          },
          {
            "$ref": "#/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/invoice_vat"
              }
            },
            "headers": {
              "total": {
                "description": "Total number of records",
                "type": "integer"
              }
            }
          }
        }
      },
      "post": {
        "operationId": "Post_invoice_vats",
        "summary": "Add an invoice vat",
        "description": "Add an invoice vat which can be used on the invoice",
        "tags": [
          "invoices"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the invoice vat."
                },
                "percentage": {
                  "type": "string",
                  "description": "Number representing the VAT percentage."
                }
              },
              "additionalProperties": false,
              "required": [
                "name",
                "percentage"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/invoice_vat"
            }
          }
        }
      }
    },
    "/labels": {
      "get": {
        "operationId": "Get_labels",
        "summary": "List all labels",
        "description": "Get all labels.",
        "tags": [
          "labels"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Page"
          },
          {
            "$ref": "#/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/label"
              },
              "type": "array"
            },
            "headers": {
              "total": {
                "description": "Total number of records",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "/webhooks": {
      "x-ms-notification-content": {
        "description": "Details for Webhook",
        "schema": {
          "$ref": "#/definitions/webhook_payload"
        }
      },
      "post": {
        "operationId": "Post_webhooks",
        "summary": "Subscribe to a webhook",
        "description": "Subscribe to a webhook to get notified on record updates",
        "x-ms-trigger": "single",
        "tags": [
          "webhooks"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "url"
              ],
              "properties": {
                "url": {
                  "type": "string",
                  "description": "The callback url for Eduframe to send a HTTP POST payload to.",
                  "x-ms-notification-url": true,
                  "x-ms-visibility": "internal"
                },
                "active": {
                  "type": "boolean",
                  "description": "State of webhook.",
                  "default": true
                },
                "webhook_triggers_attributes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "event",
                      "klass"
                    ],
                    "properties": {
                      "event": {
                        "type": "string",
                        "enum": [
                          "update",
                          "create"
                        ],
                        "description": "On which event webhook will be fired"
                      },
                      "klass": {
                        "type": "string",
                        "enum": [
                          "Category",
                          "Course",
                          "Educator",
                          "Enrollment",
                          "Lead",
                          "Meeting",
                          "MeetingLocation",
                          "Order",
                          "Payment",
                          "PlannedCourse",
                          "Plugins::EducatorPlugin",
                          "Invoice",
                          "InvoiceItem",
                          "Settings::CourseLocation",
                          "Settings::CourseVariant",
                          "Settings::InvoiceVat",
                          "TeacherEnrollment",
                          "User"
                        ],
                        "description": "On which klass event be caught"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/webhook"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "description": "",
      "name": "users"
    }
  ],
  "securityDefinitions": {
    "undefined": {
      "authorizationUrl": "https://api.eduframe.nl/login/oauth2/auth",
      "tokenUrl": "https://api.eduframe.nl/login/oauth2/token",
      "scopes": {},
      "type": "oauth2",
      "flow": "accessCode"
    }
  },
  "parameters": {
    "Page": {
      "x-ms-summary": "Page number",
      "description": "Page number to get",
      "name": "page",
      "in": "query",
      "type": "integer",
      "default": 1
    },
    "PerPage": {
      "x-ms-summary": "Records per page",
      "description": "Number of records per page",
      "name": "per_page",
      "in": "query",
      "type": "integer",
      "default": 25
    }
  }
}
