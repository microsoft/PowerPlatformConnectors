{
  "swagger": "2.0",
  "info": {
    "title": "IA-Connect Java",
    "description": "IA-Connect is a Robotic Process Automation (RPA) platform which adds RPA functionality from the Cloud to on-premises virtual machines or over Citrix or Microsoft Remote Desktop (RDS) connections. This is the module for automating Java applications using the Java Access Bridge (JAB).",
    "version": "9.0",
    "contact": {
      "name": "Ultima Labs",
      "url": "https://www.ultima.com/ultima-labs",
      "email": "IAConnect@ultima.com"
    }
  },
  "host": "DefinedInConnectionParameters",
  "basePath": "/IAConnectRESTClient",
  "schemes": [
    "https"
  ],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.ultima.com/ultima-labs"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.ultima.com/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "IT Operations;Productivity"
    }
  ],
  "paths": {
    "/JavaAccessBridge/JABConnectToJavaAccessBridge": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Connect to Java Access Bridge",
        "description": "Starts the IA-Connect Java subsystem (IA-JavaAccessBridge) and connects it to the specified Java Access Bridge DLL (or leave blank to search for one). This step must be performed before you can automate Java applications. This action also enables the Java Access Bridge which must be enabled before running any Java applications.",
        "parameters": [
          {
            "in": "body",
            "name": "JABConnectToJavaAccessBridge",
            "description": "Inputs for IA-Connect JABConnectToJavaAccessBridge action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "WindowsAccessBridgeDLLSearchFolder": {
                  "type": "string",
                  "title": "Windows Access Bridge DLL search folder",
                  "description": "Either specify the folder containing the Windows Access Bridge DLL (a component of the Java runtime) in the session where the Agent is running or enter the full filename of a Windows Access Bridge DLL to force that particular DLL to be used. If you do not provide a path, then the standard Windows search path will be used."
                },
                "IAJavaAccessBridgePath": {
                  "type": "string",
                  "title": "IA-JavaAccessBridge DLL path",
                  "description": "The location of the IA-JavaAccessBridge.dll COM DLL (a built-in component of the IA-Connect Agent) if you need to host it externally to the EXE (perhaps due to a security allow list). This can either be the full path, or the path relative to the location of the IA-Connect Agent. For example, if both the Agent and the IA-JavaAccessBridge.dll COM DLL are in the same folder then just passing the file name of the DLL is sufficient.",
                  "x-ms-visibility": "advanced"
                },
                "Is64BitJABDLL": {
                  "type": "boolean",
                  "default": false,
                  "title": "Is 64bit Windows Access Bridge DLL",
                  "description": "Is the Windows Access Bridge DLL being used 64bit?"
                },
                "UseCOMFor64BitJABDLL": {
                  "type": "boolean",
                  "default": true,
                  "title": "Use COM for 64bit IA-JavaAccessBridge DLL",
                  "description": "If the Windows Access Bridge DLL you are trying to load is 64bit, should this be run via an out-of-process COM DLLSurrogate instead of calling directly (in memory) from IA-Connect. By default, this is set to 'True'. You could try unchecking this if the IA-JavaAccessBridge DLL is being blocked.",
                  "x-ms-visibility": "advanced"
                },
                "EnableJavaAccessBridge": {
                  "type": "boolean",
                  "default": true,
                  "title": "Enable Java Access Bridge",
                  "description": "Should the Java Access Bridge be enabled? By default, this is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "AccessibilityFilepath": {
                  "type": "string",
                  "default": "%USERPROFILE%\\.accessibility.properties",
                  "title": "Accessibility file path",
                  "description": "The path to the .accessibility.properties file which controls whether the Java Access Bridge is enabled. If you do not provide a path, then this defaults to %USERPROFILE%\\.accessibility.properties.",
                  "x-ms-visibility": "advanced"
                },
                "CommandTimeoutInSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 20,
                  "title": "Command timeout in seconds",
                  "description": "The maximum number of seconds to wait for IA-Connect to connect to the Java Access Bridge. By default, this is 20 seconds."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "LoadedWindowsAccessBridgeDLL": {
                  "type": "string",
                  "title": "Loaded Windows Access Bridge DLL",
                  "description": "The full filename of the Windows Access Bridge DLL that was loaded."
                }
              }
            }
          }
        },
        "operationId": "JABConnectToJavaAccessBridge"
      }
    },
    "/JavaAccessBridge/JABDisconnectFromJavaAccessBridge": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Disconnect from Java Access Bridge",
        "description": "Shuts down any running IA-Connect Java subsystem (IA-JavaAccessBridge).",
        "parameters": [
          {
            "in": "body",
            "name": "JABDisconnectFromJavaAccessBridge",
            "description": "Inputs for IA-Connect JABDisconnectFromJavaAccessBridge action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DisableJavaAccessBridge": {
                  "type": "boolean",
                  "default": true,
                  "title": "Disable Java Access Bridge",
                  "description": "Should the Java Access Bridge be disabled? By default, this is set to 'True'."
                },
                "AccessibilityFilepath": {
                  "type": "string",
                  "default": "%USERPROFILE%\\.accessibility.properties",
                  "title": "Accessibility file path",
                  "description": "The path to the .accessibility.properties file which controls whether the Java Access Bridge is enabled. If you do not provide a path, then this defaults to %USERPROFILE%\\.accessibility.properties.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABDisconnectFromJavaAccessBridge"
      }
    },
    "/JavaAccessBridge/JABGetConnectionStatus": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get windows access bridge connection status",
        "description": "Returns the current status of the connection between IA-Connect Agent and the Windows Access Bridge (WAB). If IA-Connect Agent is connected to the WAB then the relevant details are returned as outputs.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetConnectionStatus",
            "description": "Inputs for IA-Connect JABGetConnectionStatus action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "Connected": {
                  "type": "boolean",
                  "title": "WAB connected",
                  "description": "Returns true if the IA-Connect Agent is connected to the Windows Access Bridge or false if not."
                },
                "ConnectionType": {
                  "type": "string",
                  "title": "WAB connection type",
                  "description": "The type of connection to the Windows Access Bridge, for example COM or Native and 32bit or 64bit."
                },
                "IsWAB64bit": {
                  "type": "boolean",
                  "title": "Is WAB 64bit",
                  "description": "Returns true if the Windows Access Bridge is 64 bit or false if not."
                },
                "ConnectionError": {
                  "type": "string",
                  "title": "Connection error",
                  "description": "The connection error, if one has been reported."
                },
                "LoadedIAJABDLL": {
                  "type": "string",
                  "title": "Loaded IA-JavaAccessBridge COM DLL",
                  "description": "The full path to the loaded IA-JavaAccessBridge COM DLL."
                },
                "LoadedWABDLL": {
                  "type": "string",
                  "title": "Loaded Windows Access Bridge DLL",
                  "description": "The full path to the loaded Windows Access Bridge DLL."
                },
                "WABVersion": {
                  "type": "string",
                  "title": "Windows Access Bridge DLL version",
                  "description": "The version of the loaded Windows Access Bridge DLL."
                }
              }
            }
          }
        },
        "operationId": "JABGetConnectionStatus"
      }
    },
    "/JavaAccessBridge/JABIsJavaWindow": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Is Java window",
        "description": "Returns whether a UIA window is a Java element.",
        "parameters": [
          {
            "in": "body",
            "name": "JABIsJavaWindow",
            "description": "Inputs for IA-Connect JABIsJavaWindow action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using UIA actions such as 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "IsJavaWindow": {
                  "type": "boolean",
                  "title": "Is Java window",
                  "description": "Returns true if the UIA element found is a Java window or false if not."
                }
              }
            }
          }
        },
        "operationId": "JABIsJavaWindow"
      }
    },
    "/JavaAccessBridge/JABGetWindowsAccessBridgeInfo": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get windows access bridge info",
        "description": "Returns information about the Windows Access Bridge (WAB) for a particular Java VM ID, including the Java and Windows DLL versions. The Java VM ID can be obtained as an output from the 'Get Java element properties' action.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetWindowsAccessBridgeInfo",
            "description": "Inputs for IA-Connect JABGetWindowsAccessBridgeInfo action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "VMID": {
                  "type": "integer",
                  "format": "int32",
                  "title": "VM ID",
                  "description": "The Java Virtual Machine ID. This is unique across all Java virtual machines."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "VMID",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "JavaClassVersion": {
                  "type": "string",
                  "title": "Java class version",
                  "description": "The Java class version, for example '1.8.0_261'."
                },
                "JavaDLLVersion": {
                  "type": "string",
                  "title": "Java DLL version",
                  "description": "The Java DLL version, for example '1.8.0_261'."
                },
                "WinDLLVersion": {
                  "type": "string",
                  "title": "Windows DLL version",
                  "description": "The Windows DLL version, for example '1.8.0_261'."
                },
                "VMVersion": {
                  "type": "string",
                  "title": "VM version",
                  "description": "The Java VM version, for example '1.8.0_261'."
                }
              }
            }
          }
        },
        "operationId": "JABGetWindowsAccessBridgeInfo"
      }
    },
    "/JavaAccessBridge/JABGetUIAElementProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java properties for UIA element",
        "description": "Returns all Java properties of a UIA element. This can be useful if you are uncertain which field holds the property values required.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetUIAElementProperties",
            "description": "Inputs for IA-Connect JABGetUIAElementProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using UIA actions such as 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "MaxStringLength": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max string length",
                  "description": "The maximum length of the description field. This can sometimes contain a large amount of text so setting a maximum value can increase search speed. By default, there is no maximum string length so full descriptions will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element JAB handle",
                  "description": "If the search element was found, this will hold a numeric element handle which can be used in further actions to act as a 'parent' handle for further searches (i.e. to locate elements relative to this handle)."
                },
                "ElementVMID": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element VMID",
                  "description": "The ID of the Java virtual machine running the Java program."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The Java name of the located element."
                },
                "ElementDescription": {
                  "type": "string",
                  "title": "Element description",
                  "description": "The Java description of the located element (if there is one)."
                },
                "ElementRole": {
                  "type": "string",
                  "title": "Element role",
                  "description": "The Java role (e.g. frame or panel) of the located element (if there is one)."
                },
                "ElementStates": {
                  "type": "string",
                  "title": "Element states",
                  "description": "The Java element's supported states (e.g. focusable, visible) in the locale of the Agent session."
                },
                "ElementStates_en_US": {
                  "type": "string",
                  "title": "Element states en_US",
                  "description": "The Java element's supported states (e.g. focusable, visible) in the en_US locale."
                },
                "ElementLeftEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element left edge",
                  "description": "The distance in pixels between the left edge of the Java element or window and the left edge of the display."
                },
                "ElementTopEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element top edge",
                  "description": "The distance in pixels between the top edge of the Java element or window and the top edge of the display."
                },
                "ElementWidth": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element width",
                  "description": "The width of the Java element in pixels."
                },
                "ElementHeight": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element height",
                  "description": "The height of the Java element in pixels."
                },
                "ElementRightEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element right edge",
                  "description": "The distance in pixels between the right edge of the Java element or window and the left edge of the display."
                },
                "ElementBottomEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element bottom edge",
                  "description": "The distance in pixels between the bottom edge of the Java element or window and the top edge of the display."
                },
                "IsComponentElement": {
                  "type": "boolean",
                  "title": "Is component element",
                  "description": "Returns true if the Java element is a container or false if not."
                },
                "IsActionElement": {
                  "type": "boolean",
                  "title": "Is action element",
                  "description": "Returns true if the Java element is an action element or false if not."
                },
                "IsSelectionElement": {
                  "type": "boolean",
                  "title": "Is selection element",
                  "description": "Returns true if the Java element is a selection or false if not."
                },
                "IsTextElement": {
                  "type": "boolean",
                  "title": "Is text element",
                  "description": "Returns true if the Java element is a text element or false if not."
                },
                "IsEnabled": {
                  "type": "boolean",
                  "title": "Is enabled",
                  "description": "Returns true if the Java element is enabled or false if not. A disabled element is typically visible but cannot be interacted with."
                },
                "IsVisible": {
                  "type": "boolean",
                  "title": "Is visible",
                  "description": "Returns true if the Java element is visible or false if not."
                },
                "IsShowing": {
                  "type": "boolean",
                  "title": "Is showing",
                  "description": "Returns true if the Java element is showing or false if not."
                },
                "IsOpaque": {
                  "type": "boolean",
                  "title": "Is opaque",
                  "description": "Returns true if the Java element is opaque or false if not."
                },
                "IsFocusable": {
                  "type": "boolean",
                  "title": "Is focusable",
                  "description": "Returns true if the Java element be focussed by the keyboard or false if not. This may be of limited use since most elements are keyboard focusable."
                },
                "IsEditable": {
                  "type": "boolean",
                  "title": "Is editable",
                  "description": "Returns true if the Java element is editable or false if not."
                },
                "IsSingleLine": {
                  "type": "boolean",
                  "title": "Is single line",
                  "description": "Returns true if the Java element is a single line or false if not."
                },
                "IsResizable": {
                  "type": "boolean",
                  "title": "Is resizable",
                  "description": "Returns true if the Java element is resizable or false if not."
                },
                "IsModal": {
                  "type": "boolean",
                  "title": "Is modal",
                  "description": "Returns true if the Java element is modal or false if not. A modal element will block the main application window, preventing you from interacting with it."
                },
                "IsCollapsed": {
                  "type": "boolean",
                  "title": "Is collapsed",
                  "description": "Returns true if the Java element is collapsed or false if not."
                },
                "IsSelectable": {
                  "type": "boolean",
                  "title": "Is selectable",
                  "description": "Returns true if the Java element is selectable or false if not."
                },
                "IsSelected": {
                  "type": "boolean",
                  "title": "Is selected",
                  "description": "Returns true if the Java element is selected or false if not."
                },
                "IsVertical": {
                  "type": "boolean",
                  "title": "Is vertical",
                  "description": "Returns true if the Java element is vertical or false if not."
                },
                "IsHorizontal": {
                  "type": "boolean",
                  "title": "Is horizontal",
                  "description": "Returns true if the Java element is horizontal or false if not."
                },
                "IsActive": {
                  "type": "boolean",
                  "title": "Is active",
                  "description": "Returns true if the Java element is active or false if not."
                },
                "IsChecked": {
                  "type": "boolean",
                  "title": "Is checked",
                  "description": "Returns true if the Java element is checked or false if not."
                },
                "IsFocussed": {
                  "type": "boolean",
                  "title": "Is focussed",
                  "description": "Returns true if the Java element has keyboard focus. or false if not."
                },
                "IsExpanded": {
                  "type": "boolean",
                  "title": "Is expanded",
                  "description": "Returns true if the Java element is expanded or false if not."
                },
                "AdditionalStates_en_US": {
                  "type": "string",
                  "title": "Additional element states en_US",
                  "description": "Any additional states that the element supports will be listed here in the en_US locale, e.g. multiselectable, transient."
                },
                "IndexInParent": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Index in parent",
                  "description": "The element index within the current parent element."
                },
                "ChildrenCount": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element child count",
                  "description": "The number of child elements that the element has."
                },
                "ElementDepth": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element depth",
                  "description": "The depth of the element from the top-level parent window."
                }
              }
            }
          }
        },
        "operationId": "JABGetUIAElementProperties"
      }
    },
    "/JavaAccessBridge/JABGetJABElementProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java element properties",
        "description": "Returns all Java properties of a Java element. This can be useful if you are uncertain which field holds the property values required.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetJABElementProperties",
            "description": "Inputs for IA-Connect JABGetJABElementProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaxStringLength": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max string length",
                  "description": "The maximum length of the description field. This can sometimes contain a large amount of text so setting a maximum value can increase search speed. By default, there is no maximum string length so full descriptions will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element JAB handle",
                  "description": "If the search element was found, this will hold a numeric element handle which can be used in further actions to act as a 'parent' handle for further searches (i.e. to locate elements relative to this handle)."
                },
                "ElementVMID": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element VMID",
                  "description": "The ID of the Java virtual machine running the Java program."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The Java name of the located element."
                },
                "ElementDescription": {
                  "type": "string",
                  "title": "Element description",
                  "description": "The Java description of the located element (if there is one)."
                },
                "ElementRole": {
                  "type": "string",
                  "title": "Element role",
                  "description": "The Java role (e.g. frame or panel) of the located element (if there is one)."
                },
                "ElementStates": {
                  "type": "string",
                  "title": "Element states",
                  "description": "The Java element's supported states (e.g. focusable, visible) in the locale of the Agent session."
                },
                "ElementStates_en_US": {
                  "type": "string",
                  "title": "Element states en_US",
                  "description": "The Java element's supported states (e.g. focusable, visible) in the en_US locale."
                },
                "ElementLeftEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element left edge",
                  "description": "The distance in pixels between the left edge of the Java element or window and the left edge of the display."
                },
                "ElementTopEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element top edge",
                  "description": "The distance in pixels between the top edge of the Java element or window and the top edge of the display."
                },
                "ElementWidth": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element width",
                  "description": "The width of the Java element in pixels."
                },
                "ElementHeight": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element height",
                  "description": "The height of the Java element in pixels."
                },
                "ElementRightEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element right edge",
                  "description": "The distance in pixels between the right edge of the Java element or window and the left edge of the display."
                },
                "ElementBottomEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element bottom edge",
                  "description": "The distance in pixels between the bottom edge of the Java element or window and the top edge of the display."
                },
                "IsComponentElement": {
                  "type": "boolean",
                  "title": "Is component element",
                  "description": "Returns true if the Java element is a container or false if not."
                },
                "IsActionElement": {
                  "type": "boolean",
                  "title": "Is action element",
                  "description": "Returns true if the Java element is an action element or false if not."
                },
                "IsSelectionElement": {
                  "type": "boolean",
                  "title": "Is selection element",
                  "description": "Returns true if the Java element is a selection or false if not."
                },
                "IsTextElement": {
                  "type": "boolean",
                  "title": "Is text element",
                  "description": "Returns true if the Java element is a text element or false if not."
                },
                "IsEnabled": {
                  "type": "boolean",
                  "title": "Is enabled",
                  "description": "Returns true if the Java element is enabled or false if not. A disabled element is typically visible but cannot be interacted with."
                },
                "IsVisible": {
                  "type": "boolean",
                  "title": "Is visible",
                  "description": "Returns true if the Java element is visible or false if not."
                },
                "IsShowing": {
                  "type": "boolean",
                  "title": "Is showing",
                  "description": "Returns true if the Java element is showing or false if not."
                },
                "IsOpaque": {
                  "type": "boolean",
                  "title": "Is opaque",
                  "description": "Returns true if the Java element is opaque or false if not."
                },
                "IsFocusable": {
                  "type": "boolean",
                  "title": "Is focusable",
                  "description": "Returns true if the Java element be focussed by the keyboard or false if not. This may be of limited use since most elements are keyboard focusable."
                },
                "IsEditable": {
                  "type": "boolean",
                  "title": "Is editable",
                  "description": "Returns true if the Java element is editable or false if not."
                },
                "IsSingleLine": {
                  "type": "boolean",
                  "title": "Is single line",
                  "description": "Returns true if the Java element is a single line or false if not."
                },
                "IsResizable": {
                  "type": "boolean",
                  "title": "Is resizable",
                  "description": "Returns true if the Java element is resizable or false if not."
                },
                "IsModal": {
                  "type": "boolean",
                  "title": "Is modal",
                  "description": "Returns true if the Java element is modal or false if not. A modal element will block the main application window, preventing you from interacting with it."
                },
                "IsCollapsed": {
                  "type": "boolean",
                  "title": "Is collapsed",
                  "description": "Returns true if the Java element is collapsed or false if not."
                },
                "IsSelectable": {
                  "type": "boolean",
                  "title": "Is selectable",
                  "description": "Returns true if the Java element is selectable or false if not."
                },
                "IsSelected": {
                  "type": "boolean",
                  "title": "Is selected",
                  "description": "Returns true if the Java element is selected or false if not."
                },
                "IsVertical": {
                  "type": "boolean",
                  "title": "Is vertical",
                  "description": "Returns true if the Java element is vertical or false if not."
                },
                "IsHorizontal": {
                  "type": "boolean",
                  "title": "Is horizontal",
                  "description": "Returns true if the Java element is horizontal or false if not."
                },
                "IsActive": {
                  "type": "boolean",
                  "title": "Is active",
                  "description": "Returns true if the Java element is active or false if not."
                },
                "IsChecked": {
                  "type": "boolean",
                  "title": "Is checked",
                  "description": "Returns true if the Java element is checked or false if not."
                },
                "IsFocussed": {
                  "type": "boolean",
                  "title": "Is focussed",
                  "description": "Returns true if the Java element has keyboard focus. or false if not."
                },
                "IsExpanded": {
                  "type": "boolean",
                  "title": "Is expanded",
                  "description": "Returns true if the Java element is expanded or false if not."
                },
                "AdditionalStates_en_US": {
                  "type": "string",
                  "title": "Additional element states en_US",
                  "description": "Any additional states that the element supports will be listed here in the en_US locale, e.g. multiselectable, transient."
                },
                "IndexInParent": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Index in parent",
                  "description": "The element index within the current parent element."
                },
                "ChildrenCount": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element child count",
                  "description": "The number of child elements that the element has."
                },
                "ElementDepth": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element depth",
                  "description": "The depth of the element from the top-level parent window."
                }
              }
            }
          }
        },
        "operationId": "JABGetJABElementProperties"
      }
    },
    "/JavaAccessBridge/JABDrawRectangleAroundJABElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Draw rectangle around Java element",
        "description": "Draws a rectangle around the perimeter of a Java element to aid in identifying that the element found is the one required. The rectangle is automatically removed after 5 seconds.",
        "parameters": [
          {
            "in": "body",
            "name": "JABDrawRectangleAroundJABElement",
            "description": "Inputs for IA-Connect JABDrawRectangleAroundJABElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "PenColour": {
                  "type": "string",
                  "default": "Orange",
                  "title": "Pen colour",
                  "description": "The colour of the rectangle to be drawn (e.g. red, green, blue, yellow, purple or orange) or a string hex code e.g. #FF0000."
                },
                "PenThicknessPixels": {
                  "type": "integer",
                  "format": "int32",
                  "default": 4,
                  "title": "Pen thickness pixels",
                  "description": "The thickness (in pixels) of the highlight rectangle border."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABDrawRectangleAroundJABElement"
      }
    },
    "/JavaAccessBridge/JABDoesElementExist": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Does Java element exist",
        "description": "Reports whether a Java element exists and returns some basic element properties.",
        "parameters": [
          {
            "in": "body",
            "name": "JABDoesElementExist",
            "description": "Inputs for IA-Connect JABDoesElementExist action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementExists": {
                  "type": "boolean",
                  "title": "Element exists",
                  "description": "Returns true if the element exists or false if not."
                },
                "ElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element JAB handle",
                  "description": "If the search element was found, this will hold a numeric element handle which can be used in further actions to act as a 'parent' handle for further searches (i.e. to locate elements relative to this handle)."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The Java name of the located element."
                },
                "ElementDescription": {
                  "type": "string",
                  "title": "Element description",
                  "description": "The Java description of the located element (if there is one)."
                },
                "ElementRole": {
                  "type": "string",
                  "title": "Element role",
                  "description": "The Java role (e.g. frame or panel) of the located element (if there is one)."
                }
              }
            }
          }
        },
        "operationId": "JABDoesElementExist"
      }
    },
    "/JavaAccessBridge/JABWaitForElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wait for Java element",
        "description": "Waits for a Java element (typically an individual element within a window such as a button or a text input area) to exist.",
        "parameters": [
          {
            "in": "body",
            "name": "JABWaitForElement",
            "description": "Inputs for IA-Connect JABWaitForElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "SecondsToWait": {
                  "type": "number",
                  "format": "double",
                  "default": 10,
                  "title": "Seconds to wait",
                  "description": "The maximum number of seconds to wait for the element to exist."
                },
                "RaiseExceptionIfElementNotFound": {
                  "type": "boolean",
                  "default": false,
                  "title": "Raise exception if element not found",
                  "description": "Should IA-Connect raise an exception if the Java element does not exist after the wait period?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "SecondsToWait",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementExists": {
                  "type": "boolean",
                  "title": "Element exists",
                  "description": "Returns true if the element exists or false if not."
                },
                "ElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element JAB handle",
                  "description": "If the search element was found, this will hold a numeric element handle which can be used in further actions to act as a 'parent' handle for further searches (i.e. to locate elements relative to this handle)."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The Java name of the located element."
                },
                "ElementDescription": {
                  "type": "string",
                  "title": "Element description",
                  "description": "The Java description of the located element (if there is one)."
                },
                "ElementRole": {
                  "type": "string",
                  "title": "Element role",
                  "description": "The Java role (e.g. frame or panel) of the located element (if there is one)."
                }
              }
            }
          }
        },
        "operationId": "JABWaitForElement"
      }
    },
    "/JavaAccessBridge/JABWaitForElementToNotExist": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wait for Java element to not exist",
        "description": "Waits for a Java element (typically an individual element within a window such as a button or a text input area) to no longer exist.",
        "parameters": [
          {
            "in": "body",
            "name": "JABWaitForElementToNotExist",
            "description": "Inputs for IA-Connect JABWaitForElementToNotExist action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "SecondsToWait": {
                  "type": "number",
                  "format": "double",
                  "default": 10,
                  "title": "Seconds to wait"
                },
                "RaiseExceptionIfElementStillExists": {
                  "type": "boolean",
                  "default": false,
                  "title": "Raise exception if element still exists",
                  "description": "Should IA-Connect raise an exception if the Java element still exists after the wait period?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "SecondsToWait",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementExistsBeforeWait": {
                  "type": "boolean",
                  "title": "Element exists before wait",
                  "description": "Returns true if the element existed before waiting or false if not."
                },
                "ElementExistsAfterWait": {
                  "type": "boolean",
                  "title": "Element exists after wait",
                  "description": "Returns true if the element existed after waiting or false if not."
                }
              }
            }
          }
        },
        "operationId": "JABWaitForElementToNotExist"
      }
    },
    "/JavaAccessBridge/JABGetDesktopElements": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java desktop elements",
        "description": "Returns a list of Java application windows and dialogs on the desktop. You must first connect to the Java Access Bridge.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetDesktopElements",
            "description": "Inputs for IA-Connect JABGetDesktopElements action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchElementLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchProcessID": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Search process Id",
                  "description": "The process ID of the running process. This can be retrieved as an output from the \"Run Process\" action."
                },
                "FirstItemToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "First item to return",
                  "description": "The element index of the first item to return, starting from 1. If you wish to return the elements in the reverse order (from the bottom of the tree), you can alternatively specify a negative index starting from -1. For example, an index of -10 would return the tenth item from the bottom.",
                  "x-ms-visibility": "advanced"
                },
                "MaxItemsToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max items to return",
                  "description": "The maximum number of elements to return. This parameter can be used to return large sets of elements in smaller chunks, for example large tables. Instead of attempting to return the entire table which may cause a timeout for extremely large tables, you could instead return 500 rows at a time.",
                  "x-ms-visibility": "advanced"
                },
                "SearchChildElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxStringLength": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max string length",
                  "description": "The maximum length of the description field. This can sometimes contain a large amount of text so setting a maximum value can increase search speed. By default, there is no maximum string length so full descriptions will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "IncludeChildProcesses": {
                  "type": "boolean",
                  "default": true,
                  "title": "Include child processes",
                  "description": "If set to true and a 'Search process Id' is specified, child processes of that process Id are included in the search. This is common for Java since a launcher EXE often then runs a child 'Java(w).exe' process. If set to false then only a process matching the exact 'Search process Id' will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfElementsFound": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of elements found",
                  "description": "The number of elements found which met the search criteria."
                },
                "NumberOfElementsReturned": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of elements returned",
                  "description": "The number of elements returned from the search. This could be lower than the number of elements found if 'Max items to return' was set to a lower number."
                },
                "JavaDesktopElementsJSON": {
                  "type": "string",
                  "title": "Java desktop elements JSON",
                  "description": "The element properties of the Java desktop elements found that match the search criteria, in JSON format."
                }
              }
            }
          }
        },
        "operationId": "JABGetDesktopElements"
      }
    },
    "/JavaAccessBridge/JABDoesDesktopElementExist": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Does Java desktop element exist",
        "description": "Reports whether a Java desktop element exists and provides some basic element properties.",
        "parameters": [
          {
            "in": "body",
            "name": "JABDoesDesktopElementExist",
            "description": "Inputs for IA-Connect JABDoesDesktopElementExist action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchUIAElementName": {
                  "type": "string",
                  "title": "Search UIA element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchUIAElementClassName": {
                  "type": "string",
                  "title": "Search UIA element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchUIAElementLocalizedControlType": {
                  "type": "string",
                  "title": "Search UIA element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchProcessID": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Search process Id",
                  "description": "The process ID of the running process. This can be retrieved as an output from the \"Run Process\" action."
                },
                "SearchChildElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "IncludeChildProcesses": {
                  "type": "boolean",
                  "default": true,
                  "title": "Include child processes",
                  "description": "If set to true and a 'Search process Id' is specified, child processes of that process Id are included in the search. This is common for Java since a launcher EXE often then runs a child 'Java(w).exe' process. If set to false then only a process matching the exact 'Search process Id' will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementExists": {
                  "type": "boolean",
                  "title": "Element exists",
                  "description": "Returns true if the element exists or false if not."
                },
                "ElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element JAB handle",
                  "description": "If the search element was found, this will hold a numeric element handle which can be used in further actions to act as a 'parent' handle for further searches (i.e. to locate elements relative to this handle)."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The Java name of the located element."
                },
                "ElementDescription": {
                  "type": "string",
                  "title": "Element description",
                  "description": "The Java description of the located element (if there is one)."
                },
                "ElementRole": {
                  "type": "string",
                  "title": "Element role",
                  "description": "The Java role (e.g. frame or panel) of the located element (if there is one)."
                }
              }
            }
          }
        },
        "operationId": "JABDoesDesktopElementExist"
      }
    },
    "/JavaAccessBridge/JABWaitForDesktopElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wait for Java desktop element",
        "description": "Waits for a Java desktop element (typically a window) to exist.",
        "parameters": [
          {
            "in": "body",
            "name": "JABWaitForDesktopElement",
            "description": "Inputs for IA-Connect JABWaitForDesktopElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchUIAElementName": {
                  "type": "string",
                  "title": "Search UIA element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchUIAElementClassName": {
                  "type": "string",
                  "title": "Search UIA element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchUIAElementLocalizedControlType": {
                  "type": "string",
                  "title": "Search UIA element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchProcessID": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Search process Id",
                  "description": "The process ID of the running process. This can be retrieved as an output from the \"Run Process\" action."
                },
                "SearchChildElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "SecondsToWait": {
                  "type": "number",
                  "format": "double",
                  "default": 10,
                  "title": "Seconds to wait",
                  "description": "The maximum number of seconds to wait for the element to exist."
                },
                "IncludeChildProcesses": {
                  "type": "boolean",
                  "default": true,
                  "title": "Include child processes",
                  "description": "If set to true and a 'Search process Id' is specified, child processes of that process Id are included in the search. This is common for Java since a launcher EXE often then runs a child 'Java(w).exe' process. If set to false then only a process matching the exact 'Search process Id' will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "RaiseExceptionIfElementNotFound": {
                  "type": "boolean",
                  "default": false,
                  "title": "Raise exception if element not found",
                  "description": "Should IA-Connect raise an exception if the Java element does not exist after the wait period?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SecondsToWait",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementExists": {
                  "type": "boolean",
                  "title": "Element exists",
                  "description": "Returns true if the element exists or false if not."
                },
                "ElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element JAB handle",
                  "description": "If the search element was found, this will hold a numeric element handle which can be used in further actions to act as a 'parent' handle for further searches (i.e. to locate elements relative to this handle)."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The Java name of the located element."
                },
                "ElementDescription": {
                  "type": "string",
                  "title": "Element description",
                  "description": "The Java description of the located element (if there is one)."
                },
                "ElementRole": {
                  "type": "string",
                  "title": "Element role",
                  "description": "The Java role (e.g. frame or panel) of the located element (if there is one)."
                }
              }
            }
          }
        },
        "operationId": "JABWaitForDesktopElement"
      }
    },
    "/JavaAccessBridge/JABWaitForDesktopElementToNotExist": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wait for Java desktop element to not exist",
        "description": "Waits for a Java desktop element (typically a window) to no longer exist.",
        "parameters": [
          {
            "in": "body",
            "name": "JABWaitForDesktopElementToNotExist",
            "description": "Inputs for IA-Connect JABWaitForDesktopElementToNotExist action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchUIAElementName": {
                  "type": "string",
                  "title": "Search UIA element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchUIAElementClassName": {
                  "type": "string",
                  "title": "Search UIA element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchUIAElementLocalizedControlType": {
                  "type": "string",
                  "title": "Search UIA element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchProcessID": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Search process Id",
                  "description": "The process ID of the running process. This can be retrieved as an output from the \"Run Process\" action."
                },
                "SearchChildElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "SecondsToWait": {
                  "type": "number",
                  "format": "double",
                  "default": 10,
                  "title": "Seconds to wait",
                  "description": "The maximum number of seconds to wait for the element to not exist."
                },
                "IncludeChildProcesses": {
                  "type": "boolean",
                  "default": true,
                  "title": "Include child processes",
                  "description": "If set to true and a 'Search process Id' is specified, child processes of that process Id are included in the search. This is common for Java since a launcher EXE often then runs a child 'Java(w).exe' process. If set to false then only a process matching the exact 'Search process Id' will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "RaiseExceptionIfElementStillExists": {
                  "type": "boolean",
                  "default": false,
                  "title": "Raise exception if element still exists",
                  "description": "Should IA-Connect raise an exception if the Java element still exists after the wait period?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SecondsToWait",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementExistsBeforeWait": {
                  "type": "boolean",
                  "title": "Element exists before wait",
                  "description": "Returns true if the element existed before waiting or false if not."
                },
                "ElementExistsAfterWait": {
                  "type": "boolean",
                  "title": "Element exists after wait",
                  "description": "Returns true if the element existed after waiting or false if not."
                }
              }
            }
          }
        },
        "operationId": "JABWaitForDesktopElementToNotExist"
      }
    },
    "/JavaAccessBridge/JABFreeAllJABHandles": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Reset all Java element handles",
        "description": "Resets all Java element handles currently stored by IA-Connect which can be useful if you have been identifying a lot of elements and have a large number of element handles stored. In scenarios with extremely high numbers of element handles (100,000+) this action can also be used to free up RAM usage.",
        "parameters": [
          {
            "in": "body",
            "name": "JABFreeAllJABHandles",
            "description": "Inputs for IA-Connect JABFreeAllJABHandles action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABFreeAllJABHandles"
      }
    },
    "/JavaAccessBridge/JABGetChildJABElementProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java child element properties",
        "description": "Returns all properties of a specific Java child element, specified by index. This can be useful if you are uncertain which field holds the property values required.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetChildJABElementProperties",
            "description": "Inputs for IA-Connect JABGetChildJABElementProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Search element JAB handle",
                  "description": "The element handle of the element which you want to return the child element properties for. This could be located using 'Get Java element properties' or some other search which returns an element handle."
                },
                "SearchChildIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Search child index"
                },
                "MaxStringLength": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max string length",
                  "description": "The maximum length of the description field. This can sometimes contain a large amount of text so setting a maximum value can increase search speed. By default, there is no maximum string length so full descriptions will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchElementJABHandle",
                "SearchChildIndex",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element JAB handle",
                  "description": "If the search element was found, this will hold a numeric element handle which can be used in further actions to act as a 'parent' handle for further searches (i.e. to locate elements relative to this handle)."
                },
                "ElementVMID": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element VMID",
                  "description": "The ID of the Java virtual machine running the Java program."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The Java name of the located element."
                },
                "ElementDescription": {
                  "type": "string",
                  "title": "Element description",
                  "description": "The Java description of the located element (if there is one)."
                },
                "ElementRole": {
                  "type": "string",
                  "title": "Element role",
                  "description": "The Java role (e.g. frame or panel) of the located element (if there is one)."
                },
                "ElementStates": {
                  "type": "string",
                  "title": "Element states",
                  "description": "The Java element's supported states (e.g. focusable, visible) in the locale of the Agent session."
                },
                "ElementStates_en_US": {
                  "type": "string",
                  "title": "Element states en_US",
                  "description": "The Java element's supported states (e.g. focusable, visible) in the en_US locale."
                },
                "ElementLeftEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element left edge",
                  "description": "The distance in pixels between the left edge of the Java element or window and the left edge of the display."
                },
                "ElementTopEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element top edge",
                  "description": "The distance in pixels between the top edge of the Java element or window and the top edge of the display."
                },
                "ElementRightEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element right edge",
                  "description": "The distance in pixels between the right edge of the Java element or window and the left edge of the display."
                },
                "ElementBottomEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element bottom edge",
                  "description": "The distance in pixels between the bottom edge of the Java element or window and the top edge of the display."
                },
                "ElementWidth": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element width",
                  "description": "The width of the Java element in pixels."
                },
                "ElementHeight": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element height",
                  "description": "The height of the Java element in pixels."
                },
                "IsComponentElement": {
                  "type": "boolean",
                  "title": "Is component element",
                  "description": "Returns true if the Java element is a container or false if not."
                },
                "IsActionElement": {
                  "type": "boolean",
                  "title": "Is action element",
                  "description": "Returns true if the Java element is an action element or false if not."
                },
                "IsSelectionElement": {
                  "type": "boolean",
                  "title": "Is selection element",
                  "description": "Returns true if the Java element is a selection or false if not."
                },
                "IsTextElement": {
                  "type": "boolean",
                  "title": "Is text element",
                  "description": "Returns true if the Java element is a text element or false if not."
                },
                "IsEnabled": {
                  "type": "boolean",
                  "title": "Is enabled",
                  "description": "Returns true if the Java element is enabled or false if not. A disabled element is typically visible but cannot be interacted with."
                },
                "IsVisible": {
                  "type": "boolean",
                  "title": "Is visible",
                  "description": "Returns true if the Java element is visible or false if not."
                },
                "IsShowing": {
                  "type": "boolean",
                  "title": "Is showing",
                  "description": "Returns true if the Java element is showing or false if not."
                },
                "IsOpaque": {
                  "type": "boolean",
                  "title": "Is opaque",
                  "description": "Returns true if the Java element is opaque or false if not."
                },
                "IsFocusable": {
                  "type": "boolean",
                  "title": "Is focusable",
                  "description": "Returns true if the Java element be focussed by the keyboard or false if not. This may be of limited use since most elements are keyboard focusable."
                },
                "IsEditable": {
                  "type": "boolean",
                  "title": "Is editable",
                  "description": "Returns true if the Java element is editable or false if not."
                },
                "IsSingleLine": {
                  "type": "boolean",
                  "title": "Is single line",
                  "description": "Returns true if the Java element is a single line or false if not."
                },
                "IsResizable": {
                  "type": "boolean",
                  "title": "Is resizable",
                  "description": "Returns true if the Java element is resizable or false if not."
                },
                "IsModal": {
                  "type": "boolean",
                  "title": "Is modal",
                  "description": "Returns true if the Java element is modal or false if not. A modal element will block the main application window, preventing you from interacting with it."
                },
                "IsCollapsed": {
                  "type": "boolean",
                  "title": "Is collapsed",
                  "description": "Returns true if the Java element is collapsed or false if not."
                },
                "IsSelectable": {
                  "type": "boolean",
                  "title": "Is selectable",
                  "description": "Returns true if the Java element is selectable or false if not."
                },
                "IsSelected": {
                  "type": "boolean",
                  "title": "Is selected",
                  "description": "Returns true if the Java element is selected or false if not."
                },
                "IsVertical": {
                  "type": "boolean",
                  "title": "Is vertical",
                  "description": "Returns true if the Java element is vertical or false if not."
                },
                "IsHorizontal": {
                  "type": "boolean",
                  "title": "Is horizontal",
                  "description": "Returns true if the Java element is horizontal or false if not."
                },
                "IsActive": {
                  "type": "boolean",
                  "title": "Is active",
                  "description": "Returns true if the Java element is active or false if not."
                },
                "IsChecked": {
                  "type": "boolean",
                  "title": "Is checked",
                  "description": "Returns true if the Java element is checked or false if not."
                },
                "IsFocussed": {
                  "type": "boolean",
                  "title": "Is focussed",
                  "description": "Returns true if the Java element has keyboard focus. or false if not."
                },
                "IsExpanded": {
                  "type": "boolean",
                  "title": "Is expanded",
                  "description": "Returns true if the Java element is expanded or false if not."
                },
                "AdditionalStates_en_US": {
                  "type": "string",
                  "title": "Additional element states en_US",
                  "description": "Any additional states that the element supports will be listed here in the en_US locale, e.g. multiselectable, transient."
                },
                "IndexInParent": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Index in parent",
                  "description": "The element index within the current parent element."
                },
                "ChildrenCount": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element child count",
                  "description": "The number of child elements that the element has."
                },
                "ElementDepth": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element depth",
                  "description": "The depth of the element from the top-level parent window."
                }
              }
            }
          }
        },
        "operationId": "JABGetChildJABElementProperties"
      }
    },
    "/JavaAccessBridge/JABGetAllChildJABElementProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get all Java child element properties",
        "description": "Returns all properties of all Java child elements. This can be useful if you are uncertain which field holds the property values required.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetAllChildJABElementProperties",
            "description": "Inputs for IA-Connect JABGetAllChildJABElementProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Search element JAB handle",
                  "description": "The element handle of the element which you want to return the child element properties for. This could be located using 'Get Java element properties' or some other search which returns an element handle."
                },
                "FirstItemToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "First item to return",
                  "description": "The element index of the first item to return, starting from 1. If you wish to return the elements in the reverse order (from the bottom of the tree), you can alternatively specify a negative index starting from -1. For example, an index of -10 would return the tenth item from the bottom.",
                  "x-ms-visibility": "advanced"
                },
                "MaxItemsToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max items to return",
                  "description": "The maximum number of elements to return. This parameter can be used to return large sets of elements in smaller chunks, for example large tables. Instead of attempting to return the entire table which may cause a timeout for extremely large tables, you could instead return 500 rows at a time.",
                  "x-ms-visibility": "advanced"
                },
                "MaxStringLength": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max string length",
                  "description": "The maximum length of the description field. This can sometimes contain a large amount of text so setting a maximum value can increase search speed. By default, there is no maximum string length so full descriptions will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "SearchDescendants": {
                  "type": "boolean",
                  "default": false,
                  "title": "Search descendants",
                  "description": "If set to true then all child elements below the parent handle will be searched. This is more thorough but can take longer. If set to false, only direct child elements of the parent handle will be searched."
                },
                "SearchRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the child elements to search for. This can be discovered via Inspection."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfChildElementsReturned": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of child elements returned",
                  "description": "The number of child elements returned from the search."
                },
                "MoreElementsAvailableAtCurrentDepth": {
                  "type": "boolean",
                  "title": "More elements available at current depth",
                  "description": "Returns true if there are more child elements at the current depth that have not been returned as 'Max items to return' has been set to a lower number."
                },
                "MoreElementsAvailableAtLowerDepths": {
                  "type": "boolean",
                  "title": "More elements available at lower depths",
                  "description": "Returns true if there are more of child elements available at a lower depth in the Java tree, if 'Max items to return' was set to a lower number."
                },
                "MoreElementsDeeperThanMaxDepth": {
                  "type": "boolean",
                  "title": "More elements deeper than max depth",
                  "description": "Returns true if there are more child elements available at a lower maximum depth in the Java tree, if 'Maximum relative depth' was set to a lower number."
                },
                "JavaChildElementsJSON": {
                  "type": "string",
                  "title": "Java child elements JSON",
                  "description": "A list of all located child elements (and their properties), in JSON format. The properties returned are the same as those returned by the 'Get Java child element properties' action."
                }
              }
            }
          }
        },
        "operationId": "JABGetAllChildJABElementProperties"
      }
    },
    "/JavaAccessBridge/JABGetParentJABElementProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java parent element properties",
        "description": "Returns the properties of the parent element of a Java element. This action will only return the properties of the direct parent element and will not search the entire height of the element tree.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetParentJABElementProperties",
            "description": "Inputs for IA-Connect JABGetParentJABElementProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Search element JAB handle",
                  "description": "The element handle of the element which you want to return the parent element properties for. This could be located using 'Get Java element properties' or some other search which returns an element handle."
                },
                "MaxStringLength": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max string length",
                  "description": "The maximum length of the description field. This can sometimes contain a large amount of text so setting a maximum value can increase search speed. By default, there is no maximum string length so full descriptions will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element JAB handle",
                  "description": "If the search element was found, this will hold a numeric element handle which can be used in further actions to act as a 'parent' handle for further searches (i.e. to locate elements relative to this handle)."
                },
                "ElementVMID": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element VMID",
                  "description": "The ID of the Java virtual machine running the Java program."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The Java name of the located element."
                },
                "ElementDescription": {
                  "type": "string",
                  "title": "Element description",
                  "description": "The Java description of the located element (if there is one)."
                },
                "ElementRole": {
                  "type": "string",
                  "title": "Element role",
                  "description": "The Java role (e.g. frame or panel) of the located element (if there is one)."
                },
                "ElementStates": {
                  "type": "string",
                  "title": "Element states",
                  "description": "The Java element's supported states (e.g. focusable, visible) in the locale of the Agent session."
                },
                "ElementStates_en_US": {
                  "type": "string",
                  "title": "Element states en_US",
                  "description": "The Java element's supported states (e.g. focusable, visible) in the en_US locale."
                },
                "ElementLeftEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element left edge",
                  "description": "The distance in pixels between the left edge of the Java element or window and the left edge of the display."
                },
                "ElementTopEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element top edge",
                  "description": "The distance in pixels between the top edge of the Java element or window and the top edge of the display."
                },
                "ElementRightEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element right edge",
                  "description": "The distance in pixels between the right edge of the Java element or window and the left edge of the display."
                },
                "ElementBottomEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element bottom edge",
                  "description": "The distance in pixels between the bottom edge of the Java element or window and the top edge of the display."
                },
                "ElementWidth": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element width",
                  "description": "The width of the Java element in pixels."
                },
                "ElementHeight": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element height",
                  "description": "The height of the Java element in pixels."
                },
                "IsComponentElement": {
                  "type": "boolean",
                  "title": "Is component element",
                  "description": "Returns true if the Java element is a container or false if not."
                },
                "IsActionElement": {
                  "type": "boolean",
                  "title": "Is action element",
                  "description": "Returns true if the Java element is an action element or false if not."
                },
                "IsSelectionElement": {
                  "type": "boolean",
                  "title": "Is selection element",
                  "description": "Returns true if the Java element is a selection or false if not."
                },
                "IsTextElement": {
                  "type": "boolean",
                  "title": "Is text element",
                  "description": "Returns true if the Java element is a text element or false if not."
                },
                "IsEnabled": {
                  "type": "boolean",
                  "title": "Is enabled",
                  "description": "Returns true if the Java element is enabled or false if not. A disabled element is typically visible but cannot be interacted with."
                },
                "IsVisible": {
                  "type": "boolean",
                  "title": "Is visible",
                  "description": "Returns true if the Java element is visible or false if not."
                },
                "IsShowing": {
                  "type": "boolean",
                  "title": "Is showing",
                  "description": "Returns true if the Java element is showing or false if not."
                },
                "IsOpaque": {
                  "type": "boolean",
                  "title": "Is opaque",
                  "description": "Returns true if the Java element is opaque or false if not."
                },
                "IsFocusable": {
                  "type": "boolean",
                  "title": "Is focusable",
                  "description": "Returns true if the Java element be focussed by the keyboard or false if not. This may be of limited use since most elements are keyboard focusable."
                },
                "IsEditable": {
                  "type": "boolean",
                  "title": "Is editable",
                  "description": "Returns true if the Java element is editable or false if not."
                },
                "IsSingleLine": {
                  "type": "boolean",
                  "title": "Is single line",
                  "description": "Returns true if the Java element is a single line or false if not."
                },
                "IsResizable": {
                  "type": "boolean",
                  "title": "Is resizable",
                  "description": "Returns true if the Java element is resizable or false if not."
                },
                "IsModal": {
                  "type": "boolean",
                  "title": "Is modal",
                  "description": "Returns true if the Java element is modal or false if not. A modal element will block the main application window, preventing you from interacting with it."
                },
                "IsCollapsed": {
                  "type": "boolean",
                  "title": "Is collapsed",
                  "description": "Returns true if the Java element is collapsed or false if not."
                },
                "IsSelectable": {
                  "type": "boolean",
                  "title": "Is selectable",
                  "description": "Returns true if the Java element is selectable or false if not."
                },
                "IsSelected": {
                  "type": "boolean",
                  "title": "Is selected",
                  "description": "Returns true if the Java element is selected or false if not."
                },
                "IsVertical": {
                  "type": "boolean",
                  "title": "Is vertical",
                  "description": "Returns true if the Java element is vertical or false if not."
                },
                "IsHorizontal": {
                  "type": "boolean",
                  "title": "Is horizontal",
                  "description": "Returns true if the Java element is horizontal or false if not."
                },
                "IsActive": {
                  "type": "boolean",
                  "title": "Is active",
                  "description": "Returns true if the Java element is active or false if not."
                },
                "IsChecked": {
                  "type": "boolean",
                  "title": "Is checked",
                  "description": "Returns true if the Java element is checked or false if not."
                },
                "IsFocussed": {
                  "type": "boolean",
                  "title": "Is focussed",
                  "description": "Returns true if the Java element has keyboard focus. or false if not."
                },
                "IsExpanded": {
                  "type": "boolean",
                  "title": "Is expanded",
                  "description": "Returns true if the Java element is expanded or false if not."
                },
                "AdditionalStates_en_US": {
                  "type": "string",
                  "title": "Additional element states en_US",
                  "description": "Any additional states that the element supports will be listed here in the en_US locale, e.g. multiselectable, transient."
                },
                "IndexInParent": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Index in parent",
                  "description": "The element index within the current parent element."
                },
                "ChildrenCount": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element child count",
                  "description": "The number of child elements that the element has."
                },
                "ElementDepth": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element depth",
                  "description": "The depth of the element from the top-level parent window."
                }
              }
            }
          }
        },
        "operationId": "JABGetParentJABElementProperties"
      }
    },
    "/JavaAccessBridge/JABPressElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Press Java element",
        "description": "Presses a Java element (typically a button).",
        "parameters": [
          {
            "in": "body",
            "name": "JABPressElement",
            "description": "Inputs for IA-Connect JABPressElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "NumberOfTimesToPressElement": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Number of times to press element",
                  "description": "The number of times to press the element, by default this is 1.",
                  "x-ms-visibility": "advanced"
                },
                "SecondsToWaitBetweenPresses": {
                  "type": "number",
                  "format": "double",
                  "default": 0,
                  "title": "Seconds to wait between presses",
                  "description": "The number of seconds to wait between presses, by default this is 0.05 (20 milliseconds).",
                  "x-ms-visibility": "advanced"
                },
                "AutoDetectActionName": {
                  "type": "boolean",
                  "default": true,
                  "title": "Auto detect action name",
                  "description": "If set to true (the default) then IA-Connect Agent will attempt to automatically detect the 'click' action name in non-English locales. If there are more than two possible actions for the element then the 'Override action name' will be used. If set to false then IA-Connect Agent will not attempt to detect the 'click' action name in non-English locales and the action may fail unless an 'Override action name' value is provided.",
                  "x-ms-visibility": "advanced"
                },
                "OverrideActionName": {
                  "type": "string",
                  "title": "Override action name",
                  "description": "The name of the 'Click' action in non-English locales, e.g. 'cliquer' or 'hacer clic'. This can be determined from the output of the action 'Get actions for Java element' and is typically case sensitive.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABPressElement"
      }
    },
    "/JavaAccessBridge/JABPerformActionOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Perform action on Java element",
        "description": "Performs an accessible action for a Java element. These accessible actions for a specific element can be queried by using the 'Get actions for Java element' action. Some common actions are 'click' for a button or 'select-all' for a text element.",
        "parameters": [
          {
            "in": "body",
            "name": "JABPerformActionOnElement",
            "description": "Inputs for IA-Connect JABPerformActionOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "Action": {
                  "type": "string",
                  "title": "Action",
                  "description": "The action to perform, for example 'click'. The action name is often case sensitive."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Action",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABPerformActionOnElement"
      }
    },
    "/JavaAccessBridge/JABGlobalLeftMouseClickOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global left mouse click on Java element",
        "description": "Moves the mouse to the centre of a Java element and clicks the left mouse button.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGlobalLeftMouseClickOnElement",
            "description": "Inputs for IA-Connect JABGlobalLeftMouseClickOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetX": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset X",
                  "description": "The number of X pixels to offset the click action by. This parameter supports both positive (right) and negative (left) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetY": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset Y",
                  "description": "The number of Y pixels to offset the click action by. This parameter supports both positive (down) and negative (up) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "OffsetRelativeTo": {
                  "type": "string",
                  "title": "Offset relative to",
				  "enum": [ "Center", "Left", "Right", "Top", "Bottom", "Top Left", "Top Right", "Bottom Left", "Bottom Right"],
                  "description": "The relative position of the element to offset from (Center / Centre / Middle, Left, Right, Top, Bottom, Top Left, Top Right, Bottom Left, Bottom Right).",
                  "x-ms-visibility": "advanced"
                },
                "NumberOfTimesToClickElement": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Number of times to click element",
                  "description": "The number of times to click the element, by default this is 1."
                },
                "SecondsToWaitBetweenClicks": {
                  "type": "number",
                  "format": "double",
                  "default": 0,
                  "title": "Seconds to wait between clicks",
                  "description": "The number of seconds to wait between clicks, by default this is 0."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABGlobalLeftMouseClickOnElement"
      }
    },
    "/JavaAccessBridge/JABGlobalRightMouseClickOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global right mouse click on Java element",
        "description": "Moves the mouse to the centre of a Java element and clicks the right mouse button.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGlobalRightMouseClickOnElement",
            "description": "Inputs for IA-Connect JABGlobalRightMouseClickOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetX": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset X",
                  "description": "The number of X pixels to offset the click action by. This parameter supports both positive (right) and negative (left) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetY": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset Y",
                  "description": "The number of Y pixels to offset the click action by. This parameter supports both positive (down) and negative (up) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "OffsetRelativeTo": {
                  "type": "string",
                  "title": "Offset relative to",
				  "enum": [ "Center", "Left", "Right", "Top", "Bottom", "Top Left", "Top Right", "Bottom Left", "Bottom Right"],
                  "description": "The relative position of the element to offset from (Center / Centre / Middle, Left, Right, Top, Bottom, Top Left, Top Right, Bottom Left, Bottom Right).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABGlobalRightMouseClickOnElement"
      }
    },
    "/JavaAccessBridge/JABGlobalMiddleMouseClickOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global middle mouse click on Java element",
        "description": "Moves the mouse to the centre of a Java element and clicks the middle mouse button.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGlobalMiddleMouseClickOnElement",
            "description": "Inputs for IA-Connect JABGlobalMiddleMouseClickOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetX": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset X",
                  "description": "The number of X pixels to offset the click action by. This parameter supports both positive (right) and negative (left) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetY": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset Y",
                  "description": "The number of Y pixels to offset the click action by. This parameter supports both positive (down) and negative (up) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "OffsetRelativeTo": {
                  "type": "string",
                  "title": "Offset relative to",
				  "enum": [ "Center", "Left", "Right", "Top", "Bottom", "Top Left", "Top Right", "Bottom Left", "Bottom Right"],
                  "description": "The relative position of the element to offset from (Center / Centre / Middle, Left, Right, Top, Bottom, Top Left, Top Right, Bottom Left, Bottom Right).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABGlobalMiddleMouseClickOnElement"
      }
    },
    "/JavaAccessBridge/JABGlobalDoubleLeftMouseClickOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global double left mouse click on Java element",
        "description": "Moves the mouse to the centre of a Java element and double clicks the left mouse button.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGlobalDoubleLeftMouseClickOnElement",
            "description": "Inputs for IA-Connect JABGlobalDoubleLeftMouseClickOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetX": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset X",
                  "description": "The number of X pixels to offset the click action by. This parameter supports both positive (right) and negative (left) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetY": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset Y",
                  "description": "The number of Y pixels to offset the click action by. This parameter supports both positive (down) and negative (up) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "OffsetRelativeTo": {
                  "type": "string",
                  "title": "Offset relative to",
				  "enum": [ "Center", "Left", "Right", "Top", "Bottom", "Top Left", "Top Right", "Bottom Left", "Bottom Right"],
                  "description": "The relative position of the element to offset from (Center / Centre / Middle, Left, Right, Top, Bottom, Top Left, Top Right, Bottom Left, Bottom Right).",
                  "x-ms-visibility": "advanced"
                },
                "DelayInMilliseconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Delay in milliseconds",
                  "description": "The delay in milliseconds (thousandths of a second) between the first and second click. The default is 10 milliseconds."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABGlobalDoubleLeftMouseClickOnElement"
      }
    },
    "/JavaAccessBridge/JABGetActionsForElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get actions for Java element",
        "description": "Returns the accessible actions for a Java element. These accessible actions can then be performed on the element by using the action name as an input to the action 'Perform action on Java element', for example 'click' or 'select-all'.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetActionsForElement",
            "description": "Inputs for IA-Connect JABGetActionsForElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "AccessibleActions": {
                  "type": "string",
                  "title": "Accessible actions",
                  "description": "A list of all accessible actions for the search element, for example 'click'."
                }
              }
            }
          }
        },
        "operationId": "JABGetActionsForElement"
      }
    },
    "/JavaAccessBridge/JABFocusElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Focus Java element",
        "description": "Focusses a Java element which makes it the active element for keyboard focus and, depending on the application, may bring the element window to the foreground.",
        "parameters": [
          {
            "in": "body",
            "name": "JABFocusElement",
            "description": "Inputs for IA-Connect JABFocusElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABFocusElement"
      }
    },
    "/JavaAccessBridge/JABInputPasswordIntoElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Input password into Java element",
        "description": "Inputs a password into a Java element (typically a password entry field), replacing the existing text.",
        "parameters": [
          {
            "in": "body",
            "name": "JABInputPasswordIntoElement",
            "description": "Inputs for IA-Connect JABInputPasswordIntoElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "PasswordToInput": {
                  "type": "string",
                  "format": "password",
                  "title": "Password to input",
                  "description": "The password value to input."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "PasswordToInput",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABInputPasswordIntoElement"
      }
    },
    "/JavaAccessBridge/JABInputTextIntoElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Input text into Java element",
        "description": "Inputs text into a Java element (typically a text entry field), either replacing the existing text or inserting the new value at a specific position.",
        "parameters": [
          {
            "in": "body",
            "name": "JABInputTextIntoElement",
            "description": "Inputs for IA-Connect JABInputTextIntoElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "TextToInput": {
                  "type": "string",
                  "title": "Text to input",
                  "description": "The text value to input."
                },
                "ReplaceExistingValue": {
                  "type": "boolean",
                  "default": true,
                  "title": "Replace existing value",
                  "description": "If there is existing text in the element, should this be replaced?",
                  "x-ms-visibility": "advanced"
                },
                "InsertPosition": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Insert position",
                  "description": "The position (index) to begin inserting text. If there is existing text, the insert position can be used to insert at a specific position within the existing text.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "TextToInput",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABInputTextIntoElement"
      }
    },
    "/JavaAccessBridge/JABGetElementTextValue": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java element text value",
        "description": "Returns the text value of a Java element. A text value is usually associated with a text element, but many elements can have this property.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetElementTextValue",
            "description": "Inputs for IA-Connect JABGetElementTextValue action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementTextValue": {
                  "type": "string",
                  "title": "Element text value",
                  "description": "The text value of the element."
                }
              }
            }
          }
        },
        "operationId": "JABGetElementTextValue"
      }
    },
    "/JavaAccessBridge/JABGetElementValue": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java element value",
        "description": "Returns the value of an element. A value is usually associated with a text input area, but many elements can have this property.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetElementValue",
            "description": "Inputs for IA-Connect JABGetElementValue action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementCurrentValue": {
                  "type": "string",
                  "title": "Element current value",
                  "description": "The current value of the element."
                },
                "ElementMaximumValue": {
                  "type": "string",
                  "title": "Element maximum value",
                  "description": "The maximum value of the element, if specified."
                },
                "ElementMinimumValue": {
                  "type": "string",
                  "title": "Element minimum value",
                  "description": "The minimum value of the element, if specified."
                }
              }
            }
          }
        },
        "operationId": "JABGetElementValue"
      }
    },
    "/JavaAccessBridge/JABCheckElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check Java element",
        "description": "Sets the state of an element (typically a checkbox or radio box) to either checked or unchecked.",
        "parameters": [
          {
            "in": "body",
            "name": "JABCheckElement",
            "description": "Inputs for IA-Connect JABCheckElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "CheckElement": {
                  "type": "boolean",
                  "default": true,
                  "title": "Check element",
                  "description": "Should the element be checked (true) or unchecked (false)?"
                },
                "AutoDetectActionName": {
                  "type": "boolean",
                  "default": true,
                  "title": "Auto detect action name",
                  "description": "If set to true (the default) then IA-Connect Agent will attempt to automatically detect the 'click' action name in non-English locales. If there are more than two possible actions for the element then the 'Override action name' will be used. If set to false then IA-Connect Agent will not attempt to detect the 'click' action name in non-English locales and the action may fail unless an 'Override action name' value is provided.",
                  "x-ms-visibility": "advanced"
                },
                "OverrideActionName": {
                  "type": "string",
                  "title": "Override action name",
                  "description": "The name of the 'Click' action in non-English locales, e.g. 'cliquer' or 'hacer clic'. This can be determined from the output of the action 'Get actions for Java element' and is typically case sensitive.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABCheckElement"
      }
    },
    "/JavaAccessBridge/JABGetElementPropertiesAsList": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java element properties as list",
        "description": "Returns the properties of a Java element as a single line list (single line collection / data table) instead of individual items, this maybe useful depending on how you intend to use the data.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetElementPropertiesAsList",
            "description": "Inputs for IA-Connect JABGetElementPropertiesAsList action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaxStringLength": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max string length",
                  "description": "The maximum length of the description field. This can sometimes contain a large amount of text so setting a maximum value can increase search speed. By default, there is no maximum string length so full descriptions will be returned."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfElementsFound": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of elements found",
                  "description": "The number of elements found which met the search criteria."
                },
                "NumberOfElementsReturned": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of elements returned",
                  "description": "The number of elements returned from the search. This could be lower than the number of elements found if 'Maximum elements to search' or 'Maximum child elements to search per node' was set to a lower number."
                },
                "JABElementPropertiesJSON": {
                  "type": "string",
                  "title": "Java element properties JSON",
                  "description": "The element properties of the Java elements found that match the search criteria, in JSON format."
                }
              }
            }
          }
        },
        "operationId": "JABGetElementPropertiesAsList"
      }
    },
    "/JavaAccessBridge/JABGlobalInputPasswordIntoElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global input password into Java element",
        "description": "Moves the mouse to centre of the Java element, focusses it, left clicks, and presses keys. Typically used with a password input that will not accept native UIA input methods.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGlobalInputPasswordIntoElement",
            "description": "Inputs for IA-Connect JABGlobalInputPasswordIntoElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "FocusElement": {
                  "type": "boolean",
                  "default": true,
                  "title": "Focus element first",
                  "description": "Should IA-Connect attempt to focus the element before global clicking?"
                },
                "GlobalMouseClickOnElement": {
                  "type": "boolean",
                  "default": true,
                  "title": "Global left mouse click on element",
                  "description": "Should a global mouse click be performed at the element coordinates (to focus the element) before entering text?"
                },
                "ReplaceExistingValueUsingDoubleClickDelete": {
                  "type": "boolean",
                  "default": false,
                  "title": "Replace existing value using double mouse click delete",
                  "description": "Should any existing value be replaced by double clicking the mouse (to highlight it) and then deleting?",
                  "x-ms-visibility": "advanced"
                },
                "ReplaceExistingValueUsingCTRLADelete": {
                  "type": "boolean",
                  "default": false,
                  "title": "Replace existing value using CTRL-A delete",
                  "description": "Should any existing value be replaced by pressing Ctrl-A (to highlight all) and then deleting? Some elements may not support highlighting with Ctrl-A in which case the alternative option of 'Replace existing value using double mouse click delete' should be tried.",
                  "x-ms-visibility": "advanced"
                },
                "PasswordToInput": {
                  "type": "string",
                  "format": "password",
                  "title": "Password to input",
                  "description": "The password value to global input."
                },
                "SendKeyEvents": {
                  "type": "boolean",
                  "default": false,
                  "title": "Use send key events",
                  "description": "If set to true then send key events (a lower level API which sends simulated keystrokes to the operating system) will be used. If set to false then send keys (a higher level API which sends keystrokes to the focused element) will be used instead.",
                  "x-ms-visibility": "advanced"
                },
                "KeyIntervalInMilliseconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Key interval in milliseconds",
                  "description": "The number of milliseconds between each key press.",
                  "x-ms-visibility": "advanced"
                },
                "DoubleClickIntervalInMilliseconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Double click interval in milliseconds",
                  "description": "The number of milliseconds between each click if the parameter 'Replace existing value using double mouse click delete' is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "DontInterpretSymbols": {
                  "type": "boolean",
                  "default": false,
                  "title": "Dont interpret symbols",
                  "description": "Should symbols in the 'Password to input' not be interpreted as special keys (e.g. + for Shift, ^ for Ctrl)? This should be set to true if you are attempting to input the actual symbols.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "PasswordToInput",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABGlobalInputPasswordIntoElement"
      }
    },
    "/JavaAccessBridge/JABGlobalInputTextIntoElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global input text into Java element",
        "description": "Moves the mouse to centre of the Java element, focusses it, left clicks, and presses keys. Typically used with a text input that will not accept native UIA input methods.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGlobalInputTextIntoElement",
            "description": "Inputs for IA-Connect JABGlobalInputTextIntoElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "FocusElement": {
                  "type": "boolean",
                  "default": true,
                  "title": "Focus element first",
                  "description": "Should IA-Connect attempt to focus the element before global clicking?"
                },
                "GlobalMouseClickOnElement": {
                  "type": "boolean",
                  "default": true,
                  "title": "Global left mouse click on element",
                  "description": "Should a global mouse click be performed at the element coordinates (to focus the element) before entering text?"
                },
                "ReplaceExistingValueUsingDoubleClickDelete": {
                  "type": "boolean",
                  "default": false,
                  "title": "Replace existing value using double mouse click delete",
                  "description": "Should any existing value be replaced by double clicking the mouse (to highlight it) and then deleting?",
                  "x-ms-visibility": "advanced"
                },
                "ReplaceExistingValueUsingCTRLADelete": {
                  "type": "boolean",
                  "default": false,
                  "title": "Replace existing value using CTRL-A delete",
                  "description": "Should any existing value be replaced by pressing Ctrl-A (to highlight all) and then deleting? Some elements may not support highlighting with Ctrl-A in which case the alternative option of 'Replace existing value using double mouse click delete' should be tried.",
                  "x-ms-visibility": "advanced"
                },
                "TextToInput": {
                  "type": "string",
                  "title": "Text to input",
                  "description": "The text value to global input."
                },
                "SendKeyEvents": {
                  "type": "boolean",
                  "default": false,
                  "title": "Use send key events",
                  "description": "If set to true then send key events (a lower level API which sends simulated keystrokes to the operating system) will be used. If set to false then send keys (a higher level API which sends keystrokes to the focused element) will be used instead.",
                  "x-ms-visibility": "advanced"
                },
                "KeyIntervalInMilliseconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Key interval in milliseconds",
                  "description": "The number of milliseconds between each key press.",
                  "x-ms-visibility": "advanced"
                },
                "DoubleClickIntervalInMilliseconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Double click interval in milliseconds",
                  "description": "The number of milliseconds between each click if the parameter 'Replace existing value using double mouse click delete' is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "DontInterpretSymbols": {
                  "type": "boolean",
                  "default": false,
                  "title": "Dont interpret symbols",
                  "description": "Should symbols in the 'Text to input' not be interpreted as special keys (e.g. + for Shift, ^ for Ctrl)? This should be set to true if you are attempting to input the actual symbols.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "TextToInput",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABGlobalInputTextIntoElement"
      }
    },
    "/JavaAccessBridge/JABGetSelectionElementItems": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java selection element items",
        "description": "Returns all child selection element items found under the specified Java selection element. You can choose to retrieve the selection element options either by looping through the selection, selecting each individual option in the list OR by reading the labels of the child elements of the selection. If you choose to retrieve the selection element options by reading the labels of the child elements of the selection, you will likely need to expand the selection first by providing the 'Expand first' parameter as 'True' and you can then optionally close the selection afterwards by also providing the 'Collapse after' parameter as 'True'.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetSelectionElementItems",
            "description": "Inputs for IA-Connect JABGetSelectionElementItems action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "GetListOfOptionsBySelecting": {
                  "type": "boolean",
                  "default": false,
                  "title": "Get list of options by selecting",
                  "description": "If set to 'True' then the IA-Connect Agent will attempt to obtain a list of all options in the selection by selecting each one in turn (in JAB). If set to 'False' (the default) then the 'Get list of options by reading labels' parameter should be set to 'True' otherwise the list of options will not be read."
                },
                "GetListOfOptionsByReadingLabels": {
                  "type": "boolean",
                  "default": false,
                  "title": "Get list of options by reading labels",
                  "description": "If set to 'True' then the IA-Connect Agent will attempt to obtain a list of all options in the selection by reading the child labels (in the JAB tree). For drop-down lists you will almost certainly need to set the 'Expand first' parameter to 'True' because the child elements aren't exposed until the list drops down. Also set the 'Collapse after' parameter to 'True' to close the list afterwards. The 'Get list of options by selecting' parameter should also be set to 'False' or this option will be ignored (as you can't get the list via both methods). If set to 'False' (the default) then the 'Get list of options by selecting' parameter should be set to 'True' otherwise the list of options will not be read."
                },
                "ExpandFirst": {
                  "type": "boolean",
                  "default": false,
                  "title": "Expand first",
                  "description": "If set to 'true' then the action will attempt to expand the list before searching for the list item elements. This is useful for dynamic lists as the other list item elements may not be created until the list is expanded. If set to false (the default) then the list will not be expanded."
                },
                "CollapseAfter": {
                  "type": "boolean",
                  "default": false,
                  "title": "Collapse after",
                  "description": "If set to true then the list will be collapsed after executing the search. If set to false (the default) then the list will not be collapsed."
                },
                "SecondsBetweenExpandCollapse": {
                  "type": "number",
                  "format": "double",
                  "default": 0.05,
                  "title": "Seconds between expand and collapse",
                  "description": "The number of seconds to wait between the expand and collapse actions, if these are set to 'True'. By default, this is 0.05 (20 milliseconds)."
                },
                "MaxListItemsToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 100,
                  "title": "Max list items to return",
                  "description": "The maximum number of list items to return, by default this is 100.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfSelectedItems": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of selected items",
                  "description": "The number of child list items found under the parent selection element that are currently selected."
                },
                "AccessibleSelection1Name": {
                  "type": "string",
                  "title": "Selection 1 name",
                  "description": "The name of the first selected child list item."
                },
                "AccessibleSelection1IndexInParent": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Selection 1 index in list",
                  "description": "The index in the list of the first selected child list item."
                },
                "JABSelectionSelectedItemsJSON": {
                  "type": "string",
                  "title": "Selected items JSON",
                  "description": "The selected child list items of the parent selection element, in JSON format."
                },
                "JABSelectionListItemsJSON": {
                  "type": "string",
                  "title": "Selection list items JSON",
                  "description": "All child list items of the parent selection element, in JSON format."
                }
              }
            }
          }
        },
        "operationId": "JABGetSelectionElementItems"
      }
    },
    "/JavaAccessBridge/JABSetSelectionByIndex": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Select Java list element by index",
        "description": "Selects the list element that matches the specified index. This is typically used to select an item in a dropdown / menu item.",
        "parameters": [
          {
            "in": "body",
            "name": "JABSetSelectionByIndex",
            "description": "Inputs for IA-Connect JABSetSelectionByIndex action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "ItemIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Item index",
                  "description": "The index (starting at 1) of the list item to select or deselect."
                },
                "SelectItem": {
                  "type": "boolean",
                  "default": true,
                  "title": "Select item",
                  "description": "If set to 'True' (the default) then the item will be selected. If set to 'False' then the item will be deselected. This is typically only used with a multi-select."
                },
                "ClearSelectionFirst": {
                  "type": "boolean",
                  "default": true,
                  "title": "Clear selection first",
                  "description": "If set to 'True' (the default) then the selection will be cleared first. This is mainly used for multi-selects because you need to choose if you are selecting additional items or selecting only a single item (by clearing first). If set to 'False' then the selection will not be cleared first.",
                  "x-ms-visibility": "advanced"
                },
                "RecoverOnFailure": {
                  "type": "boolean",
                  "default": true,
                  "title": "Recover on failure",
                  "description": "If set to 'True' then the originally selected list items will be recovered if the new selection fails. For example, if item 3 was selected and you try selecting item 90 (which doesn't exist) then item 3 will be re-selected. If set to 'False' then the originally selected list items will not be recovered.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "ItemIndex",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABSetSelectionByIndex"
      }
    },
    "/JavaAccessBridge/JABSetSelectionByName": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Select Java list element by name",
        "description": "Selects the list element with the specified name. This is typically used to select an item in a dropdown / menu item.",
        "parameters": [
          {
            "in": "body",
            "name": "JABSetSelectionByName",
            "description": "Inputs for IA-Connect JABSetSelectionByName action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "ItemName": {
                  "type": "string",
                  "title": "Item name",
                  "description": "The name of the list item to select or deselect."
                },
                "SelectItem": {
                  "type": "boolean",
                  "default": true,
                  "title": "Select item",
                  "description": "If set to 'True' (the default) then the item will be selected. If set to 'False' then the item will be deselected. This is typically only used with a multi-select."
                },
                "ItemNameCaseSensitive": {
                  "type": "boolean",
                  "default": false,
                  "title": "Item name case sensitive",
                  "description": "If set to 'True' then the item name search will be case sensitive (e.g. it must match exactly to the list item). If set to 'False' (the default) then the item name search will not be case sensitive.",
                  "x-ms-visibility": "advanced"
                },
                "ClearSelectionFirst": {
                  "type": "boolean",
                  "default": true,
                  "title": "Clear selection first",
                  "description": "If set to 'True' (the default) then the selection will be cleared first. This is mainly used for multi-selects because you need to choose if you are selecting additional items or selecting only a single item (by clearing first). If set to 'False' then the selection will not be cleared first.",
                  "x-ms-visibility": "advanced"
                },
                "GetListOfOptionsBySelecting": {
                  "type": "boolean",
                  "default": false,
                  "title": "Get list of options by selecting",
                  "description": "If set to 'True' then the IA-Connect Agent will attempt to obtain a list of all options in the selection by selecting each one in turn (in JAB). If set to 'False' (the default) then the 'Get list of options by reading labels' parameter should be set to 'True' otherwise the list of options will not be read.",
                  "x-ms-visibility": "advanced"
                },
                "GetListOfOptionsByReadingLabels": {
                  "type": "boolean",
                  "default": true,
                  "title": "Get list of options by reading labels",
                  "description": "If set to 'True' (the default) then the IA-Connect Agent will attempt to obtain a list of all options in the selection by reading the child labels (in the JAB tree). For drop-down lists you will almost certainly need to set the 'Expand first' parameter to 'True' because the child elements aren't exposed until the list drops down. Also set the 'Collapse after' parameter to 'True' to close the list afterwards. The 'Get list of options by selecting' parameter should also be set to 'False' or this option will be ignored (as you can't get the list via both methods). If set to 'False' then the 'Get list of options by selecting' parameter should be set to 'True' otherwise the list of options will not be read.",
                  "x-ms-visibility": "advanced"
                },
                "ExpandFirst": {
                  "type": "boolean",
                  "default": true,
                  "title": "Expand first",
                  "description": "If set to 'true' (the default) then the action will attempt to expand the list before searching for the list item elements. This is useful for dynamic lists as the other list item elements may not be created until the list is expanded. If set to 'false' then the list will not be expanded.",
                  "x-ms-visibility": "advanced"
                },
                "CollapseAfter": {
                  "type": "boolean",
                  "default": true,
                  "title": "Collapse after",
                  "description": "If set to true (the default) then the list will be collapsed after executing the search. If set to false then the list will not be collapsed.",
                  "x-ms-visibility": "advanced"
                },
                "SecondsBetweenExpandCollapse": {
                  "type": "number",
                  "format": "double",
                  "default": 0.05,
                  "title": "Seconds between expand and collapse",
                  "description": "The number of seconds to wait between the expand and collapse actions, if these are set to 'True'. By default, this is 0.05 (20 milliseconds).",
                  "x-ms-visibility": "advanced"
                },
                "ForceEvenIfInCorrectState": {
                  "type": "boolean",
                  "default": false,
                  "title": "Force even if in correct state",
                  "description": "If set to 'True' then the element will be selected even if it is already selected. If set to 'False' (the default) then the IA-Connect Agent will do nothing if the list element is already selected.",
                  "x-ms-visibility": "advanced"
                },
                "RecoverOnFailure": {
                  "type": "boolean",
                  "default": true,
                  "title": "Recover on failure",
                  "description": "If set to 'True' then the originally selected list items will be recovered if the new selection fails. For example, if item 3 was selected and you try selecting item 90 (which doesn't exist) then item 3 will be re-selected. If set to 'False' then the originally selected list items will not be recovered.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "ItemName",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABSetSelectionByName"
      }
    },
    "/JavaAccessBridge/JABExpandSelection": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Expand Java selection element",
        "description": "Expands or collapses a Java element (typically a menu / dropdown item). If the item is already expanded, nothing will happen.",
        "parameters": [
          {
            "in": "body",
            "name": "JABExpandSelection",
            "description": "Inputs for IA-Connect JABExpandSelection action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "Expand": {
                  "type": "boolean",
                  "default": true,
                  "title": "Expand",
                  "description": "If set to 'True' (the default) then the element will be expanded. If set to 'False' then the element will be collapsed."
                },
                "VerifyElementState": {
                  "type": "boolean",
                  "default": false,
                  "title": "Verify element state",
                  "description": "If set to 'True' then the IA-Connect Agent will validate the element state afterwards to check that the 'Expanded' state matches the expected state and raises an exception if this does not match. For example, if expanding an element then the 'IsExpanded' property should be true. If set to 'False' then the element state is not validated.",
                  "x-ms-visibility": "advanced"
                },
                "SecondsToWaitForStateChange": {
                  "type": "number",
                  "format": "double",
                  "default": 0.05,
                  "title": "Seconds to wait for state change",
                  "description": "The number of seconds to wait for the state change after expanding or collapsing. By default, this is set to 0.05 (20 milliseconds).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABExpandSelection"
      }
    },
    "/JavaAccessBridge/JABGetSelectionStateByIndex": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java selection state by index",
        "description": "Returns the selection state of a child element in a selection (typically an item in a list or drop-down) by providing the child element index. You can retrieve all selection child element items to check their index by using the action 'Get Java selection element items'.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetSelectionStateByIndex",
            "description": "Inputs for IA-Connect JABGetSelectionStateByIndex action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "ItemIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Item index",
                  "description": "The index (starting at 1) of the list item state to query."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "ItemIndex",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "IndexIsSelected": {
                  "type": "boolean",
                  "title": "Index is selected",
                  "description": "Returns true if the selection list item at the index specified is selected or false if not."
                }
              }
            }
          }
        },
        "operationId": "JABGetSelectionStateByIndex"
      }
    },
    "/JavaAccessBridge/JABGetSelectionStateByName": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java selection state by name",
        "description": "Returns the selection state of a child element in a selection (typically an item in a list or drop-down) by providing the child element name. You can retrieve all selection child element items to check their name by using the action 'Get Java selection element items'.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetSelectionStateByName",
            "description": "Inputs for IA-Connect JABGetSelectionStateByName action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "ItemName": {
                  "type": "string",
                  "title": "Item name",
                  "description": "The name of the list item to select or deselect."
                },
                "ItemNameCaseSensitive": {
                  "type": "boolean",
                  "default": false,
                  "title": "Item name case sensitive",
                  "description": "If set to 'True' then the item name search will be case sensitive (e.g. it must match exactly to the list item). If set to 'False' (the default) then the item name search will not be case sensitive.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "ItemName",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NameIsSelected": {
                  "type": "boolean",
                  "title": "Name is selected",
                  "description": "Returns true if the named selection list item is selected or false if not."
                }
              }
            }
          }
        },
        "operationId": "JABGetSelectionStateByName"
      }
    },
    "/JavaAccessBridge/JABGetTableProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java table properties",
        "description": "Returns the properties of a Java table element. This is an element with rows, columns, a header and cells (i.e. a table). You can optionally specify whether to determine which components of the table are currently visible on screen by enumerating the viewport.  The viewport element typically contains the table (e.g. it is a parent element of the table) and represents the visible area of the table.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetTableProperties",
            "description": "Inputs for IA-Connect JABGetTableProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "EnumerateViewport": {
                  "type": "boolean",
                  "default": true,
                  "title": "Enumerate viewport",
                  "description": "The viewport element typically contains the table and represents the visible area of the table. If set to 'True' (the default) then IA-Connect Agent will attempt to detect the table visible bounds and the index of the cells at each corner by calculating the size of the viewport. This allows you to determine which components of the table are currently visible on screen. If set to 'False' then the viewport coordinates will not be populated.",
                  "x-ms-visibility": "advanced"
                },
                "ProcessViewportParents": {
                  "type": "boolean",
                  "default": true,
                  "title": "Process viewport parents",
                  "description": "If set to 'True' (the default) then the parent elements of the viewport will also be processed to help refine the visible size of the viewport. This is useful if it is embedded in another viewport. If set to 'False' then viewport parent elements will not be processed.",
                  "x-ms-visibility": "advanced"
                },
                "MaxViewportParentsToProcess": {
                  "type": "integer",
                  "format": "int32",
                  "default": 50,
                  "title": "Max viewport parents to process",
                  "description": "The maximum number of parent elements to process when enumerating the viewport. By default, this is set to 50.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportParentElementRolesToConsider": {
                  "type": "string",
                  "default": "Panel,Viewport,Layered pane,Root pane",
                  "title": "Viewport parent element roles to consider",
                  "description": "The roles of the viewport parent element to consider when enumerating to calculate the viewport size. This is used to exclude parent elements that are smaller in size than the viewport which can skew the size calculation, for example page tabs. By default, these are: Panel, Viewport, Layered pane, Root pane.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportLeftMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport left margin",
                  "description": "A left inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportTopMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport top margin",
                  "description": "A top inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportRightMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport right margin",
                  "description": "A right inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportBottomMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport bottom margin",
                  "description": "A bottom inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfRows": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of rows",
                  "description": "The number of rows in the table."
                },
                "NumberOfColumns": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of columns",
                  "description": "The number of columns in the table."
                },
                "NumberOfSelectedRows": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of selected rows",
                  "description": "The number of rows that are currently selected."
                },
                "NumberOfSelectedColumns": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of selected columns",
                  "description": "The number of columns that are currently selected."
                },
                "NumberOfRowsInRowHeader": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of rows in row header",
                  "description": "The number of rows in the row header. This is commonly 0 as tables rarely have row headers."
                },
                "NumberOfColumnsInColumnHeader": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of columns in column header",
                  "description": "The number of columns in the column header."
                },
                "ViewportLocated": {
                  "type": "boolean",
                  "title": "Viewport located",
                  "description": "Returns true if the viewport has been located, or false if not. If this is 'True', the viewport coordinates will be returned."
                },
                "ViewportLeftEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Viewport left edge",
                  "description": "The distance in pixels between the left edge of the viewport element and the left edge of the display."
                },
                "ViewportTopEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Viewport top edge",
                  "description": "The distance in pixels between the top edge of the viewport element and the top edge of the display."
                },
                "ViewportWidth": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Viewport width",
                  "description": "The width of the viewport element in pixels."
                },
                "ViewportHeight": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Viewport height",
                  "description": "The height of the viewport element in pixels."
                },
                "ViewportRightEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Viewport right edge",
                  "description": "The distance in pixels between the right edge of the viewport element and the left edge of the display."
                },
                "ViewportBottomEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Viewport bottom edge",
                  "description": "The distance in pixels between the bottom edge of the viewport element and the top edge of the display."
                },
                "TopLeftVisibleCellIndexInParent": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Top left visible cell index in parent",
                  "description": "The cell index of the top left visible cell in the table. The first cell in the first row will have an index of 1, increasing by 1 for each cell in the row. Therefore, in a table with 5 rows and 3 columns, the first cell in the second row will have an index of 4."
                },
                "TopLeftVisibleCellRowIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Top left visible row index",
                  "description": "The row index of the top left visible cell in the table."
                },
                "TopLeftVisibleCellColumnIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Top left visible column index",
                  "description": "The column index of the top left visible cell in the table."
                },
                "TopRightVisibleCellIndexInParent": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Top right visible cell index in parent",
                  "description": "The cell index of the top right visible cell in the table. The first cell in the first row will have an index of 1, increasing by 1 for each cell in the row. Therefore, in a table with 5 rows and 3 columns, the first cell in the second row will have an index of 4."
                },
                "TopRightVisibleCellRowIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Top right visible row index",
                  "description": "The row index of the top right visible cell in the table."
                },
                "TopRightVisibleCellColumnIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Top right visible column index",
                  "description": "The column index of the top right visible cell in the table."
                },
                "BottomLeftVisibleCellIndexInParent": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Bottom left visible cell index in parent",
                  "description": "The cell index of the bottom left visible cell in the table. The first cell in the first row will have an index of 1, increasing by 1 for each cell in the row. Therefore, in a table with 5 rows and 3 columns, the first cell in the second row will have an index of 4."
                },
                "BottomLeftVisibleCellRowIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Bottom left visible row index",
                  "description": "The row index of the bottom left visible cell in the table."
                },
                "BottomLeftVisibleCellColumnIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Bottom left visible column index",
                  "description": "The column index of the bottom left visible cell in the table."
                },
                "BottomRightVisibleCellIndexInParent": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Bottom right visible cell index in parent",
                  "description": "The cell index of the bottom right visible cell in the table. The first cell in the first row will have an index of 1, increasing by 1 for each cell in the row. Therefore, in a table with 5 rows and 3 columns, the first cell in the second row will have an index of 4."
                },
                "BottomRightVisibleCellRowIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Bottom right visible row index",
                  "description": "The row index of the bottom right visible cell in the table."
                },
                "BottomRightVisibleCellColumnIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Bottom right visible column index",
                  "description": "The column index of the bottom right visible cell in the table."
                },
                "LeftmostVisibleColumnIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Leftmost visible column index",
                  "description": "The column index of the leftmost visible column."
                },
                "RightmostVisibleColumnIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Rightmost visible column index",
                  "description": "The column index of the rightmost visible column."
                },
                "TopmostVisibleRowIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Topmost visible row index",
                  "description": "The row index of the topmost visible row."
                },
                "BottommostVisibleRowIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Bottommost visible row index",
                  "description": "The row index of the bottommost visible row."
                }
              }
            }
          }
        },
        "operationId": "JABGetTableProperties"
      }
    },
    "/JavaAccessBridge/JABGetTableCellProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java table cell properties",
        "description": "Returns the properties and contents of a specified cell within a Java table element. This is an element with rows, columns, a header and cells (i.e. a table). You can optionally specify whether to determine which if the cell is currently visible on screen and it's coordinates by enumerating the viewport.  The viewport element typically contains the table (e.g. it is a parent element of the table) and represents the visible area of the table.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetTableCellProperties",
            "description": "Inputs for IA-Connect JABGetTableCellProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "RowIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Cell row index",
                  "description": "The row index of the cell in the table, starting at 1."
                },
                "ColumnIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Cell column index",
                  "description": "The column index of the cell in the table, starting at 1."
                },
                "ReturnJABHandle": {
                  "type": "boolean",
                  "default": false,
                  "title": "Return handle",
                  "description": "If set to true then an element handle will be returned for the cell."
                },
                "EnumerateViewport": {
                  "type": "boolean",
                  "default": true,
                  "title": "Enumerate viewport",
                  "description": "The viewport element typically contains the table and represents the visible area of the table. If set to 'True' (the default) then IA-Connect Agent will attempt to detect the table visible bounds and the index of the cells at each corner by calculating the size of the viewport. This allows you to determine which components of the table are currently visible on screen. If set to 'False' then the viewport coordinates will not be populated.",
                  "x-ms-visibility": "advanced"
                },
                "ProcessViewportParents": {
                  "type": "boolean",
                  "default": true,
                  "title": "Process viewport parents",
                  "description": "If set to 'True' (the default) then the parent elements of the viewport will also be processed to help refine the visible size of the viewport. This is useful if it is embedded in another viewport. If set to 'False' then viewport parent elements will not be processed.",
                  "x-ms-visibility": "advanced"
                },
                "MaxViewportParentsToProcess": {
                  "type": "integer",
                  "format": "int32",
                  "default": 50,
                  "title": "Max viewport parents to process",
                  "description": "The maximum number of parent elements to process when enumerating the viewport. By default, this is set to 50.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportParentElementRolesToConsider": {
                  "type": "string",
                  "default": "Panel,Viewport,Layered pane,Root pane",
                  "title": "Viewport parent element roles to consider",
                  "description": "The roles of the viewport parent element to consider when enumerating to calculate the viewport size. This is used to exclude parent elements that are smaller in size than the viewport which can skew the size calculation, for example page tabs. By default, these are: Panel, Viewport, Layered pane, Root pane.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportLeftMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport left margin",
                  "description": "A left inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportTopMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport top margin",
                  "description": "A top inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportRightMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport right margin",
                  "description": "A right inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportBottomMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport bottom margin",
                  "description": "A bottom inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "RowIndex",
                "ColumnIndex",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "CellIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell index",
                  "description": "The cell index in the table. The first cell in the first row will have an index of 1, increasing by 1 for each cell in the row. Therefore, in a table with 5 rows and 3 columns, the first cell in the second row will have an index of 4."
                },
                "RowExtent": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell row extent",
                  "description": "The number of rows that the cell spans. This will commonly be 1 unless the cell is merged across multiple rows."
                },
                "ColumnExtent": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell column extent",
                  "description": "The number of columns that the cell spans. This will commonly be 1 unless the cell is merged across multiple columns."
                },
                "IsSelected": {
                  "type": "boolean",
                  "title": "Cell is selected",
                  "description": "Returns true the cell is currently selected or false if not."
                },
                "CellContents": {
                  "type": "string",
                  "title": "Cell contents",
                  "description": "The contents of the cell."
                },
                "CellLeftEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell left edge",
                  "description": "The distance in pixels between the left edge of the cell element and the left edge of the display."
                },
                "CellTopEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell top edge",
                  "description": "The distance in pixels between the top edge of the cell element and the top edge of the display."
                },
                "CellRightEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell right edge",
                  "description": "The distance in pixels between the right edge of the cell element and the left edge of the display."
                },
                "CellBottomEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell bottom edge",
                  "description": "The distance in pixels between the bottom edge of the cell element and the top edge of the display."
                },
                "CellWidth": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell width",
                  "description": "The width of the cell element in pixels."
                },
                "CellHeight": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell height",
                  "description": "The height of the cell element in pixels."
                },
                "CellOnscreen": {
                  "type": "boolean",
                  "title": "Cell is visible onscreen",
                  "description": "Returns true if the cell is visible onscreen, or false if not."
                },
                "CellVisibleResultIsCertain": {
                  "type": "boolean",
                  "title": "Visible result is certain",
                  "description": "Returns true if the 'Cell is visible onscreen' result is certain. This will be set to 'False' if any one of the 4 parent table bounds could not be calculated."
                },
                "CellJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell JAB handle",
                  "description": "The element handle to the table cell."
                }
              }
            }
          }
        },
        "operationId": "JABGetTableCellProperties"
      }
    },
    "/JavaAccessBridge/JABGetTableContents": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java table contents",
        "description": "Returns the contents of a Java table element. This is an element with rows, columns, a header and cells (i.e. a table).",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetTableContents",
            "description": "Inputs for IA-Connect JABGetTableContents action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "FirstRowToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "First row to return",
                  "description": "The index of the first row to return. By default, this is set to 1.",
                  "x-ms-visibility": "advanced"
                },
                "MaxRowsToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max rows to return",
                  "description": "The maximum number of rows to return. By default, all rows are returned.",
                  "x-ms-visibility": "advanced"
                },
                "FirstColumnToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "First column to return",
                  "description": "The index of the first column to return. By default, this is set to 1.",
                  "x-ms-visibility": "advanced"
                },
                "MaxColumnsToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max columns to return",
                  "description": "The maximum number of columns to return. By default, all columns are returned.",
                  "x-ms-visibility": "advanced"
                },
                "UseColumnHeadersFromTable": {
                  "type": "boolean",
                  "default": false,
                  "title": "Use column headers from table",
                  "description": "If set to 'True' then the IA-Connect Agent will attempt to return the output collection columns to match the column names in the Java table. If set to 'False' (the default) then the column headers will be called 'Column_N' in the collection (since collections cannot have blank names)."
                },
                "ReturnRowIndexInOutputCollection": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return row index in output collection",
                  "description": "If set to 'True' (the default) then the IA-Connect Agent will return the row index in the output collection as an additional column. By default, the row index column will be called '_Row_index_' however this can be changed by passing a column name in the 'Name of column to store row index' parameter. This is useful if you plan to filter the output collection and keep track of which row the filtered result relates to. If set to 'False' then no row index column will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "NameOfColumnToStoreRowIndex": {
                  "type": "string",
                  "title": "Name of column to store row index",
                  "description": "If 'Return row index in output collection' is set to 'True' then you can override the default column name of '_Row_Index' by providing a value here.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfRowsInTable": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of rows in table",
                  "description": "The number of rows in the table."
                },
                "NumberOfColumnsInTable": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of columns in table",
                  "description": "The number of columns in the table."
                },
                "NumberOfSelectedRows": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of selected rows",
                  "description": "The number of rows that are currently selected."
                },
                "NumberOfSelectedColumns": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of selected columns",
                  "description": "The number of columns that are currently selected."
                },
                "NumberOfRowsReturned": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of rows returned",
                  "description": "The number of rows returned, which could be lower than the number of rows found if 'Max rows to return' was set to a lower number."
                },
                "NumberOfColumnsReturned": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of columns returned",
                  "description": "The number of columns returned, which could be lower than the number of columns found if 'Max columns to return' was set to a lower number."
                },
                "TableContentsJSON": {
                  "type": "string",
                  "title": "Table contents JSON",
                  "description": "The contents of the table element, in JSON format. The column names of this collection will match the column names of the table element if the 'Use column headers from table' was set to true. If the column name is blank, it will be called 'Column_N' in the collection (since collections cannot have blank names). If the column name is a duplicate, it will have '_N' appended to the name (since collections cannot have duplicate column names)."
                }
              }
            }
          }
        },
        "operationId": "JABGetTableContents"
      }
    },
    "/JavaAccessBridge/JABIsTableCellVisibleOnscreen": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Is Java table cell visible onscreen",
        "description": "Returns whether a specific table cell within a Java table element is currently visible onscreen.",
        "parameters": [
          {
            "in": "body",
            "name": "JABIsTableCellVisibleOnscreen",
            "description": "Inputs for IA-Connect JABIsTableCellVisibleOnscreen action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "ProcessViewportParents": {
                  "type": "boolean",
                  "default": true,
                  "title": "Process viewport parents",
                  "description": "If set to 'True' (the default) then the parent elements of the viewport will also be processed to help refine the visible size of the viewport. This is useful if it is embedded in another viewport. If set to 'False' then viewport parent elements will not be processed.",
                  "x-ms-visibility": "advanced"
                },
                "MaxViewportParentsToProcess": {
                  "type": "integer",
                  "format": "int32",
                  "default": 50,
                  "title": "Max viewport parents to process",
                  "description": "The maximum number of parent elements to process when enumerating the viewport. By default, this is set to 50.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportParentElementRolesToConsider": {
                  "type": "string",
                  "default": "Panel,Viewport,Layered pane,Root pane",
                  "title": "Viewport parent element roles to consider",
                  "description": "The roles of the viewport parent element to consider when enumerating to calculate the viewport size. This is used to exclude parent elements that are smaller in size than the viewport which can skew the size calculation, for example page tabs. By default, these are: Panel, Viewport, Layered pane, Root pane.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportLeftMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport left margin",
                  "description": "A left inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportTopMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport top margin",
                  "description": "A top inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportRightMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport right margin",
                  "description": "A right inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportBottomMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport bottom margin",
                  "description": "A bottom inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "CellRowIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell row index",
                  "description": "The row index of the cell in the table, starting at 1."
                },
                "CellColumnIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell column index",
                  "description": "The column index of the cell in the table, starting at 1."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "CellRowIndex",
                "CellColumnIndex",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "CellOnScreen": {
                  "type": "boolean",
                  "title": "Cell onscreen",
                  "description": "Returns true if the specified cell is currently displayed on screen, or false if not."
                },
                "ResultIsCertain": {
                  "type": "boolean",
                  "title": "Result is certain",
                  "description": "Returns true if the 'Cell onscreen' result is certain. This will be set to 'False' if any one of the 4 parent table bounds could not be calculated."
                },
                "OffscreenDirection": {
                  "type": "string",
                  "title": "Offscreen direction",
                  "description": "A text representation of the offscreen direction of the specified cell, e.g. Above, Below, Left or Right. If the cell is Above AND Left or Right, then this will return as Above. Similarly, if the cell is Below AND Left or Right, then this will return as Below."
                }
              }
            }
          }
        },
        "operationId": "JABIsTableCellVisibleOnscreen"
      }
    },
    "/JavaAccessBridge/JABIsJABHandleSameObject": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Are Java element handles the same",
        "description": "Compares two Java element handles for Java elements to see if they represent the same Java object. This can be useful if you have identified an element and retrieved a handle to its parent.",
        "parameters": [
          {
            "in": "body",
            "name": "JABIsJABHandleSameObject",
            "description": "Inputs for IA-Connect JABIsJABHandleSameObject action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Element1JABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element 1 JAB handle",
                  "description": "The first element handle to compare."
                },
                "Element2JABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element 2 JAB handle",
                  "description": "The second element handle to compare."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Element1JABHandle",
                "Element2JABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "SameObject": {
                  "type": "boolean",
                  "title": "Same object",
                  "description": "Returns true if both element handles are for the same Java object, or false if the element handles are for different Java objects."
                }
              }
            }
          }
        },
        "operationId": "JABIsJABHandleSameObject"
      }
    },
    "/JavaAccessBridge/JABGetVisibleBoundingRectangleOfElementOnscreen": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get visible bounding rectangle of Java element",
        "description": "Retrieves the visible bounds of a Java element. Typically, the Java Access Bridge will return the virtual positional values of an element, regardless of whether the element is visible on screen and these virtual values are provided by the 'Get Java element properties' action. With larger elements (e.g. a table element which can scroll) as these may not always be visible on screen, this action returns the coordinates of the currently visible area of the element.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetVisibleBoundingRectangleOfElementOnscreen",
            "description": "Inputs for IA-Connect JABGetVisibleBoundingRectangleOfElementOnscreen action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element JAB handle",
                  "description": "The element handle of the element which you want to return the visible bounds for. This could be located using 'Get Java element properties' or some other search which returns an element handle."
                },
                "MaxParentsToProcess": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max parents to process",
                  "description": "The maximum number of parent elements to process when calculating the visible size of the specified element. By default, this is set to 50.",
                  "x-ms-visibility": "advanced"
                },
                "ParentElementRolesToConsider": {
                  "type": "string",
                  "default": "Panel,Viewport,Layered pane,Root pane",
                  "title": "Parent element roles to consider",
                  "description": "The roles of the parent elements to consider when calculating the element size. This is used to exclude parent elements that are smaller in size than the element which can skew the size calculation, for example page tabs. By default, these are: Panel, Viewport, Layered pane, Root pane.",
                  "x-ms-visibility": "advanced"
                },
                "DrawRectangle": {
                  "type": "boolean",
                  "default": false,
                  "title": "Draw rectangle",
                  "description": "Should IA-Connect draw a rectangle around the element so that it is visible on screen? By default, this is set to false."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementVisibleRectangleLeft": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element visible rectangle left",
                  "description": "The distance in pixels between the visible left edge of the element and the left edge of the display."
                },
                "ElementVisibleRectangleTop": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element visible rectangle top",
                  "description": "The distance in pixels between the visible top edge of the element and the top edge of the display."
                },
                "ElementVisibleRectangleRight": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element visible rectangle right",
                  "description": "The distance in pixels between the visible right edge of the element and the left edge of the display."
                },
                "ElementVisibleRectangleBottom": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element visible rectangle bottom",
                  "description": "The distance in pixels between the visible bottom edge of the element and the top edge of the display."
                },
                "ElementVisibleRectangleWidth": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element visible rectangle width",
                  "description": "The visible width of the element in pixels."
                },
                "ElementVisibleRectangleHeight": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element visible rectangle height",
                  "description": "The visible height of the element in pixels."
                }
              }
            }
          }
        },
        "operationId": "JABGetVisibleBoundingRectangleOfElementOnscreen"
      }
    },
    "/JavaAccessBridge/JABCreateHandleForJABElementAtScreenCoordinate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create handle for Java element at screen coordinate",
        "description": "Creates a handle to a Java element by providing the screen coordinates. If a Java element exists at the specified coordinate, the action will identify the element and return a handle to it.",
        "parameters": [
          {
            "in": "body",
            "name": "JABCreateHandleForJABElementAtScreenCoordinate",
            "description": "Inputs for IA-Connect JABCreateHandleForJABElementAtScreenCoordinate action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "ScreenX": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Screen X",
                  "description": "The screen X coordinate in pixels to locate the element at."
                },
                "ScreenY": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Screen Y",
                  "description": "The screen Y coordinate in pixels to locate the element at."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentElementJABHandle",
                "ScreenX",
                "ScreenY",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "LocatedElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Located element JAB handle",
                  "description": "If an element existed at the specified coordinates, this will hold a numeric element handle which can be used in further actions to act as a 'parent' handle for further searches (i.e. to locate elements relative to the handle)."
                }
              }
            }
          }
        },
        "operationId": "JABCreateHandleForJABElementAtScreenCoordinate"
      }
    },
    "/JavaAccessBridge/JABGetTableCellAtScreenCoordinate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java table cell at screen coordinate",
        "description": "If a Java table cell that is a child element of the table exists at the specified coordinates, this action will identify the element, its properties and will optionally return a handle to the table cell element.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetTableCellAtScreenCoordinate",
            "description": "Inputs for IA-Connect JABGetTableCellAtScreenCoordinate action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "TableElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Table element JAB handle",
                  "description": "The Java element handle for the parent table element you are searching. This could be a table you located earlier using 'Get Java element properties'."
                },
                "ScreenX": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Screen X",
                  "description": "The screen X coordinate in pixels to locate the table cell at."
                },
                "ScreenY": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Screen Y",
                  "description": "The screen Y coordinate in pixels to locate the table cell at."
                },
                "ReturnJABHandle": {
                  "type": "boolean",
                  "default": false,
                  "title": "Return handle",
                  "description": "Should an element handle be returned for the cell?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "TableElementJABHandle",
                "ScreenX",
                "ScreenY",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "CellIndexInParent": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell index in parent",
                  "description": "The cell index of the cell in the table. The first cell in the first row will have an index of 1, increasing by 1 for each cell in the row. Therefore, in a table with 5 rows and 3 columns, the first cell in the second row will have an index of 4."
                },
                "CellRowIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell row index",
                  "description": "The row index of the cell in the table, starting at 1."
                },
                "CellColumnIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell column index",
                  "description": "The column index of the cell in the table, starting at 1."
                },
                "CellJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Cell JAB handle",
                  "description": "The element handle to the table cell."
                }
              }
            }
          }
        },
        "operationId": "JABGetTableCellAtScreenCoordinate"
      }
    },
    "/JavaAccessBridge/JABGetMultipleParentJABElementProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get multiple Java parent element properties",
        "description": "Returns the properties of all parent elements of a Java element. This action will search the entire height of the element tree returning all parent properties if the 'Max parents to process' parameter is set high enough.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetMultipleParentJABElementProperties",
            "description": "Inputs for IA-Connect JABGetMultipleParentJABElementProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Search element JAB handle",
                  "description": "The element handle of the element which you want to return all of the parent elements properties for. This could be located using 'Get Java element properties' or some other search which returns an element handle."
                },
                "MaxStringLength": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max string length",
                  "description": "The maximum length of the description field. This can sometimes contain a large amount of text so setting a maximum value can increase search speed. By default, there is no maximum string length so full descriptions will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "MaxParentsToProcess": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max parents to process",
                  "description": "The maximum number of parent elements to process. By default, this is set to 50.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "JavaParentElementsJSON": {
                  "type": "string",
                  "title": "Java parent elements JSON",
                  "description": "A list of all located parent elements (and their properties), in JSON format. The properties returned are the same as those returned by the 'Get Java element properties' action."
                },
                "NumberOfParentElementsReturned": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of parent elements returned",
                  "description": "The number of parent elements returned from the search."
                }
              }
            }
          }
        },
        "operationId": "JABGetMultipleParentJABElementProperties"
      }
    },
    "/JavaAccessBridge/JABGlobalMouseClickOnTableCell": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global mouse click on Java table cell",
        "description": "Moves the mouse to the centre of a Java table cell and clicks the specified mouse button.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGlobalMouseClickOnTableCell",
            "description": "Inputs for IA-Connect JABGlobalMouseClickOnTableCell action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "RowIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Cell row index",
                  "description": "The row index of the cell in the table, starting at 1."
                },
                "ColumnIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Cell column index",
                  "description": "The column index of the cell in the table, starting at 1."
                },
                "EnumerateViewport": {
                  "type": "boolean",
                  "default": true,
                  "title": "Enumerate viewport",
                  "description": "The viewport element typically contains the table and represents the visible area of the table. If set to 'True' (the default) then IA-Connect Agent will attempt to detect the table visible bounds and the index of the cells at each corner by calculating the size of the viewport. This allows you to determine which components of the table are currently visible on screen. If set to 'False' then the viewport coordinates will not be populated.",
                  "x-ms-visibility": "advanced"
                },
                "ProcessViewportParents": {
                  "type": "boolean",
                  "default": true,
                  "title": "Process viewport parents",
                  "description": "If set to 'True' (the default) then the parent elements of the viewport will also be processed to help refine the visible size of the viewport. This is useful if it is embedded in another viewport. If set to 'False' then viewport parent elements will not be processed.",
                  "x-ms-visibility": "advanced"
                },
                "MaxViewportParentsToProcess": {
                  "type": "integer",
                  "format": "int32",
                  "default": 50,
                  "title": "Max viewport parents to process",
                  "description": "The maximum number of parent elements to process when enumerating the viewport. By default, this is set to 50.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportParentElementRolesToConsider": {
                  "type": "string",
                  "default": "Panel,Viewport,Layered pane,Root pane",
                  "title": "Viewport parent element roles to consider",
                  "description": "The roles of the viewport parent element to consider when enumerating to calculate the viewport size. This is used to exclude parent elements that are smaller in size than the viewport which can skew the size calculation, for example page tabs. By default, these are: Panel, Viewport, Layered pane, Root pane.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportLeftMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport left margin",
                  "description": "A left inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportTopMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport top margin",
                  "description": "A top inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportRightMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport right margin",
                  "description": "A right inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "ViewportBottomMargin": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "Viewport bottom margin",
                  "description": "A bottom inner margin for the enumerated viewport. This value can be used to exclude any cells which might be only showing by a single pixel or two and are almost entirely offscreen. By default, this is set to 2 and should only be increased if you are trying to influence the data returned by the IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "MouseButton": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Mouse button",
                  "description": "The mouse button to use when clicking on the table cell. Left = 0, Right = 1, Middle = 2, Double left = 3."
                },
                "ClickOffsetX": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset X",
                  "description": "The number of X pixels to offset the click action by. This parameter supports both positive (right) and negative (left) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetY": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset Y",
                  "description": "The number of Y pixels to offset the click action by. This parameter supports both positive (down) and negative (up) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "OffsetRelativeTo": {
                  "type": "string",
                  "title": "Offset relative to",
				  "enum": [ "Center", "Left", "Right", "Top", "Bottom", "Top Left", "Top Right", "Bottom Left", "Bottom Right"],
                  "description": "The relative position of the element to offset from (Center / Centre / Middle, Left, Right, Top, Bottom, Top Left, Top Right, Bottom Left, Bottom Right).",
                  "x-ms-visibility": "advanced"
                },
                "DelayInMilliseconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Delay in milliseconds",
                  "description": "The number of seconds to wait between clicks, by default this is 0.05 (20 milliseconds).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "RowIndex",
                "ColumnIndex",
                "MouseButton",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "JABGlobalMouseClickOnTableCell"
      }
    },
    "/JavaAccessBridge/JABGetRoleCSVFromElementSearch": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java role CSV from element search",
        "description": "Performs a Java element search and outputs the details of the elements searched (up to the point where the element was found) as CSV. This action would only be used for development purposes and provides an overview of the elements of the application which can be useful for visualising the application structure and optimising element searches.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetRoleCSVFromElementSearch",
            "description": "Inputs for IA-Connect JABGetRoleCSVFromElementSearch action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchElementJABName": {
                  "type": "string",
                  "title": "Search Java element name",
                  "description": "The optional Java name of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABDescription": {
                  "type": "string",
                  "title": "Search Java element description",
                  "description": "The optional Java element description of the element to search for. This can be discovered via Inspection."
                },
                "SearchElementJABRole": {
                  "type": "string",
                  "title": "Search Java element role",
                  "description": "The optional Java element role of the element to search for. This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [Role] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "CaseSensitiveSearch": {
                  "type": "boolean",
                  "default": false,
                  "title": "Case sensitive search",
                  "description": "Should the element search be case sensitive? When set to True, only elements matching the exact string/text searches will be returned. By default, this is set to false.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "IndentRoleInCSV": {
                  "type": "boolean",
                  "default": true,
                  "title": "Indent role in CSV",
                  "description": "Should the child element roles in the CSV output be indented? This may help to better visualise the parent and child relationships in the Java element tree. By default, this is set to 'True'."
                },
                "IncludeDescriptionInCSV": {
                  "type": "boolean",
                  "default": true,
                  "title": "Include description in CSV",
                  "description": "Should the element descriptions be included in the CSV output? By default, this is set to 'True'."
                },
                "IncludeDimensionsInCSV": {
                  "type": "boolean",
                  "default": true,
                  "title": "Include dimensions in CSV",
                  "description": "Should the element dimensions (height, width and bounding edges) be included in the CSV output? By default, this is set to 'True'."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementFound": {
                  "type": "boolean",
                  "title": "Element found",
                  "description": "Returns true if the search element was found, or false if not."
                },
                "ElementsSearched": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of elements searched",
                  "description": "The number of elements searched under the parent element before the search element was found."
                },
                "RoleCSV": {
                  "type": "string",
                  "title": "Role CSV",
                  "description": "The CSV output containing the role of each element found in the search."
                }
              }
            }
          }
        },
        "operationId": "JABGetRoleCSVFromElementSearch"
      }
    },
    "/JavaAccessBridge/JABGetRoleCSVFromElementHandle": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Java role CSV from element handle",
        "description": "Returns the tree of element roles below the specified element handle as CSV. This action would only be used for development purposes and provides an overview of the elements of the application which can be useful for visualising the application structure and optimising element searches.",
        "parameters": [
          {
            "in": "body",
            "name": "JABGetRoleCSVFromElementHandle",
            "description": "Inputs for IA-Connect JABGetRoleCSVFromElementHandle action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchParentElementJABHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element JAB handle",
                  "description": "The Java element handle which is a parent of the element you are searching for. This could be a window you located earlier using 'Wait for Java desktop element'."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search child elements",
                  "description": "If set to true then the whole tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the tree will be searched."
                },
                "MaxRelativeDepth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Maximum relative depth",
                  "description": "The maximum relative depth to search from the parent element for child elements. Direct child elements will have a depth value of 0.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchVisibleElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search visible elements",
                  "description": "Should only visible elements be searched? By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "OnlySearchShowingElements": {
                  "type": "boolean",
                  "default": true,
                  "title": "Only search showing elements",
                  "description": "Should only showing elements be searched? Showing elements are typically items displayed in an alternative tab or collapsed menu. By default, this is set to true.",
                  "x-ms-visibility": "advanced"
                },
                "ElementRolesNotToTraverse": {
                  "type": "string",
                  "title": "Element roles not to traverse",
                  "description": "A comma separated list of roles to not traverse (step into) when searching. The search will still check if the element matches the search criteria however it will not search any child elements. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumElementsToSearch": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2000,
                  "title": "Maximum elements to search",
                  "description": "The maximum number of elements to search when looking for the target element, restricting the search to only check the first N number of elements found in the Java tree. By default, this is set to 2000. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "MaximumChildElementsToSearchPerNode": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Maximum child elements to search per node",
                  "description": "The maximum number of child elements to search in each element when looking for the target element, restricting the search to only check the first N number of child elements found for each element in the Java tree. By default, this is set to 200. This parameter can be used to optimise element searching. This is only used if the 'Search child elements' input parameter is set to 'True'.",
                  "x-ms-visibility": "advanced"
                },
                "IndentRoleInCSV": {
                  "type": "boolean",
                  "default": true,
                  "title": "Indent role in CSV",
                  "description": "Should the child element roles in the CSV output be indented? This may help to better visualise the parent and child relationships in the Java element tree. By default, this is set to 'True'."
                },
                "IncludeDescriptionInCSV": {
                  "type": "boolean",
                  "default": true,
                  "title": "Include description in CSV",
                  "description": "Should the element descriptions be included in the CSV output? By default, this is set to 'True'."
                },
                "IncludeDimensionsInCSV": {
                  "type": "boolean",
                  "default": true,
                  "title": "Include dimensions in CSV",
                  "description": "Should the element dimensions (height, width and bounding edges) be included in the CSV output? By default, this is set to 'True'."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchParentElementJABHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementFound": {
                  "type": "boolean",
                  "title": "Element found",
                  "description": "Returns true if the element specified by the input handle was found, or false if not."
                },
                "ElementsSearched": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of elements searched",
                  "description": "The number of elements searched under the parent element."
                },
                "RoleCSV": {
                  "type": "string",
                  "title": "Role CSV",
                  "description": "The CSV output containing the role of each element found under the parent element."
                }
              }
            }
          }
        },
        "operationId": "JABGetRoleCSVFromElementHandle"
      }
    }
  },
  "definitions": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "RESTAPIKey"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": []
}