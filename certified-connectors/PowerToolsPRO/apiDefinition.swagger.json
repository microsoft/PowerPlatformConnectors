{
  "swagger": "2.0",
  "info": {
    "title": "Apptigent PowerTools",
    "version": "1.3.0",
    "description": "Unlock the potential of Microsoft Power Platform with Apptigent PowerTools PRO. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, and more. PowerTools PRO includes all the functionality from the LITE version plus over 40 advanced actions to take your apps, forms and flows to the next level.",
    "x-ibm-name": "powertools-professional",
    "contact": {
      "name": "Customer Support",
      "email": "support@apptigent.com",
      "url": "https://www.apptigent.com/help/"
    }
  },
  "host": "connect.apptigent.com",
  "basePath": "/api/utilities",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/AddToCollection": {
      "post": {
        "description": "Add an item to a collection",
        "operationId": "AddToCollection",
        "summary": "Collections - Add to collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionModify",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionModify"
            },
            "description": "Collection modification parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/RemoveFromCollection": {
      "post": {
        "description": "Remove an item from a collection",
        "operationId": "RemoveFromCollection",
        "summary": "Collections - Remove from collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionModify",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionModify"
            },
            "description": "Collection modification parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/FilterCollection": {
      "post": {
        "description": "Filter a collection of strings by keyword",
        "operationId": "FilterCollection",
        "summary": "Collections - Filter collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionFilter",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionFilter"
            },
            "description": "Filter collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/SortCollection": {
      "post": {
        "description": "Sort a collection of strings",
        "operationId": "SortCollection",
        "summary": "Collections - Sort collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionSort",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSort"
            },
            "description": "Sort collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CountCollection": {
      "post": {
        "description": "Count a collection of items",
        "operationId": "CountCollection",
        "summary": "Collections - Count collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionCount",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionCount"
            },
            "description": "Count collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/SplitCollection": {
      "post": {
        "description": "Split a collection of items by matching value or index",
        "operationId": "SplitCollection",
        "summary": "Collections - Split collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionSplit",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSplit"
            },
            "description": "Split collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputMultiCollection"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ReplaceValuesInCollection": {
      "post": {
        "description": "Replace whole or partial strings in a collection",
        "operationId": "ReplaceValuesInCollection",
        "summary": "Collections - Replace values in collection",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionReplace",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionReplace"
            },
            "description": "Replace values in collection parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionResult"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CollectionContainsString": {
      "post": {
        "description": "Determine if any items in a collection contain a specific string",
        "operationId": "CollectionContainsString",
        "summary": "Collections - Contains string",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionSearch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSearch"
            },
            "description": "Collection search parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CollectionStartsWithString": {
      "post": {
        "description": "Determine if any items in a collection start with a specific string",
        "operationId": "CollectionStartsWithString",
        "summary": "Collections - Starts with string",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionSearch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSearch"
            },
            "description": "Collection search parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CollectionEndsWithString": {
      "post": {
        "description": "Determine if any items in a collection end with a specific string",
        "operationId": "CollectionEndsWithString",
        "summary": "Collections - Ends with string",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionSearch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSearch"
            },
            "description": "Collection search parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CollectionContainsNumber": {
      "post": {
        "description": "Determine if a collection contains a specific number",
        "operationId": "CollectionContainsNumber",
        "summary": "Collections - Contains number",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionSearch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionSearchNumeric"
            },
            "description": "Collection search parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputCollectionNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CollectionToJSON": {
      "post": {
        "description": "Convert a collection to a named JSON object",
        "operationId": "CollectionToJSON",
        "summary": "Collections - Collection to JSON",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionConversion",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionConversion"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CollectionToXML": {
      "post": {
        "description": "Convert a collection to an XML string",
        "operationId": "CollectionToXml",
        "summary": "Collections - Collection to XML",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "collectionConversionXML",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCollectionConversionXML"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ConvertCurrency": {
      "post": {
        "description": "Calculate monetary value in a different currency",
        "operationId": "ConvertCurrency",
        "summary": "Currency - Convert currency",
        "tags": [
          "Finance"
        ],
        "parameters": [
          {
            "name": "currencyConversion",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCurrencyConversion"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/FormatCurrency": {
      "post": {
        "description": "Apply currency symbol to a numeric value",
        "operationId": "FormatCurrency",
        "summary": "Currency - Format currency",
        "tags": [
          "Finance"
        ],
        "parameters": [
          {
            "name": "currencyFormat",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCurrencyFormat"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/StockPrices": {
      "post": {
        "description": "Get current and historical stock price information",
        "operationId": "StockPrices",
        "summary": "Finance - Stock prices",
        "tags": [
          "Finance"
        ],
        "parameters": [
          {
            "name": "stockPrices",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputStockPrices"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputStockPrice"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/MarketIndex": {
      "post": {
        "description": "Get current and historical market index information",
        "operationId": "MarketIndex",
        "summary": "Finance - Market index",
        "tags": [
          "Finance"
        ],
        "parameters": [
          {
            "name": "marketIndex",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputMarketIndex"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputMarketIndex"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/DateTimeInfo": {
      "post": {
        "description": "Retrieve useful date and time information, such as day of year, total seconds and ticks",
        "operationId": "DateTimeInfo",
        "summary": "DateTime - Get date and time information",
        "tags": [
          "DateTime"
        ],
        "parameters": [
          {
            "name": "dateTimeInfo",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputDateTimeInfo"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputDateInfo"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/DateTimeDifference": {
      "post": {
        "description": "Calculate the difference between two dates",
        "operationId": "DateTimeDifference",
        "summary": "DateTime - DateTime difference",
        "tags": [
          "DateTime"
        ],
        "parameters": [
          {
            "name": "dateTimeDifference",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputDateTimeDifference"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputDateDifference"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/FormatDateTime": {
      "post": {
        "description": "Create a date/time string in a specific format",
        "operationId": "FormatDateTime",
        "summary": "DateTime - Format date and time",
        "tags": [
          "DateTime"
        ],
        "parameters": [
          {
            "name": "dateTimeFormat",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputDateTimeFormat"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/WorldTime": {
      "post": {
        "description": "Convert date and time from one time zone to another",
        "operationId": "WorldTime",
        "summary": "DateTime - Get world time",
        "tags": [
          "DateTime"
        ],
        "parameters": [
          {
            "name": "dateTimeConversion",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputDateTimeConversion"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateAverage": {
      "post": {
        "description": "Calculate the average of two or more numbers",
        "operationId": "CalculateAverage",
        "summary": "Math - Calculate average",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateMedian": {
      "post": {
        "description": "Calculate the median of two or more numbers",
        "operationId": "CalculateMedian",
        "summary": "Math - Calculate median",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateMinMax": {
      "post": {
        "description": "Calculate the minimum or maximum value in a sequence of numbers",
        "operationId": "CalculateMinMax",
        "summary": "Math - Calculate minimum or maximum",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateMinMax"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateSum": {
      "post": {
        "description": "Calculate the sum of two or more numbers",
        "operationId": "CalculateSum",
        "summary": "Math - Calculate sum",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculatePower": {
      "post": {
        "description": "Raise number to a specified power",
        "operationId": "CalculatePower",
        "summary": "Math - Calculate power",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculatePower",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculatePower"
            },
            "description": "Power calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateVariance": {
      "post": {
        "description": "Calculate the statistical variance of two or more numbers",
        "operationId": "CalculateVariance",
        "summary": "Math - Calculate variance",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateAddition": {
      "post": {
        "description": "Calculate the sum of two numbers",
        "operationId": "CalculateAddition",
        "summary": "Math - Calculate Addition",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateNumbers",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumbers"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateSubtraction": {
      "post": {
        "description": "Calculate the difference between two numbers",
        "operationId": "CalculateSubtraction",
        "summary": "Math - Calculate Subtraction",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateNumbers",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumbers"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateMultiplication": {
      "post": {
        "description": "Calculate the product of two numbers",
        "operationId": "CalculateMultiplication",
        "summary": "Math - Calculate Multiplication",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateNumbers",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumbers"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateDivision": {
      "post": {
        "description": "Calculate the quotient of two numbers",
        "operationId": "CalculateDivision",
        "summary": "Math - Calculate Division",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateNumbers",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumbers"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateModulo": {
      "post": {
        "description": "Calculate the remainder of dividing two numbers",
        "operationId": "CalculateModulo",
        "summary": "Math - Calculate Modulo",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateNumbers",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumbers"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateNthRoot": {
      "post": {
        "description": "Calculate the n-th root of a number",
        "operationId": "CalculateNthRoot",
        "summary": "Math - Calculate Nth Root",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateNumbers",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumbers"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateSquareRoot": {
      "post": {
        "description": "Calculate the square root of a number",
        "operationId": "CalculateSquareRoot",
        "summary": "Math - Calculate Square Root",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateLogarithm": {
      "post": {
        "description": "Calculate the logarithm of a number",
        "operationId": "CalculateLogarithm",
        "summary": "Math - Calculate Logarithm",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateSine": {
      "post": {
        "description": "Calculate the sine value of an angle",
        "operationId": "CalculateSine",
        "summary": "Math - Calculate Sine",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateCosine": {
      "post": {
        "description": "Calculate the cosine value of an angle",
        "operationId": "CalculateCosine",
        "summary": "Math - Calculate Cosine",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateTangent": {
      "post": {
        "description": "Calculate the tangent value of an angle",
        "operationId": "CalculateTangent",
        "summary": "Math - Calculate Tangent",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CalculateAbsolute": {
      "post": {
        "description": "Calculate the absolute value of a number",
        "operationId": "CalculateAbsolute",
        "summary": "Math - Calculate Absolute",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Number calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ConvertAngle": {
      "post": {
        "description": "Convert value from one angle measurement to another",
        "operationId": "ConvertAngle",
        "summary": "Math - Convert angle",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "convertAngle",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertAngle"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ConvertArea": {
      "post": {
        "description": "Convert value from one area measurement to another",
        "operationId": "ConvertArea",
        "summary": "Math - Convert area",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "convertArea",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertArea"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ConvertDistance": {
      "post": {
        "description": "Convert value from one distance measurement to another",
        "operationId": "ConvertDistance",
        "summary": "Math - Convert distance",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "convertDistance",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertDistance"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ConvertDuration": {
      "post": {
        "description": "Convert value from one duration measurement to another",
        "operationId": "ConvertDuration",
        "summary": "Math - Convert duration",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "convertDuration",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertDuration"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ConvertEnergy": {
      "post": {
        "description": "Convert value from one energy measurement to another",
        "operationId": "ConvertEnergy",
        "summary": "Math - Convert energy",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "convertEnergy",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertEnergy"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ConvertPower": {
      "post": {
        "description": "Convert value from one power measurement to another",
        "operationId": "ConvertPower",
        "summary": "Math - Convert power",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "convertPower",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertPower"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ConvertSpeed": {
      "post": {
        "description": "Convert value from one speed measurement to another",
        "operationId": "ConvertSpeed",
        "summary": "Math - Convert speed",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "convertSpeed",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertSpeed"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ConvertTemperature": {
      "post": {
        "description": "Convert value from one temperature measurement to another",
        "operationId": "ConvertTemperature",
        "summary": "Math - Convert temperature",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "convertTemperature",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertTemperature"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ConvertVolume": {
      "post": {
        "description": "Convert value from one volume measurement to another",
        "operationId": "ConvertVolume",
        "summary": "Math - Convert volume",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "convertVolume",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertVolume"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ConvertWeight": {
      "post": {
        "description": "Convert value from one weight measurement to another",
        "operationId": "ConvertWeight",
        "summary": "Math - Convert weight",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "convertWeight",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputConvertWeight"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/RandomNumber": {
      "post": {
        "description": "Generate a random number within a specified range",
        "operationId": "RandomNumber",
        "summary": "Math - Random number",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "numberRange",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputNumberRange"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/RoundNumber": {
      "post": {
        "description": "Round a numeric value up or down",
        "operationId": "RoundNumber",
        "summary": "Math - Round number",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateNumber",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateNumber"
            },
            "description": "Numeric calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/StandardDeviation": {
      "post": {
        "description": "Calculate the standard deviation of two or more numbers",
        "operationId": "StandardDeviation",
        "summary": "Math - Calculate standard deviation",
        "tags": [
          "Math"
        ],
        "parameters": [
          {
            "name": "calculateSeries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCalculateSeries"
            },
            "description": "Series calculation parameters"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputNumber"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CompareStrings": {
      "post": {
        "description": "Perform a comparison of two strings",
        "operationId": "CompareStrings",
        "summary": "Text - Compare strings",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringComparison",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputStringComparison"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ContainsString": {
      "post": {
        "description": "Determine if a string contains another string",
        "operationId": "ContainsString",
        "summary": "Text - Contains string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringContains",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputStringContains"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ConvertCase": {
      "post": {
        "description": "Convert string to upper, lower or title case",
        "operationId": "ConvertCase",
        "summary": "Text - Convert case",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "caseConversion",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCaseConversion"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/DecodeString": {
      "post": {
        "description": "Decode a string encoded with Base64 encoding",
        "operationId": "DecodeString",
        "summary": "Text - Decode string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringInput",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "source"
              ],
              "properties": {
                "source": {
                  "type": "string",
                  "x-ms-summary": "Source",
                  "description": "Encoded string variable or text value"
                }
              },
              "example": {
                "source": "VGhlIGJyb3duIGNvdw=="
              }
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/EncodeString": {
      "post": {
        "description": "Encode a string using Base64 encoding",
        "operationId": "EncodeString",
        "summary": "Text - Encode string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringInput",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/GenerateGuid": {
      "post": {
        "description": "Generate a globally unique identifier",
        "operationId": "GenerateGuid",
        "summary": "Text - Generate GUID",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "generateUniqueID",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputGenerateUniqueID"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/GenerateHash": {
      "post": {
        "description": "Generate a hash value from a string",
        "operationId": "GenerateHash",
        "summary": "Text - Generate hash",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "generateHash",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputGenerateHash"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/VerifyHash": {
      "post": {
        "description": "Verify a hashed value against the original source string",
        "operationId": "VerifyHash",
        "summary": "Text - Verify hash",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "verifyHash",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputVerifyHash"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputBoolean"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/JoinStrings": {
      "post": {
        "description": "Join a collection of strings",
        "operationId": "JoinStrings",
        "summary": "Text - Join strings",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "joinStrings",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputJoinStrings"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/RedactString": {
      "post": {
        "description": "Redact a strng containing sensitive content",
        "operationId": "RedactString",
        "summary": "Text - Redact string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "redactString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputRedactString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ReplaceString": {
      "post": {
        "description": "Replace one value with another in a string",
        "operationId": "ReplaceString",
        "summary": "Text - Replace string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "replaceString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputReplaceString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ShortenLink": {
      "post": {
        "description": "Generate a simple, short URL from a complex URL",
        "operationId": "ShortenLink",
        "summary": "Text - Shorten hyperlink",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringInput",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "source"
              ],
              "properties": {
                "source": {
                  "type": "string",
                  "x-ms-summary": "Source",
                  "description": "String variable or text value"
                }
              },
              "example": {
                "source": "http://www.somewebsite.com/path1/path2?query1=value&query2=value"
              }
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/SplitString": {
      "post": {
        "description": "Split a string based upon one or more characters",
        "operationId": "SplitString",
        "summary": "Text - Split string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "splitString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputSplitString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputStringArray"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/SpeechToText": {
      "post": {
        "description": "Convert audio file to text (10MB limit)",
        "operationId": "SpeechToText",
        "summary": "Text - Speech to Text",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "language",
            "type": "string",
            "in": "formData",
            "x-ms-summary": "Language",
            "description": "Language of audio input",
            "required": true,
            "default": "English (United States)",
            "enum": [
              "Arabic (Bahrain)",
              "Arabic (Egypt)",
              "Arabic (Iraq)",
              "Arabic (Jordan)",
              "Arabic (Kuwait)",
              "Arabic (Lebanon)",
              "Arabic (Oman)",
              "Arabic (Qatar)",
              "Arabic (Saudi Arabia)",
              "Arabic (Syria)",
              "Arabic (United Arab Emirates)",
              "Bulgarian (Bulgaria)",
              "Catalan (Spain)",
              "Chinese (Cantonese, Traditional)",
              "Chinese (Mandarin, Simplified)",
              "Chinese (Taiwanese Mandarin)",
              "Croatian (Croatia)",
              "Czech (Czech Republic)",
              "Danish (Denmark)",
              "Dutch (Netherlands)",
              "English (Australia)",
              "English (Canada)",
              "English (Hong Kong)",
              "English (India)",
              "English (Ireland)",
              "English (New Zealand)",
              "English (Philippines)",
              "English (Singapore)",
              "English (South Africa)",
              "English (United Kingdom)",
              "English (United States)",
              "Estonian(Estonia)",
              "Finnish (Finland)",
              "French (Canada)",
              "French (France)",
              "German (Germany)",
              "Greek (Greece)",
              "Gujarati (Indian)",
              "Hindi (India)",
              "Hungarian (Hungary)",
              "Irish(Ireland)",
              "Italian (Italy)",
              "Japanese (Japan)",
              "Korean (Korea)",
              "Latvian (Latvia)",
              "Lithuanian (Lithuania)",
              "Maltese(Malta)",
              "Marathi (India)",
              "Norwegian (Norway)",
              "Polish (Poland)",
              "Portuguese (Brazil)",
              "Portuguese (Portugal)",
              "Romanian (Romania)",
              "Russian (Russia)",
              "Slovak (Slovakia)",
              "Slovenian (Slovenia)",
              "Spanish (Argentina)",
              "Spanish (Bolivia)",
              "Spanish (Chile)",
              "Spanish (Colombia)",
              "Spanish (Costa Rica)",
              "Spanish (Cuba)",
              "Spanish (Dominican Republic)",
              "Spanish (Ecuador)",
              "Spanish (El Salvador)",
              "Spanish (Guatemala)",
              "Spanish (Honduras)",
              "Spanish (Mexico)",
              "Spanish (Nicaragua)",
              "Spanish (Panama)",
              "Spanish (Paraguay)",
              "Spanish (Peru)",
              "Spanish (Puerto Rico)",
              "Spanish (Spain)",
              "Spanish (Uruguay)",
              "Spanish (USA)",
              "Spanish (Venezuela)",
              "Swedish (Sweden)",
              "Tamil (India)",
              "Telugu (India)",
              "Thai (Thailand)",
              "Turkish (Turkey)"
            ]
          },
          {
            "name": "file",
            "type": "file",
            "in": "formData",
            "x-ms-summary": "File",
            "description": "Source audio file (WAV, MP3, AAC, M4A)",
            "required": true
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/TextToSpeech": {
      "post": {
        "description": "Convert text to an audio file using AI-driven speech synthesis.",
        "operationId": "TextToSpeech",
        "summary": "Text - Text to Speech",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "textToSpeech",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputTextToSpeech"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "audio/mp3"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/TranslateString": {
      "post": {
        "description": "Translate a string into a different language",
        "operationId": "TranslateString",
        "summary": "Text - Translate string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "translateString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputTranslateString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/TrimString": {
      "post": {
        "description": "Trim leading or trailing whitespace from a string",
        "operationId": "TrimString",
        "summary": "Text - Trim string",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "trimString",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputTrimString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/URLDecode": {
      "post": {
        "description": "Decode an encoded URL",
        "operationId": "UrlDecode",
        "summary": "Text - Decode URL",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringInput",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "source"
              ],
              "properties": {
                "source": {
                  "type": "string",
                  "x-ms-summary": "Source",
                  "description": "Encoded string variable or text value"
                }
              },
              "example": {
                "source": "The%20brown%20cow"
              }
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/URLEncode": {
      "post": {
        "description": "Generate an encoded string from a complex hyperlink",
        "operationId": "UrlEncode",
        "summary": "Text - Encode URL",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringInput",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputString"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ValidateEmail": {
      "post": {
        "description": "Determine if an email address is valid",
        "operationId": "ValidateEmail",
        "summary": "Text - Validate email",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "stringInput",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "source"
              ],
              "properties": {
                "source": {
                  "type": "string",
                  "x-ms-summary": "Source",
                  "description": "String variable or text value"
                }
              },
              "example": {
                "source": "some user @ bademail-com"
              }
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/JSONtoHTML": {
      "post": {
        "description": "Convert a JSON array to an HTML table",
        "operationId": "JsonToHtml",
        "summary": "Data - JSON to HTML Table",
        "tags": [
          "Data"
        ],
        "parameters": [
          {
            "name": "jsonConversionHTML",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputJsonConversionHTML"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/JSONtoCSV": {
      "post": {
        "description": "Convert a JSON array to CSV string",
        "operationId": "JsonToCsv",
        "summary": "Data - JSON to CSV",
        "tags": [
          "Data"
        ],
        "parameters": [
          {
            "name": "jsonConversionCSV",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputJsonConversionCSV"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/JSONtoXML": {
      "post": {
        "description": "Convert a JSON object to an XML string",
        "operationId": "JsonToXml",
        "summary": "Data - JSON to XML",
        "tags": [
          "Data"
        ],
        "parameters": [
          {
            "name": "jsonConversionXML",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputJsonConversionXML"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CSVtoJSON": {
      "post": {
        "description": "Convert a CSV string to a JSON array",
        "operationId": "CsvToJson",
        "summary": "Data - CSV to JSON",
        "tags": [
          "Data"
        ],
        "parameters": [
          {
            "name": "csvConversionJSON",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputCsvConversionJSON"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/XMLtoJSON": {
      "post": {
        "description": "Convert an XML string to a JSON object",
        "operationId": "XmlToJson",
        "summary": "Data - XML to JSON",
        "tags": [
          "Data"
        ],
        "parameters": [
          {
            "name": "xmlConversionJSON",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputXmlConversionJSON"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/QueryJSON": {
      "post": {
        "description": "Query a JSON object using a JSONPath expression",
        "operationId": "QueryJson",
        "summary": "Data - Query JSON",
        "tags": [
          "Data"
        ],
        "parameters": [
          {
            "name": "inputDataQuery",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputDataQuery"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/QueryXML": {
      "post": {
        "description": "Query an XML string using an XPath expression",
        "operationId": "QueryXml",
        "summary": "Data - Query XML",
        "tags": [
          "Data"
        ],
        "parameters": [
          {
            "name": "inputDataQuery",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputDataQuery"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ConvertImage": {
      "post": {
        "description": "Convert an image from one format to another",
        "operationId": "ConvertImage",
        "summary": "Files - Convert Image",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "name": "format",
            "type": "string",
            "in": "formData",
            "x-ms-summary": "Format",
            "description": "Output file format",
            "required": true,
            "default": "PNG",
            "enum": [
              "PNG",
              "JPG",
              "GIF",
              "BMP",
              "TIF"
            ]
          },
          {
            "name": "file",
            "type": "file",
            "in": "formData",
            "x-ms-summary": "File",
            "description": "Source image file",
            "required": true
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "image/png",
          "image/gif",
          "image/jpeg",
          "image/bmp"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/ResizeImage": {
      "post": {
        "description": "Resize an image",
        "operationId": "ResizeImage",
        "summary": "Files - Resize Image",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "name": "algorithm",
            "type": "string",
            "in": "formData",
            "required": true,
            "x-ms-summary": "Resampling Algorithm",
            "description": "Optimize output quality of the target image",
            "default": "Bicubic (default)",
            "enum": [
              "Bicubic (default)",
              "Bilinear",
              "Cubic (Box)",
              "Cubic (Catmull-Rom)",
              "Cubic (Hermite)",
              "Cubic (Spline)",
              "Nearest Neighbor",
              "Sinc (Lanczos2)",
              "Sinc (Lanczos3)",
              "Sinc (Lanczos5)",
              "Sinc (Lanczos8)",
              "Robidoux",
              "Robidoux Sharp"
            ]
          },
          {
            "name": "units",
            "type": "string",
            "in": "formData",
            "required": true,
            "x-ms-summary": "Units",
            "description": "Image adjustment units",
            "default": "Pixels",
            "enum": [
              "Pixels",
              "Percent"
            ]
          },
          {
            "name": "height",
            "type": "number",
            "in": "formData",
            "x-ms-summary": "Height",
            "description": "Image height (pixels or percent)"
          },
          {
            "name": "width",
            "type": "number",
            "in": "formData",
            "x-ms-summary": "Width",
            "description": "Image width (pixels or percent)"
          },
          {
            "name": "file",
            "type": "file",
            "in": "formData",
            "required": true,
            "x-ms-summary": "File",
            "description": "Source image file"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "image/png",
          "image/gif",
          "image/jpeg",
          "image/bmp"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/RotateImage": {
      "post": {
        "description": "Rotate an image by specified number of degrees",
        "operationId": "RotateImage",
        "summary": "Files - Rotate Image",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "name": "degrees",
            "type": "string",
            "in": "formData",
            "x-ms-summary": "Degrees",
            "description": "Number of degrees",
            "required": true
          },
          {
            "name": "file",
            "type": "file",
            "in": "formData",
            "x-ms-summary": "File",
            "description": "Source image file",
            "required": true
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/FlipImage": {
      "post": {
        "description": "Flip an image (horizontal or vertical)",
        "operationId": "FlipImage",
        "summary": "Files - Flip Image",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "name": "orientation",
            "type": "string",
            "in": "formData",
            "x-ms-summary": "Orientation",
            "description": "Horizontal or Vertical",
            "required": true,
            "default": "Horizontal",
            "enum": [
              "Horizontal",
              "Vertical"
            ]
          },
          {
            "name": "file",
            "type": "file",
            "in": "formData",
            "x-ms-summary": "File",
            "description": "Source image file",
            "required": true
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/WatermarkImage": {
      "post": {
        "description": "Add watermark text to an image",
        "operationId": "WatermarkImage",
        "summary": "Files - Watermark Image",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "name": "text",
            "type": "string",
            "in": "formData",
            "x-ms-summary": "Text",
            "description": "Watermark text",
            "required": true
          },
          {
            "name": "font",
            "type": "string",
            "in": "formData",
            "x-ms-summary": "Font",
            "description": "Text font",
            "required": true,
            "default": "Arial",
            "enum": [
              "Arial",
              "Arial Black",
              "Arial Narrow",
              "Book Antiqua",
              "Britannic Bold",
              "Brush Script MT",
              "Calisto MT",
              "Century Gothic",
              "Century Schoolbook",
              "Colonna MT",
              "Comic Sans MS",
              "Cooper Black",
              "Copperplate Gothic Bold",
              "Copperplate Gothic Light",
              "Courier New",
              "Edwardian Script ITC",
              "Engravers MT",
              "Franklin Gothic Demi",
              "Franklin Gothic Heavy",
              "Franklin Gothic Medium",
              "Garamond",
              "Georgia",
              "Gill Sans MT",
              "Gill Sans MT Condensed",
              "Gill Sans Ultra Bold",
              "Gill Sans Ultra Bold Condensed",
              "Goudy Old Style",
              "Haettenschweiler",
              "Holidays MT",
              "Impact",
              "Lucida Calligraphy",
              "Lucida Console",
              "Lucida Handwriting",
              "Lucida Sans Typewriter",
              "Lucida Sans Unicode",
              "Marlett",
              "Microsoft Sans Serif",
              "MS Outlook",
              "Palace Script MT",
              "Palatino Linotype",
              "Papyrus",
              "Playbill",
              "Rockwell",
              "Rockwell Condensed",
              "Rockwell Extra Bold",
              "Script MT Bold",
              "Stencil",
              "Symbol",
              "Tahoma",
              "Times New Roman",
              "Trebuchet MS",
              "Verdana",
              "Vivaldi",
              "Webdings",
              "Wingdings 1",
              "Wingdings 2",
              "Wingdings 3"
            ]
          },
          {
            "name": "size",
            "type": "number",
            "in": "formData",
            "x-ms-summary": "Font Size",
            "description": "Font size (points)",
            "required": true
          },
          {
            "name": "color",
            "type": "string",
            "in": "formData",
            "x-ms-summary": "Text Color",
            "description": "Text color hex value",
            "required": true,
            "default": "000000"
          },
          {
            "name": "horizontal",
            "type": "string",
            "in": "formData",
            "x-ms-summary": "Horizontal",
            "description": "Horizontal alignment",
            "required": true,
            "default": "Center",
            "enum": [
              "Left",
              "Center",
              "Right"
            ]
          },
          {
            "name": "vertical",
            "type": "string",
            "in": "formData",
            "x-ms-summary": "Vertical",
            "description": "Vertical alignment",
            "required": true,
            "default": "Center",
            "enum": [
              "Top",
              "Center",
              "Bottom"
            ]
          },
          {
            "name": "file",
            "type": "file",
            "in": "formData",
            "x-ms-summary": "File",
            "description": "Source image file",
            "required": true
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/CropImage": {
      "post": {
        "description": "Crop an image",
        "operationId": "CropImage",
        "summary": "Files - Crop Image",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "name": "position",
            "type": "string",
            "in": "formData",
            "required": true,
            "x-ms-summary": "Position",
            "description": "Crop start position (use negative values to reverse crop area)",
            "default": "TopLeft",
            "enum": [
              "TopLeft",
              "TopCenter",
              "TopRight",
              "MiddleLeft",
              "MiddleCenter",
              "MiddleRight",
              "BottomLeft",
              "BottomCenter",
              "BottomRight"
            ]
          },
          {
            "name": "Width",
            "type": "number",
            "in": "formData",
            "required": true,
            "x-ms-summary": "Width",
            "description": "Width (X-axis right, negative to reverse)"
          },
          {
            "name": "Height",
            "type": "number",
            "in": "formData",
            "required": true,
            "x-ms-summary": "Height",
            "description": "Height (Y-axis down, negative to reverse)"
          },
          {
            "name": "file",
            "type": "file",
            "in": "formData",
            "x-ms-summary": "File",
            "description": "Source image file",
            "required": true
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "image/png",
          "image/gif",
          "image/jpeg",
          "image/bmp"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/GenerateQRCode": {
      "post": {
        "description": "Generate a QR code image",
        "operationId": "GenerateQRCode",
        "summary": "Files - Generate QR code",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "name": "inputQRCode",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputQRCode"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "image/png"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/FileToString": {
      "post": {
        "description": "Convert a file to a Base64 string",
        "operationId": "FileToString",
        "summary": "Files - File to string",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "name": "file",
            "type": "file",
            "in": "formData",
            "x-ms-summary": "File",
            "description": "Source file (10MB limit)",
            "required": true
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    },
    "/StringToFile": {
      "post": {
        "description": "Convert text string to file",
        "operationId": "StringToFile",
        "summary": "Text - String to File",
        "tags": [
          "Text"
        ],
        "parameters": [
          {
            "name": "inputStringToFile",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/inputStringToFile"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain",
          "text/html",
          "text/csv",
          "text/javascript",
          "text/css",
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "ERROR",
            "schema": {
              "$ref": "#/definitions/outputString"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "inputCollectionSearch": {
      "type": "object",
      "required": [
        "input",
        "match"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Values",
          "description": "Collection of strings to search"
        },
        "match": {
          "type": "string",
          "description": "Text to match",
          "x-ms-summary": "Text"
        },
        "trim": {
          "type": "string",
          "description": "Trim white space from comparison string",
          "x-ms-summary": "Trim",
          "enum": [
            "True",
            "False"
          ]
        },
        "ignorecase": {
          "type": "string",
          "x-ms-summary": "Ignore Case",
          "description": "Ignore case when performing comparison",
          "enum": [
            "True",
            "False"
          ]
        }
      },
      "example": {
        "input": [
          "the",
          "brown",
          "cow "
        ],
        "match": "cow",
        "trim": "True",
        "ignorecase": "True"
      }
    },
    "inputCollectionSearchNumeric": {
      "type": "object",
      "required": [
        "input",
        "match"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "x-ms-summary": "Values",
          "description": "Collection of strings to search"
        },
        "match": {
          "type": "number",
          "description": "Number to match",
          "x-ms-summary": "Number"
        },
        "type": {
          "type": "string",
          "x-ms-summary": "Number Type",
          "description": "Type of number - integer or decimal",
          "default": "Integer",
          "enum": [
            "Integer",
            "Decimal"
          ]
        }
      },
      "example": {
        "input": [
          1.25,
          10.5,
          20.75,
          51.25,
          119.6,
          301.25
        ],
        "match": "1.25,",
        "type": "Decimal"
      }
    },
    "inputCollectionModify": {
      "type": "object",
      "required": [
        "input"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of values or objects to modify"
        },
        "item": {
          "type": "string",
          "description": "Item (for multiple items, leave blank and use Items)",
          "x-ms-summary": "Item"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Items (Collection, for a single item leave blank and use Item)",
          "x-ms-summary": "Items"
        },
        "index": {
          "type": "string",
          "x-ms-summary": "Index",
          "description": "Index position for operation (leave blank to specify end of collection)"
        }
      },
      "example": {
        "input": [
          "a",
          "b",
          "c"
        ],
        "item": "d",
        "items": "",
        "index": "0"
      }
    },
    "inputCollectionFilter": {
      "type": "object",
      "required": [
        "input",
        "match",
        "keywords"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of strings to filter"
        },
        "match": {
          "type": "string",
          "default": "Any",
          "enum": [
            "Any",
            "All",
            "None"
          ],
          "x-ms-summary": "Match",
          "description": "Match type"
        },
        "keywords": {
          "type": "string",
          "x-ms-summary": "Keywords",
          "description": "Keywords (separate multiple values with commas)"
        }
      },
      "example": {
        "input": [
          "the cow",
          "jumped over",
          "the moon"
        ],
        "match": "Any",
        "keywords": "cow,moon"
      }
    },
    "inputCollectionSort": {
      "type": "object",
      "required": [
        "input",
        "order"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of strings to sort"
        },
        "order": {
          "type": "string",
          "default": "Ascending",
          "enum": [
            "Ascending",
            "Descending"
          ],
          "x-ms-summary": "Order",
          "description": "Sort order"
        }
      },
      "example": {
        "input": [
          "a",
          "d",
          "c",
          "b",
          "e"
        ],
        "order": "Ascending"
      }
    },
    "inputCollectionCount": {
      "type": "object",
      "required": [
        "input"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of items to count"
        }
      },
      "example": {
        "input": [
          "a",
          "d",
          "c",
          "b",
          "e"
        ]
      }
    },
    "inputCollectionSplit": {
      "type": "object",
      "required": [
        "input"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of items to split"
        },
        "match": {
          "type": "string",
          "x-ms-summary": "Match Value",
          "description": "String to match (explicit, case-insensitive, leave empty to use Index)"
        },
        "index": {
          "type": "string",
          "x-ms-summary": "Index",
          "description": "Index location to split (leave empty to use Match value)"
        }
      },
      "example": {
        "input": [
          "the cow",
          "jumped over",
          "the moon"
        ],
        "match": "jumped over",
        "index": ""
      }
    },
    "inputCollectionReplace": {
      "type": "object",
      "required": [
        "input",
        "match",
        "replacement",
        "ignoreCase"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Collection",
          "description": "Collection of strings"
        },
        "match": {
          "type": "string",
          "x-ms-summary": "Match value",
          "description": "Match value"
        },
        "replacement": {
          "type": "string",
          "x-ms-summary": "Replacement value",
          "description": "Replacement value"
        },
        "ignoreCase": {
          "type": "string",
          "default": "True",
          "enum": [
            "True",
            "False"
          ],
          "x-ms-summary": "Ignore case",
          "description": "Ignore case"
        }
      },
      "example": {
        "input": [
          "the brown cow",
          "jumped over",
          "the brown dog"
        ],
        "match": "Brown",
        "replacement": "spotted",
        "ignoreCase": "True"
      }
    },
    "inputCalculateNumber": {
      "type": "object",
      "required": [
        "input",
        "decimals"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Value",
          "description": "Numeric value to calculate"
        },
        "decimals": {
          "type": "number",
          "x-ms-summary": "Decimal Places",
          "description": "Round to number of decimal places",
          "minimum": 0,
          "default": 0
        }
      },
      "example": {
        "input": 0.195928,
        "decimals": 2
      }
    },
    "inputCalculateNumbers": {
      "type": "object",
      "required": [
        "input",
        "value",
        "decimals"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Primary Value",
          "description": "Numeric value"
        },
        "value": {
          "type": "number",
          "x-ms-summary": "Secondary Value",
          "description": "Addend, subtrahend, factor, divisor or radicand"
        },
        "decimals": {
          "type": "number",
          "x-ms-summary": "Decimal Places",
          "description": "Round to number of decimal places",
          "minimum": 0,
          "default": 0
        }
      },
      "example": {
        "input": 4,
        "value": 2,
        "decimals": 2
      }
    },
    "inputCalculateSeries": {
      "type": "object",
      "required": [
        "input",
        "decimals"
      ],
      "properties": {
        "input": {
          "type": "array",
          "description": "Colllection of values to calculate",
          "x-ms-summary": "Values",
          "items": {
            "type": "number"
          }
        },
        "decimals": {
          "type": "number",
          "description": "Round to number of decimal places",
          "x-ms-summary": "Decimal Places",
          "minimum": 0,
          "default": 0
        }
      },
      "example": {
        "input": [
          1,
          2,
          3,
          4,
          5
        ],
        "decimals": 2
      }
    },
    "inputCalculatePower": {
      "type": "object",
      "required": [
        "input",
        "power",
        "decimals"
      ],
      "properties": {
        "input": {
          "type": "number",
          "description": "Number to raise",
          "x-ms-summary": "Number"
        },
        "power": {
          "type": "number",
          "description": "Power",
          "x-ms-summary": "Power"
        },
        "decimals": {
          "type": "number",
          "description": "Round to number of decimal places",
          "x-ms-summary": "Decimal Places",
          "minimum": 0,
          "default": 0
        }
      },
      "example": {
        "input": 5.53,
        "power": 4,
        "decimals": 2
      }
    },
    "inputCalculateMinMax": {
      "type": "object",
      "required": [
        "input",
        "type"
      ],
      "properties": {
        "input": {
          "type": "array",
          "description": "Colllection of values to calculate",
          "x-ms-summary": "Values",
          "items": {
            "type": "number"
          }
        },
        "type": {
          "type": "string",
          "description": "Minimum or Maximum",
          "x-ms-summary": "Min or Max",
          "enum": [
            "Minimum",
            "Maximum"
          ],
          "default": "Minimum"
        }
      },
      "example": {
        "input": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "Minimum"
      }
    },
    "inputCollectionConversion": {
      "type": "object",
      "required": [
        "input",
        "name"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Collection containing strings to convert",
          "x-ms-summary": "Values"
        },
        "name": {
          "type": "string",
          "x-ms-summary": "Name",
          "description": "Collection name"
        }
      },
      "example": {
        "input": [
          "a",
          "b",
          "c",
          "d",
          "e"
        ],
        "name": "Items"
      }
    },
    "inputCollectionConversionXML": {
      "type": "object",
      "required": [
        "input",
        "root",
        "child"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Collection containing strings to convert",
          "x-ms-summary": "Values"
        },
        "root": {
          "type": "string",
          "x-ms-summary": "Root Node Name",
          "description": "Name of root XML node"
        },
        "child": {
          "type": "string",
          "x-ms-summary": "Child Node Name",
          "description": "Name of child XML node(s)"
        }
      },
      "example": {
        "input": [
          "a",
          "b",
          "c",
          "d",
          "e"
        ],
        "root": "Items",
        "child": "Item"
      }
    },
    "inputCaseConversion": {
      "type": "object",
      "required": [
        "input",
        "alphacase"
      ],
      "properties": {
        "input": {
          "type": "string",
          "description": "String containing the text to convert",
          "x-ms-summary": "Value"
        },
        "alphacase": {
          "type": "string",
          "enum": [
            "Upper",
            "Lower",
            "Title"
          ],
          "description": "Case of conversion result",
          "x-ms-summary": "Case"
        }
      },
      "example": {
        "input": "the brown cow",
        "alphacase": "Upper"
      }
    },
    "inputConvertAngle": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "Arcminute",
            "Arcsecond",
            "Centiradian",
            "Deciradian",
            "Degree",
            "Gradian",
            "Microdegree",
            "Microradian",
            "Millidegree",
            "Milliradian",
            "Nanodegree",
            "Nanoradian",
            "Radian",
            "Revolution"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "Arcminute",
            "Arcsecond",
            "Centiradian",
            "Deciradian",
            "Degree",
            "Gradian",
            "Microdegree",
            "Microradian",
            "Millidegree",
            "Milliradian",
            "Nanodegree",
            "Nanoradian",
            "Radian",
            "Revolution"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 16.036844,
        "source": "Arcminute",
        "target": "Arcsecond"
      }
    },
    "inputConvertDuration": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "Day",
            "Hour",
            "Microsecond",
            "Millisecond",
            "Minute",
            "Month",
            "Nanosecond",
            "Second",
            "Week",
            "Year"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "Day",
            "Hour",
            "Microsecond",
            "Millisecond",
            "Minute",
            "Month",
            "Nanosecond",
            "Second",
            "Week",
            "Year"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 0.66375,
        "source": "Day",
        "target": "Hour"
      }
    },
    "inputConvertDistance": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "Centimeter",
            "Decimeter",
            "Fathom",
            "Foot",
            "Hectometer",
            "Inch",
            "Kilometer",
            "LightYear",
            "Meter",
            "Micrometer",
            "Mile",
            "Millimeter",
            "Nanometer",
            "NauticalMile",
            "Yard"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "Centimeter",
            "Decimeter",
            "Fathom",
            "Foot",
            "Hectometer",
            "Inch",
            "Kilometer",
            "LightYear",
            "Meter",
            "Micrometer",
            "Mile",
            "Millimeter",
            "Nanometer",
            "NauticalMile",
            "Yard"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 0.525505,
        "source": "Meter",
        "target": "Foot"
      }
    },
    "inputConvertArea": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "Acre",
            "Hectare",
            "SquareCentimeter",
            "SquareDecimeter",
            "SquareFoot",
            "SquareInch",
            "SquareKilometer",
            "SquareMeter",
            "SquareMicrometer",
            "SquareMile",
            "SquareMillimeter",
            "SquareYard"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "Acre",
            "Hectare",
            "SquareCentimeter",
            "SquareDecimeter",
            "SquareFoot",
            "SquareInch",
            "SquareKilometer",
            "SquareMeter",
            "SquareMicrometer",
            "SquareMile",
            "SquareMillimeter",
            "SquareYard"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 0.416714,
        "source": "Acre",
        "target": "SquareFoot"
      }
    },
    "inputConvertEnergy": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "BritishThermalUnit",
            "Calorie",
            "ElectronVolt",
            "FootPound",
            "GigawattHour",
            "Joule",
            "Kilocalorie",
            "Kilojoule",
            "KilowattHour",
            "Megajoule",
            "MegawattHour",
            "TerawattHour",
            "Therm (EU)",
            "Therm (UK)",
            "Therm (US)",
            "WattHour"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "BritishThermalUnit",
            "Calorie",
            "ElectronVolt",
            "FootPound",
            "GigawattHour",
            "Joule",
            "Kilocalorie",
            "Kilojoule",
            "KilowattHour",
            "Megajoule",
            "MegawattHour",
            "TerawattHour",
            "Therm (EU)",
            "Therm (UK)",
            "Therm (US)",
            "WattHour"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 0.397155,
        "source": "Calorie",
        "target": "Joule"
      }
    },
    "inputConvertPower": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "BritishThermalUnitPerHour",
            "Decawatt",
            "Deciwatt",
            "ElectricalHorsepower",
            "Femtowatt",
            "Gigawatt",
            "HydraulicHorsepower",
            "Kilowatt",
            "MechanicalHorsepower",
            "Megawatt",
            "Microwatt",
            "Milliwatt",
            "Nanowatt",
            "Petawatt",
            "Picowatt",
            "Terawatt",
            "Watt"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "BritishThermalUnitPerHour",
            "Decawatt",
            "Deciwatt",
            "ElectricalHorsepower",
            "Femtowatt",
            "Gigawatt",
            "HydraulicHorsepower",
            "Kilowatt",
            "MechanicalHorsepower",
            "Megawatt",
            "Microwatt",
            "Milliwatt",
            "Nanowatt",
            "Petawatt",
            "Picowatt",
            "Terawatt",
            "Watt"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 0.866107,
        "source": "Gigawatt",
        "target": "Kilowatt"
      }
    },
    "inputConvertSpeed": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "CentimeterPerHour",
            "CentimeterPerMinute",
            "CentimeterPerSecond",
            "DecimeterPerMinute",
            "DecimeterPerSecond",
            "FootPerHour",
            "FootPerMinute",
            "FootPerSecond",
            "InchPerHour",
            "InchPerMinute",
            "InchPerSecond",
            "KilometerPerHour",
            "KilometerPerMinute",
            "KilometerPerSecond",
            "Knot",
            "MeterPerHour",
            "MeterPerMinute",
            "MeterPerSecond",
            "MicrometerPerMinute",
            "MicrometerPerSecond",
            "MilePerHour",
            "MillimeterPerHour",
            "MillimeterPerMinute",
            "MillimeterPerSecond",
            "NanometerPerMinute",
            "NanometerPerSecond",
            "YardPerHour",
            "YardPerMinute",
            "YardPerSecond"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "CentimeterPerHour",
            "CentimeterPerMinute",
            "CentimeterPerSecond",
            "DecimeterPerMinute",
            "DecimeterPerSecond",
            "FootPerHour",
            "FootPerMinute",
            "FootPerSecond",
            "InchPerHour",
            "InchPerMinute",
            "InchPerSecond",
            "KilometerPerHour",
            "KilometerPerMinute",
            "KilometerPerSecond",
            "Knot",
            "MeterPerHour",
            "MeterPerMinute",
            "MeterPerSecond",
            "MicrometerPerMinute",
            "MicrometerPerSecond",
            "MilePerHour",
            "MillimeterPerHour",
            "MillimeterPerMinute",
            "MillimeterPerSecond",
            "NanometerPerMinute",
            "NanometerPerSecond",
            "YardPerHour",
            "YardPerMinute",
            "YardPerSecond"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 0.278054,
        "source": "Knot",
        "target": "MilePerHour"
      }
    },
    "inputConvertTemperature": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "Celsius",
            "Fahrenheit",
            "Newton",
            "Kelvin"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "Celsius",
            "Fahrenheit",
            "Newton",
            "Kelvin"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 10,
        "source": "Celsius",
        "target": "Fahrenheit"
      }
    },
    "inputConvertVolume": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "Centiliter",
            "CubicCentimeter",
            "CubicDecimeter",
            "CubicFoot",
            "CubicHectometer",
            "CubicInch",
            "CubicKilometer",
            "CubicMeter",
            "CubicMillimeter",
            "CubicYard",
            "Deciliter",
            "ImperialBeerBarrel",
            "ImperialGallon",
            "ImperialOunce",
            "ImperialPint",
            "Kiloliter",
            "Liter",
            "Microliter",
            "Milliliter",
            "Gallon",
            "Cup",
            "Ounce",
            "Pint",
            "Quart",
            "Tablespoon",
            "Teaspoon"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "Centiliter",
            "CubicCentimeter",
            "CubicDecimeter",
            "CubicFoot",
            "CubicHectometer",
            "CubicInch",
            "CubicKilometer",
            "CubicMeter",
            "CubicMillimeter",
            "CubicYard",
            "Deciliter",
            "ImperialBeerBarrel",
            "ImperialGallon",
            "ImperialOunce",
            "ImperialPint",
            "Kiloliter",
            "Liter",
            "Microliter",
            "Milliliter",
            "Gallon",
            "Cup",
            "Ounce",
            "Pint",
            "Quart",
            "Tablespoon",
            "Teaspoon"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 1.5,
        "source": "CubicFoot",
        "target": "CubicMeter"
      }
    },
    "inputConvertWeight": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Measurement value"
        },
        "source": {
          "type": "string",
          "enum": [
            "Centigram",
            "Decagram",
            "Decigram",
            "Grain",
            "Gram",
            "Hectogram",
            "Kilogram",
            "Microgram",
            "Milligram",
            "Nanogram",
            "Ounce",
            "Pound",
            "Stone",
            "Solar Mass",
            "Earth Mass",
            "Slug",
            "Short Ton",
            "Long Ton",
            "Ton",
            "Megaton",
            "Short Hundredweight",
            "Long Hundredweight"
          ],
          "x-ms-summary": "Source measurement"
        },
        "target": {
          "type": "string",
          "enum": [
            "Centigram",
            "Decagram",
            "Decigram",
            "Grain",
            "Gram",
            "Hectogram",
            "Kilogram",
            "Microgram",
            "Milligram",
            "Nanogram",
            "Ounce",
            "Pound",
            "Stone",
            "Ton"
          ],
          "x-ms-summary": "Target measurement"
        }
      },
      "example": {
        "input": 5.7,
        "source": "Gram",
        "target": "Ounce"
      }
    },
    "inputCsvConversionJSON": {
      "type": "object",
      "required": [
        "input",
        "header"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "CSV string"
        },
        "header": {
          "type": "boolean",
          "default": true,
          "x-ms-summary": "Header",
          "description": "Include header row"
        }
      },
      "example": {
        "input": "Property1,Property2,Property3\r\nvalue,value,value\r\nvalue,value,value",
        "header": true
      }
    },
    "inputCurrencyConversion": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Value",
          "description": "Amount to convert"
        },
        "source": {
          "type": "string",
          "default": "USD",
          "enum": [
            "USD",
            "AUD",
            "BGN",
            "BRL",
            "CAD",
            "CHF",
            "CNY",
            "CZK",
            "DKK",
            "EUR",
            "GBP",
            "HKD",
            "HRK",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "ISK",
            "JPY",
            "KRW",
            "MXN",
            "MYR",
            "NOK",
            "NZD",
            "PHP",
            "PLN",
            "RON",
            "RUB",
            "SGD",
            "SEK",
            "THB",
            "TRY",
            "ZAR"
          ],
          "x-ms-summary": "Source currency"
        },
        "target": {
          "type": "string",
          "enum": [
            "USD",
            "AUD",
            "BGN",
            "BRL",
            "CAD",
            "CHF",
            "CNY",
            "CZK",
            "DKK",
            "EUR",
            "GBP",
            "HKD",
            "HRK",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "ISK",
            "JPY",
            "KRW",
            "MXN",
            "MYR",
            "NOK",
            "NZD",
            "PHP",
            "PLN",
            "RON",
            "RUB",
            "SGD",
            "SEK",
            "THB",
            "TRY",
            "ZAR"
          ],
          "x-ms-summary": "Target currency"
        }
      },
      "example": {
        "input": 100.25,
        "source": "USD",
        "target": "CAD"
      }
    },
    "inputCurrencyFormat": {
      "type": "object",
      "required": [
        "input",
        "target"
      ],
      "properties": {
        "input": {
          "type": "number",
          "x-ms-summary": "Value",
          "description": "Amount to format"
        },
        "target": {
          "type": "string",
          "enum": [
            "USD",
            "AUD",
            "BGN",
            "BRL",
            "CAD",
            "CHF",
            "CNY",
            "CZK",
            "DKK",
            "EUR",
            "GBP",
            "HKD",
            "HRK",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "ISK",
            "JPY",
            "KRW",
            "MXN",
            "MYR",
            "NOK",
            "NZD",
            "PHP",
            "PLN",
            "RON",
            "RUB",
            "SGD",
            "SEK",
            "THB",
            "TRY",
            "ZAR"
          ],
          "x-ms-summary": "Target currency"
        }
      },
      "example": {
        "input": 10980.79,
        "target": "GBP"
      }
    },
    "inputDateTimeConversion": {
      "type": "object",
      "required": [
        "input",
        "source",
        "target"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Source date and time"
        },
        "source": {
          "type": "string",
          "default": "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
          "enum": [
            "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
            "Greenwich Standard Time - (GMT) Monrovia, Reykjavik",
            "W. Europe Standard Time - (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
            "Central Europe Standard Time - (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
            "Central European Standard Time - (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
            "W. Central Africa Standard Time - (GMT+01:00) West Central Africa",
            "GTB Standard Time - (GMT+02:00) Athens, Bucharest, Istanbul",
            "Middle East Standard Time - (GMT+02:00) Beirut",
            "Egypt Standard Time - (GMT+02:00) Cairo",
            "South Africa Standard Time - (GMT+02:00) Harare, Pretoria",
            "FLE Standard Time - (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",
            "Israel Standard Time - (GMT+02:00) Jerusalem",
            "E. Europe Standard Time - (GMT+02:00) Minsk",
            "Namibia Standard Time - (GMT+02:00) Windhoek",
            "Arabic Standard Time - (GMT+03:00) Baghdad",
            "Arab Standard Time - (GMT+03:00) Kuwait, Riyadh",
            "Russian Standard Time - (GMT+03:00) Moscow, St. Petersburg, Volgograd",
            "E. Africa Standard Time - (GMT+03:00) Nairobi",
            "Georgian Standard Time - (GMT+03:00) Tbilisi",
            "Iran Standard Time - (GMT+03:30) Tehran",
            "Arabian Standard Time - (GMT+04:00) Abu Dhabi, Muscat",
            "Azerbaijan Standard Time - (GMT+04:00) Baku",
            "Mauritius Standard Time - (GMT+04:00) Port Louis",
            "Caucasus Standard Time - (GMT+04:00) Yerevan",
            "Afghanistan Standard Time - (GMT+04:30) Kabul",
            "Ekaterinburg Standard Time - (GMT+05:00) Ekaterinburg",
            "Pakistan Standard Time - (GMT+05:00) Islamabad, Karachi",
            "West Asia Standard Time - (GMT+05:00) Tashkent",
            "India Standard Time - (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi",
            "Sri Lanka Standard Time - (GMT+05:30) Sri Jayawardenepura",
            "Nepal Standard Time - (GMT+05:45) Kathmandu",
            "N. Central Asia Standard Time - (GMT+06:00) Almaty, Novosibirsk",
            "Central Asia Standard Time - (GMT+06:00) Astana, Dhaka",
            "Myanmar Standard Time - (GMT+06:30) Yangon (Rangoon)",
            "SE Asia Standard Time - (GMT+07:00) Bangkok, Hanoi, Jakarta",
            "North Asia Standard Time - (GMT+07:00) Krasnoyarsk",
            "China Standard Time - (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
            "North Asia East Standard Time - (GMT+08:00) Irkutsk, Ulaan Bataar",
            "Singapore Standard Time - (GMT+08:00) Kuala Lumpur, Singapore",
            "W. Australia Standard Time - (GMT+08:00) Perth",
            "Taipei Standard Time - (GMT+08:00) Taipei",
            "Tokyo Standard Time - (GMT+09:00) Osaka, Sapporo, Tokyo",
            "Korea Standard Time - (GMT+09:00) Seoul",
            "Yakutsk Standard Time - (GMT+09:00) Yakutsk",
            "Cen. Australia Standard Time - (GMT+09:30) Adelaide",
            "AUS Central Standard Time - (GMT+09:30) Darwin",
            "E. Australia Standard Time - (GMT+10:00) Brisbane",
            "AUS Eastern Standard Time - (GMT+10:00) Canberra, Melbourne, Sydney",
            "West Pacific Standard Time - (GMT+10:00) Guam, Port Moresby",
            "Tasmania Standard Time - (GMT+10:00) Hobart",
            "Vladivostok Standard Time - (GMT+10:00) Vladivostok",
            "Central Pacific Standard Time - (GMT+11:00) Magadan, Solomon Is., New Caledonia",
            "New Zealand Standard Time - (GMT+12:00) Auckland, Wellington",
            "Fiji Standard Time - (GMT+12:00) Fiji, Kamchatka, Marshall Is.",
            "Tonga Standard Time - (GMT+13:00) Nuku'alofa",
            "Azores Standard Time - (GMT-01:00) Azores",
            "Cape Verde Standard Time - (GMT-01:00) Cape Verde Is.",
            "Mid-Atlantic Standard Time - (GMT-02:00) Mid-Atlantic",
            "E. South America Standard Time - (GMT-03:00) Brasilia",
            "Argentina Standard Time - (GMT-03:00) Buenos Aires",
            "SA Eastern Standard Time - (GMT-03:00) Georgetown",
            "Greenland Standard Time - (GMT-03:00) Greenland",
            "Montevideo Standard Time - (GMT-03:00) Montevideo",
            "Newfoundland Standard Time - (GMT-03:30) Newfoundland",
            "Atlantic Standard Time - (GMT-04:00) Atlantic Time (Canada)",
            "SA Western Standard Time - (GMT-04:00) La Paz",
            "Central Brazilian Standard Time - (GMT-04:00) Manaus",
            "Pacific SA Standard Time - (GMT-04:00) Santiago",
            "Venezuela Standard Time - (GMT-04:30) Caracas",
            "SA Pacific Standard Time - (GMT-05:00) Bogota, Lima, Quito, Rio Branco",
            "Eastern Standard Time - (GMT-05:00) Eastern Time (US & Canada)",
            "US Eastern Standard Time - (GMT-05:00) Indiana (East)",
            "Central America Standard Time - (GMT-06:00) Central America",
            "Central Standard Time - (GMT-06:00) Central Time (US & Canada)",
            "Central Standard Time (Mexico) - (GMT-06:00) Guadalajara, Mexico City, Monterrey",
            "Canada Central Standard Time - (GMT-06:00) Saskatchewan",
            "US Mountain Standard Time - (GMT-07:00) Arizona",
            "Mountain Standard Time (Mexico) - (GMT-07:00) Chihuahua, La Paz, Mazatlan",
            "Mountain Standard Time - (GMT-07:00) Mountain Time (US & Canada)",
            "Pacific Standard Time - (GMT-08:00) Pacific Time (US & Canada)",
            "Pacific Standard Time (Mexico) - (GMT-08:00) Tijuana, Baja California",
            "Alaskan Standard Time - (GMT-09:00) Alaska",
            "Hawaiian Standard Time - (GMT-10:00) Hawaii",
            "Samoa Standard Time - (GMT-11:00) Midway Island, Samoa",
            "Dateline Standard Time - (GMT-12:00) International Date Line West"
          ],
          "x-ms-summary": "Source Time Zone"
        },
        "target": {
          "type": "string",
          "default": "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
          "enum": [
            "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
            "Greenwich Standard Time - (GMT) Monrovia, Reykjavik",
            "W. Europe Standard Time - (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
            "Central Europe Standard Time - (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
            "Central European Standard Time - (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
            "W. Central Africa Standard Time - (GMT+01:00) West Central Africa",
            "GTB Standard Time - (GMT+02:00) Athens, Bucharest, Istanbul",
            "Middle East Standard Time - (GMT+02:00) Beirut",
            "Egypt Standard Time - (GMT+02:00) Cairo",
            "South Africa Standard Time - (GMT+02:00) Harare, Pretoria",
            "FLE Standard Time - (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",
            "Israel Standard Time - (GMT+02:00) Jerusalem",
            "E. Europe Standard Time - (GMT+02:00) Minsk",
            "Namibia Standard Time - (GMT+02:00) Windhoek",
            "Arabic Standard Time - (GMT+03:00) Baghdad",
            "Arab Standard Time - (GMT+03:00) Kuwait, Riyadh",
            "Russian Standard Time - (GMT+03:00) Moscow, St. Petersburg, Volgograd",
            "E. Africa Standard Time - (GMT+03:00) Nairobi",
            "Georgian Standard Time - (GMT+03:00) Tbilisi",
            "Iran Standard Time - (GMT+03:30) Tehran",
            "Arabian Standard Time - (GMT+04:00) Abu Dhabi, Muscat",
            "Azerbaijan Standard Time - (GMT+04:00) Baku",
            "Mauritius Standard Time - (GMT+04:00) Port Louis",
            "Caucasus Standard Time - (GMT+04:00) Yerevan",
            "Afghanistan Standard Time - (GMT+04:30) Kabul",
            "Ekaterinburg Standard Time - (GMT+05:00) Ekaterinburg",
            "Pakistan Standard Time - (GMT+05:00) Islamabad, Karachi",
            "West Asia Standard Time - (GMT+05:00) Tashkent",
            "India Standard Time - (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi",
            "Sri Lanka Standard Time - (GMT+05:30) Sri Jayawardenepura",
            "Nepal Standard Time - (GMT+05:45) Kathmandu",
            "N. Central Asia Standard Time - (GMT+06:00) Almaty, Novosibirsk",
            "Central Asia Standard Time - (GMT+06:00) Astana, Dhaka",
            "Myanmar Standard Time - (GMT+06:30) Yangon (Rangoon)",
            "SE Asia Standard Time - (GMT+07:00) Bangkok, Hanoi, Jakarta",
            "North Asia Standard Time - (GMT+07:00) Krasnoyarsk",
            "China Standard Time - (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
            "North Asia East Standard Time - (GMT+08:00) Irkutsk, Ulaan Bataar",
            "Singapore Standard Time - (GMT+08:00) Kuala Lumpur, Singapore",
            "W. Australia Standard Time - (GMT+08:00) Perth",
            "Taipei Standard Time - (GMT+08:00) Taipei",
            "Tokyo Standard Time - (GMT+09:00) Osaka, Sapporo, Tokyo",
            "Korea Standard Time - (GMT+09:00) Seoul",
            "Yakutsk Standard Time - (GMT+09:00) Yakutsk",
            "Cen. Australia Standard Time - (GMT+09:30) Adelaide",
            "AUS Central Standard Time - (GMT+09:30) Darwin",
            "E. Australia Standard Time - (GMT+10:00) Brisbane",
            "AUS Eastern Standard Time - (GMT+10:00) Canberra, Melbourne, Sydney",
            "West Pacific Standard Time - (GMT+10:00) Guam, Port Moresby",
            "Tasmania Standard Time - (GMT+10:00) Hobart",
            "Vladivostok Standard Time - (GMT+10:00) Vladivostok",
            "Central Pacific Standard Time - (GMT+11:00) Magadan, Solomon Is., New Caledonia",
            "New Zealand Standard Time - (GMT+12:00) Auckland, Wellington",
            "Fiji Standard Time - (GMT+12:00) Fiji, Kamchatka, Marshall Is.",
            "Tonga Standard Time - (GMT+13:00) Nuku'alofa",
            "Azores Standard Time - (GMT-01:00) Azores",
            "Cape Verde Standard Time - (GMT-01:00) Cape Verde Is.",
            "Mid-Atlantic Standard Time - (GMT-02:00) Mid-Atlantic",
            "E. South America Standard Time - (GMT-03:00) Brasilia",
            "Argentina Standard Time - (GMT-03:00) Buenos Aires",
            "SA Eastern Standard Time - (GMT-03:00) Georgetown",
            "Greenland Standard Time - (GMT-03:00) Greenland",
            "Montevideo Standard Time - (GMT-03:00) Montevideo",
            "Newfoundland Standard Time - (GMT-03:30) Newfoundland",
            "Atlantic Standard Time - (GMT-04:00) Atlantic Time (Canada)",
            "SA Western Standard Time - (GMT-04:00) La Paz",
            "Central Brazilian Standard Time - (GMT-04:00) Manaus",
            "Pacific SA Standard Time - (GMT-04:00) Santiago",
            "Venezuela Standard Time - (GMT-04:30) Caracas",
            "SA Pacific Standard Time - (GMT-05:00) Bogota, Lima, Quito, Rio Branco",
            "Eastern Standard Time - (GMT-05:00) Eastern Time (US & Canada)",
            "US Eastern Standard Time - (GMT-05:00) Indiana (East)",
            "Central America Standard Time - (GMT-06:00) Central America",
            "Central Standard Time - (GMT-06:00) Central Time (US & Canada)",
            "Central Standard Time (Mexico) - (GMT-06:00) Guadalajara, Mexico City, Monterrey",
            "Canada Central Standard Time - (GMT-06:00) Saskatchewan",
            "US Mountain Standard Time - (GMT-07:00) Arizona",
            "Mountain Standard Time (Mexico) - (GMT-07:00) Chihuahua, La Paz, Mazatlan",
            "Mountain Standard Time - (GMT-07:00) Mountain Time (US & Canada)",
            "Pacific Standard Time - (GMT-08:00) Pacific Time (US & Canada)",
            "Pacific Standard Time (Mexico) - (GMT-08:00) Tijuana, Baja California",
            "Alaskan Standard Time - (GMT-09:00) Alaska",
            "Hawaiian Standard Time - (GMT-10:00) Hawaii",
            "Samoa Standard Time - (GMT-11:00) Midway Island, Samoa",
            "Dateline Standard Time - (GMT-12:00) International Date Line West"
          ],
          "x-ms-summary": "Target Time Zone"
        },
        "format": {
          "type": "string",
          "x-ms-summary": "Format",
          "description": "Display format (defaults to 'yyyy-MM-dd HH:mm:ss')"
        }
      },
      "example": {
        "input": "03/10/2010 09:00:00",
        "source": "GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
        "target": "Central Standard Time - (GMT-06:00) Central Time (US & Canada)",
        "format": "yyyy-MM-dd HH:mm:ss"
      }
    },
    "inputDateTimeFormat": {
      "type": "object",
      "required": [
        "input",
        "culture",
        "format"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Source date and time"
        },
        "culture": {
          "type": "string",
          "default": "en-US",
          "enum": [
            "en-US",
            "af-ZA",
            "ar-AE",
            "ar-BH",
            "ar-DZ",
            "ar-EG",
            "ar-IQ",
            "ar-JO",
            "ar-KW",
            "ar-LB",
            "ar-LY",
            "ar-MA",
            "ar-OM",
            "ar-QA",
            "ar-SA",
            "ar-SY",
            "ar-TN",
            "ar-YE",
            "az-AZ",
            "be-BY",
            "bg-BG",
            "bs-BA",
            "ca-ES",
            "cs-CZ",
            "cy-GB",
            "da-DK",
            "de-AT",
            "de-CH",
            "de-DE",
            "de-LI",
            "de-LU",
            "el-GR",
            "en-AU",
            "en-BZ",
            "en-CA",
            "en-CB",
            "en-GB",
            "en-IE",
            "en-JM",
            "en-NZ",
            "en-PH",
            "en-TT",
            "en-ZA",
            "en-ZW",
            "es-AR",
            "es-BO",
            "es-CL",
            "es-CO",
            "es-CR",
            "es-DO",
            "es-EC",
            "es-ES",
            "es-GT",
            "es-HN",
            "es-MX",
            "es-NI",
            "es-PA",
            "es-PE",
            "es-PR",
            "es-PY",
            "es-SV",
            "es-UY",
            "es-VE",
            "et-EE",
            "eu-ES",
            "fa-IR",
            "fi-FI",
            "fo-FO",
            "fr-BE",
            "fr-CA",
            "fr-CH",
            "fr-FR",
            "fr-LU",
            "fr-MC",
            "gl-ES",
            "gu-IN",
            "he-IL",
            "hi-IN",
            "hr-BA",
            "hr-HR",
            "hu-HU",
            "hy-AM",
            "id-ID",
            "is-IS",
            "it-CH",
            "it-IT",
            "ja-JP",
            "ka-GE",
            "kk-KZ",
            "kn-IN",
            "ko-KR",
            "ky-KG",
            "lt-LT",
            "lv-LV",
            "mi-NZ",
            "mn-MN",
            "mr-IN",
            "ms-BN",
            "ms-MY",
            "mt-MT",
            "nl-BE",
            "nl-NL",
            "nn-NO",
            "ns-ZA",
            "pa-IN",
            "pl-PL",
            "ps-AR",
            "pt-BR",
            "pt-PT",
            "ro-RO",
            "ru-RU",
            "sa-IN",
            "sk-SK",
            "sl-SI",
            "sq-AL",
            "sr-BA",
            "sr-SP",
            "sv-FI",
            "sv-SE",
            "sw-KE",
            "ta-IN",
            "te-IN",
            "th-TH",
            "tl-PH",
            "tn-ZA",
            "tr-TR",
            "uk-UA",
            "ur-PK",
            "uz-UZ",
            "vi-VN",
            "zh-CN",
            "zh-HK",
            "zh-MO",
            "zh-SG",
            "zh-TW",
            "zu-ZA"
          ],
          "x-ms-summary": "Culture",
          "description": "Language culture"
        },
        "format": {
          "type": "string",
          "x-ms-summary": "Format",
          "description": "Output format"
        }
      },
      "example": {
        "input": "03/10/2010 00:00:00",
        "culture": "en-GB",
        "format": "ddd"
      }
    },
    "inputDateTimeInfo": {
      "type": "object",
      "required": [
        "input",
        "culture"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Source date and time"
        },
        "culture": {
          "type": "string",
          "default": "en-US",
          "enum": [
            "en-US",
            "af-ZA",
            "ar-AE",
            "ar-BH",
            "ar-DZ",
            "ar-EG",
            "ar-IQ",
            "ar-JO",
            "ar-KW",
            "ar-LB",
            "ar-LY",
            "ar-MA",
            "ar-OM",
            "ar-QA",
            "ar-SA",
            "ar-SY",
            "ar-TN",
            "ar-YE",
            "az-AZ",
            "be-BY",
            "bg-BG",
            "bs-BA",
            "ca-ES",
            "cs-CZ",
            "cy-GB",
            "da-DK",
            "de-AT",
            "de-CH",
            "de-DE",
            "de-LI",
            "de-LU",
            "el-GR",
            "en-AU",
            "en-BZ",
            "en-CA",
            "en-CB",
            "en-GB",
            "en-IE",
            "en-JM",
            "en-NZ",
            "en-PH",
            "en-TT",
            "en-ZA",
            "en-ZW",
            "es-AR",
            "es-BO",
            "es-CL",
            "es-CO",
            "es-CR",
            "es-DO",
            "es-EC",
            "es-ES",
            "es-GT",
            "es-HN",
            "es-MX",
            "es-NI",
            "es-PA",
            "es-PE",
            "es-PR",
            "es-PY",
            "es-SV",
            "es-UY",
            "es-VE",
            "et-EE",
            "eu-ES",
            "fa-IR",
            "fi-FI",
            "fo-FO",
            "fr-BE",
            "fr-CA",
            "fr-CH",
            "fr-FR",
            "fr-LU",
            "fr-MC",
            "gl-ES",
            "gu-IN",
            "he-IL",
            "hi-IN",
            "hr-BA",
            "hr-HR",
            "hu-HU",
            "hy-AM",
            "id-ID",
            "is-IS",
            "it-CH",
            "it-IT",
            "ja-JP",
            "ka-GE",
            "kk-KZ",
            "kn-IN",
            "ko-KR",
            "ky-KG",
            "lt-LT",
            "lv-LV",
            "mi-NZ",
            "mn-MN",
            "mr-IN",
            "ms-BN",
            "ms-MY",
            "mt-MT",
            "nl-BE",
            "nl-NL",
            "nn-NO",
            "ns-ZA",
            "pa-IN",
            "pl-PL",
            "ps-AR",
            "pt-BR",
            "pt-PT",
            "ro-RO",
            "ru-RU",
            "sa-IN",
            "sk-SK",
            "sl-SI",
            "sq-AL",
            "sr-BA",
            "sr-SP",
            "sv-FI",
            "sv-SE",
            "sw-KE",
            "ta-IN",
            "te-IN",
            "th-TH",
            "tl-PH",
            "tn-ZA",
            "tr-TR",
            "uk-UA",
            "ur-PK",
            "uz-UZ",
            "vi-VN",
            "zh-CN",
            "zh-HK",
            "zh-MO",
            "zh-SG",
            "zh-TW",
            "zu-ZA"
          ],
          "x-ms-summary": "Culture",
          "description": "Language culture"
        }
      },
      "example": {
        "input": "03/10/2010 09:00:00",
        "culture": "en-GB"
      }
    },
    "inputDateTimeDifference": {
      "type": "object",
      "required": [
        "dateTime1",
        "dateTime2"
      ],
      "properties": {
        "dateTime1": {
          "type": "string",
          "x-ms-summary": "First date/time value",
          "description": "First date/time value"
        },
        "dateTime2": {
          "type": "string",
          "x-ms-summary": "Second date/time value",
          "description": "Second date/time value"
        }
      },
      "example": {
        "dateTime1": "1/1/2010 12:37:19",
        "dateTime2": "3/15/2011 14:27:49"
      }
    },
    "inputGenerateUniqueID": {
      "type": "object",
      "required": [
        "uppercase"
      ],
      "properties": {
        "uppercase": {
          "type": "string",
          "x-ms-summary": "Uppercase",
          "description": "All uppercase alpha characters",
          "enum": [
            "True",
            "False"
          ]
        }
      },
      "example": {
        "uppercase": "True"
      }
    },
    "inputJoinStrings": {
      "type": "object",
      "required": [
        "input",
        "separator",
        "lower",
        "trim"
      ],
      "properties": {
        "input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Values",
          "description": "Collection of strings to be joined"
        },
        "separator": {
          "type": "string",
          "x-ms-summary": "Separator",
          "description": "Separator character"
        },
        "lower": {
          "type": "string",
          "x-ms-summary": "Lowercase",
          "description": "Convert strings in collection to lowercase",
          "enum": [
            "True",
            "False"
          ]
        },
        "trim": {
          "type": "string",
          "x-ms-summary": "Trim",
          "description": "Trim strings in collection",
          "enum": [
            "True",
            "False"
          ]
        }
      },
      "example": {
        "input": [
          "The",
          "brown",
          "cow"
        ],
        "separator": ";",
        "lower": "True",
        "trim": "True"
      }
    },
    "inputJsonConversionCSV": {
      "type": "object",
      "required": [
        "input",
        "header"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "JSON array object"
        },
        "header": {
          "type": "boolean",
          "default": true,
          "x-ms-summary": "Header",
          "description": "Include header row"
        },
        "omit": {
          "type": "string",
          "x-ms-summary": "Omit Columns",
          "description": "Columns to omit (comma separated)"
        },
        "order": {
          "type": "string",
          "x-ms-summary": "Order",
          "description": "Column order (comma separated)"
        }
      },
      "example": {
        "input": [
          {
            "property1": "value"
          },
          {
            "property2": "value"
          },
          {
            "property3": "value"
          }
        ],
        "header": true,
        "omit": "property1",
        "order": "property3,property2"
      }
    },
    "inputJsonConversionHTML": {
      "type": "object",
      "required": [
        "input",
        "header"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "JSON array object"
        },
        "header": {
          "type": "boolean",
          "default": true,
          "x-ms-summary": "Header",
          "description": "Include header row"
        },
        "alternate": {
          "type": "string",
          "x-ms-summary": "Alternate Header",
          "description": "Alternate header row markup"
        },
        "attributes": {
          "type": "string",
          "x-ms-summary": "Table Attributes",
          "description": "Optional table attributes (single quoted values)"
        },
        "omit": {
          "type": "string",
          "x-ms-summary": "Omit Columns",
          "description": "Columns to omit (comma separated)"
        },
        "order": {
          "type": "string",
          "x-ms-summary": "Order",
          "description": "Column order (comma separated)"
        }
      },
      "example": {
        "input": [
          {
            "property1": "value"
          },
          {
            "property2": "value"
          },
          {
            "property3": "value"
          }
        ],
        "header": false,
        "alternate": "<tr><th>Property 3</th><th>Property 2</th></tr>",
        "attributes": "style='width:100%;text-align:center;'",
        "omit": "property1",
        "order": "property3,property2"
      }
    },
    "inputJsonConversionXML": {
      "type": "object",
      "required": [
        "input",
        "root"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "JSON array object"
        },
        "root": {
          "type": "string",
          "x-ms-summary": "Root Name",
          "description": "Name of root node"
        }
      },
      "example": {
        "input": "{\"property1\":\"value\",\"property2\":\"value\",\"property3\":\"value\"}",
        "root": "Properties"
      }
    },
    "inputNumberRange": {
      "type": "object",
      "required": [
        "start",
        "end"
      ],
      "properties": {
        "start": {
          "type": "number",
          "x-ms-summary": "Start",
          "description": "Start of range",
          "minimum": 0,
          "default": 0
        },
        "end": {
          "type": "number",
          "x-ms-summary": "End",
          "description": "End of range",
          "minimum": 0,
          "default": 0
        }
      },
      "example": {
        "start": 1,
        "end": 1000000
      }
    },
    "inputRedactString": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "x-ms-summary": "Source String",
          "description": "String containing the complete text"
        },
        "value": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Individual string to redact"
        },
        "values": {
          "type": "array",
          "x-ms-summary": "-OR- Values Collection",
          "description": "Collection of strings to redact",
          "items": {
            "type": "string"
          }
        },
        "regex": {
          "type": "string",
          "x-ms-summary": "-OR- Regular Expression",
          "description": "Regular expression pattern for matching strings"
        }
      },
      "example": {
        "value": "brown",
        "source": "The brown cow",
        "values": [
          "The",
          "brown",
          "cow"
        ],
        "regex": "[A-Za-z]{5}"
      }
    },
    "inputReplaceString": {
      "type": "object",
      "required": [
        "source",
        "value",
        "replacement"
      ],
      "properties": {
        "source": {
          "type": "string",
          "x-ms-summary": "Source",
          "description": "String containing the text to be replaced"
        },
        "value": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Text to replace"
        },
        "replacement": {
          "type": "string",
          "x-ms-summary": "Replacement",
          "description": "Replacement text"
        }
      },
      "example": {
        "source": "The brown cow",
        "value": "cow",
        "replacement": "dog"
      }
    },
    "inputSplitString": {
      "type": "object",
      "required": [
        "input",
        "characters"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Text to split"
        },
        "characters": {
          "type": "string",
          "x-ms-summary": "Character(s)",
          "description": "One or more characters that will be used to split the text"
        }
      },
      "example": {
        "input": "The,brown,cow",
        "characters": ","
      }
    },
    "inputStringComparison": {
      "type": "object",
      "required": [
        "input",
        "compare",
        "lower",
        "trim"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Source",
          "description": "Original string"
        },
        "compare": {
          "type": "string",
          "x-ms-summary": "Target",
          "description": "Comparison string"
        },
        "lower": {
          "type": "string",
          "enum": [
            "True",
            "False"
          ],
          "x-ms-summary": "Lowercase",
          "description": "Convert strings to lowercase before comparison"
        },
        "trim": {
          "type": "string",
          "enum": [
            "True",
            "False"
          ],
          "x-ms-summary": "Trim",
          "description": "Trim strings before comparison"
        }
      },
      "example": {
        "input": "Cow",
        "compare": "dog",
        "lower": "True",
        "trim": "True"
      }
    },
    "inputStringContains": {
      "type": "object",
      "required": [
        "input",
        "find",
        "lower"
      ],
      "properties": {
        "find": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Text to match"
        },
        "input": {
          "type": "string",
          "x-ms-summary": "Target",
          "description": "Text to search"
        },
        "lower": {
          "type": "string",
          "enum": [
            "True",
            "False"
          ],
          "x-ms-summary": "Lowercase",
          "description": "Convert strings to lowercase"
        }
      },
      "example": {
        "find": "cow",
        "input": "The brown cow",
        "lower": "True"
      }
    },
    "inputString": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "x-ms-summary": "Source",
          "description": "String variable or text value"
        }
      },
      "example": {
        "source": "The brown cow"
      }
    },
    "inputTranslateString": {
      "type": "object",
      "required": [
        "input",
        "language"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "String containing the text to be translated"
        },
        "language": {
          "type": "string",
          "x-ms-summary": "Language",
          "description": "Translation language",
          "enum": [
            "Arabic",
            "Chinese (Simplified)",
            "Czech",
            "Danish",
            "Dutch",
            "English",
            "Finnish",
            "French",
            "German",
            "Greek",
            "Hindi",
            "Hungarian",
            "Italian",
            "Japanese",
            "Klingon",
            "Korean",
            "Norweigan",
            "Polish",
            "Portuguese",
            "Russian",
            "Spanish",
            "Swedish",
            "Turkish",
            "Vietnamese",
            "Welsh"
          ]
        }
      },
      "example": {
        "input": "The brown cow",
        "language": "German"
      }
    },
    "inputTrimString": {
      "type": "object",
      "required": [
        "source",
        "type"
      ],
      "properties": {
        "source": {
          "type": "string",
          "x-ms-summary": "Source",
          "description": "String containing the text to be trimmed"
        },
        "type": {
          "type": "string",
          "x-ms-summary": "Type",
          "description": "Type of white space to remove",
          "enum": [
            "Start",
            "End",
            "Both"
          ]
        }
      },
      "example": {
        "source": "  The brown cow  ",
        "type": "Both"
      }
    },
    "inputXmlConversionJSON": {
      "type": "object",
      "required": [
        "input"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "XML string"
        }
      },
      "example": {
        "input": "<properties><property1>value</property1></properties>"
      }
    },
    "inputTextToSpeech": {
      "type": "object",
      "required": [
        "text",
        "type",
        "voice"
      ],
      "properties": {
        "text": {
          "type": "string",
          "x-ms-summary": "Text",
          "description": "Text to convert (10,000 characters max)"
        },
        "type": {
          "type": "string",
          "x-ms-summary": "Text or file type",
          "description": "Text or file type",
          "default": "PlainText",
          "enum": [
            "PlainText",
            "SSML"
          ]
        },
        "voice": {
          "type": "string",
          "x-ms-summary": "Voice",
          "description": "Voice locale (must match language of input text)",
          "default": "en-US, Aria (Female)",
          "enum": [
            "ar-EG, Hoda (Female)",
            "ar-SA, Naayf (Male)",
            "bg-BG, Ivan (Male)",
            "ca-ES, Herena (Female)",
            "cs-CZ, Jakub (Male)",
            "da-DK, Helle (Female)",
            "de-AT, Michael (Male)",
            "de-CH, Karsten (Male)",
            "de-DE, Hedda (Female)",
            "de-DE, Stefan (Male)",
            "el-GR, Stefanos (Male)",
            "en-AU, Catherine (Female)",
            "en-AU, Hayley (Female)",
            "en-CA, Heather (Female)",
            "en-CA, Linda (Female)",
            "en-GB, George (Male)",
            "en-GB, Hazel (Female)",
            "en-GB, Susan (Female)",
            "en-IE, Sean (Male)",
            "en-IN, Heera (Female)",
            "en-IN, Priya (Female)",
            "en-IN, Ravi (Male)",
            "en-US, Aria (Female)",
            "en-US, Benjamin (Male)",
            "en-US, Guy (Male)",
            "en-US, Zira (Female)",
            "es-ES, Helena (Female)",
            "es-ES, Laura (Female)",
            "es-ES, Pablo (Male)",
            "es-MX, Hilda (Female)",
            "es-MX, Raul (Male)",
            "fi-FI, Heidi (Female)",
            "fr-CA, Caroline (Female)",
            "fr-CA, Harmonie (Female)",
            "fr-CH, Guillaume (Male)",
            "fr-FR, Hortense (Female)",
            "fr-FR, Julie (Female)",
            "fr-FR, Paul (Male)",
            "he-IL, Asaf (Male)",
            "hi-IN, Hemant (Male)",
            "hi-IN, Kalpana (Female)",
            "hr-HR, Matej (Male)",
            "hu-HU, Szabolcs (Male)",
            "id-ID, Andika (Male)",
            "it-IT, Cosimo (Male)",
            "it-IT, Lucia (Female)",
            "ja-JP, Ayumi (Female)",
            "ja-JP, Haruka (Female)",
            "ja-JP, Ichiro (Male)",
            "ko-KR, Heami (Female)",
            "ms-MY, Rizwan (Male)",
            "nb-NO, Hulda (Female)",
            "nl-NL, Hanna (Female)",
            "pl-PL, Paulina (Female)",
            "pt-BR, Daniel (Male)",
            "pt-BR, Heloisa (Female)",
            "pt-PT, Helia (Female)",
            "ro-RO, Andrei (Male)",
            "ru-RU, Ekaterina (Female)",
            "ru-RU, Irina (Female)",
            "ru-RU, Pavel (Male)",
            "sk-SK, Filip (Male)",
            "sl-SI, Lado (Male)",
            "sv-SE, Hedvig (Female)",
            "ta-IN, Valluvar (Male)",
            "te-IN, Chitra (Female)",
            "th-TH, Pattara (Male)",
            "tr-TR, Seda (Female)",
            "vi-VN, An (Male)",
            "zh-CN, Huihui (Female)",
            "zh-CN, Kangkang (Male)",
            "zh-CN, Yaoyao (Female)",
            "zh-HK, Danny (Male)",
            "zh-HK, Tracy (Female)",
            "zh-TW, HanHan (Female)",
            "zh-TW, Yating (Female)",
            "zh-TW, Zhiwei (Male)"
          ]
        }
      },
      "example": {
        "text": "This is sample text.",
        "type": "PlainText",
        "voice": "en-US, Aria (Female)"
      }
    },
    "inputDataQuery": {
      "type": "object",
      "required": [
        "input",
        "query"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "XML or JSON string"
        },
        "query": {
          "type": "string",
          "x-ms-summary": "Query",
          "description": "XPath or JSONPath query"
        }
      },
      "example": {
        "input": "{\"properties\": [{\"name\":\"ID\",\"value\":\"1234\"},{\"name\":\"Title\",\"value\":\"Some Title\"}]}",
        "query": "$.properties[?(@.name == \"ID\")].value"
      }
    },
    "inputGenerateHash": {
      "type": "object",
      "required": [
        "input",
        "algorithm"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Input",
          "description": "Hash source string"
        },
        "algorithm": {
          "type": "string",
          "x-ms-summary": "Algorithm",
          "description": "Hash algorithm",
          "enum": [
            "MD5",
            "SHA1",
            "SHA256",
            "SHA384",
            "SHA512"
          ]
        }
      },
      "example": {
        "source": "text to hash",
        "algorithm": "SHA256"
      }
    },
    "inputVerifyHash": {
      "type": "object",
      "required": [
        "input",
        "algorithm",
        "hash"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Input",
          "description": "Original source string"
        },
        "algorithm": {
          "type": "string",
          "x-ms-summary": "Algorithm",
          "description": "Hash algorithm",
          "enum": [
            "MD5",
            "SHA1",
            "SHA256",
            "SHA384",
            "SHA512"
          ]
        },
        "hash": {
          "type": "string",
          "x-ms-summary": "Hash",
          "description": "Hashed result"
        }
      },
      "example": {
        "source": "this is a really good test",
        "algorithm": "SHA256",
        "hash": "a52b8248f023cebd33aeeddda695f60d2561c0c9"
      }
    },
    "inputStockPrices": {
      "type": "object",
      "required": [
        "symbols"
      ],
      "properties": {
        "symbols": {
          "type": "string",
          "x-ms-summary": "Symbols",
          "description": "Stock ticker symbols (comma-separated, max 20)"
        },
        "date": {
          "type": "string",
          "x-ms-summary": "Date",
          "description": "Date (yyyy-MM-dd, leave empty for latest)"
        },
        "exchange": {
          "type": "string",
          "x-ms-summary": "Exchange",
          "description": "Stock exchange",
          "enum": [
            "XNYS (New York Stock Exchange)",
            "XNAS (NASDAQ Stock Exchange)",
            "XBRU (Euronext Brussels)",
            "XTSE (Toronto Stock Exchange)",
            "XCNQ (Candadian Securities Exchange)",
            "XSHG (Shanghai Stock Exchange)",
            "XCSE (Copenhagen Stock Exchange)",
            "XPAR (Euronext Paris)",
            "XFRA (Deutsche Borse)",
            "XHKG (Hong Kong Stock Exchange)",
            "XNSE (National Stock Exchange India)",
            "XTAE (Tel Aviv Stock Exchange)",
            "XNGO (Nagoya Stock Exchange)",
            "XFKA (Fukuoka Stock Exchange)",
            "XSAP (Sapporo Stock Exchange)",
            "XMEX (Mexican Stock Exchange)",
            "XNZE (New Zealand Stock Exchange)",
            "XLIS (Euronext Lisbon)",
            "MISX (Moscow Stock Exchange)",
            "XSES (Singapore Stock Exchange)",
            "XLON (London Stock Exchange)",
            "XASE (American Stock Exchange)",
            "XASX (Australia Stock Exchange)",
            "XDFM (Dubai Financial Market)",
            "XBKK (Stock Exchange of Thailand)",
            "XSWX (SIX Swiss Exchange)",
            "XSTO (Stockholm Stock Exchange)",
            "BMEX (Bolsas y Mercados Espa\u00f1oles)",
            "XJSE (Johannesburg Stock Exchange)"
          ]
        }
      },
      "example": {
        "symbols": "MMM,CVX",
        "date": "2020-10-07",
        "exchange": "XNYS (New York Stock Exchange)"
      }
    },
    "inputMarketIndex": {
      "type": "object",
      "required": [
        "symbol"
      ],
      "properties": {
        "symbol": {
          "type": "string",
          "x-ms-summary": "Index",
          "description": "Market index",
          "enum": [
            "DJA.INDX (Dow Jones Composite Average)",
            "DJI.INDX (Dow Jones Industrial Average)",
            "DJT.INDX (Dow Jones Transportation)",
            "DJUS.INDX (Dow Jones US)",
            "DXY.INDX (US Dollar Index)",
            "GDOW.INDX (Global Dow USD)",
            "NY.INDX (NYSE US 100 Index)",
            "NYA.INDX (NYSE Composite)",
            "IXIC.INDX (NASDAQ Composite)",
            "NDX.INDX (NASDAQ 100)",
            "GSPC.INDX (S&P 500)",
            "ES.INDX (S&P 500 Futures)",
            "MID.INDX (S&P Midcap 400)",
            "GPTSE.INDX (S&P TSX Composite Index [Canada])",
            "FTSE.INDX (FTSE 100 Index [UK])",
            "CDAXX.INDX (DAX Composite Index [Germany])",
            "GDAXI.INDX (DAX Index [Germany])",
            "HSCE.INDX (Hang Seng China Enterprise (CEI))",
            "HSI.INDX (Hang Seng Index [Hong Kong])",
            "N100.INDX (EuroNext 100)",
            "N225.INDX (Nikkei 225 Index)",
            "RTSI.INDX (RTSI Index [Russia])",
            "SSEC.INDX (Shanghai Composite)",
            "SSMI.INDX (Swiss Market Index)"
          ]
        },
        "date": {
          "type": "string",
          "x-ms-summary": "Date",
          "description": "Date (yyyy-MM-dd, leave empty for last trading day)"
        }
      },
      "example": {
        "symbol": "DJI.INDX",
        "date": "2020-10-07"
      }
    },
    "inputQRCode": {
      "type": "object",
      "required": [
        "input",
        "payload"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Text value(s) (vertical bar delimited by type)"
        },
        "payload": {
          "type": "string",
          "default": "Plain Text (string)",
          "enum": [
            "Plain Text (string)",
            "Bitcoin Payment (address|amount|label|message)",
            "Bookmark (url|title)",
            "Calendar Event (subject|description|location|start|end|allDayEvent['true' or 'false']|format ['universal' or 'iCal'])",
            "Geolocation (latitude|longitude)",
            "Mail (recipient|subject|message)",
            "Phone Number (string)",
            "SMS (number|message)",
            "URL (string)",
            "WiFi (ssid|password|authenticationMode ['WEP', 'WPA' or 'WPA2'])"
          ],
          "x-ms-summary": "Type",
          "description": "Payload type"
        }
      },
      "example": {
        "input": "someone@example.com|Test message|This is a test.",
        "payload": "Mail"
      }
    },
    "inputStringToFile": {
      "type": "object",
      "required": [
        "input",
        "extension",
        "filename"
      ],
      "properties": {
        "input": {
          "type": "string",
          "x-ms-summary": "Value",
          "description": "Text string (body of file)"
        },
        "extension": {
          "type": "string",
          "default": "TXT",
          "enum": [
            "TXT",
            "CSV",
            "HTML",
            "XML",
            "CSS",
            "JSON",
            "JS"
          ],
          "x-ms-summary": "Extension",
          "description": "File extension"
        },
        "filename": {
          "type": "string",
          "x-ms-summary": "Filename",
          "description": "Name of file (without extension)"
        }
      },
      "example": {
        "input": "This is a test.",
        "extension": "TXT",
        "filename": "Test"
      }
    },
    "outputStringArray": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "data",
          "x-ms-summary": "data"
        }
      },
      "example": {
        "data": [
          "string"
        ]
      }
    },
    "outputDateInfo": {
      "type": "object",
      "properties": {
        "DayOfYear": {
          "type": "number",
          "description": "DayOfYear",
          "x-ms-summary": "DayOfYear"
        },
        "DayOfWeek": {
          "type": "number",
          "description": "DayOfWeek",
          "x-ms-summary": "DayOfWeek"
        },
        "WeekOfYear": {
          "type": "number",
          "description": "WeekOfYear",
          "x-ms-summary": "WeekOfYear"
        },
        "SecondsInDay": {
          "type": "number",
          "description": "SecondsInDay",
          "x-ms-summary": "SecondsInDay"
        },
        "MinutesInDay": {
          "type": "number",
          "description": "MinutesInDay",
          "x-ms-summary": "MinutesInDay"
        },
        "Ticks": {
          "type": "number",
          "description": "Ticks",
          "x-ms-summary": "Ticks"
        }
      },
      "example": {
        "DayOfYear": 25,
        "DayOfWeek": 2,
        "WeekOfYear": 10,
        "SecondsInDay": 1234,
        "MinutesInDay": 359,
        "Ticks": 1234567890
      }
    },
    "outputDateDifference": {
      "type": "object",
      "properties": {
        "years": {
          "type": "number",
          "description": "Years",
          "x-ms-summary": "Years"
        },
        "months": {
          "type": "number",
          "description": "Months",
          "x-ms-summary": "Months"
        },
        "days": {
          "type": "number",
          "description": "Days",
          "x-ms-summary": "Days"
        },
        "hours": {
          "type": "number",
          "description": "Hours",
          "x-ms-summary": "Hours"
        },
        "minutes": {
          "type": "number",
          "description": "Minutes",
          "x-ms-summary": "Minutes"
        },
        "milliseconds": {
          "type": "number",
          "description": "Milliseconds",
          "x-ms-summary": "Milliseconds"
        },
        "totalYears": {
          "type": "number",
          "format": "double",
          "description": "Total Years",
          "x-ms-summary": "Total Years"
        },
        "totalMonths": {
          "type": "number",
          "format": "double",
          "description": "Total Months",
          "x-ms-summary": "Total Months"
        },
        "totalDays": {
          "type": "number",
          "format": "double",
          "description": "Total Days",
          "x-ms-summary": "Total Days"
        },
        "totalHours": {
          "type": "number",
          "format": "double",
          "description": "Total Hours",
          "x-ms-summary": "Total Hours"
        },
        "totalMinutes": {
          "type": "number",
          "format": "double",
          "description": "Total Minutes",
          "x-ms-summary": "Total Minutes"
        },
        "totalSeconds": {
          "type": "number",
          "format": "double",
          "description": "Total Seconds",
          "x-ms-summary": "Total Seconds"
        },
        "totalMilliseconds": {
          "type": "number",
          "format": "double",
          "description": "Total Milliseconds",
          "x-ms-summary": "Total Milliseconds"
        },
        "ticks": {
          "type": "number",
          "description": "Ticks",
          "x-ms-summary": "Ticks"
        }
      },
      "example": {
        "years": 1,
        "months": 2,
        "days": 14,
        "hours": 1,
        "minutes": 50,
        "seconds": 30,
        "milliseconds": 0,
        "totalYears": 1.2,
        "totalMonths": 14.39,
        "totalDays": 438.08,
        "totalHours": 10513.84,
        "totalMinutes": 630830.5,
        "totalSeconds": 37849830,
        "totalMilliseconds": 37849830000,
        "ticks": 378498300000000
      }
    },
    "outputCollectionNumber": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Success",
          "x-ms-summary": "Success"
        },
        "item": {
          "type": "number",
          "description": "First Value",
          "x-ms-summary": "First Value"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "description": "All Values",
          "x-ms-summary": "All Values"
        }
      },
      "example": {
        "status": false,
        "item": 1.25,
        "items": [
          1.25,
          2.5,
          3.75
        ]
      }
    },
    "outputCollectionResult": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Modified collection result",
          "x-ms-summary": "Modified collection result"
        }
      },
      "example": {
        "result": [
          "a",
          "b",
          "c"
        ]
      }
    },
    "outputCollectionString": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Success",
          "x-ms-summary": "Success"
        },
        "item": {
          "type": "string",
          "description": "First Value",
          "x-ms-summary": "First Value"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "All Values",
          "x-ms-summary": "All Values"
        }
      },
      "example": {
        "status": false,
        "item": "string",
        "items": [
          "string"
        ]
      }
    },
    "outputMultiCollection": {
      "type": "object",
      "properties": {
        "result1": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "First collection result",
          "x-ms-summary": "First collection result"
        },
        "result2": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Second collection result",
          "x-ms-summary": "Second collection result"
        }
      },
      "example": {
        "result1": [
          "a",
          "b",
          "c"
        ],
        "result2": [
          "d",
          "e",
          "f"
        ]
      }
    },
    "outputString": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "description": "Result",
          "x-ms-summary": "Result"
        }
      },
      "example": {
        "result": "string"
      }
    },
    "outputNumber": {
      "type": "object",
      "properties": {
        "result": {
          "type": "number",
          "description": "Result",
          "x-ms-summary": "Result"
        }
      },
      "example": {
        "result": 1
      }
    },
    "outputBoolean": {
      "type": "object",
      "properties": {
        "result": {
          "type": "boolean",
          "description": "Result",
          "x-ms-summary": "Result"
        }
      },
      "example": {
        "result": true
      }
    },
    "outputFileByte": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "format": "byte",
          "description": "Result",
          "x-ms-summary": "Result"
        }
      },
      "example": {
        "result": "Base64 encoded string (byte array)"
      }
    },
    "outputStockPrice": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "description": "Date",
                "x-ms-summary": "Date"
              },
              "symbol": {
                "type": "string",
                "description": "Ticker symbol",
                "x-ms-summary": "Symbol"
              },
              "exchange": {
                "type": "string",
                "description": "Stock exchange",
                "x-ms-summary": "Exchange"
              },
              "open": {
                "type": "number",
                "description": "Open",
                "x-ms-summary": "Open"
              },
              "high": {
                "type": "number",
                "description": "High",
                "x-ms-summary": "High"
              },
              "low": {
                "type": "number",
                "description": "Low",
                "x-ms-summary": "Low"
              },
              "close": {
                "type": "number",
                "description": "Close",
                "x-ms-summary": "Close"
              },
              "volume": {
                "type": "number",
                "description": "Volume",
                "x-ms-summary": "Volume"
              }
            }
          },
          "description": "Stock price information",
          "x-ms-summary": "Stock price information"
        }
      },
      "example": {
        "result": [
          {
            "open": 73.84,
            "high": 74.32,
            "low": 72.245,
            "last": 72.3,
            "close": 72.7,
            "volume": 15151304,
            "date": "2020-10-07T00:00:00+0000",
            "symbol": "CVX",
            "exchange": "XNYS"
          }
        ]
      }
    },
    "outputMarketIndex": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "description": "Date",
          "x-ms-summary": "Date"
        },
        "symbol": {
          "type": "string",
          "description": "Index symbol",
          "x-ms-summary": "Symbol"
        },
        "exchange": {
          "type": "string",
          "description": "Market exchange",
          "x-ms-summary": "Exchange"
        },
        "open": {
          "type": "number",
          "description": "Open value",
          "x-ms-summary": "Open"
        },
        "high": {
          "type": "number",
          "description": "High value",
          "x-ms-summary": "High"
        },
        "low": {
          "type": "number",
          "description": "Low value",
          "x-ms-summary": "Low"
        },
        "close": {
          "type": "number",
          "description": "Close value",
          "x-ms-summary": "Close"
        },
        "volume": {
          "type": "number",
          "description": "Trading volume",
          "x-ms-summary": "Volume"
        },
        "adj_open": {
          "type": "number",
          "description": "Adjusted open value",
          "x-ms-summary": "Adjusted Open"
        },
        "adj_high": {
          "type": "number",
          "description": "Adjusted high value",
          "x-ms-summary": "Adjusted High"
        },
        "adj_low": {
          "type": "number",
          "description": "Adjusted low value",
          "x-ms-summary": "Adjusted Low"
        },
        "adj_close": {
          "type": "number",
          "description": "Adjusted close value",
          "x-ms-summary": "Adjusted Close"
        },
        "adj_volume": {
          "type": "number",
          "description": "Adjusted trading volume",
          "x-ms-summary": "Adjusted Volume"
        }
      },
      "example": {
        "date": "2020-10-07T00:00:00+0000",
        "symbol": "DJI.INDX",
        "exchange": "INDX",
        "open": 73.84,
        "high": 74.32,
        "low": 72.245,
        "close": 72.7,
        "volume": 15151304,
        "adj_open": 73.84,
        "adj_high": 74.32,
        "adj_low": 72.245,
        "adj_close": 72.7,
        "adj_volume": 15151304
      }
    }
  },
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "X-IBM-Client-Id"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": [
    {
      "name": "Collections",
      "description": "Arrays of base values (strings and numbers)."
    },
    {
      "name": "Data",
      "description": "Data conversion operations."
    },
    {
      "name": "DateTime",
      "description": "Date and time operations."
    },
    {
      "name": "Finance",
      "description": "Financial calculations and conversions."
    },
    {
      "name": "Math",
      "description": "Mathematical calculations and conversions."
    },
    {
      "name": "Text",
      "description": "String manipulation, parsing, conversion and related operations."
    }
  ],
  "x-ms-connector-metadata": [
      {
        "propertyName": "Website",
        "propertyValue": "https://www.apptigent.com"
      },
      {
        "propertyName": "Privacy policy",
        "propertyValue": "https://www.apptigent.com/help/privacy-policy/"
      },
      {
        "propertyName": "Categories",
        "propertyValue": "Productivity"
      }
    ]
}