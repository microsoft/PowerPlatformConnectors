{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Blackbaud Raisers Edge NXT Con",
    "description": "Blackbaud Raiser's Edge NXT is a comprehensive cloud-based fundraising and donor management software solution built specifically for nonprofits and the entire social good community. Use the Constituents connector to manage constituent biographical details, contact information, and relationships.",
    "contact": {
      "name": "Blackbaud Support",
      "url": "https://www.blackbaud.com/support",
      "email": "skyapi@blackbaud.com"
    },
    "x-ms-api-annotation": {
      "status": "Preview"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.blackbaud.com/products/blackbaud-raisers-edge-nxt"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.blackbaud.com/privacy-shield"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Sales and CRM;Productivity"
    }
  ],
  "host": "api.sky.blackbaud.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "skyApiOAuth": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth2.sky.blackbaud.com/authorization",
      "tokenUrl": "https://oauth2.sky.blackbaud.com/token",
      "scopes": {}
    }
  },
  "security": [
    {
      "skyApiOAuth": []
    }
  ],
  "paths": {
    "/commpref/v1/consent/categories": {
      "get": {
        "operationId": "ListConsentCategories",
        "summary": "List consent categories",
        "description": "Lists the available consent categories.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive categories?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConsentCategoryCollection"
            }
          }
        }
      }
    },
    "/commpref/v1/consent/channels": {
      "get": {
        "operationId": "ListConsentChannels",
        "summary": "List consent channels",
        "description": "Lists the available consent channels.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConsentChannelCollection"
            }
          }
        }
      }
    },
    "/commpref/v1/consent/consents": {
      "post": {
        "operationId": "CreateConstituentConsent",
        "summary": "Create a constituent consent record",
        "description": "Creates a new constituent consent record.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConstituentConsentAdd"
            },
            "description": "An object that represents the consent record to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds. The response body contains the ID of the new consent record.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.CreatedConstituentConsent"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create a consent record."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/commpref/v1/consent/sources": {
      "get": {
        "operationId": "ListConsentSources",
        "summary": "List consent sources",
        "description": "Lists the available consent sources.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive sources?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConsentSourceCollection"
            }
          }
        }
      }
    },
    "/commpref/v1/constituents/{constituent_id}/consents": {
      "get": {
        "operationId": "ListConstituentConsents",
        "summary": "List constituent consent records",
        "description": "Lists the consent records for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "most_recent_only",
            "in": "query",
            "description": "Include only the most recent consent records for each channel category combination in the response?",
            "type": "boolean",
            "x-ms-summary": "Most recent only?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConstituentConsentReadCollection"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameter is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the constituent."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/commpref/v1/constituents/{constituent_id}/constituentsolicitcodes": {
      "get": {
        "operationId": "ListConstituentSolicitCodes",
        "summary": "List constituent solicit codes",
        "description": "Lists the solicit codes for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConstituentSolicitCodeReadCollection"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameter is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the constituent or solicit codes."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/commpref/v1/constituentsolicitcodes": {
      "post": {
        "operationId": "CreateConstituentSolicitCode",
        "summary": "Create a constituent solicit code",
        "description": "Creates a new constituent solicit code.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConstituentSolicitCodeAdd"
            },
            "description": "An object that represents the solicit code to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a phone. The response body contains the ID of the new phone.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.CreatedConstituentSolicitCode"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the phone."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/commpref/v1/constituentsolicitcodes/{constituent_solicit_code_id}": {
      "patch": {
        "operationId": "EditConstituentSolicitCode",
        "summary": "Update a constituent solicit code",
        "description": "Updates a constituent solicit code.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_solicit_code_id",
            "in": "path",
            "description": "The system record ID of the solicit code to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Solicit code ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.ConstituentSolicitCodeEdit"
            },
            "description": "An object that represents the properties of the solicit code to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the solicit code."
          },
          "400": {
            "description": "Returned when the specified solicit code ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the solicit code."
          },
          "404": {
            "description": "Returned when the specified solicit code is not found."
          }
        }
      }
    },
    "/commpref/v1/solicitcodes": {
      "get": {
        "operationId": "ListSolicitCodes",
        "summary": "List solicit codes",
        "description": "Lists the available solicit codes.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/CommPrefApi.SolicitCodeCollection"
            }
          }
        }
      }
    },
    "/constituent/v1/addresses": {
      "post": {
        "operationId": "CreateConstituentAddress",
        "summary": "Create a constituent address",
        "description": "Creates a new constituent address.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.AddressAdd"
            },
            "description": "An object that represents the address to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an address. The response body contains the ID of the new address.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentAddress"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the address."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/addresses/{address_id}": {
      "patch": {
        "operationId": "EditConstituentAddress",
        "summary": "Update a constituent address",
        "description": "Updates a constituent address.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address_id",
            "in": "path",
            "description": "The system record ID of the address to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Address ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.AddressEdit"
            },
            "description": "An object that represents the properties of the address to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the address."
          },
          "400": {
            "description": "Returned when the specified address ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the address."
          },
          "404": {
            "description": "Returned when the specified address is not found."
          }
        }
      }
    },
    "/constituent/v1/aliases": {
      "post": {
        "operationId": "CreateConstituentAlias",
        "summary": "Create a constituent alias",
        "description": "Creates a new constituent alias.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.AliasAdd"
            },
            "description": "An object that represents the alias to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an alias. The response body contains the ID of the new alias.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentAlias"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the alias."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/aliases/{alias_id}": {
      "patch": {
        "operationId": "EditConstituentAlias",
        "summary": "Update a constituent alias",
        "description": "Updates an constituent alias.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alias_id",
            "in": "path",
            "description": "The system record ID of the alias to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Alias ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.AliasEdit"
            },
            "description": "An object that represents the properties of the alias to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the alias."
          },
          "400": {
            "description": "Returned when the specified alias ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "404": {
            "description": "Returned when the specified alias is not found."
          }
        }
      }
    },
    "/constituent/v1/constituentcodes": {
      "post": {
        "operationId": "CreateConstituentCode",
        "summary": "Create a constituent code",
        "description": "Creates a new constituent code.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentCodeAdd"
            },
            "description": "An object that represents the constituent code to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a constituent code. The response body contains the ID of the new constituent code.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentCode"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the constituent code."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituentcodes/{constituent_code_id}": {
      "delete": {
        "operationId": "DeleteConstituentCode",
        "summary": "Delete a constituent code",
        "description": "Deletes a constituent code.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_code_id",
            "in": "path",
            "description": "The system record ID of the constituent code to delete.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent code ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully deletes the constituent code."
          },
          "400": {
            "description": "Returned when the specified constituent code ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to delete the constituent code."
          }
        }
      },
      "patch": {
        "operationId": "EditConstituentCode",
        "summary": "Update a constituent code",
        "description": "Updates a constituent code.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_code_id",
            "in": "path",
            "description": "The system record ID of the constituent code to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent code ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentCodeEdit"
            },
            "description": "An object that represents the properties of the constituent code to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the constituent code."
          },
          "400": {
            "description": "Returned when the specified constituent code ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the constituent code."
          },
          "404": {
            "description": "Returned when the specified constituent code is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents": {
      "get": {
        "operationId": "ListConstituents",
        "summary": "List constituents",
        "description": "Returns a list of constituents.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "list_id",
            "in": "query",
            "description": "Defines a list identifier used to filter the set of constituents to those included in the specified list. If this value is set, other specified filters will be ignored.",
            "type": "string",
            "x-ms-summary": "List",
            "x-ms-dynamic-values": {
              "operationId": "ListLists",
              "value-collection": "value",
              "value-path": "id",
              "value-title": "name",
              "parameters": {
                "list_type": "Constituent"
              }
            },
            "x-ms-dynamic-list": {
              "operationId": "ListLists",
              "itemsPath": "value",
              "itemValuePath": "id",
              "itemTitlePath": "name",
              "parameters": {
                "list_type": {
                  "value": "Constituent"
                }
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500. The maximum is 5000.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Offset"
          },
          {
            "name": "constituent_code",
            "in": "query",
            "description": "Represents a constituent code to filter the list. For example, \"Board Member\" returns only constituents with a Board Member constituent code.",
            "type": "string",
            "x-ms-summary": "Constituent code",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "constituent_id",
            "in": "query",
            "description": "Represents a comma-separated list of constituent system record IDs to filter the results. For example, \"280,1232\" returns only constituent 280 or constituent 1232.",
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "custom_field_category",
            "in": "query",
            "description": "Represents a custom field category to filter the results. For example, \"Anniversary\" returns only constituents with an active Anniversary custom field.",
            "type": "string",
            "x-ms-summary": "Custom field category",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "fundraiser_status",
            "in": "query",
            "description": "Represents a comma-separated list of fundraiser statuses to filter the results. For example, \"Active,None\" returns only constituents whose fundraiser status is Active or None. Valid values for this filter are Active, Inactive, and None.",
            "type": "string",
            "x-ms-summary": "Fundraiser status",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "include_deceased",
            "in": "query",
            "description": "Include deceased constituents in the response?",
            "type": "boolean",
            "x-ms-summary": "Include deceased?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive constituents in the response?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "postal_code",
            "in": "query",
            "description": "Represents a comma-separated list of postal codes to filter the results. For example, \"29466,29492\" returns only constituents whose preferred address has a postal code that starts with 29466 or 29492, such as 29466, 29492, or 29492-0727.",
            "type": "string",
            "x-ms-summary": "Postal code",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "date_added",
            "in": "query",
            "description": "Filter the results to constituents created on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Added on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "last_modified",
            "in": "query",
            "description": "Filter the results to constituents modified on or after the specified date (ex: '2020-09-18T04:13:56Z').",
            "type": "string",
            "format": "date-time",
            "x-ms-summary": "Modified on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Represents a list of fields to sort the results by.  Results are in ascending order by default, and a '-' sign denotes descending order.  For example, \"date_added,-last\" sorts constituents by the \"date_added\" field in ascending order and then by the \"last\" field in descending order.",
            "type": "string",
            "x-ms-summary": "Sorted by",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfConstituentRead"
            }
          },
          "400": {
            "description": "Returned when the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the constituents."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}": {
      "get": {
        "operationId": "GetConstituent",
        "summary": "Get a constituent",
        "description": "Returns information about a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent to get.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the constituent."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      },
      "patch": {
        "operationId": "EditConstituent",
        "summary": "Update a constituent",
        "description": "Updates a constituent.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentEdit"
            },
            "description": "An object that represents the properties of the constituent to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the constituent."
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the constituent."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/addresses": {
      "get": {
        "operationId": "ListConstituentAddresses",
        "summary": "List constituent addresses",
        "description": "Lists the addresses for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive addresses?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfAddressRead"
            }
          },
          "400": {
            "description": "Returned when the specified ID is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the addresses."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/aliases": {
      "get": {
        "operationId": "ListConstituentAliases",
        "summary": "List constituent aliases",
        "description": "Lists the aliases for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfAliasRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameter is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the aliases."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/attachments": {
      "get": {
        "operationId": "ListConstituentAttachments",
        "summary": "List constituent attachments",
        "description": "Lists the attachments for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfConstituentAttachmentRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the attachments."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/constituentcodes": {
      "get": {
        "operationId": "ListConstituentCodes",
        "summary": "List constituent codes",
        "description": "Lists the constituent codes for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfConstituentCodeRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the constituent codes."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/customfields": {
      "get": {
        "operationId": "ListConstituentCustomFields",
        "summary": "List constituent custom fields",
        "description": "Lists the custom fields for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfConstituentCustomFieldRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the custom fields."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/educations": {
      "get": {
        "operationId": "ListConstituentEducations",
        "summary": "List constituent educations",
        "description": "Lists the education records for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfEducationRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the education records."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/emailaddresses": {
      "get": {
        "operationId": "ListConstituentEmailAddresses",
        "summary": "List constituent email addresses",
        "description": "Lists the email addresses for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive email addresses?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfEmailAddressRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameter is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the email addresses."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/fundraiserassignments": {
      "get": {
        "operationId": "ListConstituentFundraiserAssignments",
        "summary": "List constituent fundraisers",
        "description": "Lists the fundraiser assignments for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive fundraiser assignments?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfFundraiserAssignmentRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the fundraiser assignments."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/memberships": {
      "get": {
        "operationId": "ListConstituentMemberships",
        "summary": "List constituent memberships",
        "description": "Lists the memberships for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfMembershipRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameter is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the memberships."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/nameformats/summary": {
      "get": {
        "operationId": "GetConstituentNameFormatSummary",
        "summary": "Get constituent name format summary",
        "description": "Returns the name format summary for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.NameFormatSummaryRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the name format summary."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/notes": {
      "get": {
        "operationId": "ListConstituentNotes",
        "summary": "List constituent notes",
        "description": "Lists the notes for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfNoteRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the notes."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/onlinepresences": {
      "get": {
        "operationId": "ListConstituentOnlinePresences",
        "summary": "List constituent online presences",
        "description": "Lists the online presences for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive online presences?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfOnlinePresenceRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameter is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the online presences."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/phones": {
      "get": {
        "operationId": "ListConstituentPhones",
        "summary": "List constituent phones",
        "description": "Lists the phones for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive phones?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfPhoneRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL or the specified request parameter is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the phones."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/profilepicture": {
      "get": {
        "operationId": "GetConstituentProfilePicture",
        "summary": "Get a constituent profile picture",
        "description": "Returns the current profile picture for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent for whom the profile picture is to be retrieved.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ProfilePictureRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the profile picture."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      },
      "patch": {
        "operationId": "EditConstituentProfilePicture",
        "summary": "Update a constituent profile picture",
        "description": "Updates the current profile picture for a constituent.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent whose profile picture is to be updated.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ProfilePictureEdit"
            },
            "description": "An object that represents the properties for the constituent profile picture to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the profile picture."
          },
          "400": {
            "description": "Returned when the specified profile picture ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the profile picture."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/{constituent_id}/relationships": {
      "get": {
        "operationId": "ListConstituentRelationships",
        "summary": "List constituent relationships",
        "description": "Lists the relationships for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500. There is no maximum.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfRelationshipRead"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the relationships."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/convert/{non_constituent_id}": {
      "post": {
        "operationId": "ConvertToConstituent",
        "summary": "Convert to constituent",
        "description": "Converts a non-constituent to a constituent.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "non_constituent_id",
            "in": "path",
            "description": "The system record ID of the non-constituent record to convert.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Non-constituent ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.NonConstituentConversion"
            },
            "description": "An object with fields for the conversion of the non-constituent.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully converts a non-constituent to a constituent. The response body contains the ID of the constituent.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConvertedConstituent"
            }
          },
          "400": {
            "description": "Returned when the specified request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to convert the non-constituent to a constituent."
          },
          "404": {
            "description": "Returned when the specified non-constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/attachments": {
      "post": {
        "operationId": "CreateConstituentAttachment",
        "summary": "Create a constituent attachment",
        "description": "Creates a new constituent attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentAttachmentAdd"
            },
            "description": "An object that represents the attachment to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an attachment. The response body contains the ID of the new attachment.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentAttachment"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the attachment."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/attachments/{attachment_id}": {
      "patch": {
        "operationId": "EditConstituentAttachment",
        "summary": "Update a constituent attachment",
        "description": "Updates a constituent attachment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "attachment_id",
            "in": "path",
            "description": "The system record ID of the attachment to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Attachment ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentAttachmentEdit"
            },
            "description": "An object that represents the properties of the attachment to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the attachment."
          },
          "400": {
            "description": "Returned when the specified attachment ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the attachment."
          },
          "404": {
            "description": "Returned when the specified attachment is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/customfields": {
      "post": {
        "operationId": "CreateConstituentCustomField",
        "summary": "Create a constituent custom field",
        "description": "Creates a new constituent custom field.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentCustomFieldAdd"
            },
            "description": "An object that represents the custom field to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a custom field. The response body contains the ID of the new custom field.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentCustomField"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the custom field."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/customfields/{custom_field_id}": {
      "patch": {
        "operationId": "EditConstituentCustomField",
        "summary": "Update a constituent custom field",
        "description": "Updates a constituent custom field.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "custom_field_id",
            "in": "path",
            "description": "The system record ID of the custom field to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Custom field ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ConstituentCustomFieldEdit"
            },
            "description": "An object that represents the properties of the custom field to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the custom field."
          },
          "400": {
            "description": "Returned when the specified custom field ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the custom field."
          },
          "404": {
            "description": "Returned when the specified custom field is not found."
          }
        }
      }
    },
    "/constituent/v1/constituents/customfields/categories/details": {
      "get": {
        "operationId": "ListConstituentCustomFieldCategoryDetails",
        "summary": "List custom field categories",
        "description": "Lists the constituent custom field category details.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfCustomFieldCategoryRead"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view custom field categories."
          }
        }
      }
    },
    "/constituent/v1/constituents/search": {
      "get": {
        "operationId": "SearchConstituent",
        "summary": "Search for a constituent",
        "description": "Performs a constituent search based on the provided search text. Supports first name, last name, preferred name, former name, alias, email address, phone number, address, or lookup ID. Name combinations such as first name and last name or preferred name and last name are valid, but otherwise search only supports one parameter at a time. By default, searches include results that sound similar to your criteria. For example, searches for \"Smith\" include matches for \"Smyth\" and other alternative spellings. This search does not support wildcard characters such as * or ?. Search results are limited to 500 records.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "search_text",
            "in": "query",
            "description": "The search text. Supports first name, last name, preferred name, former name, alias, email address, phone number, address, or lookup ID. Name combinations such as first name and last name or preferred name and last name are valid, but otherwise search only supports one parameter at a time. By default, searches include results that sound similar to your criteria. For example, searches for \"Smith\" include matches for \"Smyth\" and other alternative spellings. This search does not support wildcard characters such as * or ?. Search results are limited to 500 records.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Search text"
          },
          {
            "name": "fundraiser_status",
            "in": "query",
            "description": "Represents a comma-separated list of fundraiser statuses to filter the results. For example, \"Active,None\" returns only constituents whose fundraiser status is Active or None. Valid values for this filter are Active, Inactive, and None.",
            "type": "string",
            "x-ms-summary": "Fundraiser statuses",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "description": "Include inactive constituents in the response?",
            "type": "boolean",
            "x-ms-summary": "Include inactive?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "search_field",
            "in": "query",
            "description": "Represents a field to search on. Currently, it only supports lookup_id. If it is provided with search_text, a constituent with lookup_id that matches the search_text will be returned.",
            "type": "string",
            "enum": [
              "lookup_id",
              "email_address"
            ],
            "x-ms-summary": "Search field",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "strict_search",
            "in": "query",
            "description": "Exclude constituents whose names sound like the search text but are spelled differently?",
            "type": "boolean",
            "x-ms-summary": "Use strict search?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500. The maximum is 5000.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Offset",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfSearchResultRead"
            }
          }
        }
      }
    },
    "/constituent/v1/countries": {
      "get": {
        "operationId": "ListCountries",
        "summary": "List country definitions",
        "description": "Lists the country definitions.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfCountryRead"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view countries."
          }
        }
      }
    },
    "/constituent/v1/educations": {
      "post": {
        "operationId": "CreateConstituentEducation",
        "summary": "Create a constituent education",
        "description": "Creates a new constituent education.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.EducationAdd"
            },
            "description": "An object that represents the education to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an education. The response body contains the ID of the new education.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentEducation"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the education."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/educations/{education_id}": {
      "patch": {
        "operationId": "EditConstituentEducation",
        "summary": "Update a constituent education",
        "description": "Updates a constituent education.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "education_id",
            "in": "path",
            "description": "The system record ID of the education record to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Education ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.EducationEdit"
            },
            "description": "An object that represent properties of the education record to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the education."
          },
          "400": {
            "description": "Returned when the specified education ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the education."
          },
          "404": {
            "description": "Returned when the specified education is not found."
          }
        }
      }
    },
    "/constituent/v1/emailaddresses": {
      "post": {
        "operationId": "CreateConstituentEmailAddress",
        "summary": "Create a constituent email address",
        "description": "Creates a new constituent email address.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.EmailAddressAdd"
            },
            "description": "An object that represents the email address to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an email address. The response body contains the ID of the new email address.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentEmailAddress"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the email address."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/emailaddresses/{email_address_id}": {
      "patch": {
        "operationId": "EditConstituentEmailAddress",
        "summary": "Update a constituent email address",
        "description": "Updates a constituent email address.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email_address_id",
            "in": "path",
            "description": "The system record ID of the email address to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Email address ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.EmailAddressEdit"
            },
            "description": "An object that represents the properties of the email address to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the email address."
          },
          "400": {
            "description": "Returned when the specified email address ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the email address."
          },
          "404": {
            "description": "Returned when the specified email address is not found."
          }
        }
      }
    },
    "/constituent/v1/nameformatconfigurations": {
      "get": {
        "operationId": "ListNameFormatConfigurations",
        "summary": "List name format configurations",
        "description": "List the name format configurations.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.ApiCollectionOfNameFormatConfigurationRead"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view the name format configurations."
          }
        }
      }
    },
    "/constituent/v1/nameformats": {
      "post": {
        "operationId": "CreateConstituentNameFormat",
        "summary": "Create a constituent name format",
        "description": "Creates a new constituent name format.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.NameFormatAdd"
            },
            "description": "An object that represents the name format to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an name format. The response body contains the ID of the new name format.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedNameFormat"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the name format."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/nameformats/{name_format_id}": {
      "patch": {
        "operationId": "EditConstituentNameFormat",
        "summary": "Update a constituent name format",
        "description": "Updates a constituent name format.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name_format_id",
            "in": "path",
            "description": "The system record ID of the name format to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Name format ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.NameFormatEdit"
            },
            "description": "An object that represents the properties of the name format to edit.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the name format."
          },
          "400": {
            "description": "Returned when the specified name format ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the name format."
          },
          "404": {
            "description": "Returned when the specified name format is not found."
          }
        }
      }
    },
    "/constituent/v1/notes": {
      "post": {
        "operationId": "CreateConstituentNote",
        "summary": "Create a constituent note",
        "description": "Creates a new constituent note.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.NoteAdd"
            },
            "description": "An object that represents the note to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a note. The response body contains the ID of the new note.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentNote"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the note."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/notes/{note_id}": {
      "patch": {
        "operationId": "EditConstituentNote",
        "summary": "Update a constituent note",
        "description": "Updates a constituent note.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "note_id",
            "in": "path",
            "description": "The system record ID of the note to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Note ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.NoteEdit"
            },
            "description": "An object that represent properties of the note to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the note."
          },
          "400": {
            "description": "Returned when the specified note ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the note."
          },
          "404": {
            "description": "Returned when the specified note is not found."
          }
        }
      }
    },
    "/constituent/v1/onlinepresences": {
      "post": {
        "operationId": "CreateConstituentOnlinePresence",
        "summary": "Create a constituent online presence",
        "description": "Creates a new constituent online presence.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.OnlinePresenceAdd"
            },
            "description": "An object that represents the online presence to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an online presence. The response body contains the ID of the new online presence.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentOnlinePresence"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the online presence."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/onlinepresences/{online_presence_id}": {
      "patch": {
        "operationId": "EditConstituentOnlinePresence",
        "summary": "Update a constituent online presence",
        "description": "Updates a constituent online presence.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "online_presence_id",
            "in": "path",
            "description": "The  system record ID of the online presence to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Online presence ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.OnlinePresenceEdit"
            },
            "description": "An object that represents the properties of the online presence to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the online presence."
          },
          "400": {
            "description": "Returned when the specified online presence ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the online presence."
          },
          "404": {
            "description": "Returned when the specified online presence is not found."
          }
        }
      }
    },
    "/constituent/v1/phones": {
      "post": {
        "operationId": "CreateConstituentPhone",
        "summary": "Create a constituent phone",
        "description": "Creates a new constituent phone.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.PhoneAdd"
            },
            "description": "An object that represents the phone to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a phone. The response body contains the ID of the new phone.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedConstituentPhone"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the phone."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/phones/{phone_id}": {
      "patch": {
        "operationId": "EditConstituentPhone",
        "summary": "Update a constituent phone",
        "description": "Updates a constituent phone.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "phone_id",
            "in": "path",
            "description": "The system record ID of the phone to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Phone ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.PhoneEdit"
            },
            "description": "An object that represents the properties of the phone to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the phone."
          },
          "400": {
            "description": "Returned when the specified phone ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the phone."
          },
          "404": {
            "description": "Returned when the specified phone is not found."
          }
        }
      }
    },
    "/constituent/v1/primarynameformats": {
      "post": {
        "operationId": "CreateConstituentPrimaryNameFormat",
        "summary": "Create a constituent primary name format",
        "description": "Creates a primary name format for a constituent.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.PrimaryNameFormatAdd"
            },
            "description": "An object that represents the primary name format to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an primary name format. The response body contains the ID of the new primary name format.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedNameFormat"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the primary name format."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/primarynameformats/{primary_name_format_id}": {
      "patch": {
        "operationId": "EditConstituentPrimaryNameFormat",
        "summary": "Update a constituent primary name format",
        "description": "Updates the primary name format for a constituent.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "primary_name_format_id",
            "in": "path",
            "description": "The system record ID of the primary name format to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Name format ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.PrimaryNameFormatEdit"
            },
            "description": "An object that represents the properties of the primary name format to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the primary name format."
          },
          "400": {
            "description": "Returned when the specified primary name format ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the primary name format."
          },
          "404": {
            "description": "Returned when the specified primary name format is not found."
          }
        }
      }
    },
    "/constituent/v1/relationships/{relationship_id}": {
      "patch": {
        "operationId": "EditConstituentRelationship",
        "summary": "Update a constituent relationship",
        "description": "Updates a relationship for a constituent. If a reciprocal relationship exists, it is also modified to reflect the changes. This does not include changes to the \"comments\" property, which is specific to each record and can be modified independently on each record.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "relationship_id",
            "in": "path",
            "description": "The system record ID of the relationship to update.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Relationship ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.RelationshipEdit"
            },
            "description": "An object that represents the properties of the relationship to update.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully updates the relationship."
          },
          "400": {
            "description": "Returned when the specified relationship ID in the request URL or the specified request parameters are not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to update the relationship."
          },
          "404": {
            "description": "Returned when the specified relationship is not found."
          }
        }
      }
    },
    "/constituent/v1/virtual/individuals": {
      "post": {
        "operationId": "CreateIndividualConstituent",
        "summary": "Create an individual constituent",
        "description": "Creates a new individual constituent.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.Virtual.IndividualAdd"
            },
            "description": "An object that represents the constituent to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a constituent. The response body contains the ID of the new constituent.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedIndividualConstituent"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create a constituent."
          }
        }
      }
    },
    "/constituent/v1/virtual/individualrelationships": {
      "post": {
        "operationId": "CreateIndividualRelationship",
        "summary": "Create an individual relationship",
        "description": "Creates a new individual relationship.  If the relationship is with another constituent, a reciprocal relationship is created for that constituent.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.Virtual.IndividualRelationshipAdd"
            },
            "description": "An object that represents the relationship to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a relationship. The response body contains the ID of the new relationship.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedIndividualRelationship"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the relationship."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/constituent/v1/virtual/organizations": {
      "post": {
        "operationId": "CreateOrganizationConstituent",
        "summary": "Create an organization constituent",
        "description": "Creates a new organization constituent.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.Virtual.OrganizationAdd"
            },
            "description": "An object that represents the constituent to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a constituent. The response body contains the ID of the new constituent.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedOrganizationConstituent"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create a constituent."
          }
        }
      }
    },
    "/constituent/v1/virtual/organizationrelationships": {
      "post": {
        "operationId": "CreateOrganizationRelationship",
        "summary": "Create an organization relationship",
        "description": "Creates a new organization relationship.  If the relationship is with another constituent, a reciprocal relationship is created for that constituent.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.Virtual.OrganizationRelationshipAdd"
            },
            "description": "An object that represents the relationship to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a relationship. The response body contains the ID of the new relationship.",
            "schema": {
              "$ref": "#/definitions/ConstituentApi.CreatedOrganizationRelationship"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the relationship."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/fundraising/v1/fundraisers/assignments": {
      "post": {
        "operationId": "CreateFundraiserAssignment",
        "summary": "Create a fundraiser assignment",
        "description": "Creates a new fundraiser assignment.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.FundraiserAssignmentAdd"
            },
            "description": "An object that represents the fundraising assignment to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates an assignment.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.CreatedFundraiserAssignment"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the assignment."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/fundraising/v1/fundraisers/{fundraiser_id}/assignments": {
      "get": {
        "operationId": "ListFundraiserAssignments",
        "summary": "List fundraiser assignments",
        "description": "List the assignments for a fundraiser.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fundraiser_id",
            "in": "path",
            "description": "The system record ID of the fundraiser for whom assignments are to be returned.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Fundraiser ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500. The maximum is 5000.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Represents the number of records to skip. For use with pagination.",
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/FundraisingApi.ApiCollectionOfFundraiserAssignmentRead"
            }
          },
          "400": {
            "description": "Returned when the specified ID is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the fundraiser assignments."
          },
          "404": {
            "description": "Returned when the specified fundraiser is not found."
          }
        }
      }
    },
    "/list/v1/lists": {
      "get": {
        "operationId": "ListLists",
        "summary": "List lists",
        "description": "Get a list of lists.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "list_type",
            "in": "query",
            "description": "The type of list to return.",
            "required": true,
            "type": "string",
            "x-ms-summary": "List type",
            "default": "Constituent",
            "enum": [
              "Constituent",
              "Gift",
              "Action",
              "Opportunity"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/ListApi.ApiCollectionOfList"
            }
          },
          "400": {
            "description": "Returned when the specified request parameters are not in the appropriate format."
          }
        }
      }
    },
    "/nxt-data-integration/v1/re/codetables/{code_table_id}/tableentries": {
      "get": {
        "operationId": "ListTableEntries",
        "summary": "List table entries",
        "description": "Lists the table entries for a code table.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "code_table_id",
            "in": "path",
            "description": "The code table ID.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-ms-summary": "Code table ID",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "include_inactive",
            "in": "query",
            "type": "boolean",
            "description": "Including inactive table entries?",
            "x-ms-summary": "Include inactive?"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/NXTDataIntegrationApi.TableEntryCollection"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view table entries."
          }
        }
      }
    },
    "/nxt-data-integration/v1/re/constituentidmap/{constituent_id}": {
      "get": {
        "operationId": "GetConstituentIdFromLookupId",
        "summary": "Get a constituent by lookup ID",
        "description": "Returns a constituent's system record ID from the specified lookup ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituent_id",
            "in": "path",
            "description": "The constituent lookup ID.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Lookup ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/NXTDataIntegrationApi.ConstituentIdMap"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view the constituent."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/nxt-data-integration/v1/re/constituents/customsearch": {
      "get": {
        "operationId": "SearchConstituentEnhanced",
        "summary": "Search for a constituent (enhanced)",
        "description": "Searches for constituent records using the given filter criteria.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "first_name",
            "in": "query",
            "description": "Constituent first name.",
            "type": "string",
            "x-ms-summary": "First name"
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Constituent last name.",
            "type": "string",
            "x-ms-summary": "Last name"
          },
          {
            "name": "lookup_id",
            "in": "query",
            "description": "Constituent lookup ID.",
            "type": "string",
            "x-ms-summary": "Lookup ID"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Constituent email address.",
            "type": "string",
            "x-ms-summary": "Email address"
          },
          {
            "name": "phone_number",
            "in": "query",
            "description": "Phone number.",
            "type": "string",
            "x-ms-summary": "Phone number"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Represents the number of records to return. The default is 500. The maximum is 1000.",
            "type": "integer",
            "x-ms-summary": "Limit",
            "maximum": 1000
          },
          {
            "name": "address_lines",
            "in": "query",
            "description": "Address lines.",
            "type": "string",
            "x-ms-summary": "Address lines",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "city",
            "in": "query",
            "description": "Address city.",
            "type": "string",
            "x-ms-summary": "City",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Address state.",
            "type": "string",
            "x-ms-summary": "State",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "post_code",
            "in": "query",
            "description": "Address postal code.",
            "type": "string",
            "x-ms-summary": "Postal code",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "include_alias",
            "in": "query",
            "description": "Include alias when searching on last name?",
            "type": "boolean",
            "x-ms-summary": "Include alias?",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "alias_type",
            "in": "query",
            "description": "Alias type.",
            "type": "string",
            "x-ms-summary": "Alias type",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "include_maiden_name",
            "in": "query",
            "description": "Include maiden name when searching on last name?",
            "type": "boolean",
            "x-ms-summary": "Include maiden name?",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/NXTDataIntegrationApi.ConstituentSearchResultCollection"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view constituents."
          }
        }
      }
    },
    "/nxt-data-integration/v1/re/tribute": {
      "post": {
        "operationId": "CreateConstituentTribute",
        "summary": "Create a constituent tribute",
        "description": "Creates a new constituent tribute.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NXTDataIntegrationApi.TributeCreate"
            },
            "description": "An object that represents the tribute to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a tribute. The response body contains the ID of the new tribute.",
            "schema": {
              "$ref": "#/definitions/NXTDataIntegrationApi.CreatedConstituentTribute"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the tribute."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/nxt-data-integration/v1/re/tribute/{tribute_id}": {
      "get": {
        "operationId": "GetConstituentTribute",
        "summary": "Get a constituent tribute",
        "description": "Returns details about a constituent tribute.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tribute_id",
            "in": "path",
            "description": "The tribute ID.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Tribute ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/NXTDataIntegrationApi.Tribute"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to view the tribute."
          },
          "404": {
            "description": "Returned when the specified tribute is not found."
          }
        }
      }
    },
    "/nxt-data-integration/v1/re/tribute/acknowledgee": {
      "post": {
        "operationId": "CreateTributeAcknowledgee",
        "summary": "Create a tribute acknowledgee",
        "description": "Creates a new tribute acknowledgee.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NXTDataIntegrationApi.TributeAcknowledgeeCreate"
            },
            "description": "An object that represents the tribute acknowledgee to create.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation successfully creates a tribute acknowledgee. The response body contains the ID of the new tribute acknowledgee.",
            "schema": {
              "$ref": "#/definitions/NXTDataIntegrationApi.CreatedTributeAcknowledgee"
            }
          },
          "400": {
            "description": "Returned when the request body is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to create the tribute acknowledgee."
          },
          "404": {
            "description": "Returned when the specified tribute is not found."
          }
        }
      }
    },
    "/nxt-data-integration/v1/re/tribute/constituent/{constituentId}": {
      "get": {
        "operationId": "ListConstituentTributes",
        "summary": "List constituent tributes",
        "description": "Lists the tributes for a constituent.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "constituentId",
            "in": "path",
            "description": "The system record ID of the constituent.",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Constituent ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/NXTDataIntegrationApi.TributeCollection"
            }
          },
          "400": {
            "description": "Returned when the specified constituent ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the tributes."
          },
          "404": {
            "description": "Returned when the specified constituent is not found."
          }
        }
      }
    },
    "/nxt-data-integration/v1/re/tribute/{tributeId}/acknowledgees": {
      "get": {
        "operationId": "ListTributeAcknowledgees",
        "summary": "List tribute acknowledgees",
        "description": "Lists the acknowledgees for a tribute.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tributeId",
            "in": "path",
            "description": "The system record ID of the tribute.",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Tribute ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/NXTDataIntegrationApi.TributeAcknowledgeeCollection"
            }
          },
          "400": {
            "description": "Returned when the specified tribute ID in the request URL is not in the appropriate format."
          },
          "403": {
            "description": "Returned when the user does not have permission to view the tribute acknowledgees."
          },
          "404": {
            "description": "Returned when the specified tribute is not found."
          }
        }
      }
    },
    "/powerautomateui/v1/dynamicvalues": {
      "get": {
        "operationId": "GetDynamicValues",
        "summary": "Get dynamic values",
        "description": "List dynamic values.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api",
            "in": "query",
            "description": "The underlying SKY API containing the route that will be used to populate the dynamic values list.",
            "required": true,
            "type": "string",
            "enum": [
              "constituent",
              "gift",
              "fundraising",
              "opportunity"
            ]
          },
          {
            "name": "route",
            "in": "query",
            "description": "The route within the specified SKY API to call to produce the values for the dynamic list.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/PowerAutomateUIApi.DynamicValuesCollection"
            }
          }
        }
      }
    },
    "/powerautomateui/v1/dynamicvalues/customfields": {
      "get": {
        "operationId": "GetCustomFieldCodeTableDynamicValues",
        "summary": "Get custom field code table dynamic values",
        "description": "List custom field code table dynamic values.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api",
            "in": "query",
            "description": "The underlying SKY API containing the route that will be used to populate the dynamic values list.",
            "required": true,
            "type": "string",
            "enum": [
              "constituent",
              "gift",
              "fundraising",
              "opportunity"
            ]
          },
          {
            "name": "custom_field_type",
            "in": "query",
            "description": "The type of entity that owns the custom field.",
            "required": true,
            "type": "string",
            "enum": [
              "actions",
              "constituents",
              "appeals",
              "campaigns",
              "funds",
              "gifts",
              "opportunities"
            ]
          },
          {
            "name": "category_name",
            "in": "query",
            "description": "The custom field category.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/PowerAutomateUIApi.DynamicValuesCollection"
            }
          }
        }
      }
    },
    "/powerautomateui/v1/dynamicproperties/customfields": {
      "get": {
        "operationId": "GetCustomFieldDynamicProperties",
        "summary": "Get custom field dynamic properties",
        "description": "List custom field dynamic properties.",
        "x-ms-visibility": "internal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api",
            "in": "query",
            "description": "The underlying SKY API containing the endpoint that will be used to fetch the custom field category definition.",
            "required": true,
            "type": "string",
            "enum": [
              "constituent",
              "gift",
              "fundraising",
              "opportunity"
            ]
          },
          {
            "name": "custom_field_type",
            "in": "query",
            "description": "The type of entity that owns the custom field.",
            "required": true,
            "type": "string",
            "enum": [
              "actions",
              "constituents",
              "appeals",
              "campaigns",
              "funds",
              "gifts",
              "opportunities"
            ]
          },
          {
            "name": "category",
            "in": "query",
            "description": "The custom field category.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/PowerAutomateUIApi.DynamicProperties"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CommPrefApi.ConsentCategory": {
      "type": "object",
      "description": "Consent category",
      "properties": {
        "description": {
          "type": "string",
          "description": "The name of the consent category.",
          "x-ms-summary": "Description"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the consent category inactive?",
          "x-ms-summary": "Inactive?"
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "The placement of the category in the order of category table values, if defined.",
          "x-ms-summary": "Sequence"
        }
      }
    },
    "CommPrefApi.ConsentCategoryCollection": {
      "type": "object",
      "description": "Consent categories",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of consent categories in the list.",
          "readOnly": true,
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of consent categories included in the response.",
          "items": {
            "$ref": "#/definitions/CommPrefApi.ConsentCategory"
          }
        }
      }
    },
    "CommPrefApi.ConsentChannel": {
      "type": "object",
      "description": "Consent channel",
      "properties": {
        "description": {
          "type": "string",
          "description": "The name of the consent channel.",
          "x-ms-summary": "Description"
        }
      }
    },
    "CommPrefApi.ConsentChannelCollection": {
      "type": "object",
      "description": "Consent channels",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of consent channels in the list.",
          "readOnly": true,
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of consent channels included in the response.",
          "items": {
            "$ref": "#/definitions/CommPrefApi.ConsentChannel"
          }
        }
      }
    },
    "CommPrefApi.ConsentSource": {
      "type": "object",
      "description": "Consent source",
      "properties": {
        "description": {
          "type": "string",
          "description": "The name of the consent source.",
          "x-ms-summary": "Description"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the consent source inactive?",
          "x-ms-summary": "Inactive?"
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "The placement of the source in the order of source table values, if defined.",
          "x-ms-summary": "Sequence"
        }
      }
    },
    "CommPrefApi.ConsentSourceCollection": {
      "type": "object",
      "description": "Consent sources",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of consent sources in the list.",
          "readOnly": true,
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of consent sources included in the response.",
          "items": {
            "$ref": "#/definitions/CommPrefApi.ConsentSource"
          }
        }
      }
    },
    "CommPrefApi.ConstituentConsentAdd": {
      "type": "object",
      "description": "Represents the consent entity to add to the specified constituent.",
      "required": [
        "constituent_id",
        "channel",
        "consent_date",
        "constituent_consent_response"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the consent record.",
          "x-ms-summary": "Constituent ID"
        },
        "channel": {
          "type": "string",
          "description": "The channel that the consent response applies to.",
          "x-ms-summary": "Channel",
          "x-ms-dynamic-values": {
            "operationId": "ListConsentChannels",
            "value-collection": "value",
            "value-path": "description",
            "value-title": "description"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListConsentChannels",
            "itemsPath": "value",
            "itemValuePath": "description",
            "itemTitlePath": "description"
          }
        },
        "category": {
          "type": "string",
          "description": "The category that the consent response applies to.",
          "x-ms-summary": "Category",
          "x-ms-dynamic-values": {
            "operationId": "ListConsentCategories",
            "value-collection": "value",
            "value-path": "description",
            "value-title": "description"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListConsentCategories",
            "itemsPath": "value",
            "itemValuePath": "description",
            "itemTitlePath": "description"
          }
        },
        "source": {
          "type": "string",
          "description": "The source of the consent response from the constituent.",
          "x-ms-summary": "Source",
          "x-ms-dynamic-values": {
            "operationId": "ListConsentSources",
            "value-collection": "value",
            "value-path": "description",
            "value-title": "description"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListConsentSources",
            "itemsPath": "value",
            "itemValuePath": "description",
            "itemTitlePath": "description"
          }
        },
        "constituent_consent_response": {
          "type": "string",
          "description": "How the constituent responded to consent for the specified channel/category.",
          "x-ms-summary": "Response",
          "enum": [
            "OptIn",
            "OptOut",
            "NoResponse"
          ]
        },
        "consent_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date the consent response was received (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "consent_statement": {
          "type": "string",
          "maxLength": 7999,
          "description": "The statement the constituent responded to when providing consent.",
          "x-ms-summary": "Consent statement"
        },
        "privacy_notice": {
          "type": "string",
          "maxLength": 7999,
          "description": "The privacy notice provided to the constituent.",
          "x-ms-summary": "Privacy notice"
        }
      }
    },
    "CommPrefApi.ConstituentConsentRead": {
      "type": "object",
      "description": "Represents a consent entity for a constituent.",
      "properties": {
        "id": {
          "description": "The system record ID of the consent record.",
          "type": "string",
          "x-ms-summary": "ID"
        },
        "channel": {
          "type": "string",
          "description": "The channel that the consent response applies to.",
          "x-ms-summary": "Channel"
        },
        "category": {
          "type": "string",
          "description": "The category that the consent response applies to.",
          "x-ms-summary": "Category"
        },
        "source": {
          "type": "string",
          "description": "The source of the consent response from the constituent.",
          "x-ms-summary": "Source"
        },
        "constituent_consent_response": {
          "type": "string",
          "description": "How the constituent responded to consent for the specified channel/category.",
          "x-ms-summary": "Response",
          "enum": [
            "OptIn",
            "OptOut",
            "NoResponse"
          ]
        },
        "consent_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date the consent response was received.",
          "x-ms-summary": "Date"
        },
        "consent_statement": {
          "type": "string",
          "description": "The statement the constituent responded to when providing consent.",
          "x-ms-summary": "Consent statement"
        },
        "privacy_notice": {
          "type": "string",
          "maxLength": 7999,
          "description": "The privacy notice provided to the constituent.",
          "x-ms-summary": "Privacy notice"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date the consent response was added.",
          "x-ms-summary": "Date added"
        },
        "user_name": {
          "type": "string",
          "description": "The user that added the consent response.",
          "x-ms-summary": "Added by"
        }
      }
    },
    "CommPrefApi.ConstituentConsentReadCollection": {
      "type": "object",
      "description": "Consent records",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of consent records in the list.",
          "readOnly": true,
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of consent records included in the response.",
          "items": {
            "$ref": "#/definitions/CommPrefApi.ConstituentConsentRead"
          }
        }
      }
    },
    "CommPrefApi.ConstituentSolicitCodeAdd": {
      "type": "object",
      "description": "Solicit codes provide guidance on how to contact constituents. These rules describe instructions and restrictions about when to reach out to constituents and how to tailor communications to honor their requests.",
      "required": [
        "constituent_id",
        "solicit_code"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the solicit code.",
          "x-ms-summary": "Constituent ID"
        },
        "solicit_code": {
          "type": "string",
          "description": "Communication instructions and/or restrictions for a constituent.",
          "x-ms-summary": "Solicit code",
          "x-ms-dynamic-values": {
            "operationId": "ListSolicitCodes",
            "value-collection": "value",
            "value-path": "description",
            "value-title": "description"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListSolicitCodes",
            "itemsPath": "value",
            "itemValuePath": "description",
            "itemTitlePath": "description"
          }
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "description": "The start date of the solicit code (ex: '2005-09-18').",
          "x-ms-summary": "Start date"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "description": "The end date of the solicit code (ex: '2005-09-18').",
          "x-ms-summary": "End date"
        }
      }
    },
    "CommPrefApi.ConstituentSolicitCodeEdit": {
      "type": "object",
      "description": "Solicit codes provide guidance on how to contact constituents. These rules describe instructions and restrictions about when to reach out to constituents and how to tailor communications to honor their requests.",
      "properties": {
        "solicit_code": {
          "type": "string",
          "description": "Communication instructions and/or restrictions for a constituent.",
          "x-ms-summary": "Solicit code",
          "x-ms-dynamic-values": {
            "operationId": "ListSolicitCodes",
            "value-collection": "value",
            "value-path": "description",
            "value-title": "description"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListSolicitCodes",
            "itemsPath": "value",
            "itemValuePath": "description",
            "itemTitlePath": "description"
          }
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "description": "The start date of the solicit code (ex: '2005-09-18').",
          "x-ms-summary": "Start date"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "description": "The end date of the solicit code (ex: '2005-09-18').",
          "x-ms-summary": "End date"
        }
      }
    },
    "CommPrefApi.ConstituentSolicitCodeRead": {
      "type": "object",
      "description": "Solicit code",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the constituent solicit code.",
          "x-ms-summary": "ID"
        },
        "solicit_code": {
          "type": "string",
          "description": "Communication instructions and/or restrictions for a constituent.",
          "x-ms-summary": "Solicit code"
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "description": "The start date of the solicit code (ex: '2005-09-18').",
          "x-ms-summary": "Start date"
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "description": "The end date of the solicit code (ex: '2005-09-18').",
          "x-ms-summary": "End date"
        }
      }
    },
    "CommPrefApi.ConstituentSolicitCodeReadCollection": {
      "type": "object",
      "description": "Solicit codes",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of constituent solicit codes in the list.",
          "readOnly": true,
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of constituent solicit codes included in the response.",
          "items": {
            "$ref": "#/definitions/CommPrefApi.ConstituentSolicitCodeRead"
          }
        }
      }
    },
    "CommPrefApi.CreatedConstituentConsent": {
      "type": "object",
      "description": "Created constituent consent",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created consent record.",
          "x-ms-summary": "ID"
        }
      }
    },
    "CommPrefApi.CreatedConstituentSolicitCode": {
      "type": "object",
      "description": "Created constituent solicit code",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent solicit code.",
          "x-ms-summary": "ID"
        }
      }
    },
    "CommPrefApi.SolicitCode": {
      "type": "object",
      "description": "Solicit code",
      "properties": {
        "description": {
          "type": "string",
          "description": "The name of the solicit code.",
          "x-ms-summary": "Description"
        }
      }
    },
    "CommPrefApi.SolicitCodeCollection": {
      "type": "object",
      "description": "Solicit codes",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of solicit codes in the list.",
          "readOnly": true,
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of solicit codes included in the response.",
          "items": {
            "$ref": "#/definitions/CommPrefApi.SolicitCode"
          }
        }
      }
    },
    "ConstituentApi.AddressAdd": {
      "type": "object",
      "description": "Addresses store information about constituent residences and other addresses along with information about where or whether to send mail.",
      "required": [
        "constituent_id",
        "type"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the address.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The address type.",
          "x-ms-summary": "Address type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "addresstypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "addresstypes"
              }
            }
          }
        },
        "country": {
          "type": "string",
          "description": "The country of the address (can be the ID, name, or abbreviation).",
          "x-ms-summary": "Country",
          "x-ms-dynamic-values": {
            "operationId": "ListCountries",
            "value-collection": "value",
            "value-path": "id",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListCountries",
            "itemsPath": "value",
            "itemValuePath": "id",
            "itemTitlePath": "name"
          }
        },
        "address_lines": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The address lines.",
          "x-ms-summary": "Address lines"
        },
        "city": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The city of the address (do not use in combination with the Suburb field).",
          "x-ms-summary": "City"
        },
        "state": {
          "type": "string",
          "description": "The state of the address.",
          "x-ms-summary": "State"
        },
        "postal_code": {
          "type": "string",
          "maxLength": 12,
          "minLength": 0,
          "description": "The postal code of the address.",
          "x-ms-summary": "Postal code"
        },
        "suburb": {
          "type": "string",
          "description": "The suburb of the address (do not use in combination with the City field).",
          "x-ms-summary": "Suburb"
        },
        "county": {
          "type": "string",
          "description": "The county of the address.",
          "x-ms-summary": "County"
        },
        "information_source": {
          "type": "string",
          "description": "The information source for the address.",
          "x-ms-summary": "Information source",
          "x-ms-visibility": "advanced"
        },
        "region": {
          "type": "string",
          "description": "The region for the address.",
          "x-ms-summary": "Region",
          "x-ms-visibility": "advanced"
        },
        "cart": {
          "type": "string",
          "maxLength": 20,
          "minLength": 0,
          "description": "The carrier route (CART) for the address.",
          "x-ms-summary": "CART",
          "x-ms-visibility": "advanced"
        },
        "lot": {
          "type": "string",
          "description": "The line of travel (LOT) for the address.",
          "x-ms-summary": "LOT",
          "x-ms-visibility": "advanced"
        },
        "dpc": {
          "type": "string",
          "description": "The delivery point code (DPC) for the address.",
          "maxLength": 8,
          "minLength": 0,
          "x-ms-summary": "DPC",
          "x-ms-visibility": "advanced"
        },
        "start": {
          "type": "string",
          "format": "date",
          "description": "The date when the constituent began residing at this address (ex: '2005-09-18').",
          "x-ms-summary": "Valid from",
          "x-ms-visibility": "advanced"
        },
        "end": {
          "type": "string",
          "format": "date",
          "description": "The date when the constituent ceased to reside at this address (ex: '2005-09-18').",
          "x-ms-summary": "Valid to",
          "x-ms-visibility": "advanced"
        },
        "preferred": {
          "type": "boolean",
          "description": "Is this the constituent's preferred address?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "do_not_mail": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this address?",
          "x-ms-summary": "Do not mail?",
          "x-ms-visibility": "advanced"
        },
        "seasonal_start": {
          "type": "object",
          "description": "The time of year that the constituent begins residing at this address.",
          "x-ms-summary": "Seasonal start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "seasonal_end": {
          "type": "object",
          "description": "The time of the year ceases to reside at this address.",
          "x-ms-summary": "Seasonal end",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        }
      }
    },
    "ConstituentApi.AddressEdit": {
      "type": "object",
      "description": "Addresses store information about constituent residences and other addresses along with information about where or whether to send mail.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The address type.",
          "x-ms-summary": "Address type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "addresstypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "addresstypes"
              }
            }
          }
        },
        "country": {
          "type": "string",
          "description": "The country of the address (can be the ID, name, or abbreviation).",
          "x-ms-summary": "Country",
          "x-ms-dynamic-values": {
            "operationId": "ListCountries",
            "value-collection": "value",
            "value-path": "id",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListCountries",
            "itemsPath": "value",
            "itemValuePath": "id",
            "itemTitlePath": "name"
          }
        },
        "address_lines": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The address lines.",
          "x-ms-summary": "Address lines"
        },
        "city": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The city of the address (do not use in combination with the Suburb field).",
          "x-ms-summary": "City"
        },
        "state": {
          "type": "string",
          "description": "The state of the address.",
          "x-ms-summary": "State"
        },
        "postal_code": {
          "type": "string",
          "maxLength": 12,
          "minLength": 0,
          "description": "The postal code of the address.",
          "x-ms-summary": "Postal code"
        },
        "suburb": {
          "type": "string",
          "description": "The suburb of the address (do not use in combination with the City field).",
          "x-ms-summary": "Suburb"
        },
        "county": {
          "type": "string",
          "description": "The county of the address.",
          "x-ms-summary": "County"
        },
        "information_source": {
          "type": "string",
          "description": "The information source for the address.",
          "x-ms-summary": "Information source",
          "x-ms-visibility": "advanced"
        },
        "region": {
          "type": "string",
          "description": "The region for the address.",
          "x-ms-summary": "Region",
          "x-ms-visibility": "advanced"
        },
        "cart": {
          "type": "string",
          "maxLength": 20,
          "minLength": 0,
          "description": "The carrier route (CART) for the address.",
          "x-ms-summary": "CART",
          "x-ms-visibility": "advanced"
        },
        "lot": {
          "type": "string",
          "description": "The line of travel (LOT) for the address.",
          "x-ms-summary": "LOT",
          "x-ms-visibility": "advanced"
        },
        "dpc": {
          "type": "string",
          "description": "The delivery point code (DPC) for the address.",
          "maxLength": 8,
          "minLength": 0,
          "x-ms-summary": "DPC",
          "x-ms-visibility": "advanced"
        },
        "start": {
          "type": "string",
          "format": "date",
          "description": "The date when the constituent began residing at this address (ex: '2005-09-18').",
          "x-ms-summary": "Valid from",
          "x-ms-visibility": "advanced"
        },
        "end": {
          "type": "string",
          "format": "date",
          "description": "The date when the constituent ceased to reside at this address (ex: '2005-09-18').",
          "x-ms-summary": "Valid to",
          "x-ms-visibility": "advanced"
        },
        "preferred": {
          "type": "boolean",
          "description": "Is this the constituent's preferred address?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "do_not_mail": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this address?",
          "x-ms-summary": "Do not mail?",
          "x-ms-visibility": "advanced"
        },
        "seasonal_start": {
          "type": "object",
          "description": "The time of year that the constituent begins residing at this address.",
          "x-ms-summary": "Seasonal start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "seasonal_end": {
          "type": "object",
          "description": "The time of the year ceases to reside at this address.",
          "x-ms-summary": "Seasonal end",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        }
      }
    },
    "ConstituentApi.AddressRead": {
      "type": "object",
      "description": "Address",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the address.",
          "x-ms-summary": "ID"
        },
        "type": {
          "type": "string",
          "description": "The address type.",
          "x-ms-summary": "Type"
        },
        "country": {
          "type": "string",
          "description": "The country of the address (can be the ID, name, or abbreviation).",
          "x-ms-summary": "Country"
        },
        "address_lines": {
          "type": "string",
          "description": "The address lines.",
          "x-ms-summary": "Address lines"
        },
        "city": {
          "type": "string",
          "description": "The city of the address (do not use in combination with the Suburb field).",
          "x-ms-summary": "City"
        },
        "state": {
          "type": "string",
          "description": "The state of the address.",
          "x-ms-summary": "State"
        },
        "postal_code": {
          "type": "string",
          "description": "The postal code of the address.",
          "x-ms-summary": "Postal code"
        },
        "suburb": {
          "type": "string",
          "description": "The suburb of the address (do not use in combination with the City field).",
          "x-ms-summary": "Suburb"
        },
        "county": {
          "type": "string",
          "description": "The county of the address.",
          "x-ms-summary": "County"
        },
        "formatted_address": {
          "type": "string",
          "description": "The formatted address in the configured format of the country.",
          "x-ms-summary": "Formatted address"
        },
        "information_source": {
          "type": "string",
          "description": "The information source for the address.",
          "x-ms-summary": "Information source"
        },
        "region": {
          "type": "string",
          "description": "The region for the address.",
          "x-ms-summary": "Region"
        },
        "cart": {
          "type": "string",
          "maxLength": 20,
          "minLength": 0,
          "description": "The carrier route (CART) for the address.",
          "x-ms-summary": "CART"
        },
        "lot": {
          "type": "string",
          "description": "The line of travel (LOT) for the address.",
          "x-ms-summary": "LOT"
        },
        "dpc": {
          "type": "string",
          "description": "The delivery point code (DPC) for the address.",
          "maxLength": 8,
          "minLength": 0,
          "x-ms-summary": "DPC"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the constituent began residing at this address.",
          "x-ms-summary": "Valid from"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the constituent ceased to reside at this address.",
          "x-ms-summary": "Valid to"
        },
        "preferred": {
          "type": "boolean",
          "description": "Is this the constituent's preferred address?",
          "x-ms-summary": "Primary?"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the address inactive (meaning, the current date is before any end date)?",
          "x-ms-summary": "Inactive?"
        },
        "do_not_mail": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this address?",
          "x-ms-summary": "Do not mail?"
        },
        "seasonal_start": {
          "type": "object",
          "description": "The time of year that the constituent begins residing at this address.",
          "x-ms-summary": "Seasonal start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "seasonal_end": {
          "type": "object",
          "description": "The time of the year ceases to reside at this address.",
          "x-ms-summary": "Seasonal end",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the address was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the address was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.AliasAdd": {
      "type": "object",
      "description": "Aliases provide secondary identification for individuals or organizations. For example, aliases can be stage names or acronyms.",
      "required": [
        "constituent_id",
        "name"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the alias.",
          "x-ms-summary": "Constituent ID"
        },
        "name": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0,
          "description": "The name to use as the constituent's alias. Character limit: 100.",
          "x-ms-summary": "Alias"
        },
        "type": {
          "type": "string",
          "description": "The alias type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "aliastypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "aliastypes"
              }
            }
          }
        }
      }
    },
    "ConstituentApi.AliasEdit": {
      "type": "object",
      "description": "Aliases provide secondary identification for individuals or organizations. For example, aliases can be stage names or acronyms.",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0,
          "description": "The name to use as the constituent's alias. Character limit: 100.",
          "x-ms-summary": "Alias"
        },
        "type": {
          "type": "string",
          "description": "The alias type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "aliastypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "aliastypes"
              }
            }
          }
        }
      }
    },
    "ConstituentApi.AliasRead": {
      "type": "object",
      "description": "Alias",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the alias.",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "description": "The name to use as the constituent's alias.",
          "x-ms-summary": "Alias"
        },
        "type": {
          "type": "string",
          "description": "The alias type.",
          "x-ms-summary": "Type"
        }
      }
    },
    "ConstituentApi.ApiCollectionOfAddressRead": {
      "type": "object",
      "description": "Addresses",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.AddressRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfAliasRead": {
      "type": "object",
      "description": "Aliases",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.AliasRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfConstituentAttachmentRead": {
      "type": "object",
      "description": "Attachments",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.ConstituentAttachmentRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfConstituentCodeRead": {
      "type": "object",
      "description": "Constituent codes",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.ConstituentCodeRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfConstituentCustomFieldRead": {
      "type": "object",
      "description": "Custom fields",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.ConstituentCustomFieldRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfConstituentRead": {
      "type": "object",
      "description": "Constituents",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.ConstituentRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfCountryRead": {
      "type": "object",
      "description": "Countries",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.CountryRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfCustomFieldCategoryRead": {
      "type": "object",
      "description": "Custom field categories",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.CustomFieldCategoryRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfEducationRead": {
      "type": "object",
      "description": "Educations",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.EducationRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfEmailAddressRead": {
      "type": "object",
      "description": "Email addresses",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.EmailAddressRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfFundraiserAssignmentRead": {
      "type": "object",
      "description": "Fundraiser assignments",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.FundraiserAssignmentRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfMembershipRead": {
      "type": "object",
      "description": "Memberships",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.MembershipRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfNameFormatConfigurationRead": {
      "type": "object",
      "description": "Name format configurations",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.NameFormatConfigurationRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfNoteRead": {
      "type": "object",
      "description": "Notes",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.NoteRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfOnlinePresenceRead": {
      "type": "object",
      "description": "Online presences",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.OnlinePresenceRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfPhoneRead": {
      "type": "object",
      "description": "Phones",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.PhoneRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfRelationshipRead": {
      "type": "object",
      "description": "Relationships",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.RelationshipRead"
          }
        }
      }
    },
    "ConstituentApi.ApiCollectionOfSearchResultRead": {
      "type": "object",
      "description": "Search results",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.SearchResultRead"
          }
        }
      }
    },
    "ConstituentApi.ConstituentAttachmentAdd": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "required": [
        "parent_id",
        "type"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the attachment.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z'). This field defaults to the current date and time if not supplied.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        },
        "tags": {
          "type": "array",
          "description": "The tags associated with the attachment.",
          "x-ms-summary": "Tags",
          "x-ms-visibility": "advanced",
          "items": {
            "type": "string",
            "x-ms-dynamic-values": {
              "operationId": "GetDynamicValues",
              "value-collection": "value",
              "value-path": "item",
              "value-title": "item",
              "parameters": {
                "api": "constituent",
                "route": "attachmenttags"
              }
            },
            "x-ms-dynamic-list": {
              "operationId": "GetDynamicValues",
              "itemsPath": "value",
              "itemValuePath": "item",
              "itemTitlePath": "item",
              "parameters": {
                "api": {
                  "value": "constituent"
                },
                "route": {
                  "value": "attachmenttags"
                }
              }
            }
          }
        }
      }
    },
    "ConstituentApi.ConstituentAttachmentEdit": {
      "type": "object",
      "description": "Many cultivation activities collect related collateral, such as correspondence and prospect research. Attachments can save this data on the appropriate record to maintain a complete view of those activities.",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "tags": {
          "type": "array",
          "description": "The tags associated with the attachment.",
          "x-ms-summary": "Tags",
          "x-ms-visibility": "advanced",
          "items": {
            "type": "string",
            "x-ms-dynamic-values": {
              "operationId": "GetDynamicValues",
              "value-collection": "value",
              "value-path": "item",
              "value-title": "item",
              "parameters": {
                "api": "constituent",
                "route": "attachmenttags"
              }
            },
            "x-ms-dynamic-list": {
              "operationId": "GetDynamicValues",
              "itemsPath": "value",
              "itemValuePath": "item",
              "itemTitlePath": "item",
              "parameters": {
                "api": {
                  "value": "constituent"
                },
                "route": {
                  "value": "attachmenttags"
                }
              }
            }
          }
        }
      }
    },
    "ConstituentApi.ConstituentAttachmentRead": {
      "type": "object",
      "description": "Attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the attachment.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the attachment.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The attachment type. Physical attachments are uploaded files such as images, PDFs, or Word documents that are saved locally or on the network. They are stored and managed in the system. Link attachments are links to files such as images, blog posts, or YouTube videos that are online or in a cloud storage account. They are stored and managed externally.",
          "x-ms-summary": "Type",
          "enum": [
            "Link",
            "Physical"
          ]
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "minLength": 0,
          "description": "The name of the attachment. Character limit: 150.",
          "x-ms-summary": "Name"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the attachment.",
          "x-ms-summary": "Date"
        },
        "url": {
          "type": "string",
          "description": "The URL for the attachment. This is required for link attachments and not applicable for physical attachments.",
          "x-ms-summary": "URL"
        },
        "file_name": {
          "type": "string",
          "description": "The name of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File name"
        },
        "file_id": {
          "type": "string",
          "description": "The identifier of the file. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "File ID"
        },
        "thumbnail_id": {
          "type": "string",
          "maxLength": 36,
          "minLength": 0,
          "description": "The identifier of the thumbnail. Character limit: 36. For physical attachments only.",
          "x-ms-summary": "Thumbnail ID"
        },
        "thumbnail_url": {
          "type": "string",
          "description": "The URL for a thumbnail. For physical attachments that are images only. Contains a time-bound signature that limits access to 60 minutes.",
          "x-ms-summary": "Thumbnail URL"
        },
        "content_type": {
          "type": "string",
          "description": "The content type. For physical attachments only.",
          "x-ms-summary": "Content type"
        },
        "file_size": {
          "type": "integer",
          "format": "int64",
          "description": "The file size in bytes. For physical attachments only.",
          "x-ms-summary": "File size"
        },
        "tags": {
          "type": "array",
          "description": "The tags associated with the attachment.",
          "x-ms-summary": "Tags",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ConstituentApi.ConstituentCodeAdd": {
      "type": "object",
      "description": "Constituent codes define the high-level affiliations between constituents and your organization - such as Board member, Vendor, and Volunteer - to provide context for why constituents are in the database.",
      "required": [
        "constituent_id",
        "description"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the constituent code.",
          "x-ms-summary": "Constituent ID"
        },
        "description": {
          "type": "string",
          "description": "The constituent code.",
          "x-ms-summary": "Constituent code",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "constituentcodetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "constituentcodetypes"
              }
            }
          }
        },
        "start": {
          "type": "object",
          "description": "The start date of the constituent code.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date of the constituent code.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "The numeric sequence associated with the constituent code.",
          "x-ms-summary": "Sequence"
        }
      }
    },
    "ConstituentApi.ConstituentCodeEdit": {
      "type": "object",
      "description": "Constituent codes define the high-level affiliations between constituents and your organization - such as Board member, Vendor, and Volunteer - to provide context for why constituents are in the database.",
      "properties": {
        "start": {
          "type": "object",
          "description": "The start date of the constituent code.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date of the constituent code.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "The numeric sequence associated with the constituent code.",
          "x-ms-summary": "Sequence"
        }
      }
    },
    "ConstituentApi.ConstituentCodeLink": {
      "type": "object",
      "description": "Constituent codes define the high-level affiliations between constituents and your organization - such as Board member, Vendor, and Volunteer - to provide context for why constituents are in the database.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the constituent code.",
          "x-ms-summary": "ID"
        },
        "start": {
          "type": "object",
          "description": "The start date of the constituent code.",
          "x-ms-summary": "start date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date of the constituent code.",
          "x-ms-summary": "end date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "The sequence of the constituent code.",
          "x-ms-summary": "sequence"
        }
      }
    },
    "ConstituentApi.ConstituentCodeRead": {
      "type": "object",
      "description": "Constituent code",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the constituent code.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the constituent code.",
          "x-ms-summary": "Constituent ID"
        },
        "description": {
          "type": "string",
          "description": "The constituent code.",
          "x-ms-summary": "Constituent code"
        },
        "start": {
          "type": "object",
          "description": "The start date of the constituent code.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date of the constituent code.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the constituent code inactive?",
          "x-ms-summary": "Inactive?"
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "The numeric sequence associated with the constituent code.",
          "x-ms-summary": "Sequence"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the constituent code was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the constituent code was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.ConstituentCustomFieldAdd": {
      "type": "object",
      "description": "While records provide many fields to track information, organizations often require additional details. To track this specialized information, use custom fields.",
      "required": [
        "parent_id",
        "category"
      ],
      "properties": {
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the custom field.",
          "x-ms-summary": "Constituent ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category",
          "x-ms-dynamic-values": {
            "operationId": "ListConstituentCustomFieldCategoryDetails",
            "value-collection": "value",
            "value-path": "name",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListConstituentCustomFieldCategoryDetails",
            "itemsPath": "value",
            "itemValuePath": "name",
            "itemTitlePath": "name"
          }
        },
        "value": {
          "type": "object",
          "x-ms-dynamic-schema": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": "constituent",
              "custom_field_type": "constituents",
              "category": {
                "parameter": "category"
              }
            },
            "value-path": "items"
          },
          "x-ms-dynamic-properties": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "custom_field_type": {
                "value": "constituents"
              },
              "category": {
                "parameterReference": "body/category"
              }
            },
            "itemValuePath": "items"
          }
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field (ex: '2005-09-18').",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        }
      }
    },
    "ConstituentApi.ConstituentCustomFieldEdit": {
      "type": "object",
      "description": "While records provide many fields to track information, organizations often require additional details. To track this specialized information, use custom fields.",
      "properties": {
        "category": {
          "type": "string",
          "description": "The custom field category (required if updating the custom field value).",
          "x-ms-summary": "Category",
          "x-ms-dynamic-values": {
            "operationId": "ListConstituentCustomFieldCategoryDetails",
            "value-collection": "value",
            "value-path": "name",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListConstituentCustomFieldCategoryDetails",
            "itemsPath": "value",
            "itemValuePath": "name",
            "itemTitlePath": "name"
          }
        },
        "value": {
          "type": "object",
          "x-ms-dynamic-schema": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": "constituent",
              "custom_field_type": "constituents",
              "category": {
                "parameter": "category"
              }
            },
            "value-path": "items"
          },
          "x-ms-dynamic-properties": {
            "operationId": "GetCustomFieldDynamicProperties",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "custom_field_type": {
                "value": "constituents"
              },
              "category": {
                "parameterReference": "body/category"
              }
            },
            "itemValuePath": "items"
          }
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field (ex: '2005-09-18').",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        }
      }
    },
    "ConstituentApi.ConstituentCustomFieldRead": {
      "type": "object",
      "description": "Custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the custom field.",
          "x-ms-summary": "ID"
        },
        "parent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the custom field.",
          "x-ms-summary": "Constituent ID"
        },
        "category": {
          "type": "string",
          "description": "The custom field category.",
          "x-ms-summary": "Category"
        },
        "type": {
          "type": "string",
          "description": "The type of data that the custom field represents.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        },
        "value": {
          "description": "The value of the custom field.",
          "x-ms-summary": "Value"
        },
        "text_value": {
          "type": "string",
          "description": "The text value of the custom field.",
          "x-ms-summary": "Text value"
        },
        "number_value": {
          "type": "integer",
          "format": "int32",
          "description": "The numeric value of the custom field.",
          "x-ms-summary": "Number value"
        },
        "date_value": {
          "type": "string",
          "format": "date",
          "description": "The date value of the custom field.",
          "x-ms-summary": "Date value"
        },
        "currency_value": {
          "type": "number",
          "format": "double",
          "description": "The currency value of the custom field.",
          "x-ms-summary": "Currency value"
        },
        "boolean_value": {
          "type": "boolean",
          "description": "The boolean value of the custom field.",
          "x-ms-summary": "Boolean value"
        },
        "codetableentry_value": {
          "type": "string",
          "description": "The table entry value of the custom field.",
          "x-ms-summary": "Table entry value"
        },
        "constituentid_value": {
          "type": "string",
          "description": "The constituent ID value of the custom field.",
          "x-ms-summary": "Constituent ID value"
        },
        "fuzzydate_value": {
          "type": "object",
          "description": "The fuzzy date value of the custom field.",
          "x-ms-summary": "Fuzzy date value",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date on the custom field.",
          "x-ms-summary": "Date"
        },
        "comment": {
          "type": "string",
          "description": "The comment on the custom field. Character limit: 50.",
          "x-ms-summary": "Comment"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the custom field was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.ConstituentEdit": {
      "type": "object",
      "description": "Constituents are the individuals and organizations who support your organization by contributing time, money, and resources. The constituent entity stores information about donors, prospects, volunteers, general supporters, and more.",
      "properties": {
        "title": {
          "type": "string",
          "description": "The constituent's primary title (for individuals only).",
          "x-ms-summary": "Title",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "titles"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "titles"
              }
            }
          }
        },
        "first": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The constituent's first name (for individuals only). Character limit: 50.",
          "x-ms-summary": "First name"
        },
        "last": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0,
          "description": "The constituent's last name (for individuals only). Character limit: 100.",
          "x-ms-summary": "Last name"
        },
        "name": {
          "type": "string",
          "description": "For individuals, this is a computed field that is not applicable for edit operations. For organization, this field is required and represents the organization's name. Character limit: 100.",
          "x-ms-summary": "Organization name"
        },
        "suffix": {
          "type": "string",
          "description": "The constituent's primary suffix (for individuals only).",
          "x-ms-summary": "Suffix",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "suffixes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "suffixes"
              }
            }
          }
        },
        "preferred_name": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The constituent's preferred name (for individuals only). Character limit: 50.",
          "x-ms-summary": "Preferred name"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the constituent.",
          "x-ms-summary": "Lookup ID"
        },
        "gender": {
          "type": "string",
          "description": "The constituent's gender (for individuals only).",
          "x-ms-summary": "Gender",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "genders"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "genders"
              }
            }
          }
        },
        "middle": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The constituent's middle name (for individuals only). Character limit: 50.",
          "x-ms-summary": "Middle name",
          "x-ms-visibility": "advanced"
        },
        "former_name": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0,
          "description": "The constituent's former name (for individuals only). Character limit: 100.",
          "x-ms-summary": "Former name",
          "x-ms-visibility": "advanced"
        },
        "title_2": {
          "type": "string",
          "description": "The constituent's secondary title (for individuals only).",
          "x-ms-summary": "Title 2",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "titles"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "titles"
              }
            }
          }
        },
        "suffix_2": {
          "type": "string",
          "description": "The constituent's secondary suffix (for individuals only).",
          "x-ms-summary": "Suffix 2",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "suffixes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "suffixes"
              }
            }
          }
        },
        "marital_status": {
          "type": "string",
          "description": "The constituent's marital status (for individuals only).",
          "x-ms-summary": "Marital status",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "maritalstatuses"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "maritalstatuses"
              }
            }
          }
        },
        "gives_anonymously": {
          "type": "boolean",
          "description": "Does the constituent give anonymously?",
          "x-ms-summary": "Gives anonymously?",
          "x-ms-visibility": "advanced"
        },
        "requests_no_email": {
          "type": "boolean",
          "description": "Does the constituent request no email?",
          "x-ms-summary": "Requests no email?",
          "x-ms-visibility": "advanced"
        },
        "is_solicitor": {
          "type": "boolean",
          "description": "Is the constituent a solicitor?",
          "x-ms-summary": "Is a solicitor?",
          "x-ms-visibility": "advanced"
        },
        "no_valid_address": {
          "type": "boolean",
          "description": "Does the constituent have no valid addresses?",
          "x-ms-summary": "No valid addresses?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the constituent inactive?",
          "x-ms-summary": "Inactive?",
          "x-ms-visibility": "advanced"
        },
        "birthdate": {
          "type": "object",
          "description": "The constituent's birthdate (for individuals only).",
          "x-ms-summary": "Birthdate",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "birthplace": {
          "type": "string",
          "description": "The birthplace of the constituent (for individuals only).",
          "x-ms-summary": "Birthplace",
          "x-ms-visibility": "advanced"
        },
        "ethnicity": {
          "type": "string",
          "description": "The ethnicity of the constituent (for individuals only).",
          "x-ms-summary": "Ethnicity",
          "x-ms-visibility": "advanced"
        },
        "target": {
          "type": "string",
          "description": "The target of the constituent.",
          "x-ms-summary": "Target",
          "x-ms-visibility": "advanced"
        },
        "income": {
          "type": "string",
          "description": "The income for the constituent (for individuals only).",
          "x-ms-summary": "Income",
          "x-ms-visibility": "advanced"
        },
        "receipt_type": {
          "type": "string",
          "description": "The receipt type of the constituent.",
          "x-ms-summary": "Receipt type",
          "x-ms-visibility": "advanced",
          "enum": [
            "One receipt per gift",
            "Consolidated receipts"
          ]
        },
        "religion": {
          "type": "string",
          "description": "The religion of the constituent (for individuals only).",
          "x-ms-summary": "Religion",
          "x-ms-visibility": "advanced"
        },
        "industry": {
          "type": "string",
          "description": "The industry of the constituent (for organizations only).",
          "x-ms-summary": "Industry",
          "x-ms-visibility": "advanced"
        },
        "num_employees": {
          "type": "integer",
          "format": "int32",
          "description": "The number of employees at the organization.",
          "x-ms-summary": "Number of employees",
          "x-ms-visibility": "advanced"
        },
        "matches_gifts": {
          "type": "boolean",
          "description": "Does the organization match gifts?",
          "x-ms-summary": "Matches gifts?",
          "x-ms-visibility": "advanced"
        },
        "matching_gift_factor": {
          "type": "number",
          "format": "double",
          "description": "The matching gift factor (for organizations only).",
          "x-ms-summary": "Matching gift factor",
          "x-ms-visibility": "advanced"
        },
        "matching_gift_per_gift_min": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The minimum match amount per gift for the constituent (for organizations only).",
              "x-ms-summary": "Min match per gift",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "matching_gift_per_gift_max": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The maximum match amount per gift for the constituent (for organizations only).",
              "x-ms-summary": "Max match per gift",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "matching_gift_total_min": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The minimum match total for the constituent (for organizations only).",
              "x-ms-summary": "Min match per constit",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "matching_gift_total_max": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The maximum match total for the constituent (for organizations only).",
              "x-ms-summary": "Max match per constit",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "matching_gift_notes": {
          "type": "string",
          "description": "The matching gift notes for the constituent (for organizations only).",
          "x-ms-summary": "Matching gift notes",
          "x-ms-visibility": "advanced"
        },
        "deceased": {
          "type": "boolean",
          "description": "Is the constituent deceased (for individuals only)?",
          "x-ms-summary": "Deceased?",
          "x-ms-visibility": "advanced"
        },
        "deceased_date": {
          "type": "object",
          "description": "The date when the constituent died (for individuals only).",
          "x-ms-summary": "Deceased date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "is_memorial": {
          "type": "boolean",
          "description": "Is the constituent an honor/memorial?",
          "x-ms-summary": "Is memorial?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.ConstituentRead": {
      "type": "object",
      "description": "Constituent",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID for the constituent. This is not the same as the user-definable constituent identifier, which is stored in the lookup_id.",
          "x-ms-summary": "ID"
        },
        "type": {
          "type": "string",
          "description": "The type of constituent.",
          "enum": [
            "Individual",
            "Organization"
          ],
          "x-ms-summary": "Type"
        },
        "title": {
          "type": "string",
          "description": "The constituent's primary title (for individuals only).",
          "x-ms-summary": "Title"
        },
        "first": {
          "type": "string",
          "description": "The constituent's first name (for individuals only).",
          "x-ms-summary": "First name"
        },
        "last": {
          "description": "The constituent's last name (for individuals only).",
          "type": "string",
          "x-ms-summary": "Last name"
        },
        "name": {
          "type": "string",
          "description": "For individuals, this field is the full name of the constituent based on the target organization's display name settings. For organizations, this is the organization's name.",
          "x-ms-summary": "Name"
        },
        "preferred_name": {
          "type": "string",
          "description": "The constituent's preferred name (for individuals only).",
          "x-ms-summary": "Preferred name"
        },
        "suffix": {
          "type": "string",
          "description": "The constituent's primary suffix (for individuals only).",
          "x-ms-summary": "Suffix"
        },
        "lookup_id": {
          "description": "The user-defined identifier for the constituent.",
          "type": "string",
          "x-ms-summary": "Lookup ID"
        },
        "email": {
          "type": "object",
          "description": "The constituent's primary email address, or the constituent's first active email address if no active email address is marked as primary.",
          "x-ms-summary": "Primary email",
          "properties": {
            "id": {
              "type": "string",
              "description": "The system record ID of the email address.",
              "x-ms-summary": "ID"
            },
            "type": {
              "type": "string",
              "description": "The type of email address.",
              "x-ms-summary": "type"
            },
            "address": {
              "type": "string",
              "description": "The email address.",
              "x-ms-summary": "address"
            },
            "do_not_email": {
              "type": "boolean",
              "description": "Can the constituent be contacted at this email address?",
              "x-ms-summary": "do not email?"
            },
            "inactive": {
              "type": "boolean",
              "description": "Is this email address inactive?",
              "x-ms-summary": "inactive?"
            },
            "date_added": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the email address was created.",
              "x-ms-summary": "date added"
            },
            "date_modified": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the email address was last modified.",
              "x-ms-summary": "date modified"
            }
          }
        },
        "phone": {
          "type": "object",
          "description": "The constituent's primary phone, or the constituent's first active phone if no active phone is marked as primary.",
          "x-ms-summary": "Primary phone",
          "properties": {
            "id": {
              "type": "string",
              "description": "The system record ID of the phone.",
              "x-ms-summary": "ID"
            },
            "type": {
              "type": "string",
              "description": "The phone type.",
              "x-ms-summary": "type"
            },
            "number": {
              "type": "string",
              "description": "The phone number.",
              "x-ms-summary": "number"
            },
            "do_not_call": {
              "type": "boolean",
              "description": "Can the constituent be contacted at this number?",
              "x-ms-summary": "do not call?"
            },
            "inactive": {
              "type": "boolean",
              "description": "Is this phone number inactive?",
              "x-ms-summary": "inactive?"
            },
            "date_added": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the phone was created.",
              "x-ms-summary": "date added"
            },
            "date_modified": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the phone was last modified.",
              "x-ms-summary": "date modified"
            }
          }
        },
        "online_presence": {
          "type": "object",
          "description": "The constituent's primary online presence, or the constituent's first active online presence if no active online presence is marked as primary.",
          "x-ms-summary": "Primary online presence",
          "properties": {
            "id": {
              "type": "string",
              "description": "The system record ID of the online presence.",
              "x-ms-summary": "ID"
            },
            "type": {
              "type": "string",
              "description": "The online presence type.",
              "x-ms-summary": "type"
            },
            "address": {
              "type": "string",
              "description": "The web address for the online presence.",
              "x-ms-summary": "link"
            },
            "inactive": {
              "type": "boolean",
              "description": "Is this online presence inactive?",
              "x-ms-summary": "inactive?"
            },
            "date_added": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the online presence was created.",
              "x-ms-summary": "date added"
            },
            "date_modified": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the online presence was last modified.",
              "x-ms-summary": "date modified"
            }
          }
        },
        "address": {
          "type": "object",
          "description": "The constituent's preferred address.",
          "x-ms-summary": "Preferred address",
          "properties": {
            "id": {
              "type": "string",
              "description": "The system record ID of the address.",
              "x-ms-summary": "ID"
            },
            "type": {
              "type": "string",
              "description": "The address type.",
              "x-ms-summary": "type"
            },
            "country": {
              "type": "string",
              "description": "The country of the address (can be the ID, name, or abbreviation).",
              "x-ms-summary": "country"
            },
            "address_lines": {
              "type": "string",
              "description": "The address lines.",
              "x-ms-summary": "lines"
            },
            "city": {
              "type": "string",
              "description": "The city of the address (do not use in combination with the Suburb field).",
              "x-ms-summary": "city"
            },
            "state": {
              "type": "string",
              "description": "The state of the address.",
              "x-ms-summary": "state"
            },
            "postal_code": {
              "type": "string",
              "description": "The postal code of the address.",
              "x-ms-summary": "postal code"
            },
            "suburb": {
              "type": "string",
              "description": "The suburb of the address (do not use in combination with the City field).",
              "x-ms-summary": "suburb"
            },
            "county": {
              "type": "string",
              "description": "The county of the address.",
              "x-ms-summary": "county"
            },
            "formatted_address": {
              "type": "string",
              "description": "The formatted address in the configured format of the country.",
              "x-ms-summary": "formatted"
            },
            "start": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the constituent began residing at this address.",
              "x-ms-summary": "valid from"
            },
            "end": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the constituent ceased to reside at this address.",
              "x-ms-summary": "valid to"
            },
            "inactive": {
              "type": "boolean",
              "description": "Is the address inactive (meaning, the current date is before any end date)?",
              "x-ms-summary": "inactive?"
            },
            "do_not_mail": {
              "type": "boolean",
              "description": "Can the constituent be contacted at this address?",
              "x-ms-summary": "do not mail?"
            },
            "seasonal_start": {
              "type": "object",
              "description": "The time of year that the constituent begins residing at this address.",
              "x-ms-summary": "seasonal start",
              "properties": {
                "d": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The day in the fuzzy date.",
                  "x-ms-summary": "day"
                },
                "m": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The month in the fuzzy date.",
                  "x-ms-summary": "month"
                },
                "y": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The year in the fuzzy date.",
                  "x-ms-summary": "year"
                }
              }
            },
            "seasonal_end": {
              "type": "object",
              "description": "The time of the year ceases to reside at this address.",
              "x-ms-summary": "seasonal end",
              "properties": {
                "d": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The day in the fuzzy date.",
                  "x-ms-summary": "day"
                },
                "m": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The month in the fuzzy date.",
                  "x-ms-summary": "month"
                },
                "y": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The year in the fuzzy date.",
                  "x-ms-summary": "year"
                }
              }
            },
            "date_added": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the address was created.",
              "x-ms-summary": "date added"
            },
            "date_modified": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the address was last modified.",
              "x-ms-summary": "date modified"
            }
          }
        },
        "gender": {
          "type": "string",
          "description": "The constituent's gender (for individuals only).",
          "x-ms-summary": "Gender"
        },
        "middle": {
          "type": "string",
          "description": "The constituent's middle name (for individuals only).",
          "x-ms-summary": "Middle name"
        },
        "former_name": {
          "type": "string",
          "description": "The constituent's former name (for individuals only).",
          "x-ms-summary": "Former name"
        },
        "title_2": {
          "type": "string",
          "description": "The constituent's secondary title (for individuals only).",
          "x-ms-summary": "Title 2"
        },
        "suffix_2": {
          "type": "string",
          "description": "The constituent's secondary suffix (for individuals only).",
          "x-ms-summary": "Suffix 2"
        },
        "marital_status": {
          "type": "string",
          "description": "The constituent's marital status (for individuals only).",
          "x-ms-summary": "Marital staus"
        },
        "gives_anonymously": {
          "type": "boolean",
          "description": "Does the constituent give anonymously?",
          "x-ms-summary": "Gives anonymously?"
        },
        "requests_no_email": {
          "type": "boolean",
          "description": "Does the constituent request no email?",
          "x-ms-summary": "Requests no email?"
        },
        "is_solicitor": {
          "type": "boolean",
          "description": "Is the constituent a solicitor?",
          "x-ms-summary": "Is a solicitor?",
          "x-ms-visibility": "advanced"
        },
        "no_valid_address": {
          "type": "boolean",
          "description": "Does the constituent have no valid addresses?",
          "x-ms-summary": "No valid addresses?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the constituent inactive?",
          "x-ms-summary": "Inactive?"
        },
        "birthdate": {
          "type": "object",
          "description": "The constituent's birthdate (for individuals only).",
          "x-ms-summary": "Birthdate",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "birthplace": {
          "type": "string",
          "description": "The birthplace of the constituent (for individuals only).",
          "x-ms-summary": "Birthplace"
        },
        "ethnicity": {
          "type": "string",
          "description": "The ethnicity of the constituent (for individuals only).",
          "x-ms-summary": "Ethnicity"
        },
        "target": {
          "type": "string",
          "description": "The target of the constituent.",
          "x-ms-summary": "Target",
          "x-ms-visibility": "advanced"
        },
        "income": {
          "type": "string",
          "description": "The income for the constituent (for individuals only).",
          "x-ms-summary": "Income"
        },
        "receipt_type": {
          "type": "string",
          "description": "The receipt type of the constituent.",
          "x-ms-summary": "Receipt type",
          "x-ms-visibility": "advanced",
          "enum": [
            "One receipt per gift",
            "Consolidated receipts"
          ]
        },
        "religion": {
          "type": "string",
          "description": "The religion of the constituent (for individuals only).",
          "x-ms-summary": "Religion"
        },
        "industry": {
          "type": "string",
          "description": "The industry of the constituent (for organizations only).",
          "x-ms-summary": "Industry"
        },
        "num_employees": {
          "type": "integer",
          "format": "int32",
          "description": "The number of employees at the organization.",
          "x-ms-summary": "Number of employees"
        },
        "matches_gifts": {
          "type": "boolean",
          "description": "Does the organization match gifts?",
          "x-ms-summary": "Matches gifts?"
        },
        "matching_gift_factor": {
          "type": "number",
          "format": "double",
          "description": "The matching gift factor (for organizations only).",
          "x-ms-summary": "Matching gift factor"
        },
        "matching_gift_per_gift_min": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The minimum match amount per gift for the constituent (for organizations only).",
              "x-ms-summary": "Min match per gift"
            }
          }
        },
        "matching_gift_per_gift_max": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The maximum match amount per gift for the constituent (for organizations only).",
              "x-ms-summary": "Max match per gift"
            }
          }
        },
        "matching_gift_total_min": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The minimum match total for the constituent (for organizations only).",
              "x-ms-summary": "Min match per constit"
            }
          }
        },
        "matching_gift_total_max": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The maximum match total for the constituent (for organizations only).",
              "x-ms-summary": "Max match per constit"
            }
          }
        },
        "matching_gift_notes": {
          "type": "string",
          "description": "The matching gift notes for the constituent (for organizations only).",
          "x-ms-summary": "Matching gift notes"
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "The constituent's age, as calculated based on the birthdate property (for individuals only).",
          "x-ms-summary": "Age"
        },
        "deceased": {
          "type": "boolean",
          "description": "Is the constituent deceased (for individuals only)?",
          "x-ms-summary": "Deceased?"
        },
        "deceased_date": {
          "type": "object",
          "description": "The date when the constituent died (for individuals only).",
          "x-ms-summary": "Deceased date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "fundraiser_status": {
          "type": "string",
          "description": "Indicates whether the constituent is a fundraiser (for individuals only).",
          "enum": [
            "Active",
            "Inactive",
            "None"
          ],
          "x-ms-summary": "Fundraiser status"
        },
        "is_memorial": {
          "type": "boolean",
          "description": "Is the constituent an honor/memorial?",
          "x-ms-summary": "Is memorial?",
          "x-ms-visibility": "advanced"
        },
        "spouse": {
          "type": "object",
          "description": "The constituent's spouse (for individuals only).",
          "x-ms-summary": "Spouse",
          "properties": {
            "id": {
              "type": "string",
              "description": "The system record ID of the spouse.",
              "x-ms-summary": "ID"
            },
            "first": {
              "type": "string",
              "description": "The spouse's first name.",
              "x-ms-summary": "first name"
            },
            "last": {
              "type": "string",
              "description": "The spouse's last name.",
              "x-ms-summary": "last name"
            },
            "is_head_of_household": {
              "type": "boolean",
              "description": "Is the spouse the head of the household?",
              "x-ms-summary": "is head of household?"
            }
          }
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the constituent was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the constituent was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.ConvertedConstituent": {
      "type": "object",
      "description": "Converted constituent",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the converted constituent.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CountryRead": {
      "type": "object",
      "description": "Country",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the country.",
          "x-ms-summary": "ID"
        },
        "abbreviation": {
          "type": "string",
          "description": "The user-defined abbreviation for the country.",
          "x-ms-summary": "Abbreviation"
        },
        "name": {
          "type": "string",
          "description": "The country name.",
          "x-ms-summary": "Name"
        }
      }
    },
    "ConstituentApi.CreatedConstituentAddress": {
      "type": "object",
      "description": "Created constituent address",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent address.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentAlias": {
      "type": "object",
      "description": "Created constituent alias",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent alias.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentAttachment": {
      "type": "object",
      "description": "Created constituent attachment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent attachment.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentCode": {
      "type": "object",
      "description": "Created constituent code",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent code.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentCustomField": {
      "type": "object",
      "description": "Created constituent custom field",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent custom field.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentEducation": {
      "type": "object",
      "description": "Created constituent education",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent education.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentEmailAddress": {
      "type": "object",
      "description": "Created constituent email address",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent email address.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentNote": {
      "type": "object",
      "description": "Created constituent note",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent note.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentOnlinePresence": {
      "type": "object",
      "description": "Created constituent online presence",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent online presence.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedConstituentPhone": {
      "type": "object",
      "description": "Created constituent phone",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent phone.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedIndividualConstituent": {
      "type": "object",
      "description": "Created individual constituent",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created individual constituent.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedIndividualRelationship": {
      "type": "object",
      "description": "Created individual relationship",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created individual relationship.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedNameFormat": {
      "type": "object",
      "description": "Created name format",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created name format.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedOrganizationConstituent": {
      "type": "object",
      "description": "Created organization constituent",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created organization constituent.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CreatedOrganizationRelationship": {
      "type": "object",
      "description": "Created organization relationship",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created organization relationship.",
          "x-ms-summary": "ID"
        }
      }
    },
    "ConstituentApi.CustomFieldCategoryRead": {
      "type": "object",
      "description": "Custom field category",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the custom field category.",
          "x-ms-summary": "Name"
        },
        "type": {
          "type": "string",
          "description": "The type of data that custom fields with this category represent.",
          "x-ms-summary": "Type",
          "enum": [
            "Text",
            "Number",
            "Date",
            "Currency",
            "Boolean",
            "CodeTableEntry",
            "ConstituentId",
            "FuzzyDate"
          ]
        }
      }
    },
    "ConstituentApi.EducationAdd": {
      "type": "object",
      "description": "A constituent's education history provides important insight into who they are and often helps determine which causes to which the constituent will invest time and money.",
      "required": [
        "constituent_id",
        "school"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the education.",
          "x-ms-summary": "Constituent ID"
        },
        "school": {
          "type": "string",
          "description": "The school/establishment name.",
          "x-ms-summary": "School",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/schools"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/schools"
              }
            }
          }
        },
        "type": {
          "type": "string",
          "description": "The type of education.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/types"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/types"
              }
            }
          }
        },
        "class_of": {
          "type": "string",
          "description": "The year the constituent graduated.",
          "x-ms-summary": "Class of"
        },
        "status": {
          "type": "string",
          "description": "The status of the education.",
          "x-ms-summary": "Status",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/statuses"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/statuses"
              }
            }
          }
        },
        "date_entered": {
          "type": "object",
          "description": "The first date of attendance.",
          "x-ms-summary": "Date entered",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "date_left": {
          "type": "object",
          "description": "The last date of attendance.",
          "x-ms-summary": "Date left",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "date_graduated": {
          "type": "object",
          "description": "The graduation date.",
          "x-ms-summary": "Date graduated",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "degree": {
          "type": "string",
          "description": "The degree received.",
          "x-ms-summary": "Degree",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/degrees"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/degrees"
              }
            }
          }
        },
        "gpa": {
          "type": "number",
          "format": "double",
          "description": "The grade point average.",
          "x-ms-summary": "GPA"
        },
        "subject_of_study": {
          "type": "string",
          "description": "The subject of study.",
          "x-ms-summary": "Subject of study",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/subjects"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/subjects"
              }
            }
          }
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary school association?",
          "x-ms-summary": "Primary?"
        },
        "majors": {
          "type": "array",
          "description": "The major courses of study.",
          "items": {
            "type": "string",
            "x-ms-dynamic-values": {
              "operationId": "GetDynamicValues",
              "value-collection": "value",
              "value-path": "item",
              "value-title": "item",
              "parameters": {
                "api": "constituent",
                "route": "educations/subjects"
              }
            },
            "x-ms-dynamic-list": {
              "operationId": "GetDynamicValues",
              "itemsPath": "value",
              "itemValuePath": "item",
              "itemTitlePath": "item",
              "parameters": {
                "api": {
                  "value": "constituent"
                },
                "route": {
                  "value": "educations/subjects"
                }
              }
            }
          },
          "x-ms-summary": "Majors"
        },
        "minors": {
          "type": "array",
          "description": "The minor courses of study.",
          "items": {
            "type": "string",
            "x-ms-dynamic-values": {
              "operationId": "GetDynamicValues",
              "value-collection": "value",
              "value-path": "item",
              "value-title": "item",
              "parameters": {
                "api": "constituent",
                "route": "educations/subjects"
              }
            },
            "x-ms-dynamic-list": {
              "operationId": "GetDynamicValues",
              "itemsPath": "value",
              "itemValuePath": "item",
              "itemTitlePath": "item",
              "parameters": {
                "api": {
                  "value": "constituent"
                },
                "route": {
                  "value": "educations/subjects"
                }
              }
            }
          },
          "x-ms-summary": "Minors"
        },
        "campus": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The campus.  Character limit: 50.",
          "x-ms-summary": "Campus",
          "x-ms-visibility": "advanced"
        },
        "social_organization": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The social organization. Character limit: 50.",
          "x-ms-summary": "Social organization",
          "x-ms-visibility": "advanced"
        },
        "known_name": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The known name. Character limit: 50.",
          "x-ms-summary": "Known name",
          "x-ms-visibility": "advanced"
        },
        "class_of_degree": {
          "type": "string",
          "description": "The class of degree (only applicable for UK versions).",
          "x-ms-summary": "Class of degree",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/degreeclasses"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/degreeclasses"
              }
            }
          }
        },
        "department": {
          "type": "string",
          "description": "The name of the education department (only applicable for UK versions).",
          "x-ms-summary": "Department",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/departments"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/departments"
              }
            }
          }
        },
        "faculty": {
          "type": "string",
          "description": "The name of the faculty (only applicable for UK versions).",
          "x-ms-summary": "Faculty",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/faculties"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/faculties"
              }
            }
          }
        },
        "registration_number": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The registration number (only applicable for UK versions). Character limit: 50.",
          "x-ms-summary": "Registration number",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.EducationEdit": {
      "type": "object",
      "description": "A constituent's education history provides important insight into who they are and often helps determine which causes to which the constituent will invest time and money.",
      "properties": {
        "school": {
          "type": "string",
          "description": "The school/establishment name.",
          "x-ms-summary": "School",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/schools"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/schools"
              }
            }
          }
        },
        "type": {
          "type": "string",
          "description": "The type of education.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/types"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/types"
              }
            }
          }
        },
        "class_of": {
          "type": "string",
          "description": "The year the constituent graduated.",
          "x-ms-summary": "Class of"
        },
        "status": {
          "type": "string",
          "description": "The status of the education.",
          "x-ms-summary": "Status",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/statuses"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/statuses"
              }
            }
          }
        },
        "date_entered": {
          "type": "object",
          "description": "The first date of attendance.",
          "x-ms-summary": "Date entered",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "date_left": {
          "type": "object",
          "description": "The last date of attendance.",
          "x-ms-summary": "Date left",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "date_graduated": {
          "type": "object",
          "description": "The graduation date.",
          "x-ms-summary": "Date graduated",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "degree": {
          "type": "string",
          "description": "The degree received.",
          "x-ms-summary": "Degree",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/degrees"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/degrees"
              }
            }
          }
        },
        "gpa": {
          "type": "number",
          "format": "double",
          "description": "The grade point average.",
          "x-ms-summary": "GPA"
        },
        "subject_of_study": {
          "type": "string",
          "description": "The subject of study.",
          "x-ms-summary": "Subject of study",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/subjects"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/subjects"
              }
            }
          }
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary school association?",
          "x-ms-summary": "Primary?"
        },
        "majors": {
          "type": "array",
          "description": "The major courses of study.",
          "items": {
            "type": "string",
            "x-ms-dynamic-values": {
              "operationId": "GetDynamicValues",
              "value-collection": "value",
              "value-path": "item",
              "value-title": "item",
              "parameters": {
                "api": "constituent",
                "route": "educations/subjects"
              }
            },
            "x-ms-dynamic-list": {
              "operationId": "GetDynamicValues",
              "itemsPath": "value",
              "itemValuePath": "item",
              "itemTitlePath": "item",
              "parameters": {
                "api": {
                  "value": "constituent"
                },
                "route": {
                  "value": "educations/subjects"
                }
              }
            }
          },
          "x-ms-summary": "Majors"
        },
        "minors": {
          "type": "array",
          "description": "The minor courses of study.",
          "items": {
            "type": "string",
            "x-ms-dynamic-values": {
              "operationId": "GetDynamicValues",
              "value-collection": "value",
              "value-path": "item",
              "value-title": "item",
              "parameters": {
                "api": "constituent",
                "route": "educations/subjects"
              }
            },
            "x-ms-dynamic-list": {
              "operationId": "GetDynamicValues",
              "itemsPath": "value",
              "itemValuePath": "item",
              "itemTitlePath": "item",
              "parameters": {
                "api": {
                  "value": "constituent"
                },
                "route": {
                  "value": "educations/subjects"
                }
              }
            }
          },
          "x-ms-summary": "Minors"
        },
        "campus": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The campus.  Character limit: 50.",
          "x-ms-summary": "Campus",
          "x-ms-visibility": "advanced"
        },
        "social_organization": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The social organization. Character limit: 50.",
          "x-ms-summary": "Social organization",
          "x-ms-visibility": "advanced"
        },
        "known_name": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The known name. Character limit: 50.",
          "x-ms-summary": "Known name",
          "x-ms-visibility": "advanced"
        },
        "class_of_degree": {
          "type": "string",
          "description": "The class of degree.",
          "x-ms-summary": "Class of degree",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/degreeclasses"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/degreeclasses"
              }
            }
          }
        },
        "department": {
          "type": "string",
          "description": "The name of the education department.",
          "x-ms-summary": "Department",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/departments"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/departments"
              }
            }
          }
        },
        "faculty": {
          "type": "string",
          "description": "The name of the faculty.",
          "x-ms-summary": "Faculty",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "educations/faculties"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "educations/faculties"
              }
            }
          }
        },
        "registration_number": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The registration number. Character limit: 50.",
          "x-ms-summary": "Registration number",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.EducationRead": {
      "type": "object",
      "description": "Education",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the education.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the education.",
          "x-ms-summary": "Constituent ID"
        },
        "school": {
          "type": "string",
          "description": "The school/establishment name.",
          "x-ms-summary": "School"
        },
        "type": {
          "type": "string",
          "description": "The type of education.",
          "x-ms-summary": "Type"
        },
        "class_of": {
          "type": "string",
          "description": "The year the constituent graduated.",
          "x-ms-summary": "Class of"
        },
        "status": {
          "type": "string",
          "description": "The status of the education.",
          "x-ms-summary": "Status"
        },
        "date_entered": {
          "type": "object",
          "description": "The first date of attendance.",
          "x-ms-summary": "Date entered",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "date_left": {
          "type": "object",
          "description": "The last date of attendance.",
          "x-ms-summary": "Date left",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "date_graduated": {
          "type": "object",
          "description": "The graduation date.",
          "x-ms-summary": "Date graduated",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "degree": {
          "type": "string",
          "description": "The degree received.",
          "x-ms-summary": "Degree"
        },
        "gpa": {
          "type": "number",
          "format": "double",
          "description": "The grade point average.",
          "x-ms-summary": "GPA"
        },
        "majors": {
          "type": "array",
          "description": "The major courses of study.",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Majors"
        },
        "minors": {
          "type": "array",
          "description": "The minor courses of study.",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Minors"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary school association?",
          "x-ms-summary": "Is primary education?"
        },
        "campus": {
          "type": "string",
          "description": "The campus.",
          "x-ms-summary": "Campus"
        },
        "social_organization": {
          "type": "string",
          "description": "The social organization.",
          "x-ms-summary": "Social organization"
        },
        "known_name": {
          "type": "string",
          "description": "The known name.",
          "x-ms-summary": "Known name"
        },
        "class_of_degree": {
          "type": "string",
          "description": "The class of degree.",
          "x-ms-summary": "Class of degree"
        },
        "department": {
          "type": "string",
          "description": "The name of the education department.",
          "x-ms-summary": "Department"
        },
        "faculty": {
          "type": "string",
          "description": "The name of the faculty.",
          "x-ms-summary": "Faculty"
        },
        "registration_number": {
          "type": "string",
          "description": "The registration number.",
          "x-ms-summary": "Registration number"
        },
        "subject_of_study": {
          "type": "string",
          "description": "The subject of study.",
          "x-ms-summary": "Subject of study"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the education was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the education was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.EmailAddressAdd": {
      "type": "object",
      "description": "Email addresses store information about constituent email accounts and where to send email correspondences for individuals and organizations.",
      "required": [
        "constituent_id",
        "address",
        "type"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the email address.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The type of email address.",
          "x-ms-summary": "Email type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "emailaddresstypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "emailaddresstypes"
              }
            }
          }
        },
        "address": {
          "type": "string",
          "description": "The email address.",
          "x-ms-summary": "Email address"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary email address?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "do_not_email": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this email address?",
          "x-ms-summary": "Do not email?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this email address inactive?",
          "x-ms-summary": "Inactive?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.EmailAddressEdit": {
      "type": "object",
      "description": "Email addresses store information about constituent email accounts and where to send email correspondences for individuals and organizations.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of email address.",
          "x-ms-summary": "Email type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "emailaddresstypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "emailaddresstypes"
              }
            }
          }
        },
        "address": {
          "type": "string",
          "description": "The email address.",
          "x-ms-summary": "Email address"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary email address?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "do_not_email": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this email address?",
          "x-ms-summary": "Do not email?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this email address inactive?",
          "x-ms-summary": "Inactive?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.EmailAddressRead": {
      "type": "object",
      "description": "Email address",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the email address.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the email address.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The type of email address.",
          "x-ms-summary": "Email type"
        },
        "address": {
          "type": "string",
          "description": "The email address.",
          "x-ms-summary": "Email address"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary email address?",
          "x-ms-summary": "Primary?"
        },
        "do_not_email": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this email address?",
          "x-ms-summary": "Do not email?"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this email address inactive?",
          "x-ms-summary": "Inactive?"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the email address was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the email address was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.FundraiserAssignmentRead": {
      "type": "object",
      "description": "Fundraiser assignment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the fundraiser assignment.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent assigned to the fundraiser.",
          "x-ms-summary": "Constituent ID"
        },
        "fundraiser_id": {
          "type": "string",
          "description": "The system record ID of the fundraiser.",
          "x-ms-summary": "Fundraiser ID"
        },
        "type": {
          "type": "string",
          "description": "The type of fundraiser.",
          "x-ms-summary": "Type"
        },
        "amount": {
          "type": "object",
          "description": "The goal amount for the fundraiser to solicit from the assigned constituent.",
          "x-ms-summary": "Amount",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "campaign_id": {
          "type": "string",
          "description": "The system record ID of the campaign to apply resulting gifts to.",
          "x-ms-summary": "Campaign ID"
        },
        "fund_id": {
          "type": "string",
          "description": "The system record ID of the fund any resulting gifts should be applied to. If a restricted fund is selected, only campaigns and appeals associated with that fund may be selected.",
          "x-ms-summary": "Fund ID"
        },
        "appeal_id": {
          "type": "string",
          "description": "The system record ID of the appeal the fundraiser should use to request gifts.",
          "x-ms-summary": "Appeal ID"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "description": "The fundraiser assignment start date.",
          "x-ms-summary": "Start date"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "description": "The fundraiser assignment end date.",
          "x-ms-summary": "End date"
        }
      }
    },
    "ConstituentApi.MembershipMemberRead": {
      "type": "object",
      "description": "Member",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the member.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the member.",
          "x-ms-summary": "Constituent ID"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the primary member?",
          "x-ms-summary": "Is primary member?"
        }
      }
    },
    "ConstituentApi.MembershipRead": {
      "type": "object",
      "description": "Membership",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the membership.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the membership.",
          "x-ms-summary": "Constituent ID"
        },
        "program": {
          "type": "string",
          "description": "The membership program.",
          "x-ms-summary": "Program"
        },
        "category": {
          "type": "string",
          "description": "The membership category.",
          "x-ms-summary": "Category"
        },
        "subcategory": {
          "type": "string",
          "description": "The membership subcategory.",
          "x-ms-summary": "Subcategory"
        },
        "standing": {
          "type": "string",
          "description": "The membership status.",
          "x-ms-summary": "Standing",
          "enum": [
            "New",
            "Active",
            "Lapsed",
            "Dropped"
          ]
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the membership expires. ",
          "x-ms-summary": "Expires"
        },
        "joined": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the membership becomes active.",
          "x-ms-summary": "Joined"
        },
        "dues": {
          "type": "object",
          "description": "The membership dues.",
          "x-ms-summary": "Dues",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The monetary value.",
              "x-ms-summary": "value"
            }
          }
        },
        "members": {
          "type": "array",
          "description": "The set of members who belong to the membership.",
          "items": {
            "$ref": "#/definitions/ConstituentApi.MembershipMemberRead"
          },
          "x-ms-summary": "Members"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the membership was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the membership was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.NameFormatAdd": {
      "type": "object",
      "description": "Name formats define how to address constituents in communications. How you refer to individuals sets the tone of your communications with them and how well they receive your interactions.",
      "required": [
        "constituent_id",
        "type"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The name format type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "nameformattypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "nameformattypes"
              }
            }
          }
        },
        "custom_format": {
          "type": "boolean",
          "description": "Is a custom format?",
          "x-ms-summary": "Custom name format?"
        },
        "configuration_id": {
          "type": "string",
          "description": "Name format configuration (required unless a custom format is used).",
          "x-ms-summary": "Format",
          "x-ms-dynamic-values": {
            "operationId": "ListNameFormatConfigurations",
            "value-collection": "value",
            "value-path": "id",
            "value-title": "format"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListNameFormatConfigurations",
            "itemsPath": "value",
            "itemValuePath": "id",
            "itemTitlePath": "format"
          }
        },
        "formatted_name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "description": "Formatted name (required when a custom format is used). Character limit: 255.",
          "x-ms-summary": "Custom name"
        }
      }
    },
    "ConstituentApi.NameFormatEdit": {
      "type": "object",
      "description": "Name formats define how to address constituents in communications. How you refer to individuals sets the tone of your communications with them and how well they receive your interactions.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The name format type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "nameformattypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "nameformattypes"
              }
            }
          }
        },
        "custom_format": {
          "type": "boolean",
          "description": "Is a custom format?",
          "x-ms-summary": "Custom name format?"
        },
        "configuration_id": {
          "type": "string",
          "description": "Name format configuration (required unless a custom format is used).",
          "x-ms-summary": "Format",
          "x-ms-dynamic-values": {
            "operationId": "ListNameFormatConfigurations",
            "value-collection": "value",
            "value-path": "id",
            "value-title": "format"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListNameFormatConfigurations",
            "itemsPath": "value",
            "itemValuePath": "id",
            "itemTitlePath": "format"
          }
        },
        "formatted_name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "description": "Formatted name (required when a custom format is used). Character limit: 255.",
          "x-ms-summary": "Custom name"
        }
      }
    },
    "ConstituentApi.NameFormatConfigurationRead": {
      "type": "object",
      "description": "Name format configuration",
      "properties": {
        "id": {
          "type": "string",
          "description": "The name format configuration identifier.",
          "x-ms-summary": "ID"
        },
        "format": {
          "type": "string",
          "description": "The name format.",
          "x-ms-summary": "Format"
        }
      }
    },
    "ConstituentApi.NameFormatRead": {
      "type": "object",
      "description": "Name formats define how to address constituents in communications. How you refer to individuals sets the tone of your communications with them and how well they receive your interactions.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the name format.",
          "x-ms-summary": "ID"
        },
        "type": {
          "type": "string",
          "description": "The name format type.",
          "x-ms-summary": "type"
        },
        "custom_format": {
          "type": "boolean",
          "description": "Is this a custom format?",
          "x-ms-summary": "custom format?"
        },
        "configuration_id": {
          "type": "string",
          "description": "The configuration ID of the name format (for non-custom formats).",
          "x-ms-summary": "configuration ID"
        },
        "formatted_name": {
          "type": "string",
          "description": "The formatted name (for custom formats).",
          "x-ms-summary": "formatted name"
        }
      }
    },
    "ConstituentApi.NameFormatSummaryRead": {
      "type": "object",
      "description": "Name format summary",
      "properties": {
        "primary_addressee": {
          "type": "object",
          "description": "Addressees determine how the name appears with a mailing address, such as in an address block or on envelopes or mailing labels.",
          "x-ms-summary": "Primary addressee",
          "properties": {
            "id": {
              "type": "string",
              "description": "The system record ID of the name format.",
              "x-ms-summary": "ID"
            },
            "primary_type": {
              "type": "string",
              "description": "The name format type.",
              "x-ms-summary": "type",
              "enum": [
                "Addressee",
                "Salutation"
              ]
            },
            "custom_format": {
              "type": "boolean",
              "description": "Is this a custom format?",
              "x-ms-summary": "custom format?"
            },
            "configuration_id": {
              "type": "string",
              "description": "The configuration ID of the name format (for non-custom formats).",
              "x-ms-summary": "configuration ID"
            },
            "formatted_name": {
              "type": "string",
              "description": "The formatted name (for custom formats).",
              "x-ms-summary": "formatted name"
            }
          }
        },
        "primary_salutation": {
          "type": "object",
          "description": "Salutations determine how the name appears as a greeting within a letter or email message.",
          "x-ms-summary": "Primary salutation",
          "properties": {
            "id": {
              "type": "string",
              "description": "The system record ID of the name format.",
              "x-ms-summary": "ID"
            },
            "primary_type": {
              "type": "string",
              "description": "The name format type.",
              "x-ms-summary": "type",
              "enum": [
                "Addressee",
                "Salutation"
              ]
            },
            "custom_format": {
              "type": "boolean",
              "description": "Is this a custom format?",
              "x-ms-summary": "custom format?"
            },
            "configuration_id": {
              "type": "string",
              "description": "The configuration ID of the name format (for non-custom formats).",
              "x-ms-summary": "configuration ID"
            },
            "formatted_name": {
              "type": "string",
              "description": "The formatted name (for custom formats).",
              "x-ms-summary": "formatted name"
            }
          }
        },
        "additional_name_formats": {
          "type": "array",
          "description": "The additional name formats of the constituent.",
          "x-ms-summary": "Additional name formats",
          "items": {
            "$ref": "#/definitions/ConstituentApi.NameFormatRead"
          }
        }
      }
    },
    "ConstituentApi.NonConstituentConversion": {
      "type": "object",
      "description": "The non-constituent conversion object holds constituent codes to apply during the conversion.",
      "properties": {
        "constituent_codes": {
          "type": "array",
          "description": "The constituent codes.",
          "x-ms-summary": "Constituent codes",
          "x-ms-visibility": "internal",
          "items": {
            "$ref": "#/definitions/ConstituentApi.ConstituentCodeLink"
          }
        }
      }
    },
    "ConstituentApi.NoteAdd": {
      "type": "object",
      "description": "Notes track helpful or important details about constituents, gifts, or actions, such as specific interests and special instructions for donations. Notes connect you with donors at a more personal level as you cultivate relationships and track lessons learned for more effective fundraising.",
      "required": [
        "constituent_id",
        "type",
        "date"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the note.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The note type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "notetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "notetypes"
              }
            }
          }
        },
        "date": {
          "type": "object",
          "description": "The note date.",
          "x-ms-summary": "Date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "summary": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The note summary. Character limit: 50.",
          "x-ms-summary": "Summary"
        },
        "text": {
          "type": "string",
          "description": "The note text.",
          "x-ms-summary": "Note"
        },
        "author": {
          "type": "string",
          "minLength": 0,
          "maxLength": 50,
          "description": "The note author. If not supplied, will have a default set based on the user's account. Character limit: 50.",
          "x-ms-summary": "Author",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.NoteEdit": {
      "type": "object",
      "description": "Notes track helpful or important details about constituents, gifts, or actions, such as specific interests and special instructions for donations. Notes connect you with donors at a more personal level as you cultivate relationships and track lessons learned for more effective fundraising.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The note type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "notetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "notetypes"
              }
            }
          }
        },
        "date": {
          "type": "object",
          "description": "The note date.",
          "x-ms-summary": "Date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "summary": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The note summary. Character limit: 50.",
          "x-ms-summary": "Summary"
        },
        "text": {
          "type": "string",
          "description": "The note text.",
          "x-ms-summary": "Note"
        }
      }
    },
    "ConstituentApi.NoteRead": {
      "type": "object",
      "description": "Note",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the note.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the note.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The note type.",
          "x-ms-summary": "Type"
        },
        "date": {
          "type": "object",
          "description": "The note date.",
          "x-ms-summary": "Date",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "summary": {
          "type": "string",
          "description": "The note summary.",
          "x-ms-summary": "Summary"
        },
        "text": {
          "type": "string",
          "description": "The note text.",
          "x-ms-summary": "Note"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the note was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the note was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.OnlinePresenceAdd": {
      "type": "object",
      "description": "Online presence entities store a constituent's social media accounts, websites, and other means of reaching out or gaining more information about the constituent.",
      "required": [
        "constituent_id",
        "address",
        "type"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the online presence.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The online presence type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "onlinepresencetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "onlinepresencetypes"
              }
            }
          }
        },
        "address": {
          "type": "string",
          "description": "The web address for the online presence.",
          "x-ms-summary": "Link"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary online presence?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this online presence inactive?",
          "x-ms-summary": "Inactive?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.OnlinePresenceEdit": {
      "type": "object",
      "description": "Online presence entities store a constituent's social media accounts, websites, and other means of reaching out or gaining more information about the constituent.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The online presence type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "onlinepresencetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "onlinepresencetypes"
              }
            }
          }
        },
        "address": {
          "type": "string",
          "description": "The web address for the online presence.",
          "x-ms-summary": "Link"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary online presence?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this online presence inactive?",
          "x-ms-summary": "Inactive?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.OnlinePresenceRead": {
      "type": "object",
      "description": "Online presence",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the online presence.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the online presence.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The online presence type.",
          "x-ms-summary": "Type"
        },
        "address": {
          "type": "string",
          "description": "The web address for the online presence.",
          "x-ms-summary": "Link"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary online presence?",
          "x-ms-summary": "Primary?"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this online presence inactive?",
          "x-ms-summary": "Inactive?"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the online presence was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the online presence was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.PhoneAdd": {
      "type": "object",
      "description": "Phones store information about constituent phone numbers and where to call individuals and organizations.",
      "required": [
        "constituent_id",
        "type",
        "number"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the phone.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The phone type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "phonetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "phonetypes"
              }
            }
          }
        },
        "number": {
          "type": "string",
          "description": "The phone number.",
          "x-ms-summary": "Number"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary phone?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "do_not_call": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this number?",
          "x-ms-summary": "Do not call?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this phone number inactive?",
          "x-ms-summary": "Inactive?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.PhoneEdit": {
      "type": "object",
      "description": "Phones store information about constituent phone numbers and where to call individuals and organizations.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The phone type.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "phonetypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "phonetypes"
              }
            }
          }
        },
        "number": {
          "type": "string",
          "description": "The phone number.",
          "x-ms-summary": "Number"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary phone?",
          "x-ms-summary": "Primary?",
          "x-ms-visibility": "advanced"
        },
        "do_not_call": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this number?",
          "x-ms-summary": "Do not call?",
          "x-ms-visibility": "advanced"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this phone number inactive?",
          "x-ms-summary": "Inactive?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.PhoneRead": {
      "type": "object",
      "description": "Phone",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the phone.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the phone.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The phone type.",
          "x-ms-summary": "Type"
        },
        "number": {
          "type": "string",
          "description": "The phone number.",
          "x-ms-summary": "Number"
        },
        "primary": {
          "type": "boolean",
          "description": "Is this the constituent's primary phone?",
          "x-ms-summary": "Primary?"
        },
        "do_not_call": {
          "type": "boolean",
          "description": "Can the constituent be contacted at this number?",
          "x-ms-summary": "Do not call?"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is this phone number inactive?",
          "x-ms-summary": "Inactive?"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the phone was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the phone was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.PrimaryNameFormatAdd": {
      "type": "object",
      "description": "Primary name formats are elevated name formats used for the constituent's most commonly used addressee and salutation name formats.",
      "required": [
        "constituent_id",
        "primary_type"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent.",
          "x-ms-summary": "Constituent ID"
        },
        "primary_type": {
          "type": "string",
          "description": "The primary name format type.",
          "x-ms-summary": "Type",
          "enum": [
            "Addressee",
            "Salutation"
          ]
        },
        "custom_format": {
          "type": "boolean",
          "description": "Is a custom format?",
          "x-ms-summary": "Custom name format?"
        },
        "configuration_id": {
          "type": "string",
          "description": "Name format configuration (required unless a custom format is used).",
          "x-ms-summary": "Format",
          "x-ms-dynamic-values": {
            "operationId": "ListNameFormatConfigurations",
            "value-collection": "value",
            "value-path": "id",
            "value-title": "format"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListNameFormatConfigurations",
            "itemsPath": "value",
            "itemValuePath": "id",
            "itemTitlePath": "format"
          }
        },
        "formatted_name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "description": "Formatted name (required when a custom format is used). Character limit: 255.",
          "x-ms-summary": "Custom name"
        }
      }
    },
    "ConstituentApi.PrimaryNameFormatEdit": {
      "type": "object",
      "description": "Primary name formats are elevated name formats used for the constituent's most commonly used addressee and salutation name formats.",
      "properties": {
        "custom_format": {
          "type": "boolean",
          "description": "Is a custom format?",
          "x-ms-summary": "Custom name format?"
        },
        "configuration_id": {
          "type": "string",
          "description": "Name format configuration (required unless a custom format is used).",
          "x-ms-summary": "Format",
          "x-ms-dynamic-values": {
            "operationId": "ListNameFormatConfigurations",
            "value-collection": "value",
            "value-path": "id",
            "value-title": "format"
          },
          "x-ms-dynamic-list": {
            "operationId": "ListNameFormatConfigurations",
            "itemsPath": "value",
            "itemValuePath": "id",
            "itemTitlePath": "format"
          }
        },
        "formatted_name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255,
          "description": "Formatted name (required when a custom format is used). Character limit: 255.",
          "x-ms-summary": "Custom name"
        }
      }
    },
    "ConstituentApi.ProfilePictureEdit": {
      "type": "object",
      "description": "Profile pictures are photos or images such as selfies or company logos that help identify constituents and personalize relationships. Profile pictures can be PNG, BMP, or JPG image files uploaded via the web view.",
      "required": [
        "document_id",
        "file_name",
        "thumbnail_id"
      ],
      "properties": {
        "file_name": {
          "type": "string",
          "description": "The name of the file.",
          "x-ms-summary": "File name"
        },
        "document_id": {
          "type": "string",
          "format": "uuid",
          "description": "The document identifier.",
          "x-ms-summary": "Document ID"
        },
        "thumbnail_id": {
          "type": "string",
          "format": "uuid",
          "description": "The thumbnail document identifier.",
          "x-ms-summary": "Thumbnail ID"
        }
      }
    },
    "ConstituentApi.ProfilePictureRead": {
      "type": "object",
      "description": "Profile picture",
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the profile picture.",
          "x-ms-summary": "Constituent ID"
        },
        "url": {
          "type": "string",
          "description": "The URL for the profile picture. The URL contains a time-bound signature that limits access to 60 minutes.",
          "x-ms-summary": "URL"
        },
        "thumbnail_url": {
          "type": "string",
          "description": "The URL for a thumbnail of the profile picture. Contains a time-bound signature that limits access to 60 minutes.",
          "x-ms-summary": "Thumbnail URL"
        }
      }
    },
    "ConstituentApi.RelationshipEdit": {
      "type": "object",
      "description": "Relationships describe connections between constituents and other individuals and organizations such as family, friends, and employers. Tracking constituent relationships can enhance fundraising efforts and interactions.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of relation that the relationship represents.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "relationshiptypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "relationshiptypes"
              }
            }
          }
        },
        "reciprocal_type": {
          "type": "string",
          "description": "Describes the constituent's relationship to the related constituent. For example, in a relationship between a male constituent and a female sibling, the reciprocal relationship type would be brother.",
          "x-ms-summary": "Reciprocal type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "relationshiptypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "relationshiptypes"
              }
            }
          }
        },
        "start": {
          "type": "object",
          "description": "The start date for the relationship.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date for the relationship.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "is_spouse": {
          "type": "boolean",
          "description": "Is the related individual the constituent's spouse (only applies to relationships between individuals)?",
          "x-ms-summary": "Is spouse?"
        },
        "is_constituent_head_of_household": {
          "type": "boolean",
          "description": "Is the constituent the head of the household?",
          "x-ms-summary": "Is constituent head of household?"
        },
        "is_spouse_head_of_household": {
          "type": "boolean",
          "description": "Is the spouse the head of the household?",
          "x-ms-summary": "Is spouse head of household?"
        },
        "comment": {
          "type": "string",
          "description": "Additional notes about the relationship.",
          "x-ms-summary": "Notes"
        },
        "is_organization_contact": {
          "type": "boolean",
          "description": "Does the constituent represent this organization as a contact (only applies to relationships between organizations and individuals)?",
          "x-ms-summary": "Is contact?"
        },
        "is_primary_business": {
          "type": "boolean",
          "description": "Is this the constituent's primary business (only applies to relationships between organizations and individuals)?",
          "x-ms-summary": "Is primary business?"
        },
        "organization_contact_type": {
          "type": "string",
          "description": "Provides context for interactions with the related individual who represents the organization as a contact. Only applies to relationships between organizations and individuals.",
          "x-ms-summary": "Contact type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "organizationcontacttypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "organizationcontacttypes"
              }
            }
          }
        },
        "position": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The individual's position in the organization. Only applies to relationships between organizations and individuals. Character limit: 50.",
          "x-ms-summary": "Position"
        }
      }
    },
    "ConstituentApi.RelationshipRead": {
      "type": "object",
      "description": "Relationship",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the relationship.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the relationship.",
          "x-ms-summary": "Constituent ID"
        },
        "relation_id": {
          "type": "string",
          "description": "The system record ID of the related individual or organization.",
          "x-ms-summary": "Relation ID"
        },
        "reciprocal_relationship_id": {
          "type": "string",
          "description": "The identifier for the reciprocal relationship record. This value is read-only and is automatically generated when the relationship is created. Changes made to this record will also be reflected on the reciprocal, with the exception of the comments property.",
          "x-ms-summary": "Reciprocal relationship ID"
        },
        "name": {
          "type": "string",
          "description": "The name of the related constituent. If the related constituent is an individual, this will be the full name of the constituent based on the target organization's display name settings.",
          "x-ms-summary": "Name"
        },
        "type": {
          "type": "string",
          "description": "The type of relation that the relationship represents.",
          "x-ms-summary": "Type"
        },
        "reciprocal_type": {
          "type": "string",
          "description": "Describes the constituent's relationship to the related constituent. For example, in a relationship between a male constituent and a female sibling, the reciprocal relationship type would be brother.",
          "x-ms-summary": "Reciprocal type"
        },
        "start": {
          "type": "object",
          "description": "The start date for the relationship.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date for the relationship.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "is_spouse": {
          "type": "boolean",
          "description": "Is the related individual the constituent's spouse (only applies to relationships between individuals)?",
          "x-ms-summary": "Is spouse?"
        },
        "is_constituent_head_of_household": {
          "type": "boolean",
          "description": "Is the constituent the head of the household?",
          "x-ms-summary": "Is constituent head of household?"
        },
        "is_spouse_head_of_household": {
          "type": "boolean",
          "description": "Is the spouse the head of the household?",
          "x-ms-summary": "Is spouse head of household?"
        },
        "comment": {
          "type": "string",
          "description": "The comment on the relationship.",
          "x-ms-summary": "Notes"
        },
        "is_organization_contact": {
          "type": "boolean",
          "description": "Does the constituent represent this organization as a contact (only applies to relationships between organizations and individuals)?",
          "x-ms-summary": "Is contact?"
        },
        "is_primary_business": {
          "type": "boolean",
          "description": "Is this the constituent's primary business (only applies to relationships between organizations and individuals)?",
          "x-ms-summary": "Is primary business?"
        },
        "organization_contact_type": {
          "type": "string",
          "description": "Provides context for interactions with the related individual who represents the organization as a contact. Only applies to relationships between organizations and individuals.",
          "x-ms-summary": "Contact type"
        },
        "position": {
          "type": "string",
          "description": "The individual's position in the organization. Only applies to relationships between organizations and individuals.",
          "x-ms-summary": "Position"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the relationship was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the relationship was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "ConstituentApi.SearchResultRead": {
      "type": "object",
      "description": "Search result",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the constituent.",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "description": "The constituent name. For individuals, this computed field indicates the full name of the constituent based on the target organization's display name settings.",
          "x-ms-summary": "Name"
        },
        "address": {
          "type": "string",
          "description": "The constituent's preferred address.",
          "x-ms-summary": "Address"
        },
        "deceased": {
          "type": "boolean",
          "description": "Is the constituent is deceased?",
          "x-ms-summary": "Deceased?"
        },
        "email": {
          "type": "string",
          "description": "The constituent's email address.",
          "x-ms-summary": "Email"
        },
        "fundraiser_status": {
          "type": "string",
          "description": "The constituent's fundraiser status. For individuals, this computed field indicates the whether the constituent is Active, Inactive, or None.  For organizations, this value will always be None.",
          "x-ms-summary": "Fundraiser status"
        },
        "inactive": {
          "type": "boolean",
          "description": "Is the constituent inactive?",
          "x-ms-summary": "Inactive?"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the constituent.",
          "x-ms-summary": "Lookup ID"
        }
      }
    },
    "ConstituentApi.Virtual.IndividualAdd": {
      "type": "object",
      "description": "Constituents are the individuals and organizations who support your organization by contributing time, money, and resources. The constituent entity stores information about donors, prospects, volunteers, general supporters, and more.",
      "required": [
        "type",
        "last"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of constituent.",
          "default": "Individual",
          "x-ms-summary": "Type",
          "x-ms-visibility": "internal",
          "enum": [
            "Individual"
          ]
        },
        "title": {
          "type": "string",
          "description": "The constituent's primary title.",
          "x-ms-summary": "Title",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "titles"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "titles"
              }
            }
          }
        },
        "first": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The constituent's first name. Character limit: 50.",
          "x-ms-summary": "First name"
        },
        "last": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0,
          "description": "The constituent's last name. Character limit: 100.",
          "x-ms-summary": "Last name"
        },
        "suffix": {
          "type": "string",
          "description": "The constituent's primary suffix.",
          "x-ms-summary": "Suffix",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "suffixes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "suffixes"
              }
            }
          }
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the constituent.",
          "x-ms-summary": "Lookup ID"
        },
        "address": {
          "type": "object",
          "description": "The constituent's preferred address.",
          "x-ms-summary": "Address",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The address type.",
              "x-ms-summary": "type",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "addresstypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "addresstypes"
                  }
                }
              }
            },
            "country": {
              "type": "string",
              "description": "The country of the address (can be the ID, name, or abbreviation).",
              "x-ms-summary": "country",
              "x-ms-dynamic-values": {
                "operationId": "ListCountries",
                "value-collection": "value",
                "value-path": "id",
                "value-title": "name"
              },
              "x-ms-dynamic-list": {
                "operationId": "ListCountries",
                "itemsPath": "value",
                "itemValuePath": "id",
                "itemTitlePath": "name"
              }
            },
            "address_lines": {
              "type": "string",
              "maxLength": 150,
              "minLength": 0,
              "description": "The address lines. Character limit: 150.",
              "x-ms-summary": "lines"
            },
            "city": {
              "type": "string",
              "maxLength": 50,
              "minLength": 0,
              "description": "The city of the address (do not use in combination with the Suburb field).",
              "x-ms-summary": "city"
            },
            "state": {
              "type": "string",
              "description": "The state of the address.",
              "x-ms-summary": "state"
            },
            "postal_code": {
              "type": "string",
              "maxLength": 12,
              "minLength": 0,
              "description": "The postal code of the address. Character limit: 12.",
              "x-ms-summary": "postal code"
            },
            "suburb": {
              "type": "string",
              "description": "The suburb of the address (do not use in combination with the City field).",
              "x-ms-summary": "suburb",
              "x-ms-visibility": "advanced"
            },
            "county": {
              "type": "string",
              "description": "The county of the address.",
              "x-ms-summary": "county",
              "x-ms-visibility": "advanced"
            },
            "start": {
              "type": "string",
              "format": "date",
              "description": "The date when the constituent began residing at this address (ex: '2005-09-18').",
              "x-ms-summary": "start",
              "x-ms-visibility": "advanced"
            },
            "end": {
              "type": "string",
              "format": "date",
              "description": "The date when the constituent ceased to reside at this address  (ex: '2005-09-18').",
              "x-ms-summary": "end",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "phone": {
          "type": "object",
          "description": "The constituent's phone.",
          "x-ms-summary": "Phone",
          "required": [
            "type",
            "number"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The phone type.",
              "x-ms-summary": "type",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "phonetypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "phonetypes"
                  }
                }
              }
            },
            "number": {
              "type": "string",
              "description": "The phone number.",
              "x-ms-summary": "number",
              "x-ms-visibility": "advanced"
            },
            "primary": {
              "type": "boolean",
              "description": "Is this the constituent's primary phone number?",
              "x-ms-summary": "is primary?",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "email": {
          "type": "object",
          "description": "The constituent's email address.",
          "x-ms-summary": "Email",
          "required": [
            "type",
            "address"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of email address.",
              "x-ms-summary": "type",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "emailaddresstypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "emailaddresstypes"
                  }
                }
              }
            },
            "address": {
              "type": "string",
              "description": "The email address.",
              "x-ms-summary": "address",
              "x-ms-visibility": "advanced"
            },
            "primary": {
              "type": "boolean",
              "description": "Is this the constituent's primary email address?",
              "x-ms-summary": "is primary?",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "online_presence": {
          "type": "object",
          "description": "The constituent's online presence.",
          "x-ms-summary": "Online presence",
          "required": [
            "type",
            "address"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The online presence type.",
              "x-ms-summary": "type",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "onlinepresencetypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "onlinepresencetypes"
                  }
                }
              }
            },
            "address": {
              "type": "string",
              "description": "The web address for the online presence.",
              "x-ms-summary": "address",
              "x-ms-visibility": "advanced"
            },
            "primary": {
              "type": "boolean",
              "description": "Is this the constituent's primary online presence?",
              "x-ms-summary": "is primary?",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "preferred_name": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The constituent's preferred name. Character limit: 50.",
          "x-ms-summary": "Preferred name",
          "x-ms-visibility": "advanced"
        },
        "middle": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The constituent's middle name. Character limit: 50.",
          "x-ms-summary": "Middle name",
          "x-ms-visibility": "advanced"
        },
        "former_name": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0,
          "description": "The constituent's former name. Character limit: 100.",
          "x-ms-summary": "Former name",
          "x-ms-visibility": "advanced"
        },
        "title_2": {
          "type": "string",
          "description": "The constituent's secondary title.",
          "x-ms-summary": "Title 2",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "titles"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "titles"
              }
            }
          }
        },
        "suffix_2": {
          "type": "string",
          "description": "The constituent's secondary suffix.",
          "x-ms-summary": "Suffix 2",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "suffixes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "suffixes"
              }
            }
          }
        },
        "gender": {
          "type": "string",
          "description": "The constituent's gender.",
          "x-ms-summary": "Gender",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "genders"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "genders"
              }
            }
          }
        },
        "marital_status": {
          "type": "string",
          "description": "The constituent's marital status.",
          "x-ms-summary": "Marital status",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "maritalstatuses"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "maritalstatuses"
              }
            }
          }
        },
        "gives_anonymously": {
          "type": "boolean",
          "description": "Does the constituent give anonymously?",
          "x-ms-summary": "Gives anonymously?",
          "x-ms-visibility": "advanced"
        },
        "requests_no_email": {
          "type": "boolean",
          "description": "Does the constituent request no email?",
          "x-ms-summary": "Requests no email?",
          "x-ms-visibility": "advanced"
        },
        "is_solicitor": {
          "type": "boolean",
          "description": "Is the constituent a solicitor?",
          "x-ms-summary": "Is a solicitor?",
          "x-ms-visibility": "advanced"
        },
        "no_valid_address": {
          "type": "boolean",
          "description": "Does the constituent have no valid addresses?",
          "x-ms-summary": "No valid addresses?",
          "x-ms-visibility": "advanced"
        },
        "birthdate": {
          "type": "object",
          "description": "The constituent's birthdate.",
          "x-ms-summary": "Birthdate",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "birthplace": {
          "type": "string",
          "description": "The birthplace of the constituent.",
          "x-ms-summary": "Birthplace",
          "x-ms-visibility": "advanced"
        },
        "ethnicity": {
          "type": "string",
          "description": "The ethnicity of the constituent.",
          "x-ms-summary": "Ethnicity",
          "x-ms-visibility": "advanced"
        },
        "target": {
          "type": "string",
          "description": "The target of the constituent.",
          "x-ms-summary": "Target",
          "x-ms-visibility": "advanced"
        },
        "income": {
          "type": "string",
          "description": "The income for the constituent.",
          "x-ms-summary": "Income",
          "x-ms-visibility": "advanced"
        },
        "receipt_type": {
          "type": "string",
          "description": "The receipt type of the constituent.",
          "x-ms-summary": "Receipt type",
          "x-ms-visibility": "advanced",
          "enum": [
            "One receipt per gift",
            "Consolidated receipts"
          ]
        },
        "religion": {
          "type": "string",
          "description": "The religion of the constituent.",
          "x-ms-summary": "Religion",
          "x-ms-visibility": "advanced"
        },
        "primary_addressee": {
          "type": "object",
          "properties": {
            "custom_format": {
              "type": "boolean",
              "description": "Is the primary addressee a custom format?",
              "x-ms-summary": "Custom addressee?",
              "x-ms-visibility": "advanced"
            },
            "configuration_id": {
              "type": "string",
              "description": "Primary addressee configuration (required unless a custom format is used).",
              "x-ms-summary": "Addressee format",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "ListNameFormatConfigurations",
                "value-collection": "value",
                "value-path": "id",
                "value-title": "format"
              },
              "x-ms-dynamic-list": {
                "operationId": "ListNameFormatConfigurations",
                "itemsPath": "value",
                "itemValuePath": "id",
                "itemTitlePath": "format"
              }
            },
            "formatted_name": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "description": "Primary addressee formatted name (required when a custom format is used). Character limit: 255.",
              "x-ms-summary": "Addressee custom name",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "primary_salutation": {
          "type": "object",
          "properties": {
            "custom_format": {
              "type": "boolean",
              "description": "Is the primary salutation a custom format?",
              "x-ms-summary": "Custom salutation?",
              "x-ms-visibility": "advanced"
            },
            "configuration_id": {
              "type": "string",
              "description": "Primary salutation configuration (required unless a custom format is used).",
              "x-ms-summary": "Salutation format",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "ListNameFormatConfigurations",
                "value-collection": "value",
                "value-path": "id",
                "value-title": "format"
              },
              "x-ms-dynamic-list": {
                "operationId": "ListNameFormatConfigurations",
                "itemsPath": "value",
                "itemValuePath": "id",
                "itemTitlePath": "format"
              }
            },
            "formatted_name": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "description": "Primary salutation formatted name (required when a custom format is used). Character limit: 255.",
              "x-ms-summary": "Salutation custom name",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "is_memorial": {
          "type": "boolean",
          "description": "Is the constituent an honor/memorial?",
          "x-ms-summary": "Is memorial?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.Virtual.IndividualRelationshipAdd": {
      "type": "object",
      "description": "Relationships describe connections between constituents and other individuals such as family, friends, and employers. Tracking constituent relationships can enhance fundraising efforts and interactions.",
      "required": [
        "constituent_id",
        "relation_id"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the relationship.",
          "x-ms-summary": "Constituent ID"
        },
        "relation_id": {
          "type": "string",
          "description": "The system record ID of the related individual.",
          "x-ms-summary": "Relation ID"
        },
        "type": {
          "type": "string",
          "description": "The type of relation that the relationship represents.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "relationshiptypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "relationshiptypes"
              }
            }
          }
        },
        "reciprocal_type": {
          "type": "string",
          "description": "Describes the constituent's relationship to the related constituent. For example, in a relationship between a male constituent and a female sibling, the reciprocal relationship type would be brother.",
          "x-ms-summary": "Reciprocal type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "relationshiptypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "relationshiptypes"
              }
            }
          }
        },
        "start": {
          "type": "object",
          "description": "The start date for the relationship.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date for the relationship.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "is_spouse": {
          "type": "boolean",
          "description": "Is the related individual the constituent's spouse?",
          "x-ms-summary": "Is spouse?"
        },
        "is_constituent_head_of_household": {
          "type": "boolean",
          "description": "Is the constituent the head of the household?",
          "x-ms-summary": "Is constituent head of household?"
        },
        "is_spouse_head_of_household": {
          "type": "boolean",
          "description": "Is the spouse the head of the household?",
          "x-ms-summary": "Is spouse head of household?"
        },
        "comment": {
          "type": "string",
          "description": "Additional notes about the relationship.",
          "x-ms-summary": "Notes"
        }
      }
    },
    "ConstituentApi.Virtual.OrganizationAdd": {
      "type": "object",
      "description": "Constituents are the individuals and organizations who support your organization by contributing time, money, and resources. The constituent entity stores information about donors, prospects, volunteers, general supporters, and more.",
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of constituent.",
          "default": "Organization",
          "x-ms-summary": "Type",
          "x-ms-visibility": "internal",
          "enum": [
            "Organization"
          ]
        },
        "name": {
          "type": "string",
          "description": "The organization name. Character limit: 100.",
          "x-ms-summary": "Name"
        },
        "lookup_id": {
          "type": "string",
          "description": "The user-defined identifier for the constituent.",
          "x-ms-summary": "Lookup ID"
        },
        "address": {
          "type": "object",
          "description": "The constituent's preferred address.",
          "x-ms-summary": "Address",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The address type.",
              "x-ms-summary": "type",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "addresstypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "addresstypes"
                  }
                }
              }
            },
            "country": {
              "type": "string",
              "description": "The country of the address (can be the ID, name, or abbreviation).",
              "x-ms-summary": "country",
              "x-ms-dynamic-values": {
                "operationId": "ListCountries",
                "value-collection": "value",
                "value-path": "id",
                "value-title": "name"
              },
              "x-ms-dynamic-list": {
                "operationId": "ListCountries",
                "itemsPath": "value",
                "itemValuePath": "id",
                "itemTitlePath": "name"
              }
            },
            "address_lines": {
              "type": "string",
              "maxLength": 150,
              "minLength": 0,
              "description": "The address lines. Character limit: 150.",
              "x-ms-summary": "lines"
            },
            "city": {
              "type": "string",
              "maxLength": 50,
              "minLength": 0,
              "description": "The city of the address (do not use in combination with the Suburb field).",
              "x-ms-summary": "city"
            },
            "state": {
              "type": "string",
              "description": "The state of the address.",
              "x-ms-summary": "state"
            },
            "postal_code": {
              "type": "string",
              "maxLength": 12,
              "minLength": 0,
              "description": "The postal code of the address. Character limit: 12.",
              "x-ms-summary": "postal code"
            },
            "suburb": {
              "type": "string",
              "description": "The suburb of the address (do not use in combination with the City field).",
              "x-ms-summary": "suburb",
              "x-ms-visibility": "advanced"
            },
            "county": {
              "type": "string",
              "description": "The county of the address.",
              "x-ms-summary": "county",
              "x-ms-visibility": "advanced"
            },
            "start": {
              "type": "string",
              "format": "date",
              "description": "The date when the constituent began residing at this address (ex: '2005-09-18').",
              "x-ms-summary": "start",
              "x-ms-visibility": "advanced"
            },
            "end": {
              "type": "string",
              "format": "date",
              "description": "The date when the constituent ceased to reside at this address (ex: '2005-09-18').",
              "x-ms-summary": "end",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "phone": {
          "type": "object",
          "description": "The constituent's phone.",
          "x-ms-summary": "Phone",
          "required": [
            "type",
            "number"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The phone type.",
              "x-ms-summary": "type",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "phonetypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "phonetypes"
                  }
                }
              }
            },
            "number": {
              "type": "string",
              "description": "The phone number.",
              "x-ms-summary": "number",
              "x-ms-visibility": "advanced"
            },
            "primary": {
              "type": "boolean",
              "description": "Is this the constituent's primary phone number?",
              "x-ms-summary": "is primary?",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "email": {
          "type": "object",
          "description": "The constituent's email address.",
          "x-ms-summary": "Email",
          "required": [
            "type",
            "address"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of email address.",
              "x-ms-summary": "type",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "emailaddresstypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "emailaddresstypes"
                  }
                }
              }
            },
            "address": {
              "type": "string",
              "description": "The email address.",
              "x-ms-summary": "address",
              "x-ms-visibility": "advanced"
            },
            "primary": {
              "type": "boolean",
              "description": "Is this the constituent's primary email address?",
              "x-ms-summary": "is primary?",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "online_presence": {
          "type": "object",
          "description": "The constituent's online presence.",
          "x-ms-summary": "Online presence",
          "required": [
            "type",
            "address"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The online presence type.",
              "x-ms-summary": "type",
              "x-ms-visibility": "advanced",
              "x-ms-dynamic-values": {
                "operationId": "GetDynamicValues",
                "value-collection": "value",
                "value-path": "item",
                "value-title": "item",
                "parameters": {
                  "api": "constituent",
                  "route": "onlinepresencetypes"
                }
              },
              "x-ms-dynamic-list": {
                "operationId": "GetDynamicValues",
                "itemsPath": "value",
                "itemValuePath": "item",
                "itemTitlePath": "item",
                "parameters": {
                  "api": {
                    "value": "constituent"
                  },
                  "route": {
                    "value": "onlinepresencetypes"
                  }
                }
              }
            },
            "address": {
              "type": "string",
              "description": "The web address for the online presence.",
              "x-ms-summary": "address",
              "x-ms-visibility": "advanced"
            },
            "primary": {
              "type": "boolean",
              "description": "Is this the constituent's primary online presence?",
              "x-ms-summary": "is primary?",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "gives_anonymously": {
          "type": "boolean",
          "description": "Does the constituent give anonymously?",
          "x-ms-summary": "Gives anonymously?",
          "x-ms-visibility": "advanced"
        },
        "requests_no_email": {
          "type": "boolean",
          "description": "Does the constituent request no email?",
          "x-ms-summary": "Requests no email?",
          "x-ms-visibility": "advanced"
        },
        "is_solicitor": {
          "type": "boolean",
          "description": "Is the constituent a solicitor?",
          "x-ms-summary": "Is a solicitor?",
          "x-ms-visibility": "advanced"
        },
        "no_valid_address": {
          "type": "boolean",
          "description": "Does the constituent have no valid addresses?",
          "x-ms-summary": "No valid addresses?",
          "x-ms-visibility": "advanced"
        },
        "target": {
          "type": "string",
          "description": "The target of the constituent.",
          "x-ms-summary": "Target",
          "x-ms-visibility": "advanced"
        },
        "income": {
          "type": "string",
          "description": "The income for the constituent.",
          "x-ms-summary": "Income",
          "x-ms-visibility": "advanced"
        },
        "receipt_type": {
          "type": "string",
          "description": "The receipt type of the constituent.",
          "x-ms-summary": "Receipt type",
          "x-ms-visibility": "advanced",
          "enum": [
            "One receipt per gift",
            "Consolidated receipts"
          ]
        },
        "industry": {
          "type": "string",
          "description": "The industry of the constituent.",
          "x-ms-summary": "Industry",
          "x-ms-visibility": "advanced"
        },
        "num_employees": {
          "type": "integer",
          "format": "int32",
          "description": "The number of employees at the organization.",
          "x-ms-summary": "Number of employees",
          "x-ms-visibility": "advanced"
        },
        "matches_gifts": {
          "type": "boolean",
          "description": "Does the organization match gifts?",
          "x-ms-summary": "Matches gifts?",
          "x-ms-visibility": "advanced"
        },
        "matching_gift_factor": {
          "type": "number",
          "format": "double",
          "description": "The matching gift factor.",
          "x-ms-summary": "Matching gift factor",
          "x-ms-visibility": "advanced"
        },
        "matching_gift_per_gift_min": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The minimum match amount per gift for the constituent.",
              "x-ms-summary": "Min match per gift",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "matching_gift_per_gift_max": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The maximum match amount per gift for the constituent.",
              "x-ms-summary": "Max match per gift",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "matching_gift_total_min": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The minimum match total for the constituent.",
              "x-ms-summary": "Min match per constit",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "matching_gift_total_max": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The maximum match total for the constituent.",
              "x-ms-summary": "Max match per constit",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "matching_gift_notes": {
          "type": "string",
          "description": "The matching gift notes for the constituent.",
          "x-ms-summary": "Matching gift notes",
          "x-ms-visibility": "advanced"
        },
        "is_memorial": {
          "type": "boolean",
          "description": "Is the constituent an honor/memorial?",
          "x-ms-summary": "Is memorial?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "ConstituentApi.Virtual.OrganizationRelationshipAdd": {
      "type": "object",
      "description": "Relationships describe connections between constituents and other individuals and organizations such as family, friends, and employers. Tracking constituent relationships can enhance fundraising efforts and interactions.",
      "required": [
        "constituent_id",
        "relation_id"
      ],
      "properties": {
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the constituent associated with the relationship.",
          "x-ms-summary": "Constituent ID"
        },
        "relation_id": {
          "type": "string",
          "description": "The system record ID of the related organization.",
          "x-ms-summary": "Relation ID"
        },
        "type": {
          "type": "string",
          "description": "The type of relation that the relationship represents.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "relationshiptypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "relationshiptypes"
              }
            }
          }
        },
        "reciprocal_type": {
          "type": "string",
          "description": "Describes the constituent's relationship to the related organization.",
          "x-ms-summary": "Reciprocal type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "relationshiptypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "relationshiptypes"
              }
            }
          }
        },
        "start": {
          "type": "object",
          "description": "The start date for the relationship.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end": {
          "type": "object",
          "description": "The end date for the relationship.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "is_organization_contact": {
          "type": "boolean",
          "description": "Does the constituent represent this organization as a contact?",
          "x-ms-summary": "Is contact?"
        },
        "organization_contact_type": {
          "type": "string",
          "description": "Provides context for interactions with the related individual who represents the organization as a contact.",
          "x-ms-summary": "Contact type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "constituent",
              "route": "organizationcontacttypes"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "constituent"
              },
              "route": {
                "value": "organizationcontacttypes"
              }
            }
          }
        },
        "position": {
          "type": "string",
          "maxLength": 50,
          "minLength": 0,
          "description": "The individual's position in the organization. Character limit: 50.",
          "x-ms-summary": "Position"
        },
        "is_primary_business": {
          "type": "boolean",
          "description": "Is this the constituent's primary business?",
          "x-ms-summary": "Is primary business?"
        },
        "comment": {
          "type": "string",
          "description": "Additional notes about the relationship.",
          "x-ms-summary": "Notes"
        }
      }
    },
    "FundraisingApi.ApiCollectionOfFundraiserAssignmentRead": {
      "type": "object",
      "description": "Assignments",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/FundraisingApi.FundraiserAssignmentRead"
          }
        }
      }
    },
    "FundraisingApi.CreatedFundraiserAssignment": {
      "type": "object",
      "description": "Created fundraiser assignment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created fundraiser assignment.",
          "x-ms-summary": "ID"
        }
      }
    },
    "FundraisingApi.FundraiserAssignmentAdd": {
      "type": "object",
      "description": "Fundraiser constituents interact with other constituents on behalf of your organization to cultivate relationships and request donations. Fundraiser assignments allow you to assign specific constituents to fundraisers for solicitation purposes.",
      "required": [
        "constituent_id",
        "fundraiser_id"
      ],
      "properties": {
        "fundraiser_id": {
          "type": "string",
          "description": "The system record ID of the fundraiser.",
          "x-ms-summary": "Fundraiser ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the assigned constituent.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The type of fundraiser.",
          "x-ms-summary": "Type",
          "x-ms-dynamic-values": {
            "operationId": "GetDynamicValues",
            "value-collection": "value",
            "value-path": "item",
            "value-title": "item",
            "parameters": {
              "api": "fundraising",
              "route": "fundraisers/types"
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "GetDynamicValues",
            "itemsPath": "value",
            "itemValuePath": "item",
            "itemTitlePath": "item",
            "parameters": {
              "api": {
                "value": "fundraising"
              },
              "route": {
                "value": "fundraisers/types"
              }
            }
          }
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "description": "The start date of the assignment (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Assignment starts"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "description": "The end date of the assignment (ex: '2020-09-18T04:13:56Z').",
          "x-ms-summary": "Assignment ends"
        },
        "amount": {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "number",
              "format": "double",
              "description": "The goal amount for the fundraiser to solicit from the assigned constituent.",
              "x-ms-summary": "Amount"
            }
          }
        },
        "campaign_id": {
          "type": "string",
          "description": "The system record ID of the campaign to which which resulting gifts will be applied.",
          "x-ms-summary": "Campaign ID"
        },
        "fund_id": {
          "type": "string",
          "description": "The system record ID of the fund to which which resulting gifts will be applied.",
          "x-ms-summary": "Fund ID"
        },
        "appeal_id": {
          "type": "string",
          "description": "The system record ID of the appeal to which which resulting gifts will be applied.",
          "x-ms-summary": "Appeal ID"
        }
      }
    },
    "FundraisingApi.FundraiserAssignmentRead": {
      "type": "object",
      "description": "Assignment",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID of the fundraiser assignment.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The system record ID of the assigned constituent.",
          "x-ms-summary": "Constituent ID"
        },
        "type": {
          "type": "string",
          "description": "The fundraiser type.",
          "x-ms-summary": "Type"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "description": "The start date of the assignment.",
          "x-ms-summary": "Assignment starts"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "description": "The end date of the assignment.",
          "x-ms-summary": "Assignment ends"
        },
        "amount": {
          "type": "object",
          "description": "The goal amount for the fundraiser to solicit from the assigned constituent.",
          "x-ms-summary": "Amount",
          "properties": {
            "value": {
              "format": "double",
              "description": "The monetary value.",
              "type": "number"
            }
          }
        },
        "campaign_id": {
          "type": "string",
          "description": "The system record ID of the campaign to which which resulting gifts will be applied.",
          "x-ms-summary": "Campaign ID"
        },
        "fund_id": {
          "type": "string",
          "description": "The system record ID of the fund to which which resulting gifts will be applied.",
          "x-ms-summary": "Fund ID"
        },
        "appeal_id": {
          "type": "string",
          "description": "The system record ID of the appeal to which which resulting gifts will be applied.",
          "x-ms-summary": "Appeal ID"
        }
      }
    },
    "ListApi.ApiCollectionOfList": {
      "type": "object",
      "description": "Lists",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of lists in the set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response.",
          "items": {
            "$ref": "#/definitions/ListApi.ApiList"
          }
        }
      }
    },
    "ListApi.ApiList": {
      "type": "object",
      "description": "List",
      "properties": {
        "id": {
          "type": "string",
          "description": "The system record ID for the list."
        },
        "name": {
          "type": "string",
          "description": "The name of the list."
        }
      }
    },
    "NXTDataIntegrationApi.ConstituentIdMap": {
      "type": "object",
      "description": "Constituent ID map",
      "properties": {
        "system_record_id": {
          "type": "integer",
          "format": "int32",
          "description": "The constituent system record ID.",
          "x-ms-summary": "ID"
        }
      }
    },
    "NXTDataIntegrationApi.ConstituentSearchResult": {
      "type": "object",
      "description": "Search result",
      "properties": {
        "record_id": {
          "type": "integer",
          "format": "int32",
          "description": "The system record ID of the constituent.",
          "x-ms-summary": "ID"
        },
        "constituent_id": {
          "type": "string",
          "description": "The constituent ID.",
          "x-ms-summary": "Lookup ID"
        },
        "key_indicator": {
          "type": "string",
          "description": "The key indicator for the record.",
          "x-ms-summary": "Key indicator"
        },
        "first_name": {
          "type": "string",
          "description": "The first name (individuals only).",
          "x-ms-summary": "First name"
        },
        "last_name": {
          "type": "string",
          "description": "The last name (individuals only).",
          "x-ms-summary": "Last name"
        },
        "middle_name": {
          "type": "string",
          "description": "The middle name (individuals only).",
          "x-ms-summary": "Middle name"
        },
        "preferred_name": {
          "type": "string",
          "description": "The preferred name (individuals only).",
          "x-ms-summary": "Preferred name"
        },
        "maiden_name": {
          "type": "string",
          "description": "The former name (individuals only).",
          "x-ms-summary": "Former name"
        },
        "title1": {
          "type": "string",
          "description": "The title 1 (individuals only).",
          "x-ms-summary": "Title 1"
        },
        "suffix1": {
          "type": "string",
          "description": "The suffix 1 (individuals only).",
          "x-ms-summary": "Title 1"
        },
        "gender": {
          "type": "string",
          "description": "The constituent gender (individuals only).",
          "x-ms-summary": "Gender"
        },
        "birth_date": {
          "type": "object",
          "description": "The constituent's birthdate.",
          "x-ms-summary": "Birthdate",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day",
              "x-ms-visibility": "advanced"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month",
              "x-ms-visibility": "advanced"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year",
              "x-ms-visibility": "advanced"
            }
          }
        },
        "spouse_first_name": {
          "type": "string",
          "description": "The spouse's first name (individuals only).",
          "x-ms-summary": "Spouse first name"
        },
        "spouse_last_name": {
          "type": "string",
          "description": "The spouse's last name (individuals only).",
          "x-ms-summary": "Spouse last name"
        },
        "org_name": {
          "type": "string",
          "description": "The organization name (organizations only).",
          "x-ms-summary": "Organization name"
        },
        "address_block": {
          "type": "string",
          "description": "The address block.",
          "x-ms-summary": "Address block"
        },
        "address_city_state": {
          "type": "string",
          "description": "The address city and state.",
          "x-ms-summary": "City and state"
        },
        "address_post_code": {
          "type": "string",
          "description": "The address post code.",
          "x-ms-summary": "Postal code"
        },
        "primary_email": {
          "type": "string",
          "description": "The primary email.",
          "x-ms-summary": "Primary email address"
        },
        "primary_phone": {
          "type": "string",
          "description": "The primary phone.",
          "x-ms-summary": "Primary phone number"
        },
        "matched_alias": {
          "type": "string",
          "description": "The matched alias name (individuals only).",
          "x-ms-summary": "Matched alias"
        },
        "matched_email": {
          "type": "string",
          "description": "The matched email address.",
          "x-ms-summary": "Matched email"
        },
        "matched_phone": {
          "type": "string",
          "description": "The matched phone number.",
          "x-ms-summary": "Matched phone"
        },
        "is_constituent": {
          "type": "boolean",
          "description": "Is the record a constituent?",
          "x-ms-summary": "Is a constituent?"
        },
        "is_deceased": {
          "type": "boolean",
          "description": "Is the record deceased?",
          "x-ms-summary": "Is deceased?"
        },
        "is_inactive": {
          "type": "boolean",
          "description": "Is the record inactive?",
          "x-ms-summary": "Is inactive?"
        }
      }
    },
    "NXTDataIntegrationApi.ConstituentSearchResultCollection": {
      "type": "object",
      "description": "Constituents",
      "properties": {
        "results": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/NXTDataIntegrationApi.ConstituentSearchResult"
          }
        }
      }
    },
    "NXTDataIntegrationApi.CreatedConstituentTribute": {
      "type": "object",
      "description": "Created constituent tribute",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created constituent tribute.",
          "x-ms-summary": "ID"
        }
      }
    },
    "NXTDataIntegrationApi.CreatedTributeAcknowledgee": {
      "type": "object",
      "description": "Created tribute acknowledgee",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the newly created tribute acknowledgee.",
          "x-ms-summary": "ID"
        }
      }
    },
    "NXTDataIntegrationApi.TableEntry": {
      "type": "object",
      "properties": {
        "table_entries_id": {
          "type": "integer",
          "format": "int32",
          "description": "The system record ID of the table entry.",
          "x-ms-summary": "ID"
        },
        "long_description": {
          "type": "string",
          "x-ms-summary": "Description"
        }
      }
    },
    "NXTDataIntegrationApi.TableEntryCollection": {
      "type": "object",
      "description": "Table entries",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/NXTDataIntegrationApi.TableEntry"
          }
        }
      }
    },
    "NXTDataIntegrationApi.Tribute": {
      "type": "object",
      "description": "Tribute",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The system record ID of the tribute.",
          "x-ms-summary": "ID"
        },
        "constituent_record_id": {
          "type": "integer",
          "format": "int32",
          "description": "The system record ID of the constituent associated with the tribute.",
          "x-ms-summary": "Constituent ID"
        },
        "tribute_type_name": {
          "type": "string",
          "description": "The tribute type.",
          "x-ms-summary": "Tribute type"
        },
        "tribute_type_id": {
          "type": "integer",
          "format": "int32",
          "description": "The tribute type ID.",
          "x-ms-summary": "Tribute type ID"
        },
        "description": {
          "type": "string",
          "description": "The tribute description.",
          "x-ms-summary": "Description"
        },
        "start_date": {
          "type": "object",
          "description": "The start date for the relationship.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end_date": {
          "type": "object",
          "description": "The end date for the relationship.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "default_fund_id": {
          "type": "integer",
          "format": "int32",
          "description": "The system record ID of the default fund associated with the tribute.",
          "x-ms-summary": "Default fund ID"
        },
        "notes": {
          "type": "string",
          "description": "The tribute notes.",
          "x-ms-summary": "Notes"
        },
        "is_active": {
          "type": "boolean",
          "description": "Is this tribute active?",
          "x-ms-summary": "Active?"
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "The tribute sequence.",
          "x-ms-summary": "Sequence"
        },
        "date_added": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the tribute was created.",
          "x-ms-summary": "Date added"
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the tribute was last modified.",
          "x-ms-summary": "Date modified"
        }
      }
    },
    "NXTDataIntegrationApi.TributeAcknowledgee": {
      "type": "object",
      "description": "Tribute acknowledgee",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The system record ID of the tribute acknowledgee.",
          "x-ms-summary": "ID"
        },
        "tribute_id": {
          "type": "integer",
          "format": "int32",
          "description": "The system record ID of the tribute associated with the acknowledgee.",
          "x-ms-summary": "Tribute ID"
        },
        "relationships_id": {
          "type": "integer",
          "format": "int32",
          "description": "The system record ID of the relationship (if null, this represents a self-acknowledgee).",
          "x-ms-summary": "Relationship ID"
        },
        "letter": {
          "type": "integer",
          "format": "int32",
          "description": "The letter ID.",
          "x-ms-summary": "Letter ID"
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "The tribute acknowledgee sequence.",
          "x-ms-summary": "Sequence"
        }
      }
    },
    "NXTDataIntegrationApi.TributeAcknowledgeeCollection": {
      "type": "object",
      "description": "Tribute acknowledgees",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/NXTDataIntegrationApi.TributeAcknowledgee"
          }
        }
      }
    },
    "NXTDataIntegrationApi.TributeAcknowledgeeCreate": {
      "type": "object",
      "required": [
        "tribute_id"
      ],
      "properties": {
        "tribute_id": {
          "type": "integer",
          "format": "int32",
          "description": "The system record ID of the tribute associated with the acknowledgee.",
          "x-ms-summary": "Tribute ID"
        },
        "relationship_id": {
          "type": "integer",
          "format": "int32",
          "description": "The system record ID of the relationship (if null, this represents a self-acknowledgee).",
          "x-ms-summary": "Relationship ID"
        },
        "letter_id": {
          "type": "integer",
          "format": "int32",
          "description": "The letter ID.",
          "x-ms-summary": "Letter ID"
        }
      }
    },
    "NXTDataIntegrationApi.TributeCollection": {
      "type": "object",
      "description": "Tributes",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items available for retrieval into the collection after applying any request parameters. The limit and offset parameters do not affect the count, but to facilitate paging, they may affect the number of items in the value result set.",
          "x-ms-summary": "Count"
        },
        "value": {
          "type": "array",
          "description": "The set of items included in the response. This may be a subset of the items in the collection.",
          "items": {
            "$ref": "#/definitions/NXTDataIntegrationApi.Tribute"
          }
        }
      }
    },
    "NXTDataIntegrationApi.TributeCreate": {
      "type": "object",
      "required": [
        "constituent_record_id",
        "tribute_type_id"
      ],
      "properties": {
        "constituent_record_id": {
          "type": "integer",
          "format": "int32",
          "description": "The system record ID of the constituent associated with the tribute.",
          "x-ms-summary": "Constituent ID"
        },
        "tribute_type_id": {
          "type": "integer",
          "format": "int32",
          "description": "The tribute type.",
          "x-ms-summary": "Tribute type",
          "x-ms-dynamic-values": {
            "operationId": "ListTableEntries",
            "value-collection": "value",
            "value-path": "table_entries_id",
            "value-title": "long_description",
            "parameters": {
              "code_table_id": 7,
              "include_inactive": false
            }
          },
          "x-ms-dynamic-list": {
            "operationId": "ListTableEntries",
            "itemsPath": "value",
            "itemValuePath": "table_entries_id",
            "itemTitlePath": "long_description",
            "parameters": {
              "code_table_id": {
                "value": 7
              },
              "include_inactive": {
                "value": false
              }
            }
          }
        },
        "description": {
          "type": "string",
          "description": "The tribute description.",
          "x-ms-summary": "Description"
        },
        "start_date": {
          "type": "object",
          "description": "The start date for the relationship.",
          "x-ms-summary": "Start",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "end_date": {
          "type": "object",
          "description": "The end date for the relationship.",
          "x-ms-summary": "End",
          "properties": {
            "d": {
              "type": "integer",
              "format": "int32",
              "description": "The day in the fuzzy date.",
              "x-ms-summary": "day"
            },
            "m": {
              "type": "integer",
              "format": "int32",
              "description": "The month in the fuzzy date.",
              "x-ms-summary": "month"
            },
            "y": {
              "type": "integer",
              "format": "int32",
              "description": "The year in the fuzzy date.",
              "x-ms-summary": "year"
            }
          }
        },
        "default_fund_id": {
          "type": "integer",
          "format": "int32",
          "description": "The system record ID of the default fund associated with the tribute.",
          "x-ms-summary": "Default fund ID"
        },
        "notes": {
          "type": "string",
          "description": "The tribute notes.",
          "x-ms-summary": "Notes"
        },
        "is_active": {
          "type": "boolean",
          "description": "Is this tribute active?",
          "x-ms-summary": "Active?",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "PowerAutomateUIApi.DynamicValue": {
      "type": "object",
      "description": "A single dynamic value item",
      "properties": {
        "id": {
          "type": "string",
          "description": "The dynamic value item identifier."
        },
        "item": {
          "type": "string",
          "description": "The dynamic value item."
        }
      }
    },
    "PowerAutomateUIApi.DynamicValuesCollection": {
      "type": "object",
      "description": "A collection of objects for use with dynamic values.",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of items in the list."
        },
        "value": {
          "type": "array",
          "description": "The set of objects for use with dynamic values.",
          "items": {
            "$ref": "#/definitions/PowerAutomateUIApi.DynamicValue"
          }
        }
      }
    },
    "PowerAutomateUIApi.DynamicProperties": {
      "type": "object",
      "description": "Defines some (but potentially not all) dynamic OpenApi metadata properties needed for a custom field.",
      "properties": {
        "items": {
          "type": "object",
          "description": "The OpenApi properties for the custom field value.",
          "properties": {
            "type": {
              "type": "string",
              "description": "The OpenApi type."
            },
            "format": {
              "type": "string",
              "description": "The OpenApi format."
            },
            "description": {
              "type": "string",
              "description": "The OpenApi description."
            }
          }
        }
      }
    }
  }
}
