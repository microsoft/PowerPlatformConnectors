{
  "swagger": "2.0",
  "info": {
    "title": "Advanced Data Operations",
    "version": "1.0.0",
    "description": "A suite of advanced operations designed to assist in the transformation of bulk datasets.",
    "contact": {
      "name": "State Solutions Support",
      "url": "https://www.statesolutions.com.au/contact-us",
      "email": "support@statesolutions.com.au"
    }
  },
  "host": "api.statesolutions.com.au",
  "basePath": "/ado/v1",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/Aggregate": {
      "post": {
        "summary": "Aggregate",
        "description": "Aggregate one or more properties by a grouped set of fields within a JSON array dataset.",
        "operationId": "Aggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Body",
            "schema": {
              "$ref": "#/definitions/aggregate"
            },
            "required": true,
            "x-ms-visibility": "important"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/CartesianJoin": {
      "post": {
        "summary": "Cartesian Join",
        "description": "Perform a Cartesian join over two or more datasets.",
        "operationId": "CartesianJoin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Body",
            "schema": {
              "$ref": "#/definitions/cartesianJoin"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/Concatenate": {
      "post": {
        "summary": "Concatenate",
        "description": "Concatenate a field from an array of objects into a single string output.",
        "operationId": "Concatenate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/concatenate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Concatenated text",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/CsvToJson": {
      "post": {
        "summary": "CSV to Json",
        "description": "Transform a comma separated table of data into an array of JSON objects.",
        "operationId": "CsvToJson",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Body",
            "schema": {
              "$ref": "#/definitions/csvToJson"
            },
            "x-ms-visibility": "important",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/Distinct": {
      "post": {
        "summary": "Distinct",
        "description": "Select a set of distinct property values from an array of objects.",
        "operationId": "Distinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/distinct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response"
          }
        }
      }
    },
    "/Expert": {
      "post": {
        "summary": "Expert",
        "description": "Execute a SQL statement over one or more supplied datasets.",
        "operationId": "Expert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/expert"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/FlattenObjectArray": {
      "post": {
        "summary": "Flatten Object Array",
        "description": "Flatten an array of complex, multi-level objects into an array of single JSON objects.",
        "operationId": "FlattenObjectArray",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Body",
            "schema": {
              "$ref": "#/definitions/flattenObjectArray"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/GetDataSchema": {
      "post": {
        "summary": "Get Data Schema",
        "description": "Get the schema (i.e. properties and their associated types) from an array of objects.",
        "operationId": "GetDataSchema",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/getDataSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/Join": {
      "post": {
        "summary": "Join",
        "description": "Join exactly two datasets using a left or inner join technique.",
        "operationId": "Join",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/join"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/JsonToText": {
      "post": {
        "summary": "Json to Text",
        "description": "Transform a JSON array of objects into a tab delimited text format.",
        "operationId": "JsonToText",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Body",
            "schema": {
              "$ref": "#/definitions/jsonToText"
            },
            "x-ms-visibility": "important",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Tab delimited table string",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/JsonToCsv": {
      "post": {
        "summary": "Json to CSV",
        "description": "Transform a JSON array of objects into a comma separated table format.",
        "operationId": "JsonToCsv",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Body",
            "schema": {
              "$ref": "#/definitions/jsonToCsv"
            },
            "x-ms-visibility": "important",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Comma separated table string",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/ParquetToJson": {
      "post": {
        "summary": "Parquet to Json",
        "description": "Transform a base64 encoded parquet dataset into an array of JSON objects.",
        "operationId": "ParquetToJson",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Body",
            "schema": {
              "$ref": "#/definitions/parquetToJson"
            },
            "x-ms-visibility": "important",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/RegexMatches": {
      "post": {
        "summary": "Regex Matches",
        "description": "Produce a set of matches for a string using a regular expression pattern.",
        "operationId": "RegexMatches",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/regexMatches"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/SimpleConcatenate": {
      "post": {
        "summary": "Concatenate (Simple)",
        "description": "Concatenate an array of values into a delimited string.",
        "operationId": "SimpleConcatenate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/simpleConcatenate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Objects",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/SimpleDistinct": {
      "post": {
        "summary": "Distinct (Simple)",
        "description": "Provide a distinct set of values from an array.",
        "operationId": "SimpleDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/simpleDistinct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of values"
          }
        }
      }
    },
    "/Split": {
      "post": {
        "summary": "Split",
        "description": "Split all objects contained within an array by a defined criteria.",
        "operationId": "Split",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/split"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/TextToJson": {
      "post": {
        "summary": "Text to Json",
        "description": "Transform a tab delimited textual dataset into an array of JSON objects.",
        "operationId": "TextToJson",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Body",
            "schema": {
              "$ref": "#/definitions/textToJson"
            },
            "x-ms-visibility": "important",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/Transform": {
      "post": {
        "summary": "Transform",
        "description": "Transform a set of properties in a dataset using any of the available custom transformation functions.",
        "operationId": "Transform",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Body",
            "schema": {
              "$ref": "#/definitions/transform"
            },
            "x-ms-visibility": "important",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Objects",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "filter": {
      "type": "string",
      "description": "String based WHERE clause used to filter the returned result set.  Relies on Balanced Output being set to TRUE.",
      "title": "Filter",
      "x-ms-visibility": "advanced"
    },
    "sortOrder": {
      "type": "object",
      "description": "Object with one or more field names and the sorting direction (i.e. ASC or DESC).",
      "title": "Sort Order",
      "x-ms-visibility": "advanced"
    },
    "simpleSortOrder": {
      "type": "string",
      "description": "Sorting direction (i.e. ASC or DESC).",
      "title": "Sort Order",
      "x-ms-visibility": "advanced",
      "enum": [
        "ASC",
        "DESC"
      ]
    },
    "schema": {
      "type": "object",
      "description": "Manual schema override to force an incoming field to a specific primitive type.",
      "title": "Schema",
      "x-ms-visibility": "advanced"
    },
    "singleTable": {
      "type": "array",
      "description": "Array of single-level objects with one or more properties.",
      "title": "Data",
      "x-ms-visibility": "important",
      "items": {
        "type": "object"
      }
    },
    "complexSingleTable": {
      "type": "array",
      "description": "Array of complex objects or arrays.",
      "title": "Data",
      "x-ms-visibility": "important",
      "items": {
        "type": "object"
      }
    },
    "multipleTables": {
      "type": "object",
      "description": "Defines multiple datasets by the way of an object with each property value being an array of objects.  Each property name is the name of a dataset that is able to be referenced by way of the operation being undertaken.",
      "title": "Data"
    },
    "ignoreEmpty": {
      "type": "boolean",
      "description": "Ignore blank/null strings when concatenating.",
      "title": "Ignore Empty",
      "enum": [
        true,
        false
      ]
    },
    "separator": {
      "type": "string",
      "description": "The string used to delimit the resulting concatenated string.",
      "title": "Separator",
      "x-ms-visibility": "important"
    },
    "advancedOptions": {
      "type": "object",
      "x-ms-visibility": "advanced",
      "properties": {
        "cultureName": {
          "type": "string",
          "description": "Allows the calling application to change the culture so date parsing, etc. produces the correct result.",
          "title": "Culture Name"
        },
        "isBoolean": {
          "type": "array",
          "description": "List of properties in the output that should be treated as boolean values",
          "title": "Boolean Properties",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "aggregate": {
      "type": "object",
      "properties": {
        "aggregationType": {
          "type": "string",
          "description": "The aggregation type.",
          "title": "Operation",
          "enum": [
            "AVG",
            "SUM",
            "COUNT",
            "MAX",
            "MIN"
          ]
        },
        "aggregateBy": {
          "type": "array",
          "items": {
            "type": "string",
            "title": "Aggregate By",
            "x-ms-visibility": "important",
            "description": "The fields to aggregate by (i.e. the non-numeric properties)."
          }
        },
        "aggregateOn": {
          "type": "array",
          "items": {
            "type": "string",
            "title": "Aggregate On",
            "x-ms-visibility": "important",
            "description": "The fields to aggregate on (i.e. the numeric properties)."
          }
        },
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "$ref": "#/definitions/singleTable"
        }
      },
      "required": [
        "aggregationType",
        "aggregateOn",
        "aggregateBy",
        "data"
      ]
    },
    "cartesianJoin": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "$ref": "#/definitions/multipleTables"
        }
      },
      "required": [
        "data"
      ]
    },
    "concatenate": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "description": "Field from the source data set to concatenate.",
          "title": "Field",
          "x-ms-visibility": "important"
        },
        "separator": {
          "$ref": "#/definitions/separator"
        },
        "ignoreEmpty": {
          "$ref": "#/definitions/ignoreEmpty"
        },
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "$ref": "#/definitions/singleTable"
        }
      },
      "required": [
        "field",
        "ignoreEmpty",
        "data"
      ]
    },
    "distinct": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "description": "The list of fields to include in the result set.  Supports the dynamic field selection syntax.",
          "title": "Fields",
          "items": {
            "type": "string"
          },
          "x-ms-visibility": "important"
        },
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "$ref": "#/definitions/singleTable"
        }
      },
      "required": [
        "fields",
        "data"
      ]
    },
    "expert": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "Fully functioning SELECT statement that refers to and processes the incoming data set.",
          "title": "Query String"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "$ref": "#/definitions/multipleTables"
        }
      },
      "required": [
        "query",
        "data"
      ]
    },
    "flattenObjectArray": {
      "type": "object",
      "properties": {
        "delimiter": {
          "type": "string",
          "description": "The string used to delimit each property from the different levels in the object hierarchy.",
          "title": "Delimiter",
          "x-ms-visibility": "important"
        },
        "balancedOutput": {
          "type": "boolean",
          "title": "Balanced Output",
          "description": "If TRUE, each item in the result set will have the same set of properties, therefore, making it balanced.  Filter and Sort Order only work if this is set to TRUE.",
          "enum": [
            true,
            false
          ],
          "x-ms-visibility": "important"
        },
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "$ref": "#/definitions/complexSingleTable"
        }
      },
      "required": [
        "delimiter",
        "balancedOutput",
        "data"
      ]
    },
    "getDataSchema": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "$ref": "#/definitions/singleTable"
        }
      },
      "required": [
        "data"
      ]
    },
    "join": {
      "type": "object",
      "properties": {
        "joinType": {
          "type": "string",
          "description": "The join operation to perform.",
          "title": "Join Type",
          "enum": [
            "Left",
            "Inner"
          ]
        },
        "joinFields": {
          "type": "array",
          "description": "The list of fields to join each table on.",
          "title": "Join Fields",
          "items": {
            "type": "string"
          }
        },
        "fields": {
          "type": "array",
          "description": "The list of fields to include in the result set.  Supports the dynamic field selection syntax.",
          "title": "Fields",
          "items": {
            "type": "string"
          }
        },
        "forceFullyQualifiedFieldNames": {
          "type": "boolean",
          "description": "Force all field names in the resulting dataset to be prefixed with the originating dataset name.",
          "title": "Force Fully Qualified Field Names",
          "x-ms-visibility": "advanced",
          "enum": [
            true,
            false
          ]
        },
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "$ref": "#/definitions/multipleTables"
        }
      },
      "required": [
        "joinType",
        "joinFields",
        "fields",
        "data"
      ]
    },
    "regexMatches": {
      "type": "object",
      "properties": {
        "pattern": {
          "type": "string",
          "description": "Regular expression pattern.",
          "title": "Pattern"
        },
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "type": "string",
          "description": "Text to perform the regex pattern over",
          "title": "Data"
        }
      },
      "required": [
        "pattern",
        "data"
      ]
    },
    "simpleConcatenate": {
      "type": "object",
      "properties": {
        "separator": {
          "$ref": "#/definitions/separator"
        },
        "ignoreEmpty": {
          "$ref": "#/definitions/ignoreEmpty"
        },
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/simpleSortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "title": "Data",
            "x-ms-visibility": "important",
            "description": "Array of strings or numeric values."
          }
        }
      },
      "required": [
        "data"
      ]
    },
    "simpleDistinct": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "description": "Field to perform the distinct on.",
          "title": "Field"
        },
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/simpleSortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "$ref": "#/definitions/singleTable"
        }
      },
      "required": [
        "field",
        "data"
      ]
    },
    "split": {
      "type": "object",
      "properties": {
        "splits": {
          "type": "array",
          "description": "Array of single level objects defined by a destination field mapped from a source field or a constant.",
          "title": "Splits",
          "x-ms-visibility": "important",
          "items": {
            "type": "object"
          }
        },
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "$ref": "#/definitions/singleTable"
        }
      },
      "required": [
        "splits",
        "data"
      ]
    },
    "transform": {
      "type": "object",
      "properties": {
        "transformations": {
          "type": "object",
          "description": "Object containing a source and destination set of mapping transformations.",
          "title": "Transformations",
          "x-ms-visibility": "important"
        },
        "preserveAllProperties": {
          "type": "boolean",
          "title": "Preserve All Properties",
          "description": "If TRUE, all properties not specifically called out in the transformations property will be preserved in the resulting dataset.",
          "enum": [
            true,
            false
          ],
          "x-ms-visibility": "advanced"
        },
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "$ref": "#/definitions/singleTable"
        }
      },
      "required": [
        "transformations",
        "data"
      ]
    },
    "csvToJson": {
      "type": "object",
      "properties": {
        "headerRow": {
          "type": "boolean",
          "description": "Contains header row",
          "title": "Header Row",
          "enum": [
            true,
            false
          ],
          "x-ms-visibility": "advanced"
        },
        "rowSeparator": {
          "type": "string",
          "description": "The character(s) separating each row, default = \\n",
          "title": "Row Separator",
          "x-ms-visibility": "advanced"
        },
        "escapeCharacter": {
          "type": "string",
          "description": "The escape character to use when splitting each field, default is double quotes.",
          "title": "Escape Character",
          "x-ms-visibility": "advanced"
        },
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "type": "string",
          "description": "Delimited string table",
          "title": "Data"
        }
      },
      "required": [
        "data"
      ]
    },
    "textToJson": {
      "type": "object",
      "properties": {
        "headerRow": {
          "type": "boolean",
          "description": "Contains header row",
          "title": "Header Row",
          "enum": [
            true,
            false
          ],
          "x-ms-visibility": "advanced"
        },
        "rowSeparator": {
          "type": "string",
          "description": "The character(s) separating each row, default = \\n",
          "title": "Row Separator",
          "x-ms-visibility": "advanced"
        },
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "type": "string",
          "description": "Delimited string table",
          "title": "Data"
        }
      },
      "required": [
        "data"
      ]
    },
    "jsonToText": {
      "type": "object",
      "properties": {
        "headerRow": {
          "type": "boolean",
          "description": "Contains header row",
          "title": "Header Row",
          "enum": [
            true,
            false
          ],
          "x-ms-visibility": "advanced"
        },
        "rowSeparator": {
          "type": "string",
          "description": "The character(s) separating each row, default = \\n",
          "title": "Row Separator",
          "x-ms-visibility": "advanced"
        },
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "type": "string",
          "description": "Delimited string table",
          "title": "Data"
        }
      },
      "required": [
        "data"
      ]
    },
    "jsonToCsv": {
      "type": "object",
      "properties": {
        "headerRow": {
          "type": "boolean",
          "description": "Contains header row",
          "title": "Header Row",
          "enum": [
            true,
            false
          ],
          "x-ms-visibility": "advanced"
        },
        "rowSeparator": {
          "type": "string",
          "description": "The character(s) separating each row, default = \\n",
          "title": "Row Separator",
          "x-ms-visibility": "advanced"
        },
        "escapeCharacter": {
          "type": "string",
          "description": "The escape character for values that contain the field separator value.",
          "title": "Escape Character",
          "x-ms-visibility": "advanced"
        },
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "type": "string",
          "description": "Delimited string table",
          "title": "Data"
        }
      },
      "required": [
        "data"
      ]
    },
    "parquetToJson": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/filter"
        },
        "sortOrder": {
          "$ref": "#/definitions/sortOrder"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "advancedOptions": {
          "$ref": "#/definitions/advancedOptions"
        },
        "data": {
          "type": "string",
          "description": "Base64 encoded string containing contents of a parquet data file.",
          "title": "Data"
        }
      },
      "required": [
        "data"
      ]
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "Ocp-Apim-Subscription-Key"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": [],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.statesolutions.com.au"
    },
    {
      "propertyName": "Privacy Policy",
      "propertyValue": "https://www.statesolutions.com.au/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Data"
    }
  ]
}