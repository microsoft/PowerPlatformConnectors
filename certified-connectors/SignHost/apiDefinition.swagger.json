{
  "swagger": "2.0",
  "info": {
    "title": "Signhost",
    "description": "Signhost the workflow signing service by Entrust is a digital signing and identification solution, empowering all types of businesses with seamless and secure online transactions.",
    "version": "1.0",
    "contact": {
      "name": "Signhost Customer Succes Team",
      "url": "https://intercom.help/signhost/en/",
      "email": "support@signhost.com"
    }
  },
  "host": "api.signhost.com",
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "parameters": {
    "AppkeyParam": {
      "name": "Application",
      "description": "The APPKey",
      "in": "header",
      "type": "string",
      "required": true
    }
  },
  "paths": {
    "/api/transaction/{transactionId}": {
      "get": {
        "description": "Returns current transaction details.\nPlease do not use any GET method for active polling, but use our [postback service](/postback/) for this end.\n",
        "parameters": [
          {
            "name": "transactionId",
            "description": "ID of the transaction",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the transaction",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "description": "Not authorized to access the specified transaction"
          },
          "410": {
            "description": "The transaction details are no longer available and as a result the returned JSON only contains partial historical data.\nThis happens when we cleaned the transaction for example due to reaching an end status (any status above 30),\nor the expiration dates have expired.\n"
          }
        },
        "summary": "Get transaction details",
        "operationId": "Getdetails"
      },
      "delete": {
        "description": "Delete a transaction by a transaction id.\nWhen a transaction is not in an end-state (such as fully signed) the transaction will be cancelled and cleaned.\nA cancelled transaction can be told to send an e-mail notification to the awaiting signers that the transaction was cancelled.\nThe status of the transaction will be set to cancelled.\nWhen a transaction is in an end-state the transaction the transaction will be cleaned.\nThe status of the transaction will remain the same but we will clean any uploaded documents and sensitive data as soon as possible.\n",
        "parameters": [
          {
            "name": "transactionId",
            "type": "string",
            "description": "ID of the transaction",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Cancellation details",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "SendNotifications": {
                  "type": "boolean",
                  "description": "Send e-mail notifications to the awaiting signers,\nwhen SendSignRequest has been set to true during the transaction creation.\n",
                  "default": false
                },
                "Reason": {
                  "type": "string",
                  "description": "The reason of cancellation."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The transaction is succesfully deleted"
          },
          "400": {
            "description": "The transaction could not be deleted.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "summary": "Delete transaction",
        "operationId": "Delete"
      }
    },
    "/api/transaction/{transactionId}/file/{fileId}/": {
      "get": {
        "description": "Returns the (signed) document(s).",
        "parameters": [
          {
            "name": "transactionId",
            "description": "ID of the description",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileId",
            "description": "A unique identifier provided by you for the file.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The contents of the file is returned in the body.",
            "schema": {
              "type": "string",
              "title": "Content",
              "format": "binary",
              "x-ms-visibility": "important"
            }
          }
        },
        "summary": "Download pdf",
        "operationId": "Downloadpdf"
      }
    },
    "/api/file/receipt/{transactionId}": {
      "get": {
        "description": "Returns the receipt when the transaction is successfully signed (Status=30)",
        "produces": [
          "application/pdf"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "description": "ID of the description",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "(signed) document(s)",
            "schema": {
              "title": "Content",
              "type": "string",
              "format": "binary",
              "x-ms-visibility": "important"
            }
          }
        },
        "summary": "Download receipt",
        "operationId": "Downloadreceipt"
      }
    },
    "/api/transaction": {
      "post": {
        "description": "Creates a new transaction",
        "parameters": [
          {
            "in": "body",
            "name": "transaction",
            "description": "Transaction to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionInput"
            }
          }
        ],
        "produces": [
          "application/pdf"
        ],
        "responses": {
          "200": {
            "description": "Details of the created transaction.",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "description": "Not authorized to create a transaction."
          }
        },
        "summary": "Create transaction",
        "operationId": "Create"
      }
    },
    "/api/transaction/{transactionId}/file/{fileId}": {
      "put": {
        "description": "Add a file to the transaction or overwrite an existing file with the same {fileId}.\nThe file parameter can either be the PDF document or JSON <a href=\"##/definitions/FileMetaData\">metadata</a>.\nIf your file requires metadata, the JSON metadata MUST be supplied first.\nOnly PDF documents with Content-Type 'application/pdf' are accepted.\nRelated posts [How to create a transaction with api generated fields](/api/howto/2016/10/06/api-generated-fields.html), [howto create a transaction with fillable pdf fields](/api/howto/2016/04/21/howto-create-a-transaction-with-fillable-pdf-fields.html).\n#### File digest header\nWhen uploading a file it is possible to send a digest header along with the http request.\nThis header should contain a base64 encoded SHA checksum of the uploaded file.\nFor more information please refer to the [RFC 3230](https://www.ietf.org/rfc/rfc3230.txt) and [RFC 5843](https://www.ietf.org/rfc/rfc5843.txt) specifications.\nFor example: `Digest: SHA-256=HtHRpLOZBEMnTpQS6Zn12veC4uhjtMwamfVAwmPQPmE=`\n",
        "consumes": [
          "application/pdf"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionId",
            "description": "ID of an existing -- not yet started -- transaction",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileId",
            "description": "A unique identifier provided by you for the file.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "File upload\n",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "File succesfully created and added to the transaction"
          },
          "202": {
            "description": "File meta data accepted, waiting for actual file content"
          },
          "204": {
            "description": "Existing file replaced within the specified transaction"
          },
          "409": {
            "description": "Conflict while trying to overwrite the file.\nYou have used the same fileId again which causes us to overwrite the file (which is a valid action).\nHowever the same fileId was provided in a too short time interval making it unclear which version was meant to be the latest version.\n"
          }
        },
        "summary": "Add file",
        "operationId": "Addfile"
      }
    },
    "/api/transaction/{transactionId}/start": {
      "put": {
        "description": "Starts a transaction with the same {transactionId}",
        "parameters": [
          {
            "name": "transactionId",
            "description": "ID of an existing -- not yet started -- transaction",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The transaction is started."
          },
          "400": {
            "description": "The transaction could not be started. Most probably causes are that the created transactions contains errors causing the transaction to be in Failed status.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "summary": "Start transaction",
        "operationId": "Start"
      }
    }
  },
  "definitions": {
    "TransactionInput": {
      "type": "object",
      "properties": {
        "Files": {
          "readOnly": true,
          "type": "object",
          "description": "A map of files attached to this transaction.",
          "additionalProperties": {
            "$ref": "#/definitions/FileEntry"
          }
        },
        "Language": {
          "description": "The language of the sender notifications and the receipt, only de-DE, en-US, es-ES, fr-FR, it-IT, pl-PL and nl-NL are allowed.",
          "type": "string",
          "enum": [
            "de-DE",
            "en-US",
            "es-ES",
            "fr-FR",
            "it-IT",
            "pl-PL",
            "nl-NL"
          ]
        },
        "Seal": {
          "type": "boolean",
          "default": false,
          "description": "Seal the document before sending to the signers."
        },
        "Signers": {
          "type": "array",
          "description": "The signer information.",
          "items": {
            "type": "object",
            "required": [
              "Email"
            ],
            "properties": {
              "Id": {
                "type": "string",
                "description": "The id of the signer, must be unique within a transaction.\nIf you don't provide an id we will generate one for you.\n"
              },
              "Email": {
                "type": "string",
                "description": "The e-mail address of the signer",
                "example": "john.doe@example.com"
              },
              "IntroText": {
                "type": "string",
                "description": "An intro text to show to the user during the sign proces.\nThis will be shown on the first screen to the signer and supports limitted markdown markup.\nThe following markup is supported:\n- `# Headings`\n- `*Emphasis*` / `_Emphasis_`\n- `**Stong**` / `__Strong__`\n- `1. Ordered` and `- Unordered` lists\n"
              },
              "Authentications": {
                "description": "List of authentications that the signer has to authenticate with.\nThe order in which the authentications are provided determine in which order the signer will have to perform the specified method.\nAuthentications must be performed before the document(s) can be viewed.\nYou **must** explicitly specify the API-version when using this feature.\nThis is done with the header: 'Accept: application/vnd.signhost.v1+json'.\n",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Authentication"
                }
              },
              "Verifications": {
                "description": "List of verifications that the signer has to verify with.\nThe order in which the verifications are provided determine in which order the signer will have to perform the specified method.\nVerifications must be performed before the document(s) can be signed.\nYou **must** use one of the following verifications as the last method:\n- Consent\n- itsme sign<sup>*</sup>\n- PhoneNumber\n- Scribble\n- SigningCertificate<sup>*</sup>\n- ZealiD Qualified<sup>*</sup>\n<sup>*</sup> These verifications can not be used in any other position than the last.\n",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Verification"
                }
              },
              "SendSignRequest": {
                "description": "Send a sign invitation to the signer his e-mail address.",
                "default": true,
                "type": "boolean"
              },
              "SignUrl": {
                "description": "A unique URL per signer that provides the signing flow for the signer.\nAvailable / valid if `SendSignRequest` is set to false.\n",
                "type": "string",
                "readOnly": true
              },
              "SignRequestSubject": {
                "type": "string",
                "description": "The subject of the sign request email in plain text.\nMaximum of 64 characters allowed.\nOmitting this parameter will enable the default subject.\n"
              },
              "SignRequestMessage": {
                "description": "The message of the sign request in plain text.\nNewlines can be created by including a \\n in the json, HTML is not allowed.\nRequired if `SendSignRequest` is true\n",
                "type": "string"
              },
              "SendSignConfirmation": {
                "description": "Send the sign confirmation to the signer his e-mail address.\nDefault value is the value of `SendSignRequest`\n",
                "type": "boolean"
              },
              "Language": {
                "description": "The language of the receiving user, only de-DE, en-US, es-ES, fr-FR, it-IT, pl-PL and nl-NL are allowed.",
                "default": "nl-NL",
                "type": "string",
                "enum": [
                  "de-DE",
                  "en-US",
                  "es-ES",
                  "fr-FR",
                  "it-IT",
                  "pl-PL",
                  "nl-NL"
                ]
              },
              "ScribbleName": {
                "description": "The name of the signer, this will be pre filled in the scribble form.",
                "type": "string"
              },
              "DaysToRemind": {
                "description": "Amount of days before reminding the signers. -1 to disable reminders.\nIgnored if `SendSignRequest` is set to false.\nBy default your organisation's setting will be used.\n",
                "default": 7,
                "type": "integer"
              },
              "Expires": {
                "description": "When set the signer is no longer allowed to sign the transaction after this date.",
                "type": "string",
                "format": "date-time"
              },
              "Reference": {
                "description": "The reference of the signer.",
                "type": "string"
              },
              "RejectReason": {
                "readOnly": true,
                "description": "The rejection reason that was given by the signer when the transaction was rejected.",
                "type": "string"
              },
              "ReturnUrl": {
                "description": "The url to redirect the user to after signing, rejecting or cancelling.",
                "default": "https://signhost.com",
                "type": "string"
              },
              "Context": {
                "type": "object",
                "description": "Any valid json object which we will return back to you when doing a GET on the transaction or when we send a postback."
              },
              "Activities": {
                "type": "array",
                "readOnly": true,
                "description": "List of activities attached to this signer.\nActivities are added by signhost when a signer event occured.\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "Id": {
                      "type": "string"
                    },
                    "Code": {
                      "type": "integer",
                      "enum": [
                        101,
                        102,
                        103,
                        104,
                        105,
                        201,
                        202,
                        203,
                        301,
                        302,
                        303,
                        401,
                        402,
                        403
                      ],
                      "description": "* 101 -  Invitation sent\n* 102 -  Received\n* 103 -  Opened\n* 104 -  Reminder sent\n* 105 -  Document opened, Info property contains the file id of the opened document.\n* 201 -  Cancelled\n* 202 -  Rejected\n* 203 -  Signed\n* 301 -  Signed document sent\n* 302 -  Signed document opended\n* 303 -  Signed document downloaded\n* 401 -  Receipt sent\n* 402 -  Receipt opened\n* 403 -  Receipt downloaded\n"
                    },
                    "Info": {
                      "type": "string",
                      "description": "May contain additional information belonging to this activity"
                    },
                    "CreatedDateTime": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        },
        "Receivers": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "Name",
              "Email",
              "Message"
            ],
            "properties": {
              "Name": {
                "type": "string",
                "description": "The name of the receiver."
              },
              "Email": {
                "type": "string",
                "description": "The e-mail address of the reveiver."
              },
              "Language": {
                "type": "string",
                "description": "The language of the receiver, only de-DE, en-US, es-ES, fr-FR, it-IT and nl-NL are allowed.",
                "default": "nl-NL"
              },
              "Subject": {
                "type": "string",
                "description": "The subject of the receiver email in plain text.\nMaximum of 64 characters allowed.\nOmitting this parameter will enable the default subject.\n"
              },
              "Message": {
                "type": "string",
                "description": "The email message towards the receiver in plain text. Newlines can be created by including a \\n in the json, HTML is not allowed."
              },
              "Reference": {
                "type": "string",
                "description": "The reference of the receiver."
              },
              "Context": {
                "type": "object",
                "description": "Any valid json object which we will return back to you when doing a GET on the transaction or when we send a postback."
              }
            }
          }
        },
        "Reference": {
          "type": "string",
          "description": "The reference of the transaction. For example \"1234\""
        },
        "PostbackUrl": {
          "type": "string",
          "description": "The absolute url to postback the status updates. For example https://example.com/postback.php"
        },
        "SignRequestMode": {
          "type": "integer",
          "format": "int32",
          "description": "Set to 1 for sending at once, to 2 for sequential.\nIgnored if `SendSignRequest` is set to false.\n",
          "default": 2
        },
        "DaysToExpire": {
          "type": "integer",
          "format": "int32",
          "description": "Amount of days before expiration. Max 90 days.",
          "default": 60
        }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "Id": {
          "readOnly": true,
          "type": "string",
          "description": "The id of the transaction.\nCurrently this property is read only but this may change in the future.\n"
        },
        "Files": {
          "readOnly": true,
          "type": "object",
          "description": "A map of files attached to this transaction.",
          "additionalProperties": {
            "$ref": "#/definitions/FileEntry"
          }
        },
        "Language": {
          "description": "The language of the sender notifications and the receipt, only de-DE, en-US, es-ES, fr-FR, it-IT, pl-PL and nl-NL are allowed.",
          "type": "string",
          "enum": [
            "de-DE",
            "en-US",
            "es-ES",
            "fr-FR",
            "it-IT",
            "pl-PL",
            "nl-NL"
          ]
        },
        "Seal": {
          "type": "boolean",
          "default": false,
          "description": "Seal the document before sending to the signers."
        },
        "Signers": {
          "type": "array",
          "description": "The signer information.",
          "items": {
            "type": "object",
            "required": [
              "Email"
            ],
            "properties": {
              "Id": {
                "type": "string",
                "description": "The id of the signer, must be unique within a transaction.\nIf you don't provide an id we will generate one for you.\n"
              },
              "Email": {
                "type": "string",
                "description": "The e-mail address of the signer",
                "example": "john.doe@example.com"
              },
              "IntroText": {
                "type": "string",
                "description": "An intro text to show to the user during the sign proces.\nThis will be shown on the first screen to the signer and supports limitted markdown markup.\nThe following markup is supported:\n- `# Headings`\n- `*Emphasis*` / `_Emphasis_`\n- `**Stong**` / `__Strong__`\n- `1. Ordered` and `- Unordered` lists\n"
              },
              "Authentications": {
                "description": "List of authentications that the signer has to authenticate with.\nThe order in which the authentications are provided determine in which order the signer will have to perform the specified method.\nAuthentications must be performed before the document(s) can be viewed.\nYou **must** explicitly specify the API-version when using this feature.\nThis is done with the header: 'Accept: application/vnd.signhost.v1+json'.\n",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Authentication"
                }
              },
              "Verifications": {
                "description": "List of verifications that the signer has to verify with.\nThe order in which the verifications are provided determine in which order the signer will have to perform the specified method.\nVerifications must be performed before the document(s) can be signed.\nYou **must** use one of the following verifications as the last method:\n- Consent\n- itsme sign<sup>*</sup>\n- PhoneNumber\n- Scribble\n- SigningCertificate<sup>*</sup>\n- ZealiD Qualified<sup>*</sup>\n<sup>*</sup> These verifications can not be used in any other position than the last.\n",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Verification"
                }
              },
              "SendSignRequest": {
                "description": "Send a sign invitation to the signer his e-mail address.",
                "default": true,
                "type": "boolean"
              },
              "SignUrl": {
                "description": "A unique URL per signer that provides the signing flow for the signer.\nAvailable / valid if `SendSignRequest` is set to false.\n",
                "type": "string",
                "readOnly": true
              },
              "SignRequestSubject": {
                "type": "string",
                "description": "The subject of the sign request email in plain text.\nMaximum of 64 characters allowed.\nOmitting this parameter will enable the default subject.\n"
              },
              "SignRequestMessage": {
                "description": "The message of the sign request in plain text.\nNewlines can be created by including a \\n in the json, HTML is not allowed.\nRequired if `SendSignRequest` is true\n",
                "type": "string"
              },
              "SendSignConfirmation": {
                "description": "Send the sign confirmation to the signer his e-mail address.\nDefault value is the value of `SendSignRequest`\n",
                "type": "boolean"
              },
              "Language": {
                "description": "The language of the receiving user, only de-DE, en-US, es-ES, fr-FR, it-IT, pl-PL and nl-NL are allowed.",
                "default": "nl-NL",
                "type": "string",
                "enum": [
                  "de-DE",
                  "en-US",
                  "es-ES",
                  "fr-FR",
                  "it-IT",
                  "pl-PL",
                  "nl-NL"
                ]
              },
              "ScribbleName": {
                "description": "The name of the signer, this will be pre filled in the scribble form.",
                "type": "string"
              },
              "DaysToRemind": {
                "description": "Amount of days before reminding the signers. -1 to disable reminders.\nIgnored if `SendSignRequest` is set to false.\nBy default your organisation's setting will be used.\n",
                "default": 7,
                "type": "integer"
              },
              "Expires": {
                "description": "When set the signer is no longer allowed to sign the transaction after this date.",
                "type": "string",
                "format": "date-time"
              },
              "Reference": {
                "description": "The reference of the signer.",
                "type": "string"
              },
              "RejectReason": {
                "readOnly": true,
                "description": "The rejection reason that was given by the signer when the transaction was rejected.",
                "type": "string"
              },
              "ReturnUrl": {
                "description": "The url to redirect the user to after signing, rejecting or cancelling.",
                "default": "https://signhost.com",
                "type": "string"
              },
              "Context": {
                "type": "object",
                "description": "Any valid json object which we will return back to you when doing a GET on the transaction or when we send a postback."
              },
              "Activities": {
                "type": "array",
                "readOnly": true,
                "description": "List of activities attached to this signer.\nActivities are added by signhost when a signer event occured.\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "Id": {
                      "type": "string"
                    },
                    "Code": {
                      "type": "integer",
                      "enum": [
                        101,
                        102,
                        103,
                        104,
                        105,
                        201,
                        202,
                        203,
                        301,
                        302,
                        303,
                        401,
                        402,
                        403
                      ],
                      "description": "* 101 -  Invitation sent\n* 102 -  Received\n* 103 -  Opened\n* 104 -  Reminder sent\n* 105 -  Document opened, Info property contains the file id of the opened document.\n* 201 -  Cancelled\n* 202 -  Rejected\n* 203 -  Signed\n* 301 -  Signed document sent\n* 302 -  Signed document opended\n* 303 -  Signed document downloaded\n* 401 -  Receipt sent\n* 402 -  Receipt opened\n* 403 -  Receipt downloaded\n"
                    },
                    "Info": {
                      "type": "string",
                      "description": "May contain additional information belonging to this activity"
                    },
                    "CreatedDateTime": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        },
        "Receivers": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "Name",
              "Email",
              "Message"
            ],
            "properties": {
              "Name": {
                "type": "string",
                "description": "The name of the receiver."
              },
              "Email": {
                "type": "string",
                "description": "The e-mail address of the reveiver."
              },
              "Language": {
                "type": "string",
                "description": "The language of the receiver, only de-DE, en-US, es-ES, fr-FR, it-IT and nl-NL are allowed.",
                "default": "nl-NL"
              },
              "Subject": {
                "type": "string",
                "description": "The subject of the receiver email in plain text.\nMaximum of 64 characters allowed.\nOmitting this parameter will enable the default subject.\n"
              },
              "Message": {
                "type": "string",
                "description": "The email message towards the receiver in plain text. Newlines can be created by including a \\n in the json, HTML is not allowed."
              },
              "Reference": {
                "type": "string",
                "description": "The reference of the receiver."
              },
              "Context": {
                "type": "object",
                "description": "Any valid json object which we will return back to you when doing a GET on the transaction or when we send a postback."
              }
            }
          }
        },
        "Reference": {
          "type": "string",
          "description": "The reference of the transaction. For example \"1234\""
        },
        "PostbackUrl": {
          "type": "string",
          "description": "The absolute url to postback the status updates. For example https://example.com/postback.php"
        },
        "SignRequestMode": {
          "type": "integer",
          "format": "int32",
          "description": "Set to 1 for sending at once, to 2 for sequential.\nIgnored if `SendSignRequest` is set to false.\n",
          "default": 2
        },
        "DaysToExpire": {
          "type": "integer",
          "format": "int32",
          "description": "Amount of days before expiration. Max 90 days.",
          "default": 60
        },
        "SendEmailNotifications": {
          "type": "boolean",
          "description": "Send e-mail notifications to the sender.",
          "default": true
        },
        "Status": {
          "type": "integer",
          "format": "int32",
          "description": "Current transaction status.\n* 5 - Waiting for document\n* 10 - Waiting for signer\n* 20 - In progress\n* 30 - Signed (end state)\n* 40 - Rejected (end state)\n* 50 - Expired (end state)\n* 60 - Cancelled (end state)\n* 70 - Failed (end state)\n",
          "enum": [
            5,
            10,
            20,
            30,
            40,
            50,
            60,
            70
          ]
        },
        "CancelationReason": {
          "type": "string",
          "description": "The original cancellation reason given during a DELETE call."
        },
        "Context": {
          "type": "object",
          "description": "Any valid json object which we will return back to you when doing a GET on the transaction or when we send a postback."
        }
      }
    },
    "Authentication": {
      "type": "object",
      "discriminator": "Type",
      "properties": {
        "Type": {
          "type": "string",
          "enum": [
            "DigiD",
            "PhoneNumber"
          ],
          "description": "Type of the authentication object.\nThe `Type` property **must** be the first property in the json!\nThe order in which the authentications are provided determine in which order the signer will have to perform the specified method.\n"
        },
        "Number": {
          "type": "string",
          "description": "Phone number: This field is mandatory when the authentication method PhoneNumber is chosen\n"
        },
        "Bsn": {
          "type": "number",
          "description": "This field is mandatory when the authentication method BSN is chosen\n"
        }
      },
      "required": [
        "Type"
      ]
    },
    "Verification": {
      "type": "object",
      "discriminator": "Type",
      "properties": {
        "Type": {
          "type": "string",
          "enum": [
            "Consent",
            "DigiD",
            "eHerkenning",
            "eIDAS Login",
            "iDeal",
            "iDIN",
            "itsme Identification",
            "PhoneNumber",
            "Scribble",
            "itsme sign",
            "SigningCertificate",
            "SURFnet",
            "ZealiD Qualified"
          ],
          "description": "Type of the verification object.\nThe `Type` property **must** be the first property in the json!\nThe order in which the verifications are provided determine in which order the signer will have to perform the specified method.\nYou **must** use one of the following verifications as the last method:\n- Consent\n- itsme sign<sup>*</sup>\n- PhoneNumber\n- Scribble\n- SigningCertificate<sup>*</sup>\n- ZealiD Qualified<sup>*</sup>\n<sup>*</sup> These verifications can not be used in any other position than the last.\n"
        }
      },
      "required": [
        "Type"
      ]
    },
    "FileEntry": {
      "type": "object",
      "properties": {
        "Links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "DisplayName": {
          "type": "string",
          "description": "The name of the document that was displayed to the user while signing the documents."
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "Rel": {
          "type": "string",
          "description": "The type of file you can download.",
          "enum": [
            "file",
            "receipt",
            "signer.sign",
            "signer.download"
          ]
        },
        "Type": {
          "type": "string",
          "description": "The type of the file you can expect to download. Include this in your 'Accept' header when requesting the file."
        },
        "Link": {
          "type": "string",
          "description": "Url containing the link to the file."
        }
      }
    },
    "FileMetaData": {
      "type": "object",
      "properties": {
        "DisplayOrder": {
          "type": "integer",
          "description": "With what order number we'll display the file to the signer"
        },
        "DisplayName": {
          "type": "string",
          "description": "With what name we'll display the file to the signer"
        },
        "SetParaph": {
          "type": "boolean",
          "description": "Places a copy of the signer's scribble image on the bottom right of every page where no signature is present.\nNote: due to the nature of advanced or qualified digital signatures, paraphs are merely a cosmetic addition.\n"
        },
        "Signers": {
          "type": "object",
          "description": "array.\nEach key should be a valid signer id.\n",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "FormSets": {
                "type": "array",
                "description": "List of formset keys to be assigned to this signer.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "FormSets": {
          "type": "object",
          "description": "object.\nThe key of the map will be the formset name.\nThe value will be the formset definition\n",
          "additionalProperties": {
            "type": "object",
            "description": "object\nThe key of the map will be the field name.\nThe value will be the definition of the field.\n",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "Type": {
                  "type": "string",
                  "enum": [
                    "Seal",
                    "Signature",
                    "Check",
                    "SingleLine"
                  ],
                  "description": "Field type to create.\n* Seal is not yet implemented, this will specify the properties of a seal.\n* Signature, specifies a signature field\n* Check, specifies a checkbox. You'll have to set the `value` property\n* SingleLine, specifies a single line textbox\n"
                },
                "Location": {
                  "type": "object",
                  "description": "Specify where the field should be placed within the document.",
                  "properties": {
                    "Search": {
                      "type": "string",
                      "description": "The text to search in the pdf document to use as the position for the field. For example `{{Signer1}}`."
                    },
                    "Occurence": {
                      "type": "integer",
                      "description": "When using text search, only match this matched occurence."
                    },
                    "Top": {
                      "type": "integer",
                      "description": "Offset from the top of the search text or the page"
                    },
                    "Right": {
                      "type": "integer",
                      "description": "Offset from the right of the search or the page"
                    },
                    "Bottom": {
                      "type": "integer",
                      "description": "Offset from the bottom of the search or the page"
                    },
                    "Left": {
                      "type": "integer",
                      "description": "Offset from the left of the search or the page"
                    },
                    "Width": {
                      "type": "integer",
                      "description": "The width of the field, can\u2019t be used when both Left and Right are specified.\nFor signature and seal fields we suggest a width of 140.\n"
                    },
                    "Height": {
                      "type": "integer",
                      "description": "The height of the field, can\u2019t be used when both Bottom and Top are specified.\nFor signature and seal fields we suggest a height of 70.\n"
                    },
                    "PageNumber": {
                      "type": "integer",
                      "description": "On which page the field should be placed."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "example": "Simple example which performs a scan for the `{{Signer1}}` mustache tag\nand creates a Signature fields named SignatureOne on the found location(s).\n```\n  {\n    \"DisplayName\": \"Your personal contract\",\n    \"SetParaph\": true,\n    \"Signers\": {\n      \"SomeSignerId\": {\n        \"FormSets\": [ \"FirstFormset\" ]\n      }\n    },\n    \"FormSets\": {\n      \"FirstFormset\": {\n        \"SignatureOne\": {\n          \"Type\": \"Signature\",\n          \"Location\": {\n            \"Search\": \"{{Signer1}}\",\n            \"Width\": 140,\n            \"Height\": 70\n          }\n        }\n      }\n    }\n}\n```\n"
    },
    "File": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        }
      }
    },
    "ErrorModel": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string",
          "description": "Message describing the error in the request."
        }
      }
    }
  },
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ]
}