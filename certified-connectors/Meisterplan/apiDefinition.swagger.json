{
  "swagger": "2.0",
  "info": {
    "description": "Meisterplan is a portfolio-level resource management tool that helps portfolio and resource managers manage people across teams and initiatives whether your work is traditional, agile or hybrid. Use it to make confident portfolio decisions and interactively surface and solve resource conflicts.",
    "version": "1.3.0",
    "title": "Meisterplan",
    "termsOfService": "https://meisterplan.com/terms-of-service/",
    "contact": {
      "name": "Meisterplan Support",
      "url": "https://help.meisterplan.com/",
      "email": "support@meisterplan.com"
    },
    "x-logo": {
      "url": "https://static.meisterplan.com/web/images/restingrhino/logo_meisterplan_api_doc.png"
    }
  },
  "host": "meisterplan.com",
  "basePath": "/",
  "tags": [
    {
      "name": "Actual Time Worked",
      "description": "Operations on Actual Time Worked"
    },
    {
      "name": "Allocations",
      "description": "Operations on Allocations"
    },
    {
      "name": "BusinessGoals",
      "description": "Business Goal Definition queries"
    },
    {
      "name": "Calendars",
      "description": "Operations on Calendars"
    },
    {
      "name": "Financials",
      "description": "Operations on Financials"
    },
    {
      "name": "Milestone Dependencies",
      "description": "Operations on Milestones"
    },
    {
      "name": "Milestones",
      "description": "Operations on Milestones"
    },
    {
      "name": "OBS",
      "description": "Operations on OBS types and OBS units. Each OBS or OBS type can have any number of OBS units, for example, the OBS Department could have Marketing and Software Engineering as OBS units."
    },
    {
      "name": "Portfolios",
      "description": "Operations on Portfolios"
    },
    {
      "name": "Priorities",
      "description": "Operations on Priorities"
    },
    {
      "name": "Programs",
      "description": "Operations on Programs"
    },
    {
      "name": "Projects",
      "description": "Operations on Projects"
    },
    {
      "name": "Resources",
      "description": "Operations on Resources"
    },
    {
      "name": "Role Capacities",
      "description": "Operations on Role Capacity. A role's own capacity is inherent to the role, and does not contain the capacities of resources assigned to this role."
    },
    {
      "name": "Roles",
      "description": "Operations on Roles"
    },
    {
      "name": "Scenarios",
      "description": "Operations on Scenarios"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/businessGoals": {
      "get": {
        "tags": [
          "BusinessGoals"
        ],
        "summary": "Business goals",
        "description": "Returns all business goals",
        "operationId": "GetAllBusinessGoals",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfBusinessGoalDefinitionResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/calendars": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Get a List of Calendars",
        "description": "Get a list of all calendars in your Meisterplan system.",
        "operationId": "GetAllCalendars",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfCalendarResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "Create Calendars",
        "description": "Create a calendar with the given data. Will return the newly created calendar.",
        "operationId": "CreateCalendar",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Calendar represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CalendarResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/calendars/defaultCalendar": {
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "Set Default Calendar",
        "description": "Sets an existing calendar as the default calendar in your Meisterplan system.",
        "operationId": "SetDefaultCalendar",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "The id of an existing calendar.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetDefaultCalendarRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/calendars/{calendarId}": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Get Calendars by ID",
        "description": "Get one calendar in your Meisterplan system. Use the special ID defaultCalendar to get the default calendar.",
        "operationId": "GetCalendarById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "CalendarId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CalendarResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Calendars"
        ],
        "summary": "Delete Calendars",
        "description": "Deletes a calendar in your Meisterplan system. Please note that the default calendar or a parent of the default calendar cannot be deleted.",
        "operationId": "DeleteCalendarById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "CalendarId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Calendars"
        ],
        "summary": "Update Calendars",
        "description": "Perform an update on a calendar specified by the given ID.\n\nPaths\n\nPaths delimited by / (e.g. in calendars and OBS unit paths) may define path segments which contain / by escaping with //. E.g. the path Europe/Berlin//Amsterdam will be interpreted as ['Europe', 'Berlin/Amsterdam']. An uneven amount of slashes will be interpreted as the following segment starting with one or more slashes.",
        "operationId": "UpdateCalendar",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "CalendarId",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Calendar represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarUpdateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CalendarResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/calendars/{calendarId}/exceptions": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Get a List of Calendar Exceptions",
        "description": "Get a list of all exceptions to this calendar in your Meisterplan system.",
        "operationId": "GetAllCalendarExceptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "CalendarId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "endDate",
            "required": false,
            "type": "string",
            "format": "date",
            "x-ms-summary": "EndDate"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "startDate",
            "required": false,
            "type": "string",
            "format": "date",
            "x-ms-summary": "StartDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfCalendarExceptionResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "Update Calendar Exceptions",
        "description": "Use this request to replace all calendar exceptions for a certain time period. This time period can be defined using the root start and finish attributes of the request. Specify the new list of calendar exceptions with the exceptions property. Note that all exceptions in the specified period will be overwritten by the exceptions listed in the exceptions property.\n\n-   If null is used for the start period and end period, all exceptions     of the calendar are overwritten -   If only the start date of the period is defined, all exceptions     starting from this time will be overwritten -   If only the end date of the period is defined, all exceptions up to     that point will be overwritten -   If an exception is removed and a parent calendar has an exception at     that date, this calendar inherits the exception from the parent     calendar.",
        "operationId": "CreateCalendarExceptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "CalendarId",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Calendar exceptions of a given time period represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCalendarExceptionsRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/obsTypes": {
      "get": {
        "tags": [
          "OBS"
        ],
        "summary": "Get all OBS Types",
        "description": "This endpoint is for OBS types only. To get OBS units, use /obsTypes/<obs-type-id>/obsUnits",
        "operationId": "GetAllObsTypes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfObsTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "OBS"
        ],
        "summary": "Create OBS Type",
        "description": "Creates an OBS type with the given data. Will return the newly created OBS type.",
        "operationId": "CreateObsType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "OBS Type represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObsTypeCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ObsTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/obsTypes/{obsTypeId}": {
      "get": {
        "tags": [
          "OBS"
        ],
        "summary": "Get an OBS Type by ID",
        "description": "This endpoint is for OBS types only. To get OBS units, use /obsTypes/<obs-type-id>/obsUnits",
        "operationId": "GetObsTypeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "obsTypeId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ObsTypeId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObsTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "OBS"
        ],
        "summary": "Delete an OBS Type by ID",
        "description": "Delete the OBS type specified by the given ID. If the OBS type with the given ID does not exist, the request will fail.",
        "operationId": "DeleteObsType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "obsTypeId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ObsTypeId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "OBS"
        ],
        "summary": "Update OBS Types",
        "description": "Performs an update on an OBS type specified by the given ID.",
        "operationId": "UpdateObsType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "obsTypeId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ObsTypeId",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "OBS Type represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObsTypeUpdateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObsTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/obsTypes/{obsTypeId}/obsUnits": {
      "get": {
        "tags": [
          "OBS"
        ],
        "summary": "Get all OBS Units",
        "description": "This endpoint returns a list of all OBS units for the given OBS type.",
        "operationId": "GetAllObsUnits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "obsTypeId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ObsTypeId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfObsUnitResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "OBS"
        ],
        "summary": "Create OBS Unit",
        "description": "Creates an OBS unit with the given data. Will return the newly created OBS unit.",
        "operationId": "CreateObsUnit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "obsTypeId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ObsTypeId",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "obsUnitCreateRequest",
            "description": "OBS Unit represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObsUnitCreateRequest"
            },
            "x-ms-summary": "ObsUnitCreateRequest"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ObsUnitResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/obsTypes/{obsTypeId}/obsUnits/{obsUnitId}": {
      "get": {
        "tags": [
          "OBS"
        ],
        "summary": "Get an OBS Unit",
        "description": "This endpoint returns a single OBS unit.",
        "operationId": "GetObsUnit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "obsTypeId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ObsTypeId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "obsUnitId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ObsUnitId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObsUnitResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "OBS"
        ],
        "summary": "Delete an OBS Unit by ID",
        "description": "Deletes the OBS unit specified by the given ID. If the OBS unit with the given ID does not exist, the request will fail.",
        "operationId": "DeleteObsUnit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "obsTypeId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ObsTypeId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "obsUnitId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ObsUnitId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "OBS"
        ],
        "summary": "Update an OBS Unit",
        "description": "Updates a single OBS unit's name or moves it to a different parent.",
        "operationId": "UpdateObsUnit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "obsTypeId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ObsTypeId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "obsUnitId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ObsUnitId",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "obsUnitUpdateRequest",
            "description": "OBS Unit represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObsUnitUpdateRequest"
            },
            "x-ms-summary": "ObsUnitUpdateRequest"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObsUnitResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/portfolios": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get a List of Portfolios",
        "description": "Returns a list of all available portfolios. If you do not have the right to view any portfolio, Returns a list of all available portfolios that you have the right to access via your API token. If you do not have the right to view any portfolio, an empty list will be returned.",
        "operationId": "GetAllPortfolios",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfPortfolioResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/resources": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get a List of Resources",
        "description": "This endpoint is paginated. It returns a list of resources up to the specified PAGESIZE",
        "operationId": "GetAllResources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Stringified JSON object with a subset of properties of the expected object. Selects all objects that exactly match the specified properties. Note: take care to URL encode your parameter. { \"resourceKey\": string, \"lastName\": string, \"externalId\": string, \"emailAddress\": string, \"postalAddress\": { \"city\": string, \"country\": string, \"postalCode\": string } }",
            "required": false,
            "type": "string",
            "x-example": "{ \"externalId\": \"myCustomID\" }",
            "x-ms-summary": "Filter"
          },
          {
            "name": "pageAfter",
            "in": "query",
            "description": "The cursor after which to retrieve results. The cursor can be taken from a preceding request.",
            "required": false,
            "type": "string",
            "x-example": "opaque cursor",
            "x-ms-summary": "PageAfter"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Can be between 1 and 500",
            "required": false,
            "type": "integer",
            "default": 100,
            "maximum": 500,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 200,
            "x-ms-summary": "PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Create Resources",
        "description": "Creates a resource by the given fields and returns the newly created.\n\nPaths\n\nPaths delimited by / (e.g. in calendars and OBS unit paths) may define path segments which contain / by escaping with //. E.g. the path Europe/Berlin//Amsterdam will be interpreted as ['Europe', 'Berlin/Amsterdam']. An uneven amount of slashes will be interpreted as the following segment starting with one or more slashes.",
        "operationId": "CreateResource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Resource represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/resources/{resourceId}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get Resources by ID",
        "description": "Returns the individual resource specified by the given ID.",
        "operationId": "GetResourceById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ResourceId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Resources"
        ],
        "summary": "Delete Resources",
        "description": "Delete the resource specified by the given ID. If the resource with the given ID does not exist, the request fails.",
        "operationId": "DeleteResource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ResourceId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Resources"
        ],
        "summary": "Update Resources",
        "description": "Perform an update on a resource specified by the given ID.\n\nPaths\n\nPaths delimited by / (e.g. in calendars and OBS unit paths) may define path segments which contain / by escaping with //. E.g. the path Europe/Berlin//Amsterdam will be interpreted as ['Europe', 'Berlin/Amsterdam']. An uneven amount of slashes will be interpreted as the following segment starting with one or more slashes.",
        "operationId": "UpdateResource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Resource represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceUpdateRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ResourceId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/resources/{resourceId}/calendarDeviations": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get Deviations from the Calendar",
        "description": "Reads deviations to the resource's calendar working hours. If no start and finish values are passed, all deviations of the requested resource are returned. If only start is passed, all deviations starting from this time are returned. If only finish is passed, all deviations up to that point are returned.",
        "operationId": "GetCalendarDeviations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "finish",
            "in": "query",
            "description": "Finish date for filtering time period",
            "required": false,
            "type": "string",
            "format": "date",
            "x-example": "2019-12-31",
            "x-ms-summary": "Finish"
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ResourceId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start date for filtering time period",
            "required": false,
            "type": "string",
            "format": "date",
            "x-example": "2019-01-31",
            "x-ms-summary": "Start"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfCalendarDeviationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Update Deviations from the Calendar",
        "description": "Use this request to replace all calendar deviations of a resource for a certain time period. This time period can be defined using the root start and finish attributes of the request. Specify the new list of calendar deviations with the deviations property. Note that all deviations in the specified period will be overwritten by the deviations listed in the deviations property.\n\n-   If null is used for the start period and end period, all calendar     deviations of the resource are overwritten -   If only the start date of the period is defined, all deviations     starting from this time will be overwritten -   If only the end date of the period is defined, all deviations up to     that point will be overwritten -   If null is used for the start and/or end date of a calendar     deviation, the deviation is assumed to last from or until the root     start or finish date specified above.\n\nAll deviations are flattened into a sequential structure. Cases of overlapping deviations will be resolved by giving precedence to deviations occurring later in the array.",
        "operationId": "UpdateCalendarDeviations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Calendar deviations of a given time period represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarDeviationUpdateRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ResourceId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfCalendarDeviationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get a List of Roles",
        "description": "Returns a list of all available roles. If no roles are available, an empty list is returned.",
        "operationId": "GetAllRoles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Stringified JSON object with a subset of properties of the expected object. Selects all objects that exactly match the specified properties. Note: take care to URL encode your parameter. { \"externalId\": string, \"name\": string }",
            "required": false,
            "type": "string",
            "x-example": "{ \"externalId\": \"myCustomID\" }",
            "x-ms-summary": "Filter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfRoleResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create Roles",
        "description": "Returns the created role on success.\n\nPaths\n\nPaths delimited by / (e.g. in calendars and OBS unit paths) may define path segments which contain / by escaping with //. E.g. the path Europe/Berlin//Amsterdam will be interpreted as ['Europe', 'Berlin/Amsterdam']. An uneven amount of slashes will be interpreted as the following segment starting with one or more slashes.",
        "operationId": "CreateRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Role represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RoleResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/roles/{roleId}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get Roles by ID",
        "description": "Returns the individual role specified by the given ID.",
        "operationId": "GetRoleById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "RoleId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete Roles",
        "description": "Delete the role specified by the given ID. If the role with the given ID does not exist, the request will fail.",
        "operationId": "DeleteRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "RoleId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Roles"
        ],
        "summary": "Update Roles",
        "description": "Perform an update on a role specified by the given ID. To do a partial update, only the updated fields need to be sent. To delete a field value, the field must be sent with an explicit null value. Fields with a default value will be reset to their default when set to null.\n\nPaths\n\nPaths delimited by / (e.g. in calendars and OBS unit paths) may define path segments which contain / by escaping with //. E.g. the path Europe/Berlin//Amsterdam will be interpreted as ['Europe', 'Berlin/Amsterdam']. An uneven amount of slashes will be interpreted as the following segment starting with one or more slashes.",
        "operationId": "UpdateRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Role represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleUpdateRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "RoleId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get a List of Scenarios",
        "description": "It returns a list of scenarios",
        "operationId": "GetAllScenarios",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfScenarioResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get Scenarios by ID",
        "description": "Returns the individual scenario specified by the given ID. HINT: You can use \"planOfRecord\" as the ID for the plan of record scenario.",
        "operationId": "GetScenarioById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScenarioResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/milestoneDependencies": {
      "get": {
        "tags": [
          "Milestone Dependencies"
        ],
        "summary": "Get a List of Milestone Dependencies",
        "description": "Returns a list of milestones dependencies of a scenario",
        "operationId": "GetAllMilestoneDependencies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageAfter",
            "in": "query",
            "description": "The cursor after which to retrieve results. The cursor can be taken from a preceding request.",
            "required": false,
            "type": "string",
            "x-example": "opaque cursor",
            "x-ms-summary": "PageAfter"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Can be between 1 and 500",
            "required": false,
            "type": "integer",
            "default": 100,
            "maximum": 500,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 200,
            "x-ms-summary": "PageSize"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfMilestoneDependencyResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Milestone Dependencies"
        ],
        "summary": "Create a Milestone Dependency",
        "description": "Returns the id of the newly created milestone dependency",
        "operationId": "CreateMilestoneDependency",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Milestone dependency represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MilestoneDependencyCreateRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/MilestoneDependencyCreateResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/milestoneDependencies/{milestoneDependencyId}": {
      "delete": {
        "tags": [
          "Milestone Dependencies"
        ],
        "summary": "Delete Milestone Dependencies",
        "description": "Deletes a milestone dependency in a given scenario.",
        "operationId": "DeleteMilestoneDependency",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "milestoneDependencyId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "ID",
            "x-ms-summary": "MilestoneDependencyId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/priorities": {
      "post": {
        "tags": [
          "Priorities"
        ],
        "summary": "Update Priorities",
        "description": "This endpoint updates the priorities of projects and programs. Please consider that updating the priority of a project that is within a program results in unassigning the project from its program.To update the priorities of your projects and programs, list their IDs in the desired order of priority for each rank category. If there are projects or programs in Meisterplan for a particular rank category that are not mentioned in your list, you can use the position parameter to define whether your listed projects and programs will be ranked above or below those in Meisterplan.",
        "operationId": "UpdatePriorities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "prioritiesUpdateRequest",
            "description": "Priorities represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrioritiesUpdateRequest"
            },
            "x-ms-summary": "PrioritiesUpdateRequest"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/programs": {
      "get": {
        "tags": [
          "Programs"
        ],
        "summary": "Get a List of Programs",
        "description": "Returns a list of programs in the given scenario",
        "operationId": "GetAllPrograms",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfProgramResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Programs"
        ],
        "summary": "Create Programs",
        "description": "Creates a program with the given fields and returns the newly created program.",
        "operationId": "CreateProgram",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Program represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProgramCreateRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProgramResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/programs/{programId}": {
      "delete": {
        "tags": [
          "Programs"
        ],
        "summary": "Delete Programs",
        "description": "Deletes a program specified by the given ID.",
        "operationId": "DeleteProgram",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProgramId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Programs"
        ],
        "summary": "Update Programs",
        "description": "Perform an update on a program specified by the given ID.",
        "operationId": "UpdateProgram",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Program represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProgramUpdateRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "programId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProgramId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProgramResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a List of Projects",
        "description": "This endpoint is paginated. It returns a list of projects up to the specified PAGESIZE",
        "operationId": "GetAllProjects",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Stringified JSON object with a subset of properties of the expected object. Selects all objects that exactly match the specified properties. Projects are searchable by projectKey, name, externalId, programId, portfolioId, and custom fields of the String and Integer type. Integers must be encoded as JSON string. The filter programId = null will yield all projects that are not associated with a program. Furthermore, the filter portfolioId = null will yield all projects. Note: take care to URL encode your parameter. { \"projectKey\": string, \"name\": string, \"externalId\": string, \"programId\": string, \"portfolioId\": string, \"customFields\": { \"cust_field_1\": string, \"cust_field_2\": string, .... } }",
            "required": false,
            "type": "string",
            "x-example": "{\"customFields\": {\"cust_prj_number\": \"PR001\"}}",
            "x-ms-summary": "Filter"
          },
          {
            "name": "pageAfter",
            "in": "query",
            "description": "The cursor after which to retrieve results. The cursor can be taken from a preceding request.",
            "required": false,
            "type": "string",
            "x-example": "opaque cursor",
            "x-ms-summary": "PageAfter"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Can be between 1 and 500",
            "required": false,
            "type": "integer",
            "default": 100,
            "maximum": 500,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 200,
            "x-ms-summary": "PageSize"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfAllProjectsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create Projects",
        "description": "Creates a project with the given fields and returns the newly created project.\n\nNotes:\n\nPaths\n\nPaths delimited by / (e.g. in calendars and OBS unit paths) may define path segments which contain / by escaping with //. E.g. the path Europe/Berlin//Amsterdam will be interpreted as ['Europe', 'Berlin/Amsterdam']. An uneven amount of slashes will be interpreted as the following segment starting with one or more slashes.\n\nCustom Fields\n\nCustom fields are defined AS PROPERTIES OF the customFields object. The property name of a custom field corresponds to its column name. A custom field is an object containing a value. The value can be of type string, number or boolean depending on the type of custom field. You can view all available custom fields with their respective column names in your Meisterplan system.\n\nFor custom fields of type string, text, lookup or url, the value is of JSON type string. For custom fields of type integer, decimal or currency, the value is of JSON type float. For custom fields of type boolean, the value is of JSON type boolean.\n\nExample:\n\n    \"customFields\":{       \"cust_stage_gate\":{         \"value\": \"New\"       }       ...     }\n\nPriorities\n\nProjects may be assigned to a program, or they can be given a rank category. It is not possible to assign a project to a rank category and a program at the same time. Assigning an existing project to a rank category will unassign it from any program it may be assigned to. Assigning an existing project to a program may mean that its rank category changes, if the target program is in a different rank category.\n\nIt is currently not possible to prioritize projects within a program.",
        "operationId": "CreateProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Project represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectCreateRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Projects by ID",
        "description": "Returns the individual project specified by the given ID.",
        "operationId": "GetProjectById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete Projects",
        "description": "Deletes a project in a given scenario.",
        "operationId": "DeleteProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Projects"
        ],
        "summary": "Update Projects",
        "description": "Perform an update on a project specified by the given ID.\n\nPaths\n\nPaths delimited by / (e.g. in calendars and OBS unit paths) may define path segments which contain / by escaping with //. E.g. the path Europe/Berlin//Amsterdam will be interpreted as ['Europe', 'Berlin/Amsterdam']. An uneven amount of slashes will be interpreted as the following segment starting with one or more slashes.\n\nCustom Fields\n\nCustom fields are defined AS PROPERTIES OF the customFields object. The property name of a custom field corresponds to its column name. A custom field is an object containing a value. The value can be of type string, number or boolean depending on the type of custom field. You can view all available custom fields with their respective column names in your Meisterplan system.\n\nFor custom fields of type string, text, lookup or url, the value is of JSON type string. For custom fields of type integer, decimal or currency, the value is of JSON type float. For custom fields of type boolean, the value is of JSON type boolean.\n\nExample:\n\n    \"customFields\":{       \"cust_stage_gate\":{         \"value\": \"New\"       }       ...     }\n\nA note on Project Finish\n\nPlease consider that an update of the finish date of a project deletes all milestones and allocation segments that exist after the new project finish date.",
        "operationId": "UpdateProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Project represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectUpdateRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/actuals": {
      "get": {
        "tags": [
          "Actual Time Worked"
        ],
        "summary": "Get a List of Actual Time Worked",
        "description": "Returns a list of actual time worked for all projects of a specific scenario. Please note that actual time worked data itself is independent from its scenario.",
        "operationId": "GetAllActualTimeWorked",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Stringified JSON object with an entity id and that entity's type. The type can be \"RESOURCE\" or \"ROLE\". Selects all objects that exactly match the specified properties. Note: take care to URL encode your parameter. { \"id\": string, \"type\": string }",
            "required": false,
            "type": "string",
            "x-example": "{ \"id\": \"UUID\", \"type\": \"RESOURCE\" }",
            "x-ms-summary": "Filter"
          },
          {
            "name": "pageAfter",
            "in": "query",
            "description": "The cursor after which to retrieve results. The cursor can be taken from a preceding request.",
            "required": false,
            "type": "string",
            "x-example": "opaque cursor",
            "x-ms-summary": "PageAfter"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Can be between 1 and 100",
            "required": false,
            "type": "integer",
            "default": 100,
            "maximum": 100,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 100,
            "x-ms-summary": "PageSize"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseOfActualTimeWorkedResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Actual Time Worked"
        ],
        "summary": "Create or Update Actual Time Worked",
        "description": "This endpoint lets you create new Actual Time Worked and update the existing Actual Time Worked of a project by an entity (resource or role). We will not update Actual Time Worked for booking dates that are not specified in the request for a given project and entity. With the mode property you can control if an existing Actual Time Worked value is replaced by the new value or if its value is added to the booking in the request.Please note that actual time worked data itself is independent from its scenario. It will be the same across all scenarios for a given project.",
        "operationId": "CreateOrUpdateActualTimeWorked",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Actual Time Worked represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActualTimeWorkedCreateOrUpdateRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ActualTimeWorkedResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Actual Time Worked"
        ],
        "summary": "Delete Actual Time Worked",
        "description": "Deletes all actual time worked of a given project.",
        "operationId": "DeleteAllActualTimeWorked",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/allocations": {
      "get": {
        "tags": [
          "Allocations"
        ],
        "summary": "Get a List of Allocations",
        "description": "Returns a list of allocations of a project",
        "operationId": "GetAllAllocations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfAllocationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Allocations"
        ],
        "summary": "Create or Update Allocations",
        "description": "This endpoint lets you create new allocations and update existing allocations of a project. Changes will only be made for the specified date ranges as well as the specified resources and roles.",
        "operationId": "CreateOrUpdateAllocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "allocationCreateOrUpdateRequest",
            "description": "Allocation represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Allocation"
            },
            "x-ms-summary": "AllocationCreateOrUpdateRequest"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AllocationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Allocations"
        ],
        "summary": "Replace Allocations",
        "description": "This endpoint lets you replace all allocations of a project. The result will be the same as if all existing allocations are deleted and the passed allocations are created again.",
        "operationId": "ReplaceAllocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "allocationReplaceRequest",
            "description": "Allocation represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AllocationReplaceRequest"
            },
            "x-ms-summary": "AllocationReplaceRequest"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/allocations/{allocationId}": {
      "get": {
        "tags": [
          "Allocations"
        ],
        "summary": "Get Allocations by ID",
        "description": "Returns the individual allocation specified by the given ID.",
        "operationId": "GetAllocationId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "allocationId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "AllocationId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AllocationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Allocations"
        ],
        "summary": "Delete Allocations",
        "description": "Deletes an allocation in a given project of a scenario.",
        "operationId": "DeleteAllocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "allocationId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "AllocationId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Allocations"
        ],
        "summary": "Update Allocations",
        "description": "This endpoint lets you update existing allocations of a project. Changes will only be made for the specified date ranges as well as the specified resources and roles.",
        "operationId": "UpdateAllocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "allocationId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "AllocationId",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "allocationUpdateRequest",
            "description": "Allocation represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AllocationUpdateRequest"
            },
            "x-ms-summary": "AllocationUpdateRequest"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AllocationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/financials": {
      "get": {
        "tags": [
          "Financials"
        ],
        "summary": "Get a List of Financials",
        "description": "Returns a list of financials of a project",
        "operationId": "GetAllFinancials",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfFinancialsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Financials"
        ],
        "summary": "Create Financials",
        "description": "Returns the newly created financial event.",
        "operationId": "CreateFinancials",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Financial event represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialsCreateRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FinancialsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Financials"
        ],
        "summary": "Replace Financials",
        "description": "Replaces financial events of a given project within a scenario.",
        "operationId": "ReplaceFinancials",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialsReplaceRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/financials/{financialsId}": {
      "get": {
        "tags": [
          "Financials"
        ],
        "summary": "Get Financials by ID",
        "description": "Returns the individual financial event specified by the given ID.",
        "operationId": "GetFinancialsById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "financialsId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "FinancialsId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Financials"
        ],
        "summary": "Delete Financials",
        "description": "Deletes a financial event in a given project of a scenario.",
        "operationId": "DeleteFinancials",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "financialsId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "FinancialsId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Financials"
        ],
        "summary": "Update Financials",
        "description": "Updates a financial event by ID in a given project of a scenario.",
        "operationId": "UpdateFinancials",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "financialsId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "FinancialsId",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Financial event represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialsUpdateRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/milestones": {
      "get": {
        "tags": [
          "Milestones"
        ],
        "summary": "Get a List of Milestones",
        "description": "Returns a list of milestones of a project",
        "operationId": "GetAllMilestones",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfMilestoneResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Milestones"
        ],
        "summary": "Create Milestones",
        "description": "Returns the newly created milestone",
        "operationId": "CreateMilestone",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Milestone represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MilestoneCreateRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/MilestoneResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Milestones"
        ],
        "summary": "Replace Milestones",
        "description": "Replaces milestones of a given project within a scenario.",
        "operationId": "ReplaceMilestones",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Milestone represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceMilestonesRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/milestones/{milestoneId}": {
      "get": {
        "tags": [
          "Milestones"
        ],
        "summary": "Get Milestones by ID",
        "description": "Returns the individual milestone specified by the given ID.",
        "operationId": "GetMilestoneById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "milestoneId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "MilestoneId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MilestoneResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Milestones"
        ],
        "summary": "Delete Milestones",
        "description": "Deletes a milestone in a given project of a scenario.",
        "operationId": "DeleteMilestone",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "milestoneId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "MilestoneId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Milestones"
        ],
        "summary": "Update Milestones",
        "description": "Perform an update on a milestone specified by the given ID.",
        "operationId": "UpdateMilestone",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "milestoneId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "MilestoneId",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Milestone represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MilestoneUpdateRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ProjectId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MilestoneResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/roleCapacities": {
      "get": {
        "tags": [
          "Role Capacities"
        ],
        "summary": "Get the capacity segments of all roles",
        "description": "Returns the capacity segments for all roles. If no capacity segments exist for a given role, its role capacities will be empty.",
        "operationId": "GetAllRoleCapacities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfRoleWithRoleCapacityResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/scenarios/{scenarioId}/roleCapacities/{roleId}": {
      "get": {
        "tags": [
          "Role Capacities"
        ],
        "summary": "Get the capacity segments of a role",
        "description": "Returns the capacity segments for the role specified by the given ID. Returns an empty list if no capacity segments exist.",
        "operationId": "GetRoleCapacities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "RoleId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfRoleCapacityResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Role Capacities"
        ],
        "summary": "Update the capacity segments of a role",
        "description": "Updates the capacity segments for the role specified by the given ID. To erase all capacity segments, send a segment without start or finish and 0 capacity",
        "operationId": "UpdateRoleCapacities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Role Capacity payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleCapacityUpdateRequest"
            },
            "x-ms-summary": "Payload"
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "RoleId",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "scenarioId",
            "in": "path",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-example": "UUID",
            "x-ms-summary": "ScenarioId",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseOfRoleCapacityResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "API-Token": []
          },
          {
            "OAuth": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "API-Token": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "OAuth": {
      "type": "oauth2",
      "authorizationUrl": "https://oauth.meisterplan.com/oauth/authorize",
      "tokenUrl": "https://oauth.meisterplan.com/oauth/token",
      "flow": "accessCode"
    }
  },
  "definitions": {
    "ActualTimeWorkedCreateOrUpdateRequest": {
      "type": "object",
      "properties": {
        "bookedEntity": {
          "$ref": "#/definitions/BookedEntity"
        },
        "bookings": {
          "type": "array",
          "example": [
            {
              "bookingDate": "2019-01-31",
              "hours": 5.5
            }
          ],
          "items": {
            "$ref": "#/definitions/Bookings"
          },
          "x-ms-summary": "Bookings"
        },
        "mode": {
          "type": "string",
          "example": "REPLACE",
          "enum": [
            "ADD",
            "REPLACE"
          ],
          "x-ms-summary": "Mode"
        }
      },
      "title": "ActualTimeWorkedCreateOrUpdateRequest"
    },
    "ActualTimeWorkedResponse": {
      "type": "object",
      "properties": {
        "bookedEntity": {
          "$ref": "#/definitions/ActualsEntityLinkResponse"
        },
        "bookings": {
          "type": "array",
          "description": "Booking date and hours of this actual time worked entry",
          "items": {
            "$ref": "#/definitions/ActualsBookingResponse"
          },
          "x-ms-summary": "Bookings"
        }
      },
      "title": "ActualTimeWorkedResponse"
    },
    "ActualsBookingResponse": {
      "type": "object",
      "properties": {
        "bookingDate": {
          "type": "string",
          "format": "date",
          "example": "2019-01-31",
          "description": "Booking date of this actual time worked entry",
          "x-ms-summary": "Booking Date"
        },
        "hours": {
          "type": "number",
          "format": "double",
          "example": 5.5,
          "description": "Actual time worked in hours",
          "x-ms-summary": "Hours"
        }
      },
      "title": "ActualsBookingResponse"
    },
    "ActualsEntityLinkResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "description": "The id of the entity to which this actual time worked entry is linked",
          "x-ms-summary": "Id"
        },
        "type": {
          "type": "string",
          "description": "The entity type for this actual time worked entry",
          "enum": [
            "RESOURCE",
            "ROLE"
          ],
          "x-ms-summary": "Type"
        }
      },
      "title": "ActualsEntityLinkResponse"
    },
    "AllProjectsPriorityResponse": {
      "type": "object",
      "properties": {
        "rank": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Rank depends on the date range and portfolio filter.",
          "x-ms-summary": "Rank"
        },
        "rankCategory": {
          "type": "string",
          "example": "REGULAR",
          "enum": [
            "ABOVE_MUST_HAVE",
            "BELOW_CUT_OFF",
            "REGULAR"
          ],
          "x-ms-summary": "Rank Category"
        }
      },
      "title": "AllProjectsPriorityResponse"
    },
    "AllProjectsResponse": {
      "type": "object",
      "properties": {
        "approvedBudget": {
          "type": "number",
          "format": "double",
          "example": 10400.51,
          "x-ms-summary": "Approved Budget"
        },
        "approvedTotalEffort": {
          "$ref": "#/definitions/ApprovedTotalEffortResponse"
        },
        "businessGoal": {
          "$ref": "#/definitions/BusinessGoalResponse"
        },
        "costType": {
          "type": "string",
          "example": "CAPEX",
          "description": "default: see Meisterplan documentation.",
          "enum": [
            "CAPEX",
            "OPEX"
          ]
        },
        "customFields": {
          "type": "object",
          "example": {
            "cust_stage_gate": {
              "value": "Approved"
            },
            "cust_risk": {
              "value": "Medium"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/CustomFieldResponse"
          }
        },
        "externalId": {
          "type": "string",
          "example": "myCustomID"
        },
        "finish": {
          "type": "string",
          "example": "2019-01-31",
          "description": "format: YYYY-MM-DD"
        },
        "id": {
          "type": "string",
          "example": "UUID"
        },
        "manager": {
          "$ref": "#/definitions/ProjectManagerResponse"
        },
        "name": {
          "type": "string",
          "example": "Meisterplan API v1.1"
        },
        "notes": {
          "type": "string"
        },
        "obsUnits": {
          "type": "object",
          "example": {
            "Department": {
              "id": "UUID",
              "path": "Services/Consulting/IT",
              "displayName": "Services > Consulting > IT"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceResponse"
          }
        },
        "priority": {
          "$ref": "#/definitions/AllProjectsPriorityResponse"
        },
        "program": {
          "$ref": "#/definitions/ProgramLinkResponse"
        },
        "projectKey": {
          "type": "string",
          "example": "ID-15"
        },
        "start": {
          "type": "string",
          "example": "2019-01-31",
          "description": "format: YYYY-MM-DD"
        },
        "status": {
          "$ref": "#/definitions/StatusFieldResponse"
        }
      },
      "title": "AllProjectsResponse"
    },
    "AllocatedEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "description": "The id of the entity to which this allocation is linked",
          "x-ms-summary": "Id"
        },
        "projectRole": {
          "type": "string",
          "example": "UUID",
          "description": "The role id to which this allocation is linked. This field is only valid in combination with the type \"RESOURCE\".",
          "x-ms-summary": "Project Role"
        },
        "type": {
          "type": "string",
          "example": "RESOURCE",
          "enum": [
            "RESOURCE",
            "ROLE"
          ],
          "x-ms-summary": "Type"
        }
      },
      "title": "AllocatedEntity"
    },
    "AllocatedEntityResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "description": "The id of the entity to which this allocation is linked",
          "x-ms-summary": "Id"
        },
        "projectRole": {
          "type": "string",
          "example": "UUID",
          "description": "Will only be set if type equals RESOURCE",
          "x-ms-summary": "Project Role"
        },
        "type": {
          "type": "string",
          "description": "The entity type for this allocation",
          "enum": [
            "RESOURCE",
            "ROLE"
          ],
          "x-ms-summary": "Type"
        }
      },
      "title": "AllocatedEntityResponse"
    },
    "Allocation": {
      "type": "object",
      "required": [
        "allocatedEntity"
      ],
      "properties": {
        "allocatedEntity": {
          "$ref": "#/definitions/AllocatedEntity"
        },
        "segments": {
          "type": "array",
          "example": [
            {
              "start": "2019-01-31",
              "finish": "2019-12-31",
              "fte": 0.5
            }
          ],
          "items": {
            "$ref": "#/definitions/AllocationSegment"
          },
          "x-ms-summary": "Segments"
        }
      },
      "title": "Allocation"
    },
    "AllocationReplaceRequest": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Allocation"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "AllocationReplaceRequest"
    },
    "AllocationResponse": {
      "type": "object",
      "properties": {
        "allocatedEntity": {
          "$ref": "#/definitions/AllocatedEntityResponse"
        },
        "id": {
          "type": "string",
          "example": "UUID_UUID",
          "description": "This allocation's ID",
          "x-ms-summary": "Id"
        },
        "segments": {
          "type": "array",
          "description": "The allocation's time segments",
          "items": {
            "$ref": "#/definitions/AllocationSegmentResponse"
          },
          "x-ms-summary": "Segments"
        }
      },
      "title": "AllocationResponse"
    },
    "AllocationSegment": {
      "type": "object",
      "properties": {
        "days": {
          "type": "number",
          "format": "double",
          "description": "The request accepts either FTE, hours or days.",
          "x-ms-summary": "Days"
        },
        "finish": {
          "type": "string",
          "format": "date",
          "x-ms-summary": "Finish"
        },
        "fte": {
          "type": "number",
          "format": "double",
          "description": "The request accepts either FTE, hours or days.",
          "x-ms-summary": "Fte"
        },
        "hours": {
          "type": "number",
          "format": "double",
          "description": "The request accepts either FTE, hours or days.",
          "x-ms-summary": "Hours"
        },
        "start": {
          "type": "string",
          "format": "date",
          "x-ms-summary": "Start"
        }
      },
      "title": "AllocationSegment"
    },
    "AllocationSegmentResponse": {
      "type": "object",
      "properties": {
        "finish": {
          "type": "string",
          "format": "date",
          "example": "2019-12-31",
          "description": "End date of this allocation",
          "x-ms-summary": "Finish"
        },
        "hours": {
          "type": "number",
          "format": "double",
          "example": 104.5,
          "description": "Allocation value in hours",
          "x-ms-summary": "Hours"
        },
        "start": {
          "type": "string",
          "format": "date",
          "example": "2019-01-31",
          "description": "Start date of this allocation",
          "x-ms-summary": "Start"
        }
      },
      "title": "AllocationSegmentResponse"
    },
    "AllocationUpdateRequest": {
      "type": "object",
      "properties": {
        "segments": {
          "type": "array",
          "example": [
            {
              "start": "2019-01-31",
              "finish": "2019-12-31",
              "fte": 0.5
            }
          ],
          "items": {
            "$ref": "#/definitions/AllocationSegment"
          },
          "x-ms-summary": "Segments"
        }
      },
      "title": "AllocationUpdateRequest"
    },
    "ApprovedTotalEffort": {
      "type": "object",
      "properties": {
        "days": {
          "type": "string",
          "example": 80.5,
          "description": "The request accepts either hours or days.",
          "x-ms-summary": "Days"
        },
        "hours": {
          "type": "string",
          "example": 25.4,
          "description": "The request accepts either hours or days.",
          "x-ms-summary": "Hours"
        }
      },
      "title": "ApprovedTotalEffort"
    },
    "ApprovedTotalEffortResponse": {
      "type": "object",
      "properties": {
        "hours": {
          "type": "number",
          "format": "double",
          "example": 104.5,
          "x-ms-summary": "Hours"
        }
      },
      "title": "ApprovedTotalEffortResponse"
    },
    "BookedEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "description": "The id of the entity to which this actual time worked entry is linked",
          "x-ms-summary": "Id"
        },
        "type": {
          "type": "string",
          "example": "RESOURCE",
          "enum": [
            "RESOURCE",
            "ROLE"
          ],
          "x-ms-summary": "Type"
        }
      },
      "title": "BookedEntity"
    },
    "Bookings": {
      "type": "object",
      "properties": {
        "bookingDate": {
          "type": "string",
          "format": "date",
          "example": "2019-01-31",
          "description": "Date of this booking",
          "x-ms-summary": "Booking Date"
        },
        "hours": {
          "type": "number",
          "format": "double",
          "example": 5.5,
          "description": "Value in hours",
          "x-ms-summary": "Hours"
        }
      },
      "title": "Bookings"
    },
    "BusinessGoal": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Change the Business",
          "description": "Missing values will be created automatically\n\nIf you import an unknown value, it will be automatically created for you in Meisterplan.",
          "x-ms-summary": "Name"
        }
      },
      "title": "BusinessGoal"
    },
    "BusinessGoalDefinitionResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Business goal name",
          "x-ms-summary": "Name"
        }
      },
      "title": "BusinessGoalDefinitionResponse"
    },
    "BusinessGoalResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Change the Business",
          "x-ms-summary": "Name"
        }
      },
      "title": "BusinessGoalResponse"
    },
    "Calendar": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "description": "default: uses default calendar if path and id are null. If you specify the id to reference a calendar you must omit the path property.",
          "x-ms-summary": "Id"
        },
        "path": {
          "type": "string",
          "example": "Default",
          "description": "default: uses default calendar if path and id are null. format: See endpoint description. If you specify the path to reference a calendar you must omit the id property.",
          "x-ms-summary": "Path"
        }
      },
      "title": "Calendar"
    },
    "CalendarCreateRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "US",
          "x-ms-summary": "Name"
        },
        "parentId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Parent Id"
        },
        "workingHours": {
          "$ref": "#/definitions/WorkingHours"
        }
      },
      "title": "CalendarCreateRequest"
    },
    "CalendarDeviation": {
      "type": "object",
      "required": [
        "relativeCapacity"
      ],
      "properties": {
        "finish": {
          "type": "string",
          "format": "date",
          "example": "2019-12-31",
          "x-ms-summary": "Finish"
        },
        "relativeCapacity": {
          "type": "number",
          "format": "double",
          "example": 0.5,
          "minimum": 0,
          "exclusiveMinimum": false,
          "x-ms-summary": "Relative Capacity"
        },
        "start": {
          "type": "string",
          "format": "date",
          "example": "2019-01-31",
          "x-ms-summary": "Start"
        }
      },
      "title": "CalendarDeviation"
    },
    "CalendarDeviationResponse": {
      "type": "object",
      "properties": {
        "finish": {
          "type": "string",
          "format": "date",
          "example": "2019-12-31",
          "x-ms-summary": "Finish"
        },
        "relativeCapacity": {
          "type": "number",
          "format": "double",
          "example": 0.5,
          "x-ms-summary": "Relative Capacity"
        },
        "start": {
          "type": "string",
          "format": "date",
          "example": "2019-01-31",
          "x-ms-summary": "Start"
        }
      },
      "title": "CalendarDeviationResponse"
    },
    "CalendarDeviationUpdateRequest": {
      "type": "object",
      "required": [
        "deviations"
      ],
      "properties": {
        "deviations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CalendarDeviation"
          }
        },
        "finish": {
          "type": "string",
          "format": "date",
          "example": "2019-12-31",
          "x-ms-summary": "Finish"
        },
        "start": {
          "type": "string",
          "format": "date",
          "example": "2019-01-31",
          "x-ms-summary": "Start"
        }
      },
      "title": "CalendarDeviationUpdateRequest"
    },
    "CalendarException": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date",
          "example": "2019-01-31",
          "x-ms-summary": "Date"
        },
        "description": {
          "type": "string",
          "example": "New Year's Eve",
          "x-ms-summary": "Description"
        },
        "workingHours": {
          "type": "number",
          "format": "double",
          "example": 4,
          "minimum": 0,
          "maximum": 24,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false,
          "x-ms-summary": "Working Hours"
        }
      },
      "title": "CalendarException"
    },
    "CalendarExceptionResponse": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date",
          "example": "2019-01-31",
          "x-ms-summary": "Date"
        },
        "description": {
          "type": "string",
          "example": "New Year's Eve",
          "x-ms-summary": "Description"
        },
        "sourceCalendarId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Source Calendar Id"
        },
        "workingHours": {
          "type": "number",
          "format": "double",
          "example": 4,
          "x-ms-summary": "Working Hours"
        }
      },
      "title": "CalendarExceptionResponse"
    },
    "CalendarResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        },
        "name": {
          "type": "string",
          "example": "US",
          "x-ms-summary": "Name"
        },
        "parentId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Parent Id"
        },
        "path": {
          "type": "string",
          "example": "US/California",
          "x-ms-summary": "Path"
        },
        "workingHours": {
          "$ref": "#/definitions/WorkingHoursResponse"
        }
      },
      "title": "CalendarResponse"
    },
    "CalendarUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "US",
          "x-ms-summary": "Name"
        },
        "workingHours": {
          "$ref": "#/definitions/WorkingHours"
        }
      },
      "title": "CalendarUpdateRequest"
    },
    "CapacitySegment": {
      "type": "object",
      "properties": {
        "days": {
          "type": "number",
          "format": "double",
          "description": "The request accepts either FTE, hours or days."
        },
        "finish": {
          "type": "string",
          "format": "date",
          "example": "2019-12-31"
        },
        "fte": {
          "type": "number",
          "format": "double",
          "description": "The request accepts either FTE, hours or days."
        },
        "hours": {
          "type": "number",
          "format": "double",
          "description": "The request accepts either FTE, hours or days."
        },
        "start": {
          "type": "string",
          "format": "date",
          "example": "2019-01-31"
        }
      },
      "title": "CapacitySegment"
    },
    "Category": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ROI",
          "description": "The financials category must exist prior to creation. It will not be implicitly created.",
          "x-ms-summary": "Name"
        }
      },
      "title": "Category"
    },
    "CreateCalendarExceptionsRequest": {
      "type": "object",
      "properties": {
        "exceptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CalendarException"
          },
          "x-ms-summary": "Exceptions"
        },
        "finish": {
          "type": "string",
          "format": "date",
          "example": "2019-12-31",
          "x-ms-summary": "Finish"
        },
        "start": {
          "type": "string",
          "format": "date",
          "example": "2019-01-31",
          "x-ms-summary": "Start"
        }
      },
      "title": "CreateCalendarExceptionsRequest"
    },
    "Cursor": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "x-ms-summary": "Cursor"
        }
      },
      "title": "Cursor"
    },
    "CustomFieldResponse": {
      "type": "object",
      "properties": {
        "value": {
          "description": "Value may be of type string, number, boolean, or null depending on the custom field definition and its current value.",
          "x-ms-summary": "Value"
        }
      },
      "title": "CustomFieldResponse"
    },
    "CustomFieldValueType": {
      "type": "object",
      "properties": {
        "value": {}
      },
      "title": "CustomFieldValueType",
      "description": "Missing lookup values created automatically\n\nIf you create or update a project with a custom lookup field, unknown lookup values will be automatically created."
    },
    "EmploymentPeriod": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "example": "2019-01-31",
          "description": "format: YYYY-MM-DD",
          "x-ms-summary": "Start Date"
        },
        "terminationDate": {
          "type": "string",
          "example": "2019-12-31",
          "description": "format: YYYY-MM-DD",
          "x-ms-summary": "Termination Date"
        }
      },
      "title": "EmploymentPeriod"
    },
    "EmploymentPeriodResponse": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "example": "2019-01-31",
          "description": "format: YYYY-MM-DD",
          "x-ms-summary": "Start Date"
        },
        "terminationDate": {
          "type": "string",
          "example": "2019-12-31",
          "description": "format: YYYY-MM-DD",
          "x-ms-summary": "Termination Date"
        }
      },
      "title": "EmploymentPeriodResponse"
    },
    "FinanceCategoryResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ROI",
          "x-ms-summary": "Name"
        }
      },
      "title": "FinanceCategoryResponse"
    },
    "FinancialEvent": {
      "type": "object",
      "required": [
        "amount",
        "timing",
        "type"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "format": "double",
          "example": 2000,
          "minimum": 0,
          "exclusiveMinimum": false,
          "x-ms-summary": "Amount"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "description": {
          "type": "string",
          "example": "New notebook",
          "x-ms-summary": "Description"
        },
        "timing": {
          "$ref": "#/definitions/Timing"
        },
        "type": {
          "type": "string",
          "enum": [
            "BENEFIT",
            "CAPEX",
            "OPEX"
          ],
          "x-ms-summary": "Type"
        }
      },
      "title": "FinancialEvent"
    },
    "FinancialsCreateRequest": {
      "type": "object",
      "required": [
        "amount",
        "timing",
        "type"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "format": "double",
          "example": 2000,
          "minimum": 0,
          "exclusiveMinimum": false,
          "x-ms-summary": "Amount"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "description": {
          "type": "string",
          "example": "New notebook",
          "x-ms-summary": "Description"
        },
        "timing": {
          "$ref": "#/definitions/Timing"
        },
        "type": {
          "type": "string",
          "enum": [
            "BENEFIT",
            "CAPEX",
            "OPEX"
          ],
          "x-ms-summary": "Type"
        }
      },
      "title": "FinancialsCreateRequest"
    },
    "FinancialsReplaceRequest": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FinancialEvent"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "FinancialsReplaceRequest"
    },
    "FinancialsResponse": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "double",
          "example": 12.5,
          "x-ms-summary": "Amount"
        },
        "category": {
          "$ref": "#/definitions/FinanceCategoryResponse"
        },
        "description": {
          "type": "string",
          "x-ms-summary": "Description"
        },
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        },
        "timing": {
          "$ref": "#/definitions/FinancialsTimingResponse"
        },
        "type": {
          "type": "string",
          "example": "CAPEX",
          "enum": [
            "BENEFIT",
            "CAPEX",
            "OPEX"
          ],
          "x-ms-summary": "Type"
        }
      },
      "title": "FinancialsResponse"
    },
    "FinancialsTimingResponse": {
      "type": "object",
      "properties": {
        "dueDate": {
          "type": "string",
          "format": "date",
          "x-ms-summary": "Due Date"
        },
        "milestoneId": {
          "type": "string",
          "example": "UUID",
          "description": "Only present when timing type equals Milestone",
          "x-ms-summary": "Milestone Id"
        },
        "on": {
          "type": "string",
          "example": "Milestone",
          "enum": [
            "Date",
            "Milestone",
            "ProjectFinish",
            "ProjectStart"
          ],
          "x-ms-summary": "On"
        }
      },
      "title": "FinancialsTimingResponse"
    },
    "FinancialsUpdateRequest": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "double",
          "example": 2000,
          "x-ms-summary": "Amount"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "description": {
          "type": "string",
          "example": "New notebook",
          "x-ms-summary": "Description"
        },
        "timing": {
          "$ref": "#/definitions/Timing"
        },
        "type": {
          "type": "string",
          "enum": [
            "BENEFIT",
            "CAPEX",
            "OPEX"
          ],
          "x-ms-summary": "Type"
        }
      },
      "title": "FinancialsUpdateRequest"
    },
    "ListResponseOfAllocationResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllocationResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfAllocationResponse"
    },
    "ListResponseOfBusinessGoalDefinitionResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BusinessGoalDefinitionResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfBusinessGoalDefinitionResponse"
    },
    "ListResponseOfCalendarDeviationResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CalendarDeviationResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfCalendarDeviationResponse"
    },
    "ListResponseOfCalendarExceptionResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CalendarExceptionResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfCalendarExceptionResponse"
    },
    "ListResponseOfCalendarResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CalendarResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfCalendarResponse"
    },
    "ListResponseOfFinancialsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FinancialsResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfFinancialsResponse"
    },
    "ListResponseOfMilestoneResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MilestoneResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfMilestoneResponse"
    },
    "ListResponseOfObsTypeResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObsTypeResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfObsTypeResponse"
    },
    "ListResponseOfObsUnitResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObsUnitResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfObsUnitResponse"
    },
    "ListResponseOfPortfolioResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PortfolioResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfPortfolioResponse"
    },
    "ListResponseOfProgramResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProgramResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfProgramResponse"
    },
    "ListResponseOfRoleCapacityResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleCapacityResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfRoleCapacityResponse"
    },
    "ListResponseOfRoleResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfRoleResponse"
    },
    "ListResponseOfRoleWithRoleCapacityResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleWithRoleCapacityResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfRoleWithRoleCapacityResponse"
    },
    "ListResponseOfScenarioResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScenarioResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ListResponseOfScenarioResponse"
    },
    "Manager": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        }
      },
      "title": "Manager"
    },
    "Milestone": {
      "type": "object",
      "required": [
        "date",
        "name"
      ],
      "properties": {
        "date": {
          "type": "string",
          "example": "2019-01-31",
          "description": "format: YYYY-MM-DD",
          "x-ms-summary": "Date"
        },
        "name": {
          "type": "string",
          "example": "Completion Initiation Phase",
          "x-ms-summary": "Name"
        },
        "projectPhase": {
          "$ref": "#/definitions/ProjectPhase"
        }
      },
      "title": "Milestone"
    },
    "MilestoneCreateRequest": {
      "type": "object",
      "required": [
        "date",
        "name"
      ],
      "properties": {
        "date": {
          "type": "string",
          "example": "2019-01-31",
          "description": "format: YYYY-MM-DD",
          "x-ms-summary": "Date"
        },
        "name": {
          "type": "string",
          "example": "Completion Initiation Phase",
          "x-ms-summary": "Name"
        },
        "projectPhase": {
          "$ref": "#/definitions/ProjectPhase"
        }
      },
      "title": "MilestoneCreateRequest"
    },
    "MilestoneDependencyCreateRequest": {
      "type": "object",
      "required": [
        "fromMilestoneId",
        "toMilestoneId"
      ],
      "properties": {
        "fromMilestoneId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "From Milestone Id"
        },
        "toMilestoneId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "To Milestone Id"
        }
      },
      "title": "MilestoneDependencyCreateRequest"
    },
    "MilestoneDependencyCreateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID_UUID",
          "x-ms-summary": "Id"
        }
      },
      "title": "MilestoneDependencyCreateResponse"
    },
    "MilestoneDependencyResponse": {
      "type": "object",
      "properties": {
        "from": {
          "$ref": "#/definitions/MilestoneReferenceResponse"
        },
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        },
        "to": {
          "$ref": "#/definitions/MilestoneReferenceResponse"
        }
      },
      "title": "MilestoneDependencyResponse"
    },
    "MilestoneReferenceResponse": {
      "type": "object",
      "properties": {
        "milestoneId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Milestone Id"
        },
        "projectId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Project Id"
        }
      },
      "title": "MilestoneReferenceResponse"
    },
    "MilestoneResponse": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "example": "2019-01-31",
          "description": "format: YYYY-MM-DD",
          "x-ms-summary": "Date"
        },
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        },
        "name": {
          "type": "string",
          "example": "Completion Initiation Phase",
          "x-ms-summary": "Name"
        },
        "projectPhase": {
          "$ref": "#/definitions/ProjectPhaseResponse"
        }
      },
      "title": "MilestoneResponse"
    },
    "MilestoneUpdateRequest": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "example": "2019-01-31",
          "description": "format: YYYY-MM-DD",
          "x-ms-summary": "Date"
        },
        "name": {
          "type": "string",
          "example": "Completion Initiation Phase",
          "x-ms-summary": "Name"
        },
        "projectPhase": {
          "$ref": "#/definitions/ProjectPhase"
        }
      },
      "title": "MilestoneUpdateRequest"
    },
    "ObsTypeCreateRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Department",
          "x-ms-summary": "Name"
        }
      },
      "title": "ObsTypeCreateRequest"
    },
    "ObsTypeResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        },
        "name": {
          "type": "string",
          "example": "Department",
          "x-ms-summary": "Name"
        }
      },
      "title": "ObsTypeResponse"
    },
    "ObsTypeUpdateRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Department",
          "x-ms-summary": "Name"
        }
      },
      "title": "ObsTypeUpdateRequest"
    },
    "ObsUnitCreateRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "IT",
          "x-ms-summary": "Name"
        },
        "parentId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Parent Id"
        }
      },
      "title": "ObsUnitCreateRequest"
    },
    "ObsUnitReferenceRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "description": "If you specify the id to reference an OBS unit you must omit the path property.",
          "x-ms-summary": "Id"
        },
        "path": {
          "type": "string",
          "description": "Missing OBS paths will be created implicitly\n\nIf you send an OBS path, all necessary path segments will be created for you in Meisterplan automatically.\n\nPaths\n\nPaths delimited by / (e.g. in calendars and OBS unit paths) may define path segments which contain / by escaping with //. E.g. the path Europe/Berlin//Amsterdam will be interpreted as ['Europe', 'Berlin/Amsterdam']. An uneven amount of slashes will be interpreted as the following segment starting with one or more slashes.",
          "x-ms-summary": "Path"
        }
      },
      "title": "ObsUnitReferenceRequest"
    },
    "ObsUnitReferenceResponse": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The display name is rendered the same way as it is in the Meisterplan application's user interface",
          "x-ms-summary": "Display Name"
        },
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        },
        "path": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Path"
        }
      },
      "title": "ObsUnitReferenceResponse"
    },
    "ObsUnitResponse": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "example": "Services > Consulting > IT",
          "description": "The display name is rendered the same way as it is in the Meisterplan application's user interface",
          "x-ms-summary": "Display Name"
        },
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        },
        "name": {
          "type": "string",
          "example": "IT",
          "x-ms-summary": "Name"
        },
        "parentId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Parent Id"
        },
        "path": {
          "type": "string",
          "example": "Services/Consulting/IT",
          "x-ms-summary": "Path"
        }
      },
      "title": "ObsUnitResponse"
    },
    "ObsUnitUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "IT",
          "x-ms-summary": "Name"
        },
        "parentId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Parent Id"
        }
      },
      "title": "ObsUnitUpdateRequest"
    },
    "PaginatedResponseOfActualTimeWorkedResponse": {
      "type": "object",
      "properties": {
        "_pagination": {
          "$ref": "#/definitions/Pagination"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActualTimeWorkedResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "PaginatedResponseOfActualTimeWorkedResponse"
    },
    "PaginatedResponseOfAllProjectsResponse": {
      "type": "object",
      "properties": {
        "_pagination": {
          "$ref": "#/definitions/Pagination"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllProjectsResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "PaginatedResponseOfAllProjectsResponse"
    },
    "PaginatedResponseOfMilestoneDependencyResponse": {
      "type": "object",
      "properties": {
        "_pagination": {
          "$ref": "#/definitions/Pagination"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MilestoneDependencyResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "PaginatedResponseOfMilestoneDependencyResponse"
    },
    "PaginatedResponseOfResourceResponse": {
      "type": "object",
      "properties": {
        "_pagination": {
          "$ref": "#/definitions/Pagination"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "PaginatedResponseOfResourceResponse"
    },
    "Pagination": {
      "type": "object",
      "properties": {
        "after": {
          "$ref": "#/definitions/Cursor"
        }
      },
      "title": "Pagination"
    },
    "PortfolioResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        },
        "name": {
          "type": "string",
          "example": "0. All Projects",
          "x-ms-summary": "Name"
        }
      },
      "title": "PortfolioResponse"
    },
    "PostalAddress": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string",
          "example": "Tübingen",
          "x-ms-summary": "City"
        },
        "country": {
          "type": "string",
          "example": "Germany",
          "x-ms-summary": "Country"
        },
        "postalCode": {
          "type": "string",
          "example": 72072,
          "x-ms-summary": "Postal Code"
        }
      },
      "title": "PostalAddress"
    },
    "PostalAddressResponse": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string",
          "example": "Tübingen",
          "x-ms-summary": "City"
        },
        "country": {
          "type": "string",
          "example": "Germany",
          "x-ms-summary": "Country"
        },
        "postalCode": {
          "type": "string",
          "example": 72072,
          "x-ms-summary": "Postal Code"
        }
      },
      "title": "PostalAddressResponse"
    },
    "PrimaryRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        }
      },
      "title": "PrimaryRole"
    },
    "Priorities": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "example": [
            {
              "id": "UUID"
            },
            {
              "id": "UUID"
            }
          ],
          "items": {
            "$ref": "#/definitions/PriorityEntry"
          },
          "x-ms-summary": "Items"
        },
        "position": {
          "type": "string",
          "example": "LAST",
          "description": "Position can be FIRST or LAST. FIRST is default",
          "enum": [
            "FIRST",
            "LAST"
          ],
          "x-ms-summary": "Position"
        }
      },
      "title": "Priorities"
    },
    "PrioritiesUpdateRequest": {
      "type": "object",
      "properties": {
        "aboveMustHave": {
          "$ref": "#/definitions/Priorities"
        },
        "belowCutOff": {
          "$ref": "#/definitions/Priorities"
        },
        "regular": {
          "$ref": "#/definitions/Priorities"
        }
      },
      "title": "PrioritiesUpdateRequest"
    },
    "Priority": {
      "type": "object",
      "properties": {
        "rankCategory": {
          "$ref": "#/definitions/RankCategory"
        }
      },
      "title": "Priority"
    },
    "PriorityEntry": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "description": "The id value can be a project or a program.",
          "x-ms-summary": "Id"
        }
      },
      "title": "PriorityEntry"
    },
    "PriorityResponse": {
      "type": "object",
      "properties": {
        "rankCategory": {
          "type": "string",
          "example": "REGULAR",
          "enum": [
            "ABOVE_MUST_HAVE",
            "BELOW_CUT_OFF",
            "REGULAR"
          ],
          "x-ms-summary": "Rank Category"
        }
      },
      "title": "PriorityResponse"
    },
    "Program": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        }
      },
      "title": "Program"
    },
    "ProgramCreateRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Release road map",
          "x-ms-summary": "Name"
        }
      },
      "title": "ProgramCreateRequest"
    },
    "ProgramLinkResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        }
      },
      "title": "ProgramLinkResponse"
    },
    "ProgramResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        },
        "name": {
          "type": "string",
          "example": "Release road map",
          "x-ms-summary": "Name"
        }
      },
      "title": "ProgramResponse"
    },
    "ProgramUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Release road map",
          "x-ms-summary": "Name"
        }
      },
      "title": "ProgramUpdateRequest"
    },
    "ProjectCreateRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "approvedBudget": {
          "type": "number",
          "format": "double",
          "example": 10400.51,
          "x-ms-summary": "Approved Budget"
        },
        "approvedTotalEffort": {
          "$ref": "#/definitions/ApprovedTotalEffort"
        },
        "businessGoal": {
          "$ref": "#/definitions/BusinessGoal"
        },
        "costType": {
          "type": "string",
          "example": "CAPEX",
          "description": "default: see Meisterplan documentation.",
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "x-ms-summary": "Cost Type"
        },
        "customFields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CustomFieldValueType"
          },
          "x-ms-summary": "Custom Fields"
        },
        "externalId": {
          "type": "string",
          "example": "myCustomID",
          "description": "Must be unique. If empty, value will be generated.",
          "x-ms-summary": "External Id"
        },
        "finish": {
          "type": "string",
          "example": "2019-01-31",
          "description": "format: YYYY-MM-DD",
          "x-ms-summary": "Finish"
        },
        "manager": {
          "$ref": "#/definitions/Manager"
        },
        "name": {
          "type": "string",
          "example": "Meisterplan API v1.1",
          "x-ms-summary": "Name"
        },
        "notes": {
          "type": "string",
          "x-ms-summary": "Notes"
        },
        "obsUnits": {
          "type": "object",
          "example": {
            "Department": {
              "path": "Services/Consulting/IT"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceRequest"
          },
          "x-ms-summary": "OBS Units"
        },
        "priority": {
          "$ref": "#/definitions/Priority"
        },
        "program": {
          "$ref": "#/definitions/Program"
        },
        "projectKey": {
          "type": "string",
          "example": "ID-15",
          "description": "Must be unique. If empty, value will be generated.",
          "x-ms-summary": "Project Key"
        },
        "start": {
          "type": "string",
          "example": "2019-01-31",
          "description": "format: YYYY-MM-DD",
          "x-ms-summary": "Start"
        },
        "status": {
          "$ref": "#/definitions/Status"
        }
      },
      "title": "ProjectCreateRequest"
    },
    "ProjectManagerResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        }
      },
      "title": "ProjectManagerResponse"
    },
    "ProjectPhase": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Initiation",
          "description": "The project phase must exist prior to creation. It will not be implicitly created.",
          "x-ms-summary": "Name"
        }
      },
      "title": "ProjectPhase"
    },
    "ProjectPhaseResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Initiation",
          "x-ms-summary": "Name"
        }
      },
      "title": "ProjectPhaseResponse"
    },
    "ProjectResponse": {
      "type": "object",
      "properties": {
        "approvedBudget": {
          "type": "number",
          "format": "double",
          "example": 10400.51,
          "x-ms-summary": "Approved Budget"
        },
        "approvedTotalEffort": {
          "$ref": "#/definitions/ApprovedTotalEffortResponse"
        },
        "businessGoal": {
          "$ref": "#/definitions/BusinessGoalResponse"
        },
        "costType": {
          "type": "string",
          "example": "CAPEX",
          "description": "default: see Meisterplan documentation.",
          "enum": [
            "CAPEX",
            "OPEX"
          ]
        },
        "customFields": {
          "type": "object",
          "example": {
            "cust_stage_gate": {
              "value": "Approved"
            },
            "cust_risk": {
              "value": "Medium"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/CustomFieldResponse"
          }
        },
        "externalId": {
          "type": "string",
          "example": "myCustomID"
        },
        "finish": {
          "type": "string",
          "example": "2019-01-31",
          "description": "format: YYYY-MM-DD"
        },
        "id": {
          "type": "string",
          "example": "UUID"
        },
        "manager": {
          "$ref": "#/definitions/ProjectManagerResponse"
        },
        "name": {
          "type": "string",
          "example": "Meisterplan API v1.1"
        },
        "notes": {
          "type": "string"
        },
        "obsUnits": {
          "type": "object",
          "example": {
            "Department": {
              "id": "UUID",
              "path": "Services/Consulting/IT",
              "displayName": "Services > Consulting > IT"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceResponse"
          }
        },
        "priority": {
          "$ref": "#/definitions/PriorityResponse"
        },
        "program": {
          "$ref": "#/definitions/ProgramLinkResponse"
        },
        "projectKey": {
          "type": "string",
          "example": "ID-15"
        },
        "start": {
          "type": "string",
          "example": "2019-01-31",
          "description": "format: YYYY-MM-DD"
        },
        "status": {
          "$ref": "#/definitions/StatusFieldResponse"
        }
      },
      "title": "ProjectResponse"
    },
    "ProjectUpdateRequest": {
      "type": "object",
      "properties": {
        "approvedBudget": {
          "type": "number",
          "format": "double",
          "example": 10400.51,
          "x-ms-summary": "Approved Budget"
        },
        "approvedTotalEffort": {
          "$ref": "#/definitions/ApprovedTotalEffort"
        },
        "businessGoal": {
          "$ref": "#/definitions/BusinessGoal"
        },
        "costType": {
          "type": "string",
          "example": "CAPEX",
          "description": "default: see Meisterplan documentation.",
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "x-ms-summary": "Cost Type"
        },
        "customFields": {
          "type": "object",
          "example": {
            "cust_stage_gate": {
              "value": "Approved"
            },
            "cust_risk": {
              "value": "Medium"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/CustomFieldValueType"
          },
          "x-ms-summary": "Custom Fields"
        },
        "finish": {
          "type": "string",
          "example": "2019-01-31",
          "description": "format: YYYY-MM-DD",
          "x-ms-summary": "Finish"
        },
        "manager": {
          "$ref": "#/definitions/Manager"
        },
        "name": {
          "type": "string",
          "example": "Meisterplan API v1.1",
          "x-ms-summary": "Name"
        },
        "notes": {
          "type": "string",
          "x-ms-summary": "Notes"
        },
        "obsUnits": {
          "type": "object",
          "example": {
            "Department": {
              "path": "Services/Consulting/IT"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceRequest"
          },
          "x-ms-summary": "OBS Units"
        },
        "priority": {
          "$ref": "#/definitions/Priority"
        },
        "program": {
          "$ref": "#/definitions/Program"
        },
        "projectKey": {
          "type": "string",
          "example": "ID-15",
          "description": "Must be unique and must not be empty.",
          "x-ms-summary": "Project Key"
        },
        "start": {
          "type": "string",
          "example": "2019-01-31",
          "description": "format: YYYY-MM-DD",
          "x-ms-summary": "Start"
        },
        "status": {
          "$ref": "#/definitions/Status"
        }
      },
      "title": "ProjectUpdateRequest"
    },
    "RankCategory": {
      "type": "object",
      "required": [
        "category",
        "position"
      ],
      "properties": {
        "category": {
          "type": "string",
          "example": "ABOVE_MUST_HAVE",
          "enum": [
            "ABOVE_MUST_HAVE",
            "BELOW_CUT_OFF",
            "REGULAR"
          ],
          "x-ms-summary": "Category"
        },
        "position": {
          "type": "string",
          "example": "LAST",
          "enum": [
            "FIRST",
            "LAST"
          ],
          "x-ms-summary": "Position"
        }
      },
      "title": "RankCategory"
    },
    "ReplaceMilestonesRequest": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Milestone"
          },
          "x-ms-summary": "Items"
        }
      },
      "title": "ReplaceMilestonesRequest"
    },
    "ResourceCalendarResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        },
        "path": {
          "type": "string",
          "example": "Default",
          "x-ms-summary": "Path"
        }
      },
      "title": "ResourceCalendarResponse"
    },
    "ResourceCreateRequest": {
      "type": "object",
      "required": [
        "lastName"
      ],
      "properties": {
        "calendar": {
          "$ref": "#/definitions/Calendar"
        },
        "costPerHour": {
          "type": "number",
          "format": "double",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        },
        "emailAddress": {
          "type": "string",
          "example": "jane.doe@meisterplan.com",
          "x-ms-summary": "Email Address"
        },
        "employmentPeriod": {
          "$ref": "#/definitions/EmploymentPeriod"
        },
        "externalId": {
          "type": "string",
          "example": "myCustomID",
          "description": "Must be unique. If empty, value will be generated.",
          "x-ms-summary": "External Id"
        },
        "externalResource": {
          "type": "boolean",
          "description": "default: false",
          "x-ms-summary": "External Resource"
        },
        "firstName": {
          "type": "string",
          "example": "Jane",
          "x-ms-summary": "First Name"
        },
        "lastName": {
          "type": "string",
          "example": "Doe",
          "x-ms-summary": "Last Name"
        },
        "obsUnits": {
          "type": "object",
          "example": {
            "Department": {
              "path": "Services/Consulting/IT"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceRequest"
          },
          "x-ms-summary": "OBS Units"
        },
        "postalAddress": {
          "$ref": "#/definitions/PostalAddress"
        },
        "primaryRole": {
          "$ref": "#/definitions/PrimaryRole"
        },
        "resourceKey": {
          "type": "string",
          "example": "KMY",
          "description": "Must be unique. If empty, value will be generated.",
          "x-ms-summary": "Resource Key"
        },
        "skills": {
          "type": "array",
          "example": [
            "Java",
            "Kotlin"
          ],
          "description": "Missing values will be created automatically\n\nIf you import an unknown value, it will be automatically created for you in Meisterplan.",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Skills"
        }
      },
      "title": "ResourceCreateRequest"
    },
    "ResourceResponse": {
      "type": "object",
      "properties": {
        "calendar": {
          "$ref": "#/definitions/ResourceCalendarResponse"
        },
        "costPerHour": {
          "type": "number",
          "format": "double",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        },
        "emailAddress": {
          "type": "string",
          "example": "jane.doe@meisterplan.com",
          "x-ms-summary": "Email Address"
        },
        "employmentPeriod": {
          "$ref": "#/definitions/EmploymentPeriodResponse"
        },
        "externalId": {
          "type": "string",
          "example": "myCustomID",
          "x-ms-summary": "External Id"
        },
        "externalResource": {
          "type": "boolean",
          "x-ms-summary": "External Resource"
        },
        "firstName": {
          "type": "string",
          "example": "Jane",
          "x-ms-summary": "First Name"
        },
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        },
        "lastName": {
          "type": "string",
          "example": "Doe",
          "x-ms-summary": "Last Name"
        },
        "obsUnits": {
          "type": "object",
          "example": {
            "Department": {
              "id": "UUID",
              "path": "Services/Consulting/IT",
              "displayName": "Services > Consulting > IT"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceResponse"
          },
          "x-ms-summary": "OBS Units"
        },
        "postalAddress": {
          "$ref": "#/definitions/PostalAddressResponse"
        },
        "primaryRole": {
          "$ref": "#/definitions/RoleResponse"
        },
        "resourceKey": {
          "type": "string",
          "example": "KMY",
          "x-ms-summary": "Resource Key"
        },
        "skills": {
          "type": "array",
          "example": [
            "Java",
            "Kotlin"
          ],
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Skills"
        }
      },
      "title": "ResourceResponse"
    },
    "ResourceUpdateRequest": {
      "type": "object",
      "properties": {
        "calendar": {
          "$ref": "#/definitions/Calendar"
        },
        "costPerHour": {
          "type": "number",
          "format": "double",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        },
        "emailAddress": {
          "type": "string",
          "example": "jane.doe@meisterplan.com",
          "description": "Must be unique.",
          "x-ms-summary": "Email Address"
        },
        "employmentPeriod": {
          "$ref": "#/definitions/EmploymentPeriod"
        },
        "externalId": {
          "type": "string",
          "example": "myCustomID",
          "x-ms-summary": "External Id"
        },
        "externalResource": {
          "type": "boolean",
          "x-ms-summary": "External Resource"
        },
        "firstName": {
          "type": "string",
          "example": "Jane",
          "x-ms-summary": "First Name"
        },
        "lastName": {
          "type": "string",
          "example": "Doe",
          "x-ms-summary": "Last Name"
        },
        "obsUnits": {
          "type": "object",
          "example": {
            "Department": {
              "path": "Services/Consulting/IT"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceRequest"
          },
          "x-ms-summary": "OBS Units"
        },
        "postalAddress": {
          "$ref": "#/definitions/PostalAddress"
        },
        "primaryRole": {
          "$ref": "#/definitions/PrimaryRole"
        },
        "resourceKey": {
          "type": "string",
          "example": "KMY",
          "description": "Must be unique. If empty, value will be generated.",
          "x-ms-summary": "Resource Key"
        },
        "skills": {
          "type": "array",
          "example": [
            "Java",
            "Kotlin"
          ],
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Skills"
        }
      },
      "title": "ResourceUpdateRequest"
    },
    "RoleCapacityResponse": {
      "type": "object",
      "required": [
        "fte"
      ],
      "properties": {
        "finish": {
          "type": "string",
          "format": "date",
          "example": "2019-12-31",
          "description": "End date of this role capacity segment. Optional."
        },
        "fte": {
          "type": "number",
          "format": "double",
          "example": 0.5,
          "description": "The role's capacity in FTE"
        },
        "start": {
          "type": "string",
          "format": "date",
          "example": "2019-01-31",
          "description": "Start date of this role capacity segment. Optional."
        }
      },
      "title": "RoleCapacityResponse"
    },
    "RoleCapacityUpdateRequest": {
      "type": "object",
      "properties": {
        "segments": {
          "type": "array",
          "example": [
            {
              "start": "2019-01-31",
              "finish": "2019-12-31",
              "fte": 0.5
            }
          ],
          "description": "Role capacity segments to update for this role.",
          "items": {
            "$ref": "#/definitions/CapacitySegment"
          }
        }
      },
      "title": "RoleCapacityUpdateRequest"
    },
    "RoleCreateRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "costPerHour": {
          "type": "number",
          "format": "double",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        },
        "costType": {
          "type": "string",
          "example": "CAPEX",
          "description": "default: see Meisterplan documentation.",
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "x-ms-summary": "Cost Type"
        },
        "externalId": {
          "type": "string",
          "example": "myCustomID",
          "description": "Must be unique. If empty, value will be generated.",
          "x-ms-summary": "External Id"
        },
        "name": {
          "type": "string",
          "example": "Junior Developer",
          "x-ms-summary": "Name"
        },
        "obsUnits": {
          "type": "object",
          "example": {
            "Department": {
              "path": "Services/Consulting/IT"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceRequest"
          },
          "x-ms-summary": "OBS Units"
        }
      },
      "title": "RoleCreateRequest"
    },
    "RoleResponse": {
      "type": "object",
      "properties": {
        "costPerHour": {
          "type": "number",
          "format": "double",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        },
        "costType": {
          "type": "string",
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "x-ms-summary": "Cost Type"
        },
        "externalId": {
          "type": "string",
          "example": "myCustomID",
          "x-ms-summary": "External Id"
        },
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        },
        "name": {
          "type": "string",
          "example": "Junior Developer",
          "x-ms-summary": "Name"
        },
        "obsUnits": {
          "type": "object",
          "example": {
            "Department": {
              "id": "UUID",
              "path": "Services/Consulting/IT",
              "displayName": "Services > Consulting > IT"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceResponse"
          },
          "x-ms-summary": "OBS Units"
        }
      },
      "title": "RoleResponse"
    },
    "RoleUpdateRequest": {
      "type": "object",
      "properties": {
        "costPerHour": {
          "type": "number",
          "format": "double",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        },
        "costType": {
          "type": "string",
          "example": "CAPEX",
          "description": "default: see Meisterplan documentation.",
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "x-ms-summary": "Cost Type"
        },
        "externalId": {
          "type": "string",
          "example": "myCustomID",
          "description": "Must be unique.",
          "x-ms-summary": "External Id"
        },
        "name": {
          "type": "string",
          "example": "Junior Developer",
          "x-ms-summary": "Name"
        },
        "obsUnits": {
          "type": "object",
          "example": {
            "Department": {
              "path": "Services/Consulting/IT"
            }
          },
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceRequest"
          },
          "x-ms-summary": "OBS Units"
        }
      },
      "title": "RoleUpdateRequest"
    },
    "RoleWithRoleCapacityResponse": {
      "type": "object",
      "properties": {
        "roleId": {
          "type": "string",
          "example": "UUID",
          "description": "The role's ID."
        },
        "segments": {
          "type": "array",
          "description": "The role's capacity segments.",
          "items": {
            "$ref": "#/definitions/RoleCapacityResponse"
          }
        }
      },
      "title": "RoleWithRoleCapacityResponse"
    },
    "ScenarioResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        },
        "name": {
          "type": "string",
          "example": "More Budget Scenario",
          "x-ms-summary": "Name"
        }
      },
      "title": "ScenarioResponse"
    },
    "SetDefaultCalendarRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Id"
        }
      },
      "title": "SetDefaultCalendarRequest"
    },
    "Status": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "example": "Approved",
          "description": "Missing values will be created automatically\n\nIf you import an unknown value, it will be automatically created for you in Meisterplan.",
          "x-ms-summary": "Value"
        }
      },
      "title": "Status"
    },
    "StatusFieldResponse": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "example": "Approved",
          "description": "If you have no permission to this field, the value is null.",
          "x-ms-summary": "Value"
        }
      },
      "title": "StatusFieldResponse"
    },
    "Timing": {
      "type": "object",
      "properties": {
        "dueDate": {
          "type": "string",
          "example": "2019-01-31",
          "description": "Is only valid in combination with on: Date (format: YYYY-MM-DD).",
          "x-ms-summary": "Due Date"
        },
        "milestoneId": {
          "type": "string",
          "example": "UUID",
          "description": "Is only valid in combination with on: Milestone. The milestone must exist in the project. It will not be implicitly created.",
          "x-ms-summary": "Milestone Id"
        },
        "on": {
          "type": "string",
          "description": "Milestone is only valid in combination with a value in the field milestoneId. Date is only valid in combination with a value in the field dueDate.",
          "enum": [
            "Date",
            "Milestone",
            "ProjectFinish",
            "ProjectStart"
          ],
          "x-ms-summary": "On"
        }
      },
      "title": "Timing"
    },
    "Unit": {
      "type": "object",
      "title": "Unit"
    },
    "WorkingHours": {
      "type": "object",
      "properties": {
        "friday": {
          "type": "number",
          "format": "double",
          "example": 4.5,
          "minimum": 0,
          "maximum": 24,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false,
          "x-ms-summary": "Friday"
        },
        "monday": {
          "type": "number",
          "format": "double",
          "example": 8,
          "minimum": 0,
          "maximum": 24,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false,
          "x-ms-summary": "Monday"
        },
        "saturday": {
          "type": "number",
          "format": "double",
          "example": 0,
          "minimum": 0,
          "maximum": 24,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false,
          "x-ms-summary": "Saturday"
        },
        "sunday": {
          "type": "number",
          "format": "double",
          "example": 0,
          "minimum": 0,
          "maximum": 24,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false,
          "x-ms-summary": "Sunday"
        },
        "thursday": {
          "type": "number",
          "format": "double",
          "example": 8,
          "minimum": 0,
          "maximum": 24,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false,
          "x-ms-summary": "Thursday"
        },
        "tuesday": {
          "type": "number",
          "format": "double",
          "example": 8,
          "minimum": 0,
          "maximum": 24,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false,
          "x-ms-summary": "Tuesday"
        },
        "wednesday": {
          "type": "number",
          "format": "double",
          "example": 8,
          "minimum": 0,
          "maximum": 24,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false,
          "x-ms-summary": "Wednesday"
        }
      },
      "title": "WorkingHours"
    },
    "WorkingHoursResponse": {
      "type": "object",
      "properties": {
        "friday": {
          "type": "number",
          "format": "double",
          "example": 4.5,
          "x-ms-summary": "Friday"
        },
        "monday": {
          "type": "number",
          "format": "double",
          "example": 8,
          "x-ms-summary": "Monday"
        },
        "saturday": {
          "type": "number",
          "format": "double",
          "example": 0,
          "x-ms-summary": "Saturday"
        },
        "sunday": {
          "type": "number",
          "format": "double",
          "example": 0,
          "x-ms-summary": "Sunday"
        },
        "thursday": {
          "type": "number",
          "format": "double",
          "example": 8,
          "x-ms-summary": "Thursday"
        },
        "tuesday": {
          "type": "number",
          "format": "double",
          "example": 8,
          "x-ms-summary": "Tuesday"
        },
        "wednesday": {
          "type": "number",
          "format": "double",
          "example": 8,
          "x-ms-summary": "Wednesday"
        }
      },
      "title": "WorkingHoursResponse"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://meisterplan.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://meisterplan.com/privacy-and-data-protection/"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Business Management;Business Intelligence"
    }
  ]
}
