{
  "swagger": "2.0",
  "info": {
    "title": "Meisterplan",
    "description": "Meisterplan is a portfolio-level resource management tool that helps portfolio and resource managers manage people across teams and initiatives whether your work is traditional, agile or hybrid. Use it to make confident portfolio decisions and interactively surface and solve resource conflicts.",
    "termsOfService": "https://meisterplan.com/terms-of-service/",
    "contact": {
      "name": "Meisterplan Support",
      "url": "https://help.meisterplan.com/",
      "email": "support@meisterplan.com"
    },
    "version": "v1.5.0",
    "x-logo": {
      "url": "https://static.meisterplan.com/web/images/restingrhino/logo_meisterplan_api_doc.png"
    }
  },
  "host": "api.us.meisterplan.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/scenarios/{scenarioId}/projects/{projectId}/milestones": {
      "get": {
        "tags": [
          "Milestones"
        ],
        "summary": "Get a List of Milestones",
        "description": "Returns a list of milestones of a project",
        "operationId": "GetAllMilestones",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseMilestoneResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Milestones"
        ],
        "summary": "Create Milestones",
        "description": "Returns the newly created milestone",
        "operationId": "CreateMilestone",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Milestone represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MilestoneCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/MilestoneResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "put": {
        "tags": [
          "Milestones"
        ],
        "summary": "Replace Milestones",
        "description": "Replaces milestones of a given project within a scenario.",
        "operationId": "ReplaceMilestones",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Milestone represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceMilestonesRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/financials": {
      "get": {
        "tags": [
          "Financials"
        ],
        "summary": "Get a List of Financials",
        "description": "Returns a list of financials of a project",
        "operationId": "GetAllFinancials",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseFinancialsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Financials"
        ],
        "summary": "Create Financials",
        "description": "Returns the newly created financial event.",
        "operationId": "CreateFinancials",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Financial event represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialsCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FinancialsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "put": {
        "tags": [
          "Financials"
        ],
        "summary": "Replace Financials",
        "description": "Replaces financial events of a given project within a scenario.",
        "operationId": "ReplaceFinancials",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialsReplaceRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/financialActuals": {
      "get": {
        "tags": [
          "Financial Actuals"
        ],
        "summary": "Get a List of Actual Financial Events",
        "description": "Returns a list of actual financial events of a project.",
        "operationId": "GetAllActualFinancialEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseFinancialActualsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Financial Actuals"
        ],
        "summary": "Create Actual Financial Event",
        "description": "Returns the newly created actual financial event.",
        "operationId": "CreateFinancialActuals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Financial event represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialActualsCreateOrReplaceRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FinancialActualsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "put": {
        "tags": [
          "Financial Actuals"
        ],
        "summary": "Replace Actual Financial Events",
        "description": "Replaces actual financial events of a given project within a scenario. A request is limited to 5000 actual financial events per project.",
        "operationId": "ReplaceFinancialActuals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Financial event represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialActualsReplaceRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/allocations": {
      "get": {
        "tags": [
          "Allocations"
        ],
        "summary": "Get a List of Allocations",
        "description": "Returns a list of allocations of a project",
        "operationId": "GetAllAllocations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseAllocationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Allocations"
        ],
        "summary": "Create or Update Allocations",
        "description": "This endpoint lets you create new allocations and update existing allocations of a project. Changes will only be made for the specified date ranges as well as the specified resources and roles.",
        "operationId": "CreateOrUpdateAllocation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "allocationCreateOrUpdateRequest",
            "description": "Allocation represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Allocation"
            },
            "x-ms-summary": "Allocation Create Or Update Request"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AllocationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "put": {
        "tags": [
          "Allocations"
        ],
        "summary": "Replace Allocations",
        "description": "This endpoint lets you replace all allocations of a project. The result will be the same as if all existing allocations are deleted and the passed allocations are created again.",
        "operationId": "ReplaceAllocation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "allocationReplaceRequest",
            "description": "Allocation represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AllocationReplaceRequest"
            },
            "x-ms-summary": "Allocation Replace Request"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/resources/{resourceId}/absences": {
      "get": {
        "tags": [
          "Absences"
        ],
        "summary": "Get a List of Absences",
        "description": "Returns a list of absences of the resource.",
        "operationId": "GetAllAbsences",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Resource Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "query",
            "name": "startDate",
            "description": "Start date for filtering time period",
            "type": "string",
            "format": "date",
            "x-ms-summary": "Start Date",
            "x-example": "2019-01-31T00:00:00.0000000+00:00"
          },
          {
            "in": "query",
            "name": "finishDate",
            "description": "Inclusive finish date for filtering time period.",
            "type": "string",
            "format": "date",
            "x-ms-summary": "Finish Date",
            "x-example": "2019-12-31T00:00:00.0000000+00:00"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseAbsenceResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Absences"
        ],
        "summary": "Create Absences",
        "description": "Use this request to add an absence for a certain time period. This time period can be defined using the start and finish attributes of the request.",
        "operationId": "CreateAbsences",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Resource Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Absence in a given time period represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAbsenceRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AbsenceResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "put": {
        "tags": [
          "Absences"
        ],
        "summary": "Replace Absences",
        "description": "This endpoint lets you replace all absences of a resource. The result will be the same as if all existing absences are deleted and the passed absences are created again. You can use the 'start' and 'end' query parameters to specify a time range for replacing existing absences. If you do not use these parameters, all absences will be replaced by the newly sent absences.",
        "operationId": "ReplaceAbsences",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Resource Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start date of replacement period",
            "type": "string",
            "format": "date",
            "x-ms-summary": "Start",
            "x-example": "2019-01-31T00:00:00.0000000+00:00"
          },
          {
            "in": "query",
            "name": "end",
            "description": "Inclusive end date of replacement period.",
            "type": "string",
            "format": "date",
            "x-ms-summary": "End",
            "x-example": "2019-12-31T00:00:00.0000000+00:00"
          },
          {
            "in": "body",
            "name": "absences",
            "description": "Absences represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceAbsencesRequest"
            },
            "x-ms-summary": "Absences"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a List of Webhooks",
        "description": "This endpoint is paginated. It returns a list of webhooks up to the specified PAGESIZE",
        "operationId": "GetAllWebhooks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page Size",
            "type": "integer",
            "default": 500,
            "maximum": 500,
            "minimum": 1,
            "x-ms-summary": "Page Size",
            "x-example": "100"
          },
          {
            "in": "query",
            "name": "pageAfter",
            "description": "The cursor after which to retrieve results. The cursor can be taken from a preceding request.",
            "type": "string",
            "x-ms-summary": "Page After",
            "x-example": "opaque cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseWebhookResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "x-ms-visibility": "internal"
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create Webhook",
        "description": "Creates a webhook by the given fields and returns the newly created. 1000 webhooks are currently supported per system.",
        "operationId": "CreateWebhook",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Webhook represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/WebhookResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "x-ms-trigger": "single"
      },
      "x-ms-notification-content": {
        "description": "Webhook Notification",
        "x-ms-summary": "Webhook Notification",
        "schema": {
          "type": "object",
          "properties": {},
          "x-ms-dynamic-schema": {
            "operationId": "GetNotificationDynamicSchema",
            "parameters": {},
            "value-path": "schema"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/roleCapacities/{roleId}": {
      "get": {
        "tags": [
          "Role Capacities"
        ],
        "summary": "Get the Capacity Segments of a Role",
        "description": "Returns the capacity segments for the role specified by the given ID. Returns an empty list if no capacity segments exist.",
        "operationId": "GetRoleCapacities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "roleId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Role Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseRoleCapacityResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Role Capacities"
        ],
        "summary": "Update the Capacity Segments of a Role",
        "description": "Updates the capacity segments for the role specified by the given ID. To erase all capacity segments, send a segment without start or finish and 0 capacity",
        "operationId": "UpdateRoleCapacities",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "roleId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Role Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Role Capacity payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleCapacityUpdateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseRoleCapacityResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a List of Projects",
        "description": "This endpoint is paginated. It returns a list of projects up to the specified PAGESIZE",
        "operationId": "GetAllProjects",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page Size",
            "type": "integer",
            "default": 100,
            "maximum": 500,
            "minimum": 1,
            "x-ms-summary": "Page Size",
            "x-example": "100"
          },
          {
            "in": "query",
            "name": "pageAfter",
            "description": "The cursor after which to retrieve results. The cursor can be taken from a preceding request.",
            "type": "string",
            "x-ms-summary": "Page After",
            "x-example": "opaque cursor"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Stringified JSON object with a subset of properties of the expected object.",
            "type": "string",
            "x-ms-summary": "Filter",
            "x-example": "{\"status\": \"Critical\", \"customFields\": {\"cust_prj_number\": \"PR001\"}}"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseAllProjectsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create Projects",
        "description": "Creates a project with the given fields and returns the newly created project.",
        "operationId": "CreateProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Project represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/actuals": {
      "get": {
        "tags": [
          "Actual Time Worked"
        ],
        "summary": "Get a List of Actual Time Worked",
        "description": "Returns a list of actual time worked for all projects of a specific scenario. Please note that actual time worked data itself is independent from its scenario.",
        "operationId": "GetAllActualTimeWorked",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page Size",
            "type": "integer",
            "default": 100,
            "maximum": 100,
            "minimum": 1,
            "x-ms-summary": "Page Size",
            "x-example": "100"
          },
          {
            "in": "query",
            "name": "pageAfter",
            "description": "The cursor after which to retrieve results. The cursor can be taken from a preceding request.",
            "type": "string",
            "x-ms-summary": "Page After",
            "x-example": "opaque cursor"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Stringified JSON object with a subset of properties of the expected object.",
            "type": "string",
            "x-ms-summary": "Filter",
            "x-example": "{ \"id\": \"UUID\", \"type\": \"RESOURCE\" }"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseActualTimeWorkedResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "delete": {
        "tags": [
          "Actual Time Worked"
        ],
        "summary": "Delete Actual Time Worked",
        "description": "Deletes all actual time worked of a given project.",
        "operationId": "DeleteAllActualTimeWorked",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Actual Time Worked"
        ],
        "summary": "Create or Update Actual Time Worked",
        "description": "This endpoint lets you create new actual time worked and update the existing actual time worked of a project by an entity (resource or role). We will not update actual time worked for booking dates that are not specified in the request for a given project and entity. With the mode property you can control if an existing actual time worked value is replaced by the new value or if its value is added to the booking in the request. Please note that actual time worked data itself is independent from its scenario. It will be the same across all scenarios for any given project. A request is limited to 5000 actual time worked values per project and resource/role.",
        "operationId": "CreateOrUpdateActualTimeWorked",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Actual Time Worked represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActualTimeWorkedCreateOrUpdateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ActualTimeWorkedResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/programs": {
      "get": {
        "tags": [
          "Programs"
        ],
        "summary": "Get a List of Programs",
        "description": "Returns a list of programs in the given scenario",
        "operationId": "GetAllPrograms",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseProgramResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Programs"
        ],
        "summary": "Create Programs",
        "description": "Creates a program with the given fields and returns the newly created program.",
        "operationId": "CreateProgram",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Program represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProgramCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProgramResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/priorities": {
      "post": {
        "tags": [
          "Priorities"
        ],
        "summary": "Update Priorities",
        "description": "This endpoint updates the priorities of projects and programs.",
        "operationId": "UpdatePriorities",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "prioritiesUpdateRequest",
            "description": "Priorities represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrioritiesUpdateRequest"
            },
            "x-ms-summary": "Priorities Update Request"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/milestoneDependencies": {
      "get": {
        "tags": [
          "Milestone Dependencies"
        ],
        "summary": "Get a List of Milestone Dependencies",
        "description": "Returns a list of milestones dependencies of a scenario",
        "operationId": "GetAllMilestoneDependencies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page Size",
            "type": "integer",
            "default": 100,
            "maximum": 500,
            "minimum": 1,
            "x-ms-summary": "Page Size",
            "x-example": "100"
          },
          {
            "in": "query",
            "name": "pageAfter",
            "description": "The cursor after which to retrieve results. The cursor can be taken from a preceding request.",
            "type": "string",
            "x-ms-summary": "Page After",
            "x-example": "opaque cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseMilestoneDependencyResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Milestone Dependencies"
        ],
        "summary": "Create a Milestone Dependency",
        "description": "Returns the id of the newly created milestone dependency",
        "operationId": "CreateMilestoneDependency",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Milestone dependency represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MilestoneDependencyCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/MilestoneDependencyCreateResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get a List of Roles",
        "description": "Returns a list of all available roles. If no roles are available, an empty list is returned.",
        "operationId": "GetAllRoles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "description": "Stringified JSON object with a subset of properties of the expected object.",
            "type": "string",
            "x-ms-summary": "Filter",
            "x-example": "{ \"externalId\": \"myCustomID\" }"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseRoleResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create Roles",
        "description": "Returns the created role on success.\n\nPaths\n\nPaths delimited by / (e.g. in calendars and OBS unit paths) may define path segments which contain / by escaping with //. E.g. the path Europe/Berlin//Amsterdam will be interpreted as ['Europe', 'Berlin/Amsterdam']. An uneven amount of slashes will be interpreted as the following segment starting with one or more slashes.",
        "operationId": "CreateRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Role represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RoleResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/resources": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get a List of Resources",
        "description": "This endpoint is paginated. It returns a list of resources up to the specified PAGESIZE",
        "operationId": "GetAllResources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page Size",
            "type": "integer",
            "default": 100,
            "maximum": 500,
            "minimum": 1,
            "x-ms-summary": "Page Size",
            "x-example": "100"
          },
          {
            "in": "query",
            "name": "pageAfter",
            "description": "The cursor after which to retrieve results. The cursor can be taken from a preceding request.",
            "type": "string",
            "x-ms-summary": "Page After",
            "x-example": "opaque cursor"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Stringified JSON object with a subset of properties of the expected object.",
            "type": "string",
            "x-ms-summary": "Filter",
            "x-example": "{ \"externalId\": \"myCustomID\" }"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Create Resources",
        "description": "Creates a resource by the given fields and returns the newly created.\n\nPaths\n\nPaths delimited by / (e.g. in calendars and OBS unit paths) may define path segments which contain / by escaping with //. E.g. the path Europe/Berlin//Amsterdam will be interpreted as ['Europe', 'Berlin/Amsterdam']. An uneven amount of slashes will be interpreted as the following segment starting with one or more slashes.",
        "operationId": "CreateResource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Resource represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/resources/{resourceId}/calendarDeviations": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get Deviations from the Calendar",
        "description": "Reads deviations to the resource's calendar working hours. If no start and finish values are passed, all deviations of the requested resource are returned. If only start is passed, all deviations starting from this time are returned. If only finish is passed, all deviations up to that point are returned.",
        "operationId": "GetCalendarDeviations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Resource Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "query",
            "name": "start",
            "description": "Start date for filtering time period",
            "type": "string",
            "format": "date",
            "x-ms-summary": "Start",
            "x-example": "2019-01-31T00:00:00.0000000+00:00"
          },
          {
            "in": "query",
            "name": "finish",
            "description": "Finish date for filtering time period",
            "type": "string",
            "format": "date",
            "x-ms-summary": "Finish",
            "x-example": "2019-12-31T00:00:00.0000000+00:00"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseCalendarDeviationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Update Deviations from the Calendar",
        "description": "Use this request to replace all calendar deviations of a resource for a certain time period. This time period can be defined using the root start and finish attributes of the request. Specify the new list of calendar deviations with the deviations property. Note that all deviations in the specified period will be overwritten by the deviations listed in the deviations property.\n\n-   If null is used for the start period and end period, all calendar     deviations of the resource are overwritten -   If only the start date of the period is defined, all deviations     starting from this time will be overwritten -   If only the end date of the period is defined, all deviations up to     that point will be overwritten -   If null is used for the start and/or end date of a calendar     deviation, the deviation is assumed to last from or until the root     start or finish date specified above.\n\nAll deviations are flattened into a sequential structure. Cases of overlapping deviations will be resolved by giving precedence to deviations occurring later in the array.",
        "operationId": "UpdateCalendarDeviations",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Resource Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Calendar deviations of a given time period represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarDeviationUpdateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseCalendarDeviationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/obsTypes": {
      "get": {
        "tags": [
          "OBS"
        ],
        "summary": "Get all OBS Types",
        "description": "This endpoint is for OBS types only. To get OBS units, use /obsTypes/<obs-type-id>/obsUnits",
        "operationId": "GetAllObsTypes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseObsTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "OBS"
        ],
        "summary": "Create OBS Type",
        "description": "Creates an OBS type with the given data. Will return the newly created OBS type.",
        "operationId": "CreateObsType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "OBS Type represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObsTypeCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ObsTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/obsTypes/{obsTypeId}/obsUnits": {
      "get": {
        "tags": [
          "OBS"
        ],
        "summary": "Get all OBS Units",
        "description": "This endpoint returns a list of all OBS units for the given OBS type.",
        "operationId": "GetAllObsUnits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "obsTypeId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Obs Type Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseObsUnitResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "OBS"
        ],
        "summary": "Create OBS Unit",
        "description": "Creates an OBS unit with the given data. Will return the newly created OBS unit.",
        "operationId": "CreateObsUnit",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "obsTypeId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Obs Type Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "obsUnitCreateRequest",
            "description": "OBS Unit represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObsUnitCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ObsUnitResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/calendars": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Get a List of Calendars",
        "description": "Get a list of all calendars in your Meisterplan system.",
        "operationId": "GetAllCalendars",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseCalendarResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "Create Calendars",
        "description": "Create a calendar with the given data. Will return the newly created calendar.",
        "operationId": "CreateCalendar",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "Calendar represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarCreateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CalendarResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/calendars/{calendarId}/exceptions": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Get a List of Calendar Exceptions",
        "description": "Get a list of all exceptions to this calendar in your Meisterplan system.",
        "operationId": "GetAllCalendarExceptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "calendarId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Calendar Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "query",
            "name": "startDate",
            "description": "Start Date",
            "type": "string",
            "format": "date",
            "x-ms-summary": "Start Date"
          },
          {
            "in": "query",
            "name": "endDate",
            "description": "End Date",
            "type": "string",
            "format": "date",
            "x-ms-summary": "End Date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseCalendarExceptionResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "Update Calendar Exceptions",
        "description": "Use this request to replace all calendar exceptions for a certain time period. This time period can be defined using the root start and finish attributes of the request. Specify the new list of calendar exceptions with the exceptions property. Note that all exceptions in the specified period will be overwritten by the exceptions listed in the exceptions property.\n\n-   If null is used for the start period and end period, all exceptions     of the calendar are overwritten -   If only the start date of the period is defined, all exceptions     starting from this time will be overwritten -   If only the end date of the period is defined, all exceptions up to     that point will be overwritten -   If an exception is removed and a parent calendar has an exception at     that date, this calendar inherits the exception from the parent     calendar.",
        "operationId": "CreateCalendarExceptions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "calendarId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Calendar Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Calendar exceptions of a given time period represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCalendarExceptionsRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/calendars/defaultCalendar": {
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "Set Default Calendar",
        "description": "Sets an existing calendar as the default calendar in your Meisterplan system.",
        "operationId": "SetDefaultCalendar",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "The id of an existing calendar.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetDefaultCalendarRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/webhooks/{webhookId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get Webhook by ID",
        "description": "Returns the individual webhook specified by the given ID.",
        "operationId": "GetWebhookById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "webhookId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Webhook Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebhookResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "x-ms-visibility": "internal"
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete Webhook",
        "description": "Delete the webhook specified by the given ID. If the webhook with the given ID does not exist, the request will fail.",
        "operationId": "DeleteWebhook",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "webhookId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Webhook Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "x-ms-visibility": "internal"
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update Webhook Status",
        "description": "Set the status of a webhook specified by the given ID.",
        "operationId": "UpdateWebhookStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "webhookId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Webhook Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Webhook status represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookUpdateStatusRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebhookResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Projects by ID",
        "description": "Returns the individual project specified by the given ID.",
        "operationId": "GetProjectById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete Projects",
        "description": "Deletes a project in a given scenario.",
        "operationId": "DeleteProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "patch": {
        "tags": [
          "Projects"
        ],
        "summary": "Update Projects",
        "description": "Perform an update on a project specified by the given ID.",
        "operationId": "UpdateProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Project represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectUpdateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/milestones/{milestoneId}": {
      "get": {
        "tags": [
          "Milestones"
        ],
        "summary": "Get Milestones by ID",
        "description": "Returns the individual milestone specified by the given ID.",
        "operationId": "GetMilestoneById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "milestoneId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Milestone Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MilestoneResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "delete": {
        "tags": [
          "Milestones"
        ],
        "summary": "Delete Milestones",
        "description": "Deletes a milestone in a given project of a scenario.",
        "operationId": "DeleteMilestone",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "milestoneId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Milestone Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "patch": {
        "tags": [
          "Milestones"
        ],
        "summary": "Update Milestones",
        "description": "Perform an update on a milestone specified by the given ID.",
        "operationId": "UpdateMilestone",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "milestoneId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Milestone Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Milestone represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MilestoneUpdateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MilestoneResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/financials/{financialsId}": {
      "get": {
        "tags": [
          "Financials"
        ],
        "summary": "Get Financials by ID",
        "description": "Returns the individual financial event specified by the given ID.",
        "operationId": "GetFinancialsById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "financialsId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Financials Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "delete": {
        "tags": [
          "Financials"
        ],
        "summary": "Delete Financials",
        "description": "Deletes a financial event in a given project of a scenario.",
        "operationId": "DeleteFinancials",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "financialsId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Financials Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "patch": {
        "tags": [
          "Financials"
        ],
        "summary": "Update Financials",
        "description": "Updates a financial event by ID in a given project of a scenario.",
        "operationId": "UpdateFinancials",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "financialsId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Financials Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Financial event represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialsUpdateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/financialActuals/{actualFinancialEventId}": {
      "get": {
        "tags": [
          "Financial Actuals"
        ],
        "summary": "Get Actual Financial Event by ID",
        "description": "Returns the individual actual financial event specified by the given ID.",
        "operationId": "GetActualFinancialEventById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "actualFinancialEventId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Financial Actuals Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialActualsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "delete": {
        "tags": [
          "Financial Actuals"
        ],
        "summary": "Delete Actual Financial Event",
        "description": "Deletes an actual financial event in a given project of a scenario.",
        "operationId": "DeleteFinancialActuals",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "actualFinancialEventId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Financial Actuals Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "patch": {
        "tags": [
          "Financial Actuals"
        ],
        "summary": "Update Actual Financial Event",
        "description": "Returns the updated actual financial event.",
        "operationId": "UpdateFinancialActuals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "actualFinancialEventId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Financial Actuals Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Financial event represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialActualsUpdateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FinancialActualsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/allocations/{allocationId}": {
      "get": {
        "tags": [
          "Allocations"
        ],
        "summary": "Get Allocations by ID",
        "description": "Returns the individual allocation specified by the given ID.",
        "operationId": "GetAllocationId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "allocationId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Allocation Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AllocationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "delete": {
        "tags": [
          "Allocations"
        ],
        "summary": "Delete Allocations",
        "description": "Deletes an allocation in a given project of a scenario.",
        "operationId": "DeleteAllocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "allocationId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Allocation Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "patch": {
        "tags": [
          "Allocations"
        ],
        "summary": "Update Allocations",
        "description": "This endpoint lets you update existing allocations of a project. Changes will only be made for the specified date ranges as well as the specified resources and roles.",
        "operationId": "UpdateAllocation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "allocationId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Allocation Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "allocationUpdateRequest",
            "description": "Allocation represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AllocationUpdateRequest"
            },
            "x-ms-summary": "Allocation Update Request"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AllocationResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/programs/{programId}": {
      "delete": {
        "tags": [
          "Programs"
        ],
        "summary": "Delete Programs",
        "description": "Deletes a program specified by the given ID.",
        "operationId": "DeleteProgram",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "programId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Program Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "patch": {
        "tags": [
          "Programs"
        ],
        "summary": "Update Programs",
        "description": "Perform an update on a program specified by the given ID.",
        "operationId": "UpdateProgram",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "programId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Program Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Program represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProgramUpdateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProgramResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/roles/{roleId}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get Roles by ID",
        "description": "Returns the individual role specified by the given ID.",
        "operationId": "GetRoleById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Role Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete Roles",
        "description": "Delete the role specified by the given ID. If the role with the given ID does not exist, the request will fail.",
        "operationId": "DeleteRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Role Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "patch": {
        "tags": [
          "Roles"
        ],
        "summary": "Update Roles",
        "description": "Perform an update on a role specified by the given ID. To do a partial update, only the updated fields need to be sent. To delete a field value, the field must be sent with an explicit null value. Fields with a default value will be reset to their default when set to null.\n\nPaths\n\nPaths delimited by / (e.g. in calendars and OBS unit paths) may define path segments which contain / by escaping with //. E.g. the path Europe/Berlin//Amsterdam will be interpreted as ['Europe', 'Berlin/Amsterdam']. An uneven amount of slashes will be interpreted as the following segment starting with one or more slashes.",
        "operationId": "UpdateRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Role Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Role represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleUpdateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/resources/{resourceId}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get Resources by ID",
        "description": "Returns the individual resource specified by the given ID.",
        "operationId": "GetResourceById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Resource Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "delete": {
        "tags": [
          "Resources"
        ],
        "summary": "Delete Resources",
        "description": "Delete the resource specified by the given ID. If the resource with the given ID does not exist, the request fails.",
        "operationId": "DeleteResource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Resource Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "patch": {
        "tags": [
          "Resources"
        ],
        "summary": "Update Resources",
        "description": "Perform an update on a resource specified by the given ID.\n\nPaths\n\nPaths delimited by / (e.g. in calendars and OBS unit paths) may define path segments which contain / by escaping with //. E.g. the path Europe/Berlin//Amsterdam will be interpreted as ['Europe', 'Berlin/Amsterdam']. An uneven amount of slashes will be interpreted as the following segment starting with one or more slashes.",
        "operationId": "UpdateResource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Resource Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Resource represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceUpdateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/resources/{resourceId}/absences/{absenceId}": {
      "get": {
        "tags": [
          "Absences"
        ],
        "summary": "Get Absences by ID",
        "description": "Returns the individual absence specified by the given ID.",
        "operationId": "GetAbsenceById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Resource Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "absenceId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Absence Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AbsenceResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "delete": {
        "tags": [
          "Absences"
        ],
        "summary": "Delete Absence",
        "description": "Deletes an absence.",
        "operationId": "DeleteAbsence",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Resource Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "absenceId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Absence Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "patch": {
        "tags": [
          "Absences"
        ],
        "summary": "Update Absences",
        "description": "Use this request to update an absence.",
        "operationId": "UpdateAbsences",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Resource Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "absenceId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Absence Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Absence in a given time period represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAbsenceRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AbsenceResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/obsTypes/{obsTypeId}": {
      "get": {
        "tags": [
          "OBS"
        ],
        "summary": "Get an OBS Type by ID",
        "description": "This endpoint is for OBS types only. To get OBS units, use /obsTypes/<obs-type-id>/obsUnits",
        "operationId": "GetObsTypeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "obsTypeId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Obs Type Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObsTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "delete": {
        "tags": [
          "OBS"
        ],
        "summary": "Delete an OBS Type by ID",
        "description": "Delete the OBS type specified by the given ID. If the OBS type with the given ID does not exist, the request will fail.",
        "operationId": "DeleteObsType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "obsTypeId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Obs Type Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "patch": {
        "tags": [
          "OBS"
        ],
        "summary": "Update OBS Types",
        "description": "Performs an update on an OBS type specified by the given ID.",
        "operationId": "UpdateObsType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "obsTypeId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Obs Type Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "OBS Type represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObsTypeUpdateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObsTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/obsTypes/{obsTypeId}/obsUnits/{obsUnitId}": {
      "get": {
        "tags": [
          "OBS"
        ],
        "summary": "Get an OBS Unit",
        "description": "This endpoint returns a single OBS unit.",
        "operationId": "GetObsUnit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "obsTypeId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Obs Type Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "obsUnitId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Obs Unit Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObsUnitResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "delete": {
        "tags": [
          "OBS"
        ],
        "summary": "Delete an OBS Unit by ID",
        "description": "Deletes the OBS unit specified by the given ID. If the OBS unit with the given ID does not exist, the request will fail.",
        "operationId": "DeleteObsUnit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "obsTypeId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Obs Type Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "obsUnitId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Obs Unit Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "patch": {
        "tags": [
          "OBS"
        ],
        "summary": "Update an OBS Unit",
        "description": "Updates a single OBS unit's name or moves it to a different parent.",
        "operationId": "UpdateObsUnit",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "obsTypeId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Obs Type Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "obsUnitId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Obs Unit Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "obsUnitUpdateRequest",
            "description": "OBS Unit represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObsUnitUpdateRequest"
            },
            "x-ms-summary": "Obs Unit Update Request"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObsUnitResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/calendars/{calendarId}": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Get Calendars by ID",
        "description": "Get one calendar in your Meisterplan system. Use the special ID defaultCalendar to get the default calendar.",
        "operationId": "GetCalendarById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "calendarId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Calendar Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CalendarResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "delete": {
        "tags": [
          "Calendars"
        ],
        "summary": "Delete Calendars",
        "description": "Deletes a calendar in your Meisterplan system. Please note that the default calendar or a parent of the default calendar cannot be deleted.",
        "operationId": "DeleteCalendarById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "calendarId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Calendar Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      },
      "patch": {
        "tags": [
          "Calendars"
        ],
        "summary": "Update Calendars",
        "description": "Perform an update on a calendar specified by the given ID.\n\nPaths\n\nPaths delimited by / (e.g. in calendars and OBS unit paths) may define path segments which contain / by escaping with //. E.g. the path Europe/Berlin//Amsterdam will be interpreted as ['Europe', 'Berlin/Amsterdam']. An uneven amount of slashes will be interpreted as the following segment starting with one or more slashes.",
        "operationId": "UpdateCalendar",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "calendarId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Calendar Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Calendar represented by a JSON document.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarUpdateRequest"
            },
            "x-ms-summary": "Payload"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CalendarResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "tags": [
          "Users (Premium)"
        ],
        "summary": "Get a List of Users",
        "description": "Returns a list of users. Allows filtering by userName or externalId.",
        "operationId": "GetAllUsers_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pageAfter",
            "description": "The cursor after which to retrieve results. The cursor can be taken from a preceding request.",
            "type": "string",
            "x-ms-summary": "Page After",
            "x-example": "opaque cursor"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page Size",
            "type": "integer",
            "default": 100,
            "maximum": 200,
            "minimum": 0,
            "x-ms-summary": "Page Size",
            "x-example": "100"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Stringified JSON object with a subset of properties of the expected object.",
            "type": "string",
            "x-ms-summary": "Filter",
            "x-example": "{ \"userName\": \"myUserName\" }"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseUserResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "tags": [
          "Users (Premium)"
        ],
        "summary": "Get a User by ID",
        "description": "Returns a user.",
        "operationId": "GetUser_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "User Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get a List of Scenarios",
        "description": "It returns a list of scenarios",
        "operationId": "GetAllScenarios",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseScenarioResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get Scenarios by ID",
        "description": "Returns the individual scenario specified by the given ID. HINT: You can use \"planOfRecord\" as the ID for the plan of record scenario.",
        "operationId": "GetScenarioById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScenarioResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/roleCapacities": {
      "get": {
        "tags": [
          "Role Capacities"
        ],
        "summary": "Get the Capacity Segments of All Roles",
        "description": "Returns the capacity segments for all roles. If no capacity segments exist for a given role, its role capacities will be empty.",
        "operationId": "GetAllRoleCapacities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseRoleWithRoleCapacityResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/comments": {
      "get": {
        "tags": [
          "Project Comments"
        ],
        "summary": "Get a List of Project Comments",
        "description": "Returns a list of project comments.",
        "operationId": "GetAllProjectComments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pageAfter",
            "description": "The cursor after which to retrieve results. The cursor can be taken from a preceding request.",
            "type": "string",
            "x-ms-summary": "Page After",
            "x-example": "opaque cursor"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page Size",
            "type": "integer",
            "default": 100,
            "maximum": 100,
            "minimum": 1,
            "x-ms-summary": "Page Size",
            "x-example": "100"
          },
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseProjectCommentResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/comments/{commentId}": {
      "get": {
        "tags": [
          "Project Comments"
        ],
        "summary": "Get a Project Comment by ID",
        "description": "Returns a project comment.",
        "operationId": "GetProjectComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Comment Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectCommentResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/allocationComments": {
      "get": {
        "tags": [
          "Allocation Comments"
        ],
        "summary": "Get a List of Allocation Comments",
        "description": "Returns a list of allocation comments.",
        "operationId": "GetAllAllocationComments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pageAfter",
            "description": "The cursor after which to retrieve results. The cursor can be taken from a preceding request.",
            "type": "string",
            "x-ms-summary": "Page After",
            "x-example": "opaque cursor"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page Size",
            "type": "integer",
            "default": 100,
            "maximum": 100,
            "minimum": 1,
            "x-ms-summary": "Page Size",
            "x-example": "100"
          },
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedResponseAllocationCommentResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/projects/{projectId}/allocationComments/{allocationCommentId}": {
      "get": {
        "tags": [
          "Allocation Comments"
        ],
        "summary": "Get an Allocation Comment by ID",
        "description": "Returns an allocation comment.",
        "operationId": "GetAllocationComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "projectId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Project Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "allocationCommentId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Allocation Comment Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AllocationCommentResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/portfolios": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get a List of Portfolios",
        "description": "Returns a list of all available portfolios. If you do not have the right to view any portfolio, Returns a list of all available portfolios that you have the right to access via your API token. If you do not have the right to view any portfolio, an empty list will be returned.",
        "operationId": "GetAllPortfolios",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponsePortfolioResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/meta/project/dynamicSchema": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Project Dynamic Schema",
        "description": "Returns swagger schema for project entity.",
        "operationId": "GetProjectDynamicSchema",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "mode",
            "required": true,
            "type": "string",
            "enum": [
              "CREATE_INPUT",
              "UPDATE_INPUT",
              "OUTPUT"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SchemaResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/v1/meta/obs/dynamicSchema": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "OBS Dynamic Schema",
        "description": "Returns swagger schema for OBS units.",
        "operationId": "GetObsDynamicSchema",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "mode",
            "required": true,
            "type": "string",
            "enum": [
              "CREATE_INPUT",
              "UPDATE_INPUT",
              "OUTPUT"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SchemaResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/v1/meta/notification/dynamicSchema": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Notification Dynamic Schema",
        "description": "Returns swagger schema for webhook notifications.",
        "operationId": "GetNotificationDynamicSchema",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SchemaResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/v1/me": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Me",
        "description": "Returns information about the connected user.",
        "operationId": "GetMe",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MeResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "x-ms-visibility": "internal"
      }
    },
    "/v1/businessGoals": {
      "get": {
        "tags": [
          "Business Goals"
        ],
        "summary": "Business Goals",
        "description": "Returns all business goals",
        "operationId": "GetAllBusinessGoals",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResponseBusinessGoalDefinitionResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/v1/scenarios/{scenarioId}/milestoneDependencies/{milestoneDependencyId}": {
      "delete": {
        "tags": [
          "Milestone Dependencies"
        ],
        "summary": "Delete Milestone Dependencies",
        "description": "Deletes a milestone dependency in a given scenario.",
        "operationId": "DeleteMilestoneDependency",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scenarioId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Scenario Id",
            "x-ms-url-encoding": "single",
            "x-example": "UUID"
          },
          {
            "in": "path",
            "name": "milestoneDependencyId",
            "description": "Internal Meisterplan identifier",
            "required": true,
            "type": "string",
            "x-ms-summary": "Milestone Dependency Id",
            "x-ms-url-encoding": "single",
            "x-example": "ID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    }
  },
  "definitions": {
    "Milestone": {
      "required": [
        "date",
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Completion Initiation Phase",
          "x-ms-summary": "Name"
        },
        "date": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Date"
        },
        "projectPhase": {
          "$ref": "#/definitions/ProjectPhase"
        }
      },
      "x-ms-summary": "Items"
    },
    "ProjectPhase": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The project phase must exist prior to creation. It will not be implicitly created.",
          "type": "string",
          "example": "Initiation",
          "x-ms-summary": "Name"
        }
      }
    },
    "ReplaceMilestonesRequest": {
      "required": [
        "items"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Milestone"
          },
          "x-ms-summary": "Items"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The financials category must exist prior to creation. It will not be implicitly created.",
          "type": "string",
          "example": "ROI",
          "x-ms-summary": "Name"
        }
      }
    },
    "FinancialEvent": {
      "required": [
        "amount",
        "timing",
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "CAPEX",
            "OPEX",
            "BENEFIT"
          ],
          "type": "string",
          "x-ms-summary": "Type"
        },
        "amount": {
          "format": "double",
          "minimum": 0,
          "type": "number",
          "example": 2000,
          "x-ms-summary": "Amount"
        },
        "timing": {
          "$ref": "#/definitions/Timing"
        },
        "description": {
          "type": "string",
          "example": "New notebook",
          "x-ms-summary": "Description"
        },
        "category": {
          "$ref": "#/definitions/Category"
        }
      },
      "x-ms-summary": "Items"
    },
    "FinancialsReplaceRequest": {
      "required": [
        "items"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FinancialEvent"
          },
          "x-ms-summary": "Items"
        }
      }
    },
    "Timing": {
      "required": [
        "on"
      ],
      "type": "object",
      "properties": {
        "on": {
          "description": "Milestone is only valid in combination with a value in the field milestoneId. Date is only valid in combination with a value in the field dueDate.",
          "enum": [
            "ProjectStart",
            "ProjectFinish",
            "Milestone",
            "Date"
          ],
          "type": "string",
          "x-ms-summary": "On"
        },
        "milestoneId": {
          "description": "Is only valid in combination with on: Milestone. The milestone must exist in the project. It will not be implicitly created.",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Milestone ID"
        },
        "dueDate": {
          "description": "Is only valid in combination with on: Date (format: YYYY-MM-DD).",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Due Date"
        }
      }
    },
    "FinancialActualsCreateOrReplaceRequest": {
      "required": [
        "amount",
        "bookingDate",
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "CAPEX",
            "OPEX",
            "BENEFIT"
          ],
          "type": "string",
          "x-ms-summary": "Type"
        },
        "amount": {
          "format": "double",
          "minimum": 0,
          "type": "number",
          "example": 2000,
          "x-ms-summary": "Amount"
        },
        "bookingDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Booking Date"
        },
        "description": {
          "type": "string",
          "example": "New notebook",
          "x-ms-summary": "Description"
        },
        "category": {
          "$ref": "#/definitions/Category"
        }
      },
      "x-ms-summary": "Items"
    },
    "FinancialActualsReplaceRequest": {
      "required": [
        "items"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FinancialActualsCreateOrReplaceRequest"
          },
          "x-ms-summary": "Items"
        }
      }
    },
    "AllocatedEntity": {
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The id of the entity to which this allocation is linked. Set type to RESOLVE_BY_KEY_OR_NAME to resolve resource keys or role names automatically instead.",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "type": {
          "description": "Control how the value in the field id is interpreted. RESOURCE resolves resources by UUID. ROLE resolves roles by UUID. RESOLVE_BY_KEY_OR_NAME resolves either resources by resource key or roles by role name.",
          "enum": [
            "ROLE",
            "RESOURCE",
            "RESOLVE_BY_KEY_OR_NAME"
          ],
          "type": "string",
          "example": "RESOURCE",
          "x-ms-summary": "Type"
        },
        "projectRole": {
          "description": "The role id to which this allocation is linked. This field is only valid in combination with the types RESOURCE or RESOLVE_BY_KEY_OR_NAME. If type is set to RESOLVE_BY_KEY_OR_NAME, projectRole is resolved by name.",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Project Role"
        }
      }
    },
    "Allocation": {
      "required": [
        "allocatedEntity"
      ],
      "type": "object",
      "properties": {
        "allocatedEntity": {
          "$ref": "#/definitions/AllocatedEntity"
        },
        "segments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllocationSegment"
          },
          "example": [
            {
              "start": "2019-01-31T00:00:00.0000000+00:00",
              "finish": "2019-12-31T00:00:00.0000000+00:00",
              "fte": 0.5
            }
          ],
          "x-ms-summary": "Segments"
        }
      },
      "x-ms-summary": "Items"
    },
    "AllocationReplaceRequest": {
      "required": [
        "items"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Allocation"
          },
          "x-ms-summary": "Items"
        }
      }
    },
    "AllocationSegment": {
      "required": [
        "finish",
        "start"
      ],
      "type": "object",
      "properties": {
        "start": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Start"
        },
        "finish": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Finish"
        },
        "fte": {
          "format": "double",
          "description": "The request accepts either FTE, hours or days.",
          "type": "number",
          "x-ms-summary": "Fte"
        },
        "days": {
          "format": "double",
          "description": "The request accepts either FTE, hours or days.",
          "type": "number",
          "x-ms-summary": "Days"
        },
        "hours": {
          "format": "double",
          "description": "The request accepts either FTE, hours or days.",
          "type": "number",
          "x-ms-summary": "Hours"
        }
      },
      "example": [
        {
          "start": "2019-01-31T00:00:00.0000000+00:00",
          "finish": "2019-12-31T00:00:00.0000000+00:00",
          "fte": 0.5
        }
      ],
      "x-ms-summary": "Segments"
    },
    "CreateAbsenceRequest": {
      "required": [
        "finish",
        "start"
      ],
      "type": "object",
      "properties": {
        "start": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Start"
        },
        "finish": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-12-31",
          "x-ms-summary": "Finish"
        },
        "startDayType": {
          "description": "Default is FULL_DAY",
          "enum": [
            "FULL_DAY",
            "HALF_DAY"
          ],
          "type": "string",
          "example": "FULL_DAY",
          "x-ms-summary": "Start Day Type"
        },
        "finishDayType": {
          "description": "Default is FULL_DAY",
          "enum": [
            "FULL_DAY",
            "HALF_DAY"
          ],
          "type": "string",
          "example": "FULL_DAY",
          "x-ms-summary": "Finish Day Type"
        }
      },
      "x-ms-summary": "Items"
    },
    "ReplaceAbsencesRequest": {
      "required": [
        "items"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateAbsenceRequest"
          },
          "x-ms-summary": "Items"
        }
      }
    },
    "WebhookCreateRequest": {
      "required": [
        "callbackUrl",
        "eventTypes",
        "scenarioId"
      ],
      "type": "object",
      "properties": {
        "callbackUrl": {
          "description": "Has to be a valid https URL.",
          "type": "string",
          "x-ms-summary": "Callback URL",
          "x-ms-visibility": "internal",
          "x-ms-notification-url": true
        },
        "name": {
          "description": "If not set the callback URL is also used for the name.",
          "type": "string",
          "x-ms-summary": "Name",
          "x-ms-visibility": "internal"
        },
        "eventTypes": {
          "description": "At least one event type needs to be provided.",
          "type": "array",
          "items": {
            "description": "At least one event type needs to be provided.",
            "enum": [
              "PROJECT_CREATE",
              "PROJECT_UPDATE",
              "PROJECT_DELETE"
            ],
            "type": "string",
            "x-ms-summary": "Event Types"
          },
          "x-ms-summary": "Event Types"
        },
        "scenarioId": {
          "description": "The scenario you want to subscribe to.",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Scenario ID",
          "x-ms-dynamic-values": {
            "operationId": "GetAllScenarios",
            "value-path": "id",
            "value-title": "name",
            "value-collection": "items"
          }
        },
        "projectId": {
          "description": "The projectId is optional. It is only required if you want to subscribe to a specific project.",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Project ID"
        },
        "secret": {
          "description": "The secret is optional. It is used to create a HmacSHA256 signature of the notification payload that is sent to the callback URL.",
          "type": "string",
          "x-ms-summary": "Secret",
          "x-ms-visibility": "internal"
        }
      }
    },
    "UserRefResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "User ID"
        },
        "displayName": {
          "type": "string",
          "example": "Doe, Jane",
          "x-ms-summary": "User Display Name"
        }
      },
      "x-ms-summary": "User Ref"
    },
    "WebhookResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "x-ms-summary": "Name"
        },
        "callbackUrl": {
          "type": "string",
          "x-ms-summary": "Callback URL"
        },
        "eventTypes": {
          "type": "array",
          "items": {
            "enum": [
              "PROJECT_CREATE",
              "PROJECT_UPDATE",
              "PROJECT_DELETE"
            ],
            "type": "string",
            "x-ms-summary": "Event Types"
          },
          "x-ms-summary": "Event Types"
        },
        "scenarioId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Scenario ID"
        },
        "projectId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Project ID"
        },
        "secret": {
          "type": "string",
          "x-ms-summary": "Secret"
        },
        "status": {
          "enum": [
            "SUSPENDED",
            "ACTIVE"
          ],
          "type": "string",
          "x-ms-summary": "Status"
        },
        "createdBy": {
          "$ref": "#/definitions/UserRefResponse"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string",
          "example": "2022-12-22T16:50:10.0000000+00:00",
          "x-ms-summary": "Created Date"
        }
      },
      "x-ms-summary": "Webhook"
    },
    "CapacitySegment": {
      "description": "Role capacity segments to update for this role.",
      "type": "object",
      "properties": {
        "start": {
          "format": "date",
          "type": "string",
          "example": "2019-01-31"
        },
        "finish": {
          "format": "date",
          "type": "string",
          "example": "2019-12-31"
        },
        "fte": {
          "format": "double",
          "description": "The request accepts either FTE, hours or days.",
          "type": "number"
        },
        "days": {
          "format": "double",
          "description": "The request accepts either FTE, hours or days.",
          "type": "number"
        },
        "hours": {
          "format": "double",
          "description": "The request accepts either FTE, hours or days.",
          "type": "number"
        }
      },
      "example": [
        {
          "start": "2019-01-31T00:00:00.0000000+00:00",
          "finish": "2019-12-31T00:00:00.0000000+00:00",
          "fte": 0.5
        }
      ]
    },
    "RoleCapacityUpdateRequest": {
      "required": [
        "segments"
      ],
      "type": "object",
      "properties": {
        "segments": {
          "description": "Role capacity segments to update for this role.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacitySegment"
          },
          "example": [
            {
              "start": "2019-01-31T00:00:00.0000000+00:00",
              "finish": "2019-12-31T00:00:00.0000000+00:00",
              "fte": 0.5
            }
          ]
        }
      }
    },
    "ListResponseRoleCapacityResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleCapacityResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "RoleCapacityResponse": {
      "required": [
        "fte"
      ],
      "type": "object",
      "properties": {
        "start": {
          "format": "date",
          "description": "Start date of this role capacity segment. Optional.",
          "type": "string",
          "example": "2019-01-31"
        },
        "finish": {
          "format": "date",
          "description": "End date of this role capacity segment. Optional.",
          "type": "string",
          "example": "2019-12-31"
        },
        "fte": {
          "format": "double",
          "description": "The role's capacity in FTE",
          "type": "number",
          "example": 0.5
        }
      },
      "x-ms-summary": "Role Capacity"
    },
    "ApprovedTotalEffort": {
      "type": "object",
      "properties": {
        "hours": {
          "description": "The request accepts either hours or days.",
          "type": "string",
          "example": "25.4",
          "x-ms-summary": "Hours"
        },
        "days": {
          "description": "The request accepts either hours or days.",
          "type": "string",
          "example": "80.5",
          "x-ms-summary": "Days"
        }
      }
    },
    "BusinessGoal": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Missing values will be created automatically\n\nIf you import an unknown value, it will be automatically created for you in Meisterplan.",
          "type": "string",
          "example": "Change the Business",
          "x-ms-summary": "Name"
        }
      }
    },
    "CustomFieldRequest": {
      "description": "Missing lookup values created automatically\n\nIf you create or update a project with a custom lookup field, unknown lookup values will be automatically created.",
      "type": "object",
      "x-ms-summary": "Custom Fields"
    },
    "Manager": {
      "type": "object",
      "properties": {
        "id": {
          "description": "If you specify the id to reference a project manager you must omit the resourceKey property.",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "resourceKey": {
          "description": "If you specify the resourceKey to reference a project manager you must omit the id property.",
          "type": "string",
          "example": "KMY",
          "x-ms-summary": "Resource Key"
        }
      }
    },
    "ObsUnitReferenceRequest": {
      "type": "object",
      "properties": {
        "path": {
          "description": "Missing OBS paths will be created implicitly\n\nIf you send an OBS path, all necessary path segments will be created for you in Meisterplan automatically.\n\nPaths\n\nPaths delimited by / (e.g. in calendars and OBS unit paths) may define path segments which contain / by escaping with //. E.g. the path Europe/Berlin//Amsterdam will be interpreted as ['Europe', 'Berlin/Amsterdam']. An uneven amount of slashes will be interpreted as the following segment starting with one or more slashes.",
          "type": "string",
          "x-ms-summary": "Path"
        },
        "id": {
          "description": "If you specify the id to reference an OBS unit you must omit the path property.",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        }
      },
      "example": {
        "Department": {
          "path": "Services/Consulting/IT"
        }
      },
      "x-ms-summary": "OBS Units"
    },
    "Priority": {
      "required": [
        "rankCategory"
      ],
      "type": "object",
      "properties": {
        "rankCategory": {
          "$ref": "#/definitions/RankCategory"
        }
      }
    },
    "Program": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        }
      }
    },
    "ProjectCreateRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "projectKey": {
          "description": "Must be unique. If empty, value will be generated.",
          "type": "string",
          "example": "ID-15",
          "x-ms-summary": "Project Key"
        },
        "name": {
          "type": "string",
          "example": "Meisterplan API v1.1",
          "x-ms-summary": "Name"
        },
        "projectType": {
          "$ref": "#/definitions/ProjectType"
        },
        "start": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Start"
        },
        "finish": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Finish"
        },
        "externalId": {
          "description": "Must be unique. If empty, value will be generated.",
          "type": "string",
          "example": "myCustomID",
          "x-ms-summary": "External ID"
        },
        "costType": {
          "description": "default: see Meisterplan documentation.",
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "type": "string",
          "example": "CAPEX",
          "x-ms-summary": "Cost Type"
        },
        "notes": {
          "type": "string",
          "x-ms-summary": "Notes"
        },
        "manager": {
          "$ref": "#/definitions/Manager"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "businessGoal": {
          "$ref": "#/definitions/BusinessGoal"
        },
        "approvedTotalEffort": {
          "$ref": "#/definitions/ApprovedTotalEffort"
        },
        "approvedBudget": {
          "format": "double",
          "type": "number",
          "example": 10400.51,
          "x-ms-summary": "Approved Budget"
        },
        "approvedCapexBudget": {
          "format": "double",
          "type": "number",
          "example": 6800.51,
          "x-ms-summary": "Approved CapEx Budget"
        },
        "approvedOpexBudget": {
          "format": "double",
          "type": "number",
          "example": 4600,
          "x-ms-summary": "Approved OpEx Budget"
        },
        "customFields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CustomFieldRequest"
          },
          "x-ms-summary": "Custom Fields"
        },
        "obsUnits": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceRequest"
          },
          "example": {
            "Department": {
              "path": "Services/Consulting/IT"
            }
          },
          "x-ms-summary": "OBS Units"
        },
        "program": {
          "$ref": "#/definitions/Program"
        },
        "priority": {
          "$ref": "#/definitions/Priority"
        }
      },
      "x-ms-dynamic-schema": {
        "operationId": "GetProjectDynamicSchema",
        "parameters": {
          "mode": "CREATE_INPUT"
        },
        "value-path": "schema"
      }
    },
    "ProjectType": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "example": "Project",
          "x-ms-summary": "Value"
        }
      }
    },
    "RankCategory": {
      "required": [
        "category",
        "position"
      ],
      "type": "object",
      "properties": {
        "category": {
          "enum": [
            "ABOVE_MUST_HAVE",
            "REGULAR",
            "BELOW_CUT_OFF"
          ],
          "type": "string",
          "example": "ABOVE_MUST_HAVE",
          "x-ms-summary": "Category"
        },
        "position": {
          "enum": [
            "LAST",
            "FIRST"
          ],
          "type": "string",
          "example": "LAST",
          "x-ms-summary": "Position"
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "value": {
          "description": "Missing values will be created automatically\n\nIf you import an unknown value, it will be automatically created for you in Meisterplan.",
          "type": "string",
          "example": "Approved",
          "x-ms-summary": "Value"
        }
      }
    },
    "ApprovedTotalEffortResponse": {
      "type": "object",
      "properties": {
        "hours": {
          "format": "double",
          "type": "number",
          "example": 104.5,
          "x-ms-summary": "Hours"
        }
      },
      "x-ms-summary": "Approved Total Effort"
    },
    "BusinessGoalResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Change the Business",
          "x-ms-summary": "Name"
        }
      },
      "x-ms-summary": "Business Goal"
    },
    "CustomFieldResponse": {
      "type": "object",
      "properties": {
        "value": {
          "description": "Value may be of type string, number, boolean, or null depending on the custom field definition and its current value.",
          "x-ms-summary": "Value"
        }
      },
      "example": {
        "cust_stage_gate": {
          "value": "Approved"
        },
        "cust_risk": {
          "value": "Medium"
        },
        "cust_resource": {
          "id": "UUID",
          "resourceKey": "KMY"
        },
        "cust_direction": {
          "display": "North, East",
          "items": [
            {
              "value": "North"
            },
            {
              "value": "East"
            }
          ]
        }
      }
    },
    "ObsUnitReferenceResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "path": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Path"
        },
        "displayName": {
          "description": "The display name is rendered the same way as it is in the Meisterplan application's user interface",
          "type": "string",
          "x-ms-summary": "Display Name"
        }
      },
      "example": {
        "Department": {
          "id": "UUID",
          "path": "Services/Consulting/IT",
          "displayName": "Services > Consulting > IT"
        }
      },
      "x-ms-summary": "Obs Unit Reference"
    },
    "PriorityResponse": {
      "type": "object",
      "properties": {
        "rankCategory": {
          "enum": [
            "ABOVE_MUST_HAVE",
            "BELOW_CUT_OFF",
            "REGULAR"
          ],
          "type": "string",
          "example": "REGULAR",
          "x-ms-summary": "Rank Category"
        }
      },
      "x-ms-summary": "Priority"
    },
    "ProgramLinkResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        }
      },
      "x-ms-summary": "Program"
    },
    "ProjectResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID"
        },
        "projectKey": {
          "type": "string",
          "example": "ID-15"
        },
        "name": {
          "type": "string",
          "example": "Meisterplan API v1.1"
        },
        "projectType": {
          "$ref": "#/definitions/ProjectTypeFieldResponse"
        },
        "externalId": {
          "type": "string",
          "example": "myCustomID"
        },
        "start": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31"
        },
        "finish": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31"
        },
        "manager": {
          "$ref": "#/definitions/ResourceReferenceResponse"
        },
        "costType": {
          "description": "default: see Meisterplan documentation.",
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "type": "string",
          "example": "CAPEX"
        },
        "status": {
          "$ref": "#/definitions/StatusFieldResponse"
        },
        "notes": {
          "type": "string"
        },
        "businessGoal": {
          "$ref": "#/definitions/BusinessGoalResponse"
        },
        "approvedTotalEffort": {
          "$ref": "#/definitions/ApprovedTotalEffortResponse"
        },
        "approvedBudget": {
          "format": "double",
          "type": "number",
          "example": 10400.51,
          "x-ms-summary": "Approved Budget"
        },
        "approvedCapexBudget": {
          "format": "double",
          "type": "number",
          "example": 6800.51,
          "x-ms-summary": "Approved CapEx Budget"
        },
        "approvedOpexBudget": {
          "format": "double",
          "type": "number",
          "example": 4600,
          "x-ms-summary": "Approved OpEx Budget"
        },
        "customFields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CustomFieldResponse"
          },
          "example": {
            "cust_stage_gate": {
              "value": "Approved"
            },
            "cust_risk": {
              "value": "Medium"
            },
            "cust_resource": {
              "id": "UUID",
              "resourceKey": "KMY"
            },
            "cust_direction": {
              "display": "North, East",
              "items": [
                {
                  "value": "North"
                },
                {
                  "value": "East"
                }
              ]
            }
          }
        },
        "obsUnits": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceResponse"
          },
          "example": {
            "Department": {
              "id": "UUID",
              "path": "Services/Consulting/IT",
              "displayName": "Services > Consulting > IT"
            }
          }
        },
        "program": {
          "$ref": "#/definitions/ProgramLinkResponse"
        },
        "viewUrl": {
          "type": "string",
          "example": "https://eu.meisterplan.com/sampleSystem/projects/06ac2271-9143-5518-93dd-4f2e105e9778"
        },
        "lastChanged": {
          "format": "date-time",
          "type": "string",
          "example": "2022-12-22T16:50:10.0000000+00:00"
        },
        "priority": {
          "$ref": "#/definitions/PriorityResponse"
        }
      },
      "x-ms-dynamic-schema": {
        "operationId": "GetProjectDynamicSchema",
        "parameters": {
          "mode": "OUTPUT"
        },
        "value-path": "schema"
      }
    },
    "ProjectTypeFieldResponse": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "example": "Project",
          "x-ms-summary": "Value"
        }
      },
      "x-ms-summary": "Project Type"
    },
    "ResourceReferenceResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "resourceKey": {
          "type": "string",
          "example": "KMY",
          "x-ms-summary": "Resource Key"
        }
      }
    },
    "StatusFieldResponse": {
      "type": "object",
      "properties": {
        "value": {
          "description": "If you have no permission to this field, the value is null.",
          "type": "string",
          "example": "Approved",
          "x-ms-summary": "Value"
        }
      },
      "x-ms-summary": "Status"
    },
    "MilestoneCreateRequest": {
      "required": [
        "date",
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Completion Initiation Phase",
          "x-ms-summary": "Name"
        },
        "date": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Date"
        },
        "projectPhase": {
          "$ref": "#/definitions/ProjectPhase"
        }
      }
    },
    "MilestoneResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "example": "Completion Initiation Phase",
          "x-ms-summary": "Name"
        },
        "date": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Date"
        },
        "projectPhase": {
          "$ref": "#/definitions/ProjectPhaseResponse"
        }
      },
      "x-ms-summary": "Milestone"
    },
    "ProjectPhaseResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Initiation",
          "x-ms-summary": "Name"
        }
      },
      "x-ms-summary": "Project Phase"
    },
    "FinancialsCreateRequest": {
      "required": [
        "amount",
        "timing",
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "CAPEX",
            "OPEX",
            "BENEFIT"
          ],
          "type": "string",
          "x-ms-summary": "Type"
        },
        "amount": {
          "format": "double",
          "minimum": 0,
          "type": "number",
          "example": 2000,
          "x-ms-summary": "Amount"
        },
        "timing": {
          "$ref": "#/definitions/Timing"
        },
        "description": {
          "type": "string",
          "example": "New notebook",
          "x-ms-summary": "Description"
        },
        "category": {
          "$ref": "#/definitions/Category"
        }
      }
    },
    "FinanceCategoryResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ROI",
          "x-ms-summary": "Name"
        }
      },
      "x-ms-summary": "Finance Category"
    },
    "FinancialsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "type": {
          "enum": [
            "CAPEX",
            "OPEX",
            "BENEFIT"
          ],
          "type": "string",
          "example": "BENEFIT",
          "x-ms-summary": "Type"
        },
        "amount": {
          "format": "double",
          "type": "number",
          "example": 12.5,
          "x-ms-summary": "Amount"
        },
        "timing": {
          "$ref": "#/definitions/FinancialsTimingResponse"
        },
        "description": {
          "type": "string",
          "x-ms-summary": "Description"
        },
        "category": {
          "$ref": "#/definitions/FinanceCategoryResponse"
        }
      },
      "x-ms-summary": "Financials"
    },
    "FinancialsTimingResponse": {
      "type": "object",
      "properties": {
        "on": {
          "enum": [
            "ProjectStart",
            "ProjectFinish",
            "Milestone",
            "Date"
          ],
          "type": "string",
          "example": "Milestone",
          "x-ms-summary": "On"
        },
        "milestoneId": {
          "description": "Only present when timing type equals Milestone",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Milestone ID"
        },
        "dueDate": {
          "format": "date",
          "type": "string",
          "x-ms-summary": "Due Date"
        }
      },
      "x-ms-summary": "Financials Timing"
    },
    "FinancialActualsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "type": {
          "enum": [
            "CAPEX",
            "OPEX",
            "BENEFIT"
          ],
          "type": "string",
          "example": "BENEFIT",
          "x-ms-summary": "Type"
        },
        "amount": {
          "format": "double",
          "type": "number",
          "example": 12.5,
          "x-ms-summary": "Amount"
        },
        "bookingDate": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Booking Date"
        },
        "description": {
          "type": "string",
          "x-ms-summary": "Description"
        },
        "category": {
          "$ref": "#/definitions/FinanceCategoryResponse"
        }
      },
      "x-ms-summary": "Financial Actuals"
    },
    "AllocatedEntityResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The id of the entity to which this allocation is linked",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "type": {
          "description": "The entity type for this allocation",
          "enum": [
            "ROLE",
            "RESOURCE",
            "RESOLVE_BY_KEY_OR_NAME"
          ],
          "type": "string",
          "x-ms-summary": "Type"
        },
        "projectRole": {
          "description": "Will only be set if type equals RESOURCE",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Project Role"
        }
      },
      "x-ms-summary": "Allocated Entity"
    },
    "AllocationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "This allocation's ID",
          "type": "string",
          "example": "UUID_UUID",
          "x-ms-summary": "ID"
        },
        "allocatedEntity": {
          "$ref": "#/definitions/AllocatedEntityResponse"
        },
        "segments": {
          "description": "The allocation's time segments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllocationSegmentResponse"
          },
          "x-ms-summary": "Segments"
        }
      },
      "x-ms-summary": "Allocation"
    },
    "AllocationSegmentResponse": {
      "description": "The allocation's time segments",
      "type": "object",
      "properties": {
        "start": {
          "format": "date",
          "description": "Start date of this allocation",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Start"
        },
        "finish": {
          "format": "date",
          "description": "End date of this allocation",
          "type": "string",
          "example": "2019-12-31",
          "x-ms-summary": "Finish"
        },
        "hours": {
          "format": "double",
          "description": "Allocation value in hours",
          "type": "number",
          "example": 104.5,
          "x-ms-summary": "Hours"
        }
      },
      "x-ms-summary": "Allocation Segment"
    },
    "ActualTimeWorkedCreateOrUpdateRequest": {
      "required": [
        "bookedEntity",
        "bookings"
      ],
      "type": "object",
      "properties": {
        "bookedEntity": {
          "$ref": "#/definitions/BookedEntity"
        },
        "bookings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bookings"
          },
          "example": [
            {
              "bookingDate": "2019-01-31T00:00:00.0000000+00:00",
              "hours": 5.5,
              "costPerHour": 12.5,
              "costType": "CAPEX"
            }
          ],
          "x-ms-summary": "Bookings"
        },
        "mode": {
          "enum": [
            "ADD",
            "REPLACE"
          ],
          "type": "string",
          "example": "REPLACE",
          "x-ms-summary": "Mode"
        }
      }
    },
    "BookedEntity": {
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The id of the entity to which this actual time worked entry is linked. Set type to RESOLVE_BY_KEY_OR_NAME to resolve resource keys or role names automatically instead.",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "type": {
          "enum": [
            "ROLE",
            "RESOURCE",
            "RESOLVE_BY_KEY_OR_NAME"
          ],
          "type": "string",
          "example": "RESOURCE",
          "x-ms-summary": "Type"
        }
      }
    },
    "Bookings": {
      "required": [
        "bookingDate",
        "hours"
      ],
      "type": "object",
      "properties": {
        "bookingDate": {
          "format": "date",
          "description": "Date of this booking",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Booking Date"
        },
        "hours": {
          "format": "double",
          "description": "Actual time worked in hours",
          "type": "number",
          "example": 5.5,
          "x-ms-summary": "Hours"
        },
        "costType": {
          "description": "default: see Meisterplan documentation.",
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "type": "string",
          "example": "CAPEX",
          "x-ms-summary": "Cost Type"
        },
        "costPerHour": {
          "format": "double",
          "description": "Cost per hour for this booking",
          "type": "number",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        }
      },
      "example": [
        {
          "bookingDate": "2019-01-31T00:00:00.0000000+00:00",
          "hours": 5.5,
          "costPerHour": 12.5,
          "costType": "CAPEX"
        }
      ],
      "x-ms-summary": "Bookings"
    },
    "ActualTimeWorkedResponse": {
      "type": "object",
      "properties": {
        "bookedEntity": {
          "$ref": "#/definitions/ActualsEntityLinkResponse"
        },
        "bookings": {
          "description": "Booking date and hours of this actual time worked entry",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActualsBookingResponse"
          },
          "x-ms-summary": "Bookings"
        }
      },
      "x-ms-summary": "Actual Time Worked"
    },
    "ActualsBookingResponse": {
      "description": "Booking date and hours of this actual time worked entry",
      "type": "object",
      "properties": {
        "bookingDate": {
          "format": "date",
          "description": "Booking date of this actual time worked entry",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Booking Date"
        },
        "hours": {
          "format": "double",
          "description": "Actual time worked in hours",
          "type": "number",
          "example": 5.5,
          "x-ms-summary": "Hours"
        },
        "costType": {
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "type": "string",
          "example": "CAPEX",
          "x-ms-summary": "Cost Type"
        },
        "costPerHour": {
          "format": "double",
          "type": "number",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        }
      },
      "x-ms-summary": "Actuals Booking"
    },
    "ActualsEntityLinkResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The id of the entity to which this actual time worked entry is linked",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "type": {
          "description": "The entity type for this actual time worked entry",
          "enum": [
            "ROLE",
            "RESOURCE",
            "RESOLVE_BY_KEY_OR_NAME"
          ],
          "type": "string",
          "example": "RESOURCE",
          "x-ms-summary": "Type"
        }
      },
      "x-ms-summary": "Actuals Entity Link"
    },
    "ProgramCreateRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Release road map",
          "x-ms-summary": "Name"
        }
      }
    },
    "ProgramResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "example": "Release road map",
          "x-ms-summary": "Name"
        }
      },
      "x-ms-summary": "Program"
    },
    "Priorities": {
      "required": [
        "items"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriorityEntry"
          },
          "example": [
            {
              "id": "UUID"
            },
            {
              "id": "UUID"
            }
          ],
          "x-ms-summary": "Items"
        },
        "position": {
          "description": "Position can be FIRST or LAST. FIRST is default",
          "enum": [
            "FIRST",
            "LAST"
          ],
          "type": "string",
          "example": "LAST",
          "x-ms-summary": "Position"
        }
      }
    },
    "PrioritiesUpdateRequest": {
      "type": "object",
      "properties": {
        "aboveMustHave": {
          "$ref": "#/definitions/Priorities"
        },
        "regular": {
          "$ref": "#/definitions/Priorities"
        },
        "belowCutOff": {
          "$ref": "#/definitions/Priorities"
        }
      }
    },
    "PriorityEntry": {
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The id value can be a project or a program.",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        }
      },
      "example": [
        {
          "id": "UUID"
        },
        {
          "id": "UUID"
        }
      ],
      "x-ms-summary": "Items"
    },
    "MilestoneDependencyCreateRequest": {
      "required": [
        "fromMilestoneId",
        "toMilestoneId"
      ],
      "type": "object",
      "properties": {
        "fromMilestoneId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "From Milestone ID"
        },
        "toMilestoneId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "To Milestone ID"
        }
      }
    },
    "MilestoneDependencyCreateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID_UUID",
          "x-ms-summary": "ID"
        }
      },
      "x-ms-summary": "Milestone Dependency Create"
    },
    "ResourceManager": {
      "type": "object",
      "properties": {
        "id": {
          "description": "If you specify the id to reference a resource manager you must omit the resourceKey property.",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "resourceKey": {
          "description": "If you specify the resourceKey to reference a resource manager you must omit the id property.",
          "type": "string",
          "example": "KMY",
          "x-ms-summary": "Resource Key"
        }
      }
    },
    "RoleCreateRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Junior Developer",
          "x-ms-summary": "Name"
        },
        "externalId": {
          "description": "Must be unique. If empty, value will be generated.",
          "type": "string",
          "example": "myCustomID",
          "x-ms-summary": "External ID"
        },
        "costType": {
          "description": "default: see Meisterplan documentation.",
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "type": "string",
          "example": "CAPEX",
          "x-ms-summary": "Cost Type"
        },
        "costPerHour": {
          "format": "double",
          "type": "number",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        },
        "obsUnits": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceRequest"
          },
          "example": {
            "Department": {
              "path": "Services/Consulting/IT"
            }
          },
          "x-ms-dynamic-schema": {
            "operationId": "GetObsDynamicSchema",
            "parameters": {
              "mode": "CREATE_INPUT"
            },
            "value-path": "schema"
          }
        },
        "resourceManager": {
          "$ref": "#/definitions/ResourceManager"
        }
      }
    },
    "ResourceManagerResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "resourceKey": {
          "type": "string",
          "x-ms-summary": "Resource Key"
        }
      },
      "x-ms-summary": "Resource Manager"
    },
    "RoleResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "example": "Junior Developer",
          "x-ms-summary": "Name"
        },
        "externalId": {
          "type": "string",
          "example": "myCustomID",
          "x-ms-summary": "External ID"
        },
        "costType": {
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "type": "string",
          "x-ms-summary": "Cost Type"
        },
        "costPerHour": {
          "format": "double",
          "type": "number",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        },
        "obsUnits": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceResponse"
          },
          "example": {
            "Department": {
              "id": "UUID",
              "path": "Services/Consulting/IT",
              "displayName": "Services > Consulting > IT"
            }
          },
          "x-ms-dynamic-schema": {
            "operationId": "GetObsDynamicSchema",
            "parameters": {
              "mode": "OUTPUT"
            },
            "value-path": "schema"
          }
        },
        "resourceManager": {
          "$ref": "#/definitions/ResourceManagerResponse"
        }
      }
    },
    "Calendar": {
      "type": "object",
      "properties": {
        "path": {
          "description": "default: uses default calendar if path and id are null. format: See endpoint description. If you specify the path to reference a calendar you must omit the id property.",
          "type": "string",
          "example": "Default",
          "x-ms-summary": "Path"
        },
        "id": {
          "description": "default: uses default calendar if path and id are null. If you specify the id to reference a calendar you must omit the path property.",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        }
      }
    },
    "EmploymentPeriod": {
      "type": "object",
      "properties": {
        "startDate": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Start Date"
        },
        "terminationDate": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-12-31",
          "x-ms-summary": "Termination Date"
        }
      }
    },
    "PostalAddress": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string",
          "example": "Tübingen",
          "x-ms-summary": "City"
        },
        "country": {
          "type": "string",
          "example": "Germany",
          "x-ms-summary": "Country"
        },
        "postalCode": {
          "type": "string",
          "example": "72072",
          "x-ms-summary": "Postal Code"
        }
      }
    },
    "PrimaryRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        }
      }
    },
    "ResourceCreateRequest": {
      "required": [
        "lastName"
      ],
      "type": "object",
      "properties": {
        "resourceKey": {
          "description": "Must be unique. If empty, value will be generated.",
          "type": "string",
          "example": "KMY",
          "x-ms-summary": "Resource Key"
        },
        "firstName": {
          "type": "string",
          "example": "Jane",
          "x-ms-summary": "First Name"
        },
        "lastName": {
          "type": "string",
          "example": "Doe",
          "x-ms-summary": "Last Name"
        },
        "externalId": {
          "description": "Must be unique. If empty, value will be generated.",
          "type": "string",
          "example": "myCustomID",
          "x-ms-summary": "External ID"
        },
        "emailAddress": {
          "type": "string",
          "example": "jane.doe@meisterplan.com",
          "x-ms-summary": "Email Address"
        },
        "postalAddress": {
          "$ref": "#/definitions/PostalAddress"
        },
        "employmentPeriod": {
          "$ref": "#/definitions/EmploymentPeriod"
        },
        "externalResource": {
          "description": "default: false",
          "type": "boolean",
          "x-ms-summary": "External Resource"
        },
        "costPerHour": {
          "format": "double",
          "type": "number",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        },
        "primaryRole": {
          "$ref": "#/definitions/PrimaryRole"
        },
        "calendar": {
          "$ref": "#/definitions/Calendar"
        },
        "obsUnits": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceRequest"
          },
          "example": {
            "Department": {
              "path": "Services/Consulting/IT"
            }
          },
          "x-ms-dynamic-schema": {
            "operationId": "GetObsDynamicSchema",
            "parameters": {
              "mode": "CREATE_INPUT"
            },
            "value-path": "schema"
          }
        },
        "skills": {
          "description": "Missing values will be created automatically\n\nIf you import an unknown value, it will be automatically created for you in Meisterplan.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Java",
            "Kotlin"
          ],
          "x-ms-summary": "Skills"
        },
        "resourceManager": {
          "$ref": "#/definitions/ResourceManager"
        }
      }
    },
    "EmploymentPeriodResponse": {
      "type": "object",
      "properties": {
        "startDate": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Start Date"
        },
        "terminationDate": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-12-31",
          "x-ms-summary": "Termination Date"
        }
      },
      "x-ms-summary": "Employment Period"
    },
    "PostalAddressResponse": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string",
          "example": "Tübingen",
          "x-ms-summary": "City"
        },
        "country": {
          "type": "string",
          "example": "Germany",
          "x-ms-summary": "Country"
        },
        "postalCode": {
          "type": "string",
          "example": "72072",
          "x-ms-summary": "Postal Code"
        }
      },
      "x-ms-summary": "Postal Address"
    },
    "PrimaryRoleResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "example": "Junior Developer",
          "x-ms-summary": "Name"
        },
        "externalId": {
          "type": "string",
          "example": "myCustomID",
          "x-ms-summary": "External ID"
        },
        "costType": {
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "type": "string",
          "x-ms-summary": "Cost Type"
        },
        "costPerHour": {
          "format": "double",
          "type": "number",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        },
        "obsUnits": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceResponse"
          },
          "example": {
            "Department": {
              "id": "UUID",
              "path": "Services/Consulting/IT",
              "displayName": "Services > Consulting > IT"
            }
          },
          "x-ms-summary": "OBS Units"
        }
      },
      "x-ms-summary": "Primary Role"
    },
    "ResourceCalendarResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "path": {
          "type": "string",
          "example": "Default",
          "x-ms-summary": "Path"
        }
      },
      "x-ms-summary": "Calendar"
    },
    "ResourceResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "resourceKey": {
          "type": "string",
          "example": "KMY",
          "x-ms-summary": "Resource Key"
        },
        "firstName": {
          "type": "string",
          "example": "Jane",
          "x-ms-summary": "First Name"
        },
        "lastName": {
          "type": "string",
          "example": "Doe",
          "x-ms-summary": "Last Name"
        },
        "externalId": {
          "type": "string",
          "example": "myCustomID",
          "x-ms-summary": "External ID"
        },
        "emailAddress": {
          "type": "string",
          "example": "jane.doe@meisterplan.com",
          "x-ms-summary": "Email Address"
        },
        "postalAddress": {
          "$ref": "#/definitions/PostalAddressResponse"
        },
        "employmentPeriod": {
          "$ref": "#/definitions/EmploymentPeriodResponse"
        },
        "externalResource": {
          "type": "boolean",
          "x-ms-summary": "External Resource"
        },
        "costPerHour": {
          "format": "double",
          "type": "number",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        },
        "primaryRole": {
          "$ref": "#/definitions/PrimaryRoleResponse"
        },
        "calendar": {
          "$ref": "#/definitions/ResourceCalendarResponse"
        },
        "obsUnits": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceResponse"
          },
          "example": {
            "Department": {
              "id": "UUID",
              "path": "Services/Consulting/IT",
              "displayName": "Services > Consulting > IT"
            }
          },
          "x-ms-dynamic-schema": {
            "operationId": "GetObsDynamicSchema",
            "parameters": {
              "mode": "OUTPUT"
            },
            "value-path": "schema"
          }
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "[\"Java\",\"Kotlin\"]",
            "x-ms-summary": "Skills"
          },
          "example": [
            "Java",
            "Kotlin"
          ],
          "x-ms-summary": "Skills"
        },
        "resourceManager": {
          "$ref": "#/definitions/ResourceManagerResponse"
        }
      }
    },
    "CalendarDeviation": {
      "required": [
        "relativeCapacity"
      ],
      "type": "object",
      "properties": {
        "start": {
          "format": "date",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Start"
        },
        "finish": {
          "format": "date",
          "type": "string",
          "example": "2019-12-31",
          "x-ms-summary": "Finish"
        },
        "relativeCapacity": {
          "format": "double",
          "minimum": 0,
          "type": "number",
          "example": 0.5,
          "x-ms-summary": "Relative Capacity"
        }
      }
    },
    "CalendarDeviationUpdateRequest": {
      "required": [
        "deviations"
      ],
      "type": "object",
      "properties": {
        "start": {
          "format": "date",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Start"
        },
        "finish": {
          "format": "date",
          "type": "string",
          "example": "2019-12-31",
          "x-ms-summary": "Finish"
        },
        "deviations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CalendarDeviation"
          }
        }
      }
    },
    "CalendarDeviationResponse": {
      "type": "object",
      "properties": {
        "start": {
          "format": "date",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Start"
        },
        "finish": {
          "format": "date",
          "type": "string",
          "example": "2019-12-31",
          "x-ms-summary": "Finish"
        },
        "relativeCapacity": {
          "format": "double",
          "type": "number",
          "example": 0.5,
          "x-ms-summary": "Relative Capacity"
        }
      },
      "x-ms-summary": "Calendar Deviation"
    },
    "ListResponseCalendarDeviationResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CalendarDeviationResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "AbsenceResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The id of the absence",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "start": {
          "format": "date",
          "description": "Start date of this absence",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Start Date"
        },
        "finish": {
          "format": "date",
          "description": "Finish date of this absence",
          "type": "string",
          "example": "2019-12-31",
          "x-ms-summary": "Finish Date"
        },
        "startDayType": {
          "enum": [
            "FULL_DAY",
            "HALF_DAY"
          ],
          "type": "string",
          "example": "FULL_DAY",
          "x-ms-summary": "Start Absence Day Type"
        },
        "finishDayType": {
          "enum": [
            "FULL_DAY",
            "HALF_DAY"
          ],
          "type": "string",
          "example": "FULL_DAY",
          "x-ms-summary": "Finish Absence Day Type"
        }
      },
      "x-ms-summary": "Absence"
    },
    "ObsTypeCreateRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Department",
          "x-ms-summary": "Name"
        }
      }
    },
    "ObsTypeResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "example": "Department",
          "x-ms-summary": "Name"
        }
      },
      "x-ms-summary": "Obs Type"
    },
    "ObsUnitCreateRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "IT",
          "x-ms-summary": "Name"
        },
        "parentId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Parent ID"
        }
      }
    },
    "ObsUnitResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "example": "IT",
          "x-ms-summary": "Name"
        },
        "path": {
          "type": "string",
          "example": "Services/Consulting/IT",
          "x-ms-summary": "Path"
        },
        "displayName": {
          "description": "The display name is rendered the same way as it is in the Meisterplan application's user interface",
          "type": "string",
          "example": "Services > Consulting > IT",
          "x-ms-summary": "Display Name"
        },
        "parentId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Parent ID"
        }
      },
      "x-ms-summary": "Obs Unit"
    },
    "CalendarCreateRequest": {
      "required": [
        "name",
        "workingHours"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "US",
          "x-ms-summary": "Name"
        },
        "parentId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Parent ID"
        },
        "workingHours": {
          "$ref": "#/definitions/WorkingHours"
        }
      }
    },
    "WorkingHours": {
      "required": [
        "friday",
        "monday",
        "saturday",
        "sunday",
        "thursday",
        "tuesday",
        "wednesday"
      ],
      "type": "object",
      "properties": {
        "monday": {
          "format": "double",
          "maximum": 24,
          "minimum": 0,
          "type": "number",
          "example": 8,
          "x-ms-summary": "Monday"
        },
        "tuesday": {
          "format": "double",
          "maximum": 24,
          "minimum": 0,
          "type": "number",
          "example": 8,
          "x-ms-summary": "Tuesday"
        },
        "wednesday": {
          "format": "double",
          "maximum": 24,
          "minimum": 0,
          "type": "number",
          "example": 8,
          "x-ms-summary": "Wednesday"
        },
        "thursday": {
          "format": "double",
          "maximum": 24,
          "minimum": 0,
          "type": "number",
          "example": 8,
          "x-ms-summary": "Thursday"
        },
        "friday": {
          "format": "double",
          "maximum": 24,
          "minimum": 0,
          "type": "number",
          "example": 4.5,
          "x-ms-summary": "Friday"
        },
        "saturday": {
          "format": "double",
          "maximum": 24,
          "minimum": 0,
          "type": "number",
          "example": 0,
          "x-ms-summary": "Saturday"
        },
        "sunday": {
          "format": "double",
          "maximum": 24,
          "minimum": 0,
          "type": "number",
          "example": 0,
          "x-ms-summary": "Sunday"
        }
      }
    },
    "CalendarResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "example": "US",
          "x-ms-summary": "Name"
        },
        "parentId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Parent ID"
        },
        "path": {
          "type": "string",
          "example": "US/California",
          "x-ms-summary": "Path"
        },
        "workingHours": {
          "$ref": "#/definitions/WorkingHoursResponse"
        }
      },
      "x-ms-summary": "Calendar"
    },
    "WorkingHoursResponse": {
      "type": "object",
      "properties": {
        "monday": {
          "format": "double",
          "type": "number",
          "example": 8,
          "x-ms-summary": "Monday"
        },
        "tuesday": {
          "format": "double",
          "type": "number",
          "example": 8,
          "x-ms-summary": "Tuesday"
        },
        "wednesday": {
          "format": "double",
          "type": "number",
          "example": 8,
          "x-ms-summary": "Wednesday"
        },
        "thursday": {
          "format": "double",
          "type": "number",
          "example": 8,
          "x-ms-summary": "Thursday"
        },
        "friday": {
          "format": "double",
          "type": "number",
          "example": 4.5,
          "x-ms-summary": "Friday"
        },
        "saturday": {
          "format": "double",
          "type": "number",
          "example": 0,
          "x-ms-summary": "Saturday"
        },
        "sunday": {
          "format": "double",
          "type": "number",
          "example": 0,
          "x-ms-summary": "Sunday"
        }
      },
      "x-ms-summary": "Working Hours"
    },
    "CalendarException": {
      "required": [
        "date",
        "workingHours"
      ],
      "type": "object",
      "properties": {
        "date": {
          "format": "date",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Date"
        },
        "workingHours": {
          "format": "double",
          "maximum": 24,
          "minimum": 0,
          "type": "number",
          "example": 4,
          "x-ms-summary": "Working Hours"
        },
        "description": {
          "type": "string",
          "example": "New Year's Eve",
          "x-ms-summary": "Description"
        }
      },
      "x-ms-summary": "Exceptions"
    },
    "CreateCalendarExceptionsRequest": {
      "required": [
        "exceptions"
      ],
      "type": "object",
      "properties": {
        "start": {
          "format": "date",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Start"
        },
        "finish": {
          "format": "date",
          "type": "string",
          "example": "2019-12-31",
          "x-ms-summary": "Finish"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CalendarException"
          },
          "x-ms-summary": "Exceptions"
        }
      }
    },
    "SetDefaultCalendarRequest": {
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        }
      }
    },
    "WebhookUpdateStatusRequest": {
      "required": [
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "description": "The new status of the webhook.",
          "enum": [
            "SUSPENDED",
            "ACTIVE"
          ],
          "type": "string",
          "example": "SUSPENDED",
          "x-ms-summary": "Status"
        }
      }
    },
    "ProjectUpdateRequest": {
      "type": "object",
      "properties": {
        "projectKey": {
          "description": "Must be unique and must not be empty.",
          "type": "string",
          "example": "ID-15",
          "x-ms-summary": "Project Key"
        },
        "name": {
          "type": "string",
          "example": "Meisterplan API v1.1",
          "x-ms-summary": "Name"
        },
        "projectType": {
          "$ref": "#/definitions/ProjectType"
        },
        "start": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Start"
        },
        "finish": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Finish"
        },
        "manager": {
          "$ref": "#/definitions/Manager"
        },
        "costType": {
          "description": "default: see Meisterplan documentation.",
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "type": "string",
          "example": "CAPEX",
          "x-ms-summary": "Cost Type"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "notes": {
          "type": "string",
          "x-ms-summary": "Notes"
        },
        "businessGoal": {
          "$ref": "#/definitions/BusinessGoal"
        },
        "approvedTotalEffort": {
          "$ref": "#/definitions/ApprovedTotalEffort"
        },
        "approvedBudget": {
          "format": "double",
          "type": "number",
          "example": 10400.51,
          "x-ms-summary": "Approved Budget"
        },
        "approvedCapexBudget": {
          "format": "double",
          "type": "number",
          "example": 6800.51,
          "x-ms-summary": "Approved CapEx Budget"
        },
        "approvedOpexBudget": {
          "format": "double",
          "type": "number",
          "example": 4600,
          "x-ms-summary": "Approved OpEx Budget"
        },
        "customFields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CustomFieldRequest"
          },
          "example": {
            "cust_stage_gate": {
              "value": "Approved"
            },
            "cust_risk": {
              "value": "Medium"
            },
            "cust_resource": {
              "id": "UUID",
              "resourceKey": "KMY"
            },
            "cust_direction": {
              "display": "North, East",
              "items": [
                {
                  "value": "North"
                },
                {
                  "value": "East"
                }
              ]
            }
          },
          "x-ms-summary": "Custom Fields"
        },
        "obsUnits": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceRequest"
          },
          "example": {
            "Department": {
              "path": "Services/Consulting/IT"
            }
          },
          "x-ms-summary": "OBS Units"
        },
        "program": {
          "$ref": "#/definitions/Program"
        },
        "priority": {
          "$ref": "#/definitions/Priority"
        }
      },
      "x-ms-dynamic-schema": {
        "operationId": "GetProjectDynamicSchema",
        "parameters": {
          "mode": "UPDATE_INPUT"
        },
        "value-path": "schema"
      }
    },
    "MilestoneUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Completion Initiation Phase",
          "x-ms-summary": "Name"
        },
        "date": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Date"
        },
        "projectPhase": {
          "$ref": "#/definitions/ProjectPhase"
        }
      }
    },
    "FinancialsUpdateRequest": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "CAPEX",
            "OPEX",
            "BENEFIT"
          ],
          "type": "string",
          "x-ms-summary": "Type"
        },
        "amount": {
          "format": "double",
          "type": "number",
          "example": 2000,
          "x-ms-summary": "Amount"
        },
        "timing": {
          "$ref": "#/definitions/Timing"
        },
        "description": {
          "type": "string",
          "example": "New notebook",
          "x-ms-summary": "Description"
        },
        "category": {
          "$ref": "#/definitions/Category"
        }
      }
    },
    "FinancialActualsUpdateRequest": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "CAPEX",
            "OPEX",
            "BENEFIT"
          ],
          "type": "string",
          "x-ms-summary": "Type"
        },
        "amount": {
          "format": "double",
          "type": "number",
          "example": 2000,
          "x-ms-summary": "Amount"
        },
        "bookingDate": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-12-31",
          "x-ms-summary": "Booking Date"
        },
        "description": {
          "type": "string",
          "example": "New notebook",
          "x-ms-summary": "Description"
        },
        "category": {
          "$ref": "#/definitions/Category"
        }
      }
    },
    "AllocationUpdateRequest": {
      "required": [
        "segments"
      ],
      "type": "object",
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllocationSegment"
          },
          "example": [
            {
              "start": "2019-01-31T00:00:00.0000000+00:00",
              "finish": "2019-12-31T00:00:00.0000000+00:00",
              "fte": 0.5
            }
          ],
          "x-ms-summary": "Segments"
        }
      }
    },
    "ProgramUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Release road map",
          "x-ms-summary": "Name"
        }
      }
    },
    "RoleUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Junior Developer",
          "x-ms-summary": "Name"
        },
        "externalId": {
          "description": "Must be unique.",
          "type": "string",
          "example": "myCustomID",
          "x-ms-summary": "External ID"
        },
        "costType": {
          "description": "default: see Meisterplan documentation.",
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "type": "string",
          "example": "CAPEX",
          "x-ms-summary": "Cost Type"
        },
        "costPerHour": {
          "format": "double",
          "type": "number",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        },
        "obsUnits": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceRequest"
          },
          "example": {
            "Department": {
              "path": "Services/Consulting/IT"
            }
          },
          "x-ms-dynamic-schema": {
            "operationId": "GetObsDynamicSchema",
            "parameters": {
              "mode": "UPDATE_INPUT"
            },
            "value-path": "schema"
          }
        },
        "resourceManager": {
          "$ref": "#/definitions/ResourceManager"
        }
      }
    },
    "ResourceUpdateRequest": {
      "type": "object",
      "properties": {
        "resourceKey": {
          "description": "Must be unique. If empty, value will be generated.",
          "type": "string",
          "example": "KMY",
          "x-ms-summary": "Resource Key"
        },
        "firstName": {
          "type": "string",
          "example": "Jane",
          "x-ms-summary": "First Name"
        },
        "lastName": {
          "type": "string",
          "example": "Doe",
          "x-ms-summary": "Last Name"
        },
        "externalId": {
          "description": "Must be unique.",
          "type": "string",
          "example": "myCustomID",
          "x-ms-summary": "External ID"
        },
        "emailAddress": {
          "type": "string",
          "example": "jane.doe@meisterplan.com",
          "x-ms-summary": "Email Address"
        },
        "postalAddress": {
          "$ref": "#/definitions/PostalAddress"
        },
        "employmentPeriod": {
          "$ref": "#/definitions/EmploymentPeriod"
        },
        "externalResource": {
          "type": "boolean",
          "x-ms-summary": "External Resource"
        },
        "costPerHour": {
          "format": "double",
          "type": "number",
          "example": 12.5,
          "x-ms-summary": "Cost Per Hour"
        },
        "primaryRole": {
          "$ref": "#/definitions/PrimaryRole"
        },
        "calendar": {
          "$ref": "#/definitions/Calendar"
        },
        "obsUnits": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceRequest"
          },
          "example": {
            "Department": {
              "path": "Services/Consulting/IT"
            }
          },
          "x-ms-dynamic-schema": {
            "operationId": "GetObsDynamicSchema",
            "parameters": {
              "mode": "UPDATE_INPUT"
            },
            "value-path": "schema"
          }
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Java",
            "Kotlin"
          ],
          "x-ms-summary": "Skills"
        },
        "resourceManager": {
          "$ref": "#/definitions/ResourceManager"
        }
      }
    },
    "UpdateAbsenceRequest": {
      "type": "object",
      "properties": {
        "start": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Start"
        },
        "finish": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-12-31",
          "x-ms-summary": "Finish"
        },
        "startDayType": {
          "enum": [
            "FULL_DAY",
            "HALF_DAY"
          ],
          "type": "string",
          "example": "FULL_DAY",
          "x-ms-summary": "Start Day Type"
        },
        "finishDayType": {
          "enum": [
            "FULL_DAY",
            "HALF_DAY"
          ],
          "type": "string",
          "example": "FULL_DAY",
          "x-ms-summary": "Finish Day Type"
        }
      }
    },
    "ObsTypeUpdateRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Department",
          "x-ms-summary": "Name"
        }
      }
    },
    "ObsUnitUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "IT",
          "x-ms-summary": "Name"
        },
        "parentId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Parent ID"
        }
      }
    },
    "CalendarUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "US",
          "x-ms-summary": "Name"
        },
        "workingHours": {
          "$ref": "#/definitions/WorkingHours"
        }
      }
    },
    "Cursor": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "x-ms-summary": "Cursor"
        }
      },
      "x-ms-summary": "Cursor"
    },
    "PaginatedResponseWebhookResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookResponse"
          },
          "x-ms-summary": "Items"
        },
        "_pagination": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "x-ms-summary": "Paginated"
    },
    "Pagination": {
      "type": "object",
      "properties": {
        "after": {
          "$ref": "#/definitions/Cursor"
        }
      },
      "x-ms-summary": "Pagination"
    },
    "BasicUserGroupResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of a user group.",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Group ID"
        },
        "name": {
          "description": "Name of a user group.",
          "type": "string",
          "example": "Project Managers",
          "x-ms-summary": "Group Name"
        }
      },
      "x-ms-summary": "Basic User Group"
    },
    "LinkedResourceResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the linked resource.",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "resourceKey": {
          "description": "Resource key of the linked resource.",
          "type": "string",
          "example": "KMY",
          "x-ms-summary": "Resource Key"
        }
      },
      "x-ms-summary": "Linked Resource"
    },
    "PaginatedResponseUserResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserResponse"
          },
          "x-ms-summary": "Items"
        },
        "_pagination": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "x-ms-summary": "Paginated"
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "userName": {
          "type": "string",
          "example": "johndoe",
          "x-ms-summary": "Username"
        },
        "externalId": {
          "type": "string",
          "example": "idp_jd_1",
          "x-ms-summary": "External ID"
        },
        "active": {
          "type": "boolean",
          "x-ms-summary": "Active"
        },
        "emailAddress": {
          "type": "string"
        },
        "lastName": {
          "type": "string",
          "example": "Doe",
          "x-ms-summary": "Last Name"
        },
        "firstName": {
          "type": "string",
          "example": "John",
          "x-ms-summary": "First Name"
        },
        "displayName": {
          "type": "string",
          "x-ms-summary": "Display Name"
        },
        "locale": {
          "type": "string",
          "example": "en-US",
          "x-ms-summary": "Locale"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BasicUserGroupResponse"
          }
        },
        "lastLogin": {
          "format": "date-time",
          "type": "string",
          "example": "2022-12-22T16:50:10.0000000+00:00",
          "x-ms-summary": "Last Login"
        },
        "emailVerified": {
          "type": "boolean",
          "x-ms-summary": "Email Verified"
        },
        "linkedResource": {
          "$ref": "#/definitions/LinkedResourceResponse"
        },
        "passwordNeverExpires": {
          "type": "boolean",
          "x-ms-summary": "Password Never Expires"
        }
      },
      "x-ms-summary": "User"
    },
    "ListResponseScenarioResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScenarioResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "ScenarioResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "example": "More Budget Scenario",
          "x-ms-summary": "Name"
        }
      },
      "x-ms-summary": "Scenario"
    },
    "ListResponseRoleWithRoleCapacityResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleWithRoleCapacityResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "RoleWithRoleCapacityResponse": {
      "type": "object",
      "properties": {
        "roleId": {
          "description": "The role's ID.",
          "type": "string",
          "example": "UUID"
        },
        "segments": {
          "description": "The role's capacity segments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleCapacityResponse"
          }
        }
      },
      "x-ms-summary": "Role With Role Capacity"
    },
    "AllProjectsPriorityResponse": {
      "type": "object",
      "properties": {
        "rankCategory": {
          "enum": [
            "ABOVE_MUST_HAVE",
            "BELOW_CUT_OFF",
            "REGULAR"
          ],
          "type": "string",
          "example": "REGULAR",
          "x-ms-summary": "Rank Category"
        },
        "rank": {
          "format": "int32",
          "description": "Rank depends on the date range and portfolio filter.",
          "type": "integer",
          "example": 1,
          "x-ms-summary": "Rank"
        }
      },
      "x-ms-summary": "Priority"
    },
    "AllProjectsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID"
        },
        "projectKey": {
          "type": "string",
          "example": "ID-15"
        },
        "name": {
          "type": "string",
          "example": "Meisterplan API v1.1"
        },
        "projectType": {
          "$ref": "#/definitions/ProjectTypeFieldResponse"
        },
        "externalId": {
          "type": "string",
          "example": "myCustomID"
        },
        "start": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31"
        },
        "finish": {
          "description": "format: YYYY-MM-DD",
          "type": "string",
          "example": "2019-01-31"
        },
        "manager": {
          "$ref": "#/definitions/ResourceReferenceResponse"
        },
        "costType": {
          "description": "default: see Meisterplan documentation.",
          "enum": [
            "CAPEX",
            "OPEX"
          ],
          "type": "string",
          "example": "CAPEX"
        },
        "status": {
          "$ref": "#/definitions/StatusFieldResponse"
        },
        "notes": {
          "type": "string"
        },
        "businessGoal": {
          "$ref": "#/definitions/BusinessGoalResponse"
        },
        "approvedTotalEffort": {
          "$ref": "#/definitions/ApprovedTotalEffortResponse"
        },
        "approvedBudget": {
          "format": "double",
          "type": "number",
          "example": 10400.51,
          "x-ms-summary": "Approved Budget"
        },
        "approvedOpexBudget": {
          "format": "double",
          "type": "number",
          "example": 4600,
          "x-ms-summary": "Approved OpEx Budget"
        },
        "approvedCapexBudget": {
          "format": "double",
          "type": "number",
          "example": 6800.51,
          "x-ms-summary": "Approved CapEx Budget"
        },
        "customFields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CustomFieldResponse"
          },
          "example": {
            "cust_stage_gate": {
              "value": "Approved"
            },
            "cust_risk": {
              "value": "Medium"
            },
            "cust_resource": {
              "id": "UUID",
              "resourceKey": "KMY"
            },
            "cust_direction": {
              "display": "North, East",
              "items": [
                {
                  "value": "North"
                },
                {
                  "value": "East"
                }
              ]
            }
          }
        },
        "obsUnits": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ObsUnitReferenceResponse"
          },
          "example": {
            "Department": {
              "id": "UUID",
              "path": "Services/Consulting/IT",
              "displayName": "Services > Consulting > IT"
            }
          }
        },
        "program": {
          "$ref": "#/definitions/ProgramLinkResponse"
        },
        "viewUrl": {
          "type": "string",
          "example": "https://eu.meisterplan.com/sampleSystem/projects/06ac2271-9143-5518-93dd-4f2e105e9778"
        },
        "lastChanged": {
          "format": "date-time",
          "type": "string",
          "example": "2022-12-22T16:50:10.0000000+00:00"
        },
        "priority": {
          "$ref": "#/definitions/AllProjectsPriorityResponse"
        }
      },
      "x-ms-summary": "Items",
      "x-ms-dynamic-schema": {
        "operationId": "GetProjectDynamicSchema",
        "parameters": {
          "mode": "OUTPUT"
        },
        "value-path": "schema"
      }
    },
    "PaginatedResponseAllProjectsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllProjectsResponse"
          },
          "x-ms-summary": "Items"
        },
        "_pagination": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "x-ms-summary": "Paginated"
    },
    "ListResponseMilestoneResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MilestoneResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "ListResponseFinancialsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FinancialsResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "ListResponseFinancialActualsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FinancialActualsResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "PaginatedResponseProjectCommentResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectCommentResponse"
          },
          "x-ms-summary": "Items"
        },
        "_pagination": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "x-ms-summary": "Paginated"
    },
    "ProjectCommentResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "content": {
          "type": "string",
          "example": "Here is an example of a comment on a project.",
          "x-ms-summary": "Content"
        },
        "author": {
          "$ref": "#/definitions/UserRefResponse"
        },
        "createdDate": {
          "type": "string",
          "example": "2022-12-22T16:50:10Z",
          "x-ms-summary": "Created Date"
        },
        "mentions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRefResponse"
          }
        }
      },
      "x-ms-summary": "Project Comment"
    },
    "ListResponseAllocationResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllocationResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "AllocationCommentEntityResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The id of the entity to which this allocation comment is linked",
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "type": {
          "description": "The type of the entity to which this allocation comment is linked",
          "enum": [
            "ROLE",
            "RESOURCE",
            "RESOLVE_BY_KEY_OR_NAME"
          ],
          "type": "string",
          "x-ms-summary": "Type"
        }
      },
      "x-ms-summary": "Allocated Entity"
    },
    "AllocationCommentResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "content": {
          "type": "string",
          "example": "Here is an example of a comment on an allocation.",
          "x-ms-summary": "Content"
        },
        "author": {
          "$ref": "#/definitions/UserRefResponse"
        },
        "createdDate": {
          "type": "string",
          "example": "2022-12-22T16:50:10Z",
          "x-ms-summary": "Created Date"
        },
        "mentions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRefResponse"
          }
        },
        "allocatedEntity": {
          "$ref": "#/definitions/AllocationCommentEntityResponse"
        }
      },
      "x-ms-summary": "Allocation Comment"
    },
    "PaginatedResponseAllocationCommentResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllocationCommentResponse"
          },
          "x-ms-summary": "Items"
        },
        "_pagination": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "x-ms-summary": "Paginated"
    },
    "PaginatedResponseActualTimeWorkedResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActualTimeWorkedResponse"
          },
          "x-ms-summary": "Items"
        },
        "_pagination": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "x-ms-summary": "Paginated"
    },
    "ListResponseProgramResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProgramResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "MilestoneDependencyResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "from": {
          "$ref": "#/definitions/MilestoneReferenceResponse"
        },
        "to": {
          "$ref": "#/definitions/MilestoneReferenceResponse"
        }
      },
      "x-ms-summary": "Milestone Dependency"
    },
    "MilestoneReferenceResponse": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Project ID"
        },
        "milestoneId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Milestone ID"
        }
      },
      "x-ms-summary": "Milestone Reference"
    },
    "PaginatedResponseMilestoneDependencyResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MilestoneDependencyResponse"
          },
          "x-ms-summary": "Items"
        },
        "_pagination": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "x-ms-summary": "Paginated"
    },
    "ListResponseRoleResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "PaginatedResponseResourceResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceResponse"
          },
          "x-ms-summary": "Items"
        },
        "_pagination": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "x-ms-summary": "Paginated"
    },
    "ListResponseAbsenceResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AbsenceResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "ListResponsePortfolioResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PortfolioResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "PortfolioResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "example": "0. All Projects",
          "x-ms-summary": "Name"
        }
      },
      "x-ms-summary": "Portfolio"
    },
    "ListResponseObsTypeResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObsTypeResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "ListResponseObsUnitResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObsUnitResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "DynamicSchemaPropertiesResponse": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DynamicSchemaPropertyResponse"
          }
        }
      }
    },
    "DynamicSchemaPropertyResponse": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "x-ms-summary": "Type"
        },
        "x-ms-summary": {
          "type": "string",
          "x-ms-summary": "Description"
        },
        "description": {
          "type": "string",
          "x-ms-summary": "Description"
        },
        "enum": {
          "type": "array",
          "items": {
            "type": "string",
            "x-ms-summary": "Enum"
          },
          "x-ms-summary": "Enum"
        },
        "example": {
          "type": "string",
          "x-ms-summary": "Example"
        },
        "properties": {
          "$ref": "#/definitions/DynamicSchemaPropertiesResponse"
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string",
            "x-ms-summary": "Required"
          },
          "x-ms-summary": "Required"
        },
        "items": {
          "$ref": "#/definitions/DynamicSchemaPropertyResponse"
        }
      }
    },
    "DynamicSchemaResponse": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "x-ms-summary": "Type"
        },
        "properties": {
          "$ref": "#/definitions/DynamicSchemaPropertiesResponse"
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string",
            "x-ms-summary": "Required"
          },
          "x-ms-summary": "Required"
        },
        "x-ms-summary": {
          "type": "string"
        }
      }
    },
    "SchemaResponse": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/DynamicSchemaResponse"
        }
      }
    },
    "MeResponse": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "databaseName": {
          "description": "Deprecated. Use systemName instead.",
          "type": "string"
        },
        "systemName": {
          "type": "string"
        }
      },
      "x-ms-summary": "Me"
    },
    "ListResponseCalendarResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CalendarResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "CalendarExceptionResponse": {
      "type": "object",
      "properties": {
        "date": {
          "format": "date",
          "type": "string",
          "example": "2019-01-31",
          "x-ms-summary": "Date"
        },
        "workingHours": {
          "format": "double",
          "type": "number",
          "example": 4,
          "x-ms-summary": "Working Hours"
        },
        "description": {
          "type": "string",
          "example": "New Year's Eve",
          "x-ms-summary": "Description"
        },
        "sourceCalendarId": {
          "type": "string",
          "example": "UUID",
          "x-ms-summary": "Source Calendar ID"
        }
      },
      "x-ms-summary": "Calendar Exception"
    },
    "ListResponseCalendarExceptionResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CalendarExceptionResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    },
    "BusinessGoalDefinitionResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Business goal name",
          "x-ms-summary": "Name"
        }
      },
      "x-ms-summary": "Business Goal Definition"
    },
    "ListResponseBusinessGoalDefinitionResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BusinessGoalDefinitionResponse"
          },
          "x-ms-summary": "Items"
        }
      },
      "x-ms-summary": "List"
    }
  },
  "parameters": {},
  "responses": {},
  "tags": [
    {
      "name": "Business Goals",
      "description": "Operations on Business Goals"
    },
    {
      "name": "Priorities",
      "description": "Operations on Priorities"
    },
    {
      "name": "Role Capacities",
      "description": "Operations on Role Capacity. A role's own capacity is inherent to the role, and does not contain the capacities of resources assigned to this role."
    },
    {
      "name": "Users (Premium)",
      "description": "Operations on users. A Premium Edition is required to use these operations. The administrative right to manage users and user groups is required. If you would like to implement automatic user provisioning, please refer to the SCIM 2.0 endpoints."
    },
    {
      "name": "Financial Actuals",
      "description": "Operations on Financial Actuals"
    },
    {
      "name": "Allocations",
      "description": "Operations on Allocations"
    },
    {
      "name": "Resources",
      "description": "Operations on Resources"
    },
    {
      "name": "Milestones",
      "description": "Operations on Milestones"
    },
    {
      "name": "Milestone Dependencies",
      "description": "Operations on Milestones"
    },
    {
      "name": "Actual Time Worked",
      "description": "Operations on Actual Time Worked"
    },
    {
      "name": "Calendars",
      "description": "Operations on Calendars"
    },
    {
      "name": "Me",
      "description": "Connected user details."
    },
    {
      "name": "Absences",
      "description": "Operations on Absences"
    },
    {
      "name": "Portfolios",
      "description": "Operations on Portfolios"
    },
    {
      "name": "Programs",
      "description": "Operations on Programs"
    },
    {
      "name": "Projects",
      "description": "Operations on Projects"
    },
    {
      "name": "Scenarios",
      "description": "Operations on Scenarios"
    },
    {
      "name": "Allocation Comments",
      "description": "Operations on Allocation Comments"
    },
    {
      "name": "SCIM 2.0 (Premium)",
      "description": "Operations on users and user groups. A Premium Edition is required to use these operations. The administrative right to manage users and user groups is required. You can use these operations to implement automatic user provisioning."
    },
    {
      "name": "Roles",
      "description": "Operations on Roles"
    },
    {
      "name": "Financials",
      "description": "Operations on Financials"
    },
    {
      "name": "Project Comments",
      "description": "Operations on Project Comments"
    },
    {
      "name": "OBS",
      "description": "Operations on OBS types and OBS units. Each OBS or OBS type can have any number of OBS units, for example, the OBS Department could have Marketing and Software Engineering as OBS units. They can be nested up to a depth of 15."
    },
    {
      "name": "Metadata",
      "description": "Metadata queries"
    },
    {
      "name": "Webhooks",
      "description": "Webhooks allow to subscribe to notifications about changes in Meisterplan. An HTTP request with a small payload is sent to the specified endpoint when an event that you have subscribed to occurs. Currently webhooks support the following types of events: Project Created, Project Updated, Project Deleted."
    }
  ],
  "x-ms-capabilities": {
    "testConnection": {
      "operationId": "GetMe"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://meisterplan.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://meisterplan.com/privacy-and-data-protection/"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Business Management;Business Intelligence"
    }
  ]
}
