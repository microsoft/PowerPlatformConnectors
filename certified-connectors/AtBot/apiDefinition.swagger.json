{
  "swagger": "2.0",
  "info": {
    "version": "3.64.3",
    "title": "AtBot Logic",
    "description": "AtBot by H3 Solutions, Inc., is a business bot that services the Microsoft cloud.",
    "contact": {
      "name": "AtBot Support",
      "url": "https://admin.atbot.io/Docs",
      "email": "support@atbot.io"
    },
    "x-ms-api-annotation": {
      "status": "Production"
    }
  },
  "host": "bizzywork.azurewebsites.net",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/api/triggers/bot/reply": {
      "post": {
        "tags": [
          "Bot",
          "Reply"
        ],
        "summary": "Send reply",
        "description": "This operation is used to a send a reply to the activity that triggered the flow.",
        "x-ms-no-generic-test": true,
        "operationId": "SendReply",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BotReply"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BotReplyResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/triggers/bot/adaptiveCards/{selectedCard}/replyWithAdaptiveCard": {
      "post": {
        "tags": [
          "Bot",
          "Reply"
        ],
        "summary": "Send Adaptive Card reply",
        "description": "This operation is used to a send an adaptive card reply to the activity that triggered the flow.",
        "x-ms-no-generic-test": true,
        "operationId": "SendReplyWithAdaptiveCard",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "selectedCard",
            "in": "path",
            "description": "Select the adaptive card.",
            "required": true,
            "x-ms-summary": "Selected Adaptive Card",
            "x-ms-dynamic-values": {
              "operationId": "ListAdaptiveCards",
              "parameters": {},
              "value-path": "id",
              "value-title": "name"
            },
            "type": "string"
          },
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "x-ms-dynamic-schema": {
                "operationId": "AdaptiveCards_GetCardFields",
                "parameters": {
                  "cardId": {
                    "parameter": "selectedCard"
                  }
                },
                "value-path": "notifications"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BotReplyResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/triggers/bot/adaptiveCards/{selectedCard}/generateAdaptiveCard": {
      "post": {
        "tags": [
          "Bot",
          "Adaptive Cards"
        ],
        "summary": "Generate Adaptive Card",
        "description": "This operation is used to a generate an adaptive card to be used later to display a list or carousel of cards.",
        "x-ms-no-generic-test": true,
        "operationId": "GenerateAdaptiveCard",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "selectedCard",
            "in": "path",
            "description": "Select the adaptive card.",
            "required": true,
            "x-ms-summary": "Selected Adaptive Card",
            "x-ms-dynamic-values": {
              "operationId": "ListAdaptiveCards",
              "parameters": {},
              "value-path": "id",
              "value-title": "name"
            },
            "type": "string"
          },
          {
            "name": "content",
            "in": "body",
            "schema": {
              "type": "object",
              "x-ms-dynamic-schema": {
                "operationId": "AdaptiveCards_GetCardFields_NoReplyActivity",
                "parameters": {
                  "cardId": {
                    "parameter": "selectedCard"
                  }
                },
                "value-path": "notifications"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/triggers/bot/adaptiveCards/sendCardSet": {
      "post": {
        "tags": [
          "Bot",
          "Adaptive Cards"
        ],
        "summary": "Send Adaptive Card Set reply",
        "description": "This operation is used to a send an adaptive card set reply to the activity that triggered the flow.  The set can be in either List or Carousel form.",
        "x-ms-no-generic-test": true,
        "operationId": "SendReplyWithAdaptiveCardSet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "CardSet",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdaptiveCardSet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BotReplyResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/triggers/bot/adaptiveCards/updateCard": {
      "post": {
        "tags": [
          "Bot",
          "Adaptive Cards"
        ],
        "summary": "Update an adaptive card sent to a tab",
        "description": "This operation is used to update a card sent to a tab.",
        "x-ms-no-generic-test": true,
        "operationId": "UpdateAdaptiveCard",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "CardInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCardInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BotReplyResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/triggers/listAdaptiveCards": {
      "get": {
        "tags": [
          "Adaptive Cards"
        ],
        "summary": "List Adaptive Cards",
        "description": "List Adaptive Cards in your tenant.",
        "operationId": "ListAdaptiveCards",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AdaptiveCard"
              }
            }
          },
          "400": {
            "description": "No adaptive cards found."
          },
          "500": {
            "description": "Error looking up adaptive cards."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/listAdaptiveCardForms": {
      "get": {
        "tags": [
          "Adaptive Cards"
        ],
        "summary": "List Adaptive Card Forms",
        "description": "List Adaptive Card Forms in your tenant.",
        "operationId": "ListAdaptiveCardForms",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AdaptiveCard"
              }
            }
          },
          "400": {
            "description": "No adaptive cards found."
          },
          "500": {
            "description": "Error looking up adaptive cards."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/fieldSchemaForAdaptiveCard": {
      "get": {
        "tags": [
          "Adaptive Card"
        ],
        "summary": "Get Adaptive Card Field Schema",
        "description": "For internal use only.",
        "operationId": "AdaptiveCards_GetCardFields",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cardId",
            "in": "query",
            "description": "Enter your card ID.",
            "required": true,
            "x-ms-summary": "Card ID",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/fieldSchemaForAdaptiveCardNoReplyActivity": {
      "get": {
        "tags": [
          "Adaptive Card"
        ],
        "summary": "Get Adaptive Card Field Schema",
        "description": "For internal use only.",
        "operationId": "AdaptiveCards_GetCardFields_NoReplyActivity",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cardId",
            "in": "query",
            "description": "Enter your card ID.",
            "required": true,
            "x-ms-summary": "Card ID",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/formOutputSchemaForAdaptiveCard": {
      "get": {
        "tags": [
          "Adaptive Card"
        ],
        "summary": "Get Adaptive Card Field Schema",
        "description": "For internal use only.",
        "operationId": "AdaptiveCards_GetCardFormOutputSchema",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cardId",
            "in": "query",
            "description": "Enter your card ID.",
            "required": true,
            "x-ms-summary": "Card ID",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/webHookSchemaForAdaptiveCard": {
      "get": {
        "tags": [
          "Adaptive Card"
        ],
        "summary": "Get Adaptive Card Field Schema as a webHook",
        "description": "For internal use only.",
        "operationId": "AdaptiveCards_GetCardWebhookFields",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cardId",
            "in": "query",
            "description": "Enter your card ID.",
            "required": true,
            "x-ms-summary": "Card ID",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/bot/startConversation": {
      "post": {
        "tags": [
          "Bot",
          "StartConversation"
        ],
        "summary": "Start a new private conversation",
        "description": "This operation is used to start a new private conversation with a user.",
        "x-ms-no-generic-test": true,
        "operationId": "StartConversation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BotConversationStart"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BotConversationStartResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/triggers/bot/startGroupConversation": {
      "post": {
        "tags": [
          "Bot",
          "StartGroupConversation"
        ],
        "summary": "Start a new group conversation",
        "description": "This operation is used to start a new group conversation in a channel.",
        "x-ms-no-generic-test": true,
        "operationId": "StartGroupConversation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BotGroupConversationStart"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BotGroupConversationStartResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/triggers/bots": {
      "get": {
        "tags": [
          "Enterprise Bots"
        ],
        "summary": "Get Bots",
        "description": "Get all enterprise bots in your tenant.",
        "operationId": "GetBots",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnterpriseBot"
              }
            }
          },
          "400": {
            "description": "No bots found."
          },
          "500": {
            "description": "Error looking up bots."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/myJoinedTeams": {
      "get": {
        "tags": [
          "Joined Teams"
        ],
        "summary": "List Joined Teams",
        "description": "List all Teams the user is a member of.",
        "operationId": "MyJoinedTeams",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamsTeam"
              }
            }
          },
          "400": {
            "description": "No teams found."
          },
          "500": {
            "description": "Error looking up joined teams."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/myJoinedTeams/{teamId}/teamChannels": {
      "get": {
        "tags": [
          "Team Channels"
        ],
        "summary": "List Team Channels",
        "description": "List all channels of a Team.",
        "operationId": "TeamChannels",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Teams team Id.",
            "required": true,
            "x-ms-summary": "Team Id",
            "x-ms-dynamic-values": {
              "operationId": "MyJoinedTeams",
              "parameters": {},
              "value-path": "id",
              "value-title": "name"
            },
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamsTeamChannel"
              }
            }
          },
          "400": {
            "description": "No channels found."
          },
          "500": {
            "description": "Error looking up channels."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/apps/{appId}/intents": {
      "get": {
        "tags": [
          "Luis"
        ],
        "summary": "Get intents",
        "description": "This operation is used to fetch the intents associated with your LUIS app.",
        "operationId": "GetIntents",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "luisApiKey",
            "in": "header",
            "description": "Provide AtBot with your LUIS API Key.",
            "required": true,
            "x-ms-summary": "LUIS API Key",
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "description": "Pick your LUIS app.",
            "required": true,
            "x-ms-summary": "LUIS App",
            "x-ms-dynamic-values": {
              "operationId": "GetApps",
              "parameters": {
                "luisApiKey": {
                  "parameter": "luisApiKey"
                }
              },
              "value-path": "id",
              "value-title": "name"
            },
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LuisIntent"
              }
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/apps": {
      "get": {
        "tags": [
          "Luis"
        ],
        "summary": "Get Apps",
        "description": "Get the LUIS apps you have access to.",
        "operationId": "GetApps",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "luisApiKey",
            "in": "header",
            "description": "Enter your LUIS API key.",
            "required": true,
            "x-ms-summary": "LUIS API Key",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LuisApp"
              }
            }
          },
          "400": {
            "description": "Invalid LUIS API Key specified."
          },
          "500": {
            "description": "Invalid LUIS API Key specified."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/intentVectors": {
      "get": {
        "tags": [
          "LUIS App Registration Intent Vectors"
        ],
        "summary": "Get LUIS App Registration Intent Vectors",
        "description": "Get all LUIS Intent Vectors based on the App Registration ID.",
        "operationId": "GetIntentVectors",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IntentVector"
              }
            }
          },
          "400": {
            "description": "No app registrations found."
          },
          "500": {
            "description": "Error looking up app registrations."
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/webhooks/payloadSchema": {
      "get": {
        "tags": [
          "Luis"
        ],
        "summary": "Get Intent Schema",
        "description": "For internal use only.",
        "operationId": "Luis_GetPayloadSchema",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "triggerType",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "luisApiKey",
            "in": "header",
            "description": "Enter your LUIS API key.",
            "required": false,
            "x-ms-summary": "LUIS API Key",
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "description": "Select App you want Intents from.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/webhooks/payloadSchemaForVector": {
      "get": {
        "tags": [
          "Luis Intent Vector"
        ],
        "summary": "Get Intent Vector Schema",
        "description": "For internal use only.",
        "operationId": "Luis_GetPayloadSchemaVector",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vectorId",
            "in": "query",
            "description": "Enter your LUIS Vector ID.",
            "required": false,
            "x-ms-summary": "LUIS Vector ID",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/webhooks/payloadSchemaForVectorForResponse": {
      "get": {
        "tags": [
          "Luis Intent Vector"
        ],
        "summary": "Get Intent Vector Schema",
        "description": "For internal use only.",
        "operationId": "Luis_GetPayloadSchemaVectorForResponse",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "vectorId",
            "in": "query",
            "description": "Enter your LUIS Vector ID.",
            "required": false,
            "x-ms-summary": "LUIS Vector ID",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/apps/{appId}/intentsSchema": {
      "get": {
        "tags": [
          "Luis"
        ],
        "summary": "Get Intent Schema List",
        "description": "For internal use only.",
        "operationId": "Luis_GetIntentSchemaList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "luisApiKey",
            "in": "header",
            "description": "Enter your LUIS API key.",
            "required": true,
            "x-ms-summary": "LUIS API Key",
            "type": "string"
          },
          {
            "name": "appId",
            "in": "path",
            "description": "Select App you want Intents from.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/webhooks/schema": {
      "get": {
        "tags": [
          "Luis"
        ],
        "summary": "Get Intent Schema List",
        "description": "For internal use only.",
        "operationId": "Luis_GetWebHookSchema",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "triggerType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "luisApiKey",
            "in": "header",
            "description": "Enter your LUIS API key.",
            "required": false,
            "x-ms-summary": "LUIS API Key",
            "type": "string"
          },
          {
            "name": "appId",
            "in": "query",
            "description": "Select LUIS App.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DynamicResponseGetWebHookSchema"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    },
    "/api/triggers/webhooks/register": {
      "post": {
        "tags": [
          "WebHookRegistrations"
        ],
        "summary": "When a keyword is used",
        "description": "This operation triggers when the given keyword(s) are used by the bot.  Supply multiple keywords in semi-colon delimited format.",
        "x-ms-no-generic-test": true,
        "operationId": "WebHookRegistrations_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webHook",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebHookEx"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebHook"
            }
          }
        },
        "deprecated": false,
        "x-ms-trigger": "single"
      },
      "x-ms-notification-content": {
        "description": "Data from the bot",
        "schema": {
          "$ref": "#/definitions/DynamicResponseGetPayloadSchema"
        }
      }
    },
    "/api/triggers/webhooks/registerVector": {
      "post": {
        "tags": [
          "WebHookRegistrations"
        ],
        "summary": "When an intent vector is recognized",
        "description": "This operation triggers when the given LUIS intent vector is recognized by the bot.",
        "x-ms-no-generic-test": true,
        "operationId": "WebHookRegistrationsVector_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webHook",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebHookEx_Vector"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebHook"
            }
          }
        },
        "deprecated": false,
        "x-ms-trigger": "single"
      },
      "x-ms-notification-content": {
        "description": "Data from the bot",
        "schema": {
          "$ref": "#/definitions/DynamicResponseGetPayloadSchemaVector"
        }
      }
    },
    "/api/triggers/webhooks/registerResponse": {
      "post": {
        "tags": [
          "WebHookRegistrations"
        ],
        "summary": "Get response from User",
        "description": "This operation is used to ask the user for input.",
        "x-ms-no-generic-test": true,
        "operationId": "WebHookRegistrations_InputResponse",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webHook",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebHookBotMessage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebHook"
            }
          }
        },
        "deprecated": false
      },
      "x-ms-notification-content": {
        "description": "Data from the bot",
        "schema": {
          "$ref": "#/definitions/BotResponse"
        }
      }
    },
    "/api/triggers/webhooks/registerResponse_Date": {
      "post": {
        "tags": [
          "WebHookRegistrations"
        ],
        "summary": "Get datetime response from User",
        "description": "This operation is used to ask the user for datetime input.",
        "x-ms-no-generic-test": true,
        "operationId": "WebHookRegistrations_InputResponse_DATE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webHook",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebHookBotMessage_Date"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebHook"
            }
          }
        },
        "deprecated": false
      },
      "x-ms-notification-content": {
        "description": "Data from the bot",
        "schema": {
          "$ref": "#/definitions/BotResponse_Date"
        }
      }
    },
    "/api/triggers/webhooks/registerResponse_Choice": {
      "post": {
        "tags": [
          "WebHookRegistrations"
        ],
        "summary": "Get choice response from User",
        "description": "This operation is used to ask the user for choice input.",
        "x-ms-no-generic-test": true,
        "operationId": "WebHookRegistrations_InputResponse_CHOICE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webHook",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebHookBotMessage_Choice"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebHook"
            }
          }
        },
        "deprecated": false
      },
      "x-ms-notification-content": {
        "description": "Data from the bot",
        "schema": {
          "$ref": "#/definitions/BotResponse_Choice"
        }
      }
    },
    "/api/triggers/webhooks/registerResponse_ChoiceList": {
      "post": {
        "tags": [
          "WebHookRegistrations"
        ],
        "summary": "Get choice list response from User",
        "description": "This operation is used to ask the user for choice list input.",
        "x-ms-no-generic-test": true,
        "operationId": "WebHookRegistrations_InputResponse_CHOICELIST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webHook",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebHookBotMessage_ChoiceList"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebHook"
            }
          }
        },
        "deprecated": false
      },
      "x-ms-notification-content": {
        "description": "Data from the bot",
        "schema": {
          "$ref": "#/definitions/BotResponse_ChoiceList"
        }
      }
    },
    "/api/triggers/webhooks/registerResponse_People": {
      "post": {
        "tags": [
          "WebHookRegistrations"
        ],
        "summary": "Get people response from User",
        "description": "This operation is used to ask the user for people picker input.",
        "x-ms-no-generic-test": true,
        "operationId": "WebHookRegistrations_InputResponse_PEOPLE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webHook",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebHookBotMessage_People"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebHook"
            }
          }
        },
        "deprecated": false
      },
      "x-ms-notification-content": {
        "description": "Data from the bot",
        "schema": {
          "$ref": "#/definitions/BotResponse_People"
        }
      }
    },
    "/api/triggers/webhooks/registerResponse_IntentVector": {
      "post": {
        "tags": [
          "WebHookRegistrations"
        ],
        "summary": "Get intent vector response from User",
        "description": "This operation is used to ask the user for NLP input.",
        "x-ms-no-generic-test": true,
        "operationId": "WebHookRegistrations_InputResponse_INTENTVECTOR",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webHook",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebHookBotMessage_IntentVector"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebHook"
            }
          }
        },
        "deprecated": false
      },
      "x-ms-notification-content": {
        "description": "Data from the bot",
        "schema": {
          "$ref": "#/definitions/BotResponse_IntentVector"
        }
      }
    },
    "/api/triggers/webhooks/registerResponse_Memory": {
      "post": {
        "tags": [
          "WebHookRegistrations"
        ],
        "summary": "Get memory response from User",
        "description": "This operation is used to ask the user for bot memory input.",
        "x-ms-no-generic-test": true,
        "operationId": "WebHookRegistrations_InputResponse_MEMORY",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webHook",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebHookBotMessage_Memory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebHook"
            }
          }
        },
        "deprecated": false
      },
      "x-ms-notification-content": {
        "description": "Data from the bot",
        "schema": {
          "$ref": "#/definitions/BotResponse_Memory"
        }
      }
    },
    "/api/triggers/webhooks/registerResponse_AdaptiveCard": {
      "post": {
        "tags": [
          "WebHookRegistrations"
        ],
        "summary": "Get adaptive card response from User",
        "description": "This operation is used to ask the user for input via adaptive card.",
        "x-ms-no-generic-test": true,
        "operationId": "WebHookRegistrations_InputResponse_ADAPTIVECARD",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "selectedCard",
            "in": "header",
            "description": "Select the adaptive card.",
            "required": true,
            "x-ms-summary": "Selected Adaptive Card",
            "x-ms-dynamic-values": {
              "operationId": "ListAdaptiveCardForms",
              "parameters": {},
              "value-path": "id",
              "value-title": "name"
            },
            "type": "string"
          },
          {
            "name": "webHook",
            "in": "body",
            "schema": {
              "type": "object",
              "x-ms-dynamic-schema": {
                "operationId": "AdaptiveCards_GetCardWebhookFields",
                "parameters": {
                  "cardId": {
                    "parameter": "selectedCard"
                  }
                },
                "value-path": "notifications"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebHook"
            }
          }
        },
        "deprecated": false
      },
      "x-ms-notification-content": {
        "description": "Data from the bot",
        "schema": {
          "$ref": "#/definitions/BotResponse_AdaptiveCardSchema"
        }
      }
    },
    "/api/triggers/bot/saveBotMemory": {
      "post": {
        "tags": [
          "Bot",
          "Memory"
        ],
        "summary": "Save to bot memory",
        "description": "This operation is used to save a piece of information to memory in the bot.",
        "x-ms-no-generic-test": true,
        "operationId": "SaveBotMemory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveBotMemory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response_SaveBotMemory"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/triggers/bot/deleteBotMemory": {
      "post": {
        "tags": [
          "Bot",
          "Memory"
        ],
        "summary": "Delete from bot memory",
        "description": "This operation is used to remove a piece of information from memory in the bot.",
        "x-ms-no-generic-test": true,
        "operationId": "DeleteBotMemory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBotMemory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response_DeleteBotMemory"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/triggers/bot/CheckMemoryByType": {
      "post": {
        "tags": [
          "Bot Memory"
        ],
        "summary": "Get Bot Memory Items by Type",
        "description": "Get all Bot Memory Items by Type.",
        "operationId": "GetMemoryItemsByType",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "checkMemoryInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckMemoryInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MemoryItem"
              }
            }
          },
          "400": {
            "description": "Invalid user."
          },
          "500": {
            "description": "Error looking up memory items."
          }
        },
        "deprecated": false
      }
    },
    "/api/triggers/webhooks/delete": {
      "delete": {
        "tags": [
          "WebHookRegistrations"
        ],
        "summary": "Delete webhook",
        "description": "Deletes the webhook.",
        "x-ms-no-generic-test": true,
        "operationId": "WebHookRegistrations_Delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "WebHook Id.",
            "required": true,
            "x-ms-summary": "WebHook Id",
            "type": "string"
          },
          {
            "name": "pid",
            "in": "query",
            "description": "Principal Id.",
            "required": true,
            "x-ms-summary": "Principal Id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false,
        "x-ms-visibility": "internal"
      }
    }
  },
  "definitions": {
    "EnterpriseBot": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "AdaptiveCard": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "AdaptiveCardSet": {
      "required": [
        "cards",
        "displayStyle",
        "activityJson"
      ],
      "type": "object",
      "properties": {
        "cards": {
          "description": "Provide the card set object.",
          "type": "object",
          "x-ms-summary": "Adaptive Card Set"
        },
        "displayStyle": {
          "description": "Select the display style to use.",
          "default": "Carousel",
          "enum": [
            "Carousel",
            "List"
          ],
          "type": "string",
          "x-ms-summary": "Display Style"
        },
        "activityJson": {
          "description": "Reply Activity from the bot.",
          "type": "string",
          "x-ms-summary": "Reply Activity"
        },
        "showInTab": {
          "description": "Display this card set in a tab instead of inline chat.",
          "type": "boolean",
          "x-ms-summary": "Show In Tab",
          "default": false,
          "x-ms-visibility": "advanced"
        },
        "deepLinkButtonLabel": {
          "description": "Button label for displaying in a tab.",
          "type": "string",
          "x-ms-summary": "Tab Button Label",
          "x-ms-visibility": "advanced"
        },
        "deepLinkMessage": {
          "description": "Message to send with the button when displaying in a tab.",
          "type": "string",
          "x-ms-summary": "Tab Button Message",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "UpdateCardInfo": {
      "required": [
        "card",
        "activityJson"
      ],
      "type": "object",
      "properties": {
        "card": {
          "description": "Provide the card to use as the update.",
          "type": "object",
          "x-ms-summary": "Adaptive Card"
        },
        "activityJson": {
          "description": "Reply Activity from the bot.",
          "type": "string",
          "x-ms-summary": "Reply Activity"
        }
      }
    },
    "TeamsTeam": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "TeamsTeamChannel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "LuisApp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "culture": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "createdDate": {
          "format": "date-time",
          "type": "string"
        },
        "modifiedDate": {
          "format": "date-time",
          "type": "string"
        },
        "publishDate": {
          "format": "date-time",
          "type": "string"
        },
        "lastTrainedDate": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "authKey": {
          "type": "string"
        },
        "endpointKey": {
          "type": "string"
        },
        "endpontRegion": {
          "type": "string"
        },
        "usageScenario": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "numberOfIntents": {
          "format": "int32",
          "type": "integer"
        },
        "numberOfEntities": {
          "format": "int32",
          "type": "integer"
        },
        "limits": {
          "$ref": "#/definitions/Limits"
        },
        "isTrained": {
          "type": "boolean"
        },
        "endpointHits": {
          "format": "int32",
          "type": "integer"
        },
        "externalApiKeys": {
          "$ref": "#/definitions/ExternalApiKeys"
        },
        "hasSpellCheckSupportedCulture": {
          "type": "boolean"
        }
      }
    },
    "Limits": {
      "type": "object",
      "properties": {
        "maximumNumberOfIntents": {
          "format": "int32",
          "type": "integer"
        },
        "maximumNumberOfEntities": {
          "format": "int32",
          "type": "integer"
        },
        "maximumNumberOfFeatures": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ExternalApiKeys": {
      "type": "object",
      "properties": {}
    },
    "LuisIntent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "AppRegistration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "IntentVector": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "DynamicResponseGetPayloadSchema": {
      "type": "object",
      "x-ms-dynamic-schema": {
        "operationId": "Luis_GetPayloadSchema",
        "parameters": {
          "triggerType": {
            "parameter": "triggerType"
          },
          "luisApiKey": {
            "parameter": "luisApiKey"
          },
          "appId": {
            "parameter": "luisAppId"
          }
        },
        "value-path": "notifications"
      },
      "x-ms-dynamic-properties": {
        "operationId": "Luis_GetPayloadSchema",
        "parameters": {
          "triggerType": {
            "parameterReference": "webHook/triggerType"
          },
          "luisApiKey": {
            "parameterReference": "webHook/luisApiKey"
          },
          "appId": {
            "parameterReference": "webHook/luisAppId"
          }
        },
        "itemValuePath": "notifications"
      }
    },
    "DynamicResponseGetPayloadSchemaVector": {
      "type": "object",
      "x-ms-dynamic-schema": {
        "operationId": "Luis_GetPayloadSchemaVector",
        "parameters": {
          "vectorId": {
            "parameter": "intentVector"
          }
        },
        "value-path": "notifications"
      },
      "x-ms-dynamic-properties": {
        "operationId": "Luis_GetPayloadSchemaVector",
        "parameters": {
          "vectorId": {
            "parameterReference": "webHook/intentVector"
          }
        },
        "itemValuePath": "notifications"
      }
    },
    "DynamicResponseGetPayloadSchemaVectorForResponse": {
      "type": "object",
      "x-ms-dynamic-schema": {
        "operationId": "Luis_GetPayloadSchemaVectorForResponse",
        "parameters": {
          "vectorId": {
            "parameter": "intentVector"
          }
        },
        "value-path": "notifications"
      }
    },
    "DynamicResponseGetIntentSchemaList": {
      "type": "object",
      "x-ms-dynamic-schema": {
        "operationId": "Luis_GetIntentSchemaList",
        "parameters": {
          "luisApiKey": {
            "parameter": "luisApiKey"
          },
          "appId": {
            "parameter": "luisAppId"
          }
        },
        "value-path": "items"
      }
    },
    "DynamicResponseGetWebHookSchema": {
      "type": "object",
      "x-ms-dynamic-schema": {
        "operationId": "Luis_GetWebHookSchema",
        "parameters": {},
        "value-path": "items"
      }
    },
    "DynamicResponseBotReplyWithAdaptiveCard": {
      "type": "object",
      "x-ms-dynamic-schema": {
        "operationId": "AdaptiveCards_GetCardFields",
        "parameters": {
          "cardId": {
            "parameter": "selectedCard"
          }
        },
        "value-path": "fields"
      }
    },
    "WebHookFilter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "BotReply": {
      "required": [
        "message",
        "activityJson"
      ],
      "type": "object",
      "properties": {
        "message": {
          "description": "The message to reply to the user with.",
          "type": "string",
          "x-ms-summary": "Reply Text"
        },
        "activityJson": {
          "description": "Reply Activity from the bot",
          "type": "string",
          "x-ms-summary": "Reply Activity"
        },
        "showInChat": {
          "description": "If this is a Teams call, show this message in chat.  Otherwise, the bot will only speak the message.",
          "type": "boolean",
          "x-ms-summary": "Show in chat",
          "default": true,
          "x-ms-visibility": "advanced"
        },
        "customChannelDataJson": {
          "description": "Custom Channel Data Json for the message (only supported in Direct Line)",
          "type": "string",
          "x-ms-summary": "Custom Channel Data",
          "x-ms-visibility": "advanced"
        },
        "signalResponse": {
          "description": "Signal Response JSON string",
          "type": "string",
          "x-ms-summary": "Signal Response JSON",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "BotReplyResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the message created from the reply. Used to update the message.",
          "type": "string",
          "x-ms-summary": "Message Id"
        }
      }
    },
    "BotResponse": {
      "type": "object",
      "properties": {
        "text": {
          "description": "The response the user entered.",
          "type": "string",
          "x-ms-summary": "Response Text"
        },
        "cancelNotice": {
          "description": "This flag will be True if the user responds with a cancellation keyword.",
          "type": "boolean",
          "x-ms-summary": "Cancellation Notice"
        },
        "respondingUser": {
          "description": "The user responding to the bot.",
          "type": "string",
          "x-ms-summary": "Responding User"
        },
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "The file name.",
                "type": "string",
                "x-ms-summary": "File Name"
              },
              "content-type": {
                "description": "The file type.",
                "type": "string",
                "x-ms-summary": "File Type"
              },
              "bytes": {
                "description": "The file bytes.",
                "type": "string",
                "format": "byte",
                "x-ms-summary": "File Bytes"
              }
            }
          }
        }
      }
    },
    "BotResponse_Date": {
      "type": "object",
      "properties": {
        "text": {
          "description": "The response datetime the user entered.",
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Response Date"
        },
        "text_UTC": {
          "description": "The response datetime the user entered, in UTC format.",
          "type": "string",
          "format": "date-time",
          "x-ms-summary": "Response Date UTC"
        },
        "cancelNotice": {
          "description": "This flag will be True if the user responds with a cancellation keyword.",
          "type": "boolean",
          "x-ms-summary": "Cancellation Notice"
        },
        "respondingUser": {
          "description": "The user responding to the bot.",
          "type": "string",
          "x-ms-summary": "Responding User"
        }
      }
    },
    "BotResponse_Choice": {
      "type": "object",
      "properties": {
        "text": {
          "description": "The response choice the user entered.",
          "type": "string",
          "x-ms-summary": "Response Choice"
        },
        "cancelNotice": {
          "description": "This flag will be True if the user responds with a cancellation keyword.",
          "type": "boolean",
          "x-ms-summary": "Cancellation Notice"
        },
        "respondingUser": {
          "description": "The user responding to the bot.",
          "type": "string",
          "x-ms-summary": "Responding User"
        }
      }
    },
    "BotResponse_ChoiceList": {
      "type": "object",
      "properties": {
        "title": {
          "description": "The selected choice list title.",
          "type": "string",
          "x-ms-summary": "Selected Choice List Title"
        },
        "subtitle": {
          "description": "The selected choice list subtitle.",
          "type": "string",
          "x-ms-summary": "Selected Choice List Subtitle"
        },
        "value": {
          "description": "The selected choice list value.",
          "type": "string",
          "x-ms-summary": "Selected Choice List Value"
        },
        "cancelNotice": {
          "description": "This flag will be True if the user responds with a cancellation keyword.",
          "type": "boolean",
          "x-ms-summary": "Cancellation Notice"
        },
        "respondingUser": {
          "description": "The user responding to the bot.",
          "type": "string",
          "x-ms-summary": "Responding User"
        }
      }
    },
    "BotResponse_People": {
      "type": "object",
      "properties": {
        "people": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "upn": {
                "description": "The user principal name.",
                "type": "string",
                "x-ms-summary": "User Principal Name"
              },
              "userid": {
                "description": "The user Id.",
                "type": "string",
                "x-ms-summary": "User Id"
              },
              "fullname": {
                "description": "The user full name.",
                "type": "string",
                "x-ms-summary": "Full Name"
              },
              "email": {
                "description": "The user email.",
                "type": "string",
                "x-ms-summary": "Email"
              }
            }
          }
        },
        "cancelNotice": {
          "description": "This flag will be True if the user responds with a cancellation keyword.",
          "type": "boolean",
          "x-ms-summary": "Cancellation Notice"
        },
        "respondingUser": {
          "description": "The user responding to the bot.",
          "type": "string",
          "x-ms-summary": "Responding User"
        }
      }
    },
    "BotResponse_IntentVector": {
      "type": "object",
      "x-ms-dynamic-schema": {
        "operationId": "Luis_GetPayloadSchemaVectorForResponse",
        "parameters": {
          "vectorId": {
            "parameter": "intentVector"
          }
        },
        "value-path": "notifications"
      },
      "x-ms-dynamic-properties": {
        "operationId": "Luis_GetPayloadSchemaVectorForResponse",
        "parameters": {
          "vectorId": {
            "parameterReference": "webHook/intentVector"
          }
        },
        "itemValuePath": "notifications"
      }
    },
    "BotResponse_Memory": {
      "type": "object",
      "properties": {
        "title": {
          "description": "The title of the memory item.",
          "type": "string",
          "x-ms-summary": "Memory Item Title"
        },
        "value": {
          "description": "The value of the memory item.",
          "type": "string",
          "x-ms-summary": "Memory Item Value"
        },
        "cancelNotice": {
          "description": "This flag will be True if the user responds with a cancellation keyword.",
          "type": "boolean",
          "x-ms-summary": "Cancellation Notice"
        },
        "respondingUser": {
          "description": "The user responding to the bot.",
          "type": "string",
          "x-ms-summary": "Responding User"
        }
      }
    },
    "BotResponse_AdaptiveCardSchema": {
      "type": "object",
      "x-ms-dynamic-schema": {
        "operationId": "AdaptiveCards_GetCardFormOutputSchema",
        "parameters": {
          "cardId": {
            "parameter": "selectedCard"
          }
        },
        "value-path": "notifications"
      }
    },
    "Response_SaveBotMemory": {
      "type": "object",
      "properties": {
        "text": {
          "description": "The result of the save to bot memory.",
          "type": "string",
          "x-ms-summary": "Bot Memory Save Result"
        }
      }
    },
    "Response_DeleteBotMemory": {
      "type": "object",
      "properties": {
        "text": {
          "description": "The result of the delete from bot memory.",
          "type": "string",
          "x-ms-summary": "Bot Memory Delete Result"
        }
      }
    },
    "BotGroupConversationStart": {
      "required": [
        "EnterpriseBot",
        "teamIDStr",
        "channelId",
        "message"
      ],
      "type": "object",
      "properties": {
        "EnterpriseBot": {
          "description": "Select the bot.",
          "default": "AtBot",
          "type": "string",
          "x-ms-summary": "Target Bot",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetBots",
            "parameters": {},
            "value-path": "id",
            "value-title": "name"
          }
        },
        "teamIDStr": {
          "description": "The channel listing output.",
          "type": "object",
          "x-ms-summary": "Channel Listing"
        },
        "channelId": {
          "description": "The channel to post the conversation to.  Type in the name.",
          "type": "string",
          "x-ms-summary": "Channel Name"
        },
        "message": {
          "description": "The message to start the conversation with.",
          "type": "string",
          "x-ms-summary": "Conversation Text"
        }
      }
    },
    "BotGroupConversationStartResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the message created from the reply. Used to update the message.",
          "type": "string",
          "x-ms-summary": "Message Id"
        },
        "activityJson": {
          "description": "Activity Json.",
          "type": "string",
          "x-ms-summary": "Reply Activity"
        }
      }
    },
    "BotConversationStart": {
      "required": [
        "EnterpriseBot",
        "message",
        "user"
      ],
      "type": "object",
      "properties": {
        "EnterpriseBot": {
          "description": "Select the bot.",
          "default": "AtBot",
          "type": "string",
          "x-ms-summary": "Target Bot",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetBots",
            "parameters": {},
            "value-path": "id",
            "value-title": "name"
          }
        },
        "message": {
          "description": "The message to start the conversation with.",
          "type": "string",
          "x-ms-summary": "Conversation Text"
        },
        "user": {
          "description": "User principal name (UPN).",
          "type": "string",
          "x-ms-summary": "User"
        }
      }
    },
    "BotConversationStartResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the message created from the reply. Used to update the message.",
          "type": "string",
          "x-ms-summary": "Message Id"
        },
        "activityJson": {
          "description": "Activity Json.",
          "type": "string",
          "x-ms-summary": "Reply Activity"
        }
      }
    },
    "WebHookEx": {
      "required": [
        "triggerDescription",
        "triggerType",
        "webHookUri"
      ],
      "type": "object",
      "properties": {
        "webHookUri": {
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "triggerDescription": {
          "description": "Description shown in the bot help dialog",
          "type": "string",
          "x-ms-summary": "Trigger Description"
        },
        "triggerType": {
          "description": "Select the type of trigger.",
          "default": "Shared",
          "enum": [
            "Shared",
            "Personal"
          ],
          "type": "string",
          "x-ms-summary": "Bot Trigger Type"
        },
        "keywords": {
          "description": "Enter custom keywords that will trigger the Flow.",
          "type": "string",
          "x-ms-summary": "Keywords"
        },
        "luisApiKey": {
          "description": "(Deprecated) Provide AtBot with your LUIS API Key.  This parameter is deprecated.  Please use the Intent Vector trigger for LUIS use going forward.",
          "type": "string",
          "x-ms-summary": "(Deprecated) LUIS API Key",
          "x-ms-visibility": "advanced"
        },
        "luisAppId": {
          "description": "(Deprecated) Pick your LUIS app.  This parameter is deprecated.  Please use the Intent Vector trigger for LUIS use going forward.",
          "type": "string",
          "x-ms-summary": "(Deprecated) LUIS App",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetApps",
            "parameters": {
              "luisApiKey": {
                "parameter": "luisApiKey"
              }
            },
            "value-path": "id",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "GetApps",
            "parameters": {
              "luisApiKey": {
                "parameterReference": "webHook/luisApiKey"
              }
            },
            "itemValuePath": "id",
            "itemTitlePath": "name"
          }
        },
        "luisIntent": {
          "description": "(Deprecated) Pick the LUIS intent to use.  This parameter is deprecated.  Please use the Intent Vector trigger for LUIS use going forward.",
          "type": "string",
          "x-ms-summary": "(Deprecated) LUIS Intent",
          "x-ms-visibility": "advanced",
          "x-ms-dynamic-values": {
            "operationId": "GetIntents",
            "parameters": {
              "luisApiKey": {
                "parameter": "luisApiKey"
              },
              "appId": {
                "parameter": "luisAppId"
              }
            },
            "value-path": "name",
            "value-title": "name"
          },
          "x-ms-dynamic-list": {
            "operationId": "GetIntents",
            "parameters": {
              "luisApiKey": {
                "parameterReference": "webHook/luisApiKey"
              },
              "appId": {
                "parameterReference": "webHook/luisAppId"
              }
            },
            "itemValuePath": "name",
            "itemTitlePath": "name"
          }
        }
      }
    },
    "WebHookEx_Vector": {
      "required": [
        "triggerDescription",
        "triggerType",
        "webHookUri"
      ],
      "type": "object",
      "properties": {
        "webHookUri": {
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "triggerDescription": {
          "description": "Description shown in the bot help dialog.",
          "type": "string",
          "x-ms-summary": "Trigger Description"
        },
        "triggerType": {
          "description": "Select the type of trigger.",
          "default": "Shared",
          "enum": [
            "Shared",
            "Personal"
          ],
          "type": "string",
          "x-ms-summary": "Bot Trigger Type"
        },
        "intentVector": {
          "description": "Pick your LUIS Intent Vector.",
          "type": "string",
          "x-ms-summary": "LUIS Intent Vector",
          "x-ms-dynamic-values": {
            "operationId": "GetIntentVectors",
            "parameters": {},
            "value-path": "id",
            "value-title": "title"
          }
        },
        "allowBranching": {
          "description": "Allow the user to trigger branching skills while answering followup questions.",
          "default": "No",
          "enum": [
            "No",
            "Yes"
          ],
          "type": "string",
          "x-ms-summary": "Allow Branching",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "WebHookBotMessage": {
      "required": [
        "message",
        "activityJson",
        "webHookUri"
      ],
      "type": "object",
      "properties": {
        "webHookUri": {
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "message": {
          "description": "Enter the message to send to the user.",
          "type": "string",
          "x-ms-summary": "Message"
        },
        "activityJson": {
          "description": "Reply Activity from the bot.",
          "type": "string",
          "x-ms-summary": "Reply Activity"
        },
        "acceptResponseFrom": {
          "description": "Accept response from specific user or any user.",
          "default": "Original User",
          "enum": [
            "Original User",
            "Any User"
          ],
          "type": "string",
          "x-ms-summary": "Accept Response From",
          "x-ms-visibility": "advanced"
        },
        "showInChat": {
          "description": "If this is a Teams call, show this message in chat.  Otherwise, the bot will only speak the message.",
          "type": "boolean",
          "x-ms-summary": "Show in chat",
          "default": true,
          "x-ms-visibility": "advanced"
        }
      }
    },
    "WebHookBotMessage_Date": {
      "required": [
        "dateScope",
        "message",
        "activityJson",
        "webHookUri"
      ],
      "type": "object",
      "properties": {
        "webHookUri": {
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "dateScope": {
          "description": "Select the scope of the date value.",
          "default": "Date Only",
          "enum": [
            "Date Only",
            "Time Only",
            "Date and Time"
          ],
          "type": "string",
          "x-ms-summary": "Date Scope"
        },
        "message": {
          "description": "Enter the message to send to the user.",
          "type": "string",
          "x-ms-summary": "Message"
        },
        "activityJson": {
          "description": "Reply Activity from the bot.",
          "type": "string",
          "x-ms-summary": "Reply Activity"
        },
        "acceptResponseFrom": {
          "description": "Accept response from specific user or any user.",
          "default": "Original User",
          "enum": [
            "Original User",
            "Any User"
          ],
          "type": "string",
          "x-ms-summary": "Accept Response From",
          "x-ms-visibility": "advanced"
        },
        "allowBranching": {
          "description": "Allow the user to trigger branching skills before providing a response.",
          "default": "No",
          "enum": [
            "No",
            "Yes"
          ],
          "type": "string",
          "x-ms-summary": "Allow Branching",
          "x-ms-visibility": "advanced"
        },
        "showInChat": {
          "description": "If this is a Teams call, show this message in chat.  Otherwise, the bot will only speak the message.",
          "type": "boolean",
          "x-ms-summary": "Show in chat",
          "default": true,
          "x-ms-visibility": "advanced"
        }
      }
    },
    "WebHookBotMessage_Choice": {
      "required": [
        "message",
        "choices",
        "activityJson",
        "webHookUri"
      ],
      "type": "object",
      "properties": {
        "webHookUri": {
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "message": {
          "description": "Enter the message to send to the user.",
          "type": "string",
          "x-ms-summary": "Message"
        },
        "choices": {
          "description": "Provide each choice on a separate line.",
          "type": "string",
          "x-ms-summary": "Choice Values"
        },
        "activityJson": {
          "description": "Reply Activity from the bot.",
          "type": "string",
          "x-ms-summary": "Reply Activity"
        },
        "acceptResponseFrom": {
          "description": "Accept response from specific user or any user.",
          "default": "Original User",
          "enum": [
            "Original User",
            "Any User"
          ],
          "type": "string",
          "x-ms-summary": "Accept Response From",
          "x-ms-visibility": "advanced"
        },
        "allowBranching": {
          "description": "Allow the user to trigger branching skills before providing a response.",
          "default": "No",
          "enum": [
            "No",
            "Yes"
          ],
          "type": "string",
          "x-ms-summary": "Allow Branching",
          "x-ms-visibility": "advanced"
        },
        "showInChat": {
          "description": "If this is a Teams call, show this message in chat.  Otherwise, the bot will only speak the message.",
          "type": "boolean",
          "x-ms-summary": "Show in chat",
          "default": true,
          "x-ms-visibility": "advanced"
        },
        "listenForInput": {
          "description": "If this is a Teams call, this property determines whether the bot listens for a voice response.  If no, or not a Teams call the bot will not immediately listen for a voice response.",
          "type": "boolean",
          "x-ms-summary": "Listen for voice response",
          "default": false,
          "x-ms-visibility": "advanced"
        }
      }
    },
    "WebHookBotMessage_ChoiceList": {
      "required": [
        "message",
        "choices",
        "activityJson",
        "webHookUri"
      ],
      "type": "object",
      "properties": {
        "webHookUri": {
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "icon": {
          "description": "Enter an absolute url to an icon to display for each choice item.",
          "type": "string",
          "x-ms-summary": "Icon URL",
          "x-ms-visibility": "advanced"
        },
        "message": {
          "description": "Enter the message to send to the user.",
          "type": "string",
          "x-ms-summary": "Message"
        },
        "choices": {
          "description": "Provide the choice array object.",
          "type": "object",
          "x-ms-summary": "Choice Values"
        },
        "activityJson": {
          "description": "Reply Activity from the bot.",
          "type": "string",
          "x-ms-summary": "Reply Activity"
        },
        "acceptResponseFrom": {
          "description": "Accept response from specific user or any user.",
          "default": "Original User",
          "enum": [
            "Original User",
            "Any User"
          ],
          "type": "string",
          "x-ms-summary": "Accept Response From",
          "x-ms-visibility": "advanced"
        },
        "allowBranching": {
          "description": "Allow the user to trigger branching skills before providing a response.",
          "default": "No",
          "enum": [
            "No",
            "Yes"
          ],
          "type": "string",
          "x-ms-summary": "Allow Branching",
          "x-ms-visibility": "advanced"
        },
        "showInChat": {
          "description": "If this is a Teams call, show this message in chat.  Otherwise, the bot will only speak the message.",
          "type": "boolean",
          "x-ms-summary": "Show in chat",
          "default": true,
          "x-ms-visibility": "advanced"
        },
        "listenForInput": {
          "description": "If this is a Teams call, this property determines whether the bot listens for a voice response.  If no, or not a Teams call the bot will not immediately listen for a voice response.",
          "type": "boolean",
          "x-ms-summary": "Listen for voice response",
          "default": false,
          "x-ms-visibility": "advanced"
        }
      }
    },
    "WebHookBotMessage_People": {
      "required": [
        "message",
        "mode",
        "activityJson",
        "webHookUri"
      ],
      "type": "object",
      "properties": {
        "webHookUri": {
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "message": {
          "description": "Enter the message to send to the user.",
          "type": "string",
          "x-ms-summary": "Message"
        },
        "mode": {
          "description": "Ask the user to select one or many people.",
          "default": "Single",
          "enum": [
            "Single",
            "Multiple"
          ],
          "type": "string",
          "x-ms-summary": "Mode"
        },
        "searchstr": {
          "description": "Optionally provide a starting search string.",
          "type": "string",
          "x-ms-summary": "Search String"
        },
        "activityJson": {
          "description": "Reply Activity from the bot.",
          "type": "string",
          "x-ms-summary": "Reply Activity"
        },
        "acceptResponseFrom": {
          "description": "Accept response from specific user or any user.",
          "default": "Original User",
          "enum": [
            "Original User",
            "Any User"
          ],
          "type": "string",
          "x-ms-summary": "Accept Response From",
          "x-ms-visibility": "advanced"
        },
        "allowBranching": {
          "description": "Allow the user to trigger branching skills before providing a response.",
          "default": "No",
          "enum": [
            "No",
            "Yes"
          ],
          "type": "string",
          "x-ms-summary": "Allow Branching",
          "x-ms-visibility": "advanced"
        },
        "showInChat": {
          "description": "If this is a Teams call, show this message in chat.  Otherwise, the bot will only speak the message.",
          "type": "boolean",
          "x-ms-summary": "Show in chat",
          "default": true,
          "x-ms-visibility": "advanced"
        },
        "listenForInput": {
          "description": "If this is a Teams call, this property determines whether the bot listens for a voice response.  If no, or not a Teams call the bot will not immediately listen for a voice response.",
          "type": "boolean",
          "x-ms-summary": "Listen for voice response",
          "default": false,
          "x-ms-visibility": "advanced"
        }
      }
    },
    "WebHookBotMessage_IntentVector": {
      "required": [
        "message",
        "intentVector",
        "activityJson",
        "webHookUri"
      ],
      "type": "object",
      "properties": {
        "webHookUri": {
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "message": {
          "description": "Enter the message to send to the user.",
          "type": "string",
          "x-ms-summary": "Message"
        },
        "intentVector": {
          "description": "Pick your LUIS Intent Vector.",
          "type": "string",
          "x-ms-summary": "LUIS Intent Vector",
          "x-ms-dynamic-values": {
            "operationId": "GetIntentVectors",
            "parameters": {},
            "value-path": "id",
            "value-title": "title"
          }
        },
        "activityJson": {
          "description": "Reply Activity from the bot.",
          "type": "string",
          "x-ms-summary": "Reply Activity"
        },
        "acceptResponseFrom": {
          "description": "Accept response from specific user or any user.",
          "default": "Original User",
          "enum": [
            "Original User",
            "Any User"
          ],
          "type": "string",
          "x-ms-summary": "Accept Response From",
          "x-ms-visibility": "advanced"
        },
        "allowBranching": {
          "description": "Allow the user to trigger branching skills before providing a response.",
          "default": "No",
          "enum": [
            "No",
            "Yes"
          ],
          "type": "string",
          "x-ms-summary": "Allow Branching",
          "x-ms-visibility": "advanced"
        },
        "showInChat": {
          "description": "If this is a Teams call, show this message in chat.  Otherwise, the bot will only speak the message.",
          "type": "boolean",
          "x-ms-summary": "Show in chat",
          "default": true,
          "x-ms-visibility": "advanced"
        }
      }
    },
    "WebHookBotMessage_Memory": {
      "required": [
        "message",
        "type",
        "activityJson",
        "webHookUri"
      ],
      "type": "object",
      "properties": {
        "webHookUri": {
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "message": {
          "description": "Enter the message to send to the user.",
          "type": "string",
          "x-ms-summary": "Message"
        },
        "type": {
          "description": "Provide the type of memory to list.",
          "type": "string",
          "x-ms-summary": "Memory Type"
        },
        "activityJson": {
          "description": "Reply Activity from the bot.",
          "type": "string",
          "x-ms-summary": "Reply Activity"
        },
        "icon": {
          "description": "Enter an absolute url to an icon to display for each choice item.",
          "type": "string",
          "x-ms-summary": "Icon URL",
          "x-ms-visibility": "advanced"
        },
        "acceptResponseFrom": {
          "description": "Accept response from specific user or any user.",
          "default": "Original User",
          "enum": [
            "Original User",
            "Any User"
          ],
          "type": "string",
          "x-ms-summary": "Accept Response From",
          "x-ms-visibility": "advanced"
        },
        "targetUserMemory": {
          "description": "Optionally specify the UPN of the user the bot should pull memory items from.  If left blank, it will pull memory items from the user that initiated the skill.  In the case of a group conversation started from the bot, it will pull memory items from the user authenticated in Flow.",
          "type": "string",
          "x-ms-summary": "Target User",
          "x-ms-visibility": "advanced"
        },
        "allowBranching": {
          "description": "Allow the user to trigger branching skills before providing a response.",
          "default": "No",
          "enum": [
            "No",
            "Yes"
          ],
          "type": "string",
          "x-ms-summary": "Allow Branching",
          "x-ms-visibility": "advanced"
        },
        "showInChat": {
          "description": "If this is a Teams call, show this message in chat.  Otherwise, the bot will only speak the message.",
          "type": "boolean",
          "x-ms-summary": "Show in chat",
          "default": true,
          "x-ms-visibility": "advanced"
        }
      }
    },
    "SaveBotMemory": {
      "required": [
        "user",
        "type",
        "title",
        "value"
      ],
      "type": "object",
      "properties": {
        "user": {
          "description": "The user to save the memory item against.",
          "type": "string",
          "x-ms-summary": "User Principal Name"
        },
        "type": {
          "description": "The type of memory.",
          "type": "string",
          "x-ms-summary": "Memory Type"
        },
        "title": {
          "description": "The memory item title.",
          "type": "string",
          "x-ms-summary": "Title"
        },
        "value": {
          "description": "The memory item value.",
          "type": "string",
          "x-ms-summary": "Value"
        }
      }
    },
    "DeleteBotMemory": {
      "required": [
        "user",
        "type",
        "value"
      ],
      "type": "object",
      "properties": {
        "user": {
          "description": "The user to save the memory item against.",
          "type": "string",
          "x-ms-summary": "User Principal Name"
        },
        "type": {
          "description": "The type of memory.",
          "type": "string",
          "x-ms-summary": "Memory Type"
        },
        "value": {
          "description": "The memory item value.",
          "type": "string",
          "x-ms-summary": "Value"
        }
      }
    },
    "CheckMemoryInfo": {
      "required": [
        "user",
        "type"
      ],
      "type": "object",
      "properties": {
        "user": {
          "description": "Provide the User Principal Name.",
          "type": "string",
          "x-ms-summary": "User Principal Name."
        },
        "type": {
          "description": "Provide the type of memory to list.",
          "type": "string",
          "x-ms-summary": "Memory Type"
        }
      }
    },
    "MemoryItem": {
      "type": "object",
      "properties": {
        "title": {
          "description": "The title of the memory item.",
          "type": "string",
          "x-ms-summary": "Memory Item Title"
        },
        "value": {
          "description": "The value of the memory item.",
          "type": "string",
          "x-ms-summary": "Memory Item Value"
        }
      }
    },
    "WebHook": {
      "required": [
        "description",
        "id",
        "isPaused",
        "secret",
        "webHookUri"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "default": "id",
          "x-ms-visibility": "internal"
        },
        "webHookUri": {
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "secret": {
          "type": "string",
          "default": "secret",
          "x-ms-visibility": "internal"
        },
        "description": {
          "type": "string",
          "default": "description",
          "x-ms-visibility": "internal"
        },
        "isPaused": {
          "type": "boolean",
          "default": false,
          "x-ms-visibility": "internal"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        }
      }
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "AAD": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://login.windows.net/common/oauth2/authorize",
      "tokenUrl": "https://login.windows.net/common/oauth2/token",
      "scopes": {}
    }
  },
  "security": [],
  "tags": [],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.atbot.io"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://admin.atbot.io/privacy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "AI;Productivity"
    }
  ]
}