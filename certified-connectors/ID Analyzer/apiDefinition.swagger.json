{
  "swagger": "2.0",
  "info": {
    "title": "ID Analyzer",
    "description": "ID Analyzer provides several different identity verification products, you need to acquire basic knowledge of each product in order to choose the best solution for your application.",
    "version": "1.2",
    "contact": {
      "name": "ID Analyzer Support",
      "url": "https://www.idanalyzer.com/contact.html",
      "email": "support@idanalyzer.com"
    }
  },
  "host": "api.idanalyzer.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "documentNumber": {
                      "type": "string",
                      "description": "Unique identifier associated with the document (e.g. Passport No./Driver License No./Card Number etc)",
                      "title": "documentNumber"
                    },
                    "personalNumber": {
                      "type": "string",
                      "description": "Unique personal identifier associated with the person within a country (e.g. National ID Number)",
                      "title": "personalNumber"
                    },
                    "firstName": {
                      "type": "string",
                      "description": "First name / Given name",
                      "title": "firstName"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Last name / Family name",
                      "title": "lastName"
                    },
                    "middleName": {
                      "type": "string",
                      "description": "Middle name(s)",
                      "title": "middleName"
                    },
                    "fullName": {
                      "type": "string",
                      "description": "If the first name and last name cannot be distinguished full name will be returned instead",
                      "title": "fullName"
                    },
                    "firstName_local": {
                      "type": "string",
                      "description": "First name in local language if available",
                      "title": "firstName_local"
                    },
                    "lastName_local": {
                      "type": "string",
                      "description": "Last name in local language if available",
                      "title": "lastName_local"
                    },
                    "middleName_local": {
                      "type": "string",
                      "description": "Middle name in local language if available",
                      "title": "middleName_local"
                    },
                    "fullName_local": {
                      "type": "string",
                      "description": "Full name in local language if available",
                      "title": "fullName_local"
                    },
                    "sex": {
                      "type": "string",
                      "description": "Gender M=Male F=Female X=Unspecified",
                      "title": "sex"
                    },
                    "height": {
                      "type": "string",
                      "description": "Height of person",
                      "title": "height"
                    },
                    "weight": {
                      "type": "string",
                      "description": "Weight of person",
                      "title": "weight"
                    },
                    "hairColor": {
                      "type": "string",
                      "description": "Hair Color - ANSI D-20 hair color code (3 letters)",
                      "title": "hairColor"
                    },
                    "eyeColor": {
                      "type": "string",
                      "description": "Eye Color - ANSI D-20 eye color code (3 letters)",
                      "title": "eyeColor"
                    },
                    "age": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Age of the document holder",
                      "title": "age"
                    },
                    "dob": {
                      "type": "string",
                      "description": "Date of birth in YYYY/MM/DD",
                      "title": "dob"
                    },
                    "dob_day": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Date of birth day 1 to 31",
                      "title": "dob_day"
                    },
                    "dob_month": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Date of birth month 1 to 12",
                      "title": "dob_month"
                    },
                    "dob_year": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Date of birth year in YYYY",
                      "title": "dob_year"
                    },
                    "expiry": {
                      "type": "string",
                      "description": "Expiry date of document in YYYY/MM/DD",
                      "title": "expiry"
                    },
                    "expiry_day": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Day of expiry 1 to 31",
                      "title": "expiry_day"
                    },
                    "expiry_month": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Month of expiry 1 to 12",
                      "title": "expiry_month"
                    },
                    "expiry_year": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Year of expiry in YYYY",
                      "title": "expiry_year"
                    },
                    "daysToExpiry": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of days before the document expires",
                      "title": "daysToExpiry"
                    },
                    "issued": {
                      "type": "string",
                      "description": "Date of issue in YYYY/MM/DD",
                      "title": "issued"
                    },
                    "issued_day": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Day of issue 1 to 31",
                      "title": "issued_day"
                    },
                    "issued_month": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Month of issue 1 to 12",
                      "title": "issued_month"
                    },
                    "issued_year": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Year of issue in YYYY",
                      "title": "issued_year"
                    },
                    "daysFromIssue": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of days since the document was issued",
                      "title": "daysFromIssue"
                    },
                    "address1": {
                      "type": "string",
                      "description": "Address line 1",
                      "title": "address1"
                    },
                    "address2": {
                      "type": "string",
                      "description": "Address line 2",
                      "title": "address2"
                    },
                    "postcode": {
                      "type": "string",
                      "description": "Address postcode",
                      "title": "postcode"
                    },
                    "placeOfBirth": {
                      "type": "string",
                      "description": "Place of birth",
                      "title": "placeOfBirth"
                    },
                    "vehicleClass": {
                      "type": "string",
                      "description": "Driver license vehicle class",
                      "title": "vehicleClass"
                    },
                    "restrictions": {
                      "type": "string",
                      "description": "Driver license restrictions",
                      "title": "restrictions"
                    },
                    "endorsement": {
                      "type": "string",
                      "description": "Driver license endorsement",
                      "title": "endorsement"
                    },
                    "optionalData": {
                      "type": "string",
                      "description": "Extra unspecific data included in the document",
                      "title": "optionalData"
                    },
                    "optionalData2": {
                      "type": "string",
                      "description": "Extra unspecific data included in the document",
                      "title": "optionalData2"
                    },
                    "documentType": {
                      "type": "string",
                      "description": "Type of document: P=Passport, D=Driver's License, I=Identity Card, V=Visa, R=Residence Card, O=Other",
                      "title": "documentType"
                    },
                    "documentSide": {
                      "type": "string",
                      "description": "Side of the document: FRONT, BACK or BIODATA",
                      "title": "documentSide"
                    },
                    "issuerOrg_region_full": {
                      "type": "string",
                      "description": "Document issuer subregion/state. (e.g. California)",
                      "title": "issuerOrg_region_full"
                    },
                    "issuerOrg_region_abbr": {
                      "type": "string",
                      "description": "Document issuer subregion/state abbreviation. (e.g. CA)",
                      "title": "issuerOrg_region_abbr"
                    },
                    "issuerOrg_full": {
                      "type": "string",
                      "description": "Document issued country. (e.g. United States)",
                      "title": "issuerOrg_full"
                    },
                    "issuerOrg_iso2": {
                      "type": "string",
                      "description": "Document issued country code in ISO2. (e.g. US)",
                      "title": "issuerOrg_iso2"
                    },
                    "issuerOrg_iso3": {
                      "type": "string",
                      "description": "Document issued country code in ISO3. (e.g. USA)",
                      "title": "issuerOrg_iso3"
                    },
                    "nationality_full": {
                      "type": "string",
                      "description": "Document holder nationality. (e.g. United States)",
                      "title": "nationality_full"
                    },
                    "nationality_iso2": {
                      "type": "string",
                      "description": "Document holder nationality in ISO2. (e.g. US)",
                      "title": "nationality_iso2"
                    },
                    "nationality_iso3": {
                      "type": "string",
                      "description": "Document holder nationality in ISO3. (e.g. USA)",
                      "title": "nationality_iso3"
                    },
                    "internalId": {
                      "type": "string",
                      "description": "Used to identify the unique document ID under ID Analyzer system, same type of document should have the same ID.",
                      "title": "internalId"
                    }
                  },
                  "description": "Contains an array of matched fields and their value.",
                  "title": "result"
                },
                "confidence": {
                  "type": "object",
                  "properties": {
                    "documentNumber": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of documentNumber",
                      "title": "documentNumber"
                    },
                    "firstName": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of firstName",
                      "title": "firstName"
                    },
                    "lastName": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of Last name /Family name",
                      "title": "lastName"
                    },
                    "middleName": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of Middle Name(s)",
                      "title": "middleName"
                    },
                    "dob_month": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of dob_month",
                      "title": "dob_month"
                    },
                    "dob_day": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of dob_day",
                      "title": "dob_day"
                    },
                    "dob_year": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of dob_year",
                      "title": "dob_year"
                    },
                    "issued_month": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of issued_month",
                      "title": "issued_month"
                    },
                    "issued_day": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of issued_day",
                      "title": "issued_day"
                    },
                    "issued_year": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of  issued_year",
                      "title": "issued_year"
                    },
                    "expiry_month": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of expiry_month",
                      "title": "expiry_month"
                    },
                    "expiry_day": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of expiry_day",
                      "title": "expiry_day"
                    },
                    "expiry_year": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of expiry_year",
                      "title": "expiry_year"
                    },
                    "sex": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of sex",
                      "title": "sex"
                    },
                    "height": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of height",
                      "title": "height"
                    },
                    "weight": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of weight",
                      "title": "weight"
                    },
                    "address1": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of address1",
                      "title": "address1"
                    },
                    "address2": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of address2",
                      "title": "address2"
                    },
                    "postcode": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of postcode",
                      "title": "postcode"
                    },
                    "vehicleClass": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of vehicleClass",
                      "title": "vehicleClass"
                    },
                    "restrictions": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of restrictions",
                      "title": "restrictions"
                    },
                    "endorsement": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of endorsement",
                      "title": "endorsement"
                    },
                    "eyeColor": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of eyeColor",
                      "title": "eyeColor"
                    },
                    "age": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of age",
                      "title": "age"
                    },
                    "dob": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of dob",
                      "title": "dob"
                    },
                    "daysToExpiry": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of daysToExpiry",
                      "title": "daysToExpiry"
                    },
                    "expiry": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of expiry",
                      "title": "expiry"
                    },
                    "issued": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of issued",
                      "title": "issued"
                    },
                    "daysFromIssue": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of daysFromIssue",
                      "title": "daysFromIssue"
                    },
                    "fullName": {
                      "type": "number",
                      "format": "float",
                      "description": "confidence level of fullName",
                      "title": "fullName"
                    }
                  },
                  "description": "If return_confidence is set to true, a key-value array containing field name and confidence level will be returned. Confidence score is a float between 0 to 1.",
                  "title": "confidence"
                },
                "face": {
                  "type": "object",
                  "properties": {
                    "isIdentical": {
                      "type": "boolean",
                      "description": "Biometric verification passed or failed",
                      "title": "isIdentical"
                    },
                    "confidence": {
                      "type": "string",
                      "description": "Value between 0 to 1 on how similar the two faces are, 1 being identical.",
                      "title": "confidence"
                    },
                    "error": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error Code",
                      "title": "error"
                    },
                    "error_message": {
                      "type": "string",
                      "description": "Error message. Example: Could not find face data within facial image",
                      "title": "error_message"
                    }
                  },
                  "description": "If a biometric verification request was submitted, an array will be returned.",
                  "title": "face"
                },
                "verification": {
                  "type": "object",
                  "properties": {
                    "passed": {
                      "type": "boolean",
                      "description": "If document has passed all verifications, will return true. If document has failed at least one verification type, will return false.",
                      "title": "passed"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "face": {
                          "type": "boolean",
                          "description": "If biometric verification is enabled, whether similarity confidence score is above set threshold.",
                          "title": "face"
                        },
                        "notexpired": {
                          "type": "boolean",
                          "description": "Whether the document has not yet expired.",
                          "title": "notexpired"
                        },
                        "name": {
                          "type": "boolean",
                          "description": "Whether supplied name matched with the name parsed from ID.",
                          "title": "name"
                        },
                        "dob": {
                          "type": "boolean",
                          "description": "Whether supplied birthday matched with the birthday parsed from ID.",
                          "title": "dob"
                        },
                        "documentNumber": {
                          "type": "boolean",
                          "description": "Whether supplied document number matched with document number parsed from ID.",
                          "title": "documentNumber"
                        },
                        "postcode": {
                          "type": "boolean",
                          "description": "Whether supplied postcode matched with the postcode parsed from ID.",
                          "title": "postcode"
                        },
                        "address": {
                          "type": "boolean",
                          "description": "Whether supplied address matched with the address parsed from ID.",
                          "title": "address"
                        },
                        "checkdigit": {
                          "type": "boolean",
                          "description": "If the type of document has a check digit/soundex algorithm, whether the check digits are valid.",
                          "title": "checkdigit"
                        },
                        "age": {
                          "type": "boolean",
                          "description": "Whether document holder is within the set age range.",
                          "title": "age"
                        },
                        "cccode": {
                          "type": "boolean",
                          "description": "If the type of document has Chinese commercial code (CC code) implementation, whether the CC codes are valid.",
                          "title": "cccode"
                        }
                      },
                      "description": "Array containing result boolean for individual verification.",
                      "title": "reault"
                    }
                  },
                  "description": "If any of the verification parameters were submitted, an array will be returned.",
                  "title": "verification"
                },
                "authentication": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "number",
                      "format": "float",
                      "description": "The score will be a float between 0 to 1. Valid documents will have a score closer to 1 while fake or edited documents will have a score closer to 0. It is your discretion to decide the boundary, a good starting point would be rejecting score less than 0.5",
                      "title": "score"
                    },
                    "breakdown": {
                      "type": "object",
                      "properties": {
                        "data_visibility": {
                          "type": "object",
                          "properties": {
                            "passed": {
                              "type": "boolean",
                              "title": "passed"
                            }
                          },
                          "description": "Check if document number, firstname, lastname and birthday are clearly visible.",
                          "title": "data_visibility"
                        },
                        "image_quality": {
                          "type": "object",
                          "properties": {
                            "passed": {
                              "type": "boolean",
                              "title": "passed"
                            }
                          },
                          "description": "Check if the image appears to be a high quality image taken directly from camera without cropping or resizing.",
                          "title": "image_quality"
                        },
                        "feature_referencing": {
                          "type": "object",
                          "properties": {
                            "passed": {
                              "type": "boolean",
                              "title": "passed"
                            }
                          },
                          "description": "Check features and details of submitted document with a genuine document reference.",
                          "title": "feature_referencing"
                        },
                        "exif_check": {
                          "type": "object",
                          "properties": {
                            "passed": {
                              "type": "boolean",
                              "title": "passed"
                            },
                            "code": {
                              "type": "integer",
                              "format": "int32",
                              "title": "code"
                            },
                            "reason": {
                              "type": "string",
                              "title": "reason"
                            },
                            "severity": {
                              "type": "string",
                              "title": "severity"
                            }
                          },
                          "description": "Check if the image has been edited in photo editing software.",
                          "title": "exif_check"
                        },
                        "publicity_check": {
                          "type": "object",
                          "properties": {
                            "passed": {
                              "type": "boolean",
                              "title": "passed"
                            },
                            "code": {
                              "type": "integer",
                              "format": "int32",
                              "title": "code"
                            },
                            "reason": {
                              "type": "string",
                              "title": "reason"
                            },
                            "severity": {
                              "type": "string",
                              "title": "severity"
                            }
                          },
                          "description": "Check if the document can be obtained from a public domain such as the internet.",
                          "title": "publicity_check"
                        },
                        "text_analysis": {
                          "type": "object",
                          "properties": {
                            "passed": {
                              "type": "boolean",
                              "title": "passed"
                            }
                          },
                          "description": "Check if the text present in the document has been tampered.",
                          "title": "text_analysis"
                        },
                        "biometric_analysis": {
                          "type": "object",
                          "properties": {
                            "passed": {
                              "type": "boolean",
                              "title": "passed"
                            }
                          },
                          "description": "Check biometric features of the document.",
                          "title": "biometric_analysis"
                        },
                        "security_feature_check": {
                          "type": "object",
                          "properties": {
                            "passed": {
                              "type": "boolean",
                              "title": "passed"
                            },
                            "code": {
                              "type": "integer",
                              "format": "int32",
                              "title": "code"
                            },
                            "reason": {
                              "type": "string",
                              "title": "reason"
                            },
                            "severity": {
                              "type": "string",
                              "title": "severity"
                            }
                          },
                          "description": "Check if watermark, hologram, laser engraving are present on the document.",
                          "title": "security_feature_check"
                        },
                        "recapture_check": {
                          "type": "object",
                          "properties": {
                            "passed": {
                              "type": "boolean",
                              "title": "passed"
                            },
                            "code": {
                              "type": "integer",
                              "format": "int32",
                              "title": "code"
                            },
                            "reason": {
                              "type": "string",
                              "title": "reason"
                            },
                            "severity": {
                              "type": "string",
                              "title": "severity"
                            }
                          },
                          "description": "Check if the document is a recaptured image from a screen.",
                          "title": "recapture_check"
                        }
                      },
                      "description": "Returns details about each checks performed and their results.",
                      "title": "breakdown"
                    },
                    "warning": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Array of string containing warning messages about validity of the document.",
                      "title": "warning"
                    }
                  },
                  "description": "If authenticate is set to true, the document will be validated and an array will be returned.",
                  "title": "authentication"
                },
                "aml": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "entity": {
                        "type": "string",
                        "description": "person or legalentity",
                        "title": "entity"
                      },
                      "fullname": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Person or legal entity name(s)",
                        "title": "fullname"
                      },
                      "firstname": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Person first name(s)",
                        "title": "firstname"
                      },
                      "lastname": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Person last name(s)",
                        "title": "lastname"
                      },
                      "middlename": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Person middle name(s)",
                        "title": "middlename"
                      },
                      "alias": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Alternative or foreign name(s) of the entity",
                        "title": "alias"
                      },
                      "dob": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Peron's birthday, could come in YYYY, YYYY-MM, or YYYY-MM-DD formats.",
                        "title": "dob"
                      },
                      "address": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Address or residing country of the entity",
                        "title": "address"
                      },
                      "nationality": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Country or nationality of the entity",
                        "title": "nationality"
                      },
                      "birthplace": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Peron's birth place",
                        "title": "birthplace"
                      },
                      "gender": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Peron's gender: M or F",
                        "title": "gender"
                      },
                      "documentnumber": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Document number",
                              "title": "id"
                            },
                            "id_formatted": {
                              "type": "string",
                              "description": "Alphanumeric document number",
                              "title": "id_formatted"
                            },
                            "country": {
                              "type": "string",
                              "description": "ISO2 country code",
                              "title": "country"
                            },
                            "type": {
                              "type": "string",
                              "description": "P = Passport number, I = ID number, D = Driving license number, O = Other/Unknown document type",
                              "title": "type"
                            }
                          }
                        },
                        "description": "A list of documents associated with the entity.",
                        "title": "documentnumber"
                      },
                      "program": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Sanction program(s)",
                        "title": "program"
                      },
                      "note": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Additional note for the entity",
                        "title": "note"
                      },
                      "time": {
                        "type": "string",
                        "description": "UTC TZ timestamp when entity was added to the source list or last updated",
                        "title": "time"
                      },
                      "status": {
                        "type": "string",
                        "description": "Position/title of the entity or current status of the sanction",
                        "title": "status"
                      },
                      "source": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "A list of official source URL(s)",
                        "title": "source"
                      },
                      "database": {
                        "type": "string",
                        "description": "ID Analyzer AML database code",
                        "title": "database"
                      },
                      "schema": {
                        "type": "string",
                        "title": "schema"
                      }
                    }
                  },
                  "description": "Array containing list of AML matches, returns an empty array if no match was found. For specific details refer to AML API Reference.",
                  "title": "aml"
                },
                "contract": {
                  "type": "object",
                  "properties": {
                    "document_url": {
                      "type": "string",
                      "description": "URL to generated document",
                      "title": "document_url"
                    },
                    "error": {
                      "type": "string",
                      "description": "In case the contract failed to generate, this field will contain reason such as \"Invalid contract template ID\".",
                      "title": "error"
                    }
                  },
                  "description": "If a template ID is set through contract_generate, an autofilled document will be generated.",
                  "title": "contract"
                },
                "vaultid": {
                  "type": "string",
                  "description": "Unique identifier to the vault entry if vault_save is enabled.",
                  "title": "vaultid"
                },
                "matchrate": {
                  "type": "number",
                  "format": "float",
                  "description": "The ratio of fields successfully recognized by the API, a low ratio would indicate the document image is too blurry.",
                  "title": "matchrate"
                },
                "output": {
                  "type": "string",
                  "description": "If outputimage is set to true and outputmode is url, this field will include an URL (or an array of URLs for dualside scan) pointing to the cropped document image. The link is only guaranteed to live for 600 seconds, and will be removed any time after.",
                  "title": "output"
                },
                "outputface": {
                  "type": "string",
                  "description": "If outputface is set to true and outputmode is url, this field will include an URL pointing to the cropped face image. The link is only guaranteed to live for 600 seconds, and will be removed any time after.",
                  "title": "outputface"
                },
                "cropped": {
                  "type": "string",
                  "description": "If outputimage is set to true and outputmode is base64, this field will include a base64-encoded image (or an array of base64-encoded images for dualside scan) of cropped document in JPEG format",
                  "title": "cropped"
                },
                "croppedface": {
                  "type": "string",
                  "description": "If outputface is set to true and outputmode is base64, this field will include a base64-encoded image of cropped face region of the document in JPEG format",
                  "title": "croppedface"
                },
                "executionTime": {
                  "type": "number",
                  "format": "float",
                  "description": "Time taken for the API operation in seconds.",
                  "title": "executionTime"
                },
                "responseID": {
                  "type": "string",
                  "description": "A unique identifier to identify the request/response.",
                  "title": "responseID"
                },
                "quota": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Remaining API quota, resets at beginning of each month for free or yearly subscriber, or at start of each billing cycle for monthly subscriber. If you have a subscription plan, your monthly quota will be used before your credit.",
                  "title": "quota"
                },
                "credit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Remaining test credit for your account. If you have a subscription plan, your monthly quota will be used before your credit.",
                  "title": "credit"
                }
              }
            }
          },
          "400": {
            "description": "error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the error encountered.",
                      "title": "message"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "title": "code"
                    }
                  },
                  "description": "This field will only be returned if there was an error, containing the following array."
                },
                "executionTime": {
                  "type": "number",
                  "format": "float",
                  "description": "Time taken for the API operation in seconds.",
                  "title": "executionTime"
                },
                "responseID": {
                  "type": "string",
                  "description": "A unique identifier to identify the request/response.",
                  "title": "responseID"
                }
              }
            }
          }
        },
        "summary": "Core API Setting",
        "description": "Multi-function ID verification API to verify remote physical document, its authenticity and face match the document with your user photo.",
        "operationId": "SettingCoreAPI",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apikey": {
                  "type": "string",
                  "description": "Your private API key is available under your web portal.",
                  "title": "apikey"
                },
                "file_base64": {
                  "type": "string",
                  "description": "You can upload a base64-encoded image as a string using application/x-www-form-urlencoded or application/json.",
                  "title": "file_base64"
                },
                "url": {
                  "type": "string",
                  "description": "Core API is capable of downloading remote image from your server.",
                  "title": "url"
                },
                "file_back_base64": {
                  "type": "string",
                  "description": "Base64-encoded image of the back of the document to perform a dual-side scan.",
                  "title": "file_back_base64"
                },
                "url_back": {
                  "type": "string",
                  "description": "Remote image of the back of the document to perform a dual-side scan.",
                  "title": "url_back"
                },
                "face_base64": {
                  "type": "string",
                  "description": "Base64-encoded image of a person's face to perform photo biometric verification.",
                  "title": "face_base64"
                },
                "faceurl": {
                  "type": "string",
                  "description": "Remote image of of a person's face to perform photo biometric verification.",
                  "title": "faceurl"
                },
                "video_base64": {
                  "type": "string",
                  "description": "Base64-encoded selfie video to perform video biometric verification.",
                  "title": "video_base64"
                },
                "videourl": {
                  "type": "string",
                  "description": "Remote hosted selfie video to perform video biometric verification.",
                  "title": "videourl"
                },
                "passcode": {
                  "type": "string",
                  "description": "4 digit number",
                  "title": "passcode"
                },
                "accuracy": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Configure the speed and accuracy of document recognition and ocr results. Low accuracy will reduce response time to under 1 second while high accuracy will generally takes 2~3 seconds.",
                  "title": "accuracy",
                  "default": 2
                },
                "authenticate": {
                  "type": "boolean",
                  "description": "Validate the document to check whether the document is authentic and has not been tampered.",
                  "title": "authenticate",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "authenticate_module": {
                  "type": "string",
                  "description": "Specify module used for validating the document.",
                  "title": "authenticate_module",
                  "default": "1"
                },
                "biometric_threshold": {
                  "type": "number",
                  "format": "float",
                  "description": "Specify the minimum score to pass facial biometric verification",
                  "title": "biometric_threshold",
                  "default": 0.4
                },
                "return_confidence": {
                  "type": "boolean",
                  "description": "Return confidence score for each data field.",
                  "title": "return_confidence",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "return_empty": {
                  "type": "boolean",
                  "description": "You can get the API to return null on empty fields by enabling this parameter.",
                  "title": "return_empty",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "ocr_scaledown": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number between 500 to 4000 or 0",
                  "title": "ocr_scaledown",
                  "default": 1500
                },
                "outputimage": {
                  "type": "boolean",
                  "description": "Produce a cropped image of the document.",
                  "title": "outputimage",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "outputface": {
                  "type": "boolean",
                  "description": "Produce a cropped image of the face region on the document.",
                  "title": "outputface",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "outputmode": {
                  "type": "string",
                  "description": "Output the cropped document and face as either URL or base64-encoded content.",
                  "title": "outputmode",
                  "default": "url"
                },
                "dualsidecheck": {
                  "type": "boolean",
                  "description": "Check if the names, document number and document type matches between the front and the back of the document when performing dual-side scan. If any information mismatches error 14 will be thrown.",
                  "title": "dualsidecheck",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "verify_expiry": {
                  "type": "boolean",
                  "description": "Check if the document is still valid based on its expiry date.",
                  "title": "verify_expiry",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "verify_documentno": {
                  "type": "string",
                  "description": "Check if supplied document number matches with document.",
                  "title": "verify_documentno"
                },
                "verify_dob": {
                  "type": "string",
                  "description": "Check if supplied date of birth matches with document. (YYYY/MM/DD)",
                  "title": "verify_dob"
                },
                "verify_age": {
                  "type": "string",
                  "description": "Check if the document holder is aged between the given range. (range, example: 18-40)",
                  "title": "verify_age"
                },
                "verify_address": {
                  "type": "string",
                  "description": "Check if supplied address matches with document.",
                  "title": "verify_address"
                },
                "verify_postcode": {
                  "type": "string",
                  "description": "Check if supplied postcode matches with document.",
                  "title": "verify_postcode"
                },
                "country": {
                  "type": "string",
                  "description": "Check if the document was issued by specified countries, if not error code 10 will be thrown. Separate multiple values with comma. For example \"US,CA\" would accept documents from United States and Canada.",
                  "title": "country"
                },
                "region": {
                  "type": "string",
                  "description": "Check if the document was issued by specified state, if not error code 11 will be thrown. Separate multiple values with comma. For example \"CA,TX\" would accept documents from California and Texas.",
                  "title": "region"
                },
                "type": {
                  "type": "string",
                  "description": "Check if the document was one of the specified types, if not error code 12 will be thrown. For example \"PD\" would accept both passport and drivers license.",
                  "title": "type"
                },
                "checkblocklist": {
                  "type": "boolean",
                  "description": "Check the document data against blocked entries in your vault. If the document matches one of the blocked entry error 15 will be thrown",
                  "title": "checkblocklist",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "vault_save": {
                  "type": "boolean",
                  "description": "Save document image and parsed information in your secured vault. You can list, search and update document entries in your vault through Vault API or web portal.",
                  "title": "vault_save",
                  "enum": [
                    true,
                    false
                  ],
                  "default": true
                },
                "vault_saveunrecognized": {
                  "type": "boolean",
                  "description": "Save document image in your vault even if the document cannot be recognized.",
                  "title": "vault_saveunrecognized",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "vault_noduplicate": {
                  "type": "boolean",
                  "description": "Prevent duplicated images from being saved.",
                  "title": "vault_noduplicate",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "vault_automerge": {
                  "type": "boolean",
                  "description": "Automatically merge images with same document number into a single entry inside vault.",
                  "title": "vault_automerge",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "vault_customdata1": {
                  "type": "string",
                  "description": "Add up to 5 custom strings that will be associated with the vault entry, this can be useful for filtering and searching entries.",
                  "title": "vault_customdata1"
                },
                "vault_customdata2": {
                  "type": "string",
                  "description": "Add up to 5 custom strings that will be associated with the vault entry, this can be useful for filtering and searching entries.",
                  "title": "vault_customdata2"
                },
                "vault_customdata3": {
                  "type": "string",
                  "description": "Add up to 5 custom strings that will be associated with the vault entry, this can be useful for filtering and searching entries.",
                  "title": "vault_customdata3"
                },
                "vault_customdata4": {
                  "type": "string",
                  "description": "Add up to 5 custom strings that will be associated with the vault entry, this can be useful for filtering and searching entries.",
                  "title": "vault_customdata4"
                },
                "vault_customdata5": {
                  "type": "string",
                  "description": "Add up to 5 custom strings that will be associated with the vault entry, this can be useful for filtering and searching entries.",
                  "title": "vault_customdata5"
                },
                "aml_check": {
                  "type": "boolean",
                  "description": "Check document holder's name and document number against ID Analyzer AML Database.",
                  "title": "aml_check",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "aml_database": {
                  "type": "string",
                  "description": "Separate each database code with comma, for example: un_sc,us_ofac.",
                  "title": "aml_database"
                },
                "aml_strict_match": {
                  "type": "boolean",
                  "description": "Enable this parameter to reduce false-positives by only matching entities with exact same nationality and birthday.",
                  "title": "aml_strict_match",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "contract_generate": {
                  "type": "string",
                  "description": "Contract template ID to autofill with user data.",
                  "title": "contract_generate"
                },
                "contract_format": {
                  "type": "string",
                  "description": "Output document format. Optionals: PDF, DOCX, HTML.",
                  "title": "contract_format"
                },
                "contract_prefill_data": {
                  "type": "object",
                  "title": "contract_prefill_data"
                }
              },
              "required": [
                "apikey"
              ]
            }
          }
        ]
      }
    },
    "/vault/get": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "integer",
                  "format": "int32",
                  "title": "success"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Vault entry identifier",
                      "title": "id"
                    },
                    "createtime": {
                      "type": "string",
                      "description": "Timestamp of entry creation in UTC",
                      "title": "createtime"
                    },
                    "updatetime": {
                      "type": "string",
                      "description": "Timestamp of last modification in UTC",
                      "title": "updatetime"
                    },
                    "trustlevel": {
                      "type": "string",
                      "description": "This score is calculated automatically if authentication is enabled. (0: Undetermined, 1: Invalid document, 2: Suspicious, 3: Valid)",
                      "title": "trustlevel"
                    },
                    "trustnote": {
                      "type": "string",
                      "description": "Warnings associated with document validity.",
                      "title": "trustnote"
                    },
                    "docupass_reference": {
                      "type": "string",
                      "description": "Reference code to DocuPass session",
                      "title": "docupass_reference"
                    },
                    "docupass_success": {
                      "type": "string",
                      "description": "0 or 1, whether the DocuPass verification succeeded or failed.",
                      "title": "docupass_success"
                    },
                    "docupass_failedreason": {
                      "type": "string",
                      "description": "If DocuPass verification has failed, the reason why it failed.",
                      "title": "docupass_failedreason"
                    },
                    "docupass_customid": {
                      "type": "string",
                      "description": "customid passed when creating DocuPass verification.",
                      "title": "docupass_customid"
                    },
                    "documentNumber": {
                      "type": "string",
                      "description": "The unique identifier of the document (Passport No./Driver License No. etc)",
                      "title": "documentNumber"
                    },
                    "documentNumber_formatted": {
                      "type": "string",
                      "description": "Automatically generated string of documentNumber without any symbols, this field is useful for filtering results.",
                      "title": "documentNumber_formatted"
                    },
                    "personalNumber": {
                      "type": "string",
                      "description": "A secondary identifier number on the document",
                      "title": "personalNumber"
                    },
                    "firstName": {
                      "type": "string",
                      "description": "First name / Given name",
                      "title": "firstName"
                    },
                    "middleName": {
                      "type": "string",
                      "description": "Middle name(s)",
                      "title": "middleName"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Last name / Family name",
                      "title": "lastName"
                    },
                    "fullName": {
                      "type": "string",
                      "description": "Full name (Updating other name fields will not update fullName)",
                      "title": "fullName"
                    },
                    "firstName_local": {
                      "type": "string",
                      "description": "First name in local language",
                      "title": "firstName_local"
                    },
                    "middleName_local": {
                      "type": "string",
                      "description": "Middle name in local language",
                      "title": "middleName_local"
                    },
                    "lastName_local": {
                      "type": "string",
                      "description": "Last name in local language",
                      "title": "lastName_local"
                    },
                    "fullName_local": {
                      "type": "string",
                      "description": "Full name in local language",
                      "title": "fullName_local"
                    },
                    "dob": {
                      "type": "string",
                      "description": "Date of birth",
                      "title": "dob"
                    },
                    "issued": {
                      "type": "string",
                      "description": "Issue date",
                      "title": "issued"
                    },
                    "expiry": {
                      "type": "string",
                      "description": "Expiry date",
                      "title": "expiry"
                    },
                    "sex": {
                      "type": "string",
                      "description": "M: Male, F: Female, X: Unspecified",
                      "title": "sex"
                    },
                    "height": {
                      "type": "string",
                      "description": "Height of person",
                      "title": "height"
                    },
                    "weight": {
                      "type": "string",
                      "description": "Weight of person",
                      "title": "weight"
                    },
                    "hairColor": {
                      "type": "string",
                      "description": "Hair color",
                      "title": "hairColor"
                    },
                    "eyeColor": {
                      "type": "string",
                      "description": "Eye color",
                      "title": "eyeColor"
                    },
                    "address1": {
                      "type": "string",
                      "description": "Address line 1",
                      "title": "address1"
                    },
                    "address2": {
                      "type": "string",
                      "description": "Address line 2",
                      "title": "address2"
                    },
                    "postcode": {
                      "type": "string",
                      "description": "Address postcode",
                      "title": "postcode"
                    },
                    "placeOfBirth": {
                      "type": "string",
                      "description": "Place of birth",
                      "title": "placeOfBirth"
                    },
                    "documentType": {
                      "type": "string",
                      "description": "P: Passport, D: Driver's License, I: Identity Card, V: Visa, R: Residence Card, O: Other",
                      "title": "documentType"
                    },
                    "documentName": {
                      "type": "string",
                      "description": "Name of document",
                      "title": "documentName"
                    },
                    "vehicleClass": {
                      "type": "string",
                      "description": "Class of vehicles on driver's license",
                      "title": "vehicleClass"
                    },
                    "restrictions": {
                      "type": "string",
                      "description": "Driving restrictions",
                      "title": "restrictions"
                    },
                    "endorsement": {
                      "type": "string",
                      "description": "Driver license endorsement",
                      "title": "endorsement"
                    },
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "title": "email"
                    },
                    "mobile": {
                      "type": "string",
                      "description": "User mobile phone number",
                      "title": "mobile"
                    },
                    "landline": {
                      "type": "string",
                      "description": "User landline phone number",
                      "title": "landline"
                    },
                    "issueAuthority": {
                      "type": "string",
                      "description": "Issue authority of document",
                      "title": "issueAuthority"
                    },
                    "issuerOrg_region_full": {
                      "type": "string",
                      "description": "Document issuer subregion/state. Example: California",
                      "title": "issuerOrg_region_full"
                    },
                    "issuerOrg_region_abbr": {
                      "type": "string",
                      "description": "Document issuer subregion/state abbreviation. Example: CA",
                      "title": "issuerOrg_region_abbr"
                    },
                    "issuerOrg_iso2": {
                      "type": "string",
                      "description": "Document issued country code in ISO2. Example: US",
                      "title": "issuerOrg_iso2"
                    },
                    "nationality_iso2": {
                      "type": "string",
                      "description": "Document holder nationality in ISO2. Example: US",
                      "title": "nationality_iso2"
                    },
                    "optionalData": {
                      "type": "string",
                      "description": "Extra unspecific data included in the document",
                      "title": "optionalData"
                    },
                    "optionalData2": {
                      "type": "string",
                      "description": "Extra unspecific data included in the document",
                      "title": "optionalData2"
                    },
                    "customdata1": {
                      "type": "string",
                      "description": "5 custom strings that can be used to add custom memo to the entry",
                      "title": "customdata1"
                    },
                    "customdata2": {
                      "type": "string",
                      "description": "5 custom strings that can be used to add custom memo to the entry",
                      "title": "customdata2"
                    },
                    "customdata3": {
                      "type": "string",
                      "description": "5 custom strings that can be used to add custom memo to the entry",
                      "title": "customdata3"
                    },
                    "customdata4": {
                      "type": "string",
                      "description": "5 custom strings that can be used to add custom memo to the entry",
                      "title": "customdata4"
                    },
                    "customdata5": {
                      "type": "string",
                      "description": "5 custom strings that can be used to add custom memo to the entry",
                      "title": "customdata5"
                    },
                    "block": {
                      "type": "string",
                      "description": "Set this parameter to block the same document from being submitted to Core API or DocuPass.",
                      "title": "block"
                    },
                    "contract": {
                      "type": "string",
                      "description": "Link to contract or legal documents generated/signed using Core API or DocuPass",
                      "title": "contract"
                    },
                    "image": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Image identifier",
                            "title": "id"
                          },
                          "type": {
                            "type": "string",
                            "description": "0 for document and 1 for person",
                            "title": "type"
                          },
                          "hash": {
                            "type": "string",
                            "description": "MD5 hash of image",
                            "title": "hash"
                          },
                          "url": {
                            "type": "string",
                            "description": "URL to the image",
                            "title": "url"
                          },
                          "createtime": {
                            "type": "string",
                            "description": "Time image was uploaded in UTC",
                            "title": "createtime"
                          }
                        }
                      },
                      "description": "Contains a list of images associated with the entry.",
                      "title": "image"
                    }
                  },
                  "description": "Check below for a list of fields contained in a vault entry. Note that a document may not contain information for every fields, hence some of the field value will be null.",
                  "title": "data"
                }
              }
            }
          },
          "400": {
            "description": "error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the error encountered.",
                      "title": "message"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "title": "code"
                    }
                  },
                  "description": "This field will only be returned if there was an error, containing the following array.",
                  "title": "error"
                }
              }
            }
          }
        },
        "summary": "Get Vault Entry Content",
        "description": "When entries are added to the vault, both Core API and DocuPass API will return a vault entry identifier named vaultid. You can use the identifier to query the content of an entry in the vault by submitting an HTTP POST request to the following endpoint.",
        "operationId": "GetVault",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apikey": {
                  "type": "string",
                  "description": "Your private API key is available under your Web Portal.",
                  "title": "apikey"
                },
                "id": {
                  "type": "string",
                  "description": "Vault entry identifier.",
                  "title": "id"
                }
              },
              "required": [
                "apikey"
              ]
            }
          }
        ]
      }
    },
    "/vault/list": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Current limit",
                  "title": "limit"
                },
                "offset": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Current offset",
                  "title": "offset"
                },
                "nextoffset": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Offset value for the next set of data. If the current set of data is the final set of data, this field will not be returned.",
                  "title": "nextoffset"
                },
                "total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Total number of entries found.",
                  "title": "total"
                },
                "items": {
                  "type": "array",
                  "items": {},
                  "description": "An array of entries found and their full content, identical to the contents returned by GET method.",
                  "title": "items"
                }
              }
            }
          },
          "400": {
            "description": "error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the error encountered.",
                      "title": "message"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "title": "code"
                    }
                  },
                  "description": "This field will only be returned if there was an error, containing the following array.",
                  "title": "error"
                }
              }
            }
          }
        },
        "summary": "List and Filter Entries",
        "description": "To list all the entries stored inside the vault or search for entries with specific values, send an HTTP POST request to the following endpoint.",
        "operationId": "ListVaultEntries",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apikey": {
                  "type": "string",
                  "description": "Your private API key is available under your Web Portal.",
                  "title": "apikey"
                },
                "orderby": {
                  "type": "string",
                  "description": "Name of the field used to order the result.",
                  "title": "orderby",
                  "default": "createtime"
                },
                "sort": {
                  "type": "string",
                  "description": "ASC to sort results in ascending order, DESC to sort in descending order.",
                  "title": "sort",
                  "default": "ASC"
                },
                "limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of vault entries to return. (1 to 100)",
                  "title": "limit",
                  "default": 10
                },
                "offset": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Return list starting at a specific entry, for example, when limit=10, to access the third page of the results, use offset=20",
                  "title": "offset",
                  "default": 20
                },
                "filter": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "To filter/search entries you need to construct filter statements and put them in an array, you can have 5 filter stataments per request",
                    "title": "filter"
                  },
                  "description": "filter"
                }
              },
              "required": [
                "apikey"
              ]
            }
          }
        ]
      }
    },
    "/vault/update": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "integer",
                  "format": "int32",
                  "title": "success"
                }
              }
            }
          },
          "400": {
            "description": "error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the error encountered.",
                      "title": "message"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "title": "code"
                    }
                  },
                  "description": "This field will only be returned if there was an error, containing the following array.",
                  "title": "error"
                }
              }
            }
          }
        },
        "summary": "Update Vault Entry",
        "description": "You can update the value of a single field or values of multiple fields in a vault entry by making HTTP POST request.",
        "operationId": "UpdateVaultEntry",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apikey": {
                  "type": "string",
                  "description": "Your private API key is available under your Web Portal.",
                  "title": "apikey"
                },
                "id": {
                  "type": "string",
                  "description": "Vault entry identifier.",
                  "title": "id"
                },
                "address1": {
                  "type": "string",
                  "description": "Address line 1.",
                  "title": "address1"
                },
                "address2": {
                  "type": "string",
                  "description": "Address line 2.",
                  "title": "address2"
                },
                "block": {
                  "type": "string",
                  "description": "Set this parameter to block the same document from being submitted to Core API or DocuPass. 0: No block 1: Block document number 2: Block firstname/lastname 3: Block both document number and firstname/lastname.",
                  "title": "block"
                },
                "customdata1": {
                  "type": "string",
                  "description": "5 custom strings that can be used to add custom memo to the entry.",
                  "title": "customdata1"
                },
                "customdata2": {
                  "type": "string",
                  "description": "5 custom strings that can be used to add custom memo to the entry.",
                  "title": "customdata2"
                },
                "customdata3": {
                  "type": "string",
                  "description": "5 custom strings that can be used to add custom memo to the entry.",
                  "title": "customdata3"
                },
                "customdata4": {
                  "type": "string",
                  "description": "5 custom strings that can be used to add custom memo to the entry.",
                  "title": "customdata4"
                },
                "customdata5": {
                  "type": "string",
                  "description": "5 custom strings that can be used to add custom memo to the entry.",
                  "title": "customdata5"
                },
                "dob": {
                  "type": "string",
                  "description": "Date of birth (YYYY-MM-DD).",
                  "title": "dob"
                },
                "documentName": {
                  "type": "string",
                  "description": "Name of document.",
                  "title": "documentName"
                },
                "documentNumber": {
                  "type": "string",
                  "description": "The unique identifier of the document (Passport No./Driver License No. etc)",
                  "title": "documentNumber"
                },
                "documentType": {
                  "type": "string",
                  "description": "P: Passport D: Driver's License I: Identity Card V: Visa R: Residence Card O: Other",
                  "title": "documentType"
                },
                "docupass_customid": {
                  "type": "string",
                  "description": "customid passed when creating DocuPass verification.",
                  "title": "docupass_customid"
                },
                "docupass_failedreason": {
                  "type": "string",
                  "description": "If DocuPass verification has failed, the reason why it failed.",
                  "title": "docupass_failedreason"
                },
                "docupass_reference": {
                  "type": "string",
                  "description": "Reference code to DocuPass session.",
                  "title": "docupass_reference"
                },
                "docupass_success": {
                  "type": "string",
                  "description": "0 or 1, whether the DocuPass verification succeeded or failed.",
                  "title": "docupass_success"
                },
                "email": {
                  "type": "string",
                  "description": "User email address.",
                  "title": "email"
                },
                "expiry": {
                  "type": "string",
                  "description": "Expiry date (YYYY-MM-DD)",
                  "title": "expiry"
                },
                "eyeColor": {
                  "type": "string",
                  "description": "Eye color.",
                  "title": "eyeColor"
                },
                "firstName": {
                  "type": "string",
                  "description": "First name / Given name",
                  "title": "firstName"
                },
                "firstName_local": {
                  "type": "string",
                  "description": "First name in local language.",
                  "title": "firstName_local"
                },
                "fullName": {
                  "type": "string",
                  "description": "Full name (Updating other name fields will not update fullName)",
                  "title": "fullName"
                },
                "fullName_local": {
                  "type": "string",
                  "description": "First name in local language.",
                  "title": "fullName_local"
                },
                "hairColor": {
                  "type": "string",
                  "description": "Hair color.",
                  "title": "hairColor"
                },
                "height": {
                  "type": "string",
                  "description": "Height of person.",
                  "title": "height"
                },
                "issueAuthority": {
                  "type": "string",
                  "description": "Issue authority of document.",
                  "title": "issueAuthority"
                },
                "issued": {
                  "type": "string",
                  "description": "Issue date (YYYY-MM-DD)",
                  "title": "issued"
                },
                "issuerOrg_iso2": {
                  "type": "string",
                  "description": "Document issued country code in ISO2. Example: US",
                  "title": "issuerOrg_iso2"
                },
                "issuerOrg_region_abbr": {
                  "type": "string",
                  "description": "Document issuer subregion/state abbreviation. Example: CA",
                  "title": "issuerOrg_region_abbr"
                },
                "issuerOrg_region_full": {
                  "type": "string",
                  "description": "Document issuer subregion/state. Example: California",
                  "title": "issuerOrg_region_full"
                },
                "landline": {
                  "type": "string",
                  "description": "User landline phone number.",
                  "title": "landline"
                },
                "lastName": {
                  "type": "string",
                  "description": "Last name / Family name.",
                  "title": "lastName"
                },
                "lastName_local": {
                  "type": "string",
                  "description": "Last name in local language.",
                  "title": "lastName_local"
                },
                "middleName": {
                  "type": "string",
                  "description": "Middle name(s).",
                  "title": "middleName"
                },
                "middleName_local": {
                  "type": "string",
                  "description": "Middle name in local language.",
                  "title": "middleName_local"
                },
                "mobile": {
                  "type": "string",
                  "description": "User mobile phone number.",
                  "title": "mobile"
                },
                "nationality_iso2": {
                  "type": "string",
                  "description": "Document holder nationality in ISO2. Example: US",
                  "title": "nationality_iso2"
                },
                "optionalData": {
                  "type": "string",
                  "description": "Extra unspecific data included in the document.",
                  "title": "optionalData"
                },
                "optionalData2": {
                  "type": "string",
                  "description": "Extra unspecific data included in the document.",
                  "title": "optionalData2"
                },
                "personalNumber": {
                  "type": "string",
                  "description": "A secondary identifier number on the document.",
                  "title": "personalNumber"
                },
                "placeOfBirth": {
                  "type": "string",
                  "description": "Place of birth.",
                  "title": "placeOfBirth"
                },
                "postcode": {
                  "type": "string",
                  "description": "Address postcode.",
                  "title": "postcode"
                },
                "restrictions": {
                  "type": "string",
                  "description": "Driving restrictions.",
                  "title": "restrictions"
                },
                "sex": {
                  "type": "string",
                  "description": "M: Male F: Female X: Unspecified",
                  "title": "sex"
                },
                "trustlevel": {
                  "type": "string",
                  "description": "0: Undetermined 1: Invalid document 2: Suspicious 3: Valid  This score is calculated automatically if authentication is enabled.",
                  "title": "trustlevel"
                },
                "trustnote": {
                  "type": "string",
                  "description": "",
                  "title": "trustnote"
                },
                "vehicleClass": {
                  "type": "string",
                  "description": "Class of vehicles on driver's license.",
                  "title": "vehicleClass"
                },
                "weight": {
                  "type": "string",
                  "description": "Weight of person.",
                  "title": "weight"
                }
              },
              "required": [
                "apikey",
                "id"
              ]
            }
          }
        ]
      }
    },
    "/vault/delete": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "integer",
                  "format": "int32",
                  "title": "success"
                }
              }
            }
          },
          "400": {
            "description": "error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the error encountered.",
                      "title": "message"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "title": "code"
                    }
                  },
                  "description": "This field will only be returned if there was an error, containing the following array.",
                  "title": "error"
                }
              }
            }
          }
        },
        "summary": "Delete Entry From Vault",
        "description": "You can delete single or multiple vault entries by making HTTP POST request.",
        "operationId": "DeleteVaultEntry",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apikey": {
                  "type": "string",
                  "description": "Your private API key is available under your Web Portal.",
                  "title": "apikey"
                },
                "id": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "title": "id",
                    "description": "Vault entry identifier(s) to delete (String or Array of Strings)."
                  },
                  "description": "id"
                }
              },
              "required": [
                "apikey",
                "id"
              ]
            }
          }
        ]
      }
    },
    "/vault/addimage": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "integer",
                  "format": "int32",
                  "title": "success"
                },
                "image": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Image identifier",
                      "title": "id"
                    },
                    "type": {
                      "type": "string",
                      "description": "0 for document and 1 for person",
                      "title": "type"
                    },
                    "hash": {
                      "type": "string",
                      "description": "MD5 hash of image",
                      "title": "hash"
                    },
                    "url": {
                      "type": "string",
                      "description": "URL to the image",
                      "title": "url"
                    },
                    "createtime": {
                      "type": "string",
                      "description": "Time image was uploaded in UTC",
                      "title": "createtime"
                    }
                  },
                  "description": "Contains a list of images associated with the entry.",
                  "title": "image"
                }
              }
            }
          },
          "400": {
            "description": "error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the error encountered.",
                      "title": "message"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "title": "code"
                    }
                  },
                  "description": "This field will only be returned if there was an error, containing the following array.",
                  "title": "error"
                }
              }
            }
          }
        },
        "summary": "Add Image To Vault",
        "description": "You can upload an image and add it to an existing vault entry by making HTTP POST request.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apikey": {
                  "type": "string",
                  "description": "Your private API key is available under your Web Portal.",
                  "title": "apikey"
                },
                "id": {
                  "type": "string",
                  "description": "Vault entry identifier to add image to",
                  "title": "id"
                },
                "type": {
                  "type": "string",
                  "description": "Set the type of image: 0=document and 1=person",
                  "title": "type"
                },
                "image": {
                  "type": "string",
                  "description": "Base64-encoded image data.",
                  "title": "image"
                },
                "imageurl": {
                  "type": "string",
                  "description": "Remote image URL.",
                  "title": "imageurl"
                }
              },
              "required": [
                "apikey",
                "id",
                "type"
              ]
            }
          }
        ],
        "operationId": "AddImageToVault"
      }
    },
    "/vault/deleteimage": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "integer",
                  "format": "int32",
                  "title": "success"
                }
              }
            }
          },
          "400": {
            "description": "error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the error encountered.",
                      "title": "message"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "title": "code"
                    }
                  },
                  "description": "This field will only be returned if there was an error, containing the following array.",
                  "title": "error"
                }
              }
            }
          }
        },
        "summary": "Delete Image From Vault",
        "description": "You can delete an image inside a vault entry by making HTTP POST request. Note that after an image is deleted, the URL to the image may still be accessible for a short-period of time due to caching.",
        "operationId": "DeleteImageFromVault",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apikey": {
                  "type": "string",
                  "description": "Your private API key is available under your Web Portal.",
                  "title": "apikey"
                },
                "id": {
                  "type": "string",
                  "description": "Vault entry identifier containing the image.",
                  "title": "id"
                },
                "imageid": {
                  "type": "string",
                  "description": "id of the image to delete.",
                  "title": "imageid"
                }
              },
              "required": [
                "apikey",
                "id"
              ]
            }
          }
        ]
      }
    },
    "/vault/searchface": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {},
                  "description": "If matching entries are found, a list of documents with full contents will be returned similar to the list command.",
                  "title": "items"
                }
              }
            }
          },
          "400": {
            "description": "error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the error encountered.",
                      "title": "message"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "title": "code"
                    }
                  },
                  "description": "This field will only be returned if there was an error, containing the following array.",
                  "title": "error"
                }
              }
            }
          }
        },
        "summary": "Face Search",
        "description": "Face search allows you to search the entire vault using an image of a person. To use face search feature, you must enable face search indexing under web portal, and train your vault datasets periodically.",
        "operationId": "FaceSearch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apikey": {
                  "type": "string",
                  "description": "Your private API key is available under your Web Portal.",
                  "title": "apikey"
                },
                "image": {
                  "type": "string",
                  "description": "Base64-encoded image data.",
                  "title": "image"
                },
                "imageurl": {
                  "type": "string",
                  "description": "Remote image URL.",
                  "title": "imageurl"
                },
                "maxentry": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of matching entries to be returned, between 1 to 10.",
                  "title": "maxentry",
                  "default": 10
                },
                "threshold": {
                  "type": "number",
                  "format": "float",
                  "description": "Set minimum face similarity score required, in the range of 0 to 1.",
                  "title": "threshold",
                  "default": 0.5
                }
              },
              "required": [
                "apikey"
              ]
            }
          }
        ]
      }
    },
    "/vault/train": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "integer",
                  "format": "int32",
                  "title": "success"
                }
              }
            }
          },
          "400": {
            "description": "error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the error encountered.",
                      "title": "message"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "title": "code"
                    }
                  },
                  "description": "This field will only be returned if there was an error, containing the following array.",
                  "title": "error"
                }
              }
            }
          }
        },
        "summary": "Face Search Training",
        "description": "Before performing face search, you must issue a train command to train the document datasets inside your vault. You may also train your vault data through web portal.  The training task is asynchronous, training time depends on the number of vault entries and images. It could take from several seconds to an hour.",
        "operationId": "FaceSearchTraining",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apikey": {
                  "type": "string",
                  "description": "Your private API key is available under your Web Portal.",
                  "title": "apikey"
                }
              },
              "required": [
                "apikey"
              ]
            }
          }
        ]
      }
    },
    "/vault/trainstatus": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "nottrained: Never trained, notstarted: Training is not running, running: Training is currently running, succeeded: Training succeeded, failed: Training failed",
                  "title": "status"
                },
                "startTime": {
                  "type": "string",
                  "description": "Time when last training was started in UTC.",
                  "title": "startTime"
                },
                "statusChangeTime": {
                  "type": "string",
                  "description": "Time for last status change in UTC.",
                  "title": "statusChangeTime"
                },
                "lastSuccessTime": {
                  "type": "string",
                  "description": "Time for last successful training in UTC.",
                  "title": "lastSuccessTime"
                },
                "error": {
                  "type": "string",
                  "description": "Error message associated with failed training status.",
                  "title": "error"
                }
              }
            }
          },
          "400": {
            "description": "error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the error encountered.",
                      "title": "message"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "title": "code"
                    }
                  },
                  "description": "This field will only be returned if there was an error, containing the following array.",
                  "title": "error"
                }
              }
            }
          }
        },
        "summary": "Training Status",
        "description": "Check whether vault training is still ongoing or has completed.",
        "operationId": "TrainingStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apikey": {
                  "type": "string",
                  "description": "Your private API key is available under your Web Portal.",
                  "title": "apikey"
                }
              },
              "required": [
                "apikey"
              ]
            }
          }
        ]
      }
    },
    "/docupass/create": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "reference": {
                  "type": "string",
                  "description": "A unique reference code for the DocuPass session.",
                  "title": "reference"
                },
                "type": {
                  "type": "integer",
                  "format": "int32",
                  "description": "DocuPass module type created.",
                  "title": "type"
                },
                "customid": {
                  "type": "string",
                  "description": "Custom ID used when creating DocuPass session.",
                  "title": "customid"
                },
                "url": {
                  "type": "string",
                  "description": "Unique URL to DocuPass web app. Send this link to your user, or embed it into your website or mobile app to begin identity verification.",
                  "title": "url"
                },
                "qrcode": {
                  "type": "string",
                  "description": "QR code image URL for your user to scan",
                  "title": "qrcode"
                },
                "base_url": {
                  "type": "string",
                  "description": "You may send this link to your user and ask them to enter reference code to start verification.",
                  "title": "base_url"
                },
                "html": {
                  "type": "string",
                  "description": "Sample HTML that you can insert into your webpage.",
                  "title": "html"
                },
                "smssent": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Contains the phone number as confirmation when SMS has been successfully sent via sms_verification_link parameter.",
                  "title": "smssent"
                },
                "expiry": {
                  "type": "string",
                  "description": "UTC UNIX timestamp indicating when this session will expire, upon expiry, user will no longer be able to use the link and a failed callback will be sent.",
                  "title": "expiry"
                }
              }
            }
          },
          "400": {
            "description": "error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the error encountered.",
                      "title": "message"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "title": "code"
                    }
                  },
                  "description": "This field will only be returned if there was an error, containing the following array.",
                  "title": "error"
                }
              }
            }
          }
        },
        "summary": "Creating DocuPass Session",
        "description": "You can create a verification session for every user requiring identity verification.",
        "operationId": "CreatingDocuPass",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apikey": {
                  "type": "string",
                  "description": "Your private API key is available under your web portal.",
                  "title": "apikey"
                },
                "type": {
                  "type": "integer",
                  "format": "int32",
                  "description": "0: Iframe Module ,1: Mobile Module, 2: Redirection Module, 3: Live Mobile Module",
                  "title": "type"
                },
                "companyname": {
                  "type": "string",
                  "description": "Your company or product name.",
                  "title": "companyname"
                },
                "callbackurl": {
                  "type": "string",
                  "description": "Webhook/Callback URL to receive verification result.",
                  "title": "callbackurl"
                },
                "biometric": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Ask user to take a selfie photo or selfie video for face verification.",
                  "title": "biometric"
                },
                "biometric_threshold": {
                  "type": "number",
                  "format": "float",
                  "description": "Specify the minimum score to pass facial biometric verification",
                  "title": "biometric_threshold",
                  "default": 0.4
                },
                "authenticate_minscore": {
                  "type": "number",
                  "format": "float",
                  "description": "Document must meet minimum authenticity score to pass validation. Set 0 to disable validity/authenticity check.",
                  "title": "authenticate_minscore",
                  "default": 0.3
                },
                "authenticate_module": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Specify module used for validating the document.",
                  "title": "authenticate_module"
                },
                "maxattempt": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of maximum fail attempts for each verification request.",
                  "title": "maxattempt",
                  "default": 2
                },
                "successredir": {
                  "type": "string",
                  "description": "Browser will be redirected to this URL when identity verification succeeds.",
                  "title": "successredir"
                },
                "failredir": {
                  "type": "string",
                  "description": "Browser will be redirected to this URL when identity verification failed.",
                  "title": "failredir"
                },
                "customid": {
                  "type": "string",
                  "description": "It is useful for identifying your user within your database. This value will be stored under docupass_customid under Vault.",
                  "title": "customid"
                },
                "reusable": {
                  "type": "boolean",
                  "description": "Enabling this parameter will allow multiple users to verify their identity through the same URL, a new DocuPass reference code will be generated for each user automatically.",
                  "title": "reusable",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "phoneverification": {
                  "type": "boolean",
                  "description": "Whether to ask user to enter a phone number for verification, DocuPass supports both mobile or landline number verification. (Subscriber Only)",
                  "title": "phoneverification",
                  "enum": [
                    true,
                    false
                  ]
                },
                "documenttype": {
                  "type": "string",
                  "description": "User must upload a specific type of document. For example \"PD\" would accept both passport and drivers license.",
                  "title": "documenttype"
                },
                "documentcountry": {
                  "type": "string",
                  "description": "ISO ALPHA-2 Country Code.",
                  "title": "documentcountry"
                },
                "documentregion": {
                  "type": "string",
                  "description": "State/Region full name or abbreviation.",
                  "title": "documentregion"
                },
                "dualsidecheck": {
                  "type": "boolean",
                  "description": "Check if the names, document number and document type matches between the front and the back of the document when performing dual-side scan. If any information mismatches error 14 will be thrown.",
                  "title": "dualsidecheck",
                  "enum": [
                    true,
                    false
                  ]
                },
                "verify_expiry": {
                  "type": "boolean",
                  "description": "Only accept document that has not expired",
                  "title": "verify_expiry",
                  "enum": [
                    true,
                    false
                  ],
                  "default": true
                },
                "verify_documentno": {
                  "type": "string",
                  "description": "Document number requiring verification.",
                  "title": "verify_documentno"
                },
                "verify_name": {
                  "type": "string",
                  "description": "Full name including first name and last name requiring verification.",
                  "title": "verify_name"
                },
                "verify_dob": {
                  "type": "string",
                  "description": "Date of birth requiring verification, in YYYY/MM/DD format.",
                  "title": "verify_dob"
                },
                "verify_age": {
                  "type": "string",
                  "description": "Age range, example: 18-40",
                  "title": "verify_age"
                },
                "verify_address": {
                  "type": "string",
                  "description": "Full address requiring verification.",
                  "title": "verify_address"
                },
                "verify_postcode": {
                  "type": "string",
                  "description": "Full postcode requiring verification.",
                  "title": "verify_postcode"
                },
                "verify_phone": {
                  "type": "string",
                  "description": "Full phone number requiring verification.",
                  "title": "verify_phone"
                },
                "vault_save": {
                  "type": "boolean",
                  "description": "Save user documents and parsed information into vault.",
                  "title": "vault_save",
                  "enum": [
                    true,
                    false
                  ],
                  "default": true
                },
                "return_documentimage": {
                  "type": "boolean",
                  "description": "Return document image uploaded by user in the callback request.",
                  "title": "return_documentimage",
                  "enum": [
                    true,
                    false
                  ],
                  "default": true
                },
                "return_faceimage": {
                  "type": "boolean",
                  "description": "Return face image uploaded by user in the callback request.",
                  "title": "return_faceimage",
                  "enum": [
                    true,
                    false
                  ],
                  "default": true
                },
                "return_type": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Specify the type of image being returned, either base64-encoded image content or an URL to the image. (URL to image will be kept for only 7 days)",
                  "title": "return_type",
                  "default": 1
                },
                "welcomemessage": {
                  "type": "string",
                  "description": "Replace generic greeting message on the first page with your customized text (max 1,000 characters)",
                  "title": "welcomemessage"
                },
                "nobranding": {
                  "type": "boolean",
                  "description": "Hide branding logo on all DocuPass pages. (Subscriber Only)",
                  "title": "nobranding",
                  "enum": [
                    true,
                    false
                  ],
                  "default": false
                },
                "logo": {
                  "type": "string",
                  "description": "Custom branding logo. (Subscriber Only)",
                  "title": "logo"
                },
                "customhtmlurl": {
                  "type": "string",
                  "description": "Use your own HTML page and CSS for DocuPass. (Subscriber Only)",
                  "title": "customhtmlurl"
                },
                "language": {
                  "type": "string",
                  "description": "DocuPass automatically detects user device language and displays corresponding language.",
                  "title": "language"
                },
                "qr_color": {
                  "type": "string",
                  "description": "Color of the QR Code Foreground. (Only for Live Mobile and Standard Mobile)",
                  "title": "qr_color"
                },
                "qr_bgcolor": {
                  "type": "string",
                  "description": "Color of the QR Code Background. (Only for Live Mobile and Standard Mobile)",
                  "title": "qr_bgcolor"
                },
                "qr_size": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Size of QR Code(1-50). (Only for Live Mobile and Standard Mobile)",
                  "title": "qr_size"
                },
                "qr_margin": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Border thickness of QR Code(1-50). (Only for Live Mobile and Standard Mobile)",
                  "title": "qr_margin"
                }
              },
              "required": [
                "apikey",
                "companyname"
              ]
            }
          }
        ]
      }
    },
    "/docupass/validate": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "title": "success"
                },
                "reference": {
                  "type": "string",
                  "description": "Reference code for the DocuPass session",
                  "title": "reference"
                }
              }
            }
          },
          "400": {
            "description": "error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the error encountered.",
                      "title": "message"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "title": "code"
                    }
                  },
                  "description": "This field will only be returned if there was an error, containing the following array.",
                  "title": "error"
                }
              }
            }
          }
        },
        "summary": "Validating Callback",
        "description": "To make sure the data was sent from our server.",
        "operationId": "ValidatingCallback",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apikey": {
                  "type": "string",
                  "description": "Your private API key is available under your web portal.",
                  "title": "apikey"
                },
                "reference": {
                  "type": "string",
                  "description": "Reference code received in POST BODY.",
                  "title": "reference"
                },
                "hash": {
                  "type": "string",
                  "description": "Hash received in POST BODY.",
                  "title": "hash"
                }
              },
              "required": [
                "apikey",
                "hash",
                "reference"
              ]
            }
          }
        ]
      }
    },
    "/aml": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "entity": {
                        "type": "string",
                        "description": "person or legalentity",
                        "title": "entity"
                      },
                      "fullname": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Person or legal entity name(s)",
                        "title": "fullname"
                      },
                      "firstname": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Person first name(s)",
                        "title": "firstname"
                      },
                      "lastname": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Person last name(s)",
                        "title": "lastname"
                      },
                      "middlename": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Person middle name(s)",
                        "title": "middlename"
                      },
                      "alias": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Alternative or foreign name(s) of the entity",
                        "title": "alias"
                      },
                      "dob": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Peron's birthday, could come in YYYY, YYYY-MM, or YYYY-MM-DD formats.",
                        "title": "dob"
                      },
                      "address": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Address or residing country of the entity",
                        "title": "address"
                      },
                      "nationality": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Country or nationality of the entity",
                        "title": "nationality"
                      },
                      "birthplace": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Peron's birth place",
                        "title": "birthplace"
                      },
                      "gender": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Peron's gender: M or F",
                        "title": "gender"
                      },
                      "documentnumber": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Document number",
                              "title": "id"
                            },
                            "id_formatted": {
                              "type": "string",
                              "description": "Alphanumeric document number",
                              "title": "id_formatted"
                            },
                            "country": {
                              "type": "string",
                              "description": "ISO2 country code",
                              "title": "country"
                            },
                            "type": {
                              "type": "string",
                              "description": "P = Passport number, I = ID number, D = Driving license number, O = Other/Unknown document type",
                              "title": "type"
                            }
                          }
                        },
                        "description": "A list of documents associated with the entity.",
                        "title": "documentnumber"
                      },
                      "program": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Sanction program(s)",
                        "title": "program"
                      },
                      "note": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Additional note for the entity",
                        "title": "note"
                      },
                      "time": {
                        "type": "string",
                        "description": "UTC TZ timestamp when entity was added to the source list or last updated",
                        "title": "time"
                      },
                      "status": {
                        "type": "string",
                        "description": "Position/title of the entity or current status of the sanction",
                        "title": "status"
                      },
                      "source": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "A list of official source URL(s)",
                        "title": "source"
                      },
                      "database": {
                        "type": "string",
                        "description": "ID Analyzer AML database code",
                        "title": "database"
                      },
                      "schema": {
                        "type": "string",
                        "title": "schema"
                      }
                    }
                  },
                  "description": "Array containing list of AML matches, returns an empty array if no match was found. For specific details refer to AML API Reference.",
                  "title": "aml"
                }
              }
            }
          },
          "400": {
            "description": "error",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {},
                  "title": "items"
                }
              }
            }
          }
        },
        "summary": "Searching AML Database",
        "description": "AML API allows you to search ID Analyzer global AML database for sanctions, PEPs and wanted criminals using either a name, document number or both. You may further filter the results with birthday and nationality.",
        "operationId": "SearchingAML",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apikey": {
                  "type": "string",
                  "description": "Your private API key is available under your web portal.",
                  "title": "apikey"
                },
                "name": {
                  "type": "string",
                  "description": "Person or organization's name or alias in any language.",
                  "title": "name"
                },
                "documentnumber": {
                  "type": "string",
                  "description": "Person's passport number, national ID number or driving license number etc.",
                  "title": "documentnumber"
                },
                "entity": {
                  "type": "string",
                  "description": "person: Person; legalentity: Company or Organization",
                  "title": "entity"
                },
                "country": {
                  "type": "string",
                  "description": "Return only entities with matching country/nationality or no country information.",
                  "title": "country"
                },
                "dob": {
                  "type": "string",
                  "description": "Return only entities with matching birthday or no birthday information.",
                  "title": "dob"
                },
                "database": {
                  "type": "string",
                  "description": "Specify the source databases to perform AML check, if left blank, all source databases will be checked. Separate each database code with comma, for example: un_sc,us_ofac. For full list of source databases and corresponding code visit AML API Overview.",
                  "title": "database"
                }
              },
              "required": [
                "apikey"
              ]
            }
          }
        ]
      }
    },
    "/docupass/sign": {
      "post": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "reference": {
                  "type": "string",
                  "description": "A unique reference code for the DocuPass session.",
                  "title": "reference"
                },
                "customid": {
                  "type": "string",
                  "description": "Custom ID used when creating DocuPass session.",
                  "title": "customid"
                },
                "url": {
                  "type": "string",
                  "description": "Unique URL to DocuPass web app. Send this link to your user, or embed it into your website or mobile app to review and sign document.",
                  "title": "url"
                },
                "qrcode": {
                  "type": "string",
                  "description": "QR code image URL for your user to scan",
                  "title": "qrcode"
                },
                "base_url": {
                  "type": "string",
                  "description": "You may send this link to your user and ask them to enter reference code to sign documents.",
                  "title": "base_url"
                },
                "html_qrcode": {
                  "type": "string",
                  "description": "Sample HTML to display QR Code on your webpage.",
                  "title": "html_qrcode"
                },
                "html_iframe": {
                  "type": "string",
                  "description": "Sample HTML to insert iframe into your webpage.",
                  "title": "html_iframe"
                },
                "smssent": {
                  "type": "string",
                  "description": "Contains the phone number as confirmation when SMS has been successfully sent via sms_contract_link parameter.",
                  "title": "smssent"
                },
                "expiry": {
                  "type": "integer",
                  "format": "int32",
                  "description": "UTC UNIX timestamp indicating when this session will expire, upon expiry, user will no longer be able to use the link and a failed callback will be sent.",
                  "title": "expiry"
                }
              }
            }
          },
          "400": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the error encountered.",
                      "title": "message"
                    },
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "title": "code"
                    }
                  },
                  "description": "This field will only be returned if there was an error, containing the following array.",
                  "title": "error"
                }
              }
            }
          }
        },
        "summary": "Creating DocuPass Signature Session",
        "description": "You can create a signature session where user will review and e-sign legal document without identity verification. If you want to perform both identity verification and have your user sign some document, please create an identity verification session instead.",
        "operationId": "CreatingDocuPassSignatureSession",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "apikey": {
                  "type": "string",
                  "description": "Your private API key is available under your web portal.",
                  "title": "apikey"
                },
                "companyname": {
                  "type": "string",
                  "description": "Your company name will be displayed throughout verification page so that end-user knows they are submitting identity information to your company",
                  "title": "companyname"
                },
                "template_id": {
                  "type": "string",
                  "description": "Contract template ID to autofill with user data.",
                  "title": "template_id"
                },
                "contract_format": {
                  "type": "string",
                  "description": "Output document format. (PDF, DOCX, HTML)",
                  "title": "contract_format"
                },
                "contract_prefill_data": {
                  "type": "object",
                  "properties": {},
                  "description": "JSON data in key-value pairs to autofill dynamic fields, data from user ID will be used first in case of a conflict. For example, passing {\"myparameter\":\"abc\"} would fill %{myparameter} in contract template with \"abc\".",
                  "title": "contract_prefill_data"
                },
                "callbackurl": {
                  "type": "string",
                  "description": "Contract file will be sent to this url. You must either enable vault_save or specify a callbackurl so that you can save the generated document.",
                  "title": "callbackurl"
                },
                "successredir": {
                  "type": "string",
                  "description": "Browser will be redirected to this URL after the document has been reviewed and signed. DocuPass reference code and customid will be appended to the end of URL",
                  "title": "successredir"
                },
                "customid": {
                  "type": "string",
                  "description": "A custom string that will be sent back to your server's callback URL, and appended to redirection URLs set by successredir and failredir as a query string. It is useful for identifying your user within your database. This value will be stored under docupass_customid under Vault.",
                  "title": "customid"
                },
                "reusable": {
                  "type": "boolean",
                  "description": "nabling this parameter will allow multiple users to review and sign documents through the same URL, a new DocuPass reference code will be generated for each user automatically.",
                  "title": "reusable",
                  "default": false
                },
                "sms_contract_link": {
                  "type": "string",
                  "description": "Full international mobile number",
                  "title": "sms_contract_link"
                },
                "vault_save": {
                  "type": "boolean",
                  "description": "Save generated document into vault. You must either enable vault_save or specify a callbackurl so that you can save generated document.",
                  "title": "vault_save",
                  "default": true
                },
                "nobranding": {
                  "type": "boolean",
                  "description": "Hide branding logo on all DocuPass pages.",
                  "title": "nobranding",
                  "default": false
                },
                "customhtmlurl": {
                  "type": "string",
                  "description": "Use your own HTML page and CSS for DocuPass. Once you have made changes to the HTML and CSS you need to upload them to your own server, at the start of each session DocuPass will download the latest HTML page from your server.",
                  "title": "customhtmlurl"
                },
                "language": {
                  "type": "string",
                  "description": "DocuPass automatically detects user device language and displays corresponding language. Set this parameter to override automatic language detection.(en, fr, nl, de, es, zh-TW, zh-CN)",
                  "title": "language"
                },
                "expiry": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of seconds before DocuPass session expires. Upon expiry, user will not be able to continue with the current session, a failed callback will also be sent.",
                  "title": "expiry",
                  "default": 15552000
                },
                "qr_color": {
                  "type": "string",
                  "description": "Color of the QR Code Foreground",
                  "title": "qr_color",
                  "default": "000000"
                },
                "qr_bgcolor": {
                  "type": "string",
                  "description": "Color of the QR Code Background",
                  "title": "qr_bgcolor",
                  "default": "FFFFFF"
                },
                "qr_size": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Size of QR Code",
                  "title": "qr_size",
                  "default": 5
                },
                "qr_margin": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Border thickness of QR Code",
                  "title": "qr_margin",
                  "default": 1
                }
              },
              "required": [
                "apikey",
                "companyname"
              ]
            }
          }
        ]
      }
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.idanalyzer.com/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.idanalyzer.com/privacy-policy.html"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "IT Operations;Productivity"
    }
  ],
  "definitions": {},
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "apikey"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": []
}
