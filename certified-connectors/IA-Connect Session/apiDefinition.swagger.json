{
  "swagger": "2.0",
  "info": {
    "title": "IA-Connect Session",
    "description": "IA-Connect is a Robotic Process Automation (RPA) platform which adds RPA functionality from the Cloud to on-premises virtual machines or over Citrix or Microsoft Remote Desktop (RDS) connections. This is the module for automating the environment, session, file management and configuring IA-Connect.",
    "version": "9.4",
    "contact": {
      "name": "Ultima Labs",
      "url": "https://www.ultima.com/ultima-labs",
      "email": "IAConnect@ultima.com"
    }
  },
  "host": "DefinedInConnectionParameters",
  "basePath": "/IAConnectRESTClient",
  "schemes": [
    "https"
  ],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.ultima.com/ultima-labs"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.ultima.com/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "IT Operations;Productivity"
    }
  ],
  "paths": {
    "/Environment/GetMachineName": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get machine name",
        "description": "Returns the name of the machine that is running the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "GetMachineName",
            "description": "Inputs for IA-Connect GetMachineName action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "MachineName": {
                  "type": "string",
                  "title": "Machine name",
                  "description": "The name of the machine that is running the IA-Connect Agent user session."
                }
              }
            }
          }
        },
        "operationId": "GetMachineName"
      }
    },
    "/Environment/GetMachineDomain": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get machine domain",
        "description": "Returns the domain of the machine that is running the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "GetMachineDomain",
            "description": "Inputs for IA-Connect GetMachineDomain action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "DomainName": {
                  "type": "string",
                  "title": "Domain name",
                  "description": "The NetBIOS domain name of the machine that is running the IA-Connect Agent user session."
                },
                "DNSDomainName": {
                  "type": "string",
                  "title": "DNS domain name",
                  "description": "The DNS domain name of the machine that is running the IA-Connect Agent user session."
                }
              }
            }
          }
        },
        "operationId": "GetMachineDomain"
      }
    },
    "/Environment/GetRemoteSessionClientHostname": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get client hostname",
        "description": "Returns the hostname of the client where the IA-Connect Director is running.",
        "parameters": [
          {
            "in": "body",
            "name": "GetRemoteSessionClientHostname",
            "description": "Inputs for IA-Connect GetRemoteSessionClientHostname action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ClientHostname": {
                  "type": "string",
                  "title": "Client hostname",
                  "description": "The hostname of the client where the IA-Connect Director is running."
                }
              }
            }
          }
        },
        "operationId": "GetRemoteSessionClientHostname"
      }
    },
    "/Environment/ExpandEnvironmentVariable": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Expand environment variable",
        "description": "Expands a string containing environment variables (e.g. %USERPROFILE% or %TEMP%) in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "ExpandEnvironmentVariable",
            "description": "Inputs for IA-Connect ExpandEnvironmentVariable action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "InputString": {
                  "type": "string",
                  "title": "Input string",
                  "description": "The input string containing environment variables."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "InputString",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "OutputString": {
                  "type": "string",
                  "title": "Output string",
                  "description": "The string with any environment variables expanded."
                }
              }
            }
          }
        },
        "operationId": "ExpandEnvironmentVariable"
      }
    },
    "/Environment/KillProcess": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Kill process",
        "description": "Kills any running process in the IA-Connect Agent user session which has the specified process name.",
        "parameters": [
          {
            "in": "body",
            "name": "KillProcess",
            "description": "Inputs for IA-Connect KillProcess action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ProcessName": {
                  "type": "string",
                  "title": "Process name",
                  "description": "The process to kill. e.g. notepad."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ProcessName",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfProcessesKilled": {
                  "type": "integer",
                  "format": "int64",
                  "title": "Number of processes killed",
                  "description": "The number of processes that were killed."
                }
              }
            }
          }
        },
        "operationId": "KillProcess"
      }
    },
    "/Environment/KillProcessID": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Kill process ID",
        "description": "Kills a running process in the IA-Connect Agent user session which has the specified process Id. Process Ids are unique so only one process can match the Id. Process Ids are dynamic and are different for every launch of an application.",
        "parameters": [
          {
            "in": "body",
            "name": "KillProcessID",
            "description": "Inputs for IA-Connect KillProcessID action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ProcessID": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Process ID",
                  "description": "The process ID of the process to kill."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ProcessID",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfProcessesKilled": {
                  "type": "integer",
                  "format": "int64",
                  "title": "Number of processes killed",
                  "description": "The number of processes that were killed."
                }
              }
            }
          }
        },
        "operationId": "KillProcessID"
      }
    },
    "/Environment/GetProcessCountByName": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get process count by name",
        "description": "Returns a count of running processes in the IA-Connect Agent user session which has the specified process name.",
        "parameters": [
          {
            "in": "body",
            "name": "GetProcessCountByName",
            "description": "Inputs for IA-Connect GetProcessCountByName action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ProcessName": {
                  "type": "string",
                  "title": "Process name",
                  "description": "The process name."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ProcessName",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfProcesses": {
                  "type": "integer",
                  "format": "int64",
                  "title": "Number of processes",
                  "description": "The number of processes that match the process name provided."
                }
              }
            }
          }
        },
        "operationId": "GetProcessCountByName"
      }
    },
    "/Environment/GetAgentProcessCount": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get IA-Connect Agent process count",
        "description": "Returns the number of instances of the IA-Connect Agent currently running in the user session. This is useful for detecting if there are multiple instances of the IA-Connect Agent running.",
        "parameters": [
          {
            "in": "body",
            "name": "GetAgentProcessCount",
            "description": "Inputs for IA-Connect GetAgentProcessCount action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfProcesses": {
                  "type": "integer",
                  "format": "int64",
                  "title": "Number of processes",
                  "description": "The number of IA-Connect Agent processes that are currently running in the user session."
                }
              }
            }
          }
        },
        "operationId": "GetAgentProcessCount"
      }
    },
    "/Environment/KillAllOtherAgents": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Kill all other IA-Connect Agents",
        "description": "Kills any other instances of the IA-Connect Agent that are currently running in the user session. This will ensure that only one instance of the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "KillAllOtherAgents",
            "description": "Inputs for IA-Connect KillAllOtherAgents action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfAgentsKilled": {
                  "type": "integer",
                  "format": "int64",
                  "title": "Number of Agents killed",
                  "description": "The number of IA-Connect Agent processes that were killed."
                },
                "NumberOfAgentsFailedToKill": {
                  "type": "integer",
                  "format": "int64",
                  "title": "Number of Agents failed to kill",
                  "description": "The number of IA-Connect Agent processes that failed to be killed."
                }
              }
            }
          }
        },
        "operationId": "KillAllOtherAgents"
      }
    },
    "/Environment/GetProcessByPID": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get process by process Id",
        "description": "Returns whether a process with the specified process Id is running in the IA-Connect Agent user session. Process Ids are unique so only one process can match the Id. Process Ids are dynamic and are different for every launch of an application.",
        "parameters": [
          {
            "in": "body",
            "name": "GetProcessByPID",
            "description": "Inputs for IA-Connect GetProcessByPID action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ProcessId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Process Id",
                  "description": "The process ID of the process to get."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ProcessId",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ProcessRunning": {
                  "type": "boolean",
                  "title": "Process running",
                  "description": "Returns true if a process with the provided process ID was found."
                }
              }
            }
          }
        },
        "operationId": "GetProcessByPID"
      }
    },
    "/Environment/GetProcesses": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get processes",
        "description": "Returns a list of running processes in the IA-Connect Agent user session. This can optionally be filtered by providing a process name.",
        "parameters": [
          {
            "in": "body",
            "name": "GetProcesses",
            "description": "Inputs for IA-Connect GetProcesses action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ProcessName": {
                  "type": "string",
                  "title": "Process name",
                  "description": "An optional filter for the process name."
                },
                "GetProcessCommandLine": {
                  "type": "boolean",
                  "default": false,
                  "title": "Get process commandline",
                  "description": "If set to true, the process command-line details will be returned."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfProcesses": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of processes",
                  "description": "The number of processes running in the user session."
                },
                "ProcessesJSON": {
                  "type": "string",
                  "title": "Processes JSON",
                  "description": "The list of processes running in the user session, in JSON format."
                }
              }
            }
          }
        },
        "operationId": "GetProcesses"
      }
    },
    "/Environment/RunProcess": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Run process",
        "description": "Launch a process, command or application.",
        "parameters": [
          {
            "in": "body",
            "name": "RunProcess",
            "description": "Inputs for IA-Connect RunProcess action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ProcessName": {
                  "type": "string",
                  "title": "Process name",
                  "description": "The process to run. e.g. notepad.exe or C:\\windows\\system32\\notepad.exe."
                },
                "Arguments": {
                  "type": "string",
                  "title": "Arguments",
                  "description": "Any command-line arguments to use when starting the application."
                },
                "WorkingDirectory": {
                  "type": "string",
                  "title": "Working Folder",
                  "description": "The working folder/directory for the process."
                },
                "UseShellExecute": {
                  "type": "boolean",
                  "default": true,
                  "title": "Use Shell execute",
                  "description": "Should the process be started by using the operating system shell?",
                  "x-ms-visibility": "advanced"
                },
                "CreateNoWindow": {
                  "type": "boolean",
                  "default": false,
                  "title": "Create no window",
                  "description": "Should the process be started with no window?",
                  "x-ms-visibility": "advanced"
                },
                "WindowStyle": {
                  "type": "string",
                  "default": "normal",
                  "title": "Window style",
                  "description": "Provide the window style (normal, maximised, minimised or hidden).",
                  "enum": [
                    "normal",
                    "maximised",
                    "minimised",
                    "hidden"
                  ]
                },
                "WaitForProcess": {
                  "type": "boolean",
                  "default": false,
                  "title": "Wait for process",
                  "description": "Should we wait for the process to finish? This would likely only be used when running a program or script that needed to finish before we can continue."
                },
                "RedirectStandardOutput": {
                  "type": "boolean",
                  "default": false,
                  "title": "Redirect standard output",
                  "description": "Should the standard output be redirected?",
                  "x-ms-visibility": "advanced"
                },
                "RedirectStandardError": {
                  "type": "boolean",
                  "default": false,
                  "title": "Redirect standard error",
                  "description": "Should the standard error be redirected?",
                  "x-ms-visibility": "advanced"
                },
                "RedirectStandardErrorToOutput": {
                  "type": "boolean",
                  "default": false,
                  "title": "Redirect standard error to output",
                  "description": "Should standard error be redirected to output?",
                  "x-ms-visibility": "advanced"
                },
                "StandardOutputEncoding": {
                  "type": "string",
                  "title": "Standard output encoding",
                  "description": "Provide the standard output encoding (UTF8, UTF7, UTF16, ASCII or UTF16BE).",
                  "enum": [
                    "UTF8",
                    "UTF7",
                    "UTF16",
                    "ASCII",
                    "UTF16BE"
                  ],
                  "x-ms-visibility": "advanced"
                },
                "StandardErrorEncoding": {
                  "type": "string",
                  "title": "Standard error encoding",
                  "description": "Provide the standard error encoding (UTF8, UTF7, UTF16, ASCII or UTF16BE).",
                  "enum": [
                    "UTF8",
                    "UTF7",
                    "UTF16",
                    "ASCII",
                    "UTF16BE"
                  ],
                  "x-ms-visibility": "advanced"
                },
                "RunAsDomain": {
                  "type": "string",
                  "title": "RunAs Domain name",
                  "description": "The domain of the run as user. If domain is not specified then the username should be in the format username@domainFQDN.",
                  "x-ms-visibility": "advanced"
                },
                "RunAsUsername": {
                  "type": "string",
                  "title": "RunAs Username",
                  "description": "The username of the run as user.",
                  "x-ms-visibility": "advanced"
                },
                "RunAsPassword": {
                  "type": "string",
                  "format": "password",
                  "title": "RunAs Password",
                  "description": "The password of the run as user.",
                  "x-ms-visibility": "advanced"
                },
                "RunAsLoadUserProfile": {
                  "type": "boolean",
                  "default": false,
                  "title": "RunAs load user profile",
                  "description": "Should the Windows user profile of the run as user be loaded?",
                  "x-ms-visibility": "advanced"
                },
                "RunAsElevate": {
                  "type": "boolean",
                  "default": false,
                  "title": "RunAs elevate",
                  "description": "Should the process run elevated?",
                  "x-ms-visibility": "advanced"
                },
                "TimeoutInSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Timeout in seconds",
                  "description": "The maximum number of seconds to wait for the process to finish."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ProcessName",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ProcessStarted": {
                  "type": "boolean",
                  "title": "Process started",
                  "description": "Returns true if the process was started."
                },
                "ExitCode": {
                  "type": "integer",
                  "format": "int64",
                  "title": "Exit code",
                  "description": "Returns the process exit code."
                },
                "ProcessTimedOut": {
                  "type": "boolean",
                  "title": "Process timed out",
                  "description": "Returns true if the process has timed out."
                },
                "ProcessId": {
                  "type": "integer",
                  "format": "int64",
                  "title": "Process Id",
                  "description": "The process ID of the process that was started."
                },
                "StandardOutput": {
                  "type": "string",
                  "title": "Standard output",
                  "description": "The standard output contents."
                },
                "StandardError": {
                  "type": "string",
                  "title": "Standard error",
                  "description": "The standard error contents."
                }
              }
            }
          }
        },
        "operationId": "RunProcess"
      }
    },
    "/Environment/GetScreenResolution": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get screen resolution",
        "description": "Returns the screen resolution of the IA-Connect Agent user session. For the IA-Connect local Agent running on a physical desktop or laptop, this will provide information about all display devices and their scaling. On a virtual machine, typically only one display will be reported, unless the virtual machine has been configured to present multiple displays (uncommon). In a remote session, typically only one display will be reported, even if that display spans multiple local displays, since remote sessions usually create a single virtual display.",
        "parameters": [
          {
            "in": "body",
            "name": "GetScreenResolution",
            "description": "Inputs for IA-Connect GetScreenResolution action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "HorizontalResolution": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Horizontal resolution",
                  "description": "The horizontal physical resolution of the primary screen. Physical coordinates map directly to pixels on the monitor."
                },
                "VerticalResolution": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Vertical resolution",
                  "description": "The vertical physical resolution of the primary screen. Physical coordinates map directly to pixels on the monitor."
                },
                "NumberOfScreens": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of screens",
                  "description": "The number of screens that were detected."
                },
                "SecondDisplayHorizontalResolution": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Second display horizontal resolution",
                  "description": "The horizontal physical resolution of the second screen, if one was detected. Physical coordinates map directly to pixels on the monitor."
                },
                "SecondDisplayVerticalResolution": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Second display vertical resolution",
                  "description": "The vertical physical resolution of the second screen, if one was detected. Physical coordinates map directly to pixels on the monitor."
                },
                "ThirdDisplayHorizontalResolution": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Third display horizontal resolution",
                  "description": "The horizontal physical resolution of the third screen, if one was detected. Physical coordinates map directly to pixels on the monitor."
                },
                "ThirdDisplayVerticalResolution": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Third display vertical resolution",
                  "description": "The vertical physical resolution of the third screen, if one was detected. Physical coordinates map directly to pixels on the monitor."
                },
                "FourthDisplayHorizontalResolution": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Fourth display horizontal resolution",
                  "description": "The horizontal physical resolution of the fourth screen, if one was detected. Physical coordinates map directly to pixels on the monitor."
                },
                "FourthDisplayVerticalResolution": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Fourth display vertical resolution",
                  "description": "The vertical physical resolution of the fourth screen, if one was detected. Physical coordinates map directly to pixels on the monitor."
                },
                "VirtualScreenLeftEdgePixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Virtual screen left edge pixels",
                  "description": "The left edge of the entire virtual display (all detected displays). Virtual coordinates are DPI scaled."
                },
                "VirtualScreenTopEdgePixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Virtual screen top edge pixels",
                  "description": "The top edge of the entire virtual display (all detected displays). Virtual coordinates are DPI scaled."
                },
                "VirtualScreenWidthPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Virtual screen width pixels",
                  "description": "The width of the entire virtual display (all detected displays). Virtual coordinates are DPI scaled."
                },
                "VirtualScreenHeightPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Virtual screen height pixels",
                  "description": "The height of the entire virtual display (all detected displays). Virtual coordinates are DPI scaled."
                },
                "PrimaryDisplayScaling": {
                  "type": "number",
                  "format": "double",
                  "title": "Primary display scaling",
                  "description": "The DPI scaling multiplier of the primary display as a decimal. For example: 100% would be returned as 1.0 and 125% would be returned as 1.25."
                },
                "SecondDisplayScaling": {
                  "type": "number",
                  "format": "double",
                  "title": "Second display scaling",
                  "description": "The DPI scaling multiplier of the second display as a decimal. For example: 100% would be returned as 1.0 and 125% would be returned as 1.25."
                },
                "ThirdDisplayScaling": {
                  "type": "number",
                  "format": "double",
                  "title": "Third display scaling",
                  "description": "The DPI scaling multiplier of the third display as a decimal. For example: 100% would be returned as 1.0 and 125% would be returned as 1.25."
                },
                "FourthDisplayScaling": {
                  "type": "number",
                  "format": "double",
                  "title": "Fourth display scaling",
                  "description": "The DPI scaling multiplier of the fourth display as a decimal. For example: 100% would be returned as 1.0 and 125% would be returned as 1.25."
                },
                "PhysicalScreenLeftEdgePixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Physical screen left edge pixels",
                  "description": "The left edge of the entire physical display (all detected displays). Physical coordinates map directly to pixels on the monitor."
                },
                "PhysicalScreenTopEdgePixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Physical screen top edge pixels",
                  "description": "The top edge of the entire physical display (all detected displays). Physical coordinates map directly to pixels on the monitor."
                },
                "PhysicalScreenWidthPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Physical screen width pixels",
                  "description": "The width of the entire physical display (all detected displays). Physical coordinates map directly to pixels on the monitor."
                },
                "PhysicalScreenHeightPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Physical screen height pixels",
                  "description": "The height of the entire physical display (all detected displays). Physical coordinates map directly to pixels on the monitor."
                },
                "PrimaryDisplayLeftEdgePixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Primary display left edge pixels",
                  "description": "The left physical edge of the primary display. Physical coordinates map directly to pixels on the monitor."
                },
                "PrimaryDisplayTopEdgePixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Primary display top edge pixels",
                  "description": "The top physical edge of the primary display. Physical coordinates map directly to pixels on the monitor."
                },
                "SecondDisplayLeftEdgePixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Second display left edge pixels",
                  "description": "The left physical edge of the second display, if one was detected. Physical coordinates map directly to pixels on the monitor."
                },
                "SecondDisplayTopEdgePixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Second display top edge pixels",
                  "description": "The top physical edge of the second display, if one was detected. Physical coordinates map directly to pixels on the monitor."
                },
                "ThirdDisplayLeftEdgePixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Third display left edge pixels",
                  "description": "The left physical edge of the third display, if one was detected. Physical coordinates map directly to pixels on the monitor."
                },
                "ThirdDisplayTopEdgePixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Third display top edge pixels",
                  "description": "The top physical edge of the third display, if one was detected. Physical coordinates map directly to pixels on the monitor."
                },
                "FourthDisplayLeftEdgePixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Fourth display left edge pixels",
                  "description": "The left physical edge of the fourth display, if one was detected. Physical coordinates map directly to pixels on the monitor."
                },
                "FourthDisplayTopEdgePixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Fourth display top edge pixels",
                  "description": "The top physical edge of the fourth display, if one was detected. Physical coordinates map directly to pixels on the monitor."
                }
              }
            }
          }
        },
        "operationId": "GetScreenResolution"
      }
    },
    "/Environment/SetDefaultPrinter": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set default printer",
        "description": "Sets the default printer for the user in the IA-Connect Agent session.",
        "parameters": [
          {
            "in": "body",
            "name": "SetDefaultPrinter",
            "description": "Inputs for IA-Connect SetDefaultPrinter action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DefaultPrinterName": {
                  "type": "string",
                  "title": "Default printer name",
                  "description": "The name of the default printer for the user."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "DefaultPrinterName",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetDefaultPrinter"
      }
    },
    "/Environment/GetDefaultPrinter": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get default printer",
        "description": "Gets the name of the default printer for the user in the IA-Connect Agent session.",
        "parameters": [
          {
            "in": "body",
            "name": "GetDefaultPrinter",
            "description": "Inputs for IA-Connect GetDefaultPrinter action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "DefaultPrinterName": {
                  "type": "string",
                  "title": "Default printer name",
                  "description": "The name of the default printer for the user."
                }
              }
            }
          }
        },
        "operationId": "GetDefaultPrinter"
      }
    },
    "/Environment/GetListOfPrinters": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get list of printers",
        "description": "Returns a list of all available printers in the IA-Connect Agent session.",
        "parameters": [
          {
            "in": "body",
            "name": "GetListOfPrinters",
            "description": "Inputs for IA-Connect GetListOfPrinters action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ListLocalPrinters": {
                  "type": "boolean",
                  "default": true,
                  "title": "List local printers",
                  "description": "Should local printers be returned?"
                },
                "ListNetworkPrinters": {
                  "type": "boolean",
                  "default": false,
                  "title": "List network printers",
                  "description": "Should network printers be returned?"
                },
                "ReturnDetailedInformation": {
                  "type": "boolean",
                  "default": false,
                  "title": "Return detailed information",
                  "description": "Should detailed information such as location, port name, driver name and status of each printer be returned?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "PrintersJSON": {
                  "type": "string",
                  "title": "Printers JSON",
                  "description": "A list of all printers found, in JSON format."
                },
                "NumberOfPrinters": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of printers",
                  "description": "The number of printers that were found."
                }
              }
            }
          }
        },
        "operationId": "GetListOfPrinters"
      }
    },
    "/Environment/SetMouseMultiplier": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set mouse multiplier",
        "description": "Sets the global mouse multiplier in the IA-Connect Agent user session. This can be useful during development if you encounter issues with remote desktop scaling.",
        "parameters": [
          {
            "in": "body",
            "name": "SetMouseMultiplier",
            "description": "Inputs for IA-Connect SetMouseMultiplier action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "MouseXMultiplier": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "X multiplier",
                  "description": "The horizontal (X) global mouse multiplier to set (for when the Agent moves the mouse). The multiplier only has any effect when 'Multi monitor functionality' is disabled."
                },
                "MouseYMultiplier": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Y multiplier",
                  "description": "The vertical (Y) global mouse multiplier to set (for when the Agent moves the mouse). The multiplier only has any effect when 'Multi monitor functionality' is disabled."
                },
                "ApplyToMouseEvent": {
                  "type": "boolean",
                  "default": true,
                  "title": "Apply to mouse_event",
                  "description": "This argument specifies whether to apply the global mouse multiplier values to the mouse_event method."
                },
                "ApplyToSetCursorPos": {
                  "type": "boolean",
                  "default": false,
                  "title": "Apply to SetCursorPos",
                  "description": "This argument specifies whether to apply the global mouse multiplier values to the SetCursorPos method."
                },
                "ApplyToCurrentMouseMoveMethod": {
                  "type": "boolean",
                  "default": false,
                  "title": "Apply to current mouse move method",
                  "description": "This argument specifies whether to apply the global mouse multiplier values to the current mouse move method (for example: if SetCursorPos is the current mouse move method, the multiplier will apply to SetCursorPos). If this is set to true, the inputs 'Apply to mouse_event' and 'Apply to SetCursorPos' are ignored."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetMouseMultiplier"
      }
    },
    "/Environment/GetMouseMultiplier": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get mouse multiplier",
        "description": "Retrieves the global mouse multiplier in the IA-Connect Agent user session. This defaults to (1, 1) but could have been changed by the 'Set mouse multiplier' action.",
        "parameters": [
          {
            "in": "body",
            "name": "GetMouseMultiplier",
            "description": "Inputs for IA-Connect GetMouseMultiplier action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "MouseXMultiplier": {
                  "type": "number",
                  "format": "double",
                  "title": "X multiplier",
                  "description": "The current horizontal (X) global mouse multiplier (for when the Agent moves the mouse). The multiplier only has any effect when 'Multi monitor functionality' is disabled."
                },
                "MouseYMultiplier": {
                  "type": "number",
                  "format": "double",
                  "title": "Y multiplier",
                  "description": "The current vertical (Y) global mouse multiplier (for when the Agent moves the mouse). The multiplier only has any effect when 'Multi monitor functionality' is disabled."
                },
                "MouseMoveMethod": {
                  "type": "string",
                  "title": "Mouse move method",
                  "description": "Returns the current global mouse move method (either mouse_event or setcursorpos)."
                }
              }
            }
          }
        },
        "operationId": "GetMouseMultiplier"
      }
    },
    "/Environment/MoveMouseToCoordinate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Move mouse to coordinate",
        "description": "Moves the mouse in the IA-Connect Agent user session to the specified pixel coordinates.",
        "parameters": [
          {
            "in": "body",
            "name": "MoveMouseToCoordinate",
            "description": "Inputs for IA-Connect MoveMouseToCoordinate action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "XCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "X pixels",
                  "description": "The X coordinate value (in pixels) to move the mouse to."
                },
                "YCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y pixels",
                  "description": "The Y coordinate value (in pixels) to move the mouse to."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "XCoord",
                "YCoord",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "MoveMouseToCoordinate"
      }
    },
    "/Environment/MoveMouseRelative": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Move mouse relative",
        "description": "Moves the mouse in the IA-Connect Agent user session by the specified number of pixels, relative to it's current position.",
        "parameters": [
          {
            "in": "body",
            "name": "MoveMouseRelative",
            "description": "Inputs for IA-Connect MoveMouseRelative action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "XCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "X pixels",
                  "description": "The number of X pixels to move the mouse, starting from it's current position."
                },
                "YCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y pixels",
                  "description": "The number of Y pixels to move the mouse, starting from it's current position."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "XCoord",
                "YCoord",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "MoveMouseRelative"
      }
    },
    "/Environment/LeftMouseButtonDown": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Left mouse button down",
        "description": "Presses (and does not release) the left mouse button in the IA-Connect Agent user session. To release the mouse, use the left mouse button up action.",
        "parameters": [
          {
            "in": "body",
            "name": "LeftMouseButtonDown",
            "description": "Inputs for IA-Connect LeftMouseButtonDown action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "LeftMouseButtonDown"
      }
    },
    "/Environment/LeftMouseButtonUp": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Left mouse button up",
        "description": "Releases the left mouse button in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "LeftMouseButtonUp",
            "description": "Inputs for IA-Connect LeftMouseButtonUp action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "LeftMouseButtonUp"
      }
    },
    "/Environment/LeftClickMouse": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Left click mouse",
        "description": "Clicks the left mouse button in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "LeftClickMouse",
            "description": "Inputs for IA-Connect LeftClickMouse action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "LeftClickMouse"
      }
    },
    "/Environment/LeftClickMouseAtCoordinate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Left click mouse at coordinate",
        "description": "Clicks the left mouse button in the IA-Connect Agent user session at the specified coordinates.",
        "parameters": [
          {
            "in": "body",
            "name": "LeftClickMouseAtCoordinate",
            "description": "Inputs for IA-Connect LeftClickMouseAtCoordinate action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "XCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "X pixels",
                  "description": "The X coordinate value (in pixels)."
                },
                "YCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y pixels",
                  "description": "The Y coordinate value (in pixels)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "XCoord",
                "YCoord",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "LeftClickMouseAtCoordinate"
      }
    },
    "/Environment/LeftHoldMouse": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Left hold mouse",
        "description": "Holds the left mouse button in the IA-Connect Agent user session for the specified amount of seconds.",
        "parameters": [
          {
            "in": "body",
            "name": "LeftHoldMouse",
            "description": "Inputs for IA-Connect LeftHoldMouse action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SecondsToHold": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Seconds to hold",
                  "description": "The number of seconds to hold down the left mouse button."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SecondsToHold",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "LeftHoldMouse"
      }
    },
    "/Environment/LeftHoldMouseAtCoordinate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Left hold mouse at coordinate",
        "description": "Holds the left mouse button at the specified coordinates in the IA-Connect Agent user session for the specified amount of seconds.",
        "parameters": [
          {
            "in": "body",
            "name": "LeftHoldMouseAtCoordinate",
            "description": "Inputs for IA-Connect LeftHoldMouseAtCoordinate action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "XCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "X pixels",
                  "description": "The X coordinate value (in pixels)."
                },
                "YCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y pixels",
                  "description": "The Y coordinate value (in pixels)."
                },
                "SecondsToHold": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Seconds to hold",
                  "description": "The number of seconds to hold down the left mouse button."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "XCoord",
                "YCoord",
                "SecondsToHold",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "LeftHoldMouseAtCoordinate"
      }
    },
    "/Environment/RightMouseButtonDown": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Right mouse button down",
        "description": "Presses (and does not release) the right mouse button in the IA-Connect Agent user session. To release the mouse, use the right mouse button up action.",
        "parameters": [
          {
            "in": "body",
            "name": "RightMouseButtonDown",
            "description": "Inputs for IA-Connect RightMouseButtonDown action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "RightMouseButtonDown"
      }
    },
    "/Environment/RightMouseButtonUp": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Right mouse button up",
        "description": "Releases the right mouse button in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "RightMouseButtonUp",
            "description": "Inputs for IA-Connect RightMouseButtonUp action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "RightMouseButtonUp"
      }
    },
    "/Environment/RightClickMouse": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Right click mouse",
        "description": "Clicks the right mouse button in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "RightClickMouse",
            "description": "Inputs for IA-Connect RightClickMouse action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "RightClickMouse"
      }
    },
    "/Environment/RightClickMouseAtCoordinate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Right click mouse at coordinate",
        "description": "Clicks the right mouse button in the IA-Connect Agent user session at the specified coordinates.",
        "parameters": [
          {
            "in": "body",
            "name": "RightClickMouseAtCoordinate",
            "description": "Inputs for IA-Connect RightClickMouseAtCoordinate action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "XCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "X pixels",
                  "description": "The X coordinate value (in pixels)."
                },
                "YCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y pixels",
                  "description": "The Y coordinate value (in pixels)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "XCoord",
                "YCoord",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "RightClickMouseAtCoordinate"
      }
    },
    "/Environment/RightHoldMouse": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Right hold mouse",
        "description": "Holds the right mouse button in the IA-Connect Agent user session for the specified amount of seconds.",
        "parameters": [
          {
            "in": "body",
            "name": "RightHoldMouse",
            "description": "Inputs for IA-Connect RightHoldMouse action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SecondsToHold": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Seconds to hold",
                  "description": "The number of seconds to hold down the right mouse button."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SecondsToHold",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "RightHoldMouse"
      }
    },
    "/Environment/RightHoldMouseAtCoordinate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Right hold mouse at coordinate",
        "description": "Holds the right mouse button at the specified coordinates in the IA-Connect Agent user session for the specified amount of seconds.",
        "parameters": [
          {
            "in": "body",
            "name": "RightHoldMouseAtCoordinate",
            "description": "Inputs for IA-Connect RightHoldMouseAtCoordinate action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "XCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "X pixels",
                  "description": "The X coordinate value (in pixels)."
                },
                "YCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y pixels",
                  "description": "The Y coordinate value (in pixels)."
                },
                "SecondsToHold": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Seconds to hold",
                  "description": "The number of seconds to hold down the right mouse button."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "XCoord",
                "YCoord",
                "SecondsToHold",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "RightHoldMouseAtCoordinate"
      }
    },
    "/Environment/MiddleMouseButtonDown": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Middle mouse button down",
        "description": "Presses (and does not release) the middle mouse button in the IA-Connect Agent user session. To release the mouse, use the middle mouse button up action.",
        "parameters": [
          {
            "in": "body",
            "name": "MiddleMouseButtonDown",
            "description": "Inputs for IA-Connect MiddleMouseButtonDown action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "MiddleMouseButtonDown"
      }
    },
    "/Environment/MiddleMouseButtonUp": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Middle mouse button up",
        "description": "Releases the middle mouse button in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "MiddleMouseButtonUp",
            "description": "Inputs for IA-Connect MiddleMouseButtonUp action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "MiddleMouseButtonUp"
      }
    },
    "/Environment/MiddleClickMouse": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Middle click mouse",
        "description": "Clicks the middle mouse button in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "MiddleClickMouse",
            "description": "Inputs for IA-Connect MiddleClickMouse action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "MiddleClickMouse"
      }
    },
    "/Environment/MiddleClickMouseAtCoordinate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Middle click mouse at coordinate",
        "description": "Clicks the middle mouse button in the IA-Connect Agent user session at the specified coordinates.",
        "parameters": [
          {
            "in": "body",
            "name": "MiddleClickMouseAtCoordinate",
            "description": "Inputs for IA-Connect MiddleClickMouseAtCoordinate action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "XCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "X pixels",
                  "description": "The X coordinate value (in pixels)."
                },
                "YCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y pixels",
                  "description": "The Y coordinate value (in pixels)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "XCoord",
                "YCoord",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "MiddleClickMouseAtCoordinate"
      }
    },
    "/Environment/MiddleHoldMouse": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Middle hold mouse",
        "description": "Holds the middle mouse button in the IA-Connect Agent user session for the specified amount of seconds.",
        "parameters": [
          {
            "in": "body",
            "name": "MiddleHoldMouse",
            "description": "Inputs for IA-Connect MiddleHoldMouse action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SecondsToHold": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Seconds to hold",
                  "description": "The number of seconds to hold down the middle mouse button."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SecondsToHold",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "MiddleHoldMouse"
      }
    },
    "/Environment/MiddleHoldMouseAtCoordinate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Middle hold mouse at coordinate",
        "description": "Holds the middle mouse button at the specified coordinates in the IA-Connect Agent user session for the specified amount of seconds.",
        "parameters": [
          {
            "in": "body",
            "name": "MiddleHoldMouseAtCoordinate",
            "description": "Inputs for IA-Connect MiddleHoldMouseAtCoordinate action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "XCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "X pixels",
                  "description": "The X coordinate value (in pixels)."
                },
                "YCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y pixels",
                  "description": "The Y coordinate value (in pixels)."
                },
                "SecondsToHold": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Seconds to hold",
                  "description": "The number of seconds to hold down the middle mouse button."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "XCoord",
                "YCoord",
                "SecondsToHold",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "MiddleHoldMouseAtCoordinate"
      }
    },
    "/Environment/DoubleLeftClickMouse": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Double left click mouse",
        "description": "Double clicks the left mouse button in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "DoubleLeftClickMouse",
            "description": "Inputs for IA-Connect DoubleLeftClickMouse action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DelayInMilliseconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Delay in milliseconds",
                  "description": "The delay between each click, in milliseconds."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "DoubleLeftClickMouse"
      }
    },
    "/Environment/DoubleLeftClickMouseAtCoordinate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Double left click mouse at coordinate",
        "description": "Double clicks the left mouse button in the IA-Connect Agent user session at the specified coordinates.",
        "parameters": [
          {
            "in": "body",
            "name": "DoubleLeftClickMouseAtCoordinate",
            "description": "Inputs for IA-Connect DoubleLeftClickMouseAtCoordinate action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "XCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "X pixels",
                  "description": "The X coordinate value (in pixels)."
                },
                "YCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y pixels",
                  "description": "The Y coordinate value (in pixels)."
                },
                "DelayInMilliseconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Delay in milliseconds",
                  "description": "The delay between each click, in milliseconds."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "XCoord",
                "YCoord",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "DoubleLeftClickMouseAtCoordinate"
      }
    },
    "/Environment/LeftMouseDragBetweenCoordinates": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Left mouse drag between coordinates",
        "description": "Performs a left mouse button drag between the two specified coordinates in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "LeftMouseDragBetweenCoordinates",
            "description": "Inputs for IA-Connect LeftMouseDragBetweenCoordinates action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "StartXCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Start X pixels",
                  "description": "The start X coordinate value (in pixels)."
                },
                "StartYCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Start Y pixels",
                  "description": "The start Y coordinate value (in pixels)."
                },
                "EndXCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "End X pixels",
                  "description": "The end X coordinate value (in pixels)."
                },
                "EndYCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "End Y pixels",
                  "description": "The end Y coordinate value (in pixels)."
                },
                "NumberOfSteps": {
                  "type": "integer",
                  "format": "int32",
                  "default": 20,
                  "title": "Number of steps",
                  "description": "The number of steps that the drag action should be broken into."
                },
                "TotalTimeInSeconds": {
                  "type": "number",
                  "format": "double",
                  "default": 0.5,
                  "title": "Total time in seconds",
                  "description": "The total time that the drag action should take from start to finish."
                },
                "MaximumMovementPixelJitter": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Maximum movement pixel jitter",
                  "description": "The maximum pixel jitter whilst performing the drag action. The higher the value, the less 'smooth' the drag action will appear."
                },
                "MaximumEndPixelJitter": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Maximum end pixel jitter",
                  "description": "The maximum pixel jitter at the end of the drag action. The higher the value, the less precise the drag will be when reaching the end coordinate."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "StartXCoord",
                "StartYCoord",
                "EndXCoord",
                "EndYCoord",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "LeftMouseDragBetweenCoordinates"
      }
    },
    "/Environment/RightMouseDragBetweenCoordinates": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Right mouse drag between coordinates",
        "description": "Performs a right mouse button drag between the two specified coordinates in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "RightMouseDragBetweenCoordinates",
            "description": "Inputs for IA-Connect RightMouseDragBetweenCoordinates action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "StartXCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Start X pixels",
                  "description": "The start X coordinate value (in pixels)."
                },
                "StartYCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Start Y pixels",
                  "description": "The start Y coordinate value (in pixels)."
                },
                "EndXCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "End X pixels",
                  "description": "The end X coordinate value (in pixels)."
                },
                "EndYCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "End Y pixels",
                  "description": "The end Y coordinate value (in pixels)."
                },
                "NumberOfSteps": {
                  "type": "integer",
                  "format": "int32",
                  "default": 20,
                  "title": "Number of steps",
                  "description": "The number of steps that the drag action should be broken into."
                },
                "TotalTimeInSeconds": {
                  "type": "number",
                  "format": "double",
                  "default": 0.5,
                  "title": "Total time in seconds",
                  "description": "The total time that the drag action should take from start to finish."
                },
                "MaximumMovementPixelJitter": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Maximum movement pixel jitter",
                  "description": "The maximum pixel jitter whilst performing the drag action. The higher the value, the less 'smooth' the drag action will appear."
                },
                "MaximumEndPixelJitter": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Maximum end pixel jitter",
                  "description": "The maximum pixel jitter at the end of the drag action. The higher the value, the less precise the drag will be when reaching the end coordinate."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "StartXCoord",
                "StartYCoord",
                "EndXCoord",
                "EndYCoord",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "RightMouseDragBetweenCoordinates"
      }
    },
    "/Environment/MiddleMouseDragBetweenCoordinates": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Middle mouse drag between coordinates",
        "description": "Performs a middle mouse button drag between the two specified coordinates in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "MiddleMouseDragBetweenCoordinates",
            "description": "Inputs for IA-Connect MiddleMouseDragBetweenCoordinates action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "StartXCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Start X pixels",
                  "description": "The start X coordinate value (in pixels)."
                },
                "StartYCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Start Y pixels",
                  "description": "The start Y coordinate value (in pixels)."
                },
                "EndXCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "End X pixels",
                  "description": "The end X coordinate value (in pixels)."
                },
                "EndYCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "End Y pixels",
                  "description": "The end Y coordinate value (in pixels)."
                },
                "NumberOfSteps": {
                  "type": "integer",
                  "format": "int32",
                  "default": 20,
                  "title": "Number of steps",
                  "description": "The number of steps that the drag action should be broken into."
                },
                "TotalTimeInSeconds": {
                  "type": "number",
                  "format": "double",
                  "default": 0.5,
                  "title": "Total time in seconds",
                  "description": "The total time that the drag action should take from start to finish."
                },
                "MaximumMovementPixelJitter": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Maximum movement pixel jitter",
                  "description": "The maximum pixel jitter whilst performing the drag action. The higher the value, the less 'smooth' the drag action will appear."
                },
                "MaximumEndPixelJitter": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Maximum end pixel jitter",
                  "description": "The maximum pixel jitter at the end of the drag action. The higher the value, the less precise the drag will be when reaching the end coordinate."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "StartXCoord",
                "StartYCoord",
                "EndXCoord",
                "EndYCoord",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "MiddleMouseDragBetweenCoordinates"
      }
    },
    "/Environment/TurnMouseWheel": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Turn mouse wheel",
        "description": "Turns the mouse wheel (positive or negative notches) in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "TurnMouseWheel",
            "description": "Inputs for IA-Connect TurnMouseWheel action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "WheelTurns": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Wheel turns",
                  "description": "The number of wheel turns to perform."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "WheelTurns",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "TurnMouseWheel"
      }
    },
    "/Environment/SetCursorPos": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set mouse cursor position",
        "description": "Sets the mouse cursor in the IA-Connect Agent user session to the specified position.",
        "parameters": [
          {
            "in": "body",
            "name": "SetCursorPos",
            "description": "Inputs for IA-Connect SetCursorPos action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "X": {
                  "type": "integer",
                  "format": "int32",
                  "title": "X pixels",
                  "description": "The X coordinate value (in pixels)."
                },
                "Y": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y pixels",
                  "description": "The Y coordinate value (in pixels)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "X",
                "Y",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetCursorPos"
      }
    },
    "/Environment/GetCursorPos": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get current mouse coordinate",
        "description": "Gets the current mouse cursor position in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "GetCursorPos",
            "description": "Inputs for IA-Connect GetCursorPos action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "X": {
                  "type": "integer",
                  "format": "int32",
                  "title": "X pixels",
                  "description": "The X coordinate value (in pixels)."
                },
                "Y": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y pixels",
                  "description": "The Y coordinate value (in pixels)."
                }
              }
            }
          }
        },
        "operationId": "GetCursorPos"
      }
    },
    "/Environment/CalibrateMouseEvent": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Calibrate mouse_event",
        "description": "Calibrates the mouse_event method by moving the mouse by the specified number of pixels and then reading the new mouse position.",
        "parameters": [
          {
            "in": "body",
            "name": "CalibrateMouseEvent",
            "description": "Inputs for IA-Connect CalibrateMouseEvent action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "CalibrationSizeInPixels": {
                  "type": "integer",
                  "format": "int32",
                  "default": 200,
                  "title": "Calibration size in pixels",
                  "description": "The number of pixels that the mouse will be moved in order to calibrate. The lower the value, the less accurate the calibration will be."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "MouseXMultiplier": {
                  "type": "number",
                  "format": "double",
                  "title": "Mouse X multiplier",
                  "description": "The mouse X multiplier value. A value of 1.0 indicates no multiplier."
                },
                "MouseYMultiplier": {
                  "type": "number",
                  "format": "double",
                  "title": "Mouse Y multiplier",
                  "description": "The mouse Y multiplier value. A value of 1.0 indicates no multiplier."
                }
              }
            }
          }
        },
        "operationId": "CalibrateMouseEvent"
      }
    },
    "/Environment/GetMouseMoveMethod": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get mouse move method",
        "description": "Gets the current mouse move method.",
        "parameters": [
          {
            "in": "body",
            "name": "GetMouseMoveMethod",
            "description": "Inputs for IA-Connect GetMouseMoveMethod action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "MouseMoveMethod": {
                  "type": "string",
                  "title": "Mouse move method",
                  "description": "Returns the current mouse move method (either mouse_event or setcursorpos)."
                }
              }
            }
          }
        },
        "operationId": "GetMouseMoveMethod"
      }
    },
    "/Environment/SetMouseMoveMethod": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set mouse move method",
        "description": "Sets the current mouse move method to either mouse_event or setcursorpos.",
        "parameters": [
          {
            "in": "body",
            "name": "SetMouseMoveMethod",
            "description": "Inputs for IA-Connect SetMouseMoveMethod action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "MouseMoveMethod": {
                  "type": "string",
                  "title": "Set mouse move method",
                  "description": "Provide the mouse move method (mouse_event or setcursorpos).",
                  "enum": [
                    "mouse_event",
                    "setcursorpos"
                  ]
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "MouseMoveMethod",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetMouseMoveMethod"
      }
    },
    "/Environment/WiggleMouse": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wiggle mouse",
        "description": "Moves the mouse back and forth by the specified number of coordinates.",
        "parameters": [
          {
            "in": "body",
            "name": "WiggleMouse",
            "description": "Inputs for IA-Connect WiggleMouse action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "XWiggle": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "X wiggle",
                  "description": "The number of pixels to move the mouse horizontally."
                },
                "YWiggle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y wiggle",
                  "description": "The number of pixels to move the mouse vertically."
                },
                "WiggleDelayInSeconds": {
                  "type": "number",
                  "format": "double",
                  "default": 0.1,
                  "title": "Wiggle delay in seconds",
                  "description": "The number of seconds between the mouse movements."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "WiggleMouse"
      }
    },
    "/Environment/SendKeyEvents": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Send key events",
        "description": "Sends global key press events to the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "SendKeyEvents",
            "description": "Inputs for IA-Connect SendKeyEvents action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Text": {
                  "type": "string",
                  "title": "Text",
                  "description": "The text to be sent."
                },
                "Interval": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Interval in milliseconds",
                  "description": "The number of milliseconds between each key press event."
                },
                "IsPassword": {
                  "type": "boolean",
                  "default": false,
                  "title": "Is password",
                  "description": "Is the input a password value? If so, the alternative 'Send password key events' action should be used."
                },
                "DontInterpretSymbols": {
                  "type": "boolean",
                  "default": false,
                  "title": "Dont interpret symbols",
                  "description": "Should symbols in the text not be interpreted as special keys (e.g. {SHIFT} for Shift, {CTRL} for Ctrl)? This should be set to true if you are attempting to input the actual symbols."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Text",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SendKeyEvents"
      }
    },
    "/Environment/SendPasswordKeyEvents": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Send password key events",
        "description": "Sends global key press events to the IA-Connect Agent user session, specifically for entering a password.",
        "parameters": [
          {
            "in": "body",
            "name": "SendPasswordKeyEvents",
            "description": "Inputs for IA-Connect SendPasswordKeyEvents action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Password": {
                  "type": "string",
                  "format": "password",
                  "title": "Password",
                  "description": "The password to be sent. If this is a 'Stored' password, enter in the format {IAConnectPassword:StoredPasswordIdentifier} and set the 'stored password' input to true. If this is an Orchestrator generic credential, enter in the format {OrchestratorCredential:FriendlyName} and set the 'stored password' input to true."
                },
                "Interval": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Interval in milliseconds",
                  "description": "The number of milliseconds between each key press event."
                },
                "DontInterpretSymbols": {
                  "type": "boolean",
                  "default": false,
                  "title": "Dont interpret symbols",
                  "description": "Should symbols in the password not be interpreted as special keys (e.g. {SHIFT} for Shift, {CTRL} for Ctrl)? This should be set to true if you are attempting to input the actual symbols."
                },
                "PasswordContainsStoredPassword": {
                  "type": "boolean",
                  "default": false,
                  "title": "Password contains stored password",
                  "description": "Set to true if the password is an IA-Connect stored password identifier (for example: generated by the 'Generate password' action) or an IA-Connect Orchestrator generic credential (for example: If using IA-Connect with a PA flow)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Password",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SendPasswordKeyEvents"
      }
    },
    "/Environment/SendKeys": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Send keys",
        "description": "Sends global key presses to the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "SendKeys",
            "description": "Inputs for IA-Connect SendKeys action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Text": {
                  "type": "string",
                  "title": "Text",
                  "description": "The text to be sent."
                },
                "Interval": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Interval in milliseconds",
                  "description": "The number of milliseconds between each key press."
                },
                "IsPassword": {
                  "type": "boolean",
                  "default": false,
                  "title": "Is password",
                  "description": "Is the input a password value? If so, the alternative 'Send password keys' action should be used."
                },
                "DontInterpretSymbols": {
                  "type": "boolean",
                  "default": false,
                  "title": "Dont interpret symbols",
                  "description": "Should symbols in the text not be interpreted as special keys (e.g. + for Shift, ^ for Ctrl)? This should be set to true if you are attempting to input the actual symbols."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Text",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SendKeys"
      }
    },
    "/Environment/SendPasswordKeys": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Send password keys",
        "description": "Sends global key presses to the IA-Connect Agent user session, specifically for entering a password.",
        "parameters": [
          {
            "in": "body",
            "name": "SendPasswordKeys",
            "description": "Inputs for IA-Connect SendPasswordKeys action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Password": {
                  "type": "string",
                  "format": "password",
                  "title": "Password",
                  "description": "The password to be sent. If this is a 'Stored' password, enter in the format {IAConnectPassword:StoredPasswordIdentifier} and set the 'stored password' input to true. If this is an Orchestrator generic credential, enter in the format {OrchestratorCredential:FriendlyName} and set the 'stored password' input to true."
                },
                "Interval": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Interval in milliseconds",
                  "description": "The number of milliseconds between each key press."
                },
                "DontInterpretSymbols": {
                  "type": "boolean",
                  "default": false,
                  "title": "Dont interpret symbols",
                  "description": "Should symbols in the password not be interpreted as special keys (e.g. + for Shift, ^ for Ctrl)? This should be set to true if you are attempting to input the actual symbols."
                },
                "PasswordContainsStoredPassword": {
                  "type": "boolean",
                  "default": false,
                  "title": "Password contains stored password",
                  "description": "Set to true if the password is an IA-Connect stored password identifier (for example: generated by the 'Generate password' action) or an IA-Connect Orchestrator generic credential (for example: If using IA-Connect with a PA flow)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Password",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SendPasswordKeys"
      }
    },
    "/Environment/ClearClipboard": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Clear clipboard",
        "description": "Clears the contents of the clipboard in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "ClearClipboard",
            "description": "Inputs for IA-Connect ClearClipboard action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "ClearClipboard"
      }
    },
    "/Environment/SetClipboardData": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set clipboard",
        "description": "Sets the content of the clipboard in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "SetClipboardData",
            "description": "Inputs for IA-Connect SetClipboardData action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "NewClipboardData": {
                  "type": "string",
                  "title": "New clipboard data",
                  "description": "The data to be set in the clipboard."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetClipboardData"
      }
    },
    "/Environment/GetClipboardData": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get clipboard",
        "description": "Gets the current content of the clipboard in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "GetClipboardData",
            "description": "Inputs for IA-Connect GetClipboardData action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ClipboardData": {
                  "type": "string",
                  "title": "Clipboard data",
                  "description": "The data contained within the clipboard."
                }
              }
            }
          }
        },
        "operationId": "GetClipboardData"
      }
    },
    "/Environment/TakeScreenshot": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Take screenshot",
        "description": "Takes a screenshot of the IA-Connect Agent user session and returns it as a Base64 encoded string.",
        "parameters": [
          {
            "in": "body",
            "name": "TakeScreenshot",
            "description": "Inputs for IA-Connect TakeScreenshot action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Fullscreen": {
                  "type": "boolean",
                  "default": true,
                  "title": "Fullscreen",
                  "description": "Should the screenshot include the whole screen?"
                },
                "LeftXPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Left X pixels",
                  "description": "If not taking a screenshot of the whole screen, the X value (in pixels) from where the screenshot should start. On a single display, the left-most X pixel is 0. On a multi-monitor display, the left-most X pixel could be negative (depending on which display is marked as primary, and where it is relative to the other displays)."
                },
                "TopYPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Top Y pixels",
                  "description": "If not taking a screenshot of the whole screen, the Y value (in pixels) from where the screenshot should start. On a single display, the top-most Y pixel is 0. On a multi-monitor display, the top-most Y pixel could be negative (depending on which display is marked as primary, and where it is relative to the other displays)."
                },
                "WidthPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Width pixels",
                  "description": "If not taking a screenshot of the whole screen, the width of the screenshot from the start position."
                },
                "HeightPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Height pixels",
                  "description": "If not taking a screenshot of the whole screen, the height of the screenshot from the start position."
                },
                "ImageFormat": {
                  "type": "string",
                  "title": "Image format",
                  "description": "Provide the image format (PNG, JPG, BMP or GIF).",
                  "enum": [
                    "PNG",
                    "JPG",
                    "BMP",
                    "GIF"
                  ]
                },
                "UseDisplayDevice": {
                  "type": "boolean",
                  "default": false,
                  "title": "Use display device",
                  "description": "Should the IA-Connect Agent take the display device information into consideration? This will work better with DPI-scaling and will provide support for multiple displays."
                },
                "RaiseExceptionOnError": {
                  "type": "boolean",
                  "default": true,
                  "title": "Raise exception on error",
                  "description": "If set the true: The IA-Connect Agent will raise an exception if the screenshot fails (for example, if the session is locked). If set the false: The IA-Connect will return a blank bitmap if the screenshot fails and will populate the 'Screenshot successful' and 'Screenshot error message' outputs."
                },
                "HideAgent": {
                  "type": "boolean",
                  "default": false,
                  "title": "Hide Agent",
                  "description": "Set to true to automatically hide the Agent (if visible) to ensure it doesn't obscure the screenshot.",
                  "x-ms-visibility": "advanced"
                },
                "UsePhysicalCoordinates": {
                  "type": "boolean",
                  "default": false,
                  "title": "Use physical coordinates",
                  "description": "Set to true to specify that the provided coordinates are physical (not DPI scaled and hence matching the physical pixels on the display). Set to false (the default) to specify that the provided coordinates are virtual (DPI scaled). UIA, Java and Web actions typically use virtual coordinates.",
                  "x-ms-visibility": "advanced"
                },
                "DisplayDeviceId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Display device Id",
                  "description": "This input only works when the input 'Use display device' is set to true. Set to 0 (the default) to include all monitors. Set to 1 to only include the primary monitor. Set to 2 or higher to only include the relevant secondary monitor.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ScreenBitmapBase64": {
                  "type": "string",
                  "title": "Screen image as Base64",
                  "description": "The screen image as a Base64 encoded string. This can be viewed using the provided utility 'Base64 to bitmap'."
                },
                "ScreenshotSuccessful": {
                  "type": "boolean",
                  "title": "Screenshot successful",
                  "description": "Set to true if the screenshot is successful. Set to false if the screenshot failed and 'Raise exception on error' was set to false. An exception will be raised if the screenshot failed and 'Raise exception on error' was set to true."
                },
                "ScreenshotErrorMessage": {
                  "type": "string",
                  "title": "Screenshot error message",
                  "description": "If the screenshot failed and 'Raise exception on error' was set to false, this output field will hold the error message. This is an alternative to setting 'Raise exception on error' to true, which will result in an exception if there is an error performing the screenshot."
                }
              }
            }
          }
        },
        "operationId": "TakeScreenshot"
      }
    },
    "/Environment/GetEnvironmentInfo": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get environment info",
        "description": "Returns information about the environment in which the IA-Connect Agent user session is running.",
        "parameters": [
          {
            "in": "body",
            "name": "GetEnvironmentInfo",
            "description": "Inputs for IA-Connect GetEnvironmentInfo action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "OSVersionMajor": {
                  "type": "integer",
                  "format": "int32",
                  "title": "OS major version",
                  "description": "The operating system major version."
                },
                "OSVersionMinor": {
                  "type": "integer",
                  "format": "int32",
                  "title": "OS minor version",
                  "description": "The operating system minor version."
                },
                "OSVersionBuild": {
                  "type": "integer",
                  "format": "int32",
                  "title": "OS build version",
                  "description": "The operating system build version."
                },
                "OSIs64Bit": {
                  "type": "boolean",
                  "title": "OS is 64bit",
                  "description": "Returns true if the operating system is 64bit."
                },
                "ProcessorCount": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Processor count",
                  "description": "The processor count."
                },
                "TotalPhysicalRAMInMB": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Total physical RAM in MB",
                  "description": "The amount of physical RAM (in MB)."
                },
                "TotalVirtualRAMInMB": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Total virtual RAM in MB",
                  "description": "The amount of virtual RAM (in MB)."
                },
                "AvailablePhysicalRAMInMB": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Available physical RAM in MB",
                  "description": "The amount of physical RAM that is currently available (in MB)."
                },
                "AvailableVirtualRAMInMB": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Available virtual RAM in MB",
                  "description": "The amount of virtual RAM that is currently available (in MB)."
                },
                "OSFullName": {
                  "type": "string",
                  "title": "OS full name",
                  "description": "The operating system full name, e.g. Microsoft Windows Server 2019 Standard."
                },
                "InstalledUICultureName": {
                  "type": "string",
                  "title": "Installed UI culture name",
                  "description": "The user interface language installed with the operating system, e.g. en-US."
                },
                "CurrentUICultureName": {
                  "type": "string",
                  "title": "Current UI culture name",
                  "description": "The default user interface language, e.g. en-US."
                },
                "CurrentCultureName": {
                  "type": "string",
                  "title": "Current culture name",
                  "description": "The default user locale, e.g. en-GB."
                }
              }
            }
          }
        },
        "operationId": "GetEnvironmentInfo"
      }
    },
    "/Environment/IsScreenReaderEnabled": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Is screen reader enabled",
        "description": "Returns whether the screen reader has been enabled in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "IsScreenReaderEnabled",
            "description": "Inputs for IA-Connect IsScreenReaderEnabled action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ScreenReaderEnabled": {
                  "type": "boolean",
                  "title": "Screen reader enabled",
                  "description": "Returns true if the screen reader has been enabled."
                }
              }
            }
          }
        },
        "operationId": "IsScreenReaderEnabled"
      }
    },
    "/Environment/SetScreenReader": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set screen reader",
        "description": "Enables or disables the screen reader in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "SetScreenReader",
            "description": "Inputs for IA-Connect SetScreenReader action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "EnableScreenReader": {
                  "type": "boolean",
                  "default": true,
                  "title": "Enable screen reader",
                  "description": "If set to true then the screen reader will be enabled. If set to false then the screen reader will be disabled."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetScreenReader"
      }
    },
    "/Environment/GetParentProcessId": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get parent process Id",
        "description": "Returns the process Id of the parent process for any running process in the IA-Connect Agent user session which has the specified process Id.",
        "parameters": [
          {
            "in": "body",
            "name": "GetParentProcessId",
            "description": "Inputs for IA-Connect GetParentProcessId action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ProcessId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Process Id",
                  "description": "The process ID of the child process."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ProcessId",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ParentProcessId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent process Id",
                  "description": "The process ID of the parent process."
                },
                "ParentProcessStillRunning": {
                  "type": "boolean",
                  "title": "Parent process still running",
                  "description": "Returns true if the parent process is still running and has not exited."
                },
                "ParentProcessName": {
                  "type": "string",
                  "title": "Parent process name",
                  "description": "The process name of the parent process."
                }
              }
            }
          }
        },
        "operationId": "GetParentProcessId"
      }
    },
    "/Environment/GetProcessIdCommandLine": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get process Id command line properties",
        "description": "Returns the command line properties for any running process in the IA-Connect Agent user session which has the specified process Id.",
        "parameters": [
          {
            "in": "body",
            "name": "GetProcessIdCommandLine",
            "description": "Inputs for IA-Connect GetProcessIdCommandLine action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ProcessId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Process Id",
                  "description": "The process ID of the process to retrieve the command line properties from."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ProcessId",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ProcessCommandLine": {
                  "type": "string",
                  "title": "Process command line",
                  "description": "The command line properties for the process."
                },
                "ProcessArguments": {
                  "type": "string",
                  "title": "Process arguments",
                  "description": "The arguments that were used when starting the process."
                },
                "ProcessCurrentWorkingDirectory": {
                  "type": "string",
                  "title": "Process current working directory",
                  "description": "The process current working directory."
                },
                "ProcessImagePathName": {
                  "type": "string",
                  "title": "Process image path name",
                  "description": "The path to the executable which started the process."
                }
              }
            }
          }
        },
        "operationId": "GetProcessIdCommandLine"
      }
    },
    "/Environment/GetLastInputInfo": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get last input info",
        "description": "Gets the time since the last user input was received in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "GetLastInputInfo",
            "description": "Inputs for IA-Connect GetLastInputInfo action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "LastInputTotalSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Last input total seconds",
                  "description": "The number of seconds that have elapsed since the last input."
                },
                "LastInputTotalMinutes": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Last input total minutes",
                  "description": "The number of minutes that have elapsed since the last input."
                },
                "LastInputTotalHours": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Last input total hours",
                  "description": "The number of hours that have elapsed since the last input."
                }
              }
            }
          }
        },
        "operationId": "GetLastInputInfo"
      }
    },
    "/Environment/KeepSessionAlive": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Keep session alive",
        "description": "Keeps the IA-Connect Agent user session alive by moving the mouse at the specified interval to prevent the session from becoming idle.",
        "parameters": [
          {
            "in": "body",
            "name": "KeepSessionAlive",
            "description": "Inputs for IA-Connect KeepSessionAlive action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "XWiggle": {
                  "type": "integer",
                  "format": "int32",
                  "default": 2,
                  "title": "X wiggle",
                  "description": "The number of pixels to move the mouse horizontally."
                },
                "YWiggle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y wiggle",
                  "description": "The number of pixels to move the mouse vertically."
                },
                "WiggleDelayInSeconds": {
                  "type": "number",
                  "format": "double",
                  "default": 0.1,
                  "title": "Wiggle delay in seconds",
                  "description": "The number of seconds between the mouse movements when wiggling."
                },
                "IdleThresholdInSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 120,
                  "title": "Idle threshold in seconds",
                  "description": "The number of seconds that should have elapsed since the last input before moving the mouse."
                },
                "IdleCheckPeriodInSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 30,
                  "title": "Idle check period in seconds",
                  "description": "The number of seconds between checking the last input time (to check if the idle threshold has been passed)."
                },
                "TotalKeepaliveRuntimeInSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": -1,
                  "title": "Total keepalive runtime in seconds",
                  "description": "The total number of seconds to keep the session alive for."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "KeepSessionAliveResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "KeepSessionAlive"
      }
    },
    "/Environment/StopKeepSessionAlive": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Stop keep session alive",
        "description": "Stops the IA-Connect Agent user session keep alive.",
        "parameters": [
          {
            "in": "body",
            "name": "StopKeepSessionAlive",
            "description": "Inputs for IA-Connect StopKeepSessionAlive action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "StopKeepSessionAliveResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "StopKeepSessionAlive"
      }
    },
    "/Environment/CopyFileToClipboard": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Copy file to clipboard",
        "description": "Copies the specified local file to the clipboard in the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "CopyFileToClipboard",
            "description": "Inputs for IA-Connect CopyFileToClipboard action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Filepath": {
                  "type": "string",
                  "title": "File name",
                  "description": "The file path to the local file to be copied to the clipboard."
                },
                "Cut": {
                  "type": "boolean",
                  "default": false,
                  "title": "Cut",
                  "description": "If set to true then the file will be cut instead of copied."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Filepath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "CopyFileToClipboardResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "CopyFileToClipboard"
      }
    },
    "/Environment/GetRemoteSessionInfo": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get IA-Connect Agent session info",
        "description": "Returns information about the IA-Connect Agent user session.",
        "parameters": [
          {
            "in": "body",
            "name": "GetRemoteSessionInfo",
            "description": "Inputs for IA-Connect GetRemoteSessionInfo action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "SessionId": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "title": "Session Id",
                  "description": "The current remote user session Id."
                },
                "SessionType": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Session type",
                  "description": "The type of remote session, either 1 (Citrix), 2 (RDP) or 0 (Console)."
                },
                "SessionTypeName": {
                  "type": "string",
                  "title": "Session type name",
                  "description": "The type of remote session, either ICA (Citrix), RDP or Console."
                }
              }
            }
          }
        },
        "operationId": "GetRemoteSessionInfo"
      }
    },
    "/Environment/GeneratePassword": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Generate password",
        "description": "Generates a password containing dictionary words, numbers, symbols, characters as defined in a template format.",
        "parameters": [
          {
            "in": "body",
            "name": "GeneratePassword",
            "description": "Inputs for IA-Connect GeneratePassword action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "PasswordFormat": {
                  "type": "string",
                  "title": "Password format",
                  "description": "The format of the generated password. The symbol 'w' represents a dictionary word, 'n' represents a number, 's' represents a symbol, 'l' represents a lower-case letter, 'L' represents an upper-case letter. For example wnnws might generate Pluto35Marmite!"
                },
                "MinimumLength": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Minimum length",
                  "description": "The minimum length of the generated password. If the generated password is too short, additional dictionary words will be added until the length is met. Set to 0 if there is no minimum length requirement."
                },
                "ReturnAsPlainText": {
                  "type": "boolean",
                  "default": false,
                  "title": "Return as plain text",
                  "description": "Set to true to return the password as plain text."
                },
                "StorePasswordAsIdentifier": {
                  "type": "string",
                  "title": "Store password as identifier",
                  "description": "If an identifier is supplied, this password will be stored encrypted inside the Agent for later retrieval / usage by any commands which can make use of stored credentials. These passwords are only stored in memory and are lost when the Agent is closed. For example: MyExchangePassword."
                },
                "SupportedSymbols": {
                  "type": "string",
                  "title": "Supported symbols",
                  "description": "Allows you to provide a list of symbols to be randomly used when the symbol 's' is used in the format of a generated password. If not specified, a built-in list is used. For example: !$()*.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "PasswordFormat",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "PlainTextPassword": {
                  "type": "string",
                  "title": "Plain text password",
                  "description": "The password in plain text if requested. The password might be requested in plain text because the password is a one-time password intended to be transmitted via SMS or email (for example) and hence needs to be seen as-is."
                }
              }
            }
          }
        },
        "operationId": "GeneratePassword"
      }
    },
    "/Environment/GetStoredPassword": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get stored password",
        "description": "Retrieves a previously generated or stored password.",
        "parameters": [
          {
            "in": "body",
            "name": "GetStoredPassword",
            "description": "Inputs for IA-Connect GetStoredPassword action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "PasswordIdentifier": {
                  "type": "string",
                  "title": "Password identifier",
                  "description": "The identifier of the stored password. These passwords are only stored in memory and are lost when the Agent is closed. For example: MyExchangePassword."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "PlainTextPassword": {
                  "type": "string",
                  "title": "Plain text password",
                  "description": "The password in plain text. The password might be needed in plain text if the password is a one-time password intended to be transmitted via SMS or email (for example) and hence needs to be seen as-is."
                }
              }
            }
          }
        },
        "operationId": "GetStoredPassword"
      }
    },
    "/Environment/ExpandPasswordString": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Expand password string",
        "description": "Accepts an input string which contains references to IA-Connect stored passwords and returns that string with the references replaced by the stored passwords.",
        "parameters": [
          {
            "in": "body",
            "name": "ExpandPasswordString",
            "description": "Inputs for IA-Connect ExpandPasswordString action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "InputString": {
                  "type": "string",
                  "title": "Input string",
                  "description": "The input string which contains IA-Connect stored password identifiers. For example: 'Welcome new starter, your new account password is {IAConnectPassword:GeneratedPassword}' where 'GeneratedPassword' is the name of a stored IA-Connect password."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "OutputString": {
                  "type": "string",
                  "title": "Output string",
                  "description": "The output string which contains the input string with password identifiers replaced by the actual passwords. For example: 'Welcome new starter, your new account password is Fantastic12Monkeys!'."
                }
              }
            }
          }
        },
        "operationId": "ExpandPasswordString"
      }
    },
    "/Environment/StorePasswordInAgentMemory": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Store password in Agent memory",
        "description": "Store a password into Agent memory (encrypted) where it can be used from any actions which support stored passwords. Passwords are only stored in memory and are lost when the Agent is closed.",
        "parameters": [
          {
            "in": "body",
            "name": "StorePasswordInAgentMemory",
            "description": "Inputs for IA-Connect StorePasswordInAgentMemory action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Identifier": {
                  "type": "string",
                  "title": "Identifier",
                  "description": "A unique identifier for the password. If the identifier is already in use, it will be overwritten. For example: SAPGUILogon. Passwords are retrieved using the phrase {IAConnectPassword:Identifier}."
                },
                "Password": {
                  "type": "string",
                  "format": "password",
                  "title": "Password",
                  "description": "The password to store."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Identifier",
                "Password",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "StorePasswordInAgentMemoryResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "StorePasswordInAgentMemory"
      }
    },
    "/Environment/DeletePasswordInAgentMemory": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete password in Agent memory",
        "description": "Delete a password stored in Agent memory, or delete all Agent stored passwords.",
        "parameters": [
          {
            "in": "body",
            "name": "DeletePasswordInAgentMemory",
            "description": "Inputs for IA-Connect DeletePasswordInAgentMemory action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DeleteAllPasswords": {
                  "type": "boolean",
                  "default": false,
                  "title": "Delete all passwords",
                  "description": "Set to true to delete all passwords stored in Agent memory. Set to false (the default) to delete a single password matching the provided identifier."
                },
                "Identifier": {
                  "type": "string",
                  "title": "Identifier",
                  "description": "A unique identifier for the password to delete. For example: SAPGUILogon."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "DeletePasswordInAgentMemoryResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "DeletePasswordInAgentMemory"
      }
    },
    "/Environment/CredentialWrite": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Write to a user credential",
        "description": "Writes a username and password to a credential in the user's profile in the IA-Connect Agent session, creating that credential if it doesn't exist. Credentials can be viewed from the Windows Control Panel.",
        "parameters": [
          {
            "in": "body",
            "name": "CredentialWrite",
            "description": "Inputs for IA-Connect CredentialWrite action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "CredentialAddress": {
                  "type": "string",
                  "title": "Credential address",
                  "description": "The name / address of the credential."
                },
                "UserName": {
                  "type": "string",
                  "title": "User name",
                  "description": "The credential user name."
                },
                "Password": {
                  "type": "string",
                  "title": "Password",
                  "description": "The credential password."
                },
                "CredentialType": {
                  "type": "string",
                  "title": "Credential type",
                  "description": "The credential type: Windows or Generic.",
                  "enum": [
                    "Windows",
                    "Generic"
                  ]
                },
                "CredentialPersistence": {
                  "type": "string",
                  "default": "LocalMachine",
                  "title": "Credential persistence",
                  "description": "The credential persistence: Session (lasts just for this login session), LocalMachine (persists for this user across sessions and reboots on this computer only) or Enterprise (could roam for this across between machines).",
                  "enum": [
                    "Session",
                    "LocalMachine",
                    "Enterprise"
                  ]
                },
                "SymmetricKey": {
                  "type": "string",
                  "title": "Symmetric encryption key",
                  "description": "An optional symmetric encryption key used to encrypt the credential. You can only retrieve this credential if you know the key. Only usable with Generic Credentials."
                },
                "StorePasswordAsIdentifier": {
                  "type": "string",
                  "title": "Store password as identifier",
                  "description": "If an identifier is supplied, this password will also be stored encrypted inside the Agent for later retrieval / usage by any commands which can make use of stored credentials. These passwords are only stored in memory and are lost when the Agent is closed. For example: MyExchangePassword."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "CredentialAddress",
                "UserName",
                "Password",
                "CredentialType",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "CredentialWriteResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "CredentialWrite"
      }
    },
    "/Environment/CredentialRead": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Read from a user credential",
        "description": "Reads a username and password from a credential in the user's profile in the IA-Connect Agent session. Credentials can be viewed from the Windows Control Panel. Both the username and password can be retrieved from a Generic credential while only the username can be retrieved from a Windows credential.",
        "parameters": [
          {
            "in": "body",
            "name": "CredentialRead",
            "description": "Inputs for IA-Connect CredentialRead action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "CredentialAddress": {
                  "type": "string",
                  "title": "Credential address",
                  "description": "The name / address of the credential."
                },
                "CredentialType": {
                  "type": "string",
                  "title": "Credential type",
                  "description": "The credential type: Windows or Generic.",
                  "enum": [
                    "Windows",
                    "Generic"
                  ]
                },
                "SymmetricKey": {
                  "type": "string",
                  "title": "Symmetric encryption key",
                  "description": "An optional symmetric encryption key used to decrypt the credential password (use if the credential was encrypted with a key). Only usable with Generic Credentials since the password for a Windows credential cannot be retrieved."
                },
                "StorePasswordAsIdentifier": {
                  "type": "string",
                  "title": "Store password as identifier",
                  "description": "If an identifier is supplied, the retrieved credential password will be stored encrypted inside the Agent for later retrieval / usage by any commands which can make use of stored credentials. These passwords are only stored in memory and are lost when the Agent is closed. Only usable with Generic Credentials since the password for a Windows credential cannot be retrieved. For example: MyExchangePassword."
                },
                "DontReturnPassword": {
                  "type": "boolean",
                  "default": false,
                  "title": "Dont return password",
                  "description": "If set to true, the credential password won't be returned. This is useful if you are storing the password within the Agent for use by further commands (i.e. 'Store password as identifier' is true), but you don't actually need to know the password within your workflow."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "CredentialAddress",
                "CredentialType",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "UserName": {
                  "type": "string",
                  "title": "User name",
                  "description": "The credential user name."
                },
                "Password": {
                  "type": "string",
                  "title": "Password",
                  "description": "The credential password."
                }
              }
            }
          }
        },
        "operationId": "CredentialRead"
      }
    },
    "/Environment/CredentialDelete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Deletes a user credential",
        "description": "Deletes a credential in the user's profile in the IA-Connect Agent session. Credentials can be viewed from the Windows Control Panel.",
        "parameters": [
          {
            "in": "body",
            "name": "CredentialDelete",
            "description": "Inputs for IA-Connect CredentialDelete action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "CredentialAddress": {
                  "type": "string",
                  "title": "Credential address",
                  "description": "The name / address of the credential."
                },
                "CredentialType": {
                  "type": "string",
                  "title": "Credential type",
                  "description": "The credential type: Windows or Generic.",
                  "enum": [
                    "Windows",
                    "Generic"
                  ]
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "CredentialAddress",
                "CredentialType",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "CredentialDeleteResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "CredentialDelete"
      }
    },
    "/Environment/GenerateRDPFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create Remote Desktop Session (RDS) launch file",
        "description": "Create a Remote Desktop Session (RDS) launch file which can be used to automatically launch a Remote Desktop Session using specified parameters, instead of requiring automation of the Remote Desktop client UI. A RDS launch file has the extension '.rdp' and is often called a RDP file.",
        "parameters": [
          {
            "in": "body",
            "name": "GenerateRDPFile",
            "description": "Inputs for IA-Connect GenerateRDPFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "RemoteAddress": {
                  "type": "string",
                  "title": "Remote address",
                  "description": "The address of the remote system to connect to. This could be an IP address, hostname or Fully Qualified Domain Name (FQDN)."
                },
                "OutputFolderPath": {
                  "type": "string",
                  "title": "Output folder path",
                  "description": "The folder in which to save the RDP file."
                },
                "RDPFileName": {
                  "type": "string",
                  "title": "RDP filename",
                  "description": "The name of the RDP file which will be created in the output folder path."
                },
                "OverwriteRDPFileIfAlreadyExists": {
                  "type": "boolean",
                  "default": true,
                  "title": "Overwrite RDP file if already exists",
                  "description": "Set to true to automatically overwrite any RDP file with the same folder / filename. Set to false if a new RDP file should not be created if an existing RDP file with the same folder / filename already exists."
                },
                "TrustRemoteComputer": {
                  "type": "boolean",
                  "default": true,
                  "title": "Trust remote computer",
                  "description": "Set to true to mark the remote address as trusted (in the Windows registry), mainly for device redirection purposes, eliminating a popup you might receive when launching the RDP file."
                },
                "StoreCredentials": {
                  "type": "boolean",
                  "default": true,
                  "title": "Store credentials",
                  "description": "Set to true to create a user credential to hold the Remote Desktop authentication details. This can allow you to connect to the Remote Desktop system without being prompted for authentication."
                },
                "UserName": {
                  "type": "string",
                  "title": "UserName",
                  "description": "If storing a credential to hold the Remote Desktop authentication details, this allows you to specify the username to store in the credential."
                },
                "Password": {
                  "type": "string",
                  "title": "Password",
                  "description": "If storing a credential to hold the Remote Desktop authentication details, this allows you to specify the password to store in the credential."
                },
                "CredentialType": {
                  "type": "string",
                  "default": "Windows",
                  "title": "Credential type",
                  "description": "If storing a credential to hold the Remote Desktop authentication details, the allows you to specify the credential type: Windows or Generic. For saving a RDP credential, you would typically create a Windows credential.",
                  "enum": [
                    "Windows",
                    "Generic"
                  ]
                },
                "CredentialPersistence": {
                  "type": "string",
                  "default": "Session",
                  "title": "Credential persistence",
                  "description": "If storing a credential to hold the Remote Desktop authentication details, this allows you to specify the credential persistence: Session (lasts just for this login session), LocalMachine (persists for this user across sessions and reboots on this computer only) or Enterprise (could roam for this across between machines). The default when creating RDP files is 'Session'.",
                  "enum": [
                    "Session",
                    "LocalMachine",
                    "Enterprise"
                  ]
                },
                "RedirectPrinters": {
                  "type": "boolean",
                  "default": false,
                  "title": "Redirect printers",
                  "description": "Should printers in the local session be mapped into the remote desktop session? This setting might be enforced at the remote end and hence not take effect."
                },
                "RedirectAllDrives": {
                  "type": "boolean",
                  "default": false,
                  "title": "Redirect all drives",
                  "description": "Should all drive letters (e.g. C:) in the local session be mapped into the remote desktop session? This setting might be enforced at the remote end and hence not take effect."
                },
                "RedirectClipboard": {
                  "type": "boolean",
                  "default": true,
                  "title": "Redirect clipboard",
                  "description": "Should the clipboard be shared between the local and remote system, allowing copy and paste between the two systems? This setting might be enforced at the remote end and hence not take effect."
                },
                "Fullscreen": {
                  "type": "boolean",
                  "default": true,
                  "title": "Fullscreen",
                  "description": "Should the remote desktop session be fullscreen."
                },
                "DesktopWidth": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1280,
                  "title": "Desktop width",
                  "description": "The width of the remote desktop session in pixels if the remote desktop session is not fullscreen."
                },
                "DesktopHeight": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1024,
                  "title": "Desktop height",
                  "description": "The height of the remote desktop session in pixels if the remote desktop session is not fullscreen."
                },
                "UseMultiMonitor": {
                  "type": "boolean",
                  "default": false,
                  "title": "Use multi monitor",
                  "description": "Set to false if a fullscreen remote desktop session should only use a single monitor. Set to true if a fullscreen remote desktop session should use all monitors. Has no effect on a single-monitor system (and hence most virtual machines)."
                },
                "SessionBPP": {
                  "type": "integer",
                  "format": "int32",
                  "default": 32,
                  "title": "Session colour depth",
                  "description": "The colour depth of the remote desktop session in bits per pixel (BPP). A higher number results in more colours. Supported values are 15, 16, 24, 32."
                },
                "SmartSizing": {
                  "type": "boolean",
                  "default": true,
                  "title": "Smart sizing",
                  "description": "Set to true for the local computer to automatically scale the contents of the remote session to fit the windows size. Set to false to not automatically scale."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "RemoteAddress",
                "OutputFolderPath",
                "RDPFileName",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "RDPFilePath": {
                  "type": "string",
                  "title": "RDP file path",
                  "description": "The full path of the generated RDP file."
                }
              }
            }
          }
        },
        "operationId": "GenerateRDPFile"
      }
    },
    "/Environment/LaunchRemoteDesktopSession": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Launch Remote Desktop Session (RDS)",
        "description": "Launch a Remote Desktop Session (RDS) using a RDP launch file.",
        "parameters": [
          {
            "in": "body",
            "name": "LaunchRemoteDesktopSession",
            "description": "Inputs for IA-Connect LaunchRemoteDesktopSession action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "RDPFilePath": {
                  "type": "string",
                  "title": "RDP file path",
                  "description": "The full path to a RDP file (which could either pre-exist or be created using the action: 'Create Remote Desktop Session (RDS) launch file')."
                },
                "TrustRemoteComputer": {
                  "type": "boolean",
                  "default": true,
                  "title": "Trust remote computer",
                  "description": "Set to true to mark the remote address (set in the RDP file) as trusted (in the Windows registry), mainly for device redirection purposes, eliminating a popup you might receive when launching the RDP file."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "RDPFilePath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "LaunchRemoteDesktopSessionResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "LaunchRemoteDesktopSession"
      }
    },
    "/Environment/IsTCPPortResponding": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Is TCP port responding",
        "description": "Reports whether a network TCP port is responding to a connection attempt by the IA-Connect Agent. This could be a TCP port on the computer where the IA-Connect Agent is running (enter 'localhost' for the remote host) or on any remote computer. If the IA-Connect Agent successfully connects to a TCP port, it immediately closes the TCP connection.",
        "parameters": [
          {
            "in": "body",
            "name": "IsTCPPortResponding",
            "description": "Inputs for IA-Connect IsTCPPortResponding action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "RemoteHost": {
                  "type": "string",
                  "title": "Remote host",
                  "description": "The IPv4 address, DNS address or hostname of the computer to connect to. Enter 'localhost' to check a TCP port on the computer where the IA-Connect Agent is running. Examples: 192.168.1.10 or www.test.com or vm-server19."
                },
                "TCPPort": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 65535,
                  "title": "TCP port",
                  "description": "The TCP port number to connect to on the specified remote (or local) host. A TCP port must be 1 or higher and 65535 or lower. Examples of common well-known ports are 80 (HTTP), 443 (HTTPS), 445 (SMB / file sharing)."
                },
                "TimeoutInSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Timeout in seconds",
                  "description": "The maximum number of seconds to wait for the TCP connection. This defaults to 10 seconds but most working connections would be expected to connect within a few seconds (over the Internet) or less than a second (local network)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "RemoteHost",
                "TCPPort",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "TCPPortConnected": {
                  "type": "boolean",
                  "title": "TCP port connected",
                  "description": "Set to true if the TCP port connected or false if the TCP port failed to connect."
                },
                "ConnectionErrorMessage": {
                  "type": "string",
                  "title": "Connection error message",
                  "description": "The error message if the TCP port failed to connect. This will commonly be a DNS / name lookup error or a timeout."
                }
              }
            }
          }
        },
        "operationId": "IsTCPPortResponding"
      }
    },
    "/Environment/UnlockSession": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Unlock session",
        "description": "Unlocks the session that the IA-Connect Agent is running in. This requires the IA-Connect Unlocker Credential Provider to be installed on the computer hosting the session since only a Credential Provider can unlock a computer.",
        "parameters": [
          {
            "in": "body",
            "name": "UnlockSession",
            "description": "Inputs for IA-Connect UnlockSession action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "UnlockPassword": {
                  "type": "string",
                  "title": "Unlock password",
                  "description": "The password to unlock the current session. This is the Windows user password for the account which is logged into the session that is currently locked. If this is a 'Stored' password, enter in the format {IAConnectPassword:StoredPasswordIdentifier} and set the 'stored password' input to true. If this is an Orchestrator generic credential, enter in the format {OrchestratorCredential:FriendlyName} and set the 'stored password' input to true."
                },
                "PasswordContainsStoredPassword": {
                  "type": "boolean",
                  "default": false,
                  "title": "Password contains stored password",
                  "description": "Set to true if the password is an IA-Connect stored password identifier (for example: generated by the 'Generate password' action) or an IA-Connect Orchestrator generic credential (for example: If using IA-Connect with a PA flow)."
                },
                "DetectIfLocked": {
                  "type": "boolean",
                  "default": true,
                  "title": "Detect if locked",
                  "description": "Should the IA-Connect Agent attempt to detect if the session is locked. If set to true and the session is not detected as being locked, this action will simply do nothing (since there is nothing to do). Only set to false if IA-Connect is mis-detecting whether the session is locked and you want to force an unlock attempt (which will fail if the session isn't locked)."
                },
                "DetectCredentialProvider": {
                  "type": "boolean",
                  "default": true,
                  "title": "Detect Credential Provider",
                  "description": "Should the IA-Connect Agent attempt to detect the existence of the IA-Connect Unlocker Credential Provider before sending an unlock request. You should only disable this if the IA-Connect Credential Provider is present and running but, for some reason, the IA-Connect Agent isn't detecting it.",
                  "x-ms-visibility": "advanced"
                },
                "SecondsToWaitForUnlock": {
                  "type": "integer",
                  "format": "int32",
                  "default": 5,
                  "title": "Seconds to wait for unlock",
                  "description": "How long (in seconds) should the IA-Connect Agent wait for evidence that the desktop has successfully unlocked (by detecting the desktop unlock state). By default this is up to 5 seconds. Set to 0 to disable this feature and continue without checking that the desktop has unlocked.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "UnlockPassword",
                "DetectIfLocked",
                "DetectCredentialProvider",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "SessionUnlockPerformed": {
                  "type": "boolean",
                  "title": "Session unlock performed",
                  "description": "Set to true if the session was locked and an unlock action was performed. Set to false if the session wasn't locked and 'Detect if locked' was set to true, resulting in no action being performed."
                }
              }
            }
          }
        },
        "operationId": "UnlockSession"
      }
    },
    "/Environment/LockSession": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Lock session",
        "description": "Locks the session that the IA-Connect Agent is running in.",
        "parameters": [
          {
            "in": "body",
            "name": "LockSession",
            "description": "Inputs for IA-Connect LockSession action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "LockAfterMinutesOfActionInactivity": {
                  "type": "integer",
                  "format": "int32",
                  "default": 5,
                  "title": "Lock after minutes of action inactivity",
                  "description": "If set to a value greater than 0, the Agent won't lock immediately but will instead lock after the specified number of minutes of action inactivity (the Agent not receiving any actions). This stops the Agent from continually locking and unlocking when there are many flows running back-to-back. Set to 0 to lock immediately. The default value is 5 minutes."
                },
                "SecondsToWaitAfterLock": {
                  "type": "integer",
                  "format": "int32",
                  "default": 3,
                  "title": "Seconds to wait after lock",
                  "description": "After locking, wait for the specified number of seconds. This gives the session time to fully lock. This is generally used if you expect the possibility of an unlock event (i.e. another session starting) immediately after locking, which could fail if the previous session is still locking. Only used if 'Lock after minutes of action inactivity' is set to 0 (causing an immediate lock)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "LockSessionResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "LockSession"
      }
    },
    "/Environment/IsSessionLocked": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Is session locked",
        "description": "Reports whether the session that the IA-Connect Agent is running in is locked.",
        "parameters": [
          {
            "in": "body",
            "name": "IsSessionLocked",
            "description": "Inputs for IA-Connect IsSessionLocked action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "SessionIsLocked": {
                  "type": "boolean",
                  "title": "Session is locked",
                  "description": "Set to true if the session that the IA-Connect Agent is running in is locked."
                }
              }
            }
          }
        },
        "operationId": "IsSessionLocked"
      }
    },
    "/Environment/GetGenericCredentialFromOrchestrator": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get generic credential from Orchestrator",
        "description": "Retrieves a generic credential that has been stored in the IA-Connect Orchestrator. A credential can hold usernames, passwords, hostnames, URLs and other generic data.",
        "parameters": [
          {
            "in": "body",
            "name": "GetGenericCredentialFromOrchestrator",
            "description": "Inputs for IA-Connect GetGenericCredentialFromOrchestrator action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "FriendlyName": {
                  "type": "string",
                  "title": "Friendly name",
                  "description": "Friendly name of the credential stored in the Orchestrator."
                },
                "RetrievePlainTextPassword": {
                  "type": "boolean",
                  "default": false,
                  "title": "Retrieve plain text password",
                  "description": "If checked, the password for the specified Orchestrator generic credential will be returned as plain text if the Orchestrator generic credential setting 'Do not expose password' has been disabled (allowing passwords to be retrieved). It is recommended to not retrieve passwords as plain text and instead to use IA-Connect actions that support stored passwords (for example: 'Input password into UIA action') where the Orchestrator will insert the password directly into the action at run-time."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "Username": {
                  "type": "string",
                  "title": "Username",
                  "description": "The username held in the generic credential."
                },
                "PlainTextPassword": {
                  "type": "string",
                  "title": "Plain text password",
                  "description": "The password held in the generic credential. Orchestrator passwords are stored encrypted, but will be returned as plain text to allow you to pass them on to actions which require them."
                },
                "Hostname": {
                  "type": "string",
                  "title": "Host name",
                  "description": "The host name or domain name held in the generic credential, if used."
                },
                "Url": {
                  "type": "string",
                  "title": "URL",
                  "description": "The URL held in the generic credential, if used."
                },
                "GenericProperty1": {
                  "type": "string",
                  "title": "Generic property 1",
                  "description": "A generic property held in the generic credential, if used. This could be used to store data that might be associated with the credential."
                },
                "GenericProperty2": {
                  "type": "string",
                  "title": "Generic property 2",
                  "description": "A generic property held in the generic credential, if used. This could be used to store data that might be associated with the credential."
                },
                "GenericProperty3": {
                  "type": "string",
                  "title": "Generic property 3",
                  "description": "A generic property held in the generic credential, if used. This could be used to store data that might be associated with the credential."
                }
              }
            }
          }
        },
        "operationId": "GetGenericCredentialFromOrchestrator"
      }
    },
    "/Environment/DrawRectangleOnScreen": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Draw rectangle on screen",
        "description": "Draws a rectangle on screen to aid in identifying screen coordinates, or the output of an action which reports screen coordinates. The rectangle is automatically removed after 5 seconds.",
        "parameters": [
          {
            "in": "body",
            "name": "DrawRectangleOnScreen",
            "description": "Inputs for IA-Connect DrawRectangleOnScreen action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "RectangleLeftPixelXCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Rectangle left edge screen pixel X-coordinate",
                  "description": "The left pixel edge of the rectangle to display. Can be in virtual or physical pixels depending on the input 'Coordinates are physical'."
                },
                "RectangleRightPixelXCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Rectangle right edge screen pixel X-coordinate",
                  "description": "The right pixel edge of the rectangle to display. Can be in virtual or physical pixels depending on the input 'Coordinates are physical'."
                },
                "RectangleTopPixelYCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Rectangle top edge screen pixel Y-coordinate",
                  "description": "The top pixel edge of the rectangle to display. Can be in virtual or physical pixels depending on the input 'Coordinates are physical'."
                },
                "RectangleBottomPixelYCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Rectangle bottom edge screen pixel Y-coordinate",
                  "description": "The bottom pixel edge of the rectangle to display. Can be in virtual or physical pixels depending on the input 'Coordinates are physical'."
                },
                "PenColour": {
                  "type": "string",
                  "default": "#800080",
                  "title": "Pen colour",
                  "description": "The colour of the rectangle to be drawn (e.g. red, green, blue, yellow, purple or orange) or a string hex code e.g. #FF0000."
                },
                "PenThicknessPixels": {
                  "type": "integer",
                  "format": "int32",
                  "default": 4,
                  "title": "Pen thickness pixels",
                  "description": "The thickness (in pixels) of the highlight rectangle border."
                },
                "SecondsToDisplay": {
                  "type": "integer",
                  "format": "int32",
                  "default": 5,
                  "title": "Seconds to display",
                  "description": "The number of seconds to display the rectangle."
                },
                "CoordinatesArePhysical": {
                  "type": "boolean",
                  "default": false,
                  "title": "Coordinates are physical",
                  "description": "Set to true if the coordinates being provided are physical screen coordinates. Set to false if the coordinates being provided are virtual. If the underlying display scaling is 100%, both physical and virtual coordinates are the same."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "RectangleLeftPixelXCoord",
                "RectangleRightPixelXCoord",
                "RectangleTopPixelYCoord",
                "RectangleBottomPixelYCoord",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "DrawRectangleOnScreenResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "DrawRectangleOnScreen"
      }
    },
    "/Environment/GetFailedActionErrorMessageFromPowerAutomateResultJSON": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get failed action error message from flow result JSON",
        "description": "Deserialises the JSON output of one or more flow result() expressions and retrieves the first located error message from a failed action. The error message can be stored in the JSON in a variety of formats. This action processes known formats and returns the first located error message.",
        "parameters": [
          {
            "in": "body",
            "name": "GetFailedActionErrorMessageFromPowerAutomateResultJSON",
            "description": "Inputs for IA-Connect GetFailedActionErrorMessageFromPowerAutomateResultJSON action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "PowerAutomateResultJSON": {
                  "type": "array",
                  "title": "Flow result JSON",
                  "description": "An array of JSON which should contain the outputs from one or more flow result() expressions. If you are only processing the output of a single flow result() expression, simply enter that into the first array item.",
                  "items": {
                    "type": "string"
                  }
                },
                "SearchStatus": {
                  "type": "string",
                  "default": "Failed",
                  "title": "Search status",
                  "description": "The status of the action that contains the error message. This should only be changed if you are searching for a status different to the default of 'Failed'."
                }
              },
              "required": [
                "PowerAutomateResultJSON"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ActionErrorMessage": {
                  "type": "string",
                  "title": "Action error message",
                  "description": "Returns the action error message extracted from the result JSON. If an error message could not be located, a blank value will be returned."
                },
                "ActionName": {
                  "type": "string",
                  "title": "Action name",
                  "description": "Returns the name of the action associated with the error message."
                },
                "ActionCode": {
                  "type": "string",
                  "title": "Action code",
                  "description": "Returns the result code of the action associated with the error message."
                }
              }
            }
          }
        },
        "operationId": "GetFailedActionErrorMessageFromPowerAutomateResultJSON"
      }
    },
    "/Environment/GetPixelColourAtCoordinate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get pixel colour at coordinate",
        "description": "Returns the RGB colour of a pixel at a given coordinate.",
        "parameters": [
          {
            "in": "body",
            "name": "GetPixelColourAtCoordinate",
            "description": "Inputs for IA-Connect GetPixelColourAtCoordinate action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "LeftXPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Left X pixels",
                  "description": "The X position of the pixel to read. On a single display, the left-most X pixel is 0. On a multi-monitor display, the left-most X pixel could be negative (depending on which display is marked as primary, and where it is relative to the other displays)."
                },
                "TopYPixels": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Top Y pixels",
                  "description": "The Y position of the pixel to read. On a single display, the top-most Y pixel is 0. On a multi-monitor display, the top-most Y pixel could be negative (depending on which display is marked as primary, and where it is relative to the other displays)."
                },
                "HideAgent": {
                  "type": "boolean",
                  "default": false,
                  "title": "Hide Agent",
                  "description": "Set to true to automatically hide the Agent (if visible) to ensure it doesn't obscure the pixel being read.",
                  "x-ms-visibility": "advanced"
                },
                "UsePhysicalCoordinates": {
                  "type": "boolean",
                  "default": false,
                  "title": "Use physical coordinates",
                  "description": "Set to true to specify that the provided coordinates are physical (not DPI scaled and hence matching the physical pixels on the display). Set to false (the default) to specify that the provided coordinates are virtual (DPI scaled). UIA, Java and Web actions typically use virtual coordinates.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "LeftXPixels",
                "TopYPixels",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "RedValue": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Red value",
                  "description": "Returns the red value of the pixel from 0 (no red) to 255 (full red)."
                },
                "GreenValue": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Green value",
                  "description": "Returns the green value of the pixel from 0 (no green) to 255 (full green)."
                },
                "BlueValue": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Blue value",
                  "description": "Returns the blue value of the pixel from 0 (no blue) to 255 (full blue)."
                },
                "AlphaValue": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Alpha value",
                  "description": "Returns the alpha value of the pixel from 0 (completely transparent) to 255 (fully opaque)."
                },
                "RRGGBBHexValue": {
                  "type": "string",
                  "title": "RRGGBB hex value",
                  "description": "Returns the RRGGBB hex value of the pixel. For example: FF0000 is full red, 00FF00 is full green, 0000FF is blue, 000000 is black, FFFFFF is full white."
                },
                "AARRGGBBHexValue": {
                  "type": "string",
                  "title": "AARRGGBB hex value",
                  "description": "Returns the AARRGGBB hex value of the pixel which is the same as RRGGBB, but with the hex alpha value included at the start. For fully opaque pixels (the most common), this will hold the value FFRRGGBB. For example: FFFF0000 is fully opaque full red."
                }
              }
            }
          }
        },
        "operationId": "GetPixelColourAtCoordinate"
      }
    },
    "/Environment/ConvertRectangleCoordinates": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Convert rectangle coordinates",
        "description": "Converts a rectangle pixel coordinate from virtual to physical or physical to virtual. If you wish to convert a point, simply set Right=Left and Bottom=Top. Physical coordinates map directly to pixels on the monitor. Virtual coordinates are DPI scaled. If the underlying display scaling of all display devices is 100%, both physical and virtual coordinates are the same.",
        "parameters": [
          {
            "in": "body",
            "name": "ConvertRectangleCoordinates",
            "description": "Inputs for IA-Connect ConvertRectangleCoordinates action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "RectangleLeftPixelXCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Rectangle left edge screen pixel X-coordinate",
                  "description": "The left pixel edge of the rectangle to convert. Can be in virtual or physical pixels depending on the conversion type."
                },
                "RectangleTopPixelYCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Rectangle top edge screen pixel Y-coordinate",
                  "description": "The top pixel edge of the rectangle to convert. Can be in virtual or physical pixels depending on the conversion type."
                },
                "RectangleRightPixelXCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Rectangle right edge screen pixel X-coordinate",
                  "description": "The right pixel edge of the rectangle to convert. Can be in virtual or physical pixels depending on the conversion type."
                },
                "RectangleBottomPixelYCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Rectangle bottom edge screen pixel Y-coordinate",
                  "description": "The bottom pixel edge of the rectangle to convert. Can be in virtual or physical pixels depending on the conversion type."
                },
                "ConversionType": {
                  "type": "string",
                  "title": "Conversion type",
                  "description": "The type of conversion: From physical to virtual (PhysicalToVirtual or P2V) or virtual to physical (VirtualToPhysical or V2P).",
                  "enum": [
                    "P2V",
                    "V2P"
                  ],
                  "x-ms-enum-values": [
                    {
                      "value": "P2V",
                      "displayName": "Physical to virtual"
                    },
                    {
                      "value": "V2P",
                      "displayName": "Virtual to physical"
                    }
                  ]
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "RectangleLeftPixelXCoord",
                "RectangleTopPixelYCoord",
                "RectangleRightPixelXCoord",
                "RectangleBottomPixelYCoord",
                "ConversionType",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ConvertedRectangleLeftPixelXCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Converted rectangle left edge screen pixel X-coordinate",
                  "description": "The left pixel edge of the converted rectangle. Can be in virtual or physical pixels depending on the conversion type."
                },
                "ConvertedRectangleTopPixelYCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Converted rectangle top edge screen pixel Y-coordinate",
                  "description": "The top pixel edge of the converted rectangle. Can be in virtual or physical pixels depending on the conversion type."
                },
                "ConvertedRectangleRightPixelXCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Converted rectangle right edge screen pixel X-coordinate",
                  "description": "The right pixel edge of the converted rectangle. Can be in virtual or physical pixels depending on the conversion type."
                },
                "ConvertedRectangleBottomPixelYCoord": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Converted rectangle bottom edge screen pixel Y-coordinate",
                  "description": "The bottom pixel edge of the converted rectangle. Can be in virtual or physical pixels depending on the conversion type."
                },
                "ConvertedRectangleWidth": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Converted rectangle width",
                  "description": "The width in pixels of the converted rectangle. Can be in virtual or physical pixels depending on the conversion type."
                },
                "ConvertedRectangleHeight": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Converted rectangle height",
                  "description": "The height in pixels of the converted rectangle. Can be in virtual or physical pixels depending on the conversion type."
                }
              }
            }
          }
        },
        "operationId": "ConvertRectangleCoordinates"
      }
    },
    "/Environment/TasksAddNewTask": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add new Orchestrator automation task",
        "description": "Add a new Orchestrator automation task into a queue that can be monitored from a Flow. Tasks can either be ready to run immediately or be deferred to run at a later time.",
        "parameters": [
          {
            "in": "body",
            "name": "TasksAddNewTask",
            "description": "Inputs for IA-Connect TasksAddNewTask action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SetAutomationName": {
                  "type": "string",
                  "default": "Auto",
                  "title": "Set automation name",
                  "description": "Select 'Auto' if you want to use the flow name as the task name or select 'Manual' and enter a name in 'Automation name' field to use that name.",
                  "enum": [
                    "Auto",
                    "Manual"
                  ],
                  "x-ms-enum-values": [
                    {
                      "value": "Auto",
                      "displayName": "Auto: Use name of the flow"
                    },
                    {
                      "value": "Manual",
                      "displayName": "Manual: Set your own automation task name"
                    }
                  ]
                },
                "AutomationName": {
                  "type": "string",
                  "title": "Automation name",
                  "description": "This will only be used if 'Manual' is chosen in the 'Set automation name' field. A friendly name given to help identify the task later or to associate it with a particular flow. Multiple tasks can use the same automation name."
                },
                "TaskInputData": {
                  "type": "string",
                  "title": "Task input data",
                  "description": "Optional data to make available to the task when it starts. You are free to store data in any format, but JSON is a commonly used format."
                },
                "ProcessStage": {
                  "type": "string",
                  "title": "Process stage",
                  "description": "The point at where the automation process / flow should start. This is an optional string value which will be unique to the specific process / flow. This will be used by a condition within the process / flow to decide what step to perform next. For example: If you want the process / flow to start at the 'Exchange' stage, enter the value 'Exchange'."
                },
                "Priority": {
                  "type": "integer",
                  "format": "int32",
                  "default": 3,
                  "title": "Priority",
                  "description": "Set the priority level of this automation task (1 being highest level)."
                },
                "SLA": {
                  "type": "integer",
                  "format": "int32",
                  "title": "SLA in minutes",
                  "description": "Set the amount of minutes required for your SLA. Set this to 0 if you don't have an SLA. By default automation tasks close to the end of the SLA will take priority over other tasks."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "TaskId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Task Id",
                  "description": "The Id of the Orchestrator automation task that was created."
                }
              }
            }
          }
        },
        "operationId": "TasksAddNewTask"
      }
    },
    "/Environment/TasksAddNewDeferral": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add new Orchestrator deferred task",
        "description": "Add a new Orchestrator deferred task into a queue that can be monitored from a Flow. The task will be deferred to a specified time in the future. Use this action to temporarily suspend a task for a specified amount of time (for example if you are waiting for something).",
        "parameters": [
          {
            "in": "body",
            "name": "TasksAddNewDeferral",
            "description": "Inputs for IA-Connect TasksAddNewDeferral action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SetAutomationName": {
                  "type": "string",
                  "default": "Auto",
                  "title": "Set automation name",
                  "description": "Select 'Auto' if you want to use the flow name as the task name or select 'Manual' and enter a name in 'Automation name' field to use that name.",
                  "enum": [
                    "Auto",
                    "Manual"
                  ],
                  "x-ms-enum-values": [
                    {
                      "value": "Auto",
                      "displayName": "Auto: Use name of the flow"
                    },
                    {
                      "value": "Manual",
                      "displayName": "Manual: Set your own automation task name"
                    }
                  ]
                },
                "AutomationName": {
                  "type": "string",
                  "title": "Automation name",
                  "description": "This will only be used if 'Manual' is chosen in the 'Set automation name' field. A friendly name given to help identify the task later or to associate it with a particular flow. Multiple tasks can use the same automation name."
                },
                "DeferralTimeInMinutes": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Deferral time in minutes",
                  "description": "How many minutes should the automation task be delayed for."
                },
                "DeferralStoredData": {
                  "type": "string",
                  "title": "Deferral stored data",
                  "description": "Optional data to store with this task. It will become available to the process / flow when it continues from a deferral. This is generally used to store data you have calculated during your process / flow that you need to become available again after deferral. You are free to store data in any format, but JSON is a commonly used format."
                },
                "ProcessStage": {
                  "type": "string",
                  "title": "Process stage",
                  "description": "The point at where the automation process / flow should continue after deferral. This is an optional string value which will be unique to the specific process / flow. This will be used by a condition within the deferred process / flow to decide what step to perform next. For example: If you want the process / flow to continue at the 'Exchange' stage when it continues after deferral, enter the value 'Exchange'."
                },
                "Priority": {
                  "type": "integer",
                  "format": "int32",
                  "default": 3,
                  "title": "Priority",
                  "description": "Set the priority level of this task (1 being highest level)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "TaskId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Task Id",
                  "description": "The Id of the deferral task that was created."
                }
              }
            }
          }
        },
        "operationId": "TasksAddNewDeferral"
      }
    },
    "/Environment/TasksDeferExistingTask": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Defer existing Orchestrator automation task",
        "description": "Defer an existing Orchestrator task which is already in the queue. The task will be deferred to a specified time in the future. This is commonly used to re-defer an existing task (i.e. the task was previously deferred and now needs to be deferred again). Use this action to temporarily suspend a task for a specified amount of time (for example if you are waiting for something).",
        "parameters": [
          {
            "in": "body",
            "name": "TasksDeferExistingTask",
            "description": "Inputs for IA-Connect TasksDeferExistingTask action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "TaskId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Task Id",
                  "description": "The Id of the existing Orchestrator automation task to defer (or defer again)."
                },
                "DeferralTimeInMinutes": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Deferral time in minutes",
                  "description": "How many minutes should the automation task be delayed for."
                },
                "DeferralStoredData": {
                  "type": "string",
                  "title": "Deferral stored data",
                  "description": "Optional data to store with this task. It will become available to the process / flow when it continues from a deferral. This is generally used to store data you have calculated during your process / flow that you need to become available again after deferral. You are free to store data in any format, but JSON is a commonly used format."
                },
                "ProcessStage": {
                  "type": "string",
                  "title": "Process stage",
                  "description": "The point at where the automation process / flow should continue after deferral. This is an optional string value which will be unique to the specific process / flow. This will be used by a condition within the deferred process / flow to decide what step to perform next. For example: If you want the process / flow to continue at the 'Exchange' stage when it continues after deferral, enter the value 'Exchange'."
                },
                "Priority": {
                  "type": "integer",
                  "format": "int32",
                  "default": 3,
                  "title": "Priority",
                  "description": "Set the priority level of this task (1 being highest level)."
                }
              },
              "required": [
                "TaskId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "TasksDeferExistingTaskResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "TasksDeferExistingTask"
      }
    },
    "/Environment/TasksDeleteTask": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete Orchestrator automation task",
        "description": "Delete an Orchestrator automation task that has been deferred.",
        "parameters": [
          {
            "in": "body",
            "name": "TasksDeleteTask",
            "description": "Inputs for IA-Connect TasksDeleteTask action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "TaskId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Task Id",
                  "description": "The Id of the Orchestrator automation task to delete."
                }
              },
              "required": [
                "TaskId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "TasksDeleteTaskResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "TasksDeleteTask"
      }
    },
    "/Environment/TasksGetAllTasks": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get all Orchestrator automation tasks",
        "description": "Retrieves all the Orchestrator automation tasks that match the filters.",
        "parameters": [
          {
            "in": "body",
            "name": "TasksGetAllTasks",
            "description": "Inputs for IA-Connect TasksGetAllTasks action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "AutomationName": {
                  "type": "string",
                  "title": "Automation name filter",
                  "description": "Leave blank to return Orchestrator automation tasks with any name. Enter a value to only retrieve tasks with this automation name."
                },
                "AutomationTaskStatus": {
                  "type": "string",
                  "title": "Automation task status filter",
                  "description": "Filter the automation by the specified automation task status. Leave the field blank to return all automation task statuses.",
                  "enum": [
                    "Deferred",
                    "New",
                    "Retrieved",
                    "Failed",
                    "Completed"
                  ]
                },
                "MinutesUntilDeferralDate": {
                  "type": "integer",
                  "format": "int32",
                  "x-nullable": true,
                  "title": "Minutes until deferral date",
                  "description": "Only return Orchestrator automation tasks that are ready to run within the specified number of minutes. Set to 0 if you only want automation tasks that are ready to run now. Leave blank if you want to retrieve tasks regardless of deferral."
                },
                "MinimumPriorityLevel": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Minimum priority level",
                  "description": "Only return Orchestrator automation tasks that have the specified priority level or higher. For example: Setting 2 will return tasks with a priority level of 1 and 2."
                },
                "SortByDeferralDate": {
                  "type": "boolean",
                  "default": false,
                  "title": "Sort by deferral date",
                  "description": "Set to true to return the data sorted by the deferral date and time. Set to false to have the data returned in the order is it stored."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "AutomationTasks": {
                  "type": "array",
                  "title": "Automation Tasks",
                  "description": "A table containing all the Orchestrator automation tasks that meet the given search criteria.",
                  "items": {
                    "type": "object"
                  }
                },
                "NumberOfAutomationTasks": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of automation tasks",
                  "description": "The number of automation tasks returned."
                }
              }
            }
          }
        },
        "operationId": "TasksGetAllTasks"
      }
    },
    "/Environment/TasksGetTask": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Orchestrator automation task",
        "description": "Retrieves a specific Orchestrator automation task.",
        "parameters": [
          {
            "in": "body",
            "name": "TasksGetTask",
            "description": "Inputs for IA-Connect TasksGetTask action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "TaskId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Task Id",
                  "description": "The Id of the Orchestrator task you want to retrieve."
                },
                "StatusChange": {
                  "type": "string",
                  "default": "Retrieved",
                  "title": "Change status to",
                  "description": "If set to 'Retrieved': When retrieving a task the task status will change to 'Retrieved' to prevent other actions from trying to run the same task. If set to 'Do nothing' the task status will not be changed.",
                  "enum": [
                    "Retrieved",
                    "Do nothing"
                  ],
                  "x-ms-visibility": "advanced"
                }
              },
              "required": [
                "TaskId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "AutomationName": {
                  "type": "string",
                  "title": "Automation name",
                  "description": "The name of the retrieved Orchestrator task."
                },
                "DeferralDateTime": {
                  "type": "string",
                  "title": "Deferral date and time",
                  "description": "The date and time when the retrieved Orchestrator task is scheduled to be ready. This will be returned as a string in UTC."
                },
                "DeferralStoredData": {
                  "type": "string",
                  "title": "Deferral stored data",
                  "description": "Optional data that was stored when the task was deferred. This is usually data that you need to continue the process / flow."
                },
                "DeferralCount": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Deferral count",
                  "description": "How often this task was deferred. This will typically be 0 for a new task which was never deferred or 1 or more for a deferred task. Each time a deferred task was deferred again, the Orchestrator will automatically increase this number."
                },
                "TaskInputData": {
                  "type": "string",
                  "title": "Task input data",
                  "description": "Optional data that was stored when the task was created. This is usually data that was used to start the process / flow, but you can use this field for any purpose."
                },
                "Priority": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Priority",
                  "description": "The priority level of this Orchestrator task (1 being highest level)."
                },
                "AutomationTaskStatus": {
                  "type": "string",
                  "title": "Automation task status",
                  "description": "The status of the retrieved Orchestrator task."
                },
                "ProcessStage": {
                  "type": "string",
                  "title": "Process stage",
                  "description": "The point at where the automation process / flow should continue after deferral. This is an optional string value which will be unique to the specific process / flow. This will be used by a condition within the deferred process / flow to decide what step to perform next. For example: If you want the process / flow to continue at the 'Exchange' stage when it continues after deferral, enter the value 'Exchange'."
                },
                "ReceivedDateTime": {
                  "type": "string",
                  "title": "Received date and time",
                  "description": "The date and time the task was initially received by the Orchestrator. This will be returned as a string in UTC."
                },
                "MinutesUntilDeferralDate": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Minutes until deferral date",
                  "description": "The number of minutes until this task's deferral date (ie. when this task is ready to run). If this task is ready to run the minutes will be 0."
                },
                "OnHold": {
                  "type": "boolean",
                  "title": "On hold",
                  "description": "Is set to true if the task is on hold. An old hold task will never be retrieved by the 'Get next Orchestrator automation task' action and hence will never be processed in a normal workflow."
                }
              }
            }
          }
        },
        "operationId": "TasksGetTask"
      }
    },
    "/Environment/TasksGetNextTask": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get next Orchestrator automation task",
        "description": "Retrieves the next Orchestrator automation task matching the given search criteria.",
        "parameters": [
          {
            "in": "body",
            "name": "TasksGetNextTask",
            "description": "Inputs for IA-Connect TasksGetNextTask action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "AutomationName": {
                  "type": "string",
                  "title": "Automation name",
                  "description": "Leave blank to return Orchestrator automation tasks with any name. Enter a value to only retrieve tasks with this automation name."
                },
                "MinimumPriorityLevel": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Minimum priority level",
                  "description": "Only return Orchestrator automation tasks that have the specified priority level or higher. For example: Setting 2 will return tasks with a priority level of 1 and 2."
                },
                "StatusChange": {
                  "type": "string",
                  "default": "Retrieved",
                  "title": "Change status to",
                  "description": "If set to 'Retrieved': When retrieving a task the task status will change to 'Retrieved' to prevent other actions from trying to run the same task. If set to 'Do nothing' the task status will not be changed.",
                  "enum": [
                    "Retrieved",
                    "Do nothing"
                  ],
                  "x-ms-visibility": "advanced"
                },
                "MinutesUntilDeferralDate": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Minutes until deferral date",
                  "description": "Only return Orchestrator automation tasks that are ready to run within the specified number of minutes. Set to 0 if you only want automation tasks that are ready to run now.",
                  "x-ms-visibility": "advanced"
                },
                "IgnoreSLA": {
                  "type": "boolean",
                  "default": false,
                  "title": "Ignore SLA",
                  "description": "Set this to true to ignore any SLAs that have been set on the task. By default a task with an SLA that will soon breach takes priority over everything else.",
                  "x-ms-visibility": "advanced"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "TaskRetrieved": {
                  "type": "boolean",
                  "title": "Task retrieved",
                  "description": "Set to true if a task was retrieved. Set to false if there were no tasks matching the search criteria."
                },
                "TaskId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Task Id",
                  "description": "The id of the retrieved Orchestrator automation task."
                },
                "AutomationNameOutput": {
                  "type": "string",
                  "title": "Automation name",
                  "description": "The name of the retrieved automation task."
                },
                "DeferralDateTime": {
                  "type": "string",
                  "title": "Deferral date and time",
                  "description": "The date and time when the retrieved Orchestrator task is scheduled to be ready. This will be returned as a string in UTC."
                },
                "DeferralStoredData": {
                  "type": "string",
                  "title": "Deferral stored data",
                  "description": "Optional data that was stored when the task was deferred. This is usually data that you need to continue the process / flow, but you can use this field for any purpose."
                },
                "DeferralCount": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Deferral count",
                  "description": "How often this task was deferred. This will typically be 0 for a new task which was never deferred or 1 or more for a deferred task. Each time a deferred task was deferred again, the Orchestrator will automatically increase this number."
                },
                "TaskInputData": {
                  "type": "string",
                  "title": "Task input data",
                  "description": "Optional data that was stored when the task was created. This is usually data that was used to start the process / flow, but you can use this field for any purpose."
                },
                "Priority": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Priority",
                  "description": "The priority level of this Orchestrator task (1 being highest level)."
                },
                "AutomationTaskStatus": {
                  "type": "string",
                  "title": "Automation task status",
                  "description": "The status of the retrieved Orchestrator task."
                },
                "ProcessStage": {
                  "type": "string",
                  "title": "Process stage",
                  "description": "The point at which the deferred process / flow should continue after deferral. This is an optional string value which will be unique to the specific process / flow. This will be used by a condition within the deferred process / flow to decide what step to perform next."
                },
                "ReceivedDateTime": {
                  "type": "string",
                  "title": "Received date and time",
                  "description": "The date and time the task was initially received by the Orchestrator. This will be returned as a string in UTC."
                },
                "MinutesUntilDeferralDateOutput": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Minutes until deferral date",
                  "description": "The number of minutes until this task's deferral date (ie. when this task is ready to run). If this task is ready to run the minutes will be 0."
                }
              }
            }
          }
        },
        "operationId": "TasksGetNextTask"
      }
    },
    "/Environment/TasksChangeTaskStatus": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Change Orchestrator automation task status",
        "description": "Changes the selected Orchestrator automation task status to completed, failed or new.",
        "parameters": [
          {
            "in": "body",
            "name": "TasksChangeTaskStatus",
            "description": "Inputs for IA-Connect TasksChangeTaskStatus action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "TaskId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Task Id",
                  "description": "The Id of the Orchestrator task to be modified."
                },
                "AutomationTaskStatus": {
                  "type": "string",
                  "title": "Automation task new status",
                  "description": "The new task status for the specified automation task.",
                  "enum": [
                    "Completed",
                    "Failed",
                    "New",
                    "Retrieved"
                  ]
                },
                "TaskOnHold": {
                  "type": "boolean",
                  "default": false,
                  "title": "Put task on hold",
                  "description": "If changing the status to new and you set this value to true, the task will be put on hold."
                },
                "EraseTaskInputData": {
                  "type": "boolean",
                  "default": true,
                  "title": "Erase task input data",
                  "description": "If you set this value to true, any task input data will be erased. This is typically used to save storage space for a completed or failed task since the raw data is no longer required.",
                  "x-ms-visibility": "advanced"
                },
                "EraseDeferralStoredData": {
                  "type": "boolean",
                  "default": true,
                  "title": "Erase deferral stored data",
                  "description": "If you set this value to true, any deferral stored data will be erased. This is typically used to save storage space for a completed or failed task since the raw data is no longer required.",
                  "x-ms-visibility": "advanced"
                }
              },
              "required": [
                "TaskId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "TasksChangeTaskStatusResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "TasksChangeTaskStatus"
      }
    },
    "/DriverControl/SetRemoteLoggingLevel": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set IA-Connect Agent log level",
        "description": "Sets the IA-Connect Agent logging level to the specified value (1 being the lowest level and 4 being the highest).",
        "parameters": [
          {
            "in": "body",
            "name": "SetRemoteLoggingLevel",
            "description": "Inputs for IA-Connect SetRemoteLoggingLevel action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "LoggingLevel": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Log level",
                  "description": "The logging level that the IA-Connect Agent should be set to."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "LoggingLevel",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetRemoteLoggingLevel"
      }
    },
    "/DriverControl/GetRemoteLoggingLevel": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get IA-Connect Agent log level",
        "description": "Returns the current IA-Connect Agent logging level. The logging levels are set from 1 to 4, with 1 being the lowest level and 4 being the highest.",
        "parameters": [
          {
            "in": "body",
            "name": "GetRemoteLoggingLevel",
            "description": "Inputs for IA-Connect GetRemoteLoggingLevel action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "LoggingLevel": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Log level",
                  "description": "The current logging level of the IA-Connect Agent."
                }
              }
            }
          }
        },
        "operationId": "GetRemoteLoggingLevel"
      }
    },
    "/DriverControl/SetLicenseCode": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set IA-Connect license code",
        "description": "Uploads an old-style (7.0 and 7.1) Agent domain license to the IA-Connect Agent.",
        "parameters": [
          {
            "in": "body",
            "name": "SetLicenseCode",
            "description": "Inputs for IA-Connect SetLicenseCode action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "CustomerNETBIOSDomainName": {
                  "type": "string",
                  "title": "Customer NetBIOS domain name",
                  "description": "The NetBIOS domain name of the machine where the IA-Connect Agent is running."
                },
                "CustomerDisplayName": {
                  "type": "string",
                  "title": "Customer display name",
                  "description": "The customer name to be displayed in the title bar of the IA-Connect Agent."
                },
                "VendorName": {
                  "type": "string",
                  "title": "Vendor name",
                  "description": "The IA-Connect vendor name."
                },
                "LicenseExpiryDate": {
                  "type": "string",
                  "title": "License expiry date",
                  "description": "The expiry date of the IA-Connect license."
                },
                "ActivationCode": {
                  "type": "string",
                  "title": "Activation code",
                  "description": "The activation code for the IA-Connect license."
                },
                "StoreInRegistry": {
                  "type": "boolean",
                  "default": true,
                  "title": "Store in registry",
                  "description": "Should the IA-Connect license be temporarily stored in the registry? This ensures that the IA-Connect Agent will be licensed for the duration of the user session, even if the Agent is closed and re-launched."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "CustomerNETBIOSDomainName",
                "CustomerDisplayName",
                "VendorName",
                "LicenseExpiryDate",
                "ActivationCode",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetLicenseCode"
      }
    },
    "/DriverControl/SetLicenseString": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set IA-Connect license key",
        "description": "Licenses the IA-Connect Agent with a license key. This can be a license string or the friendly name of a license held in the IA-Connect Orchestrator.",
        "parameters": [
          {
            "in": "body",
            "name": "SetLicenseString",
            "description": "Inputs for IA-Connect SetLicenseString action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "LicenseString": {
                  "type": "string",
                  "title": "License key",
                  "description": "The IA-Connect license key string or the friendly name of a license held in the IA-Connect Orchestrator (if controlling IA-Connect via the IA-Connect Orchestrator)."
                },
                "StoreInRegistry": {
                  "type": "boolean",
                  "default": true,
                  "title": "Store in registry",
                  "description": "Should the IA-Connect license be temporarily stored in the registry? This ensures that the IA-Connect Agent will be licensed for the duration of the user session, even if the Agent is closed and re-launched."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "LicenseString",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "DaysUntilLicenseExpires": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Days until license expires",
                  "description": "The number of remaining days until the IA-Connect license expires."
                }
              }
            }
          }
        },
        "operationId": "SetLicenseString"
      }
    },
    "/DriverControl/GetLicenseState": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get IA-Connect Agent current license state",
        "description": "Returns whether the IA-Connect Agent is currently licensed and if licensed, the properties of the license.",
        "parameters": [
          {
            "in": "body",
            "name": "GetLicenseState",
            "description": "Inputs for IA-Connect GetLicenseState action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "IsLicensed": {
                  "type": "boolean",
                  "title": "Is licensed",
                  "description": "Returns true if the IA-Connect Agent is currently licensed, or false if not."
                },
                "LicenseType": {
                  "type": "string",
                  "title": "License type",
                  "description": "The type of IA-Connect license being used."
                },
                "CustomerNETBIOSDomainName": {
                  "type": "string",
                  "title": "Agent domain name",
                  "description": "The NetBIOS domain name of the machine where the IA-Connect Agent is running, if licensed by domain name (IA-Connect 7.0 or 7.1)."
                },
                "DirectorHostnameCSV": {
                  "type": "string",
                  "title": "Director hostnames",
                  "description": "The hostname(s) of the machines where the IA-Connect Director can be installed, if licensed by hostname (post IA-Connect 7.2)."
                },
                "CustomerDisplayName": {
                  "type": "string",
                  "title": "Customer display name",
                  "description": "The customer name to be displayed in the title bar of the IA-Connect Agent."
                },
                "VendorName": {
                  "type": "string",
                  "title": "Vendor name",
                  "description": "The IA-Connect vendor name."
                },
                "LicenseExpiryDate": {
                  "type": "string",
                  "title": "License expiry date",
                  "description": "The expiry date of the IA-Connect license."
                },
                "DaysUntilLicenseExpires": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Days until license expires",
                  "description": "The number of remaining days until the IA-Connect license expires."
                },
                "LicenseFeatures": {
                  "type": "string",
                  "title": "License features",
                  "description": "Additional license features, typically providing access to additional functionality."
                },
                "IsJMLLicense": {
                  "type": "boolean",
                  "title": "Is JML license",
                  "description": "Does this license provide access to JML functionality."
                }
              }
            }
          }
        },
        "operationId": "GetLicenseState"
      }
    },
    "/DriverControl/SetRSAGUITopmost": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set IA-Connect Agent GUI topmost",
        "description": "Sets the IA-Connect Agent as topmost. This means that the IA-Connect Agent will always be visible on screen and cannot be hidden behind other application windows.",
        "parameters": [
          {
            "in": "body",
            "name": "SetRSAGUITopmost",
            "description": "Inputs for IA-Connect SetRSAGUITopmost action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "TopMost": {
                  "type": "boolean",
                  "default": true,
                  "title": "Topmost",
                  "description": "Should the IA-Connect Agent be set topmost (true) or should topmost be disabled (false)?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetRSAGUITopmost"
      }
    },
    "/DriverControl/SetRSAGUIOpacity": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set IA-Connect Agent GUI opacity",
        "description": "Sets the opacity of the IA-Connect Agent from 1 (visible) to 0 (transparent).",
        "parameters": [
          {
            "in": "body",
            "name": "SetRSAGUIOpacity",
            "description": "Inputs for IA-Connect SetRSAGUIOpacity action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Opacity": {
                  "type": "number",
                  "format": "double",
                  "default": 1,
                  "title": "Opacity",
                  "description": "The opacity value to be set, between 1 (visible) and 0 (transparent)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Opacity",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetRSAGUIOpacity"
      }
    },
    "/DriverControl/SetRSAGUIPosition": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set IA-Connect Agent GUI position",
        "description": "Sets the onscreen position of the IA-Connect Agent GUI to the specified location.",
        "parameters": [
          {
            "in": "body",
            "name": "SetRSAGUIPosition",
            "description": "Inputs for IA-Connect SetRSAGUIPosition action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "X": {
                  "type": "integer",
                  "format": "int32",
                  "title": "X",
                  "description": "The X coordinate to set the Agent to, in pixels."
                },
                "Y": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Y",
                  "description": "The Y coordinate to set the Agent to, in pixels."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "X",
                "Y",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetRSAGUIPosition"
      }
    },
    "/DriverControl/BringRSAGUIToFront": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Bring IA-Connect Agent GUI to front",
        "description": "Brings the IA-Connect Agent GUI to the front so it is visible onscreen.",
        "parameters": [
          {
            "in": "body",
            "name": "BringRSAGUIToFront",
            "description": "Inputs for IA-Connect BringRSAGUIToFront action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Focus": {
                  "type": "boolean",
                  "default": true,
                  "title": "Focus",
                  "description": "Should the IA-Connect Agent GUI be focussed?"
                },
                "GlobalLeftMouseClick": {
                  "type": "boolean",
                  "default": true,
                  "title": "Global left mouse click",
                  "description": "Should a global left mouse click be used to bring the Agent to the front? This guarantees a bring to the front event in a scenario where the focus method could be restricted by the operating system preventing applications from bringing themselves to the front."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BringRSAGUIToFront"
      }
    },
    "/DriverControl/DisconnectSession": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Disconnect remote session",
        "description": "If the IA-Connect Agent is running in a remote session, this action disconnects the remote session. This is not the same as logging off and will leave the remote session running in a disconnected state. This action can be used where you wish to connect back to the remote session later and continue from the same state, rather than starting a new session. If the IA-Connect Agent is running locally, this action will lock the session.",
        "parameters": [
          {
            "in": "body",
            "name": "DisconnectSession",
            "description": "Inputs for IA-Connect DisconnectSession action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SecondsToWait": {
                  "type": "integer",
                  "format": "int32",
                  "default": 3,
                  "title": "Seconds to wait",
                  "description": "The time to wait before issuing the disconnect command to the operating system so that the IA-Connect Agent can report completion of the command before losing contact (which would only occur in a remote session)."
                },
                "DoNotDisconnectIfLocalAgent": {
                  "type": "boolean",
                  "default": false,
                  "title": "Do not disconnect if local Agent",
                  "description": "If set to true and the IA-Connect Agent is running in a local session (i.e. directly on the worker) then this action will be silently ignored. This is useful because disconnecting a local Agent would lock the session and hence limit RPA functions until the session is unlocked."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "DisconnectSession"
      }
    },
    "/DriverControl/LogoffSession": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Logoff remote session",
        "description": "Logs off the remote session where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "LogoffSession",
            "description": "Inputs for IA-Connect LogoffSession action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SecondsToWait": {
                  "type": "integer",
                  "format": "int32",
                  "default": 3,
                  "title": "Seconds to wait",
                  "description": "The time to wait after issuing the log off command to the operating system so that the IA-Connect Agent can report completion of the command."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "LogoffSession"
      }
    },
    "/DriverControl/CloseRSAServer": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Close IA-Connect Agent",
        "description": "Closes the IA-Connect Agent. This does not affect the user session where the IA-Connect Agent was running.",
        "parameters": [
          {
            "in": "body",
            "name": "CloseRSAServer",
            "description": "Inputs for IA-Connect CloseRSAServer action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SecondsToWait": {
                  "type": "integer",
                  "format": "int32",
                  "default": 3,
                  "title": "Seconds to wait",
                  "description": "The time to wait before issuing the close command so that the IA-Connect Agent can report completion of the command."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "CloseRSAServer"
      }
    },
    "/DriverControl/SetRPACommandTimeout": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set IA-Connect Agent command timeout",
        "description": "Sets the command timeout that the IA-Connect Agent will use for each command that is executed.",
        "parameters": [
          {
            "in": "body",
            "name": "SetRPACommandTimeout",
            "description": "Inputs for IA-Connect SetRPACommandTimeout action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "CommandTimeoutInSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 25,
                  "title": "Command timeout in seconds",
                  "description": "The command timeout that the IA-Connect Agent will use. If reading or writing large amounts of data, you may wish to increase the timeout period."
                },
                "TerminateTimedoutRPACommandThreads": {
                  "type": "boolean",
                  "default": true,
                  "title": "Terminate timedout RPA command threads",
                  "description": "Should the command thread be terminated if it has timed out?",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "CommandTimeoutInSeconds",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetRPACommandTimeout"
      }
    },
    "/DriverControl/RunAlternativeIAConnect": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Run alternative IA-Connect Agent",
        "description": "Runs an alternative IA-Connect Agent (for example a later version) by loading the Agent executable from a file location.",
        "parameters": [
          {
            "in": "body",
            "name": "RunAlternativeIAConnect",
            "description": "Inputs for IA-Connect RunAlternativeIAConnect action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Filename": {
                  "type": "string",
                  "title": "Filename",
                  "description": "The full path to the alternative IA-Connect Agent.exe to be ran. This path must be accessible from the session where the IA-Connect Agent is currently running."
                },
                "Arguments": {
                  "type": "string",
                  "title": "Arguments",
                  "description": "Any optional arguments to pass to the IA-Connect Agent.exe when it runs.",
                  "x-ms-visibility": "advanced"
                },
                "LoadIntoMemory": {
                  "type": "boolean",
                  "default": true,
                  "title": "Load into memory",
                  "description": "Should the alternative IA-Connect Agent be ran in memory? If set to true, the new Agent is loaded into memory and executed within an Assembly of the existing Agent. If set to false, the new Agent is executed as a normal process and the existing Agent EXE will exit.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Filename",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "RunAlternativeIAConnect"
      }
    },
    "/DriverControl/RunAlternativeIAConnectSentFromDirector": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Run alternative IA-Connect Agent sent from director",
        "description": "Runs an alternative IA-Connect Agent (for example a later version) by uploading the alternative Agent from the IA-Connect Director and then loading the alternative Agent executable.",
        "parameters": [
          {
            "in": "body",
            "name": "RunAlternativeIAConnectSentFromDirector",
            "description": "Inputs for IA-Connect RunAlternativeIAConnectSentFromDirector action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "LocalFilename": {
                  "type": "string",
                  "title": "Local filename",
                  "description": "The full path to the alternative IA-Connect Agent.exe that is accessible from the IA-Connect director."
                },
                "RemoteFilename": {
                  "type": "string",
                  "title": "Remote filename",
                  "description": "The full path to the location to copy the alternative IA-Connect Agent.exe (on the remote system). If not specified, a temporary filename will be chosen. If the alternative IA-Connect Agent is being loaded into memory then this file won't be created (since it's not needed) unless you set 'Save to disk even if running from memory' to true. You would only set this to true if you wanted to use IA-Connect's Dynamic Code actions which required 'Reference executing assembly' (e.g. to access IA-Connect internal methods)."
                },
                "Compress": {
                  "type": "boolean",
                  "default": true,
                  "title": "Compress",
                  "description": "Should the alternative IA-Connect Agent executable be compressed during the upload?",
                  "x-ms-visibility": "advanced"
                },
                "Arguments": {
                  "type": "string",
                  "title": "Arguments",
                  "description": "Any optional arguments to pass to the IA-Connect Agent.exe when it runs."
                },
                "PermitDowngrade": {
                  "type": "boolean",
                  "default": false,
                  "title": "Permit downgrade",
                  "description": "Should earlier versions of IA-Connect Agent be allowed?",
                  "x-ms-visibility": "advanced"
                },
                "SkipVersionCheck": {
                  "type": "boolean",
                  "default": false,
                  "title": "Skip version check",
                  "description": "Should the version of the IA-Connect Agents (existing and new) not be checked at all, resulting in the new version being used in all scenarios (even same version)?",
                  "x-ms-visibility": "advanced"
                },
                "LoadIntoMemory": {
                  "type": "boolean",
                  "default": true,
                  "title": "Load into memory",
                  "description": "Should the alternative IA-Connect Agent be ran in memory? If set to true, the new Agent is loaded into memory and executed within an Assembly of the existing Agent. If set to false, the new Agent is executed as a normal process and the existing Agent EXE will exit.",
                  "x-ms-visibility": "advanced"
                },
                "SaveToDiskEvenIfRunningFromMemory": {
                  "type": "boolean",
                  "default": false,
                  "title": "Save to disk even if running from memory",
                  "description": "Should the alternative IA-Connect Agent be saved to disk even if it is being ran in memory? You would only set this to true if you wanted to use IA-Connect's Dynamic Code actions which required 'Reference executing assembly' (e.g. to access IA-Connect internal methods).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "LocalFilename",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "AlternativeFileCopied": {
                  "type": "boolean",
                  "title": "Alternative file copied",
                  "description": "Reports if the alternative IA-Connect Agent was used."
                }
              }
            }
          }
        },
        "operationId": "RunAlternativeIAConnectSentFromDirector"
      }
    },
    "/DriverControl/GetIAConnectAgentInfo": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get IA-Connect Agent info",
        "description": "Returns the properties of the IA-Connect Agent, including the version number and the path to the Agent executable.",
        "parameters": [
          {
            "in": "body",
            "name": "GetIAConnectAgentInfo",
            "description": "Inputs for IA-Connect GetIAConnectAgentInfo action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "IAConnectAgentVersion": {
                  "type": "string",
                  "title": "IA-Connect Agent version",
                  "description": "The full version number of the IA-Connect Agent."
                },
                "DotNetCLRVersion": {
                  "type": "string",
                  "title": "DotNet CLR version",
                  "description": "The DotNet Common Language Runtime (CLR) version."
                },
                "IAConnectAgentRunAsUsername": {
                  "type": "string",
                  "title": "IA-Connect Agent run as username",
                  "description": "The username of the user session that the IA-Connect Agent is running in."
                },
                "IAConnectAgentRunAsUserdomain": {
                  "type": "string",
                  "title": "IA-Connect Agent run as userdomain",
                  "description": "The user domain of the user session that the IA-Connect Agent is running in."
                },
                "IAConnectAgentPath": {
                  "type": "string",
                  "title": "IA-Connect Agent path",
                  "description": "The full path to the IA-Connect Agent executable."
                },
                "IAConnectAgentIs64bitProcess": {
                  "type": "boolean",
                  "title": "IA-Connect Agent is 64bit process",
                  "description": "Returns true if the IA-Connect Agent is a 64bit process, or false if not."
                },
                "IAConnectAgentReleaseVersion": {
                  "type": "string",
                  "title": "IA-Connect Agent release version",
                  "description": "The IA-Connect Agent release version, for example 8.0."
                }
              }
            }
          }
        },
        "operationId": "GetIAConnectAgentInfo"
      }
    },
    "/DriverControl/GetIAConnectAgentLog": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get IA-Connect Agent log",
        "description": "Returns the current IA-Connect Agent log, either as a file or by reading the contents and returning it in an output variable.",
        "parameters": [
          {
            "in": "body",
            "name": "GetIAConnectAgentLog",
            "description": "Inputs for IA-Connect GetIAConnectAgentLog action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Compress": {
                  "type": "boolean",
                  "default": true,
                  "title": "Compress",
                  "description": "Should the alternative IA-Connect Agent executable be compressed during the upload?",
                  "x-ms-visibility": "advanced"
                },
                "ReturnLastCommandOnly": {
                  "type": "boolean",
                  "default": false,
                  "title": "Return last command logs only",
                  "description": "Should the IA-Connect Agent log be restricted to the result of the last command rather than the entire log?",
                  "x-ms-visibility": "advanced"
                },
                "SaveLogToFile": {
                  "type": "boolean",
                  "default": true,
                  "title": "Save log to file",
                  "description": "Should the IA-Connect Agent log be saved as a file?"
                },
                "PlaceLogContentInDataItem": {
                  "type": "boolean",
                  "default": false,
                  "title": "Place log content in data item",
                  "description": "Should the contents of the log be returned in an output variable?"
                },
                "LocalSaveFolder": {
                  "type": "string",
                  "title": "Local save folder",
                  "description": "The filepath to the folder to save the IA-Connect Agent log into."
                },
                "UseAgentLogFilename": {
                  "type": "boolean",
                  "default": true,
                  "title": "Use Agent log filename",
                  "description": "Should the log file be given the same name as the name of the log file on the Agent? If set to false then you can set 'Local save filename' to specify the filename."
                },
                "LocalSaveFilename": {
                  "type": "string",
                  "title": "Local save filename",
                  "description": "The filename only of the local save file for the IA-Connect Agent log. This will only be used if 'Use Agent log filename' is set to false."
                },
                "MaxBytesToRead": {
                  "type": "integer",
                  "format": "int64",
                  "default": 4000,
                  "title": "Max bytes to read",
                  "description": "The maximum number of bytes to read from the Agent log (from the end backwards). This can be set to 0 or -1 to retrieve the entire log.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "IAConnectAgentLogContentsBase64": {
                  "type": "string",
                  "title": "Agent log contents",
                  "description": "The contents of the IA-Connect Agent log."
                },
                "IAConnectAgentLogFilenameOnly": {
                  "type": "string",
                  "title": "Local saved log filename",
                  "description": "The path to the saved log filename."
                }
              }
            }
          }
        },
        "operationId": "GetIAConnectAgentLog"
      }
    },
    "/DriverControl/ResetCommandStats": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Reset IA-Connect command statistics",
        "description": "Resets any currently stored statistics on which commands the IA-Connect Agent has executed in the current session.",
        "parameters": [
          {
            "in": "body",
            "name": "ResetCommandStats",
            "description": "Inputs for IA-Connect ResetCommandStats action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "ResetCommandStats"
      }
    },
    "/DriverControl/GetAllCommandStats": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get all IA-Connect command statistics",
        "description": "Returns all currently stored statistics on which commands the IA-Connect Agent has executed in the current session.",
        "parameters": [
          {
            "in": "body",
            "name": "GetAllCommandStats",
            "description": "Inputs for IA-Connect GetAllCommandStats action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "CommandStatsJSON": {
                  "type": "string",
                  "title": "Command statistics JSON",
                  "description": "The list of commands executed by the IA-Connect Agent in the current session, in JSON format. This list will contain the name of each action and the number of times that it was executed."
                }
              }
            }
          }
        },
        "operationId": "GetAllCommandStats"
      }
    },
    "/DriverControl/EnableNextHop": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Enable IA-Connect next hop",
        "description": "Enables the next hop which will forward all future commands received onto the IA-Connect Agent running in the next hop session.",
        "parameters": [
          {
            "in": "body",
            "name": "EnableNextHop",
            "description": "Inputs for IA-Connect EnableNextHop action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "NextHopDirectorAddress": {
                  "type": "string",
                  "title": "Next hop Director address",
                  "description": "The optional address for the Next hop IA-Connect Director to forward commands to if none of the 'Next hop Director address is localhost', 'Next hop Director address is hostname', 'Next hop Director address is FQDN' or 'Next hop Director address is named pipe' parameters are set to true.",
                  "x-ms-visibility": "advanced"
                },
                "NextHopDirectorTCPPort": {
                  "type": "integer",
                  "format": "int32",
                  "default": 8002,
                  "title": "Next hop Director TCP port",
                  "description": "The TCP port that the next hop Director is listening on (the Director on the computer that the Agent is running on).",
                  "x-ms-visibility": "advanced"
                },
                "NextHopDirectorUsesHTTPS": {
                  "type": "boolean",
                  "default": false,
                  "title": "Next hop Director uses HTTPS",
                  "description": "Set to True if the next hop Director is using HTTPS, or false if not."
                },
                "NextHopDirectorAddressIsLocalhostname": {
                  "type": "boolean",
                  "default": false,
                  "title": "Next hop Director address is localhost",
                  "description": "The next hop director address (relative to the Agent) is 'localhost'.",
                  "x-ms-visibility": "advanced"
                },
                "NextHopDirectorAddressIsHostname": {
                  "type": "boolean",
                  "default": false,
                  "title": "Next hop Director address is hostname",
                  "description": "The next hop director address is the hostname of the computer running the Agent (i.e. the one running the Agent and the Director).",
                  "x-ms-visibility": "advanced"
                },
                "NextHopDirectorAddressIsFQDN": {
                  "type": "boolean",
                  "default": false,
                  "title": "Next hop Director address is FQDN",
                  "description": "The next hop director address is the fully qualified domain name (FQDN) of the computer running the Agent (i.e. the one running the Agent and the Director).",
                  "x-ms-visibility": "advanced"
                },
                "IncrementNextHopDirectorTCPPortBySessionId": {
                  "type": "boolean",
                  "default": true,
                  "title": "Increment next hop Director TCP port by Session Id",
                  "description": "To ensure the next hop Director TCP port is unique (if there are multiple parallel sessions using next-hop from the same host), the Session Id can be added to the Next hop Director TCP port.",
                  "x-ms-visibility": "advanced"
                },
                "DisableBeforeEnable": {
                  "type": "boolean",
                  "default": true,
                  "title": "Disable before enabling",
                  "description": "Should double-hop be disabled (if currently active) before enabling again? If set to true (the default), any new double-hop enablement instructions will replace the previous ones. If set to false, this will enable triple-hop since the instructions will be received by the double-hop IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "CheckNextHopDirectorIsRunning": {
                  "type": "boolean",
                  "default": false,
                  "title": "Check next hop Director is running",
                  "description": "Next hop requires a running IA-Connect Director on the same computer as the Agent. If this setting is true, the Agent will check the next-hop Director is running as described and will fail to enable next hop if the next hop Director is not running. If this setting is false, the Agent will not perform any checks and simply enable next-hop.",
                  "x-ms-visibility": "advanced"
                },
                "CheckNextHopAgentIsRunning": {
                  "type": "boolean",
                  "default": false,
                  "title": "Check next hop Agent is running",
                  "description": "Next hop requires a running IA-Connect Director on the same computer as the Agent AND a running IA-Connect Agent in the next-hop session. If this setting is true, the Agent will check the next-hop Agent is running as described and will fail to enable next hop if the next hop Agent is not running. If this setting is false, the Agent will not perform any checks and simply enable next-hop.",
                  "x-ms-visibility": "advanced"
                },
                "NextHopDirectorAddressIsNamedPipe": {
                  "type": "boolean",
                  "default": true,
                  "title": "Next hop Director address is named pipe",
                  "description": "The next hop director address (relative to the Agent) is using a named pipe instead of a TCP/IP web service. This is the default to avoid using TCP/IP ports on the first-hop.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ActiveNextHopDirectorAddress": {
                  "type": "string",
                  "title": "Active next hop Director address",
                  "description": "The address of the active next hop Director, if one is being used."
                },
                "ActiveNextHopDirectorTCPPort": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "title": "Active next hop Director TCP port",
                  "description": "The TCP port of the active next hop Director, if one is being used."
                },
                "ActiveNextHopDirectorUsesHTTPS": {
                  "type": "boolean",
                  "title": "Active next hop Director uses HTTPS",
                  "description": "Returns true if the active next hop Director is using HTTPS."
                },
                "ActiveNextHopDirectorURL": {
                  "type": "string",
                  "title": "Active next hop Director URL",
                  "description": "The URL of the active next hop Director."
                }
              }
            }
          }
        },
        "operationId": "EnableNextHop"
      }
    },
    "/DriverControl/DisableNextHop": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Disable IA-Connect next hop",
        "description": "Disables next-hop so that all future commands will be processed by the Agent which receives them (as opposed to being forwarded on to the next hop Agent).",
        "parameters": [
          {
            "in": "body",
            "name": "DisableNextHop",
            "description": "Inputs for IA-Connect DisableNextHop action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "DisableNextHop"
      }
    },
    "/DriverControl/GetNextHopStatus": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get IA-Connect next hop status",
        "description": "Reports on the next hop Director status for the Agent which receives this command. If next-hop is enabled, that Agent is forwarding commands to the next hop (via the next-hop Director). If next-hop is disabled, that Agent is processing commands itself (the default).",
        "parameters": [
          {
            "in": "body",
            "name": "GetNextHopStatus",
            "description": "Inputs for IA-Connect GetNextHopStatus action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "CheckNextHopDirectorIsRunning": {
                  "type": "boolean",
                  "default": false,
                  "title": "Check next hop Director is running",
                  "description": "Next hop requires a running IA-Connect Director on the same computer as the Agent. If this setting is true, the Agent will check the next-hop Director is running as described. If this setting is false, the Agent will not perform any checks and will simply check the next-hop status."
                },
                "CheckNextHopAgentIsRunning": {
                  "type": "boolean",
                  "default": false,
                  "title": "Check next hop Agent is running",
                  "description": "Next hop requires a running IA-Connect Director on the same computer as the Agent AND a running IA-Connect Agent in the next-hop session. If this setting is true, the Agent will check the next-hop Agent is running as described. If this setting is false, the Agent will not perform any checks and will simply check the next-hop status."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NextHopEnabled": {
                  "type": "boolean",
                  "title": "Next hop enabled",
                  "description": "Returns true if next hop is currently enabled."
                },
                "ActiveNextHopDirectorAddress": {
                  "type": "string",
                  "title": "Active next hop Director address",
                  "description": "The address of the active next hop Director, if one is being used."
                },
                "ActiveNextHopDirectorTCPPort": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Active next hop Director TCP port",
                  "description": "The TCP port of the active next hop Director, if one is being used."
                },
                "ActiveNextHopDirectorUsesHTTPS": {
                  "type": "boolean",
                  "title": "Active next hop Director uses HTTPS",
                  "description": "Returns true if the active next hop Director is using HTTPS."
                },
                "ActiveNextHopDirectorIsRunning": {
                  "type": "boolean",
                  "title": "Active next hop Director is running",
                  "description": "Returns true if the active next hop Director is running, or false if not."
                },
                "ActiveNextHopDirectorURL": {
                  "type": "string",
                  "title": "Active next hop Director URL",
                  "description": "The URL of the active next hop Director."
                },
                "ActiveNextHopAgentIsRunning": {
                  "type": "boolean",
                  "title": "Active next hop Agent is running",
                  "description": "Returns true if the active next hop Agent is running, or false if not."
                }
              }
            }
          }
        },
        "operationId": "GetNextHopStatus"
      }
    },
    "/DriverControl/WaitForNextHopSessionToConnect": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wait for IA-Connect next hop session to connect",
        "description": "Waits for the next hop session to connect and for the IA-Connect Agent to be running in the next hop session.",
        "parameters": [
          {
            "in": "body",
            "name": "WaitForNextHopSessionToConnect",
            "description": "Inputs for IA-Connect WaitForNextHopSessionToConnect action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "NextHopDirectorAddress": {
                  "type": "string",
                  "title": "Next hop Director address",
                  "description": "The optional address for the Next hop IA-Connect Director to forward commands to if none of the 'Next hop Director address is localhost', 'Next hop Director address is hostname', 'Next hop Director address is FQDN' or 'Next hop Director address is named pipe' parameters are set to true.",
                  "x-ms-visibility": "advanced"
                },
                "NextHopDirectorTCPPort": {
                  "type": "integer",
                  "format": "int32",
                  "default": 8002,
                  "title": "Next hop Director TCP port",
                  "description": "The TCP port that the next hop Director is listening on (the Director on the computer that the Agent is running on).",
                  "x-ms-visibility": "advanced"
                },
                "NextHopDirectorUsesHTTPS": {
                  "type": "boolean",
                  "default": false,
                  "title": "Next hop Director uses HTTPS",
                  "description": "Set to True if the next hop Director is using HTTPS, or false if not."
                },
                "NextHopDirectorAddressIsLocalhostname": {
                  "type": "boolean",
                  "default": false,
                  "title": "Next hop Director address is localhost",
                  "description": "The next hop director address (relative to the Agent) is 'localhost'.",
                  "x-ms-visibility": "advanced"
                },
                "NextHopDirectorAddressIsHostname": {
                  "type": "boolean",
                  "default": false,
                  "title": "Next hop Director address is hostname",
                  "description": "The next hop director address is the hostname of the computer running the Agent (i.e. the one running the Agent and the Director).",
                  "x-ms-visibility": "advanced"
                },
                "NextHopDirectorAddressIsFQDN": {
                  "type": "boolean",
                  "default": false,
                  "title": "Next hop Director address is FQDN",
                  "description": "The next hop director address is the fully qualified domain name (FQDN) of the computer running the Agent (i.e. the one running the Agent and the Director).",
                  "x-ms-visibility": "advanced"
                },
                "IncrementNextHopDirectorTCPPortBySessionId": {
                  "type": "boolean",
                  "default": true,
                  "title": "Increment next hop Director TCP port by Session Id",
                  "description": "To ensure the next hop Director TCP port is unique (if there are multiple parallel sessions using next-hop from the same host), the Session Id can be added to the Next hop Director TCP port.",
                  "x-ms-visibility": "advanced"
                },
                "SecondsToWait": {
                  "type": "number",
                  "format": "double",
                  "default": 35,
                  "title": "Time in seconds to wait",
                  "description": "The maximum number of seconds to wait for the next hop session to connect."
                },
                "NextHopDirectorAddressIsNamedPipe": {
                  "type": "boolean",
                  "default": true,
                  "title": "Next hop Director address is named pipe",
                  "description": "The next hop director address (relative to the Agent) is using a named pipe instead of a TCP/IP web service. This is the default to avoid using TCP/IP ports on the first-hop.",
                  "x-ms-visibility": "advanced"
                },
                "DisableExistingNextHop": {
                  "type": "boolean",
                  "default": true,
                  "title": "Disable existing next hop",
                  "description": "Should double-hop be disabled (if currently active) before enabling again? If set to true (the default), any new double-hop enablement instructions will replace the previous ones. If set to false, this will enable triple-hop since the instructions will be received by the double-hop IA-Connect Agent.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NextHopSessionConnected": {
                  "type": "boolean",
                  "title": "Next hop session connected",
                  "description": "Returns true if the next hop session connected before the maximum time to wait was exceeded."
                }
              }
            }
          }
        },
        "operationId": "WaitForNextHopSessionToConnect"
      }
    },
    "/DriverControl/ConfigureNextHopDirector": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Configure next hop IA-Connect Director",
        "description": "Configure the next-hop Director in a double-hop scenario. This is only required if the default IA-Connect next-hop Director settings are not suitable.",
        "parameters": [
          {
            "in": "body",
            "name": "ConfigureNextHopDirector",
            "description": "Inputs for IA-Connect ConfigureNextHopDirector action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SOAPEnabled": {
                  "type": "boolean",
                  "default": false,
                  "title": "SOAP enabled",
                  "description": "Should the SOAP interface be enabled on the next-hop Director?"
                },
                "RESTEnabled": {
                  "type": "boolean",
                  "default": false,
                  "title": "REST enabled",
                  "description": "Should the REST interface be enabled on the next-hop Director?"
                },
                "WebServerEnabled": {
                  "type": "boolean",
                  "default": false,
                  "title": "Web server enabled",
                  "description": "Should the web server (for hosting the IA-Connect Inspector) be enabled on the next-hop Director?"
                },
                "DirectorIsLocalhostOnly": {
                  "type": "boolean",
                  "default": true,
                  "title": "Director is localhost only",
                  "description": "Should the Director SOAP and REST interfaces only listen on 'localhost'? This should be set to true since no other computer should need to communicate with these interfaces."
                },
                "SOAPTCPPort": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "default": 8002,
                  "title": "SOAP TCP port",
                  "description": "If the SOAP interface were enabled, what TCP port should it run on (defaults to 8002)?"
                },
                "RESTTCPPort": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "default": 8002,
                  "title": "REST TCP port",
                  "description": "If the REST interface were enabled, what TCP port should it run on (defaults to 8002)?"
                },
                "SOAPUsesHTTPS": {
                  "type": "boolean",
                  "default": false,
                  "title": "SOAP uses HTTPS",
                  "description": "Is the SOAP interface using HTTPS (instead of HTTP)? If set to True then a certificate is required on the first-hop computer to facilitate HTTPS. This can be shared with the certificate used for REST."
                },
                "RESTUsesHTTPS": {
                  "type": "boolean",
                  "default": false,
                  "title": "REST uses HTTPS",
                  "description": "Is the REST interface using HTTPS (instead of HTTP)? If set to True then a certificate is required on the first-hop computer to facilitate HTTPS. This can be shared with the certificate used for SOAP."
                },
                "IncrementDirectorTCPPortBySessionId": {
                  "type": "boolean",
                  "default": true,
                  "title": "Increment Director TCP port by SessionId",
                  "description": "To ensure the Director TCP port is unique (if there are multiple parallel sessions using double-hop from the same first-hop host), the first-hop Session Id can be added to the Director TCP port. This is only required if either SOAP or REST is enabled on the first-hop Director and these are typically not enabled because named pipes are used by default."
                },
                "SOAPUsesUserAuthentication": {
                  "type": "boolean",
                  "default": false,
                  "title": "SOAP uses user authentication",
                  "description": "Set to True if you want the HTTP SOAP TCP port to use user authentication. Refer to the IA-Connect Installation Guide for information on how to set this up."
                },
                "RESTUsesUserAuthentication": {
                  "type": "boolean",
                  "default": false,
                  "title": "REST uses user authentication",
                  "description": "Set to True if you want the HTTP REST TCP port to use user authentication. Refer to the IA-Connect Installation Guide for information on how to set this up."
                },
                "CommandNamedPipeEnabled": {
                  "type": "boolean",
                  "default": true,
                  "title": "Command named pipe enabled",
                  "description": "Should the first-hop Agent use named pipes to communicate with the first-hop Director? This is the default communication method."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "ConfigureNextHopDirector"
      }
    },
    "/DriverControl/ResetNextHopDirectorSettings": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Reset next hop IA-Connect Director settings",
        "description": "Resets any custom IA-Connect Director settings that have been set, restoring the default settings.",
        "parameters": [
          {
            "in": "body",
            "name": "ResetNextHopDirectorSettings",
            "description": "Inputs for IA-Connect ResetNextHopDirectorSettings action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "ResetNextHopDirectorSettings"
      }
    },
    "/DriverControl/WorkflowCompleted": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Mark Flow as complete",
        "description": "Mark a Flow as complete, which informs the IA-Connect Orchestrator that the assigned worker machine is now available to process other Flows.",
        "parameters": [
          {
            "in": "body",
            "name": "WorkflowCompleted",
            "description": "Inputs for IA-Connect WorkflowCompleted action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "WorkflowCompleted"
      }
    },
    "/DriverControl/RaiseException": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Raise exception",
        "description": "Raise an exception with the specified message if the input exception is not blank. This is useful to trigger an exception message in your flow (HTTP 400) which will then be caught by an error handling stage, if an earlier action had an error. This exception is not recorded in the IA-Connect Orchestrator flow run stats.",
        "parameters": [
          {
            "in": "body",
            "name": "RaiseException",
            "description": "Inputs for IA-Connect RaiseException action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "InputException": {
                  "type": "string",
                  "title": "Input exception",
                  "description": "If this input exception is not an empty string, an exception will be raised with the provided 'Exception message'. If this input exception is blank, this action will do nothing."
                },
                "ExceptionMessage": {
                  "type": "string",
                  "title": "Exception message",
                  "description": "The exception message to raise."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "RaiseExceptionResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "RaiseException"
      }
    },
    "/DriverControl/UpdateOrchestratorFlowStatsResult": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update Orchestrator Flow stats result",
        "description": "Update the result statistics for the current Worker Flow in the IA-Connect Orchestrator. This is used to modify the final result of a Flow stat in the IA-Connect Orchestrator which is typically used for reporting purposes. This only works for the current Flow (the Orchestrator detects the Flow run Id). You cannot modify the stats for any other Flow.",
        "parameters": [
          {
            "in": "body",
            "name": "UpdateOrchestratorFlowStatsResult",
            "description": "Inputs for IA-Connect UpdateOrchestratorFlowStatsResult action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "FlowLastActionSuccess": {
                  "type": "boolean",
                  "x-nullable": true,
                  "title": "Flow last action success",
                  "description": "Set to true to specify that the last action in an Orchestrator Flow stat is a success. Set to false to specify that the last action in an Orchestrator Flow stat is a failure. Leave this field blank if you don't want to update the flow last action status (for example: If you only wish to update the last action code."
                },
                "FlowLastActionErrorMessage": {
                  "type": "string",
                  "title": "Flow last action error message",
                  "description": "If specifying that the Flow last action was a failure, provide an error message here."
                },
                "FlowLastActionCode": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Flow last action code",
                  "description": "An optional code to assign to the Flow stat. This is typically used as an error code (for example, to distinguish between System and Business exceptions), but could be used as a success code."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "UpdateOrchestratorFlowStatsResultResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "UpdateOrchestratorFlowStatsResult"
      }
    },
    "/DriverControl/GetLastFailedActionFromOrchestratorFlowStats": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get last failed action from Orchestrator flow stats",
        "description": "Retrieves details of the last action which passed through the IA-Connect Orchestrator to a worker, if that action had failed. This action is most commonly used during error handling.",
        "parameters": [
          {
            "in": "body",
            "name": "GetLastFailedActionFromOrchestratorFlowStats",
            "description": "Inputs for IA-Connect GetLastFailedActionFromOrchestratorFlowStats action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "WorkerAllocatedToFlowRun": {
                  "type": "boolean",
                  "title": "Worker allocated to flow run",
                  "description": "Returns true if there is a worker allocated to this flow run, and hence information can be provided regarding the last action error. Returns false if there is no worker allocated to this flow run (either one was never allocated or the worker has now been made available to another flow run) and hence no information can be provided regarding the last error."
                },
                "LastActionFailed": {
                  "type": "boolean",
                  "title": "Last action failed",
                  "description": "Returns true if the last action in this flow run (that runs on a worker allocated to this flow run) failed: The other outputs from this action will hold the details. Returns false if the last action in this flow run did not fail: The other outputs will be blank."
                },
                "LastFailedActionRequestPath": {
                  "type": "string",
                  "title": "Last failed action request path",
                  "description": "If the last action in this flow run (that runs on a worker allocated to this flow run) failed, this output will contain the action request path. This can be used to determine which action failed. If the last action in this flow run did not fail, this value will be blank."
                },
                "LastFailedActionErrorMessage": {
                  "type": "string",
                  "title": "Last failed action error message",
                  "description": "If the last action in this flow run (that runs on a worker allocated to this flow run) failed, this output will contain the error message. If the last action in this flow run did not fail, this value will be blank."
                }
              }
            }
          }
        },
        "operationId": "GetLastFailedActionFromOrchestratorFlowStats"
      }
    },
    "/DriverControl/GetOrchestratorFlowStats": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Flow stats from Orchestrator",
        "description": "Returns a list of Flow stats from the IA-Connect Orchestrator. Used for reporting purposes. You can optionally use one or more filters to limit the returned results.",
        "parameters": [
          {
            "in": "body",
            "name": "GetOrchestratorFlowStats",
            "description": "Inputs for IA-Connect GetOrchestratorFlowStats action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "WithinLastNumberOfDays": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Within last number of days",
                  "description": "Filter results to retrieve only those started within the last specified number of days. Set to 0 to not filter."
                },
                "SearchFlowName": {
                  "type": "string",
                  "title": "Flow name",
                  "description": "Filter results to retrieve only those with the specified Flow name. Set to blank to not filter by flow name."
                },
                "SearchFlowLastActionResult": {
                  "type": "boolean",
                  "x-nullable": true,
                  "title": "Flow last action result",
                  "description": "Filter results to retrieve only those with the specified last action result. Set to true to only retrieve successful Flows. Set to false to only retrieve failed Flows. Don't set a value / set to blank to not filter by Flow last action result."
                },
                "SearchFlowStartTimeStartWindow": {
                  "type": "string",
                  "format": "date-time",
                  "title": "Flow start time start window",
                  "description": "Filter results to retrieve only those which started after the specified start time. Set to blank to not filter. For example: '2022-01-24T07:00:00' would return all Orchestrator Flow stats for Flows that started on or after 07.00 hours on the 24th of January 2022. All datetimes are in UTC (GMT+0) so you may wish to use the Convert DateTime action to convert your local time to UTC."
                },
                "SearchFlowStartTimeEndWindow": {
                  "type": "string",
                  "format": "date-time",
                  "title": "Flow start time end window",
                  "description": "Filter results to retrieve only those which started before the specified start time. Set to blank to not filter. For example: '2022-01-25T07:00:00' would return all Orchestrator Flow stats for Flows that started on or before 07.00 hours on the 25th of January 2022. All datetimes are in UTC (GMT+0) so you may wish to use the Convert DateTime action to convert your local time to UTC."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "OrchestratorFlowStatsJSON": {
                  "type": "string",
                  "title": "Orchestrator Flow stats JSON",
                  "description": "A list of all Orchestrator Flow stats, in JSON format."
                },
                "NumberOfOrchestratorFlowStats": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of Flow stats",
                  "description": "The number of Flow stats that were returned."
                }
              }
            }
          }
        },
        "operationId": "GetOrchestratorFlowStats"
      }
    },
    "/DriverControl/GetOrchestratorWorkerAvailabilityStats": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get worker availability stats from Orchestrator",
        "description": "Returns worker availability stats from the IA-Connect Orchestrator. Used for reporting purposes. You can optionally use one or more filters to limit the returned results.",
        "parameters": [
          {
            "in": "body",
            "name": "GetOrchestratorWorkerAvailabilityStats",
            "description": "Inputs for IA-Connect GetOrchestratorWorkerAvailabilityStats action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "WithinLastNumberOfDays": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Within last number of days",
                  "description": "Filter results to retrieve only those started within the last specified number of days. Set to 0 to not filter."
                },
                "SearchFlowName": {
                  "type": "string",
                  "title": "Flow name",
                  "description": "Filter results to retrieve only those with the specified Flow name. Set to blank to not filter by flow name."
                },
                "SearchFlowStartTimeStartWindow": {
                  "type": "string",
                  "format": "date-time",
                  "title": "Flow start time start window",
                  "description": "Filter results to retrieve only those which started after the specified start time. Set to blank to not filter. For example: '2022-01-24T07:00:00' would return all Orchestrator Flow stats for Flows that started on or after 07.00 hours on the 24th of January 2022. All datetimes are in UTC (GMT+0) so you may wish to use the Convert DateTime action to convert your local time to UTC."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "WorkerAvailabilityStatsJSON": {
                  "type": "string",
                  "title": "Worker availability stats JSON",
                  "description": "A list of worker availability stats, in JSON format."
                },
                "NumberOfWorkerAvailabilityStats": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of worker availability stats",
                  "description": "The number of worker availability stats that were returned."
                }
              }
            }
          }
        },
        "operationId": "GetOrchestratorWorkerAvailabilityStats"
      }
    },
    "/DriverControl/GetOrchestratorWorkerFlowUsageHeatmap": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get worker flow usage heatmap from Orchestrator",
        "description": "Returns worker flow usage daily heatmap from the IA-Connect Orchestrator. Used for reporting purposes. You can optionally use one or more filters to limit the returned results.",
        "parameters": [
          {
            "in": "body",
            "name": "GetOrchestratorWorkerFlowUsageHeatmap",
            "description": "Inputs for IA-Connect GetOrchestratorWorkerFlowUsageHeatmap action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchStartDateStartWindow": {
                  "type": "string",
                  "format": "date-time",
                  "title": "Flow start time start window",
                  "description": "Filter results to retrieve only worker flow usage heatmap after the specified start date (time component is ignored). Set to blank to not filter. For example: '2022-01-24T00:00:00' would return a worker heatmap for Flows that started on or after the 24th of January 2022. All datetimes are in UTC (GMT+0) so you may wish to use the Convert DateTime action to convert your local time to UTC."
                },
                "SearchStartDateEndWindow": {
                  "type": "string",
                  "format": "date-time",
                  "title": "Flow start time end window",
                  "description": "Filter results to retrieve only worker flow usage heatmap before the specified start date (time component is ignored). Set to blank to not filter. For example: '2022-01-25T00:00:00' would return a worker heatmap for Flow that started on or before the 25th of January 2022. All datetimes are in UTC (GMT+0) so you may wish to use the Convert DateTime action to convert your local time to UTC."
                },
                "TimeZoneMinutesOffsetFromUTC": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Time zone minutes offset from UTC",
                  "description": "The time zone offset from UTC in minutes to align the daily heatmap. For example: If you specify 60 minutes, the daily heatmaps run from 01:00 UTC to 01:00 UTC."
                },
                "WorkerNames": {
                  "type": "string",
                  "title": "IA-Connect worker names",
                  "description": "A list of the names of IA-Connect Workers to return a heatmap for, in JSON or CSV format. If left blank, a heatmap will be generated for all workers currently known to the Orchestrator. For example: [{\"WorkerName\": \"Worker1\"}, {\"WorkerName\": \"Worker2\"}] (JSON format) or Worker1,Worker2 (CSV format)."
                }
              },
              "required": [
                "SearchStartDateStartWindow",
                "SearchStartDateEndWindow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "WorkerFlowUsageHeatmapJSON": {
                  "type": "string",
                  "title": "Worker flow usage heatmap JSON",
                  "description": "A worker flow usage heatmap, in JSON format."
                },
                "NumberOfWorkerFlowUsageHeatmapItems": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of worker flow usage heatmap items",
                  "description": "The number of worker flow usage heatmap items that were returned. One item per worker per day."
                }
              }
            }
          }
        },
        "operationId": "GetOrchestratorWorkerFlowUsageHeatmap"
      }
    },
    "/DriverControl/GetOrchestratorLoginHistory": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get login history from Orchestrator",
        "description": "Returns the IA-Connect Orchestrator login history for reporting purposes. You can optionally use one or more filters to limit the returned results.",
        "parameters": [
          {
            "in": "body",
            "name": "GetOrchestratorLoginHistory",
            "description": "Inputs for IA-Connect GetOrchestratorLoginHistory action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "WithinLastNumberOfDays": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Within last number of days",
                  "description": "Filter results to retrieve only Orchestrator logins within the specified number of days. Set to 0 to not filter."
                },
                "SearchByEmail": {
                  "type": "string",
                  "title": "Email address",
                  "description": "Filter results to retrieve only Orchestrator logins with the specified email address. Set to blank to not filter by email address."
                },
                "SearchLoginHistoryTimeStartWindow": {
                  "type": "string",
                  "format": "date-time",
                  "title": "Login history time start window",
                  "description": "Filter results to retrieve only Orchestrator logins after the specified start time. Set to blank to not filter. For example: '2022-01-24T07:00:00' would return all Orchestrator logins on or after 07.00 hours on the 24th of January 2022. All datetimes are in UTC (GMT+0) so you may wish to use the Convert DateTime action to convert your local time to UTC."
                },
                "SearchLoginHistoryTimeEndWindow": {
                  "type": "string",
                  "format": "date-time",
                  "title": "Login history time end window",
                  "description": "Filter results to retrieve only Orchestrator logins before the specified start time. Set to blank to not filter. For example: '2022-01-25T07:00:00' would return all Orchestrator logins on or before 07.00 hours on the 25th of January 2022. All datetimes are in UTC (GMT+0) so you may wish to use the Convert DateTime action to convert your local time to UTC."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "OrchestratorLoginHistoryJSON": {
                  "type": "string",
                  "title": "Orchestrator login history JSON",
                  "description": "A list of all Orchestrator logins meeting the specified filters, in JSON format."
                },
                "NumberOfOrchestratorLogins": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of Orchestrator logins",
                  "description": "The number of Orchestrator logins returned."
                }
              }
            }
          }
        },
        "operationId": "GetOrchestratorLoginHistory"
      }
    },
    "/DriverControl/SetLocalLoggingLevel": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set IA-Connect Director log level",
        "description": "Sets the IA-Connect Director logging level to the specified value (1 being the lowest level and 4 being the highest).",
        "parameters": [
          {
            "in": "body",
            "name": "SetLocalLoggingLevel",
            "description": "Inputs for IA-Connect SetLocalLoggingLevel action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "LoggingLevel": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Log level",
                  "description": "The logging level that the IA-Connect Director should be set to."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "LoggingLevel",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetLocalLoggingLevel"
      }
    },
    "/DriverControl/RunCommand": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Run generic IA-Connect Agent command",
        "description": "Runs a generic IA-Connect Agent command passing arguments as JSON and returning output data as JSON. Used to run Agent commands when the Director and Inspector are older versions than the Agent and hence don't understand the command.",
        "parameters": [
          {
            "in": "body",
            "name": "RunCommand",
            "description": "Inputs for IA-Connect RunCommand action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "CommandName": {
                  "type": "string",
                  "title": "IA-Connect Agent command name",
                  "description": "The internal name of the IA-Connect Agent command. A list of command names can be provided by the action 'GetAgentActionsInClass'."
                },
                "InputJSON": {
                  "type": "string",
                  "title": "Input JSON",
                  "description": "The input to the IA-Connect Agent command, in JSON format."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "CommandName",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "OutputJSON": {
                  "type": "string",
                  "title": "Output JSON",
                  "description": "The output from the IA-Connect Agent command, in JSON format."
                }
              }
            }
          }
        },
        "operationId": "RunCommand"
      }
    },
    "/DriverControl/GetRemoteClientType": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Director client type and session information",
        "description": "Returns the details of the local or remote session being handled by the tier 1 Director.",
        "parameters": [
          {
            "in": "body",
            "name": "GetRemoteClientType",
            "description": "Inputs for IA-Connect GetRemoteClientType action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "RemoteClientType": {
                  "type": "string",
                  "title": "Remote client type",
                  "description": "The remote client type ('Local', 'Citrix ICA' or 'Microsoft RDP')."
                },
                "VirtualChannelConnected": {
                  "type": "boolean",
                  "title": "Virtual channel connected",
                  "description": "True, if the virtual channel is connected, between the Director and the Agent."
                },
                "DirectorVersion": {
                  "type": "string",
                  "title": "Director version",
                  "description": "The version of the IA-Connect Director DLL. For example: 1.67.21.0."
                },
                "DirectorReleaseVersion": {
                  "type": "string",
                  "title": "Director release version",
                  "description": "The IA-Connect release version of the IA-Connect Director. For example: 9.4."
                },
                "AgentVersion": {
                  "type": "string",
                  "title": "Agent version",
                  "description": "The version of the IA-Connect Agent EXE that this Director is connected to. For example: 1.74.21.0."
                },
                "AgentReleaseVersion": {
                  "type": "string",
                  "title": "Agent release version",
                  "description": "The IA-Connect release version of the IA-Connect Agent that this Director is connected to. For example: 9.4."
                },
                "AgentIsLicensed": {
                  "type": "boolean",
                  "x-nullable": true,
                  "title": "Agent is licensed",
                  "description": "True, if the IA-Connect Agent that this Director is connected to, is licensed. False, if the IA-Connect Agent is not licensed. Null if the Agent license state is unknown."
                },
                "AgentLicenseFeatures": {
                  "type": "string",
                  "title": "Agent license features",
                  "description": "A comma separated list of IA-Connect license features assigned to the IA-Connect Agent that this Director is connected to. For example: JML, DEV."
                },
                "DirectorHostname": {
                  "type": "string",
                  "title": "Director hostname",
                  "description": "The hostname of the computer the Director is running on. For example: vmrpa1."
                },
                "DirectorNetBIOSDomainName": {
                  "type": "string",
                  "title": "Director NetBIOS domain name",
                  "description": "The NetBIOS domain name of the computer the Director is running on. For example: domain1. If the computer is not a member of a domain, this typically returns the hostname."
                },
                "DirectorDNSDomainName": {
                  "type": "string",
                  "title": "Director DNS domain name",
                  "description": "The DNS domain name of the computer the Director is running on. For example: domain1.myorg.local. If the computer is not a member of a domain, this typically returns the hostname."
                },
                "AttachedToNextHopDirector": {
                  "type": "boolean",
                  "title": "Attached to next hop Director",
                  "description": "Set to false if the IA-Connect session is currently attached to the Agent this Director is connected to. Set to true if the Director is forwarding all actions (i.e. attached) to another Director (which is connected to a different Agent). For example, if this Director is a local Director communicating with a local Agent, but the IA-Connect session is currently attached to Citrix, this value will be true."
                },
                "NextHopDirectorSessionType": {
                  "type": "string",
                  "title": "Next hop Director session type",
                  "description": "If this Director is attached to a next hop Director, this value will hold the next hop session type. For example, if this Director is a local Director communicating with a local Agent, but the IA-Connect session is currently attached to Citrix, this value will be 'Citrix ICA', whereas the 'Remote client type' value will be 'Local' (representing a local Director forwarding actions to Citrix)."
                }
              }
            }
          }
        },
        "operationId": "GetRemoteClientType"
      }
    },
    "/DriverControl/GetAvailableIAConnectSessions": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get available IA-Connect Sessions",
        "description": "Retrieves a list of IA-Connect Director sessions (available connections to sessions where the IA-Connect Agent is running, such as local, Microsoft RDP or Citrix ICA).",
        "parameters": [
          {
            "in": "body",
            "name": "GetAvailableIAConnectSessions",
            "description": "Inputs for IA-Connect GetAvailableIAConnectSessions action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "IAConnectSessionsJSON": {
                  "type": "string",
                  "title": "IA-Connect sessions JSON",
                  "description": "A list of all IA-Connect sessions, formatted as JSON."
                },
                "NumberOfIAConnectSessions": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of IA-Connect sessions",
                  "description": "The total number of IA-Connect sessions that are open."
                },
                "NumberOfLocalIAConnectSessions": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of local IA-Connect sessions",
                  "description": "The number of local IA-Connect sessions that are open."
                },
                "NumberOfCitrixICAIAConnectSessions": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of Citrix ICA IA-Connect sessions",
                  "description": "The number of Citrix ICA IA-Connect sessions that are open."
                },
                "NumberOfMicrosoftRDPIAConnectSessions": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of Microsoft RDP IA-Connect sessions",
                  "description": "The number of Microsoft RDP IA-Connect sessions that are open."
                }
              }
            }
          }
        },
        "operationId": "GetAvailableIAConnectSessions"
      }
    },
    "/DriverControl/AttachToIAConnectSessionByName": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Attach to IA-Connect session by name",
        "description": "Attaches to the specified IA-Connect Director session by name. This is the session into which commands to an IA-Connect Agent are sent.",
        "parameters": [
          {
            "in": "body",
            "name": "AttachToIAConnectSessionByName",
            "description": "Inputs for IA-Connect AttachToIAConnectSessionByName action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "IAConnectSessionName": {
                  "type": "string",
                  "title": "IA-Connect session name",
                  "description": "The name of the IA-Connect session to connect to."
                },
                "VirtualChannelMustBeConnected": {
                  "type": "boolean",
                  "default": true,
                  "title": "Virtual channel must be connected",
                  "description": "Should the IA-Connect Director validate that the virtual channel is connected when attaching to the session? This ensures that the IA-Connect Agent is running in the specified session."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "IAConnectSessionName",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "AttachToIAConnectSessionByName"
      }
    },
    "/DriverControl/AttachToTier1IAConnectSession": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Attach to tier 1 IA-Connect session",
        "description": "Attaches to the IA-Connect Director session of the Director receiving the SOAP and / or REST messages. This is the session into which commands to an IA-Connect Agent are sent.",
        "parameters": [
          {
            "in": "body",
            "name": "AttachToTier1IAConnectSession",
            "description": "Inputs for IA-Connect AttachToTier1IAConnectSession action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "VirtualChannelMustBeConnected": {
                  "type": "boolean",
                  "default": true,
                  "title": "Virtual channel must be connected",
                  "description": "Should the IA-Connect Director validate that the virtual channel is connected when attaching to the session? This ensures that the IA-Connect Agent is running in the specified session."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "AttachedTier1IAConnectSessionName": {
                  "type": "string",
                  "title": "Attached tier 1 IA-Connect session name",
                  "description": "The name of the tier 1 IA-Connect session that was connected to."
                }
              }
            }
          }
        },
        "operationId": "AttachToTier1IAConnectSession"
      }
    },
    "/DriverControl/AttachToIAConnectSessionByIndex": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Attach to IA-Connect session by index",
        "description": "Attaches to the specified IA-Connect Director session by index (e.g. attach to first Citrix ICA session). This is the session into which commands to an IA-Connect Agent are sent.",
        "parameters": [
          {
            "in": "body",
            "name": "AttachToIAConnectSessionByIndex",
            "description": "Inputs for IA-Connect AttachToIAConnectSessionByIndex action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchIAConnectSessionType": {
                  "type": "string",
                  "title": "Search IA-Connect session type",
                  "description": "The session type to search for, e.g. 'Local Agent', 'Microsoft RDP', 'Citrix ICA' or 'Remote' for any type of remote session. Leave blank to search for any session type.",
                  "enum": [
                    "Local Agent",
                    "Microsoft RDP",
                    "Citrix ICA",
                    "Remote"
                  ]
                },
                "SearchIAConnectSessionIndex": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Search IA-Connect session index",
                  "description": "The index of the session to connect to, e.g. 1 for the first matching session type, 2 for second matching session type."
                },
                "TimeToWaitInSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Time to wait in seconds",
                  "description": "If the session with the specified index doesn't exist, how long should IA-Connect wait for it?"
                },
                "RaiseExceptionIfTimedout": {
                  "type": "boolean",
                  "default": true,
                  "title": "Raise exception if timed out",
                  "description": "Should IA-Connect raise an exception if a new session has not connected before the timeout period has elapsed?"
                },
                "VirtualChannelMustBeConnected": {
                  "type": "boolean",
                  "default": true,
                  "title": "Virtual channel must be connected",
                  "description": "Should the IA-Connect Director validate that the virtual channel is connected when attaching to the session? This ensures that the IA-Connect Agent is running in the specified session."
                },
                "OnlyCountSessionsNotSeenBefore": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only count sessions not seen before",
                  "description": "If set to true then any sessions seen by the previously run 'Get available IA-Connect sessions' action (or the IA-Connect Inspector viewing sessions) will not be counted in the index. This allows only 'new' sessions to be counted (e.g. attach to the first new Citrix session)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "AttachedIAConnectSessionName": {
                  "type": "string",
                  "title": "Attached IA-Connect session name",
                  "description": "The name of the IA-Connect session that was attached to."
                },
                "AttachedToSession": {
                  "type": "boolean",
                  "title": "Attached to session",
                  "description": "Returns true if IA-Connect has attached to a session, or false if not."
                }
              }
            }
          }
        },
        "operationId": "AttachToIAConnectSessionByIndex"
      }
    },
    "/DriverControl/AttachToMostRecentIAConnectSession": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Attach to most recent IA-Connect session",
        "description": "Attaches to the IA-Connect Director session which most recently connected (optionally of a specified type). This is the session into which commands to an IA-Connect Agent are sent.",
        "parameters": [
          {
            "in": "body",
            "name": "AttachToMostRecentIAConnectSession",
            "description": "Inputs for IA-Connect AttachToMostRecentIAConnectSession action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchIAConnectSessionType": {
                  "type": "string",
                  "title": "Search IA-Connect session type",
                  "description": "The session type to search for, e.g. 'Local Agent', 'Microsoft RDP', 'Citrix ICA' or 'Remote' for any type of remote session. Leave blank to search for any session type.",
                  "enum": [
                    "Local Agent",
                    "Microsoft RDP",
                    "Citrix ICA",
                    "Remote"
                  ]
                },
                "TimeToWaitInSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Time to wait in seconds",
                  "description": "If there is no session of the specified type (if a specific type was specified), how long should IA-Connect wait for it?"
                },
                "RaiseExceptionIfTimedout": {
                  "type": "boolean",
                  "default": true,
                  "title": "Raise exception if timed out",
                  "description": "Should IA-Connect raise an exception if a new session has not connected before the timeout period has elapsed?"
                },
                "VirtualChannelMustBeConnected": {
                  "type": "boolean",
                  "default": true,
                  "title": "Virtual channel must be connected",
                  "description": "Should the IA-Connect Director validate that the virtual channel is connected when attaching to the session? This ensures that the IA-Connect Agent is running in the specified session."
                },
                "OnlyCountSessionsNotSeenBefore": {
                  "type": "boolean",
                  "default": false,
                  "title": "Only count sessions not seen before",
                  "description": "If set to true then any sessions seen by the previously run 'Get available IA-Connect sessions' action (or the IA-Connect Inspector viewing sessions) will not be counted in the index. This allows only 'new' sessions to be counted (e.g. attach to the first new Citrix session)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "AttachedIAConnectSessionName": {
                  "type": "string",
                  "title": "Attached IA-Connect session name",
                  "description": "The name of the IA-Connect session that was attached to."
                },
                "AttachedToSession": {
                  "type": "boolean",
                  "title": "Attached to session",
                  "description": "Returns true if IA-Connect has attached to a session, or false if not."
                }
              }
            }
          }
        },
        "operationId": "AttachToMostRecentIAConnectSession"
      }
    },
    "/DriverControl/GetDirectorUpTime": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get IA-Connect Director uptime",
        "description": "Returns the uptime of this IA-Connect Director in seconds (i.e. how long the Director has been running).",
        "parameters": [
          {
            "in": "body",
            "name": "GetDirectorUpTime",
            "description": "Inputs for IA-Connect GetDirectorUpTime action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "UpTimeInSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Director uptime in seconds",
                  "description": "The number of seconds that the IA-Connect Director has been running."
                }
              }
            }
          }
        },
        "operationId": "GetDirectorUpTime"
      }
    },
    "/DriverControl/DoesIAConnectSessionExistByName": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Does IA-Connect session exist by name",
        "description": "Returns if the specified IA-Connect Director session exists. This is the session into which commands to an IA-Connect Agent are sent. The name will be known from an earlier 'Attach' action.",
        "parameters": [
          {
            "in": "body",
            "name": "DoesIAConnectSessionExistByName",
            "description": "Inputs for IA-Connect DoesIAConnectSessionExistByName action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "IAConnectSessionName": {
                  "type": "string",
                  "title": "IA-Connect session name",
                  "description": "The name of the IA-Connect session to check."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "IAConnectSessionName",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "IAConnectSessionExists": {
                  "type": "boolean",
                  "title": "IA-Connect session exists",
                  "description": "Returns true if a session with the specified name exists, or false if not."
                }
              }
            }
          }
        },
        "operationId": "DoesIAConnectSessionExistByName"
      }
    },
    "/DriverControl/WaitForIAConnectSessionToCloseByName": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wait for IA-Connect session to close by name",
        "description": "Waits for the specified IA-Connect Director session to close. This is the session into which commands to an IA-Connect Agent are sent. The name will be known from an earlier 'Attach' action.",
        "parameters": [
          {
            "in": "body",
            "name": "WaitForIAConnectSessionToCloseByName",
            "description": "Inputs for IA-Connect WaitForIAConnectSessionToCloseByName action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "IAConnectSessionName": {
                  "type": "string",
                  "title": "IA-Connect session name",
                  "description": "The name of the IA-Connect session to check."
                },
                "TimeToWaitInSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Time to wait in seconds",
                  "description": "If there is no session of the specified type (if a specific type was specified), how long should IA-Connect wait for it?"
                },
                "RaiseExceptionIfTimedout": {
                  "type": "boolean",
                  "default": true,
                  "title": "Raise exception if timed out",
                  "description": "Should IA-Connect raise an exception if a new session has not connected before the timeout period has elapsed?"
                },
                "AttachToTier1IAConnectSessionOnSuccess": {
                  "type": "boolean",
                  "default": true,
                  "title": "Attach to tier 1 IA-Connect session on success",
                  "description": "Should IA-Connect connect back to the tier 1 IA-Connect session (the IA-Connect Director session of the Director that is receiving the SOAP and / or REST messages) if the session has successfully closed?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "IAConnectSessionName",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "IAConnectSessionClosed": {
                  "type": "boolean",
                  "title": "IA-Connect session closed",
                  "description": "Returns true if the session with the specified name has closed, or false if not."
                },
                "AttachedTier1IAConnectSessionName": {
                  "type": "string",
                  "title": "Attached tier 1 IA-Connect session name",
                  "description": "The name of the tier 1 IA-Connect session that was connected to."
                }
              }
            }
          }
        },
        "operationId": "WaitForIAConnectSessionToCloseByName"
      }
    },
    "/DriverControl/KillIAConnectSessionByName": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Kill IA-Connect session by name",
        "description": "Kills the specified IA-Connect Director session if it exists. This is the session into which commands to an IA-Connect Agent are sent. The name will be known from an earlier 'Attach' action.",
        "parameters": [
          {
            "in": "body",
            "name": "KillIAConnectSessionByName",
            "description": "Inputs for IA-Connect KillIAConnectSessionByName action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "IAConnectSessionName": {
                  "type": "string",
                  "title": "IA-Connect session name",
                  "description": "The name of the IA-Connect session to kill."
                },
                "AttachToTier1IAConnectSessionOnSuccess": {
                  "type": "boolean",
                  "default": true,
                  "title": "Attach to tier 1 IA-Connect session on success",
                  "description": "Should IA-Connect connect back to the tier 1 IA-Connect session (the IA-Connect Director session of the Director that is receiving the SOAP and / or REST messages) if the session has successfully closed?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "IAConnectSessionName",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "IAConnectSessionKilled": {
                  "type": "boolean",
                  "title": "IA-Connect session killed",
                  "description": "Returns true if the session with the specified name was killed, or false if not."
                },
                "AttachedTier1IAConnectSessionName": {
                  "type": "string",
                  "title": "Attached tier 1 IA-Connect session name",
                  "description": "The name of the tier 1 IA-Connect session that was connected to."
                }
              }
            }
          }
        },
        "operationId": "KillIAConnectSessionByName"
      }
    },
    "/DriverControl/SetAgentGlobalCoordinateConfiguration": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set IA-Connect Agent global coordinate configuration",
        "description": "Configures the IA-Connect Agent global coordinate system, which is used to display element locations (for example: during mouse inspection) and calculate mouse positions (for example: when performing global mouse actions). The defaults provide the latest functionality, but you may use this action to revert to the behaviour in previous versions of the Agent or specify that an API is using a different coordinate system.",
        "parameters": [
          {
            "in": "body",
            "name": "SetAgentGlobalCoordinateConfiguration",
            "description": "Inputs for IA-Connect SetAgentGlobalCoordinateConfiguration action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "MultiMonitorFunctionality": {
                  "type": "string",
                  "default": "NotSet",
                  "title": "Multi monitor functionality",
                  "description": "Set to 'Primary display only' (PrimaryMonitor) to revert to older behaviour, which only supports highlighting elements and performing global mouse actions on the primary display device (the only available mode in IA-Connect 9.3 and earlier). Set to 'All displays' (MultiMonitor) to enable highlighting elements and performing global mouse actions on all monitors, and to automatically detect DPI scaling on each monitor (the default since IA-Connect 9.4). Set to 'Not set' (NotSet) to make no change.",
                  "enum": [
                    "NotSet",
                    "PrimaryMonitor",
                    "MultiMonitor"
                  ],
                  "x-ms-enum-values": [
                    {
                      "value": "NotSet",
                      "displayName": "Not set"
                    },
                    {
                      "value": "PrimaryMonitor",
                      "displayName": "Primary display only"
                    },
                    {
                      "value": "MultiMonitor",
                      "displayName": "All displays"
                    }
                  ]
                },
                "AutoSetMouseInspectionMultiplier": {
                  "type": "string",
                  "default": "NotSet",
                  "title": "Auto set mouse inspection multiplier",
                  "description": "Set to 'Auto' (1) (the default since IA-Connect 9.4) to automatically calculate the mouse inspection multiplier on the primary display device at Agent startup and every time mouse inspection is performed. Set to 'Manual' (0) to require the inspection multiplier to be set manually (the only available option in IA-Connect 9.3 and earlier). Set to blank or 'NotSet' to leave this option unchanged. This option only has any effect when 'Multi monitor functionality' is disabled.",
                  "enum": [
                    "Auto",
                    "Manual",
                    "NotSet"
                  ],
                  "x-ms-enum-values": [
                    {
                      "value": "Auto",
                      "displayName": "Automatic"
                    },
                    {
                      "value": "Manual",
                      "displayName": "Manual"
                    },
                    {
                      "value": "NotSet",
                      "displayName": "Not set"
                    }
                  ]
                },
                "AutoSetGlobalMouseMultiplier": {
                  "type": "string",
                  "default": "NotSet",
                  "title": "Auto set global mouse multiplier",
                  "description": "Set to 'Auto' (1) (the default since IA-Connect 9.4) to automatically calculate the global mouse movement multiplier on the primary display device at Agent startup and every time mouse inspection is performed. Set to 'Manual' (0) to require the global mouse movement multiplier to be set manually (the only available option in IA-Connect 9.3 and earlier). Set to blank or 'NotSet' to leave this option unchanged. This option only has any effect when 'Multi monitor functionality' is disabled.",
                  "enum": [
                    "Auto",
                    "Manual",
                    "NotSet"
                  ],
                  "x-ms-enum-values": [
                    {
                      "value": "Auto",
                      "displayName": "Automatic"
                    },
                    {
                      "value": "Manual",
                      "displayName": "Manual"
                    },
                    {
                      "value": "NotSet",
                      "displayName": "Not set"
                    }
                  ]
                },
                "MouseInspectionXMultiplier": {
                  "type": "number",
                  "format": "double",
                  "default": 0,
                  "title": "Mouse inspection X multiplier",
                  "description": "The horizontal (X) mouse inspection multiplier to set (for when the Agent highlights what is under the mouse). For example: If IA-Connect is displaying the inspection rectangle at half the actual mouse X location, set a value of 0.5. Set to 0 to leave the current value unchanged. This option only has any effect when 'Multi monitor functionality' is disabled and 'Auto set mouse inspection multiplier' is disabled."
                },
                "MouseInspectionYMultiplier": {
                  "type": "number",
                  "format": "double",
                  "default": 0,
                  "title": "Mouse inspection Y multiplier",
                  "description": "The vertical (Y) mouse inspection multiplier to set (for when the Agent highlights what is under the mouse). For example: If IA-Connect is displaying the inspection rectangle at half the actual mouse Y location, set a value of 0.5. Set to 0 to leave the current value unchanged. This option only has any effect when 'Multi monitor functionality' is disabled and 'Auto set mouse inspection multiplier' is disabled."
                },
                "GlobalMouseXMultiplier": {
                  "type": "number",
                  "format": "double",
                  "default": 0,
                  "title": "Global mouse X multiplier",
                  "description": "The horizontal (X) global mouse movement multiplier to set (for when the Agent moves the mouse). Set to 0 to leave the current value unchanged. This option only has any effect when 'Multi monitor functionality' is disabled."
                },
                "GlobalMouseYMultiplier": {
                  "type": "number",
                  "format": "double",
                  "default": 0,
                  "title": "Global mouse Y multiplier",
                  "description": "The vertical (Y) global mouse movement multiplier to set (for when the Agent moves the mouse). Set to 0 to leave the current value unchanged. This option only has any effect when 'Multi monitor functionality' is disabled."
                },
                "GlobalMouseMultiplierApplyToMouseEvent": {
                  "type": "boolean",
                  "default": true,
                  "title": "Apply to mouse_event",
                  "description": "This specifies whether to apply the global mouse multiplier values to the mouse_event method. This option only has any effect when 'Multi monitor functionality' is disabled."
                },
                "GlobalMouseMultiplierApplyToSetCursorPos": {
                  "type": "boolean",
                  "default": false,
                  "title": "Apply to SetCursorPos",
                  "description": "This argument specifies whether to apply the global mouse multiplier values to the SetCursorPos method. This option only has any effect when 'Multi monitor functionality' is disabled."
                },
                "GlobalMouseMultiplierApplyToCurrentMouseMoveMethod": {
                  "type": "boolean",
                  "default": false,
                  "title": "Apply to current mouse move method",
                  "description": "This argument specifies whether to apply the global mouse multiplier values to the current mouse move method (for example: if SetCursorPos is the current mouse move method, the multiplier will apply to SetCursorPos). If this is set to true, the inputs 'Apply to mouse_event' and 'Apply to SetCursorPos' are ignored. This option only has any effect when 'Multi monitor functionality' is disabled."
                },
                "JavaCoordinateSystem": {
                  "type": "string",
                  "default": "NotSet",
                  "title": "Java coordinate system",
                  "description": "Set to 'Virtual' (the default and the only available option in IA-Connect 9.3 and earlier) to inform the Agent that the Java Access Bridge is providing virtual (DPI scaled) coordinates. Set to 'Physical' to inform the Agent that the Java Access Bridge is providing physical coordinates (which map directly to pixels). Set to 'Not set' (NotSet) to make no change.",
                  "enum": [
                    "NotSet",
                    "Virtual",
                    "Physical"
                  ],
                  "x-ms-enum-values": [
                    {
                      "value": "NotSet",
                      "displayName": "Not set"
                    },
                    {
                      "value": "Virtual",
                      "displayName": "Virtual"
                    },
                    {
                      "value": "Physical",
                      "displayName": "Physical"
                    }
                  ]
                },
                "SAPGUICoordinateSystem": {
                  "type": "string",
                  "default": "NotSet",
                  "title": "SAP GUI coordinate system",
                  "description": "Set to 'Virtual' (the default and the only available option in IA-Connect 9.3 and earlier) to inform the Agent that the SAP GUI scripting API is providing virtual (DPI scaled) coordinates. Set to 'Physical' to inform the Agent that the SAP GUI scripting API is providing physical coordinates (which map directly to pixels). Set to 'Not set' (NotSet) to make no change.",
                  "enum": [
                    "NotSet",
                    "Virtual",
                    "Physical"
                  ],
                  "x-ms-enum-values": [
                    {
                      "value": "NotSet",
                      "displayName": "Not set"
                    },
                    {
                      "value": "Virtual",
                      "displayName": "Virtual"
                    },
                    {
                      "value": "Physical",
                      "displayName": "Physical"
                    }
                  ]
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "SetAgentGlobalCoordinateConfigurationResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "SetAgentGlobalCoordinateConfiguration"
      }
    },
    "/DriverControl/GetAgentGlobalCoordinateConfiguration": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get IA-Connect Agent global coordinate configuration",
        "description": "Retrieves the configuration of the IA-Connect Agent global coordinate system configuration, which is used to display element locations (for example: during mouse inspection) and calculate mouse positions (for example: when performing global mouse actions).",
        "parameters": [
          {
            "in": "body",
            "name": "GetAgentGlobalCoordinateConfiguration",
            "description": "Inputs for IA-Connect GetAgentGlobalCoordinateConfiguration action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "MultiMonitorFunctionality": {
                  "type": "string",
                  "title": "Multi monitor functionality",
                  "description": "Returns 'PrimaryMonitor' if the IA-Connect Agent is currently configured to only support highlighting elements and performing global mouse actions on the primary display device. Returns 'MultiMonitor' if the IA-Connect Agent will highlight elements on all monitors (the default since IA-Connect 9.4)."
                },
                "AutoSetMouseInspectionMultiplier": {
                  "type": "boolean",
                  "title": "Auto set mouse inspection multiplier",
                  "description": "Returns true if the IA-Connect Agent automatically calculates the mouse inspection multiplier on the primary display device at Agent startup and every time mouse inspection is performed (the default since IA-Connect 9.4). Returns false if the IA-Connect Agent requires the mouse inspection multiplier to be set manually (the only available option in IA-Connect 9.3 and earlier). This option only has any effect when multi-monitor mode is disabled."
                },
                "AutoSetGlobalMouseMultiplier": {
                  "type": "boolean",
                  "title": "Auto set global mouse multiplier",
                  "description": "Returns true if the IA-Connect Agent automatically calculates the global mouse movement multiplier on the primary display device at Agent startup and every time mouse inspection is performed (the default since IA-Connect 9.4). Returns false if the IA-Connect Agent requires the global mouse movement multiplier to be set manually (the only available option in IA-Connect 9.3 and earlier). This option only has any effect when multi-monitor mode is disabled."
                },
                "MouseInspectionXMultiplier": {
                  "type": "number",
                  "format": "double",
                  "title": "Mouse inspection X multiplier",
                  "description": "The current horizontal (X) mouse inspection multiplier (for when the Agent highlights what is under the mouse). For example: If IA-Connect is displaying the inspection rectangle at half the actual mouse X location, this value will be 0.5. The multiplier only has any effect when 'Multi monitor functionality' is disabled, since multipliers are calculated dynamically when the IA-Connect Agent is configured to be multi-monitor aware."
                },
                "MouseInspectionYMultiplier": {
                  "type": "number",
                  "format": "double",
                  "title": "Mouse inspection Y multiplier",
                  "description": "The current vertical (Y) mouse inspection multiplier (for when the Agent highlights what is under the mouse). For example: If IA-Connect is displaying the inspection rectangle at half the actual mouse Y location, this value will be 0.5. The multiplier only has any effect when 'Multi monitor functionality' is disabled, since multipliers are calculated dynamically when the IA-Connect Agent is configured to be multi-monitor aware."
                },
                "GlobalMouseXMultiplier": {
                  "type": "number",
                  "format": "double",
                  "title": "Global mouse X multiplier",
                  "description": "The current horizontal (X) global mouse movement multiplier (for when the Agent moves the mouse). The multiplier only has any effect when 'Multi monitor functionality' is disabled, since multipliers are calculated dynamically when the IA-Connect Agent is configured to be multi-monitor aware."
                },
                "GlobalMouseYMultiplier": {
                  "type": "number",
                  "format": "double",
                  "title": "Global mouse Y multiplier",
                  "description": "The current vertical (Y) global mouse movement multiplier (for when the Agent moves the mouse). The multiplier only has any effect when 'Multi monitor functionality' is disabled, since multipliers are calculated dynamically when the IA-Connect Agent is configured to be multi-monitor aware."
                },
                "GlobalMouseMoveMethod": {
                  "type": "string",
                  "title": "Global mouse move method",
                  "description": "Returns the current global mouse movement method (either mouse_event or setcursorpos)."
                },
                "JavaCoordinateSystem": {
                  "type": "string",
                  "title": "Java coordinate system",
                  "description": "Returns the current Java coordinate system which can be 'Virtual' (the default) or 'Physical' (new in IA-Connect 9.4). Virtual coordinates are DPI scaled whereas physical coordinates map directly to pixels. This value should be set to whatever coordinate system is being presented by the Java Access Bridge."
                },
                "SAPGUICoordinateSystem": {
                  "type": "string",
                  "title": "SAP GUI coordinate system",
                  "description": "Returns the current SAP GUI scripting API coordinate system which can be 'Virtual' (the default) or 'Physical' (new in IA-Connect 9.4). Virtual coordinates are DPI scaled whereas physical coordinates map directly to pixels. This value should be set to whatever coordinate system is being presented by the SAP GUI scripting API."
                }
              }
            }
          }
        },
        "operationId": "GetAgentGlobalCoordinateConfiguration"
      }
    },
    "/DriverControl/GetAgentThreadStatus": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Retrieve the status of an Agent thread",
        "description": "Retrieves the status of an Agent thread and optionally retrieve the thread output data. An Agent thread can be used to run certain actions in a thread, permitting the actions to run for a long time (longer than the RPA timeout) or to run in parallel with other actions.",
        "parameters": [
          {
            "in": "body",
            "name": "GetAgentThreadStatus",
            "description": "Inputs for IA-Connect GetAgentThreadStatus action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ThreadId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Thread Id",
                  "description": "If you previously ran an Agent action as a thread, provide the thread Id to retrieve the status of the thread. This thread Id will have been provided as an output of the action previous run as a thread."
                },
                "RetrieveThreadOutputData": {
                  "type": "boolean",
                  "default": false,
                  "title": "Retrieve thread output data",
                  "description": "Set to true to retrieve the thread output data in JSON format. It is recommended to retrieve thread output data by calling the same action used to create the thread, setting the input 'Retrieve output data for thread Id' to the thread Id, but this option allows you to directly retrieve the thread output data and optionally not delete the data."
                },
                "ClearOutputDataFromMemoryOnceRead": {
                  "type": "boolean",
                  "default": true,
                  "title": "Delete thread after output data retrieved",
                  "description": "If the thread has completed successfully and the output data was retrieved (see the input 'Retrieve thread output data'), set this input to true to delete the thread after the results have been returned. This will delete the thread output data and the thread itself, so you will be unable to query the thread again.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ThreadId",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ThreadStarted": {
                  "type": "boolean",
                  "title": "Thread has started",
                  "description": "True if the thread has started. False if the thread hasn't started yet, which would suggest that something has gone wrong since the thread starts immediately."
                },
                "ThreadRunning": {
                  "type": "boolean",
                  "title": "Thread is running",
                  "description": "True if the thread is currently running. False if either the thread never started (highly unlikely) or if the thread has now completed."
                },
                "ThreadCompleted": {
                  "type": "boolean",
                  "title": "Thread is completed",
                  "description": "True if the thread has completed. False if either the thread never started (highly unlikely) or if the thread is still running."
                },
                "ThreadSuccess": {
                  "type": "boolean",
                  "title": "Thread successful",
                  "description": "True if the thread has successfully completed. False if the thread never started (highly unlikely), the thread is still running or if the thread failed."
                },
                "ThreadRuntimeInSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Thread runtime in seconds",
                  "description": "The total number of seconds the thread has been running."
                },
                "IAConnectActionName": {
                  "type": "string",
                  "title": "IA-Connect action name",
                  "description": "The internal name of the IA-Connect Agent action being run as a thread."
                },
                "ThreadStatusMessage": {
                  "type": "string",
                  "title": "Thread status message",
                  "description": "A text string describing the status of the thread. This message is calculated from the ThreadStarted,ThreadRunning,ThreadCompleted,ThreadSuccess properties. This text string is language independent (it will not change to match locale)."
                },
                "ThreadErrorMessage": {
                  "type": "string",
                  "title": "Thread error message",
                  "description": "If the thread has failed, this output contains the error message."
                },
                "ThreadOutputJSON": {
                  "type": "string",
                  "title": "Thread output data JSON",
                  "description": "If 'Retrieve thread output data' is set to true, this output holds the raw thread output data in JSON format."
                }
              }
            }
          }
        },
        "operationId": "GetAgentThreadStatus"
      }
    },
    "/DriverControl/WaitForAgentThreadToCompleteSuccessfully": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wait for Agent thread to complete successfully",
        "description": "Waits for an Agent thread to complete and optionally retrieve the thread output data. An Agent thread can be used to run certain actions in a thread, permitting the actions to run for a long time (longer than the RPA timeout) or to run in parallel with other actions. If the Agent thread completes, but in failure, an exception will be raised.",
        "parameters": [
          {
            "in": "body",
            "name": "WaitForAgentThreadToCompleteSuccessfully",
            "description": "Inputs for IA-Connect WaitForAgentThreadToCompleteSuccessfully action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ThreadId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Thread Id",
                  "description": "If you previously ran an Agent action as a thread, provide the thread Id to retrieve the status of the thread. This thread Id will have been provided as an output of the action previous run as a thread."
                },
                "SecondsToWaitForThread": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Seconds to wait for thread",
                  "description": "How many seconds to wait for the thread to complete. If the thread hasn't completed in this time, an exception will be raised (unless 'Raise exception if thread not completed' is set to false)."
                },
                "RetrieveThreadOutputData": {
                  "type": "boolean",
                  "default": false,
                  "title": "Retrieve thread output data",
                  "description": "Set to true to retrieve the thread output data in JSON format. It is recommended to retrieve thread output data by calling the same action used to create the thread, setting the input 'Retrieve output data for thread Id' to the thread Id, but this option allows you to directly retrieve the thread output data and optionally not delete the data."
                },
                "ClearOutputDataFromMemoryOnceRead": {
                  "type": "boolean",
                  "default": true,
                  "title": "Delete thread after output data retrieved",
                  "description": "If the thread has completed successfully and the output data was retrieved (see the input 'Retrieve thread output data'), set this input to true to delete the thread after the results have been returned. This will delete the thread output data and the thread itself, so you will be unable to query the thread again.",
                  "x-ms-visibility": "advanced"
                },
                "RaiseExceptionIfThreadNotCompleted": {
                  "type": "boolean",
                  "default": true,
                  "title": "Raise exception if thread not completed",
                  "description": "If set to true and the thread hasn't completed in the specified time, an exception will be raised. If set to false, this action will wait up to the requested time (for the thread to complete) and report the thread status (see the outputs 'Thread is running' etc). An exception will always be raised if the thread completes, but in failure.",
                  "x-ms-visibility": "advanced"
                },
                "RaiseExceptionIfThreadError": {
                  "type": "boolean",
                  "default": true,
                  "title": "Raise exception if thread error",
                  "description": "If set to true (the default behaviour) and the thread has an error condition (thread completed but not successful), an exception will be raised, and the thread will be deleted. If set to false, the error will be stored in the output 'Thread error message' and the thread will not be deleted (you should delete the thread using the action 'Delete an Agent thread' when appropriate).",
                  "x-ms-visibility": "advanced"
                },
                "SecondsToWaitPerCall": {
                  "type": "integer",
                  "format": "int32",
                  "default": 5,
                  "title": "Seconds to wait per call",
                  "description": "The 'Seconds to wait for thread' will be broken down into smaller time slices to avoid timeouts. This optional input allows you to specify the size of the smaller time slice. Do not set to a value larger than 80% of the RPA timeout, or you may receive timeout errors.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ThreadId",
                "SecondsToWaitForThread",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ThreadStarted": {
                  "type": "boolean",
                  "title": "Thread has started",
                  "description": "True if the thread has started. False if the thread hasn't started yet, which would suggest that something has gone wrong since the thread starts immediately. Only useful if 'Raise exception if thread not completed' is set to false, since otherwise an exception will be raised if the thread hasn't completed in the specified wait time."
                },
                "ThreadRunning": {
                  "type": "boolean",
                  "title": "Thread is running",
                  "description": "True if the thread is currently running. False if either the thread never started (highly unlikely) or if the thread has now completed. Only useful if 'Raise exception if thread not completed' is set to false, since otherwise an exception will be raised if the thread hasn't completed in the specified wait time."
                },
                "ThreadCompleted": {
                  "type": "boolean",
                  "title": "Thread is completed",
                  "description": "True if the thread has completed. False if either the thread never started (highly unlikely) or if the thread is still running. Only useful if 'Raise exception if thread not completed' is set to false, since otherwise an exception will be raised if the thread hasn't completed in the specified wait time."
                },
                "ThreadSuccess": {
                  "type": "boolean",
                  "title": "Thread successful",
                  "description": "True if the thread has successfully completed. False if the thread never started (highly unlikely), the thread is still running or if the thread failed. Only useful if 'Raise exception if thread not completed' is set to false, since otherwise an exception will be raised if the thread hasn't completed in the specified wait time."
                },
                "ThreadRuntimeInSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Thread runtime in seconds",
                  "description": "The total number of seconds the thread has been running."
                },
                "IAConnectActionName": {
                  "type": "string",
                  "title": "IA-Connect action name",
                  "description": "The internal name of the IA-Connect Agent action being run as a thread."
                },
                "ThreadStatusMessage": {
                  "type": "string",
                  "title": "Thread status message",
                  "description": "A text string describing the status of the thread. This message is calculated from the ThreadStarted,ThreadRunning,ThreadCompleted,ThreadSuccess properties. This text string is language independent (it will not change to match locale)."
                },
                "ThreadErrorMessage": {
                  "type": "string",
                  "title": "Thread error message",
                  "description": "If the thread has failed, this output contains the error message. Only useful if 'Raise exception if thread error' is set to false, since otherwise an exception will be raised if the thread has an error."
                },
                "ThreadOutputJSON": {
                  "type": "string",
                  "title": "Thread output data JSON",
                  "description": "If 'Retrieve thread output data' is set to true, this output holds the raw thread output data in JSON format."
                }
              }
            }
          }
        },
        "operationId": "WaitForAgentThreadToCompleteSuccessfully"
      }
    },
    "/DriverControl/GetAgentThreads": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get Agent threads",
        "description": "Returns a list of Agent threads. An Agent thread can be used to run certain actions in a thread, permitting the actions to run for a long time (longer than the RPA timeout) or to run in parallel with other actions. Typically, once an Agent thread has completed and its data retrieved, the Agent thread is deleted and won't appear on the list of threads.",
        "parameters": [
          {
            "in": "body",
            "name": "GetAgentThreads",
            "description": "Inputs for IA-Connect GetAgentThreads action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SortOrder": {
                  "type": "string",
                  "title": "Sort order",
                  "description": "The sort order for the output list of Agent threads. Supported sort orders are 'None', 'ThreadStartTime', 'ThreadStartTime_Desc', 'ThreadEndTime', 'ThreadEndTime_Desc', 'ThreadId', 'ThreadId_Desc', 'ThreadActionName', 'ThreadActionName_Desc', 'ThreadRuntime', 'ThreadRuntime_Desc'.",
                  "enum": [
                    "None",
                    "ThreadStartTime",
                    "ThreadStartTime_Desc",
                    "ThreadEndTime",
                    "ThreadEndTime_Desc",
                    "ThreadId",
                    "ThreadId_Desc",
                    "ThreadActionName",
                    "ThreadActionName_Desc",
                    "ThreadRuntime",
                    "ThreadRuntime_Desc"
                  ],
                  "x-ms-enum-values": [
                    {
                      "value": "None",
                      "displayName": "None"
                    },
                    {
                      "value": "ThreadStartTime",
                      "displayName": "Thread start time"
                    },
                    {
                      "value": "ThreadStartTime_Desc",
                      "displayName": "Thread start time descending"
                    },
                    {
                      "value": "ThreadEndTime",
                      "displayName": "Thread end time"
                    },
                    {
                      "value": "ThreadEndTime_Desc",
                      "displayName": "Thread end time descending"
                    },
                    {
                      "value": "ThreadId",
                      "displayName": "Thread Id"
                    },
                    {
                      "value": "ThreadId_Desc",
                      "displayName": "Thread Id descending"
                    },
                    {
                      "value": "ThreadActionName",
                      "displayName": "Thread action name"
                    },
                    {
                      "value": "ThreadActionName_Desc",
                      "displayName": "Thread action name descending"
                    },
                    {
                      "value": "ThreadRuntime",
                      "displayName": "Thread runtime"
                    },
                    {
                      "value": "ThreadRuntime_Desc",
                      "displayName": "Thread runtime descending"
                    }
                  ]
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfAgentThreads": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of Agent threads",
                  "description": "The number of Agent threads which are still running or available for retrieval. Typically, once an Agent thread has completed and its data retrieved, the Agent thread is deleted and won't appear on the list of threads."
                },
                "AgentThreads": {
                  "type": "array",
                  "title": "Agent threads",
                  "description": "The list of Agent threads and all available thread information (except the internal thread data).",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ThreadId": {
                        "type": "integer"
                      },
                      "IAConnectActionName": {
                        "type": "string"
                      },
                      "ThreadStartDateTimeUTC": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "ThreadCompletedDateTimeUTC": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "ThreadRuntimeInSeconds": {
                        "type": "integer"
                      },
                      "ThreadStarted": {
                        "type": "boolean"
                      },
                      "ThreadRunning": {
                        "type": "boolean"
                      },
                      "ThreadCompleted": {
                        "type": "boolean"
                      },
                      "ThreadSuccess": {
                        "type": "boolean"
                      },
                      "ThreadStatusMessage": {
                        "type": "string"
                      },
                      "ThreadErrorMessage": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "GetAgentThreads"
      }
    },
    "/DriverControl/KillAgentThread": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Kill an Agent thread",
        "description": "Kills (terminates, aborts) an Agent thread. An Agent thread can be used to run certain actions in a thread, permitting the actions to run for a long time (longer than the RPA timeout) or to run in parallel with other actions. The Agent thread is not deleted (use the action 'Delete an Agent thread' to delete threads) to allow any processes or flows monitoring the Agent thread to receive the 'IA-Connect Agent thread has been aborted' error.",
        "parameters": [
          {
            "in": "body",
            "name": "KillAgentThread",
            "description": "Inputs for IA-Connect KillAgentThread action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ThreadId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Thread Id",
                  "description": "If you previously ran an Agent action as a thread, provide the thread Id to terminate the thread (permanently stop the thread from running). This thread Id will have been provided as an output of the action previous run as a thread."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ThreadId",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "KillAgentThreadResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "KillAgentThread"
      }
    },
    "/DriverControl/DeleteAgentThread": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete an Agent thread",
        "description": "Deletes an Agent thread, or all Agent threads, killing (terminating, aborting) the thread first, if it is still running. An Agent thread can be used to run certain actions in a thread, permitting the actions to run for a long time (longer than the RPA timeout) or to run in parallel with other actions. Processes or flows monitoring the Agent thread will receive an 'Agent thread Id does not exist' error.",
        "parameters": [
          {
            "in": "body",
            "name": "DeleteAgentThread",
            "description": "Inputs for IA-Connect DeleteAgentThread action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ThreadId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Thread Id",
                  "description": "If you previously ran an Agent action as a thread, provide the thread Id to terminate and delete the thread. This thread Id will have been provided as an output of the action previous run as a thread. If the specified Agent thread Id does not exist, an exception will be raised."
                },
                "DeleteAllAgentThreads": {
                  "type": "boolean",
                  "default": false,
                  "title": "Delete all Agent threads",
                  "description": "Set to true to delete all Agent threads. Set to false (the default) to delete a single Agent thread specified by the 'Thread Id' input."
                },
                "RaiseExceptionIfAgentThreadFailsToDelete": {
                  "type": "boolean",
                  "default": false,
                  "title": "Raise exception if Agent thread fails to delete",
                  "description": "Set to true to raise an exception if an Agent thread fails to delete. Note that this might cause an exception to be raised if an Agent thread completes while issuing this action (since it will no longer exist at the point of deletion). Set to false (the default) to ignore errors while deleting Agent threads. The output 'Number of Agent threads deleted' will report how many Agent threads were deleted."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfAgentThreadsDeleted": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of Agent threads deleted",
                  "description": "If 'Delete all Agent threads' is true, this output will hold the number of Agent threads deleted (0 or higher). If 'Delete all Agent threads' is false and an Agent thread Id was provided, this output will be set to 0 or 1."
                }
              }
            }
          }
        },
        "operationId": "DeleteAgentThread"
      }
    },
    "/FileManagement/FileExists": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Does file exist",
        "description": "Reports true or false as to whether a file exists on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "FileExists",
            "description": "Inputs for IA-Connect FileExists action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Filename": {
                  "type": "string",
                  "title": "File path",
                  "description": "The full path to the file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Filename",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "FileExists": {
                  "type": "boolean",
                  "title": "File exists",
                  "description": "Returns true if the file exists, or false if not."
                }
              }
            }
          }
        },
        "operationId": "FileExists"
      }
    },
    "/FileManagement/DirectoryExists": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Does directory exist",
        "description": "Reports true or false as to whether a directory (folder) exists on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "DirectoryExists",
            "description": "Inputs for IA-Connect DirectoryExists action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DirectoryPath": {
                  "type": "string",
                  "title": "Directory path",
                  "description": "The full path to the directory (folder). This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "DirectoryPath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "DirectoryExists": {
                  "type": "boolean",
                  "title": "Directory exists",
                  "description": "Returns true if the directory (folder) exists, or false if not."
                }
              }
            }
          }
        },
        "operationId": "DirectoryExists"
      }
    },
    "/FileManagement/DeleteFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete file",
        "description": "Deletes a file on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "DeleteFile",
            "description": "Inputs for IA-Connect DeleteFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Filename": {
                  "type": "string",
                  "title": "File path",
                  "description": "The full path to the file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Filename",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "DeleteFile"
      }
    },
    "/FileManagement/DeleteDirectory": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete directory",
        "description": "Deletes a directory (folder) on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "DeleteDirectory",
            "description": "Inputs for IA-Connect DeleteDirectory action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DirectoryPath": {
                  "type": "string",
                  "title": "Directory path",
                  "description": "The full path to the directory (folder). This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Recursive": {
                  "type": "boolean",
                  "default": false,
                  "title": "Recursive",
                  "description": "Should subdirectories (subfolders) and files in the directory also be deleted?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "DirectoryPath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "DeleteDirectory"
      }
    },
    "/FileManagement/PurgeDirectory": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Purge directory",
        "description": "Purges a directory (folder) on the computer where the IA-Connect Agent is running, removing all files stored within the directory.",
        "parameters": [
          {
            "in": "body",
            "name": "PurgeDirectory",
            "description": "Inputs for IA-Connect PurgeDirectory action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DirectoryPath": {
                  "type": "string",
                  "title": "Directory path",
                  "description": "The full path to the directory (folder). This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Recursive": {
                  "type": "boolean",
                  "default": false,
                  "title": "Recursive",
                  "description": "Should all subfolders also be purged?"
                },
                "DeleteTopLevel": {
                  "type": "boolean",
                  "default": false,
                  "title": "Delete top level",
                  "description": "Should the top level folder also be deleted?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "DirectoryPath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "PurgeDirectory"
      }
    },
    "/FileManagement/CopyFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Copy file",
        "description": "Copies a file on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "CopyFile",
            "description": "Inputs for IA-Connect CopyFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SourceFilePath": {
                  "type": "string",
                  "title": "Source file path",
                  "description": "The full path to the source file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "DestFilePath": {
                  "type": "string",
                  "title": "Destination file path",
                  "description": "The full path to the destination where the file should be copied to. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SourceFilePath",
                "DestFilePath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "CopyFile"
      }
    },
    "/FileManagement/MoveFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Move file",
        "description": "Moves a file on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "MoveFile",
            "description": "Inputs for IA-Connect MoveFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SourceFilePath": {
                  "type": "string",
                  "title": "Source file path",
                  "description": "The full path to the source file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "DestFilePath": {
                  "type": "string",
                  "title": "Destination file path",
                  "description": "The full path to the destination where the file should be moved to. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SourceFilePath",
                "DestFilePath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "MoveFile"
      }
    },
    "/FileManagement/CreateDirectory": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create directory",
        "description": "Creates a directory (folder) on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "CreateDirectory",
            "description": "Inputs for IA-Connect CreateDirectory action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DirectoryPath": {
                  "type": "string",
                  "title": "Directory path",
                  "description": "The full path to the directory (folder). This must be accessible from the session where the IA-Connect Agent is running."
                },
                "ErrorIfAlreadyExists": {
                  "type": "boolean",
                  "default": false,
                  "title": "Error if already exists",
                  "description": "Should IA-Connect raise an error if the directory (folder) already exists?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "DirectoryPath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "CreateDirectory"
      }
    },
    "/FileManagement/GetFileSize": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get file size",
        "description": "Returns the size (in bytes) of a file on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "GetFileSize",
            "description": "Inputs for IA-Connect GetFileSize action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Filename": {
                  "type": "string",
                  "title": "File path",
                  "description": "The full path to the file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Filename",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "FileSize": {
                  "type": "integer",
                  "format": "int64",
                  "title": "File size",
                  "description": "The size of the file, in bytes."
                }
              }
            }
          }
        },
        "operationId": "GetFileSize"
      }
    },
    "/FileManagement/WriteTextFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Write text file",
        "description": "Creates a text file on the computer where the IA-Connect Agent is running and writes text into the file.",
        "parameters": [
          {
            "in": "body",
            "name": "WriteTextFile",
            "description": "Inputs for IA-Connect WriteTextFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Filename": {
                  "type": "string",
                  "title": "File path",
                  "description": "The full path to the file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "TextToWrite": {
                  "type": "string",
                  "title": "Text to write",
                  "description": "The text contents to be written into the file."
                },
                "AppendExistingFile": {
                  "type": "boolean",
                  "default": false,
                  "title": "Append existing file",
                  "description": "If the file already exists, should the new text to write be appended to the end of the existing file?"
                },
                "Encoding": {
                  "type": "string",
                  "title": "Encoding",
                  "description": "Provide the file encoding (Unicode, UTF8, UTF7 or ASCII) or leave blank for the default (UTF8).",
                  "enum": [
                    "Unicode",
                    "UTF8",
                    "UTF7",
                    "ASCII"
                  ],
                  "x-ms-visibility": "advanced"
                },
                "CreateFolderIfRequired": {
                  "type": "boolean",
                  "default": true,
                  "title": "Create folder if required",
                  "description": "If the folder to store the file in that was provided in the 'File path' parameter does not exist, should this folder be created?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Filename",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "WriteTextFile"
      }
    },
    "/FileManagement/ReadAllTextFromFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Read all text from file",
        "description": "Reads the text contents of a file on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "ReadAllTextFromFile",
            "description": "Inputs for IA-Connect ReadAllTextFromFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Filename": {
                  "type": "string",
                  "title": "File path",
                  "description": "The full path to the file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Filename",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "FileTextContents": {
                  "type": "string",
                  "title": "File text contents",
                  "description": "The text contents of the file."
                }
              }
            }
          }
        },
        "operationId": "ReadAllTextFromFile"
      }
    },
    "/FileManagement/GetFiles": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get files",
        "description": "Returns a list of files in a folder (matching a CSV list of patterns) on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "GetFiles",
            "description": "Inputs for IA-Connect GetFiles action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DirectoryPath": {
                  "type": "string",
                  "title": "Directory path",
                  "description": "The full path to the directory (folder). This must be accessible from the session where the IA-Connect Agent is running."
                },
                "PatternsCSV": {
                  "type": "string",
                  "title": "Patterns CSV",
                  "description": "A comma separated list of file patterns to match, for example *.* for all files or '*.txt,*.docx' for files with either a .txt or .docx extension."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "DirectoryPath",
                "PatternsCSV",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "FilesJSON": {
                  "type": "string",
                  "title": "Files JSON",
                  "description": "A list of files contained within the folder, in JSON format."
                },
                "NumberOfFilesReadSuccessfully": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of files read successfully",
                  "description": "The number of files that were read successfully."
                },
                "NumberOfFilesFailedToRead": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of files failed to read",
                  "description": "The number of files that could not be read."
                }
              }
            }
          }
        },
        "operationId": "GetFiles"
      }
    },
    "/FileManagement/GetFolders": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get folders",
        "description": "Returns all sub-folders within a specified folder on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "GetFolders",
            "description": "Inputs for IA-Connect GetFolders action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DirectoryPath": {
                  "type": "string",
                  "title": "Directory path",
                  "description": "The full path to the directory (folder). This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "DirectoryPath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "FoldersJSON": {
                  "type": "string",
                  "title": "Folders JSON",
                  "description": "A list of subfolders contained within the folder, in JSON format."
                },
                "NumberOfFoldersReadSuccessfully": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of folders read successfully",
                  "description": "The number of subfolders that were read successfully."
                },
                "NumberOfFoldersFailedToRead": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of folders failed to read",
                  "description": "The number of subfolders that could not be read."
                }
              }
            }
          }
        },
        "operationId": "GetFolders"
      }
    },
    "/FileManagement/DeleteFiles": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete files",
        "description": "Deletes files within a specified folder matching a pattern on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "DeleteFiles",
            "description": "Inputs for IA-Connect DeleteFiles action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DirectoryPath": {
                  "type": "string",
                  "title": "Directory path",
                  "description": "The full path to the directory (folder). This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Pattern": {
                  "type": "string",
                  "title": "Pattern",
                  "description": "A pattern to match against files to be deleted, for example *.* for all files or *.txt for files with a .txt extension."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "DirectoryPath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfFilesDeleted": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of files deleted",
                  "description": "The number of files that were deleted successfully."
                },
                "NumberOfFilesFailedToDelete": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of files failed to delete",
                  "description": "The number of files that could not be deleted."
                }
              }
            }
          }
        },
        "operationId": "DeleteFiles"
      }
    },
    "/FileManagement/GetDiskFreeSpace": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get disk free space",
        "description": "Returns the amount of free space for a specified disk on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "GetDiskFreeSpace",
            "description": "Inputs for IA-Connect GetDiskFreeSpace action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DriveLetter": {
                  "type": "string",
                  "title": "Drive letter",
                  "description": "The drive letter of the disk to check."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "DriveLetter",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "FreeSpaceBytes": {
                  "type": "integer",
                  "format": "int64",
                  "title": "Disk free space bytes",
                  "description": "The amount of free disk space, in bytes."
                },
                "FreeSpaceKB": {
                  "type": "integer",
                  "format": "int64",
                  "title": "Disk free space KB",
                  "description": "The amount of free disk space, in kilobytes."
                },
                "FreeSpaceMB": {
                  "type": "integer",
                  "format": "int64",
                  "title": "Disk free space MB",
                  "description": "The amount of free disk space, in megabytes."
                },
                "FreeSpaceGB": {
                  "type": "integer",
                  "format": "int64",
                  "title": "Disk free space GB",
                  "description": "The amount of free disk space, in gigabytes."
                }
              }
            }
          }
        },
        "operationId": "GetDiskFreeSpace"
      }
    },
    "/FileManagement/GetListOfDrives": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get list of drives",
        "description": "Returns a list of drives on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "GetListOfDrives",
            "description": "Inputs for IA-Connect GetListOfDrives action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "DrivesJSON": {
                  "type": "string",
                  "title": "Drives JSON",
                  "description": "A list of drives on the computer where the IA-Connect Agent is running, in JSON format."
                }
              }
            }
          }
        },
        "operationId": "GetListOfDrives"
      }
    },
    "/FileManagement/DirectoryIsAccessible": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Is directory accessible",
        "description": "Returns whether a directory (folder) is accessible and whether permissions are restricting access to it on the computer where the IA-Connect Agent.",
        "parameters": [
          {
            "in": "body",
            "name": "DirectoryIsAccessible",
            "description": "Inputs for IA-Connect DirectoryIsAccessible action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DirectoryPath": {
                  "type": "string",
                  "title": "Directory path",
                  "description": "The full path to the directory (folder). This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "DirectoryPath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "DirectoryAccessible": {
                  "type": "boolean",
                  "title": "Directory accessible",
                  "description": "Returns true if the directory is accessible, or false if not."
                },
                "DirectoryAccessUnauthorised": {
                  "type": "boolean",
                  "title": "Directory access unauthorised",
                  "description": "Returns true if the directory is unaccessible as permissions are restricting access to it, or false if not."
                }
              }
            }
          }
        },
        "operationId": "DirectoryIsAccessible"
      }
    },
    "/FileManagement/GetCSVTextAsCollection": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get CSV text as collection",
        "description": "Returns a CSV file on the computer where the IA-Connect Agent is running as a collection (table). Only requires read only access to CSV file.",
        "parameters": [
          {
            "in": "body",
            "name": "GetCSVTextAsCollection",
            "description": "Inputs for IA-Connect GetCSVTextAsCollection action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "CSVFilePath": {
                  "type": "string",
                  "title": "CSV file path",
                  "description": "The full path to the CSV file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "FirstLineIsHeader": {
                  "type": "boolean",
                  "default": true,
                  "title": "First line is header",
                  "description": "Is the first line in the CSV file a header row?"
                },
                "TrimHeaders": {
                  "type": "boolean",
                  "default": true,
                  "title": "Trim headers",
                  "description": "Should the headers be trimmed to remove any leading or trailing whitespace?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "CSVFilePath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "CSVDataJSON": {
                  "type": "string",
                  "title": "CSV data JSON",
                  "description": "The contents of the CSV file, in JSON format."
                }
              }
            }
          }
        },
        "operationId": "GetCSVTextAsCollection"
      }
    },
    "/FileManagement/WriteCollectionToCSVFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Write to CSV file",
        "description": "Creates a CSV file on the computer where the IA-Connect Agent is running. The CSV file is created from a collection (table) or from a table in JSON format.",
        "parameters": [
          {
            "in": "body",
            "name": "WriteCollectionToCSVFile",
            "description": "Inputs for IA-Connect WriteCollectionToCSVFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "InputTable": {
                  "type": "array",
                  "title": "Properties",
                  "description": "A table of data to write to the CSV file.",
                  "items": {
                    "type": "object"
                  }
                },
                "InputTableJSON": {
                  "type": "string",
                  "title": "Input table JSON",
                  "description": "A table of data to write to the CSV file, in JSON format."
                },
                "CSVFilePath": {
                  "type": "string",
                  "title": "Output CSV file path",
                  "description": "The full path to the CSV file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "OutputEncoding": {
                  "type": "string",
                  "default": "UTF8",
                  "title": "Output encoding",
                  "description": "The text encoding format to use when writing to the CSV file. Supported encodings are UTF8, UTF7, Unicode and ASCII.",
                  "enum": [
                    "UTF8",
                    "UTF7",
                    "Unicode",
                    "ASCII"
                  ]
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "CSVFilePath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "WriteCollectionToCSVFileResult": {
                  "type": "boolean",
                  "title": "Command result",
                  "description": "The result of the command (success or failure)."
                },
                "ErrorMessage": {
                  "type": "string",
                  "title": "Error message",
                  "description": "If the command was not successful, this will contain the error message that was returned."
                }
              }
            }
          }
        },
        "operationId": "WriteCollectionToCSVFile"
      }
    },
    "/FileManagement/SetOwnerOnFolder": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set owner on folder",
        "description": "Sets the owner on a folder on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "SetOwnerOnFolder",
            "description": "Inputs for IA-Connect SetOwnerOnFolder action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "FolderPath": {
                  "type": "string",
                  "title": "Folder path",
                  "description": "The full path to the folder. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "UserIdentity": {
                  "type": "string",
                  "title": "User identity",
                  "description": "The identity of the user to be assigned ownership. This can be in the form 'username', 'DOMAIN\\username' or 'username@domainfqdn'."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "FolderPath",
                "UserIdentity",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetOwnerOnFolder"
      }
    },
    "/FileManagement/SetOwnerOnFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set owner on file",
        "description": "Sets the owner on a file on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "SetOwnerOnFile",
            "description": "Inputs for IA-Connect SetOwnerOnFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "FilePath": {
                  "type": "string",
                  "title": "File path",
                  "description": "The full path to the file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "UserIdentity": {
                  "type": "string",
                  "title": "User identity",
                  "description": "The identity of the user to be assigned ownership. This can be in the form 'username', 'DOMAIN\\username' or 'username@domainfqdn'."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "FilePath",
                "UserIdentity",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "SetOwnerOnFile"
      }
    },
    "/FileManagement/AddPermissionToFolder": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add permission to folder",
        "description": "Adds a permission to a folder on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "AddPermissionToFolder",
            "description": "Inputs for IA-Connect AddPermissionToFolder action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "FolderPath": {
                  "type": "string",
                  "title": "Folder path",
                  "description": "The full path to the folder. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Identity": {
                  "type": "string",
                  "title": "Identity",
                  "description": "The identity (e.g. a user, group or computer) to be assigned the permission. This can be in the form 'username', 'DOMAIN\\username' or 'username@domainfqdn'."
                },
                "Permission": {
                  "type": "string",
                  "default": "Read",
                  "title": "Permission",
                  "description": "Provide the permission to be assigned (Read, ReadAndExecute, Modify or FullControl) or leave blank for the default (Read).",
                  "enum": [
                    "Read",
                    "ReadAndExecute",
                    "Modify",
                    "FullControl"
                  ]
                },
                "ApplyToFolder": {
                  "type": "boolean",
                  "default": false,
                  "title": "Apply to folder",
                  "description": "Should the permission apply to the folder itself?"
                },
                "ApplyToSubFolders": {
                  "type": "boolean",
                  "default": true,
                  "title": "Apply to sub-folders",
                  "description": "Should the permission propagate to sub-folders?"
                },
                "ApplyToFiles": {
                  "type": "boolean",
                  "default": true,
                  "title": "Apply to files",
                  "description": "Should the permission apply to the files within the folder?"
                },
                "Deny": {
                  "type": "boolean",
                  "default": false,
                  "title": "Deny",
                  "description": "Is the permission being denied?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "FolderPath",
                "Identity",
                "Permission",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "AddPermissionToFolder"
      }
    },
    "/FileManagement/AddPermissionToFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add permission to file",
        "description": "Adds a permission to a file on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "AddPermissionToFile",
            "description": "Inputs for IA-Connect AddPermissionToFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "FilePath": {
                  "type": "string",
                  "title": "File path",
                  "description": "The full path to the file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Identity": {
                  "type": "string",
                  "title": "Identity",
                  "description": "The identity of the user or group to be assigned the permission. This can be in the form 'username', 'DOMAIN\\username' or 'username@domainfqdn'."
                },
                "Permission": {
                  "type": "string",
                  "default": "Read",
                  "title": "Permission",
                  "description": "Provide the permission to be assigned (Read, ReadAndExecute, Modify or FullControl) or leave blank for the default (Read).",
                  "enum": [
                    "Read",
                    "ReadAndExecute",
                    "Modify",
                    "FullControl"
                  ]
                },
                "Deny": {
                  "type": "boolean",
                  "default": false,
                  "title": "Deny",
                  "description": "Is the permission being denied?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "FilePath",
                "Identity",
                "Permission",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "AddPermissionToFile"
      }
    },
    "/FileManagement/BreakFolderSecurityInheritance": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Break folder security inheritance",
        "description": "Breaks security inheritance on a folder on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "BreakFolderSecurityInheritance",
            "description": "Inputs for IA-Connect BreakFolderSecurityInheritance action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "FolderPath": {
                  "type": "string",
                  "title": "Folder path",
                  "description": "The full path to the folder. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "ConvertInheritedToExplicit": {
                  "type": "boolean",
                  "default": true,
                  "title": "Convert inherited to explicit",
                  "description": "Should any currently inherited permissions be converted to explicit permissions?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "FolderPath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "BreakFolderSecurityInheritance"
      }
    },
    "/FileManagement/EnableFolderSecurityInheritance": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Enable folder security inheritance",
        "description": "Enables security inheritance on a folder on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "EnableFolderSecurityInheritance",
            "description": "Inputs for IA-Connect EnableFolderSecurityInheritance action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "FolderPath": {
                  "type": "string",
                  "title": "Folder path",
                  "description": "The full path to the folder. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "FolderPath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "EnableFolderSecurityInheritance"
      }
    },
    "/FileManagement/GetFolderSecurityPermissions": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get folder security permissions",
        "description": "Returns a list of permissions currently set on a folder on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "GetFolderSecurityPermissions",
            "description": "Inputs for IA-Connect GetFolderSecurityPermissions action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "FolderPath": {
                  "type": "string",
                  "title": "Folder path",
                  "description": "The full path to the folder. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "FolderPath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "SecurityPermissionsJSON": {
                  "type": "string",
                  "title": "Security permissions JSON",
                  "description": "The permissions currently set on the specified folder, in JSON format."
                }
              }
            }
          }
        },
        "operationId": "GetFolderSecurityPermissions"
      }
    },
    "/FileManagement/GetFileSecurityPermissions": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get file security permissions",
        "description": "Returns a list of permissions currently set on a file on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "GetFileSecurityPermissions",
            "description": "Inputs for IA-Connect GetFileSecurityPermissions action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "FilePath": {
                  "type": "string",
                  "title": "File path",
                  "description": "The full path to the file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "FilePath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "SecurityPermissionsJSON": {
                  "type": "string",
                  "title": "Security permissions JSON",
                  "description": "The permissions currently set on the specified file, in JSON format."
                }
              }
            }
          }
        },
        "operationId": "GetFileSecurityPermissions"
      }
    },
    "/FileManagement/RemoveIdentityFromFolderSecurity": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Remove identity from folder security",
        "description": "Removes an identity (e.g. a user, group or computer) from the security permissions on a folder on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "RemoveIdentityFromFolderSecurity",
            "description": "Inputs for IA-Connect RemoveIdentityFromFolderSecurity action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "FolderPath": {
                  "type": "string",
                  "title": "Folder path",
                  "description": "The full path to the folder. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "IdentityToRemove": {
                  "type": "string",
                  "title": "Identity to remove",
                  "description": "The identity of the user or group to be removed. This can be in the form 'username', 'DOMAIN\\username' or 'username@domainfqdn'."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "FolderPath",
                "IdentityToRemove",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "PermissionWasRemoved": {
                  "type": "boolean",
                  "title": "Permission was removed",
                  "description": "Returns true if the permission was removed successfully."
                }
              }
            }
          }
        },
        "operationId": "RemoveIdentityFromFolderSecurity"
      }
    },
    "/FileManagement/RemoveIdentityFromFileSecurity": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Remove identity from file security",
        "description": "Removes an identity (e.g. user, group or computer) from the security permissions on a file on the computer where the IA-Connect Agent is running.",
        "parameters": [
          {
            "in": "body",
            "name": "RemoveIdentityFromFileSecurity",
            "description": "Inputs for IA-Connect RemoveIdentityFromFileSecurity action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "FilePath": {
                  "type": "string",
                  "title": "File path",
                  "description": "The full path to the file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "IdentityToRemove": {
                  "type": "string",
                  "title": "Identity to remove",
                  "description": "The identity of the user or group to be removed. This can be in the form 'username', 'DOMAIN\\username' or 'username@domainfqdn'."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "FilePath",
                "IdentityToRemove",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "PermissionWasRemoved": {
                  "type": "boolean",
                  "title": "Permission was removed",
                  "description": "Returns true if the permission was removed successfully."
                }
              }
            }
          }
        },
        "operationId": "RemoveIdentityFromFileSecurity"
      }
    },
    "/FileManagement/CopyFileFromClientToServer": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Copy file from client to server",
        "description": "Copies a file from the local computer (running the IA-Connect Director) to the remote computer (running the IA-Connect Agent).",
        "parameters": [
          {
            "in": "body",
            "name": "CopyFileFromClientToServer",
            "description": "Inputs for IA-Connect CopyFileFromClientToServer action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ClientFilePath": {
                  "type": "string",
                  "title": "Client file path",
                  "description": "The file path to copy the file from (on the local computer running the IA-Connect Director)."
                },
                "ServerFilePath": {
                  "type": "string",
                  "title": "Server file path",
                  "description": "The file path to copy the file into (on the computer running the IA-Connect Agent)."
                },
                "Compress": {
                  "type": "boolean",
                  "default": true,
                  "title": "Compress",
                  "description": "Should the file be compressed when copying?",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ClientFilePath",
                "ServerFilePath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "CopyFileFromClientToServer"
      }
    },
    "/FileManagement/ReplaceVariableDataInINIFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Replace variable data in INI file",
        "description": "Updates a single variable in an INI file.",
        "parameters": [
          {
            "in": "body",
            "name": "ReplaceVariableDataInINIFile",
            "description": "Inputs for IA-Connect ReplaceVariableDataInINIFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "InputFilename": {
                  "type": "string",
                  "title": "INI file path",
                  "description": "The full path to the INI file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "OutputFilename": {
                  "type": "string",
                  "title": "Output INI file path",
                  "description": "If you want to write the updated INI file to an alternative file, enter the full path to the output file here. The input INI file will be unmodified - the output INI file will hold the changes."
                },
                "SearchSection": {
                  "type": "string",
                  "title": "INI search section",
                  "description": "The optional name of the section holding the variable to change."
                },
                "SearchVariable": {
                  "type": "string",
                  "title": "INI search variable name",
                  "description": "The name of the variable to update."
                },
                "ReplaceData": {
                  "type": "string",
                  "title": "Replacement data",
                  "description": "The replacement data to update the variable to."
                },
                "InputFilenameEncoding": {
                  "type": "string",
                  "title": "INI file encoding",
                  "description": "Provide the INI file encoding (Unicode, UTF8, UTF7 or ASCII) or specify the encoding value (e.g. 1252 for Western Europe)."
                },
                "CreateNewFileIfNotExists": {
                  "type": "boolean",
                  "default": true,
                  "title": "Create new file if input file does not exist",
                  "description": "If the input file does not exist, should a new one be created?"
                },
                "WriteSpaceBeforeEquals": {
                  "type": "boolean",
                  "default": true,
                  "title": "Write space before equals",
                  "description": "Should a space be written before the equals ( = ) sign?"
                },
                "WriteSpaceAfterEquals": {
                  "type": "boolean",
                  "default": true,
                  "title": "Write space after equals",
                  "description": "Should a space be written after the equals ( = ) sign?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "InputFilename",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "ReplaceVariableDataInINIFile"
      }
    },
    "/FileManagement/DownloadHTTPFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Download HTTP file",
        "description": "Downloads a file to the computer where the IA-Connect Agent is running using HTTP(S).",
        "parameters": [
          {
            "in": "body",
            "name": "DownloadHTTPFile",
            "description": "Inputs for IA-Connect DownloadHTTPFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "DownloadURL": {
                  "type": "string",
                  "title": "Download URL",
                  "description": "The HTTP or HTTPS download URL."
                },
                "SaveFilename": {
                  "type": "string",
                  "title": "Save file path",
                  "description": "The full path to the save filename. If this field is blank and you have specified 'Return contents as string' as True then the file will not be saved to the computer."
                },
                "OverwriteExistingFile": {
                  "type": "boolean",
                  "default": true,
                  "title": "Overwrite existing file",
                  "description": "If a file already exists with the name specified in the 'Save file path' input, should it be overwritten?"
                },
                "PassthroughAuthentication": {
                  "type": "boolean",
                  "default": false,
                  "title": "Passthrough authentication",
                  "description": "Should the user's credentials be passed on to the web server? This would typically only be used for internal Intranet sites.",
                  "x-ms-visibility": "advanced"
                },
                "UserAgent": {
                  "type": "string",
                  "default": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.193 Safari/537.36",
                  "title": "User Agent",
                  "description": "This allows you to set the User Agent reported to the web page. Typically this is not required and should only be changed if a webpage requires a particular Agent String.",
                  "x-ms-visibility": "advanced"
                },
                "Accept": {
                  "type": "string",
                  "default": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
                  "title": "Accept",
                  "description": "This parameter specifies which content types are supported. This should only be changed if the content you are downloading requires a different content type.",
                  "x-ms-visibility": "advanced"
                },
                "SupportTLS10": {
                  "type": "boolean",
                  "default": true,
                  "title": "Support TLS10",
                  "description": "Set to True to support TLS 1.0 encryption protocol.",
                  "x-ms-visibility": "advanced"
                },
                "SupportTLS11": {
                  "type": "boolean",
                  "default": true,
                  "title": "Support TLS11",
                  "description": "Set to True to support TLS 1.1 encryption protocol.",
                  "x-ms-visibility": "advanced"
                },
                "SupportTLS12": {
                  "type": "boolean",
                  "default": true,
                  "title": "Support TLS12",
                  "description": "Set to True to support TLS 1.2 encryption protocol.",
                  "x-ms-visibility": "advanced"
                },
                "AutoDecompressDeflate": {
                  "type": "boolean",
                  "default": true,
                  "title": "Auto decompress deflate",
                  "description": "Some web content is returned compressed using 'deflate' compression. Setting this value to True informs the web server that 'deflate' is supported and, if the content is sent using this compression, it will automatically be decompressed.",
                  "x-ms-visibility": "advanced"
                },
                "AutoDecompressGZIP": {
                  "type": "boolean",
                  "default": true,
                  "title": "Auto decompress GZip",
                  "description": "Some web content is returned compressed using 'GZIP' compression. Setting this value to True informs the web server that 'GZIP' is supported and, if the content is sent using this compression, it will automatically be decompressed.",
                  "x-ms-visibility": "advanced"
                },
                "ReturnContentsAsString": {
                  "type": "boolean",
                  "default": false,
                  "title": "Return contents as string",
                  "description": "Should the file contents be returned as a string?"
                },
                "ReturnContentEncoding": {
                  "type": "string",
                  "default": "UTF8",
                  "title": "Return content encoding",
                  "description": "The encoding of the downloaded content. This is only used if 'Return contents as string' is True and it defines the encoding of the downloaded content so it can be interpreted correctly.",
                  "enum": [
                    "ASCII",
                    "UTF7",
                    "UTF8",
                    "UTF16",
                    "UTF16BE"
                  ],
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "DownloadURL",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "DownloadFileContents": {
                  "type": "string",
                  "title": "Download file contents",
                  "description": "The contents of the downloaded file."
                }
              }
            }
          }
        },
        "operationId": "DownloadHTTPFile"
      }
    },
    "/FileManagement/UnZIPFile": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "UnZIP file",
        "description": "Unzips a file which has been compressed using ZIP compression.",
        "parameters": [
          {
            "in": "body",
            "name": "UnZIPFile",
            "description": "Inputs for IA-Connect UnZIPFile action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ZIPFilename": {
                  "type": "string",
                  "title": "ZIP file path",
                  "description": "The full path to the ZIP file to be unzipped. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "ExtractFolder": {
                  "type": "string",
                  "title": "Extract folder",
                  "description": "The folder path of the folder to extract the ZIP into. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "ExtractAllFilesToSingleFolder": {
                  "type": "boolean",
                  "default": false,
                  "title": "Extract all files to single folder",
                  "description": "If set to True, the folder structure inside the ZIP will be ignored and all files will be extracted to the specified folder.",
                  "x-ms-visibility": "advanced"
                },
                "IncludeFilesRegEx": {
                  "type": "string",
                  "title": "Include files regular expression",
                  "description": "An optional regular expression to allow you to specify which files should be extracted. Matches filename only.",
                  "x-ms-visibility": "advanced"
                },
                "ExcludeFilesRegEx": {
                  "type": "string",
                  "title": "Exclude files regular expression",
                  "description": "An optional regular expression to allow you to specify which files should be excluded from extraction. Matches filename only.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ZIPFilename",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "FilesExtractedSuccessfully": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of files extracted successfully",
                  "description": "The number of files that were extracted from the ZIP successfully."
                },
                "FilesFailedToExtract": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of files failed to extract",
                  "description": "The number of files that failed to extract from the ZIP."
                },
                "FilesExcluded": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of files excluded",
                  "description": "The number of files that were excluded (if using the 'Exclude files regular expression' input)."
                }
              }
            }
          }
        },
        "operationId": "UnZIPFile"
      }
    },
    "/FileManagement/AddFileToZIP": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add file to ZIP",
        "description": "ZIPs a file (stores the file into a compression archive).",
        "parameters": [
          {
            "in": "body",
            "name": "AddFileToZIP",
            "description": "Inputs for IA-Connect AddFileToZIP action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SourceFilenameToAddToZIP": {
                  "type": "string",
                  "title": "Source file path to add to ZIP",
                  "description": "The file path to the file to be added to the zip. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "OutputZIPFilename": {
                  "type": "string",
                  "title": "Output ZIP file path",
                  "description": "The file path that the ZIP should be output to. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "AddFilenameToFolderInZIP": {
                  "type": "string",
                  "title": "Add filename to folder in ZIP",
                  "description": "If you want to add the source file to a folder in the ZIP file, enter the folder name here."
                },
                "SourceFilenameToAddToZIPComment": {
                  "type": "string",
                  "title": "Source filename to add to ZIP comment",
                  "description": "An optional comment for this file added to the ZIP.",
                  "x-ms-visibility": "advanced"
                },
                "Compress": {
                  "type": "boolean",
                  "default": true,
                  "title": "Compress",
                  "description": "Should the file be compressed when zipping?",
                  "x-ms-visibility": "advanced"
                },
                "AddToExistingZIPFile": {
                  "type": "boolean",
                  "default": false,
                  "title": "Add to existing ZIP file",
                  "description": "Set to True to add to an existing ZIP file."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SourceFilenameToAddToZIP",
                "OutputZIPFilename",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "AddFileToZIP"
      }
    },
    "/FileManagement/AddFolderToZIP": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add folder to ZIP",
        "description": "ZIPs files in a folder into a ZIP file (stores the files into a compression archive).",
        "parameters": [
          {
            "in": "body",
            "name": "AddFolderToZIP",
            "description": "Inputs for IA-Connect AddFolderToZIP action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SourceFolderToAddToZIP": {
                  "type": "string",
                  "title": "Source folder to add to ZIP",
                  "description": "The path to the folder to be added to the zip. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "OutputZIPFilename": {
                  "type": "string",
                  "title": "Output ZIP file path",
                  "description": "The file path that the ZIP should be output to. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "AddFilesToFolderInZIP": {
                  "type": "string",
                  "title": "Add files to folder in ZIP",
                  "description": "If you want to add the source files to a folder in the ZIP file, enter the folder name here."
                },
                "Compress": {
                  "type": "boolean",
                  "default": true,
                  "title": "Compress",
                  "description": "Should the folder be compressed when zipping?",
                  "x-ms-visibility": "advanced"
                },
                "AddToExistingZIPFile": {
                  "type": "boolean",
                  "default": false,
                  "title": "Add to existing ZIP file",
                  "description": "Set to True to add to an existing ZIP file."
                },
                "IncludeSubfolders": {
                  "type": "boolean",
                  "default": true,
                  "title": "Include subfolders",
                  "description": "Should subfolders within the source folder also be added to the ZIP?"
                },
                "IncludeFilesRegEx": {
                  "type": "string",
                  "title": "Include files regular expression",
                  "description": "An optional regular expression to allow you to specify which files should be extracted. Matches filename only.",
                  "x-ms-visibility": "advanced"
                },
                "ExcludeFilesRegEx": {
                  "type": "string",
                  "title": "Exclude files regular expression",
                  "description": "An optional regular expression to allow you to specify which files should be excluded from extraction. Matches filename only.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SourceFolderToAddToZIP",
                "OutputZIPFilename",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "FilesAddedSuccessfully": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of files added successfully",
                  "description": "The number of files that were successfully added to the ZIP."
                },
                "FilesExcluded": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of files excluded",
                  "description": "The number of files that were excluded (if using the 'Exclude files regular expression' input)."
                }
              }
            }
          }
        },
        "operationId": "AddFolderToZIP"
      }
    },
    "/FileManagement/GetFileContentsAsBase64": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get file contents as Base64",
        "description": "Retrieve the contents of the specified file in Base64 format, a format suitable for transmission via API and easily converted back into the original text or binary format.",
        "parameters": [
          {
            "in": "body",
            "name": "GetFileContentsAsBase64",
            "description": "Inputs for IA-Connect GetFileContentsAsBase64 action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "FilePath": {
                  "type": "string",
                  "title": "File path",
                  "description": "The full path to the file. This must be accessible from the session where the IA-Connect Agent is running."
                },
                "Compress": {
                  "type": "boolean",
                  "default": false,
                  "title": "Compress",
                  "description": "Set to true to GZip compress the file contents before converting to Base64. The file is untouched, all operations are performed in memory. This feature is only useful if you are able to GUnzip the file contents after you have retrieved the Base64 (when decoding back to the original file contents text or binary data). Set to false if you are passing the Base64 directly to an action which accepts Base64 as input and doesn't have a GUnzip feature.",
                  "x-ms-visibility": "advanced"
                },
                "MaxFileSize": {
                  "type": "integer",
                  "format": "int64",
                  "default": 1024000,
                  "title": "Max file size",
                  "description": "The maximum size of the file, above which an exception will be raised instead of retrieving the file contents. This allows you to avoid the situation where the Agent is asked to retrieve a huge file, which will ultimately cause the action to time out. Set to -1 to disable the file size check."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "FilePath",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "FileContentsAsBase64": {
                  "type": "string",
                  "title": "File contents as Base64",
                  "description": "The file contents in Base64 format."
                }
              }
            }
          }
        },
        "operationId": "GetFileContentsAsBase64"
      }
    }
  },
  "definitions": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "RESTAPIKey"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": []
}