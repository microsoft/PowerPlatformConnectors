{
  "swagger": "2.0",
  "info": {
    "title": "Staffbase",
    "description": "With the Staffbase Connector, you bridge disparate tools and systems and integrate the Staffbase platform into your automated workflows. That include your employee app or intranet to automate processes, run tasks on a schedule, or notify users when events occur.",
    "version": "1.0",
    "contact": {
      "name": "Staffbase Support",
      "url": "https://www.staffbase.com",
      "email": "support@staffbase.com"
    }
  },
  "host": "powerautomateproxy-de1.staffbase.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/channels": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Total number of channels that are found."
                },
                "limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The amount of items that are returned."
                },
                "offset": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The current defined offset for getting the items starting at this number."
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "This is the ID of the channel."
                      },
                      "config": {
                        "type": "object",
                        "properties": {
                          "localization": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string",
                                  "description": "The channel title which is localized."
                                },
                                "locale": {
                                  "type": "string",
                                  "description": "This is the locale of channel title."
                                }
                              }
                            }
                          }
                        }
                      },
                      "spaceID": {
                        "type": "string",
                        "description": "The ID of the space where the channel is assigned to."
                      },
                      "created": {
                        "type": "string",
                        "description": "The created date of the channel."
                      },
                      "published": {
                        "type": "string",
                        "description": "The published date of the channel."
                      },
                      "updated": {
                        "type": "string",
                        "description": "The updated date of the channel."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Channels: Get a list of news channels",
        "description": "Get a list of news channels.",
        "operationId": "ChannelsGetList",
        "parameters": []
      }
    },
    "/channels/{channelID}/posts": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Total number of posts that are found."
                },
                "limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The amount of items that are returned."
                },
                "offset": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The current defined offset for getting the items starting at this number."
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/postData"
                  }
                }
              }
            }
          }
        },
        "operationId": "ChannelsGetPosts",
        "summary": "Channels: Get a list of posts within the specified channel",
        "description": "Get a list of posts within the specified channel.",
        "parameters": [
          {
            "name": "channelID",
            "in": "path",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "Insert channel ID here, e.g. retrieved by getChannels.",
            "x-ms-summary": "ChannelID"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The amount of items that should be returned (default and maximum 100).",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Define an offset for getting the items starting at this number.",
            "x-ms-summary": "Offset"
          }
        ],
        "x-ms-visibility": "important"
      },
      "post": {
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        },
        "consumes": [
          "application/json"
        ],
        "summary": "Channels: Send a post to specific channel",
        "description": "Send a post to specific news channel.",
        "operationId": "ChannelsPostPost",
        "x-ms-visibility": "important",
        "parameters": [{
            "name": "channelID",
            "in": "path",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "x-ms-summary": "ChannelID",
            "description": "Insert channel ID here."
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "externalID": {
                  "type": "string",
                  "description": "Optional: Enter an external ID here."
                },
                "contents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "locale": {
                        "type": "string",
                        "description": "Insert locale like, e.g. de_DE, en_US, etc."
                      },
                      "content": {
                        "type": "string",
                        "description": "Enter news content here."
                      },
                      "image": {
                        "type": "string",
                        "description": "Enter image link here.",
                        "title": "image (link)"
                      },
                      "teaser": {
                        "type": "string",
                        "description": "Enter your teaser here."
                      },
                      "title": {
                        "type": "string",
                        "description": "Enter your title here."
                      }
                    }
                  }
                },
                "published": {
                  "type": "string",
                  "description": "Enter your date published here."
                }
              }
            }
          }
        ]
      }
    },
    "/comments": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Total number of comments that are found."
                },
                "limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The amount of items that are returned."
                },
                "offset": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The current defined offset for getting the items starting at this number."
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "This is the ID of the comment."
                      },
                      "parentID": {
                        "type": "string",
                        "description": "The ID of the parent of the comment, can be either a post or a comment."
                      },
                      "parentType": {
                        "type": "string",
                        "description": "The parent type can be either a post or a comment."
                      },
                      "text": {
                        "type": "string",
                        "description": "This is the comments content / test itself.",
                        "title": "comment text"
                      },
                      "rootID": {
                        "type": "string",
                        "description": "This is the ID of the post this comment is related to",
                        "title": "post ID"
                      },
                      "author": {
                        "$ref": "#/definitions/authorObject"
                      },
                      "likes": {
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "format": "int32",
                            "description": "This is the number of comment likes."
                          },
                          "isLiked": {
                            "type": "string",
                            "description": "Is this comment liked?",
                            "enum": [
                              "",
                              "true",
                              "false"
                            ]
                          }
                        }
                      },
                      "created": {
                        "type": "string",
                        "description": "The created date of the comment."
                      },
                      "updated": {
                        "type": "string",
                        "description": "The updated date of the comment."
                      },
                      "image": {
                        "$ref": "#/definitions/imageObject"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Posts: Get comments",
        "description": "Get a list of comments.",
        "operationId": "CommentsGet",
        "parameters": [{
            "name": "manage",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When true and the token role allows manage comments - also not published comments will be shown in the list.",
            "x-ms-summary": "Manage"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The amount of items that should be returned (default and maximum 100).",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Define an offset for getting the items starting at this number.",
            "x-ms-summary": "Offset"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter in SCIM2 format with partial support. For now only flat structure (no nested clauses) and comparison clauses like eq = \"equals\", gt = \"greater than\", ge = \"greater than or equals\", lt = \"less than\", le = \"less than or equals\" are supported.  For comments supported filter fields are: created and updated. The value for these fields can be provided in UTC DateTime string representatiion or long number of milliseconds of Unix epoch.  Example 1: filter=updated ge \"2020-11-26T10:14:48.947Z\" and updated le \"2020-11-26T10:14:48.947Z\". In this example the DateTime range filter is applied to updated field with ge and le comparison clauses and and boolean clause.  Example 2: filter=created gt \"2020-11-26T10:14:48.947Z\". Get all comments, created after pointed date.",
            "x-ms-summary": "Filter"
          }
        ],
        "x-ms-visibility": "important"
      }
    },
    "/media": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Total number of assets that are found."
                },
                "limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The amount of items that are returned."
                },
                "offset": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The current defined offset for getting the items starting at this number."
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/mediaData"
                  }
                }
              }
            }
          }
        },
        "summary": "Media: Get all media",
        "description": "Get metadata of all media that are accessible for the API token.",
        "operationId": "MediaGet",
        "x-ms-visibility": "important",
        "parameters": [{
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "description": "Limit the number of items here.",
            "x-ms-visibility": "important",
            "format": "int32",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "description": "Set an offset for the query.",
            "x-ms-visibility": "important",
            "format": "int32",
            "x-ms-summary": "Offset"
          }
        ]
      }
    },
    "/media/{mediumID}": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/mediaData"
            }
          }
        },
        "summary": "Media: Get media by ID",
        "operationId": "MediaGetByID",
        "description": "Get metadata for single media by its ID.",
        "x-ms-visibility": "important",
        "parameters": [{
          "name": "mediumID",
          "in": "path",
          "x-ms-url-encoding": "single",
          "required": true,
          "type": "string",
          "description": "Requests information on a specific medium.",
          "x-ms-summary": "MediumID"
        }]
      },
      "delete": {
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        },
        "operationId": "MediaDelete",
        "summary": "Media: Delete media",
        "description": "Deletes the specified media in the current context.",
        "parameters": [{
          "name": "mediumID",
          "in": "path",
          "x-ms-url-encoding": "single",
          "required": true,
          "type": "string",
          "x-ms-summary": "MediumID",
          "description": "Deletes the medium by its ID. While this will immediately remove the resource from our servers, the CDN may still deliver the content via the URL stated in resourceInfo.url until CDN invalidation."
        }],
        "x-ms-visibility": "advanced"
      }
    },
    "/notifications": {
      "post": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "This is the ID of the notification."
                },
                "recipients": {
                  "type": "object",
                  "properties": {
                    "accessorIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "This is the list of recipients IDs."
                    }
                  }
                },
                "content": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "The title of the notification which is localized."
                      },
                      "locale": {
                        "type": "string",
                        "description": "This is the locale of the title."
                      }
                    }
                  }
                },
                "link": {
                  "type": "string",
                  "description": "This is the notification link."
                },
                "type": {
                  "type": "string",
                  "description": "This is the notification type."
                },
                "createdAt": {
                  "type": "string",
                  "description": "The created date of the notification."
                },
                "created": {
                  "type": "string",
                  "description": "The created date of the notification."
                }
              }
            }
          }
        },
        "consumes": [
          "application/json"
        ],
        "operationId": "NotificationPost",
        "x-ms-visibility": "important",
        "summary": "Notification: Sends notification",
        "description": "Sends notifications to specified user(s).",
        "parameters": [{
          "name": "body",
          "in": "body",
          "required": false,
          "schema": {
            "type": "object",
            "properties": {
              "recipients": {
                "type": "object",
                "properties": {
                  "accessorIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "This is the list of recipients IDs."
                    }
                  }
                }
              },
              "content": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "locale": {
                      "type": "string",
                      "description": "Insert locale like, e.g. de_DE, en_US, etc."
                    },
                    "title": {
                      "type": "string",
                      "description": "Insert language dependent title."
                    }
                  }
                }
              },
              "link": {
                "type": "string",
                "description": "Optinal: Insert link here."
              }
            }
          }
        }]
      }
    },
    "/posts": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Total number of posts that are found."
                },
                "limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The amount of items that are returned."
                },
                "offset": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The current defined offset for getting the items starting at this number."
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/postData"
                  }
                }
              }
            }
          }
        },
        "operationId": "PostsGetAll",
        "summary": "Posts: Get a list of posts",
        "description": "Get a list of posts that are accessible for the API token.",
        "parameters": [{
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A string that can be used for searching the post content.",
            "x-ms-summary": "Query"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The amount of items that should be returned (default and maximum 100).",
            "x-ms-summary": "Limit"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Define an offset for getting the items starting at this number.",
            "x-ms-summary": "Offset"
          }
        ],
        "x-ms-visibility": "important"
      }
    },
    "/posts/{pageID}": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/postData"
            }
          }
        },
        "summary": "Posts: Get a post by ID",
        "description": "Requests the specified posts including a set of comments.",
        "operationId": "PostsGetByID",
        "x-ms-visibility": "important",
        "parameters": [{
          "name": "pageID",
          "in": "path",
          "x-ms-url-encoding": "single",
          "required": true,
          "type": "string",
          "description": "This is the ID of the post.",
          "x-ms-visibility": "important",
          "x-ms-summary": "PageID"
        }]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "identifier": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The Identifier of deletion."
                },
                "statusCode": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code of the action."
                },
                "message": {
                  "type": "string",
                  "description": "The message of the action."
                },
                "type": {
                  "type": "string",
                  "description": "The type of the action."
                }
              }
            }
          }
        },
        "operationId": "PostsDelete",
        "parameters": [{
          "name": "pageID",
          "in": "path",
          "x-ms-url-encoding": "single",
          "required": true,
          "type": "string",
          "description": "This could be either the post ID defined by the API or if set the post externalID.",
          "x-ms-summary": "PageID"
        }],
        "description": "Removes a post from the system.",
        "summary": "Posts: Removes a post",
        "x-ms-visibility": "advanced"
      },
      "put": {
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        },
        "consumes": [
          "application/json"
        ],
        "operationId": "PostsPut",
        "description": "Updates a post, only changed field (incremental).",
        "summary": "Posts: Updates a post",
        "x-ms-visibility": "important",
        "parameters": [{
            "name": "pageID",
            "in": "path",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "This could be either the post ID defined by the API or if set the post externalID.",
            "x-ms-summary": "PageID"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "externalID": {
                  "type": "string",
                  "description": "Optional: Enter an external ID here."
                },
                "contents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "locale": {
                        "type": "string",
                        "description": "Insert locale like, e.g. de_DE, en_US, etc."
                      },
                      "content": {
                        "type": "string",
                        "description": "Enter news content here."
                      },
                      "image": {
                        "type": "string",
                        "description": "Enter link to image here."
                      },
                      "teaser": {
                        "type": "string",
                        "description": "Enter your teaser here."
                      },
                      "title": {
                        "type": "string",
                        "description": "Enter your title here."
                      },
                      "published": {
                        "type": "string",
                        "description": "Enter your date published here."
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "/users": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {}
          }
        },
        "summary": "User: Get list of users",
        "description": "Get a list of users, depending on the API access token.",
        "operationId": "UserGetAll",
        "x-ms-visibility": "important",
        "parameters": [{
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "SCIM notation can be used to filter.",
            "x-ms-summary": "SCIM notation can be used to filter",
            "x-ms-visibility": "important"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Here you can serach in any profile field.",
            "x-ms-summary": "The fulltext search can be combined with the filter",
            "x-ms-visibility": "important"
          }
        ]
      },
      "post": {
        "responses": {
          "default": {
            "description": "default",
            "schema": {},
            "headers": {
              "HTTP/1.1": {
                "description": "HTTP/1.1",
                "type": "string"
              },
              "Location:": {
                "description": "Location:",
                "type": "string"
              }
            }
          }
        },
        "consumes": [
          "application/json"
        ],
        "operationId": "UserPost",
        "summary": "User: Invite user",
        "description": "The user will receive an email to signup.",
        "x-ms-visibility": "important",
        "parameters": [{
          "name": "body",
          "in": "body",
          "required": false,
          "schema": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "This is the email address of the user."
              },
              "firstName": {
                "type": "string",
                "description": "This is the firstname of the user."
              },
              "lastName": {
                "type": "string",
                "description": "This is the lastname of the user."
              }
            }
          }
        }]
      }
    },
    "/users/{userID}": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/userData"
            }
          }
        },
        "summary": "User: Get user information",
        "operationId": "UserGetByID",
        "description": "Get specific user information by its user id.",
        "parameters": [{
          "name": "userID",
          "in": "path",
          "x-ms-url-encoding": "single",
          "required": true,
          "type": "string",
          "x-ms-summary": "UserID",
          "description": "The ID can be based on either the UserID automatically generated by the Staffbase platform or the externalID, if it is added for the user."
        }],
        "x-ms-visibility": "important"
      },
      "delete": {
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        },
        "summary": "User: Delete User",
        "operationId": "UserDelete",
        "x-ms-visibility": "important",
        "parameters": [{
          "name": "userID",
          "in": "path",
          "x-ms-url-encoding": "single",
          "required": true,
          "type": "string",
          "description": "The ID can be based on either the UserID automatically generated by the Staffbase platform or the externalID, if it is added for the user.",
          "x-ms-summary": "UserID"
        }],
        "description": "Deletes the specified user."
      },
      "put": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/userData"
            }
          }
        },
        "consumes": [
          "application/json"
        ],
        "operationId": "UserPut",
        "summary": "User: Update user information",
        "x-ms-visibility": "important",
        "description": "Update user information.",
        "parameters": [{
            "name": "userID",
            "in": "path",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "The ID can be based on either the UserID automatically generated by the Staffbase platform or the externalID, if it is added for the user.",
            "x-ms-summary": "UserID"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/userData"
            }
          }
        ]
      }
    },
    "/users/{userID}/recovery": {
      "post": {
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        },
        "summary": "User: Send a recovery email",
        "description": "Sends a recovery email to the specified user.",
        "operationId": "UserPostRecovery",
        "x-ms-visibility": "important",
        "parameters": [{
          "name": "userID",
          "in": "path",
          "x-ms-url-encoding": "single",
          "required": true,
          "type": "string",
          "description": "The ID can be based on either the UserID automatically generated by the Staffbase platform or the externalID, if it is added for the user.",
          "x-ms-summary": "UserID"
        }]
      }
    },
    "/version": {
      "get": {
        "responses": {
          "default": {
            "description": "default",
            "schema": {}
          }
        },
        "operationId": "ProxyVersionGet",
        "summary": "Proxy: Get version",
        "description": "Returns the current proxy version.",
        "parameters": []
      }
    }
  },
  "definitions": {
    "mediaData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is the ID of the asset."
        },
        "ownerID": {
          "type": "string",
          "description": "This is the ID of the owner of this asset."
        },
        "parentID": {
          "type": "string",
          "description": "This is the ID of the parent media asset."
        },
        "publicID": {
          "type": "string",
          "description": "This is the public ID for accessing the asset."
        },
        "resourceInfo": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "This is the asset resource type."
            },
            "bytes": {
              "type": "integer",
              "format": "int32",
              "description": "This is the resource size (in bytes)."
            },
            "width": {
              "type": "integer",
              "format": "int32",
              "description": "This is the resource width."
            },
            "height": {
              "type": "integer",
              "format": "int32",
              "description": "This is the resource height."
            },
            "url": {
              "type": "string",
              "description": "This is the resource url."
            },
            "format": {
              "type": "string",
              "description": "This is the resource format."
            },
            "mimeType": {
              "type": "string",
              "description": "This is the resource MIME type."
            }
          }
        },
        "fileName": {
          "type": "string",
          "description": "This is the media filename."
        },
        "title": {
          "type": "string",
          "description": "This is the media title."
        },
        "label": {
          "type": "string",
          "description": "This is the media label."
        },
        "created": {
          "type": "string",
          "description": "The created date of the asset."
        }
      }
    },
    "userData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the user"
        },
        "externalID": {
          "type": "string",
          "description": "The external ID of the user"
        },
        "firstName": {
          "type": "string",
          "description": "The firstname of the user"
        },
        "lastName": {
          "type": "string",
          "description": "The lastname of the user"
        },
        "publicEmailAddress": {
          "type": "string",
          "description": "The public eMail of the user"
        },
        "config": {
          "type": "object",
          "properties": {
            "locale": {
              "type": "string",
              "description": "The locale of the user"
            }
          }
        },
        "emails": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "The email address",
                "title": "email"
              },
              "primary": {
                "type": "boolean",
                "description": "Is it the primary email?"
              }
            }
          },
          "description": "User email information"
        },
        "groupIDs": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "List of groups the user is assigned to"
          }
        },
        "position": {
          "type": "string",
          "description": "The position of the user"
        },
        "department": {
          "type": "string",
          "description": "The department of the user"
        },
        "location": {
          "type": "string",
          "description": "The location of the user"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The phone number of the user"
        },
        "created": {
          "type": "string",
          "description": "The created date of the user"
        },
        "updated": {
          "type": "string",
          "description": "The updated date of the user"
        },
        "activated": {
          "type": "string",
          "description": "Is the user activated?"
        }
      }
    },
    "postData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the post."
        },
        "author": {
          "$ref": "#/definitions/authorObject"
        },
        "contents": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string",
                "description": "The post content, which is localized."
              },
              "image": {
                "$ref": "#/definitions/imageObject"
              },
              "teaser": {
                "type": "string",
                "description": "The post teaser, which is localized."
              },
              "title": {
                "type": "string",
                "description": "The post title, which is localized."
              },
              "locale": {
                "type": "string",
                "description": "This is the locale of the item."
              }
            }
          }
        },
        "channel": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "This is the ID of the channel."
            },
            "config": {
              "type": "object",
              "properties": {
                "localization": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "This is the channel title, which is localized."
                      },
                      "locale": {
                        "type": "string",
                        "description": "This is the locale of the channel title."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "published": {
          "type": "string",
          "description": "The published date of the post."
        },
        "created": {
          "type": "string",
          "description": "The created date of the post."
        },
        "updated": {
          "type": "string",
          "description": "The updated date of the post."
        }
      }
    },
    "authorObject": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "This is the firstname of the author."
        },
        "id": {
          "type": "string",
          "description": "This is the ID of the author."
        },
        "lastName": {
          "type": "string",
          "description": "This is the lastname of the author."
        },
        "avatar": {
          "type": "object",
          "properties": {
            "original": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "This is the author avatar image original url."
                },
                "width": {
                  "type": "integer",
                  "format": "int32",
                  "description": "This is the author avatar image original width."
                },
                "height": {
                  "type": "integer",
                  "format": "int32",
                  "description": "This is the author avatar image original height."
                },
                "size": {
                  "type": "integer",
                  "format": "int32",
                  "description": "This is the author avatar image original sie (in bytes)."
                },
                "format": {
                  "type": "string",
                  "description": "This is the author avatar original format."
                },
                "mimeType": {
                  "type": "string",
                  "description": "This is the athor avatar image original mimeType."
                },
                "created": {
                  "type": "string",
                  "description": "This is the author avatar original created date."
                }
              }
            },
            "icon": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "This is the author avatar icon url."
                },
                "width": {
                  "type": "integer",
                  "format": "int32",
                  "description": "This is the author avatar icon width."
                },
                "height": {
                  "type": "integer",
                  "format": "int32",
                  "description": "This is the author avatar icon height."
                },
                "format": {
                  "type": "string",
                  "description": "This is the author avatar icon format."
                },
                "mimeType": {
                  "type": "string",
                  "description": "This is the author avatar icon mimeType."
                }
              }
            },
            "thumb": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "This is the author avatar thumb url."
                },
                "width": {
                  "type": "integer",
                  "format": "int32",
                  "description": "This is the author avatar thumb width."
                },
                "height": {
                  "type": "integer",
                  "format": "int32",
                  "description": "This is the author avatar thumb height."
                },
                "format": {
                  "type": "string",
                  "description": "This is the author avatar thumb format."
                },
                "mimeType": {
                  "type": "string",
                  "description": "This is the athor avatar thumb mimeType."
                }
              }
            },
            "publicID": {
              "type": "string",
              "description": "This is the author avatar public ID."
            }
          }
        }
      }
    },
    "imageObject": {
      "type": "object",
      "properties": {
        "original": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "This is the image original url."
            },
            "width": {
              "type": "integer",
              "format": "int32",
              "description": "This is the image original width."
            },
            "height": {
              "type": "integer",
              "format": "int32",
              "description": "This is the image original height."
            },
            "size": {
              "type": "integer",
              "format": "int32",
              "description": "This is the image original size (in bytes)."
            },
            "format": {
              "type": "string",
              "description": "This is the image original format."
            },
            "mimeType": {
              "type": "string",
              "description": "This is the image original mimeType."
            }
          }
        },
        "original_scaled": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "This is the image original url."
            },
            "width": {
              "type": "integer",
              "format": "int32",
              "description": "This is the image original width."
            },
            "height": {
              "type": "integer",
              "format": "int32",
              "description": "This is the image original height."
            },
            "format": {
              "type": "string",
              "description": "This is the image original format."
            },
            "mimeType": {
              "type": "string",
              "description": "This is the image original mimeType."
            }
          }
        },
        "compact": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "This is the image compact url."
            },
            "width": {
              "type": "integer",
              "format": "int32",
              "description": "This is the image compact width."
            },
            "height": {
              "type": "integer",
              "format": "int32",
              "description": "This is the image compact height."
            },
            "format": {
              "type": "string",
              "description": "This is the image compact format."
            },
            "mimeType": {
              "type": "string",
              "description": "This is the image compact mimeType."
            }
          }
        }
      }
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "API-Key": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "security": [{
    "API-Key": []
  }],
  "tags": [],
  "x-ms-connector-metadata": [{
      "propertyName": "Website",
      "propertyValue": "https://www.staffbase.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://staffbase.com/en/privacy-policy/"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Communication;Human Resources"
    }
  ]
}