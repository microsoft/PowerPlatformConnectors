{
  "swagger": "2.0",
  "info": {
    "title": "Azure Digital Twins",
    "description": "Azure Digital Twins is an Internet of Things (IoT) platform that enables you to create a digital representation of real-world things, places, business processes, and people. This connector enables you to perform operations on digital twins and models as well as run ADT queries.",
    "contact": {
      "name": "Microsoft",
      "url": "https://azure.microsoft.com/support/"
    },
    "version": "1.0"
  },
  "host": "digitaltwins.azure.net",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://azure.microsoft.com/products/digital-twins/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://privacy.microsoft.com"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Internet of Things"
    }
  ],
  "paths": {
    "/models": {
      "post": {
        "responses": {
          "201": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the model as specified in the model definition."
                  },
                  "displayName": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string",
                        "description": "Property Values."
                      }
                    },
                    "description": "A language map that contains the localized display names as specified in the model definition."
                  },
                  "uploadTime": {
                    "type": "string",
                    "description": "The time the model was uploaded to the service."
                  },
                  "decommissioned": {
                    "type": "boolean",
                    "description": "Indicates if the model is decommissioned. Decommissioned models cannot be referenced by newly created digital twins."
                  }
                }
              }
            }
          }
        },
        "summary": "Add Model",
        "description": "Uploads one or more models. When any error occurs, no models are uploaded.",
        "operationId": "AddModels",
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "@id": {
                    "type": "string",
                    "description": "The id of the model as specified in the model definition."
                  },
                  "@type": {
                    "type": "string",
                    "description": "Interface Type."
                  },
                  "displayName": {
                    "type": "string",
                    "description": "A language map that contains the localized display names as specified in the model definition."
                  },
                  "contents": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string",
                          "description": "Property Type."
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the property."
                        },
                        "displayName": {
                          "type": "string",
                          "description": "Property name."
                        },
                        "schema": {
                          "type": "string",
                          "description": "Schema of the proerty."
                        }
                      }
                    },
                    "description": "Contents of the model."
                  },
                  "@context": {
                    "type": "string",
                    "description": "Metadata context."
                  }
                }
              }
            }
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The id of the model as specified in the model definition."
                      },
                      "uploadTime": {
                        "type": "string",
                        "description": "The time the model was uploaded to the service."
                      },
                      "decommissioned": {
                        "type": "boolean",
                        "description": "Indicates if the model is decommissioned. Decommissioned models cannot be referenced by newly created digital twins."
                      },
                      "model": {
                        "type": "object",
                        "properties": {
                          "@id": {
                            "type": "string",
                            "description": "The id of the model as specified in the model definition."
                          },
                          "@type": {
                            "type": "string",
                            "description": "Interface Type."
                          },
                          "contents": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "@type": {
                                  "type": "string",
                                  "description": "Property Type."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Property name."
                                },
                                "displayName": {
                                  "type": "string",
                                  "description": "Property displayName."
                                },
                                "schema": {
                                  "type": "string",
                                  "description": "Schema of the Property."
                                }
                              }
                            },
                            "description": "Response contents."
                          },
                          "@context": {
                            "type": "string",
                            "description": "Metadata context."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Model displayName."
                          }
                        },
                        "description": "Model reference."
                      },
                      "displayName": {
                        "type": "object",
                        "properties": {
                          "additionalProperties": {
                            "type": "string",
                            "description": "Property Values."
                          }
                        },
                        "description": "Display Name."
                      }
                    }
                  },
                  "description": "Array values."
                },
                "continuationToken": {
                  "description": "Continuation Token the next page of Twin Relationship.",
                  "type": "string"
                },
                "nextLink": {
                  "type": "string",
                  "description": "URL to get the next page of Models."
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "summary": "List Models",
        "description": "Retrieves model metadata and, optionally, model definitions.",
        "operationId": "ListModels",
        "parameters": [
          {
            "name": "dependenciesFor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The set of the models which will have their dependencies retrieved. If omitted, all models are retrieved.",
            "x-ms-summary": "Dependencies for Model"
          },
          {
            "name": "includeModelDefinition",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When true the model definition will be returned as part of the result.",
            "x-ms-summary": "Include Model Definition"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/continuationToken"
          }
        ]
      }
    },
    "/models/{modelid}": {
      "delete": {
        "responses": {
          "204": {
            "description": "default"
          }
        },
        "summary": "Delete Model",
        "description": "Deletes a model. A model can only be deleted if no other models reference it.",
        "operationId": "DeleteModel",
        "parameters": [
          {
            "$ref": "#/parameters/modelid"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The id of the model as specified in the model definition."
                },
                "uploadTime": {
                  "type": "string",
                  "description": "The time the model was uploaded to the service."
                },
                "decommissioned": {
                  "type": "boolean",
                  "description": "Indicates if the model is decommissioned. Decommissioned models cannot be referenced by newly created digital twins."
                },
                "model": {
                  "type": "object",
                  "properties": {
                    "@id": {
                      "type": "string",
                      "description": "The id of the model as specified in the model definition."
                    },
                    "@type": {
                      "type": "string",
                      "description": "Interface Type."
                    },
                    "contents": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@type": {
                            "type": "string",
                            "description": "Property Type."
                          },
                          "name": {
                            "type": "string",
                            "description": "Property name."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Property displayName."
                          },
                          "schema": {
                            "type": "string",
                            "description": "Schema of the Property."
                          }
                        }
                      },
                      "description": "Response contents."
                    },
                    "@context": {
                      "type": "string",
                      "description": "Metadata context."
                    }
                  },
                  "description": "Model reference."
                }
              }
            }
          }
        },
        "summary": "Get Model By Id",
        "description": "Retrieves model metadata and, optionally, the model definition.",
        "operationId": "GetModelById",
        "parameters": [
          {
            "$ref": "#/parameters/modelid"
          },
          {
            "name": "includeModelDefinition",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When true the model definition will be returned as part of the result.",
            "x-ms-summary": "Include Model Definition"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ]
      },
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Update Models (String)",
        "description": "Updates the metadata for a model.",
        "operationId": "UpdateModelsStringProp",
        "parameters": [
          {
            "$ref": "#/parameters/modelid"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/stringUpdate"
          }
        ]
      }
    },
    "/models/booleanupdate/{modelid}": {
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Update Models (Boolean)",
        "description": "Updates the boolean metadata for a model.",
        "operationId": "UpdateModelsBoolProp",
        "parameters": [
          {
            "$ref": "#/parameters/modelid"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/booleanUpdate"
          }
        ]
      }
    },
    "/digitaltwins/{twinid}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TwinResult"
            }
          }
        },
        "summary": "Get Twin by Id",
        "description": "Retrieves a digital twin and its data.",
        "operationId": "GetTwinById",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Delete Twin",
        "description": "Deletes a digital twin. All relationships referencing the digital twin must already be deleted.",
        "operationId": "DeleteTwin",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TwinResult"
            }
          }
        },
        "summary": "Add Twin",
        "operationId": "AddTwin",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/addValueTemplate"
          }
        ],
        "description": "Adds or replaces a digital twin."
      },
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Update Twin (Integer)",
        "description": "Updates integer properties on a twin.",
        "operationId": "UpdateTwinIntProp",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/integerUpdate"
          }
        ]
      }
    },
    "/digitaltwins/stringupdate/{twinid}": {
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Update Twin (String)",
        "description": "Updates string properties on a twin.",
        "operationId": "UpdateTwinStringProp",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/stringUpdate"
          }
        ]
      }
    },
    "/digitaltwins/objectupdate/{twinid}": {
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Update Twin (Object)",
        "description": "Updates Object properties on a twin.",
        "operationId": "UpdateTwinObjectProp",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/objectUpdate"
          }
        ]
      }
    },
    "/digitaltwins/booleanupdate/{twinid}": {
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Update Twin (Boolean)",
        "description": "Updates boolean properties on a twin.",
        "operationId": "UpdateTwinBooleanProp",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/booleanUpdate"
          }
        ]
      }
    },
    "/digitaltwins/doubleupdate/{twinid}": {
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Update Twin (Double)",
        "description": "Updates double properties on a twin.",
        "operationId": "UpdateTwinDoubleProp",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/doubleUpdate"
          }
        ]
      }
    },
    "/digitaltwins/{twinid}/components/{componentPath}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetComponentResult"
            }
          }
        },
        "summary": "Get Component",
        "description": "Retrieves a component from a digital twin.",
        "operationId": "GetComponent",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/componentPath"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ]
      },
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Update Component (Integer)",
        "description": "Updates integer properties on a component of a twin.",
        "operationId": "UpdateComponentIntProp",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/componentPath"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/integerUpdate"
          }
        ]
      }
    },
    "/digitaltwins/{twinid}/components/stringupdate/{componentPath}": {
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Update Component (String)",
        "description": "Updates string properties on a component of a twin.",
        "operationId": "UpdateComponentStringProp",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/componentPath"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/stringUpdate"
          }
        ]
      }
    },
    "/digitaltwins/{twinid}/components/booleanupdate/{componentPath}": {
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Update Component (Boolean)",
        "description": "Updates boolean properties on a component of a twin.",
        "operationId": "UpdateComponentBooleanProp",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/componentPath"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/booleanUpdate"
          }
        ]
      }
    },
    "/digitaltwins/{twinid}/components/doubleupdate/{componentPath}": {
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Update Component (Double)",
        "description": "Updates double properties on a component of a twin.",
        "operationId": "UpdateComponentDoubleProp",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/componentPath"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/doubleUpdate"
          }
        ]
      }
    },
    "/digitaltwins/{twinid}/relationships/{relationshipId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TwinRelationship"
            }
          }
        },
        "summary": "Get Relationship by Id",
        "description": "Retrieves a relationship between two digital twins.",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/relationshipId"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "operationId": "GetRelationshipById"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Delete Relationship",
        "description": "Deletes a relationship between two digital twins.",
        "operationId": "DeleteRelationship",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/relationshipId"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TwinRelationship"
            }
          }
        },
        "summary": "Add Relationship",
        "description": "Adds a relationship between two digital twins.",
        "operationId": "AddRelationship",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/relationshipId"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/addValueTemplate"
          }
        ]
      },
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/relationshipId"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/integerUpdate"
          }
        ],
        "summary": "Update Relationship (Integer)",
        "description": "Updates integer properties on a relationship between two digital twins.",
        "operationId": "UpdateRelationshipIntProp"
      }
    },
    "/digitaltwins/{twinid}/relationships/stringupdate/{relationshipId}": {
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/relationshipId"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/stringUpdate"
          }
        ],
        "summary": "Update Relationship (String)",
        "description": "Updates string properties on a relationship between two digital twins.",
        "operationId": "UpdateRelationshipStringProp"
      }
    },
    "/digitaltwins/{twinid}/relationships/booleanupdate/{relationshipId}": {
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/relationshipId"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/booleanUpdate"
          }
        ],
        "summary": "Update Relationship (Boolean)",
        "description": "Updates boolean properties on a relationship between two digital twins.",
        "operationId": "UpdateRelationshipBooleanProp"
      }
    },
    "/digitaltwins/{twinid}/relationships/doubleupdate/{relationshipId}": {
      "patch": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/relationshipId"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/doubleUpdate"
          }
        ],
        "summary": "Update Relationship (Double)",
        "description": "Updates double properties on a relationship between two digital twins.",
        "operationId": "UpdateRelationshipDoubleProp"
      }
    },
    "/digitaltwins/{twinid}/incomingrelationships": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "description": "The collection of Incoming relationships.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IncomingRelationship"
                  }
                },
                "continuationToken": {
                  "description": "Continuation Token the next page of Twin Relationship.",
                  "type": "string"
                },
                "nextLink": {
                  "description": "URL to get the next page of Incoming Relationship.",
                  "type": "string"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "operationId": "ListIncomingRelationships",
        "summary": "List Incoming Relationships",
        "description": "Retrieves all incoming relationships for a digital twin.",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/continuationToken"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ]
      }
    },
    "/digitaltwins/{twinid}/telemetry": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/messageId"
          },
          {
            "$ref": "#/parameters/telemetrySourceTime"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "Send Telemetry Inputs.",
                  "title": "Telemetry Request"
                }
              }
            }
          }
        ],
        "summary": "Send Telemetry",
        "description": "Sends telemetry on behalf of a digital twin.",
        "operationId": "SendTelemetry"
      }
    },
    "/digitaltwins/{twinid}/components/{componentPath}/telemetry": {
      "post": {
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Send Component Telemetry",
        "operationId": "SendComponentTelemetry",
        "description": "Sends telemetry on behalf of a component in a digital twin.",
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/componentPath"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/messageId"
          },
          {
            "$ref": "#/parameters/telemetrySourceTime"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "Send Component Telemetry Inputs.",
                  "title": "Component Telemetry Request"
                }
              }
            }
          }
        ]
      }
    },
    "/digitaltwins/{twinid}/relationships": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "description": "The collection of twin relationships.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TwinRelationship"
                  }
                },
                "continuationToken": {
                  "description": "Continuation Token the next page of Twin Relationship.",
                  "type": "string"
                },
                "nextLink": {
                  "description": "URL to get the next page of Twin Relationship.",
                  "type": "string"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/twinid"
          },
          {
            "$ref": "#/parameters/continuationToken"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "summary": "List Relationships",
        "operationId": "ListRelationships",
        "description": "Retrieves all outgoing relationships from a digital twin."
      }
    },
    "/query": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResult"
            }
          }
        },
        "summary": "Query API",
        "description": "Executes a query that allows traversing relationships and filtering by property values.",
        "operationId": "QueryTwins",
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string",
                  "description": "Query the Twins."
                },
                "continuationToken": {
                  "type": "string",
                  "description": "Link to get next set of items."
                }
              }
            }
          }
        ]
      }
    }
  },
  "definitions": {
    "IncomingRelationship": {
      "type": "object",
      "properties": {
        "$sourceId": {
          "type": "string",
          "description": "Source Id."
        },
        "$relationshipId": {
          "type": "string",
          "description": "Relationship Id."
        },
        "$relationshipName": {
          "type": "string",
          "description": "Relationship Name."
        },
        "$relationshipLink": {
          "type": "string",
          "description": "Relationship Link."
        }
      }
    },
    "TwinRelationship": {
      "type": "object",
      "properties": {
        "$sourceId": {
          "type": "string",
          "description": "Source Id."
        },
        "$relationshipId": {
          "type": "string",
          "description": "Relationship Id."
        },
        "$targetId": {
          "type": "string",
          "description": "Target Id."
        },
        "$relationshipName": {
          "type": "string",
          "description": "Relationship Name."
        },
        "$etag": {
          "type": "string",
          "description": "E Tag Link."
        },
        "additionalProperties": {
          "type": "string",
          "description": "Property Values."
        }
      }
    },
    "TwinResult": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "description": "Results From the Twin.",
          "title": "Result"
        }
      }
    },
    "GetComponentResult": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "description": "Results From the Twin.",
          "title": "Result"
        }
      }
    },
    "QueryResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Results From the Twin.",
          "title": "Value"
        },
        "continuationToken": {
          "type": "string",
          "description": "Link to get next set of items.",
          "title": "Continuation Token"
        }
      }
    }
  },
  "parameters": {
    "integerUpdate": {
      "name": "body",
      "in": "body",
      "required": false,
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "op": {
              "type": "string",
              "description": "Request Operation."
            },
            "path": {
              "type": "string",
              "description": "Path of the property that need to be updated."
            },
            "value": {
              "type": "integer",
              "format": "int32",
              "description": "Value that need to be updated."
            }
          }
        }
      }
    },
    "stringUpdate": {
      "name": "body",
      "in": "body",
      "required": false,
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "op": {
              "type": "string",
              "description": "Request Operation."
            },
            "path": {
              "type": "string",
              "description": "Path of the property that need to be updated."
            },
            "value": {
              "type": "string",
              "description": "Value that need to be updated."
            }
          }
        }
      }
    },
    "objectUpdate": {
      "name": "body",
      "in": "body",
      "required": false,
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "op": {
              "type": "string",
              "description": "Request Operation."
            },
            "path": {
              "type": "string",
              "description": "Path of the property that need to be updated."
            },
            "value": {
              "type": "object",
              "description": "Value that need to be updated.",
              "properties": {
                "additionalProperties": {
                  "type": "string",
                  "description": "Property Values."
                }
              }
            }
          }
        }
      }
    },
    "booleanUpdate": {
      "name": "body",
      "in": "body",
      "required": false,
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "op": {
              "type": "string",
              "description": "Request Operation."
            },
            "path": {
              "type": "string",
              "description": "Path of the property that need to be updated."
            },
            "value": {
              "type": "boolean",
              "description": "Value that need to be updated."
            }
          }
        }
      }
    },
    "doubleUpdate": {
      "name": "body",
      "in": "body",
      "required": false,
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "op": {
              "type": "string",
              "description": "Request Operation."
            },
            "path": {
              "type": "string",
              "description": "Path of the property that need to be updated."
            },
            "value": {
              "type": "number",
              "format": "double",
              "description": "Value that need to be updated."
            }
          }
        }
      }
    },
    "modelid": {
      "name": "modelid",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The id of the Model. The id is unique within the service and case sensitive.",
      "x-ms-summary": "Model id"
    },
    "twinid": {
      "name": "twinid",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The id of the digital twin. The id is unique within the service and case sensitive.",
      "x-ms-summary": "Digital twin id"
    },
    "api-version": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "default": "2020-10-31",
      "x-ms-visibility": "internal"
    },
    "componentPath": {
      "name": "componentPath",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the DTDL component.",
      "x-ms-summary": "DTDL component"
    },
    "relationshipId": {
      "name": "relationshipId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The id of the relationship. The id is unique within the digital twin and case sensitive.",
      "x-ms-summary": "Relationship id"
    },
    "continuationToken": {
      "name": "continuationToken",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "A token which is used to retrieve the next set of results from a previous query.",
      "x-ms-summary": "Continuation Token"
    },
    "addValueTemplate": {
      "name": "Body",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value for the Twin.",
            "title": "Value"
          }
        }
      }
    },
    "messageId": {
      "name": "Message-Id",
      "in": "header",
      "required": true,
      "type": "string",
      "description": "A unique message identifier (in the scope of the digital twin id) that is commonly used for de-duplicating messages.",
      "x-ms-summary": "Message id"
    },
    "telemetrySourceTime": {
      "name": "Telemetry-Source-Time",
      "in": "header",
      "required": false,
      "type": "string",
      "description": "An RFC 3339 timestamp that identifies the time the telemetry was measured.",
      "x-ms-summary": "Timestamp"
    }
  },
  "responses": {},
  "securityDefinitions": {
    "oauth2_auth": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://login.windows.net/common/oauth2/authorize",
      "tokenUrl": "https://login.windows.net/common/oauth2/authorize",
      "scopes": {}
    }
  },
  "security": [
    {
      "oauth2_auth": []
    }
  ],
  "tags": []
}