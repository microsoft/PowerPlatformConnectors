{
  "x-generator": "NSwag v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))",
  "swagger": "2.0",
  "info": {
    "title": "Nimflow",
    "description": "Nimflow Web API allows to dispatch actions, send responses and subscribe to events using standard web hooks.",
    "version": "6.31.0",
    "contact": {
      "name": "Nimflow",
      "url": "https://nimflow.com",
      "email": "support@nimflow.com"
    }
  },
  "host": "api.nimflow.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/Contexts/DispatchAction": {
      "post": {
        "tags": [
          "Contexts"
        ],
        "summary": "Dispatch action",
        "operationId": "Contexts_DispatchAction",
        "description": "Dispatch an action to a context in nimflow",
        "consumes": [
          "application/json;odata.metadata=minimal;odata.streaming=true",
          "application/json;odata.metadata=minimal;odata.streaming=false",
          "application/json;odata.metadata=minimal",
          "application/json;odata.metadata=full;odata.streaming=true",
          "application/json;odata.metadata=full;odata.streaming=false",
          "application/json;odata.metadata=full",
          "application/json;odata.metadata=none;odata.streaming=true",
          "application/json;odata.metadata=none;odata.streaming=false",
          "application/json;odata.metadata=none",
          "application/json;odata.streaming=true",
          "application/json;odata.streaming=false",
          "application/json",
          "text/plain"
        ],
        "produces": [
          "application/json;odata.metadata=minimal;odata.streaming=true",
          "application/json;odata.metadata=minimal;odata.streaming=false",
          "application/json;odata.metadata=minimal",
          "application/json;odata.metadata=full;odata.streaming=true",
          "application/json;odata.metadata=full;odata.streaming=false",
          "application/json;odata.metadata=full",
          "application/json;odata.metadata=none;odata.streaming=true",
          "application/json;odata.metadata=none;odata.streaming=false",
          "application/json;odata.metadata=none",
          "application/json;odata.streaming=true",
          "application/json;odata.streaming=false",
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "Command containing the required reference information and payload.",
            "schema": {
              "$ref": "#/definitions/DispatchContextAction"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Command execution result.",
            "schema": {
              "$ref": "#/definitions/DispatchContextActionResult"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "401": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "500": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/Tasks/AddResponse": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Add task response",
        "operationId": "Tasks_AddResponse",
        "description": "Send a task response to a context in nimflow",
        "consumes": [
          "application/json;odata.metadata=minimal;odata.streaming=true",
          "application/json;odata.metadata=minimal;odata.streaming=false",
          "application/json;odata.metadata=minimal",
          "application/json;odata.metadata=full;odata.streaming=true",
          "application/json;odata.metadata=full;odata.streaming=false",
          "application/json;odata.metadata=full",
          "application/json;odata.metadata=none;odata.streaming=true",
          "application/json;odata.metadata=none;odata.streaming=false",
          "application/json;odata.metadata=none",
          "application/json;odata.streaming=true",
          "application/json;odata.streaming=false",
          "application/json",
          "text/plain"
        ],
        "produces": [
          "application/json;odata.metadata=minimal;odata.streaming=true",
          "application/json;odata.metadata=minimal;odata.streaming=false",
          "application/json;odata.metadata=minimal",
          "application/json;odata.metadata=full;odata.streaming=true",
          "application/json;odata.metadata=full;odata.streaming=false",
          "application/json;odata.metadata=full",
          "application/json;odata.metadata=none;odata.streaming=true",
          "application/json;odata.metadata=none;odata.streaming=false",
          "application/json;odata.metadata=none",
          "application/json;odata.streaming=true",
          "application/json;odata.streaming=false",
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "body",
            "required": true,
            "description": "Command containing the required values to locate a task and send a given response with its corresponding payload.",
            "schema": {
              "$ref": "#/definitions/AddTaskResponse"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The add response command result.",
            "schema": {
              "$ref": "#/definitions/AddTaskResponseResult"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "401": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "500": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/WhenTaskCreated": {
      "x-ms-notification-content": {
        "description": "Subscribe to TaskCreated event.",
        "schema": {
          "$ref": "#/definitions/TaskCreated"
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "When a task is created",
        "description": "Subscribe to a task created event.",
        "operationId": "WhenTaskCreated_Post",
        "consumes": [
          "application/json;odata.metadata=minimal;odata.streaming=true",
          "application/json;odata.metadata=minimal;odata.streaming=false",
          "application/json;odata.metadata=minimal",
          "application/json;odata.metadata=full;odata.streaming=true",
          "application/json;odata.metadata=full;odata.streaming=false",
          "application/json;odata.metadata=full",
          "application/json;odata.metadata=none;odata.streaming=true",
          "application/json;odata.metadata=none;odata.streaming=false",
          "application/json;odata.metadata=none",
          "application/json;odata.streaming=true",
          "application/json;odata.streaming=false",
          "application/json",
          "text/plain"
        ],
        "produces": [
          "application/json;odata.metadata=minimal;odata.streaming=true",
          "application/json;odata.metadata=minimal;odata.streaming=false",
          "application/json;odata.metadata=minimal",
          "application/json;odata.metadata=full;odata.streaming=true",
          "application/json;odata.metadata=full;odata.streaming=false",
          "application/json;odata.metadata=full",
          "application/json;odata.metadata=none;odata.streaming=true",
          "application/json;odata.metadata=none;odata.streaming=false",
          "application/json;odata.metadata=none",
          "application/json;odata.streaming=true",
          "application/json;odata.streaming=false",
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "callbackUrl"
              ],
              "properties": {
                "callbackUrl": {
                  "type": "string",
                  "title": "Callback url",
                  "minLength": 1,
                  "x-ms-notification-url": true,
                  "x-ms-visibility": "internal"
                },
                "contextTypeName": {
                  "type": "string",
                  "title": "Context type name"
                },
                "taskTypeName": {
                  "type": "string",
                  "title": "Task type name"
                }
              }
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "401": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "404": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "500": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          }
        },
        "x-ms-trigger": "single"
      }
    },
    "/WhenTaskCreated/{hookId}": {
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a subscription to a task created event",
        "description": "Delete a subscription to a task created event.",
        "operationId": "WhenTaskCreated_Delete",
        "x-ms-visibility": "internal",
        "parameters": [
          {
            "type": "string",
            "name": "hookId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "401": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "404": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "500": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/WhenTaskUpdated": {
      "x-ms-notification-content": {
        "description": "Subscribe to TaskUpdated event.",
        "schema": {
          "$ref": "#/definitions/TaskUpdated"
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "When a task is updated",
        "description": "Subscribe to a task updated event.",
        "operationId": "WhenTaskUpdated_Post",
        "consumes": [
          "application/json;odata.metadata=minimal;odata.streaming=true",
          "application/json;odata.metadata=minimal;odata.streaming=false",
          "application/json;odata.metadata=minimal",
          "application/json;odata.metadata=full;odata.streaming=true",
          "application/json;odata.metadata=full;odata.streaming=false",
          "application/json;odata.metadata=full",
          "application/json;odata.metadata=none;odata.streaming=true",
          "application/json;odata.metadata=none;odata.streaming=false",
          "application/json;odata.metadata=none",
          "application/json;odata.streaming=true",
          "application/json;odata.streaming=false",
          "application/json",
          "text/plain"
        ],
        "produces": [
          "application/json;odata.metadata=minimal;odata.streaming=true",
          "application/json;odata.metadata=minimal;odata.streaming=false",
          "application/json;odata.metadata=minimal",
          "application/json;odata.metadata=full;odata.streaming=true",
          "application/json;odata.metadata=full;odata.streaming=false",
          "application/json;odata.metadata=full",
          "application/json;odata.metadata=none;odata.streaming=true",
          "application/json;odata.metadata=none;odata.streaming=false",
          "application/json;odata.metadata=none",
          "application/json;odata.streaming=true",
          "application/json;odata.streaming=false",
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "callbackUrl"
              ],
              "properties": {
                "callbackUrl": {
                  "type": "string",
                  "title": "Callback url",
                  "minLength": 1,
                  "x-ms-notification-url": true,
                  "x-ms-visibility": "internal"
                },
                "contextTypeName": {
                  "type": "string",
                  "title": "Context type name"
                },
                "taskTypeName": {
                  "type": "string",
                  "title": "Task type name"
                }
              }
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "401": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "404": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "500": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          }
        },
        "x-ms-trigger": "single"
      }
    },
    "/WhenTaskUpdated/{hookId}": {
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a subscription to a task updated event",
        "description": "Delete a subscription to a task updated event.",
        "operationId": "WhenTaskUpdated_Delete",
        "x-ms-visibility": "internal",
        "parameters": [
          {
            "type": "string",
            "name": "hookId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "401": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "404": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "500": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/WhenTaskArchived": {
      "x-ms-notification-content": {
        "description": "Subscribe to TaskArchived event.",
        "schema": {
          "$ref": "#/definitions/TaskArchived"
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "When a task is archived",
        "description": "Subscribe to a task archived event.",
        "operationId": "WhenTaskArchived_Post",
        "consumes": [
          "application/json;odata.metadata=minimal;odata.streaming=true",
          "application/json;odata.metadata=minimal;odata.streaming=false",
          "application/json;odata.metadata=minimal",
          "application/json;odata.metadata=full;odata.streaming=true",
          "application/json;odata.metadata=full;odata.streaming=false",
          "application/json;odata.metadata=full",
          "application/json;odata.metadata=none;odata.streaming=true",
          "application/json;odata.metadata=none;odata.streaming=false",
          "application/json;odata.metadata=none",
          "application/json;odata.streaming=true",
          "application/json;odata.streaming=false",
          "application/json",
          "text/plain"
        ],
        "produces": [
          "application/json;odata.metadata=minimal;odata.streaming=true",
          "application/json;odata.metadata=minimal;odata.streaming=false",
          "application/json;odata.metadata=minimal",
          "application/json;odata.metadata=full;odata.streaming=true",
          "application/json;odata.metadata=full;odata.streaming=false",
          "application/json;odata.metadata=full",
          "application/json;odata.metadata=none;odata.streaming=true",
          "application/json;odata.metadata=none;odata.streaming=false",
          "application/json;odata.metadata=none",
          "application/json;odata.streaming=true",
          "application/json;odata.streaming=false",
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "callbackUrl"
              ],
              "properties": {
                "callbackUrl": {
                  "type": "string",
                  "title": "Callback url",
                  "minLength": 1,
                  "x-ms-notification-url": true,
                  "x-ms-visibility": "internal"
                },
                "contextTypeName": {
                  "type": "string",
                  "title": "Context type name"
                },
                "taskTypeName": {
                  "type": "string",
                  "title": "Task type name"
                }
              }
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "401": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "404": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "500": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          }
        },
        "x-ms-trigger": "single"
      }
    },
    "/WhenTaskArchived/{hookId}": {
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a subscription to a task archived event",
        "description": "Delete a subscription to a task archived event.",
        "operationId": "WhenTaskArchived_Delete",
        "x-ms-visibility": "internal",
        "parameters": [
          {
            "type": "string",
            "name": "hookId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "401": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "404": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "500": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/WhenMilestoneReached": {
      "x-ms-notification-content": {
        "description": "Subscribe to MilestoneReached event.",
        "schema": {
          "$ref": "#/definitions/MilestoneReached"
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "When a milestone is reached",
        "description": "Subscribe to a milestone reached event.",
        "operationId": "WhenMilestoneReached_Post",
        "consumes": [
          "application/json;odata.metadata=minimal;odata.streaming=true",
          "application/json;odata.metadata=minimal;odata.streaming=false",
          "application/json;odata.metadata=minimal",
          "application/json;odata.metadata=full;odata.streaming=true",
          "application/json;odata.metadata=full;odata.streaming=false",
          "application/json;odata.metadata=full",
          "application/json;odata.metadata=none;odata.streaming=true",
          "application/json;odata.metadata=none;odata.streaming=false",
          "application/json;odata.metadata=none",
          "application/json;odata.streaming=true",
          "application/json;odata.streaming=false",
          "application/json",
          "text/plain"
        ],
        "produces": [
          "application/json;odata.metadata=minimal;odata.streaming=true",
          "application/json;odata.metadata=minimal;odata.streaming=false",
          "application/json;odata.metadata=minimal",
          "application/json;odata.metadata=full;odata.streaming=true",
          "application/json;odata.metadata=full;odata.streaming=false",
          "application/json;odata.metadata=full",
          "application/json;odata.metadata=none;odata.streaming=true",
          "application/json;odata.metadata=none;odata.streaming=false",
          "application/json;odata.metadata=none",
          "application/json;odata.streaming=true",
          "application/json;odata.streaming=false",
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "callbackUrl"
              ],
              "properties": {
                "callbackUrl": {
                  "type": "string",
                  "title": "Callback url",
                  "minLength": 1,
                  "x-ms-notification-url": true,
                  "x-ms-visibility": "internal"
                },
                "contextTypeName": {
                  "type": "string",
                  "title": "Context type name"
                },
                "milestoneName": {
                  "type": "string",
                  "title": "Milestone name"
                }
              }
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "401": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "404": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "500": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          }
        },
        "x-ms-trigger": "single"
      }
    },
    "/WhenMilestoneReached/{hookId}": {
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a subscription to a milestone reached event",
        "description": "Delete a subscription to a milestone reached event.",
        "operationId": "WhenMilestoneReached_Delete",
        "x-ms-visibility": "internal",
        "parameters": [
          {
            "type": "string",
            "name": "hookId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "401": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "404": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "500": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/WhenMilestoneCleared": {
      "x-ms-notification-content": {
        "description": "Subscribe to MilestoneCleared event.",
        "schema": {
          "$ref": "#/definitions/MilestoneCleared"
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "When a milestone is cleared",
        "description": "Subscribe to a milestone cleared event.",
        "operationId": "WhenMilestoneCleared_Post",
        "consumes": [
          "application/json;odata.metadata=minimal;odata.streaming=true",
          "application/json;odata.metadata=minimal;odata.streaming=false",
          "application/json;odata.metadata=minimal",
          "application/json;odata.metadata=full;odata.streaming=true",
          "application/json;odata.metadata=full;odata.streaming=false",
          "application/json;odata.metadata=full",
          "application/json;odata.metadata=none;odata.streaming=true",
          "application/json;odata.metadata=none;odata.streaming=false",
          "application/json;odata.metadata=none",
          "application/json;odata.streaming=true",
          "application/json;odata.streaming=false",
          "application/json",
          "text/plain"
        ],
        "produces": [
          "application/json;odata.metadata=minimal;odata.streaming=true",
          "application/json;odata.metadata=minimal;odata.streaming=false",
          "application/json;odata.metadata=minimal",
          "application/json;odata.metadata=full;odata.streaming=true",
          "application/json;odata.metadata=full;odata.streaming=false",
          "application/json;odata.metadata=full",
          "application/json;odata.metadata=none;odata.streaming=true",
          "application/json;odata.metadata=none;odata.streaming=false",
          "application/json;odata.metadata=none",
          "application/json;odata.streaming=true",
          "application/json;odata.streaming=false",
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "callbackUrl"
              ],
              "properties": {
                "callbackUrl": {
                  "type": "string",
                  "title": "Callback url",
                  "minLength": 1,
                  "x-ms-notification-url": true,
                  "x-ms-visibility": "internal"
                },
                "contextTypeName": {
                  "type": "string",
                  "title": "Context type name"
                },
                "milestoneName": {
                  "type": "string",
                  "title": "Milestone name"
                }
              }
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "401": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "404": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "500": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          }
        },
        "x-ms-trigger": "single"
      }
    },
    "/WhenMilestoneCleared/{hookId}": {
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a subscription to a milestone cleared event",
        "description": "Delete a subscription to a milestone cleared event.",
        "operationId": "WhenMilestoneCleared_Delete",
        "x-ms-visibility": "internal",
        "parameters": [
          {
            "type": "string",
            "name": "hookId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "401": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "404": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          },
          "500": {
            "x-nullable": false,
            "description": "",
            "schema": {}
          }
        }
      }
    }
  },
  "definitions": {
    "DispatchContextActionResult": {
      "type": "object",
      "description": "Represents the result of dispatching a context action.",
      "required": [
        "contextId",
        "isNew"
      ],
      "properties": {
        "contextId": {
          "type": "string",
          "title": "Context id",
          "description": "Gets or sets the context id of the contexts the action was dispatched on.",
          "minLength": 1
        },
        "isNew": {
          "type": "boolean",
          "title": "Is new",
          "description": "Gets or sets a value that indicates whether the context was created as a result of the dispatched action."
        }
      }
    },
    "DispatchContextAction": {
      "type": "object",
      "description": "Represents a command to send an action in an existing context or to create it if it does not exist and the action is marked as initial. ContextId or reference must be defined.",
      "required": [
        "contextTypeName",
        "reference",
        "action"
      ],
      "properties": {
        "contextTypeName": {
          "type": "string",
          "title": "Context type name",
          "description": "Gets or set the context type name.",
          "minLength": 1
        },
        "reference": {
          "type": "string",
          "title": "Context reference",
          "description": "Gets or sets the reference of the context.\nThe reference is a unique identifier per context type, known to external systems with business semantics.\nIf a reference does not exists for the given context type and the action is initial, a new context will be created."
        },
        "action": {
          "type": "string",
          "title": "Action name",
          "description": "Get or sets the predefined action name to dispatch.",
          "minLength": 1
        },
        "payload": {
          "type": "object",
          "title": "Action payload",
          "description": "Gets or sets the payload object for the action.\nMust satisfy corresponding JsonSchema if defined.",
          "additionalProperties": {}
        },
        "subject": {
          "type": "string",
          "title": "Subject",
          "description": "Gets a suggested subject to use when sending to an events communication service."
        }
      }
    },
    "Importance": {
      "type": "integer",
      "description": "",
      "title": "Importance",
      "x-enumNames": [
        "Normal",
        "High",
        "Low"
      ],
      "enum": [
        0,
        1,
        -1
      ]
    },
    "AddTaskResponseResult": {
      "type": "object",
      "description": "Represents a result of executing a AddTaskResponse command.",
      "properties": {
        "responseId": {
          "type": "string",
          "title": "Response Id",
          "description": "Gets or sets the id of the registered response."
        }
      }
    },
    "AddTaskResponse": {
      "type": "object",
      "description": "Represents a command to add a response to an active task.",
      "required": [
        "contextTypeName",
        "taskTypeName",
        "responseTypeName",
        "contextReference"
      ],
      "properties": {
        "contextReference": {
          "type": "string",
          "title": "Context reference",
          "description": "Gets or sets the context\u00b4s reference the task should belongs to."
        },
        "sentBy": {
          "type": "string",
          "title": "Sent by",
          "description": "Gets or sets a tracking value informing the application or integration sending the response."
        },
        "payload": {
          "type": "object",
          "title": "Payload",
          "description": "Gets or sets the response payload object.\nMust satisfy corresponding JsonSchema if defined.",
          "additionalProperties": {}
        },
        "startedOn": {
          "type": "string",
          "title": "Started on",
          "description": "Gets or sets the date and time when work was started on the task before sending the response.",
          "format": "date-time"
        },
        "sentOn": {
          "type": "string",
          "title": "Sent on",
          "description": "Gets or sets the date and time when response was sent.",
          "format": "date-time"
        },
        "subject": {
          "type": "string",
          "title": "Subject",
          "description": "Gets a suggested subject to use when sending to an events communication service."
        },
        "contextTypeName": {
          "type": "string",
          "title": "Context type name",
          "description": "Gets or sets the context's type name the task should belongs to.",
          "minLength": 1
        },
        "taskTypeName": {
          "type": "string",
          "title": "Task type name",
          "description": "Gets or sets the task's type name of the active task.",
          "minLength": 1
        },
        "responseTypeName": {
          "type": "string",
          "title": "Response type name",
          "description": "Gets or sets the name of the response type, previously defined for its task type, for which you are trying to send\na response.",
          "minLength": 1
        },
        "itemKey": {
          "type": "string",
          "title": "Item key",
          "description": "Gets or sets the task item key."
        }
      }
    },
    "TaskCreated": {
      "type": "object",
      "required": [
        "timestamp",
        "requestId",
        "event",
        "contextId",
        "contextTypeName",
        "reference",
        "taskId",
        "taskTypeName"
      ],
      "properties": {
        "timestamp": {
          "type": "string",
          "title": "Timestamp",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "title": "Id"
        },
        "requestId": {
          "type": "string",
          "title": "Request id"
        },
        "event": {
          "type": "string",
          "title": "Event"
        },
        "contextId": {
          "type": "string",
          "title": "Context id"
        },
        "contextTypeName": {
          "type": "string",
          "title": "Context type name"
        },
        "reference": {
          "type": "string",
          "title": "Reference"
        },
        "startDate": {
          "type": "string",
          "title": "Start date",
          "format": "date-time"
        },
        "startBeforeDate": {
          "type": "string",
          "title": "Start before date",
          "format": "date-time"
        },
        "dueDate": {
          "type": "string",
          "title": "Due date",
          "format": "date-time"
        },
        "taskId": {
          "type": "string",
          "title": "Task id"
        },
        "taskTypeName": {
          "type": "string",
          "title": "Task type name"
        },
        "data": {
          "type": "object",
          "title": "Data",
          "additionalProperties": {}
        },
        "assignedTo": {
          "type": "string",
          "title": "Assigned to"
        },
        "assignedToRole": {
          "type": "string",
          "title": "Assigned to role"
        },
        "importance": {
          "$ref": "#/definitions/Importance"
        }
      }
    },
    "TaskUpdated": {
      "type": "object",
      "required": [
        "timestamp",
        "requestId",
        "event",
        "contextId",
        "contextTypeName",
        "reference",
        "taskId",
        "taskTypeName"
      ],
      "properties": {
        "timestamp": {
          "type": "string",
          "title": "Timestamp",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "title": "Id"
        },
        "requestId": {
          "type": "string",
          "title": "Request id"
        },
        "event": {
          "type": "string",
          "title": "Event"
        },
        "contextId": {
          "type": "string",
          "title": "Context id"
        },
        "contextTypeName": {
          "type": "string",
          "title": "Context type name"
        },
        "reference": {
          "type": "string",
          "title": "Reference"
        },
        "startDate": {
          "type": "string",
          "title": "Start date",
          "format": "date-time"
        },
        "startBeforeDate": {
          "type": "string",
          "title": "Start before date",
          "format": "date-time"
        },
        "dueDate": {
          "type": "string",
          "title": "Due date",
          "format": "date-time"
        },
        "taskId": {
          "type": "string",
          "title": "Task id"
        },
        "taskTypeName": {
          "type": "string",
          "title": "Task type name"
        },
        "data": {
          "type": "object",
          "title": "Data",
          "additionalProperties": {}
        },
        "assignedTo": {
          "type": "string",
          "title": "Assigned to"
        },
        "assignedToRole": {
          "type": "string",
          "title": "Assigned to role"
        },
        "importance": {
          "$ref": "#/definitions/Importance"
        },
        "oldImportance": {
          "$ref": "#/definitions/Importance"
        },
        "oldLabels": {
          "type": "array",
          "title": "Old labels",
          "items": {
            "type": "string"
          }
        },
        "oldData": {
          "type": "object",
          "title": "Old data",
          "additionalProperties": {}
        },
        "oldStartDate": {
          "type": "string",
          "title": "Old start date",
          "format": "date-time"
        },
        "oldStartBeforeDate": {
          "type": "string",
          "title": "Old start before date",
          "format": "date-time"
        },
        "oldDueDate": {
          "type": "string",
          "title": "Old due date",
          "format": "date-time"
        },
        "oldAssignedTo": {
          "type": "string",
          "title": "Old assigned to"
        },
        "oldAssignedToRole": {
          "type": "string",
          "title": "Old assigned to role"
        }
      }
    },
    "TaskArchived": {
      "type": "object",
      "required": [
        "timestamp",
        "requestId",
        "event",
        "contextId",
        "contextTypeName",
        "reference",
        "taskId",
        "taskTypeName"
      ],
      "properties": {
        "timestamp": {
          "type": "string",
          "title": "Timestamp",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "title": "Id"
        },
        "requestId": {
          "type": "string",
          "title": "Request id"
        },
        "event": {
          "type": "string",
          "title": "Event"
        },
        "contextId": {
          "type": "string",
          "title": "Context id"
        },
        "contextTypeName": {
          "type": "string",
          "title": "Context type name"
        },
        "reference": {
          "type": "string",
          "title": "Reference"
        },
        "startDate": {
          "type": "string",
          "title": "Start date",
          "format": "date-time"
        },
        "startBeforeDate": {
          "type": "string",
          "title": "Start before date",
          "format": "date-time"
        },
        "dueDate": {
          "type": "string",
          "title": "Due date",
          "format": "date-time"
        },
        "taskId": {
          "type": "string",
          "title": "Task id"
        },
        "taskTypeName": {
          "type": "string",
          "title": "Task type name"
        },
        "data": {
          "type": "object",
          "title": "Data",
          "additionalProperties": {}
        },
        "assignedTo": {
          "type": "string",
          "title": "Assigned to"
        },
        "assignedToRole": {
          "type": "string",
          "title": "Assigned to role"
        },
        "importance": {
          "$ref": "#/definitions/Importance"
        }
      }
    },
    "MilestoneReached": {
      "type": "object",
      "required": [
        "timestamp",
        "requestId",
        "event",
        "contextId",
        "contextTypeName",
        "reference",
        "milestoneName",
        "lastReached",
        "value"
      ],
      "properties": {
        "timestamp": {
          "type": "string",
          "title": "Timestamp",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "title": "Id"
        },
        "requestId": {
          "type": "string",
          "title": "Request id"
        },
        "event": {
          "type": "string",
          "title": "Event"
        },
        "contextId": {
          "type": "string",
          "title": "Context id"
        },
        "contextTypeName": {
          "type": "string",
          "title": "Context type name"
        },
        "reference": {
          "type": "string",
          "title": "Reference"
        },
        "milestoneName": {
          "type": "string",
          "title": "Milestone name"
        },
        "lastReached": {
          "type": "string",
          "title": "Last reached",
          "format": "date-time"
        },
        "value": {}
      }
    },
    "MilestoneCleared": {
      "type": "object",
      "required": [
        "timestamp",
        "requestId",
        "event",
        "contextId",
        "contextTypeName",
        "reference",
        "milestoneName"
      ],
      "properties": {
        "timestamp": {
          "type": "string",
          "title": "Timestamp",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "title": "Id"
        },
        "requestId": {
          "type": "string",
          "title": "Request id"
        },
        "event": {
          "type": "string",
          "title": "Event"
        },
        "contextId": {
          "type": "string",
          "title": "Context id"
        },
        "contextTypeName": {
          "type": "string",
          "title": "Context type name"
        },
        "reference": {
          "type": "string",
          "title": "Reference"
        },
        "milestoneName": {
          "type": "string",
          "title": "Milestone name"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Contexts",
      "description": "Provides access to query existing context instances and dispatch actions."
    },
    {
      "name": "Events",
      "description": "Provides access to query and register events."
    },
    {
      "name": "Functions",
      "description": "Provides end-points to discovery modules and their functions and to maintain user-defined functions."
    },
    {
      "name": "Tasks",
      "description": "Provides access to query existing tasks, manage them, and submit responses."
    },
    {
      "name": "Webhooks"
    }
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "in": "header",
      "name": "x-api-key"
    }
  },
  "basePath": "/",
  "security": [
    {
      "Api key": []
    }
  ],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.nimflow.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.nimflow.com/legal/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Data"
    }
  ]
}