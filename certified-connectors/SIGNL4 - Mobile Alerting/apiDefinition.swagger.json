{
  "swagger": "2.0",
  "info": {
    "contact": {
      "name": "Derdack GmbH",
      "url": "https://www.signl4.com/feedback-we-love-hear-from-you/",
      "email": "success@signl4.com"
    },
    "description": "SIGNL4 offers critical mobile alerting, incident response and service dispatching for operating critical infrastructure. It alerts you persistently via app push, SMS text and voice calls including tracking, escalation, collaboration and duty planning.",
    "title": "SIGNL4 - Mobile Alerting",
    "version": "2.0"
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.signl4.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.signl4.com/privacy-policy/"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "IT Operations; Communication"
    }
  ],
  "host": "connect.signl4.com",
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/v2/alerts": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Alert to raise.",
            "x-ms-summary": "Alert to raise",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.RaiseAlertRequestInfo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/V2.AlertDetails"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "Triggers a new alert for your team. All team members on duty will receive alert notifications.",
        "summary": "Trigger Alert",
        "operationId": "AlertsTrigger"
      }
    },
    "/v2/alerts/acknowledgeAll": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "User ID of the user to be used to acknowledge the alarms.",
            "x-ms-summary": "User ID",
            "in": "query",
            "name": "userId",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ChangeAlertStatusFilterInfo"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred."
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "This method confirms all unhandled alerts your team currently has by a specific user.",
        "summary": "Confirms all visible alerts",
        "operationId": "AlertsAcknowledgeAll"
      }
    },
    "/v2/alerts/acknowledgeMultiple": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ChangeAlertStatusMultipleInfo"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "This method confirms all alerts provided.",
        "summary": "Acknowlegde multiple alerts",
        "operationId": "AlertsAcknowledgeMultiple"
      }
    },
    "/v2/alerts/closeAll": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "User ID of the user to be used to close the alarms.",
            "x-ms-summary": "User ID",
            "in": "query",
            "name": "userId",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ChangeAlertStatusFilterInfo"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "This method closes all acknowledged alerts your team currently has.",
        "summary": "Close all acknowledged alerts",
        "operationId": "AlertsCloseAll"
      }
    },
    "/v2/alerts/closeMultiple": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ChangeAlertStatusMultipleInfo"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "This method closes all alerts provided.",
        "summary": "Close multiple alerts",
        "operationId": "AlertsCloseMultiple"
      }
    },
    "/v2/alerts/paged": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "User ID of the user you want to get alerts for.",
            "x-ms-summary": "User ID",
            "in": "query",
            "name": "userId",
            "type": "string"
          },
          {
            "default": 100,
            "description": "Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.\r\nNumber of alerts could be less if filtered but at least 1.",
            "x-ms-summary": "Alert limit",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "type": "integer"
          },
          {
            "description": "The filter defines which alerts are supposed to be retrieved.",
            "x-ms-summary": "Filter",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.AlertFilterRequestInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paged result with found alerts and continuation token if more alerts are in the\r\ndatabase.",
            "schema": {
              "$ref": "#/definitions/PagedResultsPublic-1-V2.AlertInfo-"
            }
          },
          "204": {
            "description": "There were no alerts found for the specified filter."
          },
          "400": {
            "description": "Required parameters could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "Gets alerts paged.",
        "summary": "Gets alerts paged",
        "operationId": "AlertsGetPaged"
      }
    },
    "/v2/alerts/report": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "User ID of the user for whom you want a report.",
            "x-ms-summary": "User ID",
            "in": "query",
            "name": "userId",
            "type": "string"
          },
          {
            "description": "Team IDs of the teams you want a report for. If you don't set a team id you will get all\r\nressources of all teams you have access to.",
            "x-ms-summary": "Team IDs",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "teamId",
            "type": "array"
          }
        ],
        "responses": {
          "207": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MultiTeamResult-2-V2.AlertCountsDetails-V2.AlertReportError-"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "Returns information about the occurred alert volume in different time periods as well as information about the\r\nresponse behaviour (amount of confirmed and unhandled alerts) of the team members.",
        "summary": "Get Alert Report",
        "operationId": "AlertsGetReport"
      }
    },
    "/v2/alerts/undoAcknowledgeMultiple": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Configure which user should be undone for which alerts.",
            "x-ms-summary": "User ID",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ChangeAlertStatusMultipleInfo"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "This method tries to undo the acknowledgement of multiple alerts via a queue. The operation is handled in the\r\nbackground.",
        "summary": "Queue undo of multiple acknowledgments",
        "operationId": "AlertsUndoAcknowledgeMultiple"
      }
    },
    "/v2/alerts/undoCloseMultiple": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ChangeAlertStatusMultipleInfo"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "This method tries to undo multiple alert closes. The operation is handled in the background.",
        "summary": "Withdraw closure of multiple alerts",
        "operationId": "AlertsUndoCloseMultiple"
      }
    },
    "/v2/alerts/{alertId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the requested Alert.",
            "x-ms-summary": "Alert ID",
            "in": "path",
            "name": "alertId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID.",
            "x-ms-summary": "User ID",
            "in": "query",
            "name": "userId",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/V2.AlertInfo"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "Gets an alert by id.",
        "summary": "Get Alert",
        "operationId": "AlertsGet"
      }
    },
    "/v2/alerts/{alertId}/acknowledge": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id to acknowledge an alert.",
            "x-ms-summary": "Alert ID",
            "in": "path",
            "name": "alertId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.ChangeAlertStatusRequestInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/V2.AlertInfo"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "No alert with id was found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "409": {
            "description": "Alert can't be acknowledged because it is against the defined alert lifecycle.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "Acknowledge an alert.",
        "summary": "Acknowledge an alert",
        "operationId": "AlertsAcknowledge"
      }
    },
    "/v2/alerts/{alertId}/annotate": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the alert to annotate.",
            "x-ms-summary": "Alert ID",
            "in": "path",
            "name": "alertId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Annotation Information.",
            "x-ms-summary": "Annotation Information",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.AlertAnnotationInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/V2.AlertAnnotationDetails"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "Annotates an alert by given Annotation Info.",
        "summary": "Annotate Alert",
        "operationId": "AlertsAnnotate"
      }
    },
    "/v2/alerts/{alertId}/attachments": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the requested Alert.",
            "x-ms-summary": "Alert ID",
            "in": "path",
            "name": "alertId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.AlertAttachmentInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "Get attachments of an alert by id.",
        "summary": "Get attachment infos of an alert",
        "operationId": "AlertsGetAttachmentInfo"
      }
    },
    "/v2/alerts/{alertId}/attachments/{attachmentId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the alert that contains the wanted attachment.",
            "x-ms-summary": "Alert ID",
            "in": "path",
            "name": "alertId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Id of the attachment, that you want to retrieve.",
            "x-ms-summary": "Attachment ID",
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional parameter defining the wanted width of the picture that is retrieved.",
            "x-ms-summary": "Image Width",
            "format": "int32",
            "in": "query",
            "name": "width",
            "type": "integer"
          },
          {
            "description": "Optional parameter defining the wanted height of the picture that is retrieved.",
            "x-ms-summary": "Image Height",
            "format": "int32",
            "in": "query",
            "name": "height",
            "type": "integer"
          },
          {
            "default": true,
            "description": "Optional parameter defining whether it's wanted to scale the retrieved image. Default is set to\r\ntrue.",
            "x-ms-summary": "Scale",
            "in": "query",
            "name": "scale",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the attachment image with additional meta information.",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "204": {
            "description": "The image of the attachment was not uploaded yet."
          },
          "400": {
            "description": "A passed parameter was either empty or invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Authorization failed."
          },
          "404": {
            "description": "The attachment image was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "Gets a specified attachment of a specified alert.",
        "summary": "Gets a specified attachment of a specified alert",
        "operationId": "AlertsGetAttachment"
      }
    },
    "/v2/alerts/{alertId}/close": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id to acknowledge an alert.",
            "x-ms-summary": "Alert ID",
            "in": "path",
            "name": "alertId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Change Alert Status Request Information.",
            "x-ms-summary": "Change Alert Status Request Information",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.ChangeAlertStatusRequestInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/V2.AlertInfo"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "No alert with id was found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "409": {
            "description": "Alert can't be closed because it is against the defined alert lifecycle.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "Close an alert.",
        "summary": "Close an alert",
        "operationId": "AlertsClose"
      }
    },
    "/v2/alerts/{alertId}/details": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Alert you want to get.",
            "x-ms-summary": "Alert ID",
            "in": "path",
            "name": "alertId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID of user in which behave the api is called. It is used for filtering purposes regarding the\r\nalert.",
            "x-ms-summary": "User ID",
            "in": "query",
            "name": "userId",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all accessable information about the alert.",
            "schema": {
              "$ref": "#/definitions/V2.AlertDetails"
            }
          },
          "400": {
            "description": "A parameter is missing.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You don't have access to this alert.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "The alert was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "Get details about an alert.",
        "summary": "Get details about an alert",
        "operationId": "AlertsGetDetails"
      }
    },
    "/v2/alerts/{alertId}/escalateToTeam": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Alert ID for Alert you want to escalate.",
            "x-ms-summary": "Alert ID",
            "in": "path",
            "name": "alertId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Infos for escalation target",
            "x-ms-summary": "Escalation Target Information",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.EscalateAlertRequestInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Escalation successful.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Some parameters were missing.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You are not allowed to perform this method in behave of the user or you don't have access to this alert.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occurred while queuing escalation.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "Escalate an alert manually to a team.",
        "summary": "Escalate an alert manually to a team",
        "operationId": "AlertsEscalateToTeam"
      }
    },
    "/v2/alerts/{alertId}/notifications": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the requested Alert.",
            "x-ms-summary": "Alert ID",
            "in": "path",
            "name": "alertId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/AlertNotificationInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "Get notifications of all users by alert id.",
        "summary": "Get alert notifications",
        "operationId": "AlertsGetNotifications"
      }
    },
    "/v2/alerts/{alertId}/timeline": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the requested Alert.",
            "x-ms-summary": "Alert ID",
            "in": "path",
            "name": "alertId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID.",
            "x-ms-summary": "User ID",
            "in": "query",
            "name": "userId",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {},
              "type": "array"
            }
          },
          "204": {
            "description": "No annotations were found for the alert."
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "Get alert timeline entries of an alert by id.",
        "summary": "Get alert timeline entries",
        "operationId": "AlertsGetTimeline"
      }
    },
    "/v2/alerts/{alertId}/undoAcknowledge": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Alert ID.",
            "x-ms-summary": "Alert ID",
            "in": "path",
            "name": "alertId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.ChangeAlertStatusRequestInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated alert.",
            "schema": {
              "$ref": "#/definitions/V2.AlertInfo"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "User is not allowed to undo the acknowledgement.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "This method tries to undo an alert acknowledgement.",
        "summary": "Undo the acknowledgement of an alert",
        "operationId": "AlertsUndoAck"
      }
    },
    "/v2/alerts/{alertId}/undoClose": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Alert ID.",
            "x-ms-summary": "Alert ID",
            "in": "path",
            "name": "alertId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.ChangeAlertStatusRequestInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/V2.AlertInfo"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "User is not allowed to undo the close.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Alerts"
        ],
        "description": "This method tries to undo an alert close.",
        "summary": "Undo the closure of an alert",
        "operationId": "AlertsUndoClose"
      }
    },
    "/v2/callouts/templates": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Callout templates from subscription.",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.CalloutTemplateDetails"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Some required Parameter is missing or feature is not licensed",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You don't have the permissions to access this teams ressouces.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "CalloutsTemplates"
        ],
        "description": "Get all callout templates for your subscription.",
        "summary": "Get all callout templates for your subscription",
        "operationId": "CalloutsGetTemplates"
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Template you want to save",
            "x-ms-summary": "Template ID",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.CalloutTemplateDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Callout templates from subscription.",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.CalloutTemplateDetails"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Some required Parameter is missing or feature is not licensed",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You don't have the permissions to access this teams ressouces.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "CalloutsTemplates"
        ],
        "description": "Create new callout templates for your subscription.",
        "summary": "Create new callout templates for your subscription",
        "operationId": "CalloutsCreateTemplate"
      }
    },
    "/v2/callouts/templates/{templateId}": {
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Template ID.",
            "x-ms-summary": "Template ID",
            "in": "path",
            "name": "templateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content if save is successful."
          },
          "400": {
            "description": "Some required Parameter is missing or feature is not licensed",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You don't have the permissions to access this teams ressouces.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "CalloutsTemplates"
        ],
        "description": "Delete existing callout template from your subscription.",
        "summary": "Delete existing callout template from your subscription",
        "operationId": "CalloutsDeleteTemplate"
      },
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of template you want to update",
            "x-ms-summary": "Template ID",
            "in": "path",
            "name": "templateId",
            "required": true,
            "type": "string"
          },
          {
            "description": "New template information",
            "x-ms-summary": "New Template Information",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.CalloutTemplateDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Callout templates from subscription.",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.CalloutTemplateDetails"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Some required Parameter is missing or feature is not licensed",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You don't have the permissions to access this teams ressouces.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "CalloutsTemplates"
        ],
        "description": "Update existing callout template for your subscription.",
        "summary": "Update existing callout template for your subscription",
        "operationId": "CalloutsUpdateTemplate"
      }
    },
    "/v2/categories": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID.",
            "x-ms-summary": "Team ID",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "teamId",
            "type": "array"
          }
        ],
        "responses": {
          "207": {
            "description": "Returns array with the category infos and possible errors.",
            "schema": {
              "$ref": "#/definitions/MultiTeamResult-2-V2.CategoryDetails-V2.CategoryError-"
            }
          },
          "400": {
            "description": "If the input is not valid.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "description": "Get all categories.",
        "summary": "Get all categories",
        "operationId": "CategoriesGetAll"
      }
    },
    "/v2/categories/images": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return names of all category images",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "204": {
            "description": "Request was canceled."
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "No category images found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "description": "Gets the names of all alert category images.\r\nYou can get the image by going to account.signl4.com/images/alerts/categoryImageName.svg.",
        "summary": "Gets the names of all alert category images",
        "operationId": "CategoriesGetImageNames"
      }
    },
    "/v2/categories/{teamId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the categories belong to",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the category infos",
            "schema": {
              "items": {
                "$ref": "#/definitions/CategoryInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "If the input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "If the resource was not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "description": "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7",
        "summary": "Get all categories",
        "operationId": "CategoriesGetAllOfTeam"
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the category belongs to",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Category to be created",
            "x-ms-summary": "Category",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CategoryInfo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created category",
            "schema": {
              "$ref": "#/definitions/CategoryInfo"
            }
          },
          "400": {
            "description": "If the input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "If the resource was not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "description": "Sample Request:\r\n            \r\n    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7\r\n    {\r\n        \"name\": \"Water\",\r\n        \"imageName\": \"water.svg\",\r\n        \"color\": \"#0000cc\",\r\n        \"keywordMatching\": \"Any\",\r\n        \"keywords\": [\r\n            {\r\n                \"value\": \"H2O\"\r\n            },\r\n            {\r\n                \"value\": \"Water\"\r\n            }\r\n        ]\r\n    }",
        "summary": "Create a new category",
        "operationId": "CategoriesCreate"
      }
    },
    "/v2/categories/{teamId}/metrics": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the categories belongs to",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of category metrics",
            "schema": {
              "items": {
                "$ref": "#/definitions/CategoryMetrics"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "If the input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "If the resource was not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "description": "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/metrics",
        "summary": "Get metrics for all categories",
        "operationId": "CategoriesGetAllMetrics"
      }
    },
    "/v2/categories/{teamId}/{categoryId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the category belongs to",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the category to get",
            "x-ms-summary": "Category ID",
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the category details",
            "schema": {
              "$ref": "#/definitions/CategoryInfo"
            }
          },
          "400": {
            "description": "If the input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "If the resource was not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "description": "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e",
        "summary": "Get a specific category",
        "operationId": "CategoriesGet"
      },
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the category belongs to",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the category to delete",
            "x-ms-summary": "Category ID",
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "If the delete operation was successful"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "If the input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "If the resource was not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "description": "Sample Request:\r\n            \r\n    DELETE /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e",
        "summary": "Delete an existing category",
        "operationId": "CategoriesDelete"
      },
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the category belongs to",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Category ID",
            "x-ms-summary": "Category ID",
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Category to be updated",
            "x-ms-summary": "Category Information",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CategoryInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated category",
            "schema": {
              "$ref": "#/definitions/CategoryInfo"
            }
          },
          "400": {
            "description": "If the input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "If the resource was not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "description": "Sample Request:\r\n            \r\n    PUT /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e\r\n    {\r\n        \"name\": \"Water-Updated\",\r\n        \"imageName\": \"water.svg\",\r\n        \"color\": \"#0000cc\",\r\n        \"keywordMatching\": \"All\",\r\n        \"keywords\": [\r\n            {\r\n                \"value\": \"H2O\"\r\n            },\r\n            {\r\n                \"value\": \"Water\"\r\n            },\r\n            {\r\n                \"value\": \"Wet\"\r\n            }\r\n        ]\r\n    }",
        "summary": "Update an existing category",
        "operationId": "CategoriesUpdate"
      }
    },
    "/v2/categories/{teamId}/{categoryId}/metrics": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the category belongs to",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the category to get",
            "x-ms-summary": "Category ID",
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the category metrics",
            "schema": {
              "$ref": "#/definitions/CategoryMetrics"
            }
          },
          "400": {
            "description": "If the input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "If the resource was not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "description": "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/metrics",
        "summary": "Get metrics for a specific category",
        "operationId": "CategoriesGetMetrics"
      }
    },
    "/v2/categories/{teamId}/{categoryId}/subscriptions": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the category belongs to",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Category to get subscriptions for",
            "x-ms-summary": "Category ID",
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the category subscriptions",
            "schema": {
              "items": {
                "$ref": "#/definitions/CategorySubscriptionInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "If the input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "If the resource was not found"
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "description": "Sample Request:\r\n            \r\n    GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions\r\n    {\r\n    }",
        "summary": "Get category subscriptions",
        "operationId": "CategoriesGetSubscription"
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the category belongs to",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Category to be updated",
            "x-ms-summary": "Category ID",
            "in": "path",
            "name": "categoryId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "items": {
                "$ref": "#/definitions/CategorySubscriptionInfo"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated category subscriptions",
            "schema": {
              "items": {
                "$ref": "#/definitions/CategorySubscriptionInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "If the input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "If the resource was not found"
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Categories"
        ],
        "description": "Sample Request:\r\n            \r\n    POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions\r\n    {\r\n    }",
        "summary": "Set category subscriptions",
        "operationId": "CategoriesSetSubscription"
      }
    },
    "/v2/duties/punchIn": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Duty Change Args Request.",
            "x-ms-summary": "Duty Change Args Request",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.DutyChangeArgsRequest"
            }
          }
        ],
        "responses": {
          "207": {
            "description": "Returns successful and errored duty changes.",
            "schema": {
              "$ref": "#/definitions/MultiTeamResult-2-V2.UserDutyDetails-V2.DutyChangeError-"
            }
          },
          "403": {
            "description": "You don't have access to change the status fo this user.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "No team found for user to change duty status in.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An unexpected error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Duties"
        ],
        "description": "The specified user will be punched in to duty.",
        "summary": "Punch User in",
        "operationId": "DutiesUserPunchIn"
      }
    },
    "/v2/duties/punchInAsManager": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Duty Change Args Request.",
            "x-ms-summary": "Duty Change Args Request",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.DutyChangeArgsRequest"
            }
          }
        ],
        "responses": {
          "207": {
            "description": "Returns successful and errored duty changes.",
            "schema": {
              "$ref": "#/definitions/MultiTeamResult-2-V2.UserDutyDetails-V2.DutyChangeError-"
            }
          },
          "403": {
            "description": "You don't have access to change the status fo this user.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "No team found for user to change duty status in.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An unexpected error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Duties"
        ],
        "description": "The specified user will be punched in to duty as a manager.",
        "summary": "Punch User in as Manager",
        "operationId": "DutiesUserPunchInAsManager"
      }
    },
    "/v2/duties/punchOut": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Duty Change Args Request.",
            "x-ms-summary": "Duty Change Args Request",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.DutyChangeArgsRequest"
            }
          }
        ],
        "responses": {
          "207": {
            "description": "Returns successful and errored duty changes.",
            "schema": {
              "$ref": "#/definitions/MultiTeamResult-2-V2.UserDutyDetails-V2.DutyChangeError-"
            }
          },
          "403": {
            "description": "You don't have access to change the status fo this user.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "No team found for user to change duty status in.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An unexpected error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Duties"
        ],
        "description": "The specified user will be punched out from duty.",
        "summary": "Punch User out",
        "operationId": "DutiesUserPunchOut"
      }
    },
    "/v2/duties/summary": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "IDs of the teams to get the summaries for.",
            "x-ms-summary": "Team IDs",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "teamId",
            "type": "array"
          },
          {
            "description": "Decide if you want all duties or only the last two.",
            "x-ms-summary": "Last Two Duties",
            "in": "query",
            "name": "lastTwoDuties",
            "type": "boolean"
          }
        ],
        "responses": {
          "207": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MultiTeamResult-2-TeamDutySummaryInfo-V2.TeamDutySummaryError-"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Duties"
        ],
        "description": "Get duty assistant info for teams.",
        "summary": "Get duty assistant info for teams",
        "operationId": "DutiesGetDutyAssistantInfo"
      }
    },
    "/v2/eventDistributions/{distributionId}": {
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of event source",
            "x-ms-summary": "Event Source ID",
            "in": "path",
            "name": "distributionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Event distribution is deleted."
          },
          "400": {
            "description": "Request was missing required information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Your are not allowed to delete this resource.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Event distribution not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "EventDistributions"
        ],
        "description": "Delete an event distribution.",
        "summary": "Delete an event distribution",
        "operationId": "EventDistributionDelete"
      }
    },
    "/v2/events/paged": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.\r\nNumber of alerts could be less if filtered but at least 1.",
            "x-ms-summary": "Limit",
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "type": "integer"
          },
          {
            "description": "The filter defines which alerts are supposed to be retrieved.",
            "x-ms-summary": "Event Filter",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/EventFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns paged result with found events and continuation token, if database holds more events.",
            "schema": {
              "$ref": "#/definitions/PagedResultsPublic-1-OverviewEvent-"
            }
          },
          "204": {
            "description": "No event could be found (with passed filter)"
          },
          "400": {
            "description": "Required parameters could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Events"
        ],
        "description": "Get overview event paged. If there are more results, you also get a continuation token which you can add to\r\nthe event filter.",
        "summary": "Get overview event paged",
        "operationId": "EventsGetOverviewPaged"
      }
    },
    "/v2/events/{eventId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Event id for the event you want to get",
            "x-ms-summary": "Event ID",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the event",
            "schema": {
              "$ref": "#/definitions/V2.EventDetails"
            }
          },
          "403": {
            "description": "You are not allowed to access this resource.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Event was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An unhandled server error happened.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Events"
        ],
        "description": "Get details of an event.",
        "summary": "Get details of an event",
        "operationId": "EventsGetDetails"
      }
    },
    "/v2/events/{eventId}/overview": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of event to get.",
            "x-ms-summary": "Event ID",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns overview event with specific id.",
            "schema": {
              "$ref": "#/definitions/OverviewEvent"
            }
          },
          "400": {
            "description": "Required parameters could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Event with specified id could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Events"
        ],
        "description": "Get overview event by id.",
        "summary": "Get overview event",
        "operationId": "EventsGetOverview"
      }
    },
    "/v2/events/{eventId}/parameters": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Event Id of the requested Alert.",
            "x-ms-summary": "Event ID",
            "in": "path",
            "name": "eventId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/EventParameterInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Events"
        ],
        "description": "Get parameters of an event by id.",
        "summary": "Get event parameters",
        "operationId": "EventsGetParameters"
      }
    },
    "/v2/events/{teamSecret}/": {
      "post": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team Secret.",
            "x-ms-summary": "Team Secret",
            "in": "path",
            "name": "teamSecret",
            "required": true,
            "type": "string"
          },

          {
            "description": "Event details.",
            "x-ms-summary": "Event details",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.CustomEventsSendInfo"
            }
          },          {
            "description": "External ID Parameter.",
            "x-ms-summary": "External ID Parameter",
            "in": "query",
            "name": "ExtIdParam",
            "type": "string"
          },          
          {
            "description": "External Status Parameter.",
            "x-ms-summary": "External Status Parameter",
            "in": "query",
            "name": "ExtStatusParam",
            "type": "string"
          },
          {
            "description": "New Status.",
            "x-ms-summary": "New Status",
            "in": "query",
            "name": "NewStatus",
            "type": "string"
          },
          {
            "description": "Resolved Status Parameter.",
            "x-ms-summary": "Resolved Status Parameter",
            "in": "query",
            "name": "ResolvedStatus",
            "type": "string"
          },
          {
            "description": "Ack Status.",
            "x-ms-summary": "Ack Status",
            "in": "query",
            "name": "AckStatus",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/OverviewEvent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Events"
        ],
        "description": "Send event.",
        "summary": "Send event",
        "operationId": "EventsSend"
      }
    },
    "/v2/eventsources": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team Ids to get the event sources from. If you don't add any team id, you get event sources you have access to from your subscription.",
            "x-ms-summary": "Team IDs",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "teamId",
            "type": "array"
          },
          {
            "default": false,
            "description": "If true internal Event Sources type (System, Manual, API) will be included in the result.",
            "x-ms-summary": "Include Internal",
            "in": "query",
            "name": "includeInternal",
            "type": "boolean"
          },
          {
            "description": "<p/><ul><li>0 = EN</li><li>1 = DE</li></ul>",
            "x-ms-summary": "Language",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "in": "query",
            "name": "language",
            "type": "integer"
          }
        ],
        "responses": {
          "207": {
            "description": "Event sources are returned along side some errors if occurred.",
            "schema": {
              "$ref": "#/definitions/MultiTeamResult-2-EventSourceEndpointInfo-V2.EventSourceEndpointError-"
            }
          },
          "403": {
            "description": "Subscription information was not found in the claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "No teams to request event sources from where found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "EventSources"
        ],
        "description": "Get event sources from one or more teams.",
        "summary": "Get event sources from one or more teams",
        "operationId": "EventSourcesGet"
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Information for creating a new event source",
            "x-ms-summary": "Event Source Information",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.EventSourceCreateDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created event source is returned.",
            "schema": {
              "$ref": "#/definitions/EventSourceEndpointInfo"
            }
          },
          "400": {
            "description": ""
          },
          "403": {
            "description": "You are not allowed to access this resource.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "EventSources"
        ],
        "description": "Create event source.",
        "summary": "Create event source",
        "operationId": "EventSourcesCreate"
      }
    },
    "/v2/eventsources/{eventSourceId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the event source.",
            "x-ms-summary": "Event Source ID",
            "in": "path",
            "name": "eventSourceId",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p/><ul><li>0 = EN</li><li>1 = DE</li></ul>",
            "x-ms-summary": "Language",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "in": "query",
            "name": "language",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Event source.",
            "schema": {
              "$ref": "#/definitions/EventSourceEndpointInfo"
            }
          },
          "400": {
            "description": "Request was missing required information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Subscription information was not found in the claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Requested event source not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "EventSources"
        ],
        "description": "Get event source by id.",
        "summary": "Get event source by id",
        "operationId": "EventSourcesGetById"
      },
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of event source",
            "x-ms-summary": "Event Source ID",
            "in": "path",
            "name": "eventSourceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Event source is deleted."
          },
          "400": {
            "description": "Request was missing required information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Your are not allowed to delete this resource.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Event source to delete not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "EventSources"
        ],
        "description": "Delete an event source.",
        "summary": "Delete an event source",
        "operationId": "EventSourcesDelete"
      },
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of event source",
            "x-ms-summary": "Event Source ID",
            "in": "path",
            "name": "eventSourceId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Values you want to update.",
            "x-ms-summary": "Event Source Update Details",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.EventSourceUpdateDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated event source is returned.",
            "schema": {
              "$ref": "#/definitions/EventSourceEndpointInfo"
            }
          },
          "400": {
            "description": "Request was missing required information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Your are not allowed to update this resource.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Event source not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "EventSources"
        ],
        "description": "Update an event source.",
        "summary": "Update an event source",
        "operationId": "EventSourcesUpdate"
      }
    },
    "/v2/prepaid/balance": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PrepaidBalanceInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Prepaid"
        ],
        "description": "Get your subscription's current prepaid balance.",
        "summary": "Get your subscription's current prepaid balance",
        "operationId": "PrepaidGetBalance"
      }
    },
    "/v2/prepaid/settings": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PrepaidSettingsInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Prepaid"
        ],
        "description": "Get your subscription's current prepaid settings.",
        "summary": "Get your subscription's current prepaid settings",
        "operationId": "PrepaidGetSettings"
      },
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Settings object containing the new values.",
            "x-ms-summary": "Settings Object",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PrepaidSettingsInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PrepaidSettingsInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Prepaid"
        ],
        "description": "Update your subscription's current prepaid settings.",
        "summary": "Update your subscription's current prepaid settings",
        "operationId": "PrepaidUpdateSettings"
      }
    },
    "/v2/prepaid/transactions": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/PrepaidTransactionInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Prepaid"
        ],
        "description": "Get your subscription's prepaid transactions.",
        "summary": "Get your subscription's prepaid transactions",
        "operationId": "PrepaidGetTransactions"
      }
    },
    "/v2/prepaid/{subscriptionId}/prepaidSettings": {
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the subscription",
            "x-ms-summary": "Subscription ID",
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Settings object containing the new values.",
            "x-ms-summary": "Prepaid Settings Information",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PrepaidSettingsInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PrepaidSettingsInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Prepaid"
        ],
        "description": "Update a subscription's current prepaid settings.",
        "summary": "Update a subscription's current prepaid settings",
        "operationId": "PrepaidUpdateSettings55"
      }
    },
    "/v2/remoteActions": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID",
            "x-ms-summary": "Team ID",
            "in": "query",
            "name": "teamId",
            "type": "string"
          },
          {
            "description": "Optional filter for external id",
            "x-ms-summary": "External ID",
            "in": "query",
            "name": "externalId",
            "type": "string"
          },
          {
            "description": "<p/><ul><li>0 = Unknown</li><li>1 = Script</li><li>2 = EnterpriseAlert</li><li>3 = Webhook</li></ul>",
            "x-ms-summary": "Type",
            "enum": [
              0,
              1,
              2,
              3
            ],
            "format": "int32",
            "in": "query",
            "name": "type",
            "type": "integer"
          },
          {
            "description": "Executor Service",
            "x-ms-summary": "Executor Service",
            "in": "query",
            "name": "executorService",
            "type": "string"
          },
          {
            "description": "<p/><ul><li>0 = EN</li><li>1 = DE</li></ul>",
            "x-ms-summary": "Language",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "in": "query",
            "name": "language",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Remote Actions",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.RemoteActionInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "If the input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "RemoteActions"
        ],
        "description": "Sample Request:\r\n            \r\n    GET /RemoteActions?externalId=12345",
        "summary": "Returns Remote Actions",
        "operationId": "RemoteActionsGetActions"
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "<p/><ul><li>0 = EN</li><li>1 = DE</li></ul>",
            "x-ms-summary": "Language",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "in": "query",
            "name": "language",
            "type": "integer"
          },
          {
            "description": "Remote Action to be created",
            "x-ms-summary": "Remote Action Create Or Update Details",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.RemoteActionCreateOrUpdateDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the newly created Remote Action",
            "schema": {
              "$ref": "#/definitions/V2.RemoteActionDetails"
            }
          },
          "400": {
            "description": "The input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Any server side error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "RemoteActions"
        ],
        "description": "Sample Request:\r\n            \r\n    POST /remoteActions\r\n    {\r\n        \"teamId\": \"cbb70402-1359-477f-ac92-0171cf2b5ff7\",\r\n        \"name\": \"MyAction\",\r\n        \"enabled\": true,\r\n    }",
        "summary": "Create a new Remote Action",
        "operationId": "RemoteActionsCreate"
      }
    },
    "/v2/remoteActions/definitions": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "<p/><ul><li>0 = EN</li><li>1 = DE</li></ul>",
            "x-ms-summary": "Language",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "in": "query",
            "name": "language",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning remote action definitions.",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.RemoteActionDefinitionDetails"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "You are not allowed to access this resource.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Remote action Definition was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "RemoteActionDefinitions"
        ],
        "description": "Retrieve all available definition.",
        "summary": "Retrieve all available definition",
        "operationId": "RemoteActionsGetAvailableDefinitions"
      }
    },
    "/v2/remoteActions/definitions/{definitionId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of definition",
            "x-ms-summary": "Definition ID",
            "in": "path",
            "name": "definitionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p/><ul><li>0 = EN</li><li>1 = DE</li></ul>",
            "x-ms-summary": "Language",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "in": "query",
            "name": "language",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning remote action definition.",
            "schema": {
              "$ref": "#/definitions/V2.RemoteActionDefinitionDetails"
            }
          },
          "403": {
            "description": "You are not allowed to access this resource.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Remote action Definition was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "RemoteActionDefinitions"
        ],
        "description": "Retrieve a definition.",
        "summary": "Retrieve a definition",
        "operationId": "RemoteActionsGetDefinition"
      }
    },
    "/v2/remoteActions/journal/paged": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Max Results",
            "x-ms-summary": "Max Results",
            "default": 100,
            "format": "int32",
            "in": "query",
            "name": "maxResults",
            "type": "integer"
          },
          {
            "description": "<p/><ul><li>0 = EN</li><li>1 = DE</li></ul>",
            "x-ms-summary": "Language",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "in": "query",
            "name": "language",
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.RemoteJobJournalPagedFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Remote Jobs",
            "schema": {
              "$ref": "#/definitions/PagedResultsPublic-1-V2.RemoteJob-"
            }
          },
          "400": {
            "description": "If the input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "If the action was not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "RemoteJobsJournal"
        ],
        "description": "Sample Request:\r\n            \r\n    POST /remoteActions/journal/paged?maxResults=100\r\n    {\r\n        \"statusCode\": \"Executed\"\r\n    }",
        "summary": "Returns Remote Jobs paged from Journal",
        "operationId": "RemoteActionsGetJobsPaged"
      }
    },
    "/v2/remoteActions/journal/{jobId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The id of the job to return",
            "x-ms-summary": "Job ID",
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p/><ul><li>0 = EN</li><li>1 = DE</li></ul>",
            "x-ms-summary": "Language",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "in": "query",
            "name": "language",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Remote Job",
            "schema": {
              "$ref": "#/definitions/V2.RemoteJob"
            }
          },
          "400": {
            "description": "If the input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "If the resource was not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "RemoteJobsJournal"
        ],
        "description": "Sample Request:\r\n            \r\n    GET /remoteActions/journal/{jobId}",
        "summary": "Returns a Remote Job from Journal",
        "operationId": "RemoteActionsGetJob"
      }
    },
    "/v2/remoteActions/{actionId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The id of the action to return",
            "x-ms-summary": "Action ID",
            "in": "path",
            "name": "actionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p/><ul><li>0 = EN</li><li>1 = DE</li></ul>",
            "x-ms-summary": "Language",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "in": "query",
            "name": "language",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Remote Action",
            "schema": {
              "$ref": "#/definitions/V2.RemoteActionDetails"
            }
          },
          "400": {
            "description": "If the input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "If the resource was not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "RemoteActions"
        ],
        "description": "Sample Request:\r\n            \r\n    GET /RemoteActions/{actionId}",
        "summary": "Returns a Remote Action",
        "operationId": "RemoteActionsGet"
      },
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The id of the action to delete",
            "x-ms-summary": "Action ID",
            "in": "path",
            "name": "actionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Remote action was deleted successfully."
          },
          "403": {
            "description": "You have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "The resource was not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Any server side errors occurred",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "RemoteActions"
        ],
        "description": "Sample Request:\r\n            \r\n    DELETE /eaRemoteActions/{actionId}",
        "summary": "Deletes a Remote Action",
        "operationId": "RemoteActionsDelete"
      },
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of remote Action to be updated",
            "x-ms-summary": "Action ID",
            "in": "path",
            "name": "actionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "<p/><ul><li>0 = EN</li><li>1 = DE</li></ul>",
            "x-ms-summary": "Action ID",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "in": "query",
            "name": "language",
            "type": "integer"
          },
          {
            "description": "Remote Action to be updated",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.RemoteActionCreateOrUpdateDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated Remote Action",
            "schema": {
              "$ref": "#/definitions/V2.RemoteActionDetails"
            }
          },
          "400": {
            "description": "The input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You have no permission to access this resource.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Any server side errors occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "RemoteActions"
        ],
        "description": "Sample Request:\r\n            \r\n    PUT /remoteActions/{actionId}\r\n    {\r\n        \"teamId\": \"cbb70402-1359-477f-ac92-0171cf2b5ff7\",\r\n        \"name\": \"MyAction\",\r\n        \"enabled\": true,\r\n    }",
        "summary": "Updates a Remote Action",
        "operationId": "RemoteActionsUpdate"
      }
    },
    "/v2/remoteActions/{actionId}/jobs": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Action ID",
            "x-ms-summary": "Action ID",
            "in": "path",
            "name": "actionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Remote Job to be created",
            "x-ms-summary": "Remote Job Create",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.RemoteJobCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the newly created Remote Job",
            "schema": {
              "$ref": "#/definitions/V2.RemoteJob"
            }
          },
          "400": {
            "description": "If the input is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "If you have no permission to access this resource",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "If the action was not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "If any server side errors occur",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "RemoteJobs"
        ],
        "description": "Sample Request:\r\n            \r\n    POST /remoteActions/{actionId}/jobs\r\n    {\r\n        \"remoteActionPin\" : \"1234\",\r\n        \"parameters\": [\r\n            {\r\n                \"name\": \"Param1\",\r\n                \"value\": \"Value 1\"\r\n            }\r\n        ]\r\n    }",
        "summary": "Create a new Remote Job",
        "operationId": "RemoteActionsCreateJob"
      }
    },
    "/v2/schedules": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.SchedulesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.ScheduleDetails"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Schedules"
        ],
        "description": "Returns information about all planned schedules.",
        "summary": "Returns information about all planned schedules",
        "operationId": "SchedulesGetPlanned"
      }
    },
    "/v2/scripts/instances": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team IDs.",
            "x-ms-summary": "Team IDs",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "teamId",
            "type": "array"
          },
          {
            "description": "Modified Since.",
            "x-ms-summary": "Modified Since",
            "format": "date-time",
            "in": "query",
            "name": "modifiedSince",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/ScriptInstanceInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Returns all script instances in the subscription.",
        "summary": "Returns all script instances of the SIGNL4 team",
        "operationId": "ScriptsGetAll"
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Script instance to be created.",
            "x-ms-summary": "Script Instance ID",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ScriptInstanceCreateInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Existing script instance was updated as specified in body.",
            "schema": {
              "$ref": "#/definitions/ScriptInstanceDetails"
            }
          },
          "201": {
            "description": "New script instance was updated as specified in body.",
            "schema": {
              "$ref": "#/definitions/ScriptInstanceDetails"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal error has occurred during instance creation.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Creates a new script instance of the script specified in the request body.",
        "summary": "Creates a new script instance in the in the SIGNL4 team",
        "operationId": "ScriptsCreate"
      }
    },
    "/v2/scripts/instances/{instanceId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Instance Id of script instance to be returned.",
            "x-ms-summary": "Script Instance ID",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScriptInstanceDetails"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database or in memory.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Gets the script instance specified by the passed instance id.",
        "summary": "Returns all information about a given script instance",
        "operationId": "ScriptsGetInfo"
      },
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Instance Id of script instance to be returned.",
            "x-ms-summary": "Script Instance ID",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database or in memory.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Gets the script instance specified by the passed instance id.",
        "summary": "Deletes a script instance",
        "operationId": "ScriptsDelete"
      },
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Instance Id of the script to be updated.",
            "x-ms-summary": "Script Instance ID",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Script instance to be updated.",
            "x-ms-summary": "Script Instance Update Information",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ScriptInstanceUpdateInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScriptInstanceDetails"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal error has occurred during instance creation.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Updates the specified script instance, typically used for updating the configuration of a script.",
        "summary": "Updates a given script instance",
        "operationId": "ScriptsUpdateConfig"
      }
    },
    "/v2/scripts/instances/{instanceId}/data": {
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Instance Id of the script to be updated.",
            "x-ms-summary": "Script Instance ID",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Script instance to be updated.",
            "x-ms-summary": "Script Instance Custom User Data",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ScriptInstanceCustomUserData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScriptInstanceDetails"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal error has occurred during instance creation.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Updates the specified script instance.",
        "summary": "Updates custom data of a given script instance which includes its display name",
        "operationId": "ScriptsUpdateCustomData"
      }
    },
    "/v2/scripts/instances/{instanceId}/disable": {
      "post": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the instance to be disabled.",
            "x-ms-summary": "Script Instance ID",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScriptInstanceDetails"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Disables a given script instance.",
        "summary": "Disables a given script instance",
        "operationId": "ScriptsDisable"
      }
    },
    "/v2/scripts/instances/{instanceId}/enable": {
      "post": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the instance to be enabled.",
            "x-ms-summary": "Script Instance ID",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScriptInstanceDetails"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Enables a script instance.",
        "summary": "Enables a script instance",
        "operationId": "ScriptsEnable"
      }
    },
    "/v2/scripts/inventory": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/InventoryScriptInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal error occurred while loading all inventory scripts.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Returns all available inventory scripts which can be added to a SIGNL4 subscription.",
        "summary": "Returns all available inventory scripts",
        "operationId": "ScriptsGetAvailable"
      }
    },
    "/v2/scripts/inventory/parsed": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Language",
            "x-ms-summary": "Language",
            "in": "query",
            "name": "language",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/InventoryScriptInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Returns all inventory scripts.",
        "summary": "Returns all inventory scripts",
        "operationId": "ScriptsGetAll76"
      }
    },
    "/v2/scripts/inventory/parsed/{scriptId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The Id of the script to be returned.",
            "x-ms-summary": "Script ID",
            "in": "path",
            "name": "scriptId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Language",
            "x-ms-summary": "Language",
            "in": "query",
            "name": "language",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScriptInstanceDetails"
            }
          },
          "400": {
            "description": "Required information could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database or in memory.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Gets the script specified by the passed script id.",
        "summary": "Returns an inventory script by its id",
        "operationId": "ScriptsGet"
      }
    },
    "/v2/subscriptions": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/SubscriptionInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Get infos of all available/managed subscriptions.",
        "summary": "Get infos of all available and managed subscriptions",
        "operationId": "SubscriptionsGetAll"
      }
    },
    "/v2/subscriptions/{subscriptionId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the subscription that's to be retrieved.",
            "x-ms-summary": "Subscription ID",
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Get infos of a specific subscription.",
        "summary": "Get infos of a specific subscription",
        "operationId": "SubscriptionsGetInfo"
      }
    },
    "/v2/subscriptions/{subscriptionId}/channelPrices": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the subscription that needs to be retrieved.",
            "x-ms-summary": "Subscription ID",
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ChannelPriceInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Returns the subscription's channel price information.",
        "summary": "Returns the subscription's channel price information",
        "operationId": "SubscriptionsGetChannelPriceInfo"
      }
    },
    "/v2/subscriptions/{subscriptionId}/features": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the subscription from which the features need to be retrieved.",
            "x-ms-summary": "Subscription ID",
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/SubscriptionFeature"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Returns the features of a specified subscription.",
        "summary": "Returns the features of a specified subscription",
        "operationId": "SubscriptionsGetFeatures"
      }
    },
    "/v2/subscriptions/{subscriptionId}/inboundVoiceNumberLicenses": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the subscription",
            "x-ms-summary": "Subscription ID",
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserLicenseInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Gets a subscription's voice number licenses.",
        "summary": "Gets a subscription's voice number licenses",
        "operationId": "SubscriptionsGetVoiceNumberLicense"
      }
    },
    "/v2/subscriptions/{subscriptionId}/prepaidBalance": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the subscription",
            "x-ms-summary": "Subscription ID",
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PrepaidBalanceInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Prepaid"
        ],
        "description": "Get a subscription's current prepaid balance.",
        "summary": "Get a subscription's current prepaid balance",
        "operationId": "SubscriptionsGetPrepaidBalance"
      }
    },
    "/v2/subscriptions/{subscriptionId}/prepaidSettings": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the subscription",
            "x-ms-summary": "Subscription ID",
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PrepaidSettingsInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Prepaid"
        ],
        "description": "Get a subscription's current prepaid settings.",
        "summary": "Get a subscription's current prepaid settings",
        "operationId": "PrepaidGetSettings84"
      }
    },
    "/v2/subscriptions/{subscriptionId}/prepaidTransactions": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the subscription to get transactions for",
            "x-ms-summary": "Subscription ID",
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/PrepaidTransactionInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Prepaid"
        ],
        "description": "Get a subscription's prepaid transactions.",
        "summary": "Get a subscription's prepaid transactions",
        "operationId": "SubscriptionsGetPrepaidTransactions"
      }
    },
    "/v2/subscriptions/{subscriptionId}/profile": {
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the subscription to be updated",
            "x-ms-summary": "Subscription ID",
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Profile data to update subscription with",
            "x-ms-summary": "Subscription Profile",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SubscriptionProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Updates a subscriptions profile.",
        "summary": "Updates a subscriptions profile",
        "operationId": "SubscriptionsUpdateProfile"
      }
    },
    "/v2/subscriptions/{subscriptionId}/teams": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the subscription to be updated",
            "x-ms-summary": "Subscription ID",
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/TeamInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Get infos for all teams of the subscription.",
        "summary": "Get infos for all teams of the subscription",
        "operationId": "SubscriptionsGetAllTeamsInfo"
      }
    },
    "/v2/subscriptions/{subscriptionId}/userLicenses": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the subscription",
            "x-ms-summary": "Subscription ID",
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserLicenseInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "description": "Gets a subscription's user licenses.",
        "summary": "Gets a subscription's user licenses",
        "operationId": "SubscriptionsGetUserLicenses"
      }
    },
    "/v2/teams": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team IDs",
            "x-ms-summary": "Team IDs",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "teamId",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/TeamInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Get infos of all teams.",
        "summary": "Get infos of all teams",
        "operationId": "TeamsGetAllInfo"
      }
    },
    "/v2/teams/alertSettings": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team.",
            "x-ms-summary": "Team ID",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "teamId",
            "type": "array"
          }
        ],
        "responses": {
          "207": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MultiTeamResult-2-V2.AlertSettingsDetails-V2.AlertSettingsError-"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Gets alert settings of a specific team.",
        "summary": "Gets alert settings of a specific team",
        "operationId": "TeamsGetAlertSettings"
      }
    },
    "/v2/teams/dutySettings": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team IDs.",
            "x-ms-summary": "Team IDs",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "teamId",
            "type": "array"
          }
        ],
        "responses": {
          "207": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MultiTeamResult-2-V2.TeamDutySettingsDetails-V2.TeamDutySettingsError-"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Get team duty settings for multiple teams.",
        "summary": "Get team duty settings for multiple teams",
        "operationId": "TeamsGetDutySettings"
      }
    },
    "/v2/teams/memberships": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Information about user to invite, the team id where to invite and inviter id.",
            "x-ms-summary": "Invite Information",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.UsersInvitationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User invitation results are returned.",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.InvitationResult"
              },
              "type": "array"
            }
          },
          "204": {
            "description": "Request was canceled."
          },
          "400": {
            "description": "Required parameters or authentication info could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to request the access all required entities.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database."
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Invite users to a team.",
        "summary": "Invite users to a team",
        "operationId": "TeamsInviteUser"
      }
    },
    "/v2/teams/memberships/{userId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "User ID you want to access.",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Team memberships of a user.",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.TeamMembershipDetails"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Some required parameters are missing.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You are not allowed to access the user.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "The requested user was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Get Team memberships from a user.",
        "summary": "Get Team memberships from a user",
        "operationId": "TeamsGetTeamMemberships"
      }
    },
    "/v2/teams/public": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns public team information.",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.TeamPublicDetails"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Some parameter is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Get public information about all teams in a subscription.",
        "summary": "Get public information about all teams in a subscription",
        "operationId": "TeamsGetAllPublicInformation"
      }
    },
    "/v2/teams/users": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ids to request. If empty, you get all users of all teams you have access to.",
            "x-ms-summary": "Team IDs",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "teamId",
            "type": "array"
          }
        ],
        "responses": {
          "207": {
            "description": "Returns an array of user infos and possible errors.",
            "schema": {
              "$ref": "#/definitions/MultiTeamResult-2-V2.UserDetails-V2.TeamUserError-"
            }
          },
          "404": {
            "description": "No teams found to get user information from.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An unexpected error happened.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Getting all users of specified teams.",
        "summary": "Getting all users of specified teams",
        "operationId": "TeamsGetAllUsers"
      }
    },
    "/v2/teams/{teamId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team that should be retrieved.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TeamInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Gets infos of a specific team.",
        "summary": "Gets infos of a specific team",
        "operationId": "TeamsGetInfo"
      }
    },
    "/v2/teams/{teamId}/alertReports": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of team you want to download reports from.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/AlertAuditReportFileInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Get information about downloadable alert reports.",
        "summary": "Get information about downloadable alert reports",
        "operationId": "TeamsGetAlertReportsInfo"
      }
    },
    "/v2/teams/{teamId}/alertReports/{fileName}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of team you want to get the duty report file infos for.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "File name of file you want to download.",
            "x-ms-summary": "File Name",
            "in": "path",
            "name": "fileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Returns Alert Report.",
        "summary": "Returns Alert Report",
        "operationId": "TeamsGetAlertReport"
      }
    },
    "/v2/teams/{teamId}/alertSettings": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the settings should be retrieved for.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AlertSettings"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Gets alert settings of a specific team.",
        "summary": "Gets alert settings of a specific team",
        "operationId": "TeamsGetAlertSettings99"
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the settings should be set for.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Alert settings to be set",
            "x-ms-summary": "Alert Settings",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AlertSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AlertSettings"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Sets alert settings of a specific team.",
        "summary": "Sets alert settings of a specific team",
        "operationId": "TeamsSetAlertSettings"
      }
    },
    "/v2/teams/{teamId}/alertingPatterns": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team id of team you want to access",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all alerting patterns from whole team.",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.AlertingPatternDetails"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Required parameter missing.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Your don't have the permission to access this resource.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal server error happened.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Get all alerting patterns from team.",
        "summary": "Get all alerting patterns from team",
        "operationId": "TeamsGetAllAlertPatterns"
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID you want to create the pattern for",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "New Alerting pattern information",
            "x-ms-summary": "Alerting Pattern Details",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.AlertingPatternDetails"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns created alerting pattern",
            "schema": {
              "$ref": "#/definitions/V2.AlertingPatternDetails"
            }
          },
          "400": {
            "description": "Required parameter missing.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Your don't have the permission to access this resource.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal server error happened.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Create a new alerting pattern.",
        "summary": "Create a new alerting pattern",
        "operationId": "TeamsCreateAlertPattern"
      }
    },
    "/v2/teams/{teamId}/alertingPatterns/timeSlots/validate": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID of alerting pattern",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Alerting pattern ID of pattern you want to save time slots for. Can be null",
            "x-ms-summary": "Pattern ID",
            "in": "query",
            "name": "patternId",
            "type": "string"
          },
          {
            "description": "Category IDs of the pattern you want to validate. Can be null.",
            "x-ms-summary": "Category IDs",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "categoryIds",
            "type": "array"
          },
          {
            "description": "Time slot you want to validate",
            "in": "body",
            "name": "body",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.TimeSlotDetails"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns validation result",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.TimeSlotValidationResultDetails"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Required parameter missing.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You don't have the permission to access this resource.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "409": {
            "description": "The time slots conflicted with existing time slots.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal server error happened.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Validate a time slots of a pattern against all existing time slots of other patterns.",
        "summary": "Validate a time slots of a pattern",
        "operationId": "TeamsValidateAlertPattern"
      }
    },
    "/v2/teams/{teamId}/alertingPatterns/{patternId}": {
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID of team you want to access",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pattern ID for pattern you want to access",
            "x-ms-summary": "Pattern ID",
            "in": "path",
            "name": "patternId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion was successful."
          },
          "400": {
            "description": "Required parameter missing.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Your don't have the permission to access this resource.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal server error happened.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Delete a specific alerting pattern.",
        "summary": "Delete a specific alerting pattern",
        "operationId": "TeamsDeleteAlertPattern"
      },
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID you want to create the pattern for",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pattern ID of pattern to update",
            "x-ms-summary": "Pattern ID",
            "in": "path",
            "name": "patternId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Alerting pattern information to update",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.AlertingPatternDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated alerting pattern",
            "schema": {
              "$ref": "#/definitions/V2.AlertingPatternDetails"
            }
          },
          "400": {
            "description": "Required parameter missing.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Your don't have the permission to access this resource.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal server error happened.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Update an existing alerting pattern.",
        "summary": "Update an existing alerting pattern",
        "operationId": "TeamsUpdateAlertPattern"
      }
    },
    "/v2/teams/{teamId}/dutyReports/{fileName}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of team you want to download the duty report for.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filename of the csv to download.",
            "x-ms-summary": "File Name",
            "in": "path",
            "name": "fileName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Duties"
        ],
        "description": "Download duty report with a specific fileName.",
        "summary": "Download duty report with a specific fileName",
        "operationId": "TeamsGetDutyReport"
      }
    },
    "/v2/teams/{teamId}/eventSources": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the sources should be retrieved for.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/EventSourceEndpointInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Gets event sources of a specific team.",
        "summary": "Gets event sources of a specific team",
        "operationId": "TeamsGetEventSources"
      }
    },
    "/v2/teams/{teamId}/holidays": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID you want to get holidays from",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns holidays for team",
            "schema": {
              "$ref": "#/definitions/V2.TeamHolidayDetails"
            }
          },
          "400": {
            "description": "Some required Parameter is missing or feature is not licensed",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You don't have the permissions to access this teams ressouces.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Get holidays for team.",
        "summary": "Get holidays for team",
        "operationId": "TeamsGetHolidays"
      },
      "delete": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID you want to delete holidays from",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of holidays you want to delete",
            "x-ms-summary": "Holidays List",
            "in": "body",
            "name": "body",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.DateOnlyDetails"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Some required Parameter is missing or feature is not licensed",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You don't have the permissions to access this teams ressouces.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Delete holidays.",
        "summary": "Delete holidays",
        "operationId": "TeamsDeleteHolidays"
      }
    },
    "/v2/teams/{teamId}/holidays/repeating": {
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID of team you want to save holidays for",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of holidays you want to save",
            "x-ms-summary": "Holidays List",
            "in": "body",
            "name": "body",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.MonthAndDayDetails"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns saved holidays",
            "schema": {
              "$ref": "#/definitions/V2.TeamHolidayDetails"
            }
          },
          "400": {
            "description": "Some required Parameter is missing or feature is not licensed",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You don't have the permissions to access this teams ressouces.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Save repeating holidays for a team.",
        "summary": "Save repeating holidays for a team",
        "operationId": "TeamsSaveRepeatingHolidays"
      }
    },
    "/v2/teams/{teamId}/holidays/years/{year}": {
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID of team you want to save holidays for",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Year you want to save holidays for",
            "x-ms-summary": "Year",
            "format": "int32",
            "in": "path",
            "name": "year",
            "required": true,
            "type": "integer"
          },
          {
            "description": "List of holidays you want to save",
            "x-ms-summary": "Holidays List",
            "in": "body",
            "name": "body",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.MonthAndDayDetails"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns saved holidays",
            "schema": {
              "$ref": "#/definitions/V2.TeamHolidayDetails"
            }
          },
          "400": {
            "description": "Some required Parameter is missing or feature is not licensed",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You don't have the permissions to access this teams ressouces.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Save holidays for a team.",
        "summary": "Save holidays for a team",
        "operationId": "TeamsSaveHolidays"
      }
    },
    "/v2/teams/{teamId}/holidays/years/{year}/copyFrom/{sourceTeamId}": {
      "post": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID of team you want to copy holidays to",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Year you want to copy from",
            "x-ms-summary": "Year",
            "format": "int32",
            "in": "path",
            "name": "year",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Team ID of team you want to copy holidays from",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "sourceTeamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns saved holidays",
            "schema": {
              "$ref": "#/definitions/V2.TeamHolidayDetails"
            }
          },
          "400": {
            "description": "Some required Parameter is missing or feature is not licensed",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You don't have the permissions to access this teams ressouces.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Copy holidays from one team to another.",
        "summary": "Copy holidays from one team to another",
        "operationId": "TeamsCopyHolidays"
      }
    },
    "/v2/teams/{teamId}/image": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The id of the team you want to get the image from.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional parameter defining the wanted height of the picture thats retrieved.",
            "x-ms-summary": "Image Height",
            "format": "int32",
            "in": "query",
            "name": "height",
            "type": "integer"
          },
          {
            "description": "Optional parameter defining the wanted width of the picture thats retrieved.",
            "x-ms-summary": "Image Width",
            "format": "int32",
            "in": "query",
            "name": "width",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a team image and additional meta information.",
            "schema": {
              "$ref": "#/definitions/V2.TeamImageDetails"
            }
          },
          "400": {
            "description": "A passed parameter was either empty or invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "User is not allowed to get an image for the specified team.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Either the team or the team image was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Gets image of a specified team.",
        "summary": "Gets image of a specified team",
        "operationId": "TeamsGetImage"
      },
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID you want to delete the team image from.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted team image."
          },
          "400": {
            "description": "A passed parameter was either empty or invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "User is not allowed to delete an image for the specified team.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "The team was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Deletes current team image.",
        "summary": "Deletes current team image",
        "operationId": "TeamsDeleteImage"
      },
      "post": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID where to set the team image.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The image was successfully uploaded."
          },
          "400": {
            "description": "Either a passed parameter was either empty/null or the request's multipart does not contain a file",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "User is not allowed to upload an image for the specified team.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "The team was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Uploaded a profile image for a specified team.",
        "summary": "Uploaded a profile image for a specified team",
        "operationId": "TeamsUploadImage"
      }
    },
    "/v2/teams/{teamId}/memberships": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID of team you want to access.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Team memberships of a team.",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.TeamMembershipDetails"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Some required parameters are missing.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You are not allowed to access the team.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "The requested team was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Get team memberships by team.",
        "summary": "Get team memberships by team",
        "operationId": "TeamsGetMemberships"
      }
    },
    "/v2/teams/{teamId}/memberships/resendInviteMail": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID of team with invited user.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Information which user should be invited again.",
            "x-ms-summary": "User Invitation Information",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UserInvitationInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Sends invite email again if an invite exists.",
        "summary": "Sends invite email again if an invite exists",
        "operationId": "TeamsResendInvite"
      }
    },
    "/v2/teams/{teamId}/memberships/{userId}": {
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the user should be deleted from",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the user that should be deleted",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID of user which will remove the other user.",
            "x-ms-summary": "User ID",
            "in": "query",
            "name": "requesterUserId",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success message"
          },
          "204": {
            "description": "Request was canceled.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Required parameters or authentication info could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to request the access all required entities.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Removes a user or invitation from a team.",
        "summary": "Removes a user or invitation from a team",
        "operationId": "TeamsRemoveUser"
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of team the user should be invited to.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Id of user you want to add to a team.",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Additional information needed.",
            "x-ms-summary": "Add Team Membership Request",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.AddTeamMembershipRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The team membership is returned.",
            "schema": {
              "$ref": "#/definitions/V2.TeamMembershipDetails"
            }
          },
          "400": {
            "description": "Required parameters or authentication info could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to request the access all required entities.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Add user to a team.",
        "summary": "Add user to a team",
        "operationId": "TeamsAddUser"
      },
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team the user you want to update belongs to at the moment.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID of user you want to update.",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID of user which you want to change role with. This must be provided when using an\r\napi key. This user must have role administrator (for setting administrator role) or team administrator (for setting\r\nrights.",
            "x-ms-summary": "User ID",
            "in": "query",
            "name": "requesterUserId",
            "type": "string"
          },
          {
            "default": true,
            "description": "Sets new duty status for user if user is moved to a different team. User is on duty be default.",
            "x-ms-summary": "Set User On Duty",
            "in": "query",
            "name": "setUserOnDuty",
            "type": "boolean"
          },
          {
            "description": "Information about role id and target team id.",
            "x-ms-summary": "Information about role id and target team id",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UserMembership"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User was successfully updated.",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          },
          "204": {
            "description": "Request was canceled."
          },
          "400": {
            "description": "Required parameters or authentication info could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to request the access all required entities.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Updates the user's team membership. You can move the user to another team within the subscription\r\nand/or change the user's role.",
        "summary": "Update user's team membership",
        "operationId": "TeamsUpdateUserMembership"
      }
    },
    "/v2/teams/{teamId}/privacySettings": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID of team",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns team privacy settings",
            "schema": {
              "$ref": "#/definitions/V2.TeamPrivacySettingsDetails"
            }
          },
          "403": {
            "description": "You don't have access to this team.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Team was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal Server error happened.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Get Team privacy settings for a team.",
        "summary": "Get Team privacy settings for a team",
        "operationId": "TeamsGetPrivacySettings"
      },
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID of team",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Settings to update",
            "x-ms-summary": "Team Privacy Settings",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.TeamPrivacySettingsUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated team privacy settings",
            "schema": {
              "$ref": "#/definitions/V2.TeamPrivacySettingsDetails"
            }
          },
          "403": {
            "description": "You don't have access to this team.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Team was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal Server error happened.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Update privacy settings for a team.",
        "summary": "Update privacy settings for a team",
        "operationId": "TeamsUpdatePrivacySettings"
      }
    },
    "/v2/teams/{teamId}/profile": {
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID of team which should be updated.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TeamProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TeamInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Updates team profile of a team.",
        "summary": "Updates team profile of a team",
        "operationId": "TeamsUpdateProfile"
      }
    },
    "/v2/teams/{teamId}/schedules": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the team the duty is to be assigned to.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "information about the duty schedule to be created",
            "x-ms-summary": "Duty Schedule Information",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ScheduleInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScheduleInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Duties"
        ],
        "description": "Create/Update given duty schedule.",
        "summary": "Creat or Update given duty schedule",
        "operationId": "DutiesCreateOrUpdate"
      }
    },
    "/v2/teams/{teamId}/schedules/deleteRange": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID you want to delete",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Information with date range to delete from to",
            "x-ms-summary": "Date Range Information",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DeleteRangeInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/ScheduleInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Duties"
        ],
        "description": "Delete duty schedules in range.",
        "summary": "Delete duty schedules in range",
        "operationId": "DutiesDeleteInRange"
      }
    },
    "/v2/teams/{teamId}/schedules/multiple": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID to set",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Override or cut existing schedules if set to true.",
            "x-ms-summary": "Override",
            "in": "query",
            "name": "overrideExisting",
            "type": "boolean"
          },
          {
            "description": "List of schedules to save",
            "x-ms-summary": "Schedules List",
            "in": "body",
            "name": "body",
            "schema": {
              "items": {
                "$ref": "#/definitions/ScheduleInfo"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/ScheduleInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Duties"
        ],
        "description": "Save multiple schedules. It is possible to override existing schedules if you wish.",
        "summary": "Save multiple schedules",
        "operationId": "DutiesSaveMultiple"
      }
    },
    "/v2/teams/{teamId}/schedules/{dutyId}": {
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the duty belongs to.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the duty to be deleted.",
            "x-ms-summary": "Duty Schedule ID",
            "in": "path",
            "name": "dutyId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Duties"
        ],
        "description": "Delete a specific duty.",
        "summary": "Delete a specific duty",
        "operationId": "DutiesDelete"
      }
    },
    "/v2/teams/{teamId}/schedules/{scheduleId}/": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the team the duty belongs to",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Id of the requested duty schedule.",
            "x-ms-summary": "Duty Schedule ID",
            "in": "path",
            "name": "scheduleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScheduleInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Duties"
        ],
        "description": "Returns information of the duty schedule with the specified Id.",
        "summary": "Returns information of the duty schedule with the specified Id",
        "operationId": "DutiesGetInfo"
      }
    },
    "/v2/teams/{teamId}/setupProgress": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the team the progress should be retrieved for.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "teamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TeamSetupProgress"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Teams"
        ],
        "description": "Gets setup progress of a specific team.",
        "summary": "Gets setup progress of a specific team",
        "operationId": "TeamsGetSetupProgress"
      }
    },
    "/v2/users": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get all users you have access to.",
            "x-ms-summary": "User Details",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.UserDetails"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Required authentication info could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to request the users with their information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Returns a list of user objects with details such as their email address and duty information. Only users you have\r\naccess to will be returned.",
        "summary": "Get all Users",
        "operationId": "UsersGettAll"
      }
    },
    "/v2/users/{userId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Identifier of the user to get. Use 'Me' to get information about the currently logged in user. This is not possible\r\nwith an api key.\r\nCan also be an email address of a user in the team or the unique id of an according user object.\u201d",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User could be successfully identified.",
            "schema": {
              "$ref": "#/definitions/V2.UserDetails"
            }
          },
          "400": {
            "description": "Required authentication info could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to request that user's information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "User was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Returns a user object with details such as his email address and duty information.",
        "summary": "Get User by Id",
        "operationId": "UsersGet"
      },
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the user to be deleted.",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Deletes user account.",
        "summary": "Deletes user account",
        "operationId": "UsersDelete"
      }
    },
    "/v2/users/{userId}/changePassword": {
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "User ID of user whose password should be changed.",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdatePasswordInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Updates the password of a user.",
        "summary": "Updates the password of a user",
        "operationId": "UsersUpdatePassword"
      }
    },
    "/v2/users/{userId}/checkPermissions": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the user to check permissions for.",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of permissions to check",
            "x-ms-summary": "Permissions List",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.RequestedPermissions"
            }
          }
        ],
        "responses": {
          "207": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MultiTeamResult-2-V2.TeamPermissions-V2.PermissionError-"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Checks if a user has the provided permission.",
        "summary": "Checks if a user has the provided permission",
        "operationId": "UsersCheckPermissions"
      }
    },
    "/v2/users/{userId}/contactAddresses/{addressId}": {
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "User ID of user to delete address from",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Id of contact address",
            "x-ms-summary": "Address ID",
            "in": "path",
            "name": "addressId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion was successful."
          },
          "400": {
            "description": "Some Required parameters are missing.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to perform the these action on behalf of the user.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "User was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Unknown error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Delete a contact address from a user.",
        "summary": "Delete a contact address from a user",
        "operationId": "UsersDeleteContactAddress"
      }
    },
    "/v2/users/{userId}/dutyStatus": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Identifier of the user to get. Use 'Me' to get information about the currently logged in user. This is not possible\r\nwith an api key.\r\nCan also be an email address of a user in the team or the unique id of an according user object.\u201d",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Team ID.\u201d",
            "x-ms-summary": "Team ID",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "teamId",
            "type": "array"
          }
        ],
        "responses": {
          "207": {
            "description": "Duties (partially) successfully loaded.",
            "schema": {
              "$ref": "#/definitions/MultiTeamResult-2-UserDutyInfo-V2.DutyError-"
            }
          },
          "400": {
            "description": "Required authentication info could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to request that duty information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Required entities could not be found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Returns a object with duty information.",
        "summary": "Get duty status by user Id",
        "operationId": "UsersGetDutyStatus"
      }
    },
    "/v2/users/{userId}/image": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "User ID.\u201d",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Image height.\u201d",
            "x-ms-summary": "Image Height",
            "format": "int32",
            "in": "query",
            "name": "height",
            "type": "integer"
          },
          {
            "description": "Image width.\u201d",
            "x-ms-summary": "Image Width",
            "format": "int32",
            "in": "query",
            "name": "width",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserImage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Get personal user image.",
        "summary": "Get personal user image",
        "operationId": "UsersGetImage"
      },
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "User id or me",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Image was deleted successfully."
          },
          "400": {
            "description": "User is not activated or some information was not provided.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You can't access this users resources.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An internal server occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Delete personal user image.",
        "summary": "Delete personal user image",
        "operationId": "UsersDeleteImage"
      },
      "post": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the user.",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The image was successfully uploaded."
          },
          "400": {
            "description": "Either a passed parameter was either empty/null or the request's multipart does not contain a\r\nfile.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "User is not allowed to upload an image for the specified user.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Either the user was not found or they aren't activated yet.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Uploaded a profile image for a specified user.",
        "summary": "Uploaded a profile image for a specified user",
        "operationId": "UsersUploadImage"
      }
    },
    "/v2/users/{userId}/locale": {
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "User ID, email or \"me\" for user you want to update",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "locale info of user. Time zone must be in IANA format.",
            "x-ms-summary": "Locale Information",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.UserLocaleDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user",
            "schema": {
              "$ref": "#/definitions/V2.UserLocaleResponseDetails"
            }
          },
          "204": {
            "description": "The operation was canceled."
          },
          "400": {
            "description": "User ID was null or empty.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to update that user's information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An error occurred while requesting the resources.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Update locale info (e.g. language, time zone) for user.",
        "summary": "Update locale info (e.g. language, time zone) for user",
        "operationId": "UsersUpdateLocaleInfo"
      }
    },
    "/v2/users/{userId}/location": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of user.",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LocationInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LocationInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Set location of an user.",
        "summary": "Set location of an user",
        "operationId": "UsersSetLocation"
      }
    },
    "/v2/users/{userId}/notificationProfiles": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the user you want to get the notification profiles from.",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification profiles from user are returned",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.NotificationProfileDetails"
              },
              "type": "array"
            }
          },
          "204": {
            "description": "The operation was canceled."
          },
          "400": {
            "description": "User ID was null or empty.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to request that user's information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An error occurred while requesting the resources.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Get notification profiles for user.",
        "summary": "Get notification profiles for user",
        "operationId": "UsersGetNotificationProfile"
      },
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the user you want to get the notification profiles from.",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Profiles you want to save",
            "x-ms-summary": "Profiles Details",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.SetNotificationProfilesDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification profiles from user are returned",
            "schema": {
              "items": {
                "$ref": "#/definitions/V2.NotificationProfileDetails"
              },
              "type": "array"
            }
          },
          "204": {
            "description": "The operation was canceled."
          },
          "400": {
            "description": "User ID was null or empty.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to request that user's information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "An error occurred while requesting the resources.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Set notification profiles for user.",
        "summary": "Set notification profiles for user",
        "operationId": "UsersSetNotificationProfile"
      }
    },
    "/v2/users/{userId}/phoneNumbers": {
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of user",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion was successful."
          },
          "400": {
            "description": "No user ID was given.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to perform the these action on behalf of the user.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "User was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Unknown error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Delete the phone number of a user.",
        "summary": "Delete the phone number of a user",
        "operationId": "UsersDeletePhoneNumber"
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "User ID of the user you want to add a phone number to",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Object with information about the new phone number",
            "x-ms-summary": "New Phone Number",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.NewPhoneNumber"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Setting phone number was successful.",
            "schema": {
              "$ref": "#/definitions/V2.UserPhoneNumberDetails"
            }
          },
          "400": {
            "description": "Some Required parameters are missing.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to perform the these action on behalf of the user.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "User was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "429": {
            "description": "You made to many requests to the "
          },
          "500": {
            "description": "Unknown error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Set the phone number of a user. If another phone number is saved, it will be overwritten.",
        "summary": "Set the phone number of a user",
        "operationId": "UsersSetPhoneNumber"
      }
    },
    "/v2/users/{userId}/phoneNumbers/validate": {
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "User Id of user you want to validate previous created phone number",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Information needed to validate phone number",
            "x-ms-summary": "Phone Number Validation",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/V2.PhoneNumberValidation"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful."
          },
          "400": {
            "description": "Validation code was invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to perform the these action on behalf of the user.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "User or phone number was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Unknown error occured.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Validates a previous created phone number for a user.",
        "summary": "Validates a previous created phone number for a user",
        "operationId": "UsersValidatePhoneNumber"
      }
    },
    "/v2/users/{userId}/profile": {
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of user to update.",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Updates user profile of an user.",
        "summary": "Updates user profile of an user",
        "operationId": "UsersUpdateProfile"
      }
    },
    "/v2/users/{userId}/sendEventSourcesInfo": {
      "post": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The user id.",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The team Id from which the user should get the endpoint information.",
            "x-ms-summary": "Team ID",
            "in": "query",
            "name": "teamId",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The event sources info mail was sent to the user."
          },
          "400": {
            "description": "A passed parameter was either empty or null.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "The authorization failed."
          },
          "404": {
            "description": "The user was either not found, was not activated or they don't belong to a valid subscription.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal general error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Sends a mail to a specified user that contains information of all event sources of the user's team.",
        "summary": "Sends a mail to a specified user",
        "operationId": "UsersSendEventSourceInfoEmail"
      }
    },
    "/v2/users/{userId}/setupProgress": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "ID of the user the progress should be retrieved for.",
            "x-ms-summary": "User ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserSetupProgress"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Gets setup progress of a specific user.",
        "summary": "Gets setup progress of a specific user",
        "operationId": "UsersGetSetupProgress"
      }
    },
    "/v2/users/{userId}/teams": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID.",
            "x-ms-summary": "Team ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User could be successfully identified.",
            "schema": {
              "items": {
                "$ref": "#/definitions/TeamInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Required authentication info could not be found in the request/claims.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "403": {
            "description": "You're not allowed to request the information."
          },
          "404": {
            "description": "Required entities could not be found in the database.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "Returns a list of team objects with details such as their name. Only teams the user\r\nis member of will be returned.",
        "summary": "Get all teams the user is member of",
        "operationId": "UsersGetAllTeams"
      }
    },
    "/v2/webhooks": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Team ID.",
            "x-ms-summary": "Team ID",
            "in": "query",
            "name": "teamId",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful and response body contains information about all outbound webhooks in the subscription.",
            "schema": {
              "items": {
                "$ref": "#/definitions/WebhookInfo"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "The subscription does not have any outbound webhooks.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal has occured. The response body may contain more information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Returns a collection of defined outbound webhooks in the system.",
        "summary": "Get Webhooks",
        "operationId": "WebhooksGetAll"
      },
      "post": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Json object that contains the external URL of the webhook.",
            "x-ms-summary": "Webhook Base Information",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/WebhookBaseInfo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Action was successful and response contains the id of the newly created webhook.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Either the webhook object or a necessary property was invalid or empty.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal has occured. The response body may contain more information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Creates a new outbound webhook that will be notified when certain events occur.",
        "summary": "Create Webhook",
        "operationId": "WebhooksCreate"
      }
    },
    "/v2/webhooks/{webhookId}": {
      "get": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the outbound webhook to be retrieved.",
            "x-ms-summary": "Outbound Webhook ID",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful and response body contains information about the requested webhook.",
            "schema": {
              "$ref": "#/definitions/WebhookInfo"
            }
          },
          "400": {
            "description": "The passed webhook id was either empty or null.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "The webhook was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal has occured. The response body may contain more information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Returns information of the webhook specified by the passed id.",
        "summary": "Get Webhook by Id",
        "operationId": "WebhooksGet"
      },
      "delete": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the outbound webhook that will be deleted.",
            "x-ms-summary": "Outbound Webhook ID",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook was successfully deleted."
          },
          "400": {
            "description": "The passed webhook id was invalid or empty.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Webhook with specified id was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal has occured. The response body may contain more information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Deletes the specified webhook so that it will no longer be notified.",
        "summary": "Delete Webhook by Id",
        "operationId": "WebhooksDelete"
      },
      "put": {
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Id of the outbound webhook to be updated.",
            "x-ms-summary": "Outbound Webhook ID",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Json object containing the updated URL of the webhook.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/WebhookBaseInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update was successful and response body contains the updated webhook details.",
            "schema": {
              "$ref": "#/definitions/WebhookInfo"
            }
          },
          "400": {
            "description": "A passed parameter was either empty or null.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Webhook with specified id was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal has occured. The response body may contain more information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Updates the specified webhook.",
        "summary": "Update Webhook by Id",
        "operationId": "WebhooksUpdate"
      }
    },
    "/v2/webhooks/{webhookId}/disable": {
      "post": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Webhook ID for webhook which should be disabled.",
            "x-ms-summary": "Webhook ID",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Disable was successful and response body contains the webhook details.",
            "schema": {
              "$ref": "#/definitions/WebhookInfo"
            }
          },
          "400": {
            "description": "A passed parameter was either empty or null.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Webhook with specified id was not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Internal has occured. The response body may contain more information.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Ability to enable a webHook.",
        "summary": "Ability to enable a webHook",
        "operationId": "WebhooksDisable"
      }
    },
    "/v2/webhooks/{webhookId}/enable": {
      "post": {
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "Webhook ID for webhook which should be enabled.",
            "x-ms-summary": "Webhook ID",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WebhookInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContent"
            }
          }
        },
        "tags": [
          "Webhooks"
        ],
        "description": "Ability to disable a webHook.",
        "summary": "Ability to disable a webHook",
        "operationId": "WebhooksEnable"
      }
    }
  },
  "definitions": {
    "AlertAuditReportFileInfo": {
      "additionalProperties": false,
      "properties": {
        "fileName": {
          "type": "string",
          "x-nullable": true
        },
        "fileSizeInBytes": {
          "format": "int64",
          "type": "integer"
        },
        "lastRecord": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "lastUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "month": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AlertEscalationModes": {
      "description": "<p/><ul><li>0 = Manager</li><li>1 = Team</li></ul>",
      "enum": [
        0,
        1
      ],
      "format": "int32",
      "type": "integer"
    },
    "AlertFilterActions": {
      "description": "<p/><ul><li>0 = Suppress</li><li>1 = Hide</li><li>2 = Mute</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "AlertFilterModes": {
      "description": "<p/><ul><li>0 = Off</li><li>1 = WhiteListAllCategories</li></ul>",
      "enum": [
        0,
        1
      ],
      "format": "int32",
      "type": "integer"
    },
    "AlertNotificationInfo": {
      "additionalProperties": false,
      "properties": {
        "address": {
          "type": "string",
          "x-nullable": true
        },
        "deviceName": {
          "type": "string",
          "x-nullable": true
        },
        "lastUpdate": {
          "format": "date-time",
          "type": "string"
        },
        "messageStatus": {
          "$ref": "#/definitions/AlertNotificationInfoMessageStatus"
        },
        "messageStatusErrorCode": {
          "format": "int32",
          "type": "integer"
        },
        "notificationChannelType": {
          "$ref": "#/definitions/AlertNotificationInfoChannelType"
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        },
        "userStatus": {
          "$ref": "#/definitions/AlertNotificationInfoUserStatus"
        }
      },
      "type": "object"
    },
    "AlertNotificationInfoChannelType": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Push</li><li>2 = Email</li><li>4 = Bot</li><li>8 = Voice</li><li>16 = SMS</li></ul>",
      "enum": [
        0,
        1,
        2,
        4,
        8,
        16
      ],
      "format": "int32",
      "type": "integer"
    },
    "AlertNotificationInfoMessageStatus": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Rejected</li><li>2 = Failed</li><li>3 = Queued</li><li>4 = Transmitted</li><li>5 = Buffered</li><li>6 = Delivered</li><li>7 = Canceled</li><li>8 = Protected</li><li>9 = AbuseProtected</li><li>10 = Delayed</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "format": "int32",
      "type": "integer"
    },
    "AlertNotificationInfoUserStatus": {
      "description": "<p/><ul><li>0 = None</li><li>1 = MessageCreated</li><li>2 = NotOnDuty</li><li>3 = CategoryHidden</li><li>4 = CategoryMuted</li><li>5 = NoNotificationProfiles</li><li>6 = NoMessagesByNotificationProfiles</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "format": "int32",
      "type": "integer"
    },
    "AlertResponseModes": {
      "description": "<p/><ul><li>2 = SingleAcknowledge</li><li>4 = MultiAcknowledge</li></ul>",
      "enum": [
        2,
        4
      ],
      "format": "int32",
      "type": "integer"
    },
    "AlertSettings": {
      "additionalProperties": false,
      "properties": {
        "escEnabled": {
          "type": "boolean"
        },
        "escMode": {
          "$ref": "#/definitions/AlertEscalationModes"
        },
        "escRefId": {
          "type": "string",
          "x-nullable": true
        },
        "filterAction": {
          "$ref": "#/definitions/AlertFilterActions"
        },
        "filterMode": {
          "$ref": "#/definitions/AlertFilterModes"
        },
        "notificationProfileOverrides": {
          "items": {
            "$ref": "#/definitions/AlertSettingsNotificationProfile"
          },
          "type": "array",
          "x-nullable": true
        },
        "optOut": {
          "$ref": "#/definitions/TeamCategoryOptOutModes"
        },
        "overrideNotificationProfiles": {
          "type": "boolean"
        },
        "persNotInterval": {
          "format": "int32",
          "type": "integer"
        },
        "persNotMode": {
          "$ref": "#/definitions/PersistentNotificationModes"
        },
        "responseMode": {
          "$ref": "#/definitions/AlertResponseModes"
        },
        "responseTime": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AlertSettingsChannelType": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Push</li><li>2 = Voice</li><li>3 = SMS</li></ul>",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "format": "int32",
      "type": "integer"
    },
    "AlertSettingsNotificationProfile": {
      "additionalProperties": false,
      "properties": {
        "channel": {
          "$ref": "#/definitions/AlertSettingsChannelType"
        },
        "delay": {
          "format": "int32",
          "type": "integer"
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CategoryAugmentation": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/CategoryAugmentationType"
        },
        "value": {
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "CategoryAugmentationType": {
      "description": "<p/><ul><li>0 = Parameter</li><li>1 = Subject</li><li>2 = Text</li><li>3 = Location</li></ul>",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "format": "int32",
      "type": "integer"
    },
    "CategoryEnrichment": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/CategoryEnrichmentType"
        },
        "value": {
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "CategoryEnrichmentType": {
      "description": "<p/><ul><li>0 = Parameter</li><li>1 = Hyperlink</li></ul>",
      "enum": [
        0,
        1
      ],
      "format": "int32",
      "type": "integer"
    },
    "CategoryInfo": {
      "additionalProperties": false,
      "properties": {
        "augmentations": {
          "items": {
            "$ref": "#/definitions/CategoryAugmentation"
          },
          "type": "array",
          "x-nullable": true
        },
        "color": {
          "type": "string"
        },
        "enrichments": {
          "items": {
            "$ref": "#/definitions/CategoryEnrichment"
          },
          "type": "array",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "imageName": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        },
        "keywordMatching": {
          "$ref": "#/definitions/KeywordMatchingType"
        },
        "keywords": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "keywordsExcluded": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/CategoryInfoOptions"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "color",
        "imageName",
        "keywordMatching",
        "keywords",
        "name"
      ],
      "type": "object"
    },
    "CategoryInfoOptions": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Hidden</li><li>2 = DenyDelete</li><li>4 = HideOptOut</li><li>8 = HideKeywords</li></ul>",
      "enum": [
        0,
        1,
        2,
        4,
        8
      ],
      "format": "int32",
      "type": "integer"
    },
    "CategoryMetrics": {
      "additionalProperties": false,
      "properties": {
        "categoryId": {
          "type": "string",
          "x-nullable": true
        },
        "last24h": {
          "format": "int64",
          "type": "integer"
        },
        "lastAlert": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "subscriberCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CategorySubscriptionInfo": {
      "additionalProperties": false,
      "properties": {
        "status": {
          "$ref": "#/definitions/CategorySubscriptionStatus"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": [
        "status",
        "userId"
      ],
      "type": "object"
    },
    "CategorySubscriptionStatus": {
      "description": "<p/><ul><li>0 = Subscribed</li><li>1 = Muted</li><li>2 = Hidden</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "ChangeAlertStatusFilterInfo": {
      "additionalProperties": false,
      "properties": {
        "categoryIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "maxDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "minDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "scope": {
          "$ref": "#/definitions/StatusChangeScope"
        },
        "teamIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "ChangeAlertStatusMultipleInfo": {
      "additionalProperties": false,
      "properties": {
        "alertIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "descr": {
          "type": "string",
          "x-nullable": true
        },
        "uid": {
          "type": "string"
        }
      },
      "required": [
        "alertIds",
        "uid"
      ],
      "type": "object"
    },
    "ChannelPriceInfo": {
      "additionalProperties": false,
      "properties": {
        "sms": {
          "format": "int32",
          "type": "integer"
        },
        "voicePerMinute": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ChannelTypes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Push</li><li>2 = Email</li><li>4 = Bot</li><li>8 = Voice</li><li>16 = SMS</li></ul>",
      "enum": [
        0,
        1,
        2,
        4,
        8,
        16
      ],
      "format": "int32",
      "type": "integer"
    },
    "ContactAddressInfo": {
      "additionalProperties": false,
      "properties": {
        "address": {
          "type": "string",
          "x-nullable": true
        },
        "channel": {
          "$ref": "#/definitions/ChannelTypes"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "device": {
          "$ref": "#/definitions/Device"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "lastUpdated": {
          "format": "date-time",
          "type": "string"
        },
        "options": {
          "format": "int32",
          "type": "integer"
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "DeleteRangeInfo": {
      "additionalProperties": false,
      "properties": {
        "from": {
          "format": "date-time",
          "type": "string"
        },
        "to": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Device": {
      "additionalProperties": false,
      "properties": {
        "appVersion": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "osVersion": {
          "type": "string",
          "x-nullable": true
        },
        "ringtone": {
          "type": "string",
          "x-nullable": true
        },
        "ringtoneDisabled": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/DeviceType"
        }
      },
      "type": "object"
    },
    "DeviceType": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Android</li><li>2 = iOS</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "DutyAuditReportFileInfo": {
      "additionalProperties": false,
      "properties": {
        "fileName": {
          "type": "string",
          "x-nullable": true
        },
        "fileSizeInBytes": {
          "format": "int64",
          "type": "integer"
        },
        "month": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DutySummaryInfo": {
      "additionalProperties": false,
      "properties": {
        "dutyEnd": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "dutyId": {
          "type": "string",
          "x-nullable": true
        },
        "dutyStart": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "ErrorResponseContent": {
      "additionalProperties": false,
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "type": "string",
          "x-nullable": true
        },
        "errors": {
          "items": {
            "$ref": "#/definitions/ErrorResponseContentBase"
          },
          "type": "array",
          "x-nullable": true
        },
        "message": {
          "type": "string",
          "x-nullable": true
        },
        "requestId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "code"
      ],
      "type": "object"
    },
    "ErrorResponseContentBase": {
      "additionalProperties": false,
      "properties": {
        "details": {
          "type": "string",
          "x-nullable": true
        },
        "message": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "EventFilter": {
      "additionalProperties": false,
      "properties": {
        "continuationToken": {
          "$ref": "#/definitions/PagedResultsPublicContinuationToken"
        },
        "eventSourceId": {
          "type": "string",
          "x-nullable": true
        },
        "eventStatusCode": {
          "$ref": "#/definitions/EventStatusCodes"
        },
        "maxCreationDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "minCreationDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "modifiedSince": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "teamid": {
          "type": "string",
          "x-nullable": true
        },
        "textToSearch": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "EventParameterInfo": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "$ref": "#/definitions/EventParameterTypes"
        },
        "value": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "EventParameterTypes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Object</li><li>2 = Array</li><li>3 = Constructor</li><li>4 = Property</li><li>5 = Comment</li><li>6 = Integer</li><li>7 = Float</li><li>8 = String</li><li>9 = Boolean</li><li>10 = Null</li><li>11 = Undefined</li><li>12 = Date</li><li>13 = Raw</li><li>14 = Bytes</li><li>15 = Guid</li><li>16 = Uri</li><li>17 = TimeSpan</li><li>100 = Html</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        100
      ],
      "format": "int32",
      "type": "integer"
    },
    "EventSeverities": {
      "description": "<p/><ul><li>0 = Low</li><li>1 = Major</li><li>2 = Critical</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "EventSourceEndpointInfo": {
      "additionalProperties": false,
      "properties": {
        "address": {
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "disabled": {
          "type": "boolean"
        },
        "groupId": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "lastEvent": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "subType": {
          "type": "string",
          "x-nullable": true
        },
        "subscriptionId": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/EventSourceTypes"
        }
      },
      "type": "object"
    },
    "EventSourceTypes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Email</li><li>2 = WebHook</li><li>3 = Script</li><li>4 = System</li><li>5 = Manual</li><li>6 = Voice</li><li>7 = Api</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "format": "int32",
      "type": "integer"
    },
    "EventStatusCodes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Processing</li><li>2 = Signled</li><li>3 = Filtered</li><li>4 = Resolved</li><li>5 = Discarded</li><li>6 = Acknowledged</li><li>7 = Suppressed</li><li>8 = NoRuleApplied</li><li>9 = MultipleTargetStatus</li><li>1000 = Error</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        1000
      ],
      "format": "int32",
      "type": "integer"
    },
    "InventoryScriptInfo": {
      "additionalProperties": false,
      "properties": {
        "config": {
          "x-nullable": true
        },
        "data": {
          "$ref": "#/definitions/ScriptDescriptionData"
        },
        "eventPattern": {
          "x-nullable": true
        },
        "localizationDetails": {
          "items": {
            "$ref": "#/definitions/ScriptLocalizationDetail"
          },
          "type": "array",
          "x-nullable": true
        },
        "scriptId": {
          "type": "string",
          "x-nullable": true
        },
        "scriptName": {
          "type": "string",
          "x-nullable": true
        },
        "visibility": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "KeywordMatchingType": {
      "description": "<p/><ul><li>0 = Any</li><li>1 = All</li></ul>",
      "enum": [
        0,
        1
      ],
      "format": "int32",
      "type": "integer"
    },
    "LocationInfo": {
      "additionalProperties": false,
      "properties": {
        "latitude": {
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "type": "number"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "MultiTeamResult-2-EventSourceEndpointInfo-V2.EventSourceEndpointError-": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/EventSourceEndpointInfo"
          },
          "type": "array",
          "x-nullable": true
        },
        "errors": {
          "items": {
            "$ref": "#/definitions/V2.EventSourceEndpointError"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "MultiTeamResult-2-TeamDutySummaryInfo-V2.TeamDutySummaryError-": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/TeamDutySummaryInfo"
          },
          "type": "array",
          "x-nullable": true
        },
        "errors": {
          "items": {
            "$ref": "#/definitions/V2.TeamDutySummaryError"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "MultiTeamResult-2-UserDutyInfo-V2.DutyError-": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/UserDutyInfo"
          },
          "type": "array",
          "x-nullable": true
        },
        "errors": {
          "items": {
            "$ref": "#/definitions/V2.DutyError"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "MultiTeamResult-2-V2.AlertCountsDetails-V2.AlertReportError-": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/V2.AlertCountsDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "errors": {
          "items": {
            "$ref": "#/definitions/V2.AlertReportError"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "MultiTeamResult-2-V2.AlertSettingsDetails-V2.AlertSettingsError-": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/V2.AlertSettingsDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "errors": {
          "items": {
            "$ref": "#/definitions/V2.AlertSettingsError"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "MultiTeamResult-2-V2.CategoryDetails-V2.CategoryError-": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/V2.CategoryDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "errors": {
          "items": {
            "$ref": "#/definitions/V2.CategoryError"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "MultiTeamResult-2-V2.TeamDutySettingsDetails-V2.TeamDutySettingsError-": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/V2.TeamDutySettingsDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "errors": {
          "items": {
            "$ref": "#/definitions/V2.TeamDutySettingsError"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "MultiTeamResult-2-V2.TeamPermissions-V2.PermissionError-": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/V2.TeamPermissions"
          },
          "type": "array",
          "x-nullable": true
        },
        "errors": {
          "items": {
            "$ref": "#/definitions/V2.PermissionError"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "MultiTeamResult-2-V2.UserDetails-V2.TeamUserError-": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/V2.UserDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "errors": {
          "items": {
            "$ref": "#/definitions/V2.TeamUserError"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "MultiTeamResult-2-V2.UserDutyDetails-V2.DutyChangeError-": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/V2.UserDutyDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "errors": {
          "items": {
            "$ref": "#/definitions/V2.DutyChangeError"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "OverviewEvent": {
      "additionalProperties": false,
      "properties": {
        "acknowledgedAlerts": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "alertId": {
          "type": "string",
          "x-nullable": true
        },
        "categoryId": {
          "type": "string",
          "x-nullable": true
        },
        "closedAlerts": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "creationTime": {
          "format": "date-time",
          "type": "string"
        },
        "eventSourceGroupId": {
          "type": "string",
          "x-nullable": true
        },
        "eventSourceId": {
          "type": "string",
          "x-nullable": true
        },
        "eventSourceTeamId": {
          "type": "string",
          "x-nullable": true
        },
        "eventSourceType": {
          "$ref": "#/definitions/EventSourceTypes"
        },
        "eventStatus": {
          "$ref": "#/definitions/EventStatusCodes"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "lastModified": {
          "format": "date-time",
          "type": "string"
        },
        "severity": {
          "$ref": "#/definitions/EventSeverities"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "text": {
          "type": "string",
          "x-nullable": true
        },
        "title": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "PagedResultsPublicContinuationToken": {
      "additionalProperties": false,
      "properties": {
        "nextPartitionKey": {
          "type": "string",
          "x-nullable": true
        },
        "nextRowKey": {
          "type": "string",
          "x-nullable": true
        },
        "nextTableName": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "PagedResultsPublic-1-OverviewEvent-": {
      "additionalProperties": false,
      "properties": {
        "continuationToken": {
          "$ref": "#/definitions/PagedResultsPublicContinuationToken"
        },
        "hasMore": {
          "readOnly": true,
          "type": "boolean"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/OverviewEvent"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "PagedResultsPublic-1-V2.AlertInfo-": {
      "additionalProperties": false,
      "properties": {
        "continuationToken": {
          "$ref": "#/definitions/PagedResultsPublicContinuationToken"
        },
        "hasMore": {
          "readOnly": true,
          "type": "boolean"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/V2.AlertInfo"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "PagedResultsPublic-1-V2.RemoteJob-": {
      "additionalProperties": false,
      "properties": {
        "continuationToken": {
          "$ref": "#/definitions/PagedResultsPublicContinuationToken"
        },
        "hasMore": {
          "readOnly": true,
          "type": "boolean"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/V2.RemoteJob"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "PersistentNotificationModes": {
      "description": "<p/><ul><li>0 = Off</li><li>1 = Summary</li></ul>",
      "enum": [
        0,
        1
      ],
      "format": "int32",
      "type": "integer"
    },
    "PhoneAddressValidationStatus": {
      "description": "<p/><ul><li>0 = NotValidated</li><li>1 = Validated</li><li>2 = CountryNotSupported</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "PhoneContactAddressInfo": {
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/ContactAddressInfo"
        }
      ],
      "properties": {
        "countryCode": {
          "type": "string",
          "x-nullable": true
        },
        "validationStatus": {
          "$ref": "#/definitions/PhoneAddressValidationStatus"
        }
      },
      "type": "object"
    },
    "PrepaidBalanceInfo": {
      "additionalProperties": false,
      "properties": {
        "balance": {
          "format": "int32",
          "type": "integer"
        },
        "latestTopUp": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "pendingTransactions": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PrepaidSettingsInfo": {
      "additionalProperties": false,
      "properties": {
        "topUpAmount": {
          "format": "int32",
          "type": "integer"
        },
        "topUpEnabled": {
          "type": "boolean"
        },
        "topUpLimit": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PrepaidTransactionInfo": {
      "additionalProperties": false,
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer"
        },
        "autoTopUpId": {
          "type": "string",
          "x-nullable": true
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "createdBy": {
          "type": "string",
          "x-nullable": true
        },
        "currency": {
          "type": "string",
          "x-nullable": true
        },
        "modified": {
          "format": "date-time",
          "type": "string"
        },
        "packageCode": {
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "x-nullable": true
        },
        "statusCode": {
          "format": "int32",
          "type": "integer"
        },
        "subscriptionId": {
          "type": "string",
          "x-nullable": true
        },
        "transactionId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "ScheduleInfo": {
      "additionalProperties": false,
      "properties": {
        "end": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "options": {
          "format": "int32",
          "type": "integer"
        },
        "start": {
          "format": "date-time",
          "type": "string"
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "ScriptDescriptionData": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "scriptType": {
          "type": "string",
          "x-nullable": true
        },
        "shortDescription": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "ScriptInstanceCreateInfo": {
      "additionalProperties": false,
      "properties": {
        "config": {
          "x-nullable": true
        },
        "customScriptDescription": {
          "type": "string",
          "x-nullable": true
        },
        "customScriptName": {
          "type": "string",
          "x-nullable": true
        },
        "enabled": {
          "type": "boolean"
        },
        "instanceId": {
          "type": "string",
          "x-nullable": true
        },
        "scriptId": {
          "type": "string",
          "x-nullable": true
        },
        "scriptName": {
          "type": "string",
          "x-nullable": true
        },
        "sharedTeams": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "ScriptInstanceCustomUserData": {
      "additionalProperties": false,
      "properties": {
        "customScriptDescription": {
          "type": "string",
          "x-nullable": true
        },
        "customScriptName": {
          "type": "string",
          "x-nullable": true
        },
        "instanceId": {
          "type": "string",
          "x-nullable": true
        },
        "scriptName": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "ScriptInstanceDetails": {
      "additionalProperties": false,
      "properties": {
        "config": {
          "x-nullable": true
        },
        "customScriptDescription": {
          "type": "string",
          "x-nullable": true
        },
        "customScriptName": {
          "type": "string",
          "x-nullable": true
        },
        "enabled": {
          "type": "boolean"
        },
        "eventPattern": {
          "x-nullable": true
        },
        "eventSourceId": {
          "type": "string",
          "x-nullable": true
        },
        "instanceId": {
          "type": "string",
          "x-nullable": true
        },
        "lastModified": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "runtimeInformation": {
          "$ref": "#/definitions/ScriptInstanceInfoRuntimeInformationModel"
        },
        "scriptId": {
          "type": "string",
          "x-nullable": true
        },
        "scriptName": {
          "type": "string",
          "x-nullable": true
        },
        "subscriptionId": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "webhookUrl": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "ScriptInstanceInfo": {
      "additionalProperties": false,
      "properties": {
        "customScriptDescription": {
          "type": "string",
          "x-nullable": true
        },
        "customScriptName": {
          "type": "string",
          "x-nullable": true
        },
        "enabled": {
          "type": "boolean"
        },
        "eventPattern": {
          "x-nullable": true
        },
        "eventSourceId": {
          "type": "string",
          "x-nullable": true
        },
        "instanceId": {
          "type": "string",
          "x-nullable": true
        },
        "lastModified": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "runtimeInformation": {
          "$ref": "#/definitions/ScriptInstanceInfoRuntimeInformationModel"
        },
        "scriptId": {
          "type": "string",
          "x-nullable": true
        },
        "scriptName": {
          "type": "string",
          "x-nullable": true
        },
        "subscriptionId": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "ScriptInstanceInfoRuntimeInformationModel": {
      "additionalProperties": false,
      "properties": {
        "runtimeStatus": {
          "$ref": "#/definitions/ScriptInstanceInfoRuntimeStatus"
        },
        "runtimeStatusMessage": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "ScriptInstanceInfoRuntimeStatus": {
      "description": "<p/><ul><li>0 = Unknown</li><li>1 = Starting</li><li>2 = OK</li><li>3 = Stopping</li><li>4 = Stopped</li><li>-1 = Error</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        -1
      ],
      "format": "int32",
      "type": "integer"
    },
    "ScriptInstanceUpdateInfo": {
      "additionalProperties": false,
      "properties": {
        "config": {
          "x-nullable": true
        },
        "customScriptDescription": {
          "type": "string",
          "x-nullable": true
        },
        "customScriptName": {
          "type": "string",
          "x-nullable": true
        },
        "enabled": {
          "type": "boolean"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "ScriptLocalizationDetail": {
      "additionalProperties": false,
      "properties": {
        "config": {
          "x-nullable": true
        },
        "data": {
          "$ref": "#/definitions/ScriptDescriptionData"
        },
        "language": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "StatusChangeScope": {
      "description": "<p/><ul><li>0 = Default</li><li>1 = AllTeams</li><li>2 = SpecificTeams</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "SubscriptionFeature": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "SubscriptionInfo": {
      "additionalProperties": false,
      "properties": {
        "branchId": {
          "type": "string",
          "x-nullable": true
        },
        "country": {
          "type": "string",
          "x-nullable": true
        },
        "currency": {
          "type": "string",
          "x-nullable": true
        },
        "externalAccountId": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "nextBilling": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "ownerId": {
          "type": "string",
          "x-nullable": true
        },
        "planCode": {
          "type": "string",
          "x-nullable": true
        },
        "planState": {
          "format": "int32",
          "type": "integer"
        },
        "referralEnabled": {
          "type": "boolean"
        },
        "status": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SubscriptionProfile": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "TeamCategoryOptOutModes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Disabled</li><li>2 = Personal</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "TeamDutySummaryInfo": {
      "additionalProperties": false,
      "properties": {
        "dutyAssistEnabled": {
          "type": "boolean"
        },
        "dutySummaries": {
          "items": {
            "$ref": "#/definitions/DutySummaryInfo"
          },
          "type": "array",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "TeamInfo": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "imageLastModified": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "memberIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "setupProgressEnabled": {
          "type": "boolean"
        },
        "subscriptionId": {
          "type": "string",
          "x-nullable": true
        },
        "timezone": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "TeamProfile": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "TeamSetupProgress": {
      "additionalProperties": false,
      "properties": {
        "completedSteps": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdatePasswordInfo": {
      "additionalProperties": false,
      "properties": {
        "currentPassword": {
          "type": "string",
          "x-nullable": true
        },
        "newPassword": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "UserDutyInfo": {
      "additionalProperties": false,
      "properties": {
        "lastChange": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "onDuty": {
          "type": "boolean"
        },
        "onManagerDuty": {
          "type": "boolean"
        },
        "overdue": {
          "type": "boolean"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "UserImage": {
      "additionalProperties": false,
      "properties": {
        "content": {
          "format": "byte",
          "type": "string",
          "x-nullable": true
        },
        "contentDispostion": {
          "type": "string",
          "x-nullable": true
        },
        "contentEncoding": {
          "type": "string",
          "x-nullable": true
        },
        "contentType": {
          "type": "string",
          "x-nullable": true
        },
        "lastModified": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "UserInfo": {
      "additionalProperties": false,
      "properties": {
        "colorIndex": {
          "format": "int32",
          "type": "integer"
        },
        "contactAddresses": {
          "items": {},
          "type": "array",
          "x-nullable": true
        },
        "dutyInfos": {
          "$ref": "#/definitions/UserDutyInfo"
        },
        "externalAuthProvider": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "isDeactivated": {
          "type": "boolean"
        },
        "isInvite": {
          "type": "boolean"
        },
        "isRemoteActionPinSet": {
          "type": "boolean"
        },
        "lastSeen": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "mail": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "roleId": {
          "type": "string",
          "x-nullable": true
        },
        "subscriptionId": {
          "type": "string",
          "x-nullable": true
        },
        "timeZone": {
          "type": "string",
          "x-nullable": true
        },
        "userImageLastModified": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "UserInvitationInfo": {
      "additionalProperties": false,
      "properties": {
        "inviterId": {
          "type": "string",
          "x-nullable": true
        },
        "userMail": {
          "type": "string"
        }
      },
      "required": [
        "userMail"
      ],
      "type": "object"
    },
    "UserLicenseInfo": {
      "additionalProperties": false,
      "properties": {
        "currentUsers": {
          "format": "int32",
          "type": "integer"
        },
        "isFree": {
          "type": "boolean"
        },
        "isTrial": {
          "type": "boolean"
        },
        "licensedUsers": {
          "format": "int32",
          "type": "integer"
        },
        "planCode": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "UserMembership": {
      "additionalProperties": false,
      "properties": {
        "isValid": {
          "readOnly": true,
          "type": "boolean"
        },
        "roleId": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "UserPermission": {
      "additionalProperties": false,
      "properties": {
        "allowed": {
          "type": "boolean"
        },
        "permission": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "UserProfile": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "timeZone": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "UserSetupProgress": {
      "additionalProperties": false,
      "properties": {
        "completedSteps": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.AddTeamMembershipRequest": {
      "additionalProperties": false,
      "properties": {
        "roleId": {
          "type": "string",
          "x-nullable": true
        },
        "setUserOnDuty": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "V2.AlertAnnotationDetails": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "text": {
          "type": "string",
          "x-nullable": true
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/V2.AlertAnnotationTypes"
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.AlertAnnotationInfo": {
      "additionalProperties": false,
      "properties": {
        "text": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/V2.AlertAnnotationTypes"
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.AlertAnnotationTypes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Text</li><li>2 = Image</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.AlertAttachmentDetails": {
      "additionalProperties": false,
      "properties": {
        "content": {
          "type": "string",
          "x-nullable": true
        },
        "contentType": {
          "type": "string",
          "x-nullable": true
        },
        "encoding": {
          "$ref": "#/definitions/V2.AlertAttachmentEncoding"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.AlertAttachmentEncoding": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Base64</li></ul>",
      "enum": [
        0,
        1
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.AlertAttachmentInfo": {
      "additionalProperties": false,
      "properties": {
        "contentType": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.AlertCategoryCountsDetails": {
      "additionalProperties": false,
      "properties": {
        "acknowledged": {
          "format": "int64",
          "type": "integer"
        },
        "categoryId": {
          "type": "string",
          "x-nullable": true
        },
        "closed": {
          "format": "int64",
          "type": "integer"
        },
        "unhandled": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "V2.AlertCountTypes": {
      "description": "<p/><ul><li>1 = TeamCurrentDuty</li><li>2 = TeamLastDuty</li><li>3 = UserLastDutyChange</li><li>4 = Last24Hours</li></ul>",
      "enum": [
        1,
        2,
        3,
        4
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.AlertCountsDetails": {
      "additionalProperties": false,
      "properties": {
        "acknowledged": {
          "format": "int64",
          "type": "integer"
        },
        "categoryCounts": {
          "items": {
            "$ref": "#/definitions/V2.AlertCategoryCountsDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "closed": {
          "format": "int64",
          "type": "integer"
        },
        "end": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "lastModified": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "start": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "subscriptionId": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/V2.AlertCountTypes"
        },
        "typeString": {
          "type": "string",
          "x-nullable": true
        },
        "unhandled": {
          "format": "int64",
          "type": "integer"
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.AlertDeliveryStatusCodes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Open</li><li>2 = Failed</li><li>4 = Transmitted</li><li>6 = Delivered</li><li>8 = Protected</li><li>9 = AbuseProtected</li><li>22 = PartlyFailed</li><li>24 = PartlyTransmitted</li><li>26 = PartlyDelivered</li><li>30 = NoOneOnDuty</li><li>31 = NoOneNotified</li></ul>",
      "enum": [
        0,
        1,
        2,
        4,
        6,
        8,
        9,
        22,
        24,
        26,
        30,
        31
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.AlertDeliveryStatusDetails": {
      "additionalProperties": false,
      "properties": {
        "alertId": {
          "type": "string",
          "x-nullable": true
        },
        "statusCode": {
          "$ref": "#/definitions/V2.AlertDeliveryStatusCodes"
        },
        "userDeliveryStatus": {
          "items": {
            "$ref": "#/definitions/V2.UserDeliveryStatus"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.AlertDetails": {
      "additionalProperties": false,
      "properties": {
        "parameters": {
          "items": {
            "$ref": "#/definitions/V2.EventParameterDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "attachments": {
          "items": {
            "$ref": "#/definitions/V2.AlertAttachmentInfo"
          },
          "type": "array",
          "x-nullable": true
        },
        "categoryId": {
          "type": "string",
          "x-nullable": true
        },
        "escalations": {
          "items": {
            "$ref": "#/definitions/V2.AlertEscalationDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "eventId": {
          "type": "string",
          "x-nullable": true
        },
        "externalId": {
          "type": "string",
          "x-nullable": true
        },
        "flags": {
          "$ref": "#/definitions/V2.AlertFlags"
        },
        "history": {
          "$ref": "#/definitions/V2.AlertHistoryInfo"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "lastModified": {
          "format": "date-time",
          "type": "string"
        },
        "requiredAcknowledgements": {
          "format": "int32",
          "type": "integer"
        },
        "severity": {
          "$ref": "#/definitions/V2.AlertSeverities"
        },
        "status": {
          "$ref": "#/definitions/V2.AlertStatusDetails"
        },
        "subscriptionId": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "text": {
          "type": "string",
          "x-nullable": true
        },
        "timelineEntries": {
          "items": {},
          "type": "array",
          "x-nullable": true
        },
        "title": {
          "type": "string",
          "x-nullable": true
        },
        "workflowType": {
          "$ref": "#/definitions/V2.AlertWorkflowTypes"
        }
      },
      "type": "object"
    },
    "V2.AlertEscalationDetails": {
      "additionalProperties": false,
      "properties": {
        "alertId": {
          "type": "string",
          "x-nullable": true
        },
        "alertStatus": {
          "$ref": "#/definitions/V2.AlertStatusCodes"
        },
        "escType": {
          "$ref": "#/definitions/V2.AlertEscalationType"
        },
        "status": {
          "$ref": "#/definitions/V2.AlertEscalationStatus"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "teamName": {
          "type": "string",
          "x-nullable": true
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "V2.AlertEscalationStatus": {
      "description": "<p/><ul><li>0 = Ok</li><li>1 = InProgress</li><li>2 = TargetInvalid</li><li>3 = TargetPrivate</li><li>4 = Filtered</li><li>5 = Suppressed</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.AlertEscalationType": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Manager</li><li>2 = Team</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.AlertFilterRequestInfo": {
      "additionalProperties": false,
      "properties": {
        "afterId": {
          "type": "string",
          "x-nullable": true
        },
        "alertIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "alertStatusCodes": {
          "$ref": "#/definitions/V2.AlertStatusCodes"
        },
        "categoryIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "continuationToken": {
          "$ref": "#/definitions/PagedResultsPublicContinuationToken"
        },
        "externalId": {
          "type": "string",
          "x-nullable": true
        },
        "maxCreated": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "minCreated": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "modifiedSince": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "showPersonalHiddenCategories": {
          "type": "boolean"
        },
        "teamIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "textToSearch": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.AlertFlags": {
      "description": "<p/><ul><li>0 = None</li><li>1 = HasAttachments</li><li>2 = HasAnnotations</li><li>4 = IsBreached</li><li>8 = HasLocationInfo</li><li>16 = EscalatedToTeam</li><li>32 = EscalatedToManager</li><li>64 = CreatedByEscalation</li></ul>",
      "enum": [
        0,
        1,
        2,
        4,
        8,
        16,
        32,
        64
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.AlertHistoryInfo": {
      "additionalProperties": false,
      "properties": {
        "acknowledgedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "acknowledgements": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "closedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "closedBy": {
          "type": "string",
          "x-nullable": true
        },
        "created": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "V2.AlertInfo": {
      "additionalProperties": false,
      "properties": {
        "categoryId": {
          "type": "string",
          "x-nullable": true
        },
        "eventId": {
          "type": "string",
          "x-nullable": true
        },
        "externalId": {
          "type": "string",
          "x-nullable": true
        },
        "flags": {
          "$ref": "#/definitions/V2.AlertFlags"
        },
        "history": {
          "$ref": "#/definitions/V2.AlertHistoryInfo"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "lastModified": {
          "format": "date-time",
          "type": "string"
        },
        "requiredAcknowledgements": {
          "format": "int32",
          "type": "integer"
        },
        "severity": {
          "$ref": "#/definitions/V2.AlertSeverities"
        },
        "status": {
          "$ref": "#/definitions/V2.AlertStatusDetails"
        },
        "subscriptionId": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "text": {
          "type": "string",
          "x-nullable": true
        },
        "title": {
          "type": "string",
          "x-nullable": true
        },
        "workflowType": {
          "$ref": "#/definitions/V2.AlertWorkflowTypes"
        }
      },
      "type": "object"
    },
    "V2.AlertReportError": {
      "additionalProperties": false,
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorDescription": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.AlertSettingsChannelType": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Push</li><li>2 = Voice</li><li>3 = SMS</li></ul>",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.AlertSettingsDetails": {
      "additionalProperties": false,
      "properties": {
        "escEnabled": {
          "type": "boolean"
        },
        "escMode": {
          "$ref": "#/definitions/AlertEscalationModes"
        },
        "escRefId": {
          "type": "string",
          "x-nullable": true
        },
        "filterAction": {
          "$ref": "#/definitions/AlertFilterActions"
        },
        "filterMode": {
          "$ref": "#/definitions/AlertFilterModes"
        },
        "notificationProfileOverrides": {
          "items": {
            "$ref": "#/definitions/V2.AlertSettingsNotificationProfileDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "optOut": {
          "$ref": "#/definitions/TeamCategoryOptOutModes"
        },
        "overrideNotificationProfiles": {
          "type": "boolean"
        },
        "persNotInterval": {
          "format": "int32",
          "type": "integer"
        },
        "persNotMode": {
          "$ref": "#/definitions/PersistentNotificationModes"
        },
        "responseMode": {
          "$ref": "#/definitions/AlertResponseModes"
        },
        "responseTime": {
          "format": "int32",
          "type": "integer"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.AlertSettingsError": {
      "additionalProperties": false,
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorDescription": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.AlertSettingsNotificationProfileDetails": {
      "additionalProperties": false,
      "properties": {
        "channel": {
          "$ref": "#/definitions/V2.AlertSettingsChannelType"
        },
        "delayInMinutes": {
          "format": "int32",
          "type": "integer"
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "V2.AlertSeverities": {
      "description": "<p/><ul><li>0 = Low</li><li>1 = Major</li><li>2 = Critical</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.AlertStatusCodes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Open</li><li>2 = Acknowledged</li><li>4 = Closed</li><li>8 = NoReply</li><li>16 = Failed</li><li>32 = Error</li></ul>",
      "enum": [
        0,
        1,
        2,
        4,
        8,
        16,
        32
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.AlertStatusDetails": {
      "additionalProperties": false,
      "properties": {
        "alertDeliveryStatus": {
          "$ref": "#/definitions/V2.AlertDeliveryStatusDetails"
        },
        "statusCode": {
          "$ref": "#/definitions/V2.AlertStatusCodes"
        }
      },
      "type": "object"
    },
    "V2.AlertWorkflowTypes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = User</li><li>2 = TeamBroadcast</li><li>3 = TeamEscalation</li><li>4 = MultiAcknowledge</li><li>5 = MultiAcknowledgeEmergency</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.AlertingPatternChannelType": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Push</li><li>2 = Voice</li><li>3 = SMS</li></ul>",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.AlertingPatternDetails": {
      "additionalProperties": false,
      "properties": {
        "categories": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "escalationSettings": {
          "$ref": "#/definitions/V2.AlertingPatternEscalationSettings"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "notificationProfileOverrides": {
          "items": {
            "$ref": "#/definitions/V2.AlertingPatternNotificationProfileDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "overrideEscalationSettings": {
          "type": "boolean"
        },
        "overrideNotificationProfiles": {
          "type": "boolean"
        },
        "overrideResponseSettings": {
          "type": "boolean"
        },
        "responseSettings": {
          "$ref": "#/definitions/V2.AlertingPatternResponseSettings"
        },
        "suppressSignl": {
          "type": "boolean"
        },
        "timeSlots": {
          "items": {
            "$ref": "#/definitions/V2.TimeSlotDetails"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.AlertingPatternEscalationSettings": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "mode": {
          "$ref": "#/definitions/AlertEscalationModes"
        },
        "referenceId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.AlertingPatternNotificationProfileDetails": {
      "additionalProperties": false,
      "properties": {
        "channel": {
          "$ref": "#/definitions/V2.AlertingPatternChannelType"
        },
        "delayInMinutes": {
          "format": "int32",
          "type": "integer"
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "V2.AlertingPatternResponseSettings": {
      "additionalProperties": false,
      "properties": {
        "responseMode": {
          "$ref": "#/definitions/AlertResponseModes"
        },
        "responseTime": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "V2.CalloutTemplateDetails": {
      "additionalProperties": false,
      "properties": {
        "categoryId": {
          "type": "string",
          "x-nullable": true
        },
        "externalId": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "location": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "subject": {
          "type": "string",
          "x-nullable": true
        },
        "targetAllTeams": {
          "type": "boolean"
        },
        "targetTeamId": {
          "type": "string",
          "x-nullable": true
        },
        "text": {
          "type": "string",
          "x-nullable": true
        },
        "workflowType": {
          "$ref": "#/definitions/V2.CalloutTemplateWorkflowType"
        }
      },
      "type": "object"
    },
    "V2.CalloutTemplateWorkflowType": {
      "description": "<p/><ul><li>0 = AsConfiguredInTeam</li><li>2 = TeamBroadcast</li><li>4 = MultiAcknowledge</li><li>5 = MultiAcknowledgeEmergency</li></ul>",
      "enum": [
        0,
        2,
        4,
        5
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.CategoryAugmentationDetails": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/V2.CategoryAugmentationType"
        },
        "value": {
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "V2.CategoryAugmentationType": {
      "description": "<p/><ul><li>0 = Parameter</li><li>1 = Subject</li><li>2 = Text</li><li>3 = Location</li></ul>",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.CategoryDetails": {
      "additionalProperties": false,
      "properties": {
        "augmentations": {
          "items": {
            "$ref": "#/definitions/V2.CategoryAugmentationDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "color": {
          "type": "string"
        },
        "enrichments": {
          "items": {
            "$ref": "#/definitions/V2.CategoryEnrichmentDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "imageName": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        },
        "keywordMatching": {
          "$ref": "#/definitions/V2.KeywordMatchingType"
        },
        "keywords": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "keywordsExcluded": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/V2.CategoryOptions"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "color",
        "imageName",
        "keywordMatching",
        "keywords",
        "name"
      ],
      "type": "object"
    },
    "V2.CategoryEnrichmentDetails": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/V2.CategoryEnrichmentType"
        },
        "value": {
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "V2.CategoryEnrichmentType": {
      "description": "<p/><ul><li>0 = Parameter</li><li>1 = Hyperlink</li></ul>",
      "enum": [
        0,
        1
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.CategoryError": {
      "additionalProperties": false,
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorDescription": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.CategoryOptions": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Hidden</li><li>2 = DenyDelete</li><li>4 = HideOptOut</li><li>8 = HideKeywords</li></ul>",
      "enum": [
        0,
        1,
        2,
        4,
        8
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.ChangeAlertStatusRequestInfo": {
      "additionalProperties": false,
      "properties": {
        "descr": {
          "type": "string",
          "x-nullable": true
        },
        "uid": {
          "type": "string"
        }
      },
      "required": [
        "uid"
      ],
      "type": "object"
    },
    "V2.ChannelType": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Push</li><li>2 = Email</li><li>4 = Bot</li><li>8 = Voice</li><li>16 = SMS</li></ul>",
      "enum": [
        0,
        1,
        2,
        4,
        8,
        16
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.DateOnlyDetails": {
      "additionalProperties": false,
      "properties": {
        "day": {
          "format": "int32",
          "type": "integer"
        },
        "month": {
          "$ref": "#/definitions/V2.Month"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "V2.DutyChangeArgsRequest": {
      "additionalProperties": false,
      "properties": {
        "teamIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "userId": {
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "userId"
      ],
      "type": "object"
    },
    "V2.DutyChangeError": {
      "additionalProperties": false,
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorDescription": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.DutyError": {
      "additionalProperties": false,
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorDescription": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.DutyModes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Primary</li><li>100 = Manager</li></ul>",
      "enum": [
        0,
        1,
        100
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.EscalateAlertRequestInfo": {
      "additionalProperties": false,
      "properties": {
        "targetTeamId": {
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.EventDetails": {
      "additionalProperties": false,
      "properties": {
        "parameters": {
          "items": {
            "$ref": "#/definitions/V2.EventParameterDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "acknowledgedAlerts": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "closedAlerts": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "creationTime": {
          "format": "date-time",
          "type": "string"
        },
        "eventSourceGroupId": {
          "type": "string",
          "x-nullable": true
        },
        "eventSourceId": {
          "type": "string",
          "x-nullable": true
        },
        "eventSourceTeamId": {
          "type": "string",
          "x-nullable": true
        },
        "eventSourceType": {
          "$ref": "#/definitions/V2.EventSourceTypes"
        },
        "eventStatus": {
          "$ref": "#/definitions/V2.EventStatusCodes"
        },
        "externalId": {
          "type": "string",
          "x-nullable": true
        },
        "from": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "lastModified": {
          "format": "date-time",
          "type": "string"
        },
        "severity": {
          "$ref": "#/definitions/V2.EventSeverities"
        },
        "targets": {
          "items": {
            "$ref": "#/definitions/V2.EventTargetDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "text": {
          "type": "string",
          "x-nullable": true
        },
        "title": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.EventParameterDetails": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "options": {
          "$ref": "#/definitions/V2.EventParameterOptions"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "$ref": "#/definitions/V2.EventParameterTypes"
        },
        "value": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.EventParameterOptions": {
      "description": "<p/><ul><li>0 = None</li><li>1 = ExcludeFromCategorization</li></ul>",
      "enum": [
        0,
        1
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.EventParameterTypes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Object</li><li>2 = Array</li><li>3 = Constructor</li><li>4 = Property</li><li>5 = Comment</li><li>6 = Integer</li><li>7 = Float</li><li>8 = String</li><li>9 = Boolean</li><li>10 = Null</li><li>11 = Undefined</li><li>12 = Date</li><li>13 = Raw</li><li>14 = Bytes</li><li>15 = Guid</li><li>16 = Uri</li><li>17 = TimeSpan</li><li>100 = Html</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        100
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.EventSeverities": {
      "description": "<p/><ul><li>0 = Low</li><li>1 = Major</li><li>2 = Critical</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.EventSourceCreateDetails": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "disabled": {
          "type": "boolean"
        },
        "language": {
          "$ref": "#/definitions/V2.SupportedLanguage"
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "sharedTeams": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/V2.EventSourceCreateTypes"
        }
      },
      "type": "object"
    },
    "V2.EventSourceCreateTypes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Email</li><li>2 = Webhook</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.EventSourceEndpointError": {
      "additionalProperties": false,
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorDescription": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.EventSourceTypes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Email</li><li>2 = WebHook</li><li>3 = Script</li><li>4 = System</li><li>5 = Manual</li><li>6 = Voice</li><li>7 = Api</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.EventSourceUpdateDetails": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "disabled": {
          "type": "boolean",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.EventStatusCodes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Processing</li><li>2 = Signled</li><li>3 = Filtered</li><li>4 = Resolved</li><li>5 = Discarded</li><li>6 = Acknowledged</li><li>7 = Suppressed</li><li>8 = NoRuleApplied</li><li>9 = MultipleTargetStatus</li><li>1000 = Error</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        1000
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.EventTargetDetails": {
      "additionalProperties": false,
      "properties": {
        "alertId": {
          "type": "string",
          "x-nullable": true
        },
        "categoryId": {
          "type": "string",
          "x-nullable": true
        },
        "creationTime": {
          "format": "date-time",
          "type": "string"
        },
        "distributionId": {
          "type": "string",
          "x-nullable": true
        },
        "eventId": {
          "type": "string",
          "x-nullable": true
        },
        "eventTargetStatus": {
          "$ref": "#/definitions/V2.EventTargetStatusCode"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "lastModified": {
          "format": "date-time",
          "type": "string"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.EventTargetStatusCode": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Processing</li><li>2 = Signled</li><li>3 = Filtered</li><li>4 = Resolved</li><li>5 = Discarded</li><li>6 = Acknowledged</li><li>7 = Suppressed</li><li>1000 = Error</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        1000
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.HolidayDetails": {
      "additionalProperties": false,
      "properties": {
        "day": {
          "format": "int32",
          "type": "integer"
        },
        "month": {
          "$ref": "#/definitions/V2.Month"
        },
        "repeating": {
          "type": "boolean"
        },
        "year": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.InvitationResult": {
      "additionalProperties": false,
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        },
        "errorMessage": {
          "type": "string",
          "x-nullable": true
        },
        "invitedUser": {
          "$ref": "#/definitions/V2.InvitedUserInfo"
        },
        "success": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "V2.InvitedUserInfo": {
      "additionalProperties": false,
      "properties": {
        "mailAddress": {
          "type": "string",
          "x-nullable": true
        },
        "roleId": {
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/V2.UserStatus"
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.KeywordMatchingType": {
      "description": "<p/><ul><li>0 = Any</li><li>1 = All</li></ul>",
      "enum": [
        0,
        1
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.Month": {
      "description": "<p/><ul><li>0 = Unset</li><li>1 = January</li><li>2 = February</li><li>3 = March</li><li>4 = April</li><li>5 = May</li><li>6 = June</li><li>7 = July</li><li>8 = August</li><li>9 = September</li><li>10 = October</li><li>11 = November</li><li>12 = December</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.MonthAndDayDetails": {
      "additionalProperties": false,
      "properties": {
        "day": {
          "format": "int32",
          "type": "integer"
        },
        "month": {
          "$ref": "#/definitions/V2.Month"
        }
      },
      "type": "object"
    },
    "V2.NewPhoneNumber": {
      "additionalProperties": false,
      "properties": {
        "countryCode": {
          "type": "string",
          "x-nullable": true
        },
        "phoneNumber": {
          "type": "string",
          "x-nullable": true
        },
        "sendValidationCode": {
          "type": "boolean"
        },
        "sendValidationCodeVia": {
          "$ref": "#/definitions/V2.PhoneNumberValidationChannels"
        }
      },
      "type": "object"
    },
    "V2.NotificationProfileDetails": {
      "additionalProperties": false,
      "properties": {
        "channel": {
          "$ref": "#/definitions/V2.ChannelType"
        },
        "delayInMinutes": {
          "format": "int32",
          "type": "integer"
        },
        "enabled": {
          "type": "boolean"
        },
        "options": {
          "format": "int32",
          "type": "integer"
        },
        "persistent": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "V2.OverlappingTimeSlotsDetails": {
      "additionalProperties": false,
      "properties": {
        "refId": {
          "type": "string",
          "x-nullable": true
        },
        "timeSlots": {
          "items": {
            "$ref": "#/definitions/V2.TimeSlotDetails"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.PermissionError": {
      "additionalProperties": false,
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorDescription": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.PhoneNumberValidation": {
      "additionalProperties": false,
      "properties": {
        "phoneNumber": {
          "type": "string",
          "x-nullable": true
        },
        "validationCode": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.PhoneNumberValidationChannels": {
      "description": "<p/><ul><li>0 = None</li><li>1 = SMS</li><li>2 = Voice</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.PhoneNumberValidationStatus": {
      "description": "<p/><ul><li>0 = NotValidated</li><li>1 = Validated</li><li>2 = CountryNotSupported</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.RaiseAlertRequestInfo": {
      "additionalProperties": false,
      "properties": {
        "parameters": {
          "items": {
            "$ref": "#/definitions/EventParameterInfo"
          },
          "type": "array",
          "x-nullable": true
        },
        "attachments": {
          "items": {
            "$ref": "#/definitions/V2.AlertAttachmentDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "category": {
          "type": "string",
          "x-nullable": true
        },
        "externalId": {
          "type": "string",
          "x-nullable": true
        },
        "flags": {
          "$ref": "#/definitions/V2.AlertFlags"
        },
        "severity": {
          "$ref": "#/definitions/V2.AlertSeverities"
        },
        "teamId": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "teamId",
        "text",
        "title"
      ],
      "type": "object"
    },
    "V2.CustomEventsSendInfo": {
      "additionalProperties": false,
      "properties": {
        "Title": {
          "type": "string",
          "x-nullable": true
        },
        "Message": {
          "type": "string",
          "x-nullable": true
        },
        "X-S4-Service": {
          "description": "X-S4-Service: : Assigns the Signl to the service / system category with the specified name.",
          "x-ms-summary": "X-S4-Service",
          "type": "string",
          "x-nullable": true
        },
        "X-S4-Location": {
          "description": "X-S4-Location: Transmit location information (latitude,longitude) with your event and display a map in the mobile app.",
          "x-ms-summary": "X-S4-Location",
          "type": "string",
          "x-nullable": true
        },
        "X-S4-AlertingScenario": {
          "description": "X-S4-AlertingScenario: If this event triggers a Signl, allows to control how SIGNL4 notifies the team. Supported values are: single_ack, multi_ack, emergency.",
          "x-ms-summary": "X-S4-AlertingScenario",
          "type": "string",
          "x-nullable": true
        },
        "X-S4-ExternalID": {
          "description": "X-S4-ExternalID: If the event originates from a record in a 3rd party system, use this parameter to pass the unique ID of that record. That ID will be communicated in outbound webhook notifications from SIGNL4, which is great for correlation/synchronization of that record with the Signl.",
          "x-ms-summary": "X-S4-ExternalID",
          "type": "string",
          "x-nullable": true
        },
        "X-S4-Status": {
          "description": "X-S4-Status:  If you want to resolve an existing Signl by an external id (X-S4-ExternalID), you can add this status parameter. It has three possible values: new, acknowledged, resolved.",
          "x-ms-summary": "X-S4-Status",
          "type": "string",
          "x-nullable": true
        },
        "X-S4-Filtering": {
          "description": "X-S4-Filtering: Specify a boolean value of true or false to apply event filtering for this event, or not. If set to true, the event will only trigger a notification to the team, if it contains at least one keyword from one of your services and system categories (i.e. it is whitelisted).",
          "x-ms-summary": "X-S4-Filtering",
          "type": "boolean",
          "x-nullable": true
        }
      },
      "required": [
        "Title",
        "Message"
      ],
      "type": "object"
    },
    "V2.RemoteActionCreateOrUpdateDetails": {
      "additionalProperties": false,
      "properties": {
        "parameters": {
          "items": {
            "$ref": "#/definitions/V2.RemoteActionParameterCreateOrUpdateDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "access": {
          "items": {
            "$ref": "#/definitions/V2.RemoteActionTeamAccessDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "definitionId": {
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.RemoteActionDefinitionDetails": {
      "additionalProperties": false,
      "properties": {
        "parameters": {
          "items": {
            "$ref": "#/definitions/V2.RemoteActionDefinitionParameterDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "executorService": {
          "type": "string",
          "x-nullable": true
        },
        "externalId": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "statusCode": {
          "$ref": "#/definitions/V2.RemoteActionDefinitionStatus"
        },
        "statusDescription": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/V2.RemoteActionTypes"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "V2.RemoteActionDefinitionParameterDetails": {
      "additionalProperties": false,
      "properties": {
        "controlType": {
          "$ref": "#/definitions/V2.RemoteActionParameterControlTypes"
        },
        "defaultValue": {
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "displayName": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "options": {
          "$ref": "#/definitions/V2.RemoteActionParameterOptions"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.RemoteActionDefinitionStatus": {
      "description": "<p/><ul><li>0 = Disabled</li><li>1 = Enabled</li><li>2 = Invalid</li></ul>",
      "enum": [
        0,
        1,
        2
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.RemoteActionDetails": {
      "additionalProperties": false,
      "properties": {
        "parameters": {
          "items": {
            "$ref": "#/definitions/V2.RemoteActionParameter"
          },
          "type": "array",
          "x-nullable": true
        },
        "access": {
          "items": {
            "$ref": "#/definitions/V2.RemoteActionTeamAccessDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "currentPrincipal": {
          "$ref": "#/definitions/V2.RemoteActionPrincipalAccessDetails"
        },
        "definitionId": {
          "type": "string",
          "x-nullable": true
        },
        "definitionVersion": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "enabled": {
          "type": "boolean"
        },
        "executorService": {
          "type": "string",
          "x-nullable": true
        },
        "externalId": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "statusCode": {
          "$ref": "#/definitions/V2.RemoteActionStatus"
        },
        "statusDescription": {
          "type": "string",
          "x-nullable": true
        },
        "subscriptionId": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/V2.RemoteActionTypes"
        }
      },
      "type": "object"
    },
    "V2.RemoteActionInfo": {
      "additionalProperties": false,
      "properties": {
        "access": {
          "items": {
            "$ref": "#/definitions/V2.RemoteActionTeamAccessDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "currentPrincipal": {
          "$ref": "#/definitions/V2.RemoteActionPrincipalAccessDetails"
        },
        "definitionId": {
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "statusCode": {
          "$ref": "#/definitions/V2.RemoteActionStatus"
        },
        "statusDescription": {
          "type": "string",
          "x-nullable": true
        },
        "subscriptionId": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/V2.RemoteActionTypes"
        }
      },
      "type": "object"
    },
    "V2.RemoteActionParameter": {
      "additionalProperties": false,
      "properties": {
        "controlType": {
          "$ref": "#/definitions/V2.RemoteActionParameterControlTypes"
        },
        "displayName": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/V2.RemoteActionParameterOptions"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "type": "string",
          "x-nullable": true
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "V2.RemoteActionParameterControlTypes": {
      "description": "<p/><ul><li>0 = Text</li><li>1 = MultiLineText</li><li>2 = Integer</li><li>3 = Double</li><li>4 = Bool</li><li>5 = Time</li><li>6 = Date</li><li>7 = TimeZone</li><li>8 = Password</li><li>9 = PIN</li><li>10 = SingleChoice</li><li>11 = MultiChoice</li><li>12 = Suggestion</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.RemoteActionParameterCreateOrUpdateDetails": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "V2.RemoteActionParameterOptions": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Required</li><li>2 = Locked</li><li>4 = Encrypted</li></ul>",
      "enum": [
        0,
        1,
        2,
        4
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.RemoteActionPrincipalAccessDetails": {
      "additionalProperties": false,
      "properties": {
        "canEdit": {
          "type": "boolean"
        },
        "canExecute": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "V2.RemoteActionStatus": {
      "description": "<p/><ul><li>0 = Disabled</li><li>1 = Enabled</li><li>2 = Invalid</li><li>4 = ProviderDisabled</li></ul>",
      "enum": [
        0,
        1,
        2,
        4
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.RemoteActionTeamAccessDetails": {
      "additionalProperties": false,
      "properties": {
        "canEdit": {
          "type": "boolean"
        },
        "canExecute": {
          "type": "boolean"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.RemoteActionTypes": {
      "description": "<p/><ul><li>0 = Unknown</li><li>1 = Script</li><li>2 = EnterpriseAlert</li><li>3 = Webhook</li></ul>",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.RemoteJob": {
      "additionalProperties": false,
      "properties": {
        "parameters": {
          "items": {
            "$ref": "#/definitions/V2.RemoteJobParameter"
          },
          "type": "array",
          "x-nullable": true
        },
        "actionId": {
          "type": "string",
          "x-nullable": true
        },
        "activatedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "creatorInfo": {
          "$ref": "#/definitions/V2.RemoteJobCreatorDetails"
        },
        "definitionId": {
          "type": "string",
          "x-nullable": true
        },
        "externalId": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "lastUpdate": {
          "format": "date-time",
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/V2.RemoteJobOptions"
        },
        "startedAt": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "statusCode": {
          "$ref": "#/definitions/V2.RemoteJobStatusCodes"
        },
        "statusDescription": {
          "type": "string",
          "x-nullable": true
        },
        "statusDetails": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/V2.RemoteActionTypes"
        }
      },
      "type": "object"
    },
    "V2.RemoteJobCreate": {
      "additionalProperties": false,
      "properties": {
        "parameters": {
          "items": {
            "$ref": "#/definitions/V2.RemoteJobParameter"
          },
          "type": "array",
          "x-nullable": true
        },
        "alertId": {
          "type": "string",
          "x-nullable": true
        },
        "options": {
          "$ref": "#/definitions/V2.RemoteJobOptions"
        },
        "remoteActionPin": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.RemoteJobCreatorDetails": {
      "additionalProperties": false,
      "properties": {
        "referenceId": {
          "type": "string",
          "x-nullable": true
        },
        "referenceName": {
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "$ref": "#/definitions/V2.RemoteJobCreatorType"
        }
      },
      "type": "object"
    },
    "V2.RemoteJobCreatorType": {
      "description": "<p/><ul><li>0 = None</li><li>1 = User</li><li>2 = ApiKey</li><li>3 = System</li></ul>",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.RemoteJobJournalPagedFilter": {
      "additionalProperties": false,
      "properties": {
        "actionId": {
          "type": "string",
          "x-nullable": true
        },
        "continuationToken": {
          "type": "string",
          "x-nullable": true
        },
        "maxCreationDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "minCreationDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "modifiedSince": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "statusCodes": {
          "$ref": "#/definitions/V2.RemoteJobStatusCodes"
        }
      },
      "type": "object"
    },
    "V2.RemoteJobOptions": {
      "description": "<p/><ul><li>0 = None</li></ul>",
      "enum": [
        0
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.RemoteJobParameter": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "V2.RemoteJobStatusCodes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Pending</li><li>2 = Ready</li><li>4 = Running</li><li>8 = Executed</li><li>16 = Error</li></ul>",
      "enum": [
        0,
        1,
        2,
        4,
        8,
        16
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.RequestedPermissions": {
      "additionalProperties": false,
      "properties": {
        "permissions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "teamIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.ScheduleDetails": {
      "additionalProperties": false,
      "properties": {
        "end": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "options": {
          "format": "int32",
          "type": "integer"
        },
        "start": {
          "format": "date-time",
          "type": "string"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.SchedulesFilter": {
      "additionalProperties": false,
      "properties": {
        "limit": {
          "format": "int32",
          "type": "integer",
          "x-nullable": true
        },
        "minDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "teamIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.SetNotificationProfilesDetails": {
      "additionalProperties": false,
      "properties": {
        "profiles": {
          "items": {
            "$ref": "#/definitions/V2.NotificationProfileDetails"
          },
          "type": "array",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.SupportedLanguage": {
      "description": "<p/><ul><li>0 = EN</li><li>1 = DE</li></ul>",
      "enum": [
        0,
        1
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.TeamDutySettingsDetails": {
      "additionalProperties": false,
      "properties": {
        "autosnapEnabled": {
          "type": "boolean"
        },
        "dutyAssistantEnabled": {
          "type": "boolean"
        },
        "dutyChangeNotificationsEnabled": {
          "type": "boolean"
        },
        "dutyLength": {
          "format": "int32",
          "type": "integer"
        },
        "handoverDate": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "handoverTime": {
          "format": "int32",
          "type": "integer"
        },
        "handoverWeekDay": {
          "format": "int32",
          "type": "integer"
        },
        "minMemberOnDuty": {
          "format": "int32",
          "type": "integer"
        },
        "schedulingEnabled": {
          "type": "boolean"
        },
        "shiftReportCarbonCopyMail": {
          "type": "string",
          "x-nullable": true
        },
        "shiftReportEnabled": {
          "type": "boolean"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "timezone": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.TeamDutySettingsError": {
      "additionalProperties": false,
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorDescription": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.TeamDutySummaryError": {
      "additionalProperties": false,
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorDescription": {
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.TeamHolidayDetails": {
      "additionalProperties": false,
      "properties": {
        "holidays": {
          "items": {
            "$ref": "#/definitions/V2.HolidayDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.TeamImageDetails": {
      "additionalProperties": false,
      "properties": {
        "content": {
          "format": "byte",
          "type": "string",
          "x-nullable": true
        },
        "contentDispostion": {
          "type": "string",
          "x-nullable": true
        },
        "contentEncoding": {
          "type": "string",
          "x-nullable": true
        },
        "contentType": {
          "type": "string",
          "x-nullable": true
        },
        "lastModified": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.TeamMembershipDetails": {
      "additionalProperties": false,
      "properties": {
        "mailAddress": {
          "type": "string",
          "x-nullable": true
        },
        "memberSince": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "roleId": {
          "type": "string",
          "x-nullable": true
        },
        "status": {
          "$ref": "#/definitions/V2.UserStatus"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.TeamPermissions": {
      "additionalProperties": false,
      "properties": {
        "permissions": {
          "items": {
            "$ref": "#/definitions/UserPermission"
          },
          "type": "array",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.TeamPrivacySettingsDetails": {
      "additionalProperties": false,
      "properties": {
        "hideContactAddresses": {
          "type": "boolean"
        },
        "hideDutyData": {
          "type": "boolean"
        },
        "hideForEscalation": {
          "type": "boolean"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.TeamPrivacySettingsUpdate": {
      "additionalProperties": false,
      "properties": {
        "hideContactAddresses": {
          "type": "boolean"
        },
        "hideDutyData": {
          "type": "boolean"
        },
        "hideForEscalation": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "V2.TeamPublicDetails": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "privacySettings": {
          "$ref": "#/definitions/V2.TeamPrivacySettingsDetails"
        }
      },
      "type": "object"
    },
    "V2.TeamUserError": {
      "additionalProperties": false,
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "errorDescription": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.TimeSlotDetails": {
      "additionalProperties": false,
      "properties": {
        "end": {
          "$ref": "#/definitions/V2.WeekTimeDetails"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "start": {
          "$ref": "#/definitions/V2.WeekTimeDetails"
        }
      },
      "required": [
        "end",
        "start"
      ],
      "type": "object"
    },
    "V2.TimeSlotValidationResultDetails": {
      "additionalProperties": false,
      "properties": {
        "isOverlapping": {
          "readOnly": true,
          "type": "boolean"
        },
        "item": {
          "$ref": "#/definitions/V2.TimeSlotDetails"
        },
        "overlappingTimeSlots": {
          "items": {
            "$ref": "#/definitions/V2.OverlappingTimeSlotsDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "valid": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "V2.TimelineEntryAnnotation": {
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/V2.TimelineEntryBase"
        }
      ],
      "properties": {
        "annotationtype": {
          "$ref": "#/definitions/V2.AlertAnnotationTypes"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "text": {
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.TimelineEntryBase": {
      "additionalProperties": false,
      "properties": {
        "entrytype": {
          "$ref": "#/definitions/V2.TimelineEntryTypes"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "V2.TimelineEntryCreatorType": {
      "description": "<p/><ul><li>0 = Unknown</li><li>1 = User</li><li>2 = ApiKey</li><li>3 = System</li></ul>",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.TimelineEntryRemoteAction": {
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/V2.TimelineEntryBase"
        }
      ],
      "properties": {
        "creatorId": {
          "type": "string",
          "x-nullable": true
        },
        "creatorType": {
          "$ref": "#/definitions/V2.TimelineEntryCreatorType"
        },
        "remoteActionId": {
          "type": "string",
          "x-nullable": true
        },
        "remoteJobId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.TimelineEntryTeam": {
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/V2.TimelineEntryBase"
        }
      ],
      "properties": {
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.TimelineEntryTypes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = AlertOpened</li><li>2 = AlertAcknowledged</li><li>3 = Annotation</li><li>4 = AlertBreached</li><li>5 = AlertClosed</li><li>6 = AlertAcknowledgeUndo</li><li>7 = AlertCloseUndo</li><li>8 = AlertEscalationRequested</li><li>9 = AlertEscalatedToManager</li><li>10 = AlertEscalatedToTeam</li><li>11 = AlertEscalatedFromTeam</li><li>12 = EscalationFailedTeamNotValid</li><li>13 = EscalationFailedTeamPrivate</li><li>14 = EscalationFailedEventFiltered</li><li>15 = EscalationFailedEventSuppressed</li><li>16 = EscalationExpedited</li><li>17 = RemoteJobExecuted</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.TimelineEntryUser": {
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/V2.TimelineEntryBase"
        }
      ],
      "properties": {
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.UserDeliveryStatus": {
      "additionalProperties": false,
      "properties": {
        "statusCode": {
          "$ref": "#/definitions/V2.UserDeliveryStatusCodes"
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.UserDeliveryStatusCodes": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Open</li><li>2 = Failed</li><li>4 = Transmitted</li><li>6 = Delivered</li><li>8 = Protected</li><li>9 = AbuseProtected</li><li>24 = PartlyTransmitted</li><li>26 = PartlyDelivered</li><li>30 = NotOnDuty</li><li>31 = CategoryOptOut</li><li>32 = NoMessagesSent</li></ul>",
      "enum": [
        0,
        1,
        2,
        4,
        6,
        8,
        9,
        24,
        26,
        30,
        31,
        32
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.UserDetails": {
      "additionalProperties": false,
      "properties": {
        "colorIndex": {
          "format": "int32",
          "type": "integer"
        },
        "contactAddresses": {
          "items": {},
          "type": "array",
          "x-nullable": true
        },
        "dutyInfos": {
          "items": {
            "$ref": "#/definitions/V2.UserDutyDetails"
          },
          "type": "array",
          "x-nullable": true
        },
        "externalAuthProvider": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "isDeactivated": {
          "type": "boolean"
        },
        "isInvite": {
          "type": "boolean"
        },
        "lastSeen": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "mail": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "remoteActionPinSet": {
          "type": "boolean"
        },
        "subscriptionId": {
          "type": "string",
          "x-nullable": true
        },
        "timeZone": {
          "type": "string",
          "x-nullable": true
        },
        "userImageLastModified": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.UserDutyDetails": {
      "additionalProperties": false,
      "properties": {
        "dutyMode": {
          "$ref": "#/definitions/V2.DutyModes"
        },
        "lastChange": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "onDutyTime": {
          "format": "int32",
          "type": "integer"
        },
        "overdue": {
          "type": "boolean"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        },
        "userId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.UserInviteRequest": {
      "additionalProperties": false,
      "properties": {
        "email": {
          "type": "string",
          "x-nullable": true
        },
        "roleId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.UserLocaleDetails": {
      "additionalProperties": false,
      "properties": {
        "language": {
          "type": "string",
          "x-nullable": true
        },
        "timeZone": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.UserLocaleResponseDetails": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "language": {
          "type": "string",
          "x-nullable": true
        },
        "timeZone": {
          "type": "string",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "V2.UserPhoneNumberDetails": {
      "additionalProperties": false,
      "properties": {
        "countryCode": {
          "type": "string",
          "x-nullable": true
        },
        "phoneNumber": {
          "type": "string",
          "x-nullable": true
        },
        "validationStatus": {
          "$ref": "#/definitions/V2.PhoneNumberValidationStatus"
        }
      },
      "type": "object"
    },
    "V2.UserStatus": {
      "description": "<p/><ul><li>0 = None</li><li>1 = Deleted</li><li>2 = Invited</li><li>3 = Active</li></ul>",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "format": "int32",
      "type": "integer"
    },
    "V2.UsersInvitationRequest": {
      "additionalProperties": false,
      "properties": {
        "inviterId": {
          "type": "string",
          "x-nullable": true
        },
        "invites": {
          "items": {
            "$ref": "#/definitions/V2.UserInviteRequest"
          },
          "type": "array"
        },
        "teamId": {
          "type": "string"
        }
      },
      "required": [
        "invites",
        "teamId"
      ],
      "type": "object"
    },
    "V2.WeekTimeDetails": {
      "additionalProperties": false,
      "properties": {
        "hour": {
          "format": "int32",
          "type": "integer"
        },
        "minutes": {
          "format": "int32",
          "type": "integer"
        },
        "weekday": {
          "$ref": "#/definitions/V2.Weekday"
        }
      },
      "type": "object"
    },
    "V2.Weekday": {
      "description": "<p/><ul><li>0 = Holiday</li><li>1 = Monday</li><li>2 = Tuesday</li><li>3 = Wednesday</li><li>4 = Thursday</li><li>5 = Friday</li><li>6 = Saturday</li><li>7 = Sunday</li></ul>",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "format": "int32",
      "type": "integer"
    },
    "WebhookBaseInfo": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "extUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "extUrl",
        "name"
      ],
      "type": "object"
    },
    "WebhookInfo": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "enabled": {
          "type": "boolean"
        },
        "extUrl": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "subId": {
          "type": "string",
          "x-nullable": true
        },
        "teamId": {
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "extUrl",
        "name"
      ],
      "type": "object"
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "X-S4-Api-Key"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": [
    {
      "description": "Provides access to all information about SIGNLs and the ability to interact with them.",
      "name": "Alerts"
    },
    {
      "description": "Provide access to callout templates",
      "name": "CalloutsTemplates"
    },
    {
      "description": "Provides access to services and system categories in a SIGNL4 team.",
      "name": "Categories"
    },
    {
      "description": "Provide access to duty information and the ability to create, delete and update them.",
      "name": "Duties"
    },
    {
      "description": "Provides access to distribution sets",
      "name": "EventDistributions"
    },
    {
      "description": "Provide access to all information about events and their parameters.",
      "name": "Events"
    },
    {
      "description": "Provides access to event sources of teams of user",
      "name": "EventSources"
    },
    {
      "description": "Provides access to the prepaid balance and transactions",
      "name": "Prepaid"
    },
    {
      "description": "Provides management of remote actions definitions for a SIGNL4 subscription.",
      "name": "RemoteActionDefinitions"
    },
    {
      "description": "Provides management of remote actions for a SIGNL4 subscription.",
      "name": "RemoteActions"
    },
    {
      "description": "Provides management of remote action jobs for a SIGNL4 subscription.",
      "name": "RemoteJobs"
    },
    {
      "description": "Provides management of the remote action job journal for a SIGNL4 subscription.",
      "name": "RemoteJobsJournal"
    },
    {
      "description": "Provide access to schedule information and the ability to create, delete and update them.",
      "name": "Schedules"
    },
    {
      "description": "Provides access to apps that are available in SIGNL4 and e.g. allows adding an app to a SIGNL4 team.",
      "name": "Scripts"
    },
    {
      "description": "Provides management capabilities for a SIGNL4 subscription.",
      "name": "Subscriptions"
    },
    {
      "description": "Provides access to team specfic ressources",
      "name": "Teams"
    },
    {
      "description": "Provides management for team members in a SIGNL4 team.",
      "name": "Users"
    },
    {
      "description": "Provides management for outbound notifications (e.g. a Signl was confirmed) via webhooks.",
      "name": "Webhooks"
    }
  ],
  "x-components": {}
}