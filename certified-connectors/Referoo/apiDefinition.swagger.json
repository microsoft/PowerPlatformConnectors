{
  "swagger": "2.0",
  "info": {
    "title": "Referoo",
    "description": "Referoo's online reference checking solution helps our clients deliver a better, faster, and more accurate reference check. This connector makes you able to integrate the Referoo reference process into your existing flows.",
    "version": "1.0",
    "contact": {
      "name": "Referoo Support",
      "url": "https://help.referoo.com.au/",
      "email": "support@referoo.com.au"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.referoo.com/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.referoo.com/privacy/"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Human Resources;Website"
    }
  ],
  "host": "api.referoo.com.au",
  "basePath": "/oauth2",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "securityDefinitions": {
    "oauth2-auth": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://api.referoo.com.au/oauth/authorize",
      "tokenUrl": "https://api.referoo.com.au/oauth/token",
      "scopes": {
        "read": "read",
        "write": "write"
      }
    }
  },
  "security": [
    {
      "oauth2-auth": [
        "read",
        "write"
      ]
    }
  ],
  "definitions": {
    "Answer-read": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The child account ID."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was created."
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was last updated."
        },
        "questionsNum": {
          "type": "integer",
          "description": "The ID of the question linked to this answer."
        },
        "questionnaire_questionsNum": {
          "type": "integer",
          "description": "The ID of the questionnaire linked to this answer."
        },
        "question": {
          "type": "string",
          "description": "The question asked to the referee."
        },
        "answer": {
          "type": "string",
          "description": "The answer provided by the Referee to this question."
        }
      }
    },
    "Answers-response": {
      "type": "object",
      "properties": {
        "referee": {
          "$ref": "#/definitions/Referee-read-detail"
        },
        "answers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Answer-read"
          }
        }
      }
    },
    "Candidate-read": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The candidate ID."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was created."
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was last updated."
        },
        "unique_id": {
          "type": "string",
          "description": "The candidate's unique ID."
        },
        "first_name": {
          "type": "string",
          "description": "The candidate's first name."
        },
        "last_name": {
          "type": "string",
          "description": "The candidate's last name."
        },
        "email": {
          "type": "string",
          "description": "The candidate's email."
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the referee."
        },
        "phone_country": {
          "$ref": "#/definitions/Phone-country"
        },
        "notes": {
          "type": "string",
          "description": "Notes on the candidate."
        },
        "job": {
          "type": "string",
          "description": "The new job the candidate is applying for."
        },
        "company": {
          "type": "string",
          "description": "The candidate's client company."
        },
        "ip_address": {
          "type": "string",
          "description": "The IP address of the candidate when on the candidate dash page."
        },
        "response_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate responded to the referee request email"
        },
        "questionnairesNum": {
          "type": "integer",
          "description": "The questionnaire num of the candidate."
        },
        "number_of_references_required": {
          "type": "integer",
          "description": "The number of references you want to collect from the candidate before the success and thank-you emails are sent and the candidate is considered completed."
        },
        "maximum_number_of_references": {
          "type": "integer",
          "description": "The maximum number of references that can be completed for a candidate. This value must be higher than the number of references required."
        },
        "sent": {
          "type": "integer",
          "description": "Has the candidate been sent a referee request email."
        },
        "responded": {
          "type": "integer",
          "description": "Has the candidate responded to the referee request email."
        },
        "declined": {
          "type": "integer",
          "description": "Returns true if the candidate declined to leave referees."
        },
        "candidate_locked": {
          "type": "integer",
          "description": "If set, the recruiter will not be able to update the candidate via the Referoo UI and all update actions must happen via the API."
        },
        "custom_data": {
          "type": "string",
          "maxLength": 4000,
          "description": "Custom values stored against the candidate."
        },
        "brandsNum": {
          "type": "integer",
          "description": "The ID of the brand that is linked to candidate (This will be null if the candidate does not have a brand)."
        },
        "teamsNum": {
          "type": "integer",
          "description": "The ID of the team that is linked to candidate (This will be null if the candidate does not have a team)."
        },
        "archived": {
          "type": "integer",
          "description": "If set to `1` then the candidate is archived', if set `0` the candidate is active."
        },
        "candidate_dash_url": {
          "type": "string",
          "description": "The URL a candidate can follow to access this candidate dash and complete their checks."
        },
        "candidate_detail_url": {
          "type": "string",
          "description": "The URL a recruiter can follow to access the details of this candidate in Referoo."
        },
        "checks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Check-read"
          }
        }
      }
    },
    "Candidate-read-detail": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The candidate ID."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was created."
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was last updated."
        },
        "unique_id": {
          "type": "string",
          "description": "The candidate's unique ID."
        },
        "first_name": {
          "type": "string",
          "description": "The candidate's first name."
        },
        "last_name": {
          "type": "string",
          "description": "The candidate's last name."
        },
        "email": {
          "type": "string",
          "description": "The candidate's email."
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the referee."
        },
        "phone_country": {
          "$ref": "#/definitions/Phone-country"
        },
        "notes": {
          "type": "string",
          "description": "Notes on the Candidate."
        },
        "job": {
          "type": "string",
          "description": "The new job the candidate is applying for."
        },
        "company": {
          "type": "string",
          "description": "The candidate's client company."
        },
        "ip_address": {
          "type": "string",
          "description": "The IP address of the candidate when on the candidate dash page."
        },
        "response_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate responded to the referee request email."
        },
        "questionnairesNum": {
          "type": "integer",
          "description": "The Questionnaire num of the candidate."
        },
        "number_of_references_required": {
          "type": "integer",
          "description": "The number of references you want to collect from the candidate before the success and thank-you emails are sent and the candidate is considered completed."
        },
        "maximum_number_of_references": {
          "type": "integer",
          "description": "The maximum number of references that can be completed for a candidate. This value must be higher than the number of references required."
        },
        "sent": {
          "type": "integer",
          "description": "Has the candidate been sent a referee request email."
        },
        "responded": {
          "type": "integer",
          "description": "Has the candidate responded to the referee request email."
        },
        "declined": {
          "type": "integer",
          "description": "Returns true if the candidate declined to leave referees."
        },
        "candidate_locked": {
          "type": "integer",
          "description": "If set, the recruiter will not be able to update the candidate via the Referoo UI and all update actions must happen via the API."
        },
        "custom_data": {
          "type": "string",
          "maxLength": 4000,
          "description": "Custom values stored against the candidate."
        },
        "brandsNum": {
          "type": "integer",
          "description": "The ID of the brand that is linked to candidate (This will be null if the candidate does not have a brand)."
        },
        "teamsNum": {
          "type": "integer",
          "description": "The ID of the team that is linked to candidate (This will be null if the candidate does not have a team)."
        },
        "archived": {
          "type": "integer",
          "description": "If set to `1` then the candidate is archived', if set `0` the candidate is active."
        },
        "candidate_dash_url": {
          "type": "string",
          "description": "The URL a candidate can follow to access this candidate dash and complete their checks."
        },
        "candidate_detail_url": {
          "type": "string",
          "description": "The URL a recruiter can follow to access the details of this candidate in Referoo."
        },
        "checks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Check-read"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "An array containing any warnings for the candidate that the recruiter should be aware of. For example, if the candidate and referee's IP address match."
          }
        }
      }
    },
    "Candidate-write": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "The candidate's first name."
        },
        "last_name": {
          "type": "string",
          "description": "The candidate's last name."
        },
        "email": {
          "type": "string",
          "description": "The candidate's email."
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the referee. _NOTE:_ If the user has the SMS system enabled on their account, its recommend you pass a phone_country code as well."
        },
        "phone_country": {
          "$ref": "#/definitions/Phone-country"
        },
        "notes": {
          "type": "string",
          "description": "Notes on the candidate."
        },
        "job": {
          "type": "string",
          "description": "The new job the candidate is applying for."
        },
        "company": {
          "type": "string",
          "description": "The candidate's client company."
        },
        "ip_address": {
          "type": "string",
          "description": "The IP address of the candidate. This is checked against the referee IP address to see if they match."
        },
        "recruiter_email": {
          "type": "string",
          "description": "You can enter the email address of a linked parent or child account to create the candidate under that user instead. If an invalid email address is entered an error will be returned."
        },
        "questionnairesNum": {
          "type": "integer",
          "description": "The questionnaire num of the candidate."
        },
        "packagesNum": {
          "type": "integer",
          "description": "If you wish to create a candidate using a package, pass the package num here. If passing a package, you cannot pass a questionnaireNum in the request for the candidate. The following fields will only be overwritten with package data if they're left blank when creating a candidate - company, job, location, number_of_references_required, brandsNum."
        },
        "brandsNum": {
          "type": "integer",
          "description": "The ID of the brand that is linked to candidate. An error will be returned if the user does not have access to the brand system."
        },
        "teamsNum": {
          "type": "integer",
          "description": "The ID of the team that is linked to candidate (This will be null if the candidate does not have a team)."
        },
        "number_of_references_required": {
          "type": "integer",
          "description": "The number of references you want to collect from the candidate before the success and thank-you emails are sent and the candidate is considered completed."
        },
        "maximum_number_of_references": {
          "type": "integer",
          "description": "The maximum number of references that can be completed for a candidate. This value must be higher than the number of references required."
        },
        "do_not_contact": {
          "type": "integer",
          "description": "If set, Referoo will not send the candidate or referees ANY emails as they go through the reference process. All settings in the communcations system will be ignore."
        },
        "do_not_contact_recruiter": {
          "type": "integer",
          "description": "If set, Referoo will not send the recruiter any update emails as the candidate's references are processed."
        },
        "candidate_locked": {
          "type": "integer",
          "description": "If set, the recruiter will not be able to update the candidate via the Referoo UI and all update actions must happen via the API."
        },
        "custom_data": {
          "type": "string",
          "maxLength": 4000,
          "description": "This property allows you to store custom values against the candidate."
        },
        "archived": {
          "type": "integer",
          "description": "If set to `1` then the candidate is will be archived, if set `0` the candidate will be made active. NOTE - You cannot create a candidate in the status of archived."
        },
        "skip_initial_contact": {
          "type": "integer",
          "description": "If set to `1` then the `one_click_reference_candidate` will be ignored and the candidate will not be sent the inital email. If set to `0` or omitted, default contact settings will be followed."
        }
      },
      "required": [
        "first_name",
        "last_name",
        "email",
        "questionnairesNum",
        "number_of_references_required"
      ]
    },
    "Questionnaire-read": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The questionnaire ID."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was created."
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was last updated."
        },
        "membersNum": {
          "type": "integer",
          "description": "The user num of the recruiter who created the questionnaire."
        },
        "title": {
          "type": "string",
          "description": "The name of the questionnaire."
        },
        "description": {
          "type": "string",
          "description": "The description of the questionnaire."
        }
      }
    },
    "Questionnaire-detail": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The questionnaire ID."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was created."
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was last updated."
        },
        "membersNum": {
          "type": "integer",
          "description": "The user num of the recruiter who created the questionnaire."
        },
        "title": {
          "type": "string",
          "description": "The name of the questionnaire."
        },
        "description": {
          "type": "string",
          "description": "The description of the questionnaire."
        },
        "questions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Question-read"
          }
        }
      }
    },
    "Referee-quick-write": {
      "type": "object",
      "properties": {
        "candidate": {
          "$ref": "#/definitions/Candidate-write"
        },
        "referees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Referee-write-no-contact"
          }
        }
      }
    },
    "Referee-quick-read": {
      "type": "object",
      "properties": {
        "candidate": {
          "$ref": "#/definitions/Candidate-read"
        },
        "referees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Referee-read-list"
          }
        }
      }
    },
    "Referee-read-list": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The referee ID."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was created."
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was last updated."
        },
        "unique_id": {
          "type": "string",
          "description": "The unique ID of the referee."
        },
        "name": {
          "type": "string",
          "description": "The name of the referee."
        },
        "email": {
          "type": "string",
          "description": "The email address of the referee."
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the referee."
        },
        "phone_country": {
          "$ref": "#/definitions/Phone-country"
        },
        "relationship": {
          "type": "string",
          "description": "The relationship of the referee to the candidate."
        },
        "notes": {
          "type": "string",
          "description": "Any notes added against the referee by a recruiter."
        },
        "job_title": {
          "type": "string",
          "description": "The job title of the referee."
        },
        "candidate_job_title": {
          "type": "string",
          "description": "The job title the candidate had while working with the referee."
        },
        "company": {
          "type": "string",
          "description": "The company the referee and candidate worked at together."
        },
        "start": {
          "type": "string",
          "description": "When the candidate started working with the referee."
        },
        "end": {
          "type": "string",
          "description": "When the candidate stopped working with the referee."
        },
        "ip_address": {
          "type": "string",
          "description": "The IP address of the referee (if they completed their reference online)."
        },
        "questionnairesNum": {
          "type": "integer",
          "description": "The Questionnaire used for this reference."
        },
        "membersNum": {
          "type": "integer",
          "description": "The account the referee is linked to."
        },
        "candidatesNum": {
          "type": "integer",
          "description": "The candidate the referee is linked to."
        },
        "invite_sent_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date an invite was sent to the referee."
        },
        "invite_sent": {
          "type": "integer",
          "description": "Set to 1 if an email invite has been sent to the referee."
        },
        "cancelled_reminders": {
          "type": "integer",
          "description": "Set to 1 if the referee requested not to receive email reminders."
        },
        "reference_completed": {
          "type": "integer",
          "description": "Set to one if the referee has completed their reference and its ready to download."
        },
        "response_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date the referee completed their reference."
        },
        "custom_data": {
          "type": "string",
          "maxLength": 4000,
          "description": "This property allows you to store custom values against the referee."
        },
        "referee_dash_url": {
          "type": "string",
          "description": "The URL that a referee can follow to complete their background checks."
        },
        "reference_report_urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Report-read"
          }
        },
        "checks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Check-read"
          }
        }
      }
    },
    "Referee-read-detail": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The referee ID."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was created."
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was last updated."
        },
        "unique_id": {
          "type": "string",
          "description": "The unique ID of the referee."
        },
        "name": {
          "type": "string",
          "description": "The name of the referee."
        },
        "email": {
          "type": "string",
          "description": "The email address of the referee."
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the referee."
        },
        "phone_country": {
          "$ref": "#/definitions/Phone-country"
        },
        "relationship": {
          "type": "string",
          "description": "The relationship of the referee to the candidate."
        },
        "notes": {
          "type": "string",
          "description": "Any notes added against the referee by a recruiter."
        },
        "job_title": {
          "type": "string",
          "description": "The job title of the referee."
        },
        "candidate_job_title": {
          "type": "string",
          "description": "The job title the candidate had while working with the referee."
        },
        "company": {
          "type": "string",
          "description": "The company the referee and candidate worked at together."
        },
        "start": {
          "type": "string",
          "description": "When the candidate started working with the referee."
        },
        "end": {
          "type": "string",
          "description": "When the candidate stopped working with the referee."
        },
        "ip_address": {
          "type": "string",
          "description": "The IP address of the referee (if they completed their reference online)."
        },
        "questionnairesNum": {
          "type": "integer",
          "description": "The Questionnaire used for this reference."
        },
        "membersNum": {
          "type": "integer",
          "description": "The account the referee is linked to."
        },
        "candidatesNum": {
          "type": "integer",
          "description": "The candidate the referee is linked to."
        },
        "invite_sent_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date an invite was sent to the referee."
        },
        "invite_sent": {
          "type": "integer",
          "description": "Set to 1 if an email invite has been sent to the referee."
        },
        "cancelled_reminders": {
          "type": "integer",
          "description": "Set to one if the referee requested not to receive email reminders."
        },
        "reference_completed": {
          "type": "integer",
          "description": "Set to one if the referee has completed their reference and its ready to download."
        },
        "response_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date the referee completed their reference."
        },
        "custom_data": {
          "type": "string",
          "maxLength": 4000,
          "description": "This property allows you to store custom values against the referee."
        },
        "ip_matches_candidate": {
          "type": "boolean",
          "format": "date-time",
          "description": "The date the referee completed their reference."
        },
        "marketing_opt_in": {
          "type": "boolean",
          "description": "Set to true if the referee selected to opt in for marketing."
        },
        "hiring_opt_in": {
          "type": "boolean",
          "description": "Set to true if the referee selected to opt in for hiring."
        },
        "bd_opt_in": {
          "type": "boolean",
          "description": "Set to true if the referee selected to opt in for BD."
        },
        "referee_dash_url": {
          "type": "string",
          "description": "The URL that a referee can follow to complete their background checks."
        },
        "checks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Check-read"
          }
        },
        "reference_report_urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Report-read"
          }
        }
      }
    },
    "Referee-write-no-contact": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the referee."
        },
        "email": {
          "type": "string",
          "description": "The email address of the referee. *Note* This field is mandatory if the recruiter does not have the SMS feature setup on their account. When using the Quick Referee endpoint, if the recruiter does have the SMS feature and the email field is left blank, an SMS will be sent to the referee instead."
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the referee. _NOTE:_ If the user has the SMS system enabled on their account, its recommend you pass a phone_country code as well."
        },
        "phone_country": {
          "$ref": "#/definitions/Phone-country"
        },
        "relationship": {
          "type": "string",
          "description": "The relationship of the referee to the candidate."
        },
        "notes": {
          "type": "string",
          "description": "Any notes added against the referee by a recruiter."
        },
        "job_title": {
          "type": "string",
          "description": "The job title of the referee."
        },
        "candidate_job_title": {
          "type": "string",
          "description": "The job title the candidate had while working with the referee."
        },
        "company": {
          "type": "string",
          "description": "The company the referee and candidate worked at together."
        },
        "start": {
          "type": "string",
          "description": "When the candidate started working with the referee."
        },
        "end": {
          "type": "string",
          "description": "When the candidate stopped working with the referee."
        },
        "ip_address": {
          "type": "string",
          "description": "The IP address of the referee (if they completed their reference online)."
        },
        "recruiter_email": {
          "type": "string",
          "description": "You can enter the email address of a linked parent or child account to create the referee under that user instead. If an invalid email address is entered an error will be returned."
        },
        "questionnairesNum": {
          "type": "integer",
          "description": "The Questionnaire used for this reference."
        },
        "custom_data": {
          "type": "string",
          "maxLength": 4000,
          "description": "This property allows you to store custom values against the referee."
        },
        "skip_initial_contact": {
          "type": "integer",
          "description": "If set to `1` then the referee will not be sent the inital reference request email. If set to `0` or omitted, default contact settings on the candidate will be followed."
        }
      },
      "required": [
        "name",
        "email",
        "relationship"
      ]
    },
    "Referee-write": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the referee."
        },
        "email": {
          "type": "string",
          "description": "The email address of the referee. *Note* This field is mandatory if the recruiter does not have the SMS feature setup on their account. When using the Quick Referee endpoint, if the recruiter does have the SMS feature and the email field is left blank, an SMS will be sent to the referee instead."
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the referee. _NOTE:_ If the user has the SMS system enabled on their account, its recommend you pass a phone_country code as well."
        },
        "phone_country": {
          "$ref": "#/definitions/Phone-country"
        },
        "relationship": {
          "type": "string",
          "description": "The relationship of the referee to the candidate."
        },
        "notes": {
          "type": "string",
          "description": "Any notes added against the referee by a recruiter."
        },
        "job_title": {
          "type": "string",
          "description": "The job title of the referee."
        },
        "candidate_job_title": {
          "type": "string",
          "description": "The job title the candidate had while working with the referee."
        },
        "company": {
          "type": "string",
          "description": "The company the referee and candidate worked at together."
        },
        "start": {
          "type": "string",
          "description": "When the candidate started working with the referee."
        },
        "end": {
          "type": "string",
          "description": "When the candidate stopped working with the referee."
        },
        "ip_address": {
          "type": "string",
          "description": "The IP address of the referee (if they completed their reference online)."
        },
        "recruiter_email": {
          "type": "string",
          "description": "You can enter the email address of a linked parent or child account to create the referee under that user instead. If an invalid email address is entered an error will be returned."
        },
        "questionnairesNum": {
          "type": "integer",
          "description": "The Questionnaire used for this reference."
        },
        "custom_data": {
          "type": "string",
          "maxLength": 4000,
          "description": "This property allows you to store custom values against the referee."
        }
      },
      "required": [
        "name",
        "email",
        "relationship"
      ]
    },
    "Account-read": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The child account ID."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was created."
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was last updated."
        },
        "first_name": {
          "type": "string",
          "description": "The first name of the child account user."
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the child account user."
        },
        "company": {
          "type": "string",
          "description": "The company of the child account user."
        },
        "position": {
          "type": "string",
          "description": "The position of the child account user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the child account user."
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the child account user."
        },
        "work_phone": {
          "type": "string",
          "description": "The work phone number of the child account user."
        },
        "office_phone": {
          "type": "string",
          "description": "The office phone number of the child account user."
        },
        "website": {
          "type": "string",
          "description": "The personal website of the sub account."
        }
      }
    },
    "Account-write": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "The first name of the child account user."
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the child account user."
        },
        "company": {
          "type": "string",
          "description": "The company of the child account user."
        },
        "position": {
          "type": "string",
          "description": "The position of the child account user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the child account user."
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the child account user."
        },
        "work_phone": {
          "type": "string",
          "description": "The work phone number of the child account user."
        },
        "office_phone": {
          "type": "string",
          "description": "The office phone number of the child account user."
        },
        "password": {
          "type": "string",
          "description": "The password will be automatically validated and encrypted on save."
        },
        "website": {
          "type": "string",
          "description": "The website of the child account."
        }
      },
      "required": [
        "first_name",
        "last_name",
        "email",
        "phone",
        "password"
      ]
    },
    "User-read": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "The first name of the child account user."
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the child account user."
        },
        "company": {
          "type": "string",
          "description": "The company of the child account user."
        },
        "position": {
          "type": "string",
          "description": "The position of the child account user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the child account user."
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the child account user."
        },
        "work_phone": {
          "type": "string",
          "description": "The work phone number of the child account user."
        },
        "office_phone": {
          "type": "string",
          "description": "The office phone number of the child account user."
        },
        "has_sms_feature": {
          "type": "boolean",
          "description": "Returns true if the user has access to the SMS system."
        }
      }
    },
    "Brand-read": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the brand."
        },
        "website": {
          "type": "string",
          "description": "The website of the brand."
        },
        "custom_username": {
          "type": "string",
          "description": "The custom username of the brand. This will be the username that emails from Referoo appear to come from when a candidate is linked to a this brand."
        },
        "primary_colour": {
          "type": "string",
          "description": "The hex code for the primary color of the brand."
        },
        "secondary_colour": {
          "type": "string",
          "description": "The hex code for the second color of the brand."
        },
        "third_colour": {
          "type": "string",
          "description": "The hex code for the tertiary color of the brand."
        }
      }
    },
    "Package-read": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The package record number."
        },
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_id": {
          "type": "string",
          "description": "The package ID."
        }
      }
    },
    "Team-read": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The team record number."
        },
        "name": {
          "type": "string",
          "description": "The name of the team."
        },
        "label": {
          "type": "string",
          "description": "The display label of the team."
        },
        "external_id": {
          "type": "string",
          "description": "An external identifier for the team."
        },
        "brands": {
          "type": "array",
          "description": "An array of brand IDs associated with the team.",
          "items": {
            "type": "integer"
          },
          "example": [
            1,
            2,
            3
          ]
        }
      }
    },
    "Question-read": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The id of the question."
        },
        "title": {
          "type": "string",
          "description": "The question the user will be asked."
        },
        "question_type": {
          "type": "string",
          "description": "Returned options:<br> `textarea` - Text Area<br> `text` - Text<br> `1to5` - Rate from 1 to 5<br> `question`-batch - Batch of Questions<br> `divider` - Divider<br> `single` - Multiple choices - Select one answer<br> `multiple` - Multiple choices - Select multiple answers."
        }
      }
    },
    "Check-read": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The check record number."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the candidate was created."
        },
        "check_type_id": {
          "type": "integer",
          "description": "The check type ID."
        },
        "check_type_name": {
          "type": "string",
          "description": "The check type name."
        },
        "check_provider_name": {
          "type": "string",
          "description": "The check provider name."
        },
        "status": {
          "type": "string",
          "description": "The current status of the check."
        },
        "completion_date": {
          "type": "string",
          "format": "date-time",
          "description": "The data and time the check was completed."
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Validation-Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "object"
        }
      }
    },
    "Candidate-Comms-Log": {
      "type": "object",
      "properties": {
        "send_date": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the message was sent."
        },
        "send_method": {
          "type": "string",
          "description": "Will return either `Email` or `SMS` depending on how the message was sent."
        },
        "recipient_type": {
          "type": "string",
          "description": "Was the message sent to a `Candidate` or `Referee`. We don't log any messages sent to recruiters."
        },
        "sent_to": {
          "type": "string",
          "description": "The phone number or email address the message was sent to."
        },
        "sent_from": {
          "type": "string",
          "description": "the phone number or email address the message was sent from."
        },
        "message_template": {
          "type": "string",
          "description": "A short description of the type of message sent. The same descriptions are used in the Referoo app."
        },
        "delivered": {
          "type": "boolean",
          "description": "Only applicable for email. Was the message delivered successfully."
        },
        "opened": {
          "type": "boolean",
          "description": "Only applicable for email. Was the message opened by the user it was delivered to."
        },
        "blocked": {
          "type": "boolean",
          "description": "Only applicable for email. Was the email blocked from being delivered to the user."
        },
        "bounced": {
          "type": "boolean",
          "description": "Only applicable for email. This will be set to true if the email bounced and was not able to be delivered."
        },
        "dispatched": {
          "type": "boolean",
          "description": "Only applicable for email. Has the email been sent from our email servers."
        },
        "marked_as_spam": {
          "type": "boolean",
          "description": "This will be set to true if the contact call ended up being marked a spam. Only works with email."
        }
      }
    },
    "Candidate-Actions-Log": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The log id"
        },
        "createdDate": {
          "type": "string",
          "description": "The date and time the log was created."
        },
        "createdByUserNum": {
          "type": "integer",
          "description": "The user id that initiated the create."
        },
        "parent_membersNum": {
          "type": "integer",
          "description": "The logs parent member id."
        },
        "owner_membersNum": {
          "type": "integer",
          "description": "The logs owners member id."
        },
        "action_membersNum": {
          "type": "integer",
          "description": "The action member id."
        },
        "candidatesNum": {
          "type": "integer",
          "description": "The name of the brand."
        },
        "refereesNum": {
          "type": "integer",
          "description": "The name of the brand."
        },
        "action_date": {
          "type": "string",
          "description": "The action date."
        },
        "action_table": {
          "type": "string",
          "description": "The table/object."
        },
        "action_source": {
          "type": "string",
          "description": "The source of the action."
        },
        "action_type": {
          "type": "string",
          "description": "The type of the action."
        },
        "action_page": {
          "type": "string",
          "description": "The page the action occured on."
        },
        "change_data": {
          "type": "object",
          "properties": {
            "custom_fields": {
              "type": "string",
              "description": "A json array containing the changes that were made. The label will be the field and the value will be the updated value."
            }
          }
        }
      }
    },
    "Report-read": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "An array containing a list URLs that a recruiter can use to download the completed reports."
        }
      }
    },
    "Phone-country": {
      "type": "string",
      "description": "The two letter short code for the phone number's country. *NOTE:* This field is only required if your clients are planning to use the SMS feature in Referoo."
    }
  },
  "paths": {
    "/candidates": {
      "get": {
        "tags": [
          "Candidates"
        ],
        "summary": "List candidates",
        "description": "This endpoint will return a list of candidates linked to your account in order of creation date. A maximum of 50 can be returned at a time, 20 are returned by default.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/EmailParam"
          },
          {
            "$ref": "#/parameters/OffsetParam"
          },
          {
            "$ref": "#/parameters/LimitParam"
          },
          {
            "$ref": "#/parameters/ArchivedParam"
          },
          {
            "$ref": "#/parameters/CreatedGteParam"
          },
          {
            "$ref": "#/parameters/CreatedLteParam"
          },
          {
            "$ref": "#/parameters/UpdatedGteParam"
          },
          {
            "$ref": "#/parameters/UpdatedLteParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidates was returned successfully.",
            "schema": {
              "$ref": "#/definitions/Candidate-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ],
        "operationId": "ListCandidates"
      }
    },
    "/candidate": {
      "post": {
        "tags": [
          "Candidates"
        ],
        "summary": "Create a candidate",
        "description": "This endpoint will create a candidate and add them to Referoo. The candidate will be contacted immediately if they have 'Automatically send requests when candidate is added' enabled on their account.",
        "operationId": "CreateCandidate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "All of the variables below are mandatory when creating a candidate.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Candidate-write"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Candidate was successfully created.",
            "schema": {
              "$ref": "#/definitions/Candidate-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "write"
            ]
          }
        ]
      }
    },
    "/candidate/{num}": {
      "get": {
        "tags": [
          "Candidates"
        ],
        "summary": "Retrieve a candidate",
        "description": "This API endpoint will return a json object containing a single candidate, based on the num provided in the API call.",
        "operationId": "GetCandidateById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-CandidateParam"
          },
          {
            "$ref": "#/parameters/ArchivedParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate was successfully found.",
            "schema": {
              "$ref": "#/definitions/Candidate-read-detail"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Candidates"
        ],
        "summary": "Update a candidate",
        "description": "This API end point will update a candidate based on the record num passed in the call. Pass a JSON object containing the variables you wish to update.",
        "operationId": "UpdateCandidateById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-CandidateParam"
          },
          {
            "in": "body",
            "name": "body",
            "description": "You do not need to update all the variables, only pass those you wish to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Candidate-write"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate was successfully updated.",
            "schema": {
              "$ref": "#/definitions/Candidate-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "write"
            ]
          }
        ]
      }
    },
    "/candidate/{num}/referees": {
      "get": {
        "tags": [
          "Candidates",
          "Referees"
        ],
        "summary": "Retrieve a candidate's referees",
        "description": "This API endpoint will return a json object containing all of the referees a candidate has based on the record num provided in the API call.",
        "operationId": "GetCandidatesRefereesById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-CandidateParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate referee's were successfully found.",
            "schema": {
              "$ref": "#/definitions/Referee-read-detail"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ]
      }
    },
    "/candidate/{num}/email": {
      "put": {
        "tags": [
          "Candidates"
        ],
        "summary": "Send a candidate a reference request email",
        "description": "This API endpoint will send the candidate a reference request email.",
        "operationId": "EmailCandidateRequestById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-CandidateParam"
          }
        ],
        "responses": {
          "204": {
            "description": "The candidate was successfully sent a candidate request email."
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "write"
            ]
          }
        ]
      }
    },
    "/candidate/{num}/logs/comms": {
      "get": {
        "tags": [
          "Candidates"
        ],
        "summary": "Retrieve a candidates comms logs",
        "description": "Return a json object containing comms logs related to a candidate.",
        "operationId": "CandidateCommsLogsId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-CandidateParam"
          }
        ],
        "responses": {
          "204": {
            "description": "The candidate's logs were successfully found.",
            "schema": {
              "$ref": "#/definitions/Candidate-Comms-Log"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "write"
            ]
          }
        ]
      }
    },
    "/candidate/{num}/logs/actions": {
      "get": {
        "tags": [
          "Candidates"
        ],
        "summary": "Retrieve a candidates actions logs",
        "description": "This API endpoint will return a json object containing action logs related to a candidate.",
        "operationId": "CandidateActionsLogsId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-CandidateParam"
          }
        ],
        "responses": {
          "204": {
            "description": "The candidate's logs were successfully found.",
            "schema": {
              "$ref": "#/definitions/Candidate-Actions-Log"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "write"
            ]
          }
        ]
      }
    },
    "/candidate/{num}/checks": {
      "get": {
        "tags": [
          "Candidates"
        ],
        "summary": "Retrieve a candidate's checks",
        "description": "This API endpoint will return a json object containing check records related to a candidate.",
        "operationId": "GetCandidateChecksById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-CandidateParam"
          }
        ],
        "responses": {
          "204": {
            "description": "The candidate's check records where successfully found.",
            "schema": {
              "$ref": "#/definitions/Check-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ]
      }
    },
    "/questionnaires": {
      "get": {
        "tags": [
          "Questionnaires"
        ],
        "summary": "List Questionnaires",
        "description": "This endpoint will return an array of questionnaires linked to this account in order of creation date. Only public or published questionnaires will be returned. Draft items are not accessible.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/OffsetParam"
          },
          {
            "$ref": "#/parameters/LimitParam"
          },
          {
            "$ref": "#/parameters/CreatedGteParam"
          },
          {
            "$ref": "#/parameters/CreatedLteParam"
          },
          {
            "$ref": "#/parameters/UpdatedGteParam"
          },
          {
            "$ref": "#/parameters/UpdatedLteParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of questionnaires was successfully returned.",
            "schema": {
              "$ref": "#/definitions/Questionnaire-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ],
        "operationId": "ListQuestionnaires"
      }
    },
    "/questionnaires/{num}": {
      "get": {
        "tags": [
          "Questionnaires"
        ],
        "summary": "Retrieve a single questionnaire",
        "description": "This API endpoint will return a json object containing a single candidate, based on the num provided in the API call.",
        "operationId": "GetQuestionnaireById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "x-ms-summary": "Questionnaire ID",
            "in": "path",
            "x-ms-url-encoding": "single",
            "name": "num",
            "description": "Numeric ID of the questionnaire.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Questionnaire was successfully found.",
            "schema": {
              "$ref": "#/definitions/Questionnaire-detail"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ]
      }
    },
    "/referees": {
      "get": {
        "tags": [
          "Referees"
        ],
        "summary": "Return a list of referees",
        "description": "This endpoint will return a list of referee's linked to your account in order of creation date.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/OffsetParam"
          },
          {
            "$ref": "#/parameters/LimitParam"
          },
          {
            "$ref": "#/parameters/CreatedGteParam"
          },
          {
            "$ref": "#/parameters/CreatedLteParam"
          },
          {
            "$ref": "#/parameters/UpdatedGteParam"
          },
          {
            "$ref": "#/parameters/UpdatedLteParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of referees was successfully returned.",
            "schema": {
              "$ref": "#/definitions/Referee-read-list"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ],
        "operationId": "ListReferees"
      }
    },
    "/candidate/{num}/referee": {
      "post": {
        "tags": [
          "Referees"
        ],
        "summary": "Creates a referee",
        "description": "This endpoint will create a new referee under the candidate num that was passed in the URL.",
        "operationId": "CreateReferee",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-CandidateParam"
          },
          {
            "in": "body",
            "name": "body",
            "description": "All of the variables below need to be passed to create a referee.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Referee-write"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The referee was successfully created.",
            "schema": {
              "$ref": "#/definitions/Referee-read-detail"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "write"
            ]
          }
        ]
      }
    },
    "/referee/{num}": {
      "get": {
        "tags": [
          "Referees"
        ],
        "summary": "Retrieve a single referee",
        "description": "This API endpoint will return a json object containing a single candidate, based on the ID provided in the API call.",
        "operationId": "GetRefereeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-RefereeParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The referee was successfully found.",
            "schema": {
              "$ref": "#/definitions/Referee-read-detail"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Referees"
        ],
        "summary": "Deletes a referee",
        "description": "This endpoint will permanently delete a referee, it's log records and reference (if one was created).",
        "operationId": "DeleteRefereeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-RefereeParam"
          }
        ],
        "responses": {
          "204": {
            "description": "The referee was successfully deleted."
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Referees"
        ],
        "summary": "Updates a referee",
        "description": "This API end point will update a candidate based on the ID passed in the call. Pass a JSON object containing the variables you wish to update.",
        "operationId": "UpdateRefereeById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-RefereeParam"
          },
          {
            "in": "body",
            "name": "body",
            "description": "You do not need to pass all the variables, only pass those you wish to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Referee-write-no-contact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Referee was successfully updated.",
            "schema": {
              "$ref": "#/definitions/Referee-read-list"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "write"
            ]
          }
        ]
      }
    },
    "/referee/quick": {
      "post": {
        "tags": [
          "Referees",
          "Candidates"
        ],
        "summary": "Creates a candidate with a multiple referees in one go",
        "description": "This endpoint will create a new candidate and create a new referee for them with one call. You can add up to 5 referee's per candidate. The referee will also be sent a reference request email or SMS.",
        "operationId": "CreateRefereeQuick",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "All of the variables below need to be passed to create a candidate and referee.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Referee-quick-write"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Candidate and Referee were successfully created.",
            "schema": {
              "$ref": "#/definitions/Referee-quick-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "write"
            ]
          }
        ]
      }
    },
    "/referee/{num}/email": {
      "put": {
        "tags": [
          "Referees"
        ],
        "summary": "Send a referee a reference request email",
        "description": "This API endpoint will send the referee a reference request email.",
        "operationId": "EmailRefereeRequestById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-RefereeParam"
          }
        ],
        "responses": {
          "204": {
            "description": "The referee was successfully sent a referee request email."
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "write"
            ]
          }
        ]
      }
    },
    "/referee/{num}/reference": {
      "get": {
        "tags": [
          "Referees"
        ],
        "summary": "Download the referee's reference",
        "description": "This API endpoint will initiate the download of the referee's reference in PDF format.",
        "operationId": "DownloadReportByRefereeId",
        "produces": [
          "application/pdf",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-RefereeParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Report found and download has started.",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "write"
            ]
          }
        ]
      }
    },
    "/referee/{num}/answers": {
      "get": {
        "tags": [
          "Referees"
        ],
        "summary": "Retrieves just the referee's reference answers",
        "description": "This API endpoint will return the answers provided by a referee in their reference.",
        "operationId": "GetAnswersForRefereeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-RefereeParam"
          }
        ],
        "responses": {
          "202": {
            "description": "Referee updated, twilio sms missing when sms comms enabled.",
            "schema": {
              "$ref": "#/definitions/Answers-response"
            }
          },
          "204": {
            "description": "Referee updated.",
            "schema": {
              "$ref": "#/definitions/Answers-response"
            }
          },
          "403": {
            "$ref": "#/responses/NotFound"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "write"
            ]
          }
        ]
      }
    },
    "/referee/{num}/checks": {
      "get": {
        "tags": [
          "Referees"
        ],
        "summary": "Retrieve a referee's checks",
        "description": "This API endpoint will return a json object containing check records related to a referee.",
        "operationId": "GetRefereeChecksById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-RefereeParam"
          }
        ],
        "responses": {
          "204": {
            "description": "The referee's check records where successfully found.",
            "schema": {
              "$ref": "#/definitions/Check-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ]
      }
    },
    "/referee/{num}/send-comms": {
      "post": {
        "tags": [
          "Referees"
        ],
        "summary": "Trigger sending a referees sms and or email comms",
        "description": "This API endpoint will update a referee so that their comms are sent.",
        "operationId": "SendRefereeCommsID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-RefereeParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Report found and download has started.",
            "schema": {
              "$ref": "#/definitions/Answers-response"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/packages": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "List Packages",
        "description": "This endpoint will return an array of packages linked to this account.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/OffsetParam"
          },
          {
            "$ref": "#/parameters/LimitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of packages was successfully returned.",
            "schema": {
              "$ref": "#/definitions/Package-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ],
        "operationId": "ListPackages"
      }
    },
    "/packages/{num}": {
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "Return a single package",
        "description": "This endpoint will return a single package linked to this account.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "x-ms-summary": "Package ID",
            "in": "path",
            "x-ms-url-encoding": "single",
            "name": "num",
            "description": "Numeric ID of the package.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Package was successfully returned.",
            "schema": {
              "$ref": "#/definitions/Package-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ],
        "operationId": "GetPackageById"
      }
    },
    "/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "List Teams",
        "description": "This endpoint will return an array of teams linked to this account.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/OffsetParam"
          },
          {
            "$ref": "#/parameters/LimitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of teams was successfully returned.",
            "schema": {
              "$ref": "#/definitions/Team-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ],
        "operationId": "ListTeams"
      }
    },
    "/teams/{num}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Return a single team",
        "description": "This endpoint will return a single team linked to this account.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "x-ms-summary": "Team ID",
            "in": "path",
            "x-ms-url-encoding": "single",
            "name": "num",
            "description": "Numeric ID of the team.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Team was successfully returned.",
            "schema": {
              "$ref": "#/definitions/Team-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ],
        "operationId": "GetTeamById"
      }
    },
    "/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Return a list of child accounts",
        "description": "This endpoint will return a list of accounts linked to the recruiters parent account in order of last name then first name. **Note:** Only a parent account can access this endpoint.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/OffsetParam"
          },
          {
            "$ref": "#/parameters/LimitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "List of child accounts was successfully found.",
            "schema": {
              "$ref": "#/definitions/Account-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ],
        "operationId": "ListAccounts"
      }
    },
    "/account": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create a new account",
        "description": "This endpoint will create a new child account under the recruiter using the API.  **Note:** Only a parent account can access this endpoint.",
        "operationId": "CreateAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "All of the variables below need to be passed in JSON object to create a child account.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account-write"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Child account was successfully created."
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "write"
            ]
          }
        ]
      }
    },
    "/account/{num}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Retrieve a single child account",
        "description": "This API endpoint will return a json object containing a single account based on the ID provided in the API call.  **Note:** Only a parent account can access this endpoint.",
        "operationId": "GetAccountById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-AccountParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Referee was successfully found.",
            "schema": {
              "$ref": "#/definitions/Account-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Accounts"
        ],
        "summary": "Updates a child account",
        "description": "This API end point will update a child account based on the ID passed in the call. Pass a JSON object containing the variables you wish to update.  **Note:** Only a parent account can access this endpoint.",
        "operationId": "UpdateAccountById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Path-AccountParam"
          },
          {
            "in": "body",
            "name": "body",
            "description": "You do not need to include all the variables, only pass those you wish to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account-write"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Child account was successfully updated.",
            "schema": {
              "$ref": "#/definitions/Referee-read-list"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "write"
            ]
          }
        ]
      }
    },
    "/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Logged in users details",
        "description": "Returns the details of of the user who is currently connected to the API.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the details of the recruiter connected to the API.",
            "schema": {
              "$ref": "#/definitions/User-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ],
        "operationId": "GetLoggedInUserDetails"
      }
    },
    "/brands": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Returns the details of the brands that this recruiter has access to",
        "description": "Returns the name and other details of a brand that this recruiter has access to.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of brands that the user has access to. **Note:** You must have access to the brands system to be able to use this endpoint.",
            "schema": {
              "$ref": "#/definitions/Brand-read"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/ClientError"
          }
        },
        "security": [
          {
            "oauth2-auth": [
              "read"
            ]
          }
        ],
        "operationId": "ListBrands"
      }
    }
  },
  "parameters": {
    "OffsetParam": {
      "x-ms-summary": "Offset",
      "in": "query",
      "name": "offset",
      "description": "The number of items to skip before starting to collect the result set.",
      "type": "integer",
      "format": "int64"
    },
    "LimitParam": {
      "x-ms-summary": "Limit",
      "in": "query",
      "name": "limit",
      "description": "The numbers of items to return. Up to 50 items can be returned at a time, default is 25.",
      "type": "integer",
      "format": "int64"
    },
    "ArchivedParam": {
      "x-ms-summary": "Archived Filter",
      "in": "query",
      "name": "archived",
      "description": "If set to `1`, the archived items will be returned, if set to `0` un-archived items will be returned. If not included in the request un-archived items are returned by default.",
      "type": "integer",
      "format": "int64"
    },
    "EmailParam": {
      "x-ms-summary": "Email Filter",
      "in": "query",
      "name": "email",
      "description": "Filter the items using a full or partial email address.",
      "type": "string"
    },
    "Path-RefereeParam": {
      "x-ms-summary": "Referee ID Filter",
      "x-ms-url-encoding": "single",
      "in": "path",
      "name": "num",
      "description": "Numeric ID of the referee.",
      "required": true,
      "type": "integer",
      "format": "int64"
    },
    "Path-CandidateParam": {
      "x-ms-summary": "Candidate ID Filter",
      "x-ms-url-encoding": "single",
      "in": "path",
      "name": "num",
      "description": "Numeric ID of the candidate.",
      "required": true,
      "type": "integer",
      "format": "int64"
    },
    "Path-AccountParam": {
      "x-ms-summary": "Account ID Filter",
      "in": "path",
      "name": "num",
      "x-ms-url-encoding": "single",
      "description": "Numeric ID of the account.",
      "required": true,
      "type": "integer",
      "format": "int64"
    },
    "UpdatedLteParam": {
      "x-ms-summary": "Updated Filter (LTE)",
      "in": "query",
      "name": "updated:lte",
      "description": "Returns items updated on or before this date.",
      "type": "string",
      "pattern": "/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/"
    },
    "UpdatedGteParam": {
      "x-ms-summary": "Updated Filter (GTE)",
      "in": "query",
      "name": "updated:gte",
      "description": "Returns items updated on or after this date.",
      "type": "string",
      "pattern": "/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/"
    },
    "CreatedGteParam": {
      "x-ms-summary": "Created Filter (GTE)",
      "in": "query",
      "name": "created:gte",
      "description": "Returns items created on or after this date.",
      "type": "string",
      "pattern": "/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/"
    },
    "CreatedLteParam": {
      "x-ms-summary": "Created Filter (LTE)",
      "in": "query",
      "name": "created:lte",
      "description": "Returns items created on or before this date.",
      "type": "string",
      "pattern": "/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/"
    }
  },
  "responses": {
    "NotFound": {
      "description": "The specified resource was not found. For example, a record num was passed that does not exist in the database.",
      "schema": {
        "$ref": "#/definitions/Validation-Error"
      }
    },
    "Unauthorized": {
      "description": "You are not authorized to access this end point.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ClientError": {
      "description": "The request was understood, but there was an issue with it. The cause of the issue will be returned in the message variable.",
      "schema": {
        "$ref": "#/definitions/Validation-Error"
      }
    }
  },
  "tags": [
    {
      "name": "Candidates",
      "description": "Someone who you want to collect references for."
    },
    {
      "name": "Questionnaires",
      "description": "The questionnaires that are available for a referee to complete."
    },
    {
      "name": "Referees",
      "description": "Someone who will be completing a reference for a candidate."
    },
    {
      "name": "Accounts",
      "description": "A Referoo user can have sub accounts. These end points are only available to parent account users (user's who originally created the accounts)."
    },
    {
      "name": "Brands",
      "description": "Brands are used to separate recruiters into different silos and customize reports for specific situations. Brands could be used to create  offices, departments or brands that a group or recruiters could fall under."
    },
    {
      "name": "User",
      "description": "Actions related to the currently logged in recruiter."
    },
    {
      "name": "Packages",
      "description": "Actions related to the various packages available for each recruiter which set up candidates with pre-defined settings."
    },
    {
      "name": "Teams",
      "description": "Actions related to the teams a recruiter is associated with."
    }
  ]
}