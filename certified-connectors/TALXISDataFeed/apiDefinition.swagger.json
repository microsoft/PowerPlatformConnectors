{
  "definitions": {
    "DataFeed.Model.Entities.Holidays": {
      "type": "object",
      "properties": {
        "global": {
          "type": "boolean",
          "description": "Is this public holiday in every county (federal state)"
        },
        "fixed": {
          "type": "boolean",
          "description": "Is this public holiday every year on the same date"
        },
        "types": {
          "description": "Type of public holiday",
          "enum": [
            "Public",
            "Bank",
            "School",
            "Authorities",
            "Optional",
            "Observance"
          ],
          "type": "string"
        },
        "launchYear": {
          "description": "The launch year of the public holiday",
          "format": "int32",
          "type": "integer"
        },
        "date": {
          "description": "Date of the holiday",
          "format": "date",
          "type": "string"
        },
        "localName": {
          "type": "string",
          "description": "Local name of the holiday"
        },
        "name": {
          "type": "string",
          "description": "International name of the holiday"
        },
        "counties": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "countryCode": {
          "type": "string",
          "description": "Country code"
        }
      }
    },
    "GoogleApi.Entities.Places.Common.StructuredFormatting": {
      "type": "object",
      "properties": {
        "mainText": {
          "type": "string"
        },
        "mainTextMatchedSubstrings": {
          "items": {
            "$ref": "#/definitions/GoogleApi.Entities.Places.Common.MatchedSubstring"
          },
          "type": "array"
        },
        "secondaryText": {
          "type": "string"
        },
        "secondaryTextMatchedSubstrings": {
          "items": {
            "$ref": "#/definitions/GoogleApi.Entities.Places.Common.MatchedSubstring"
          },
          "type": "array"
        }
      }
    },
    "DataFeed.Model.Entities.Company.CompanyFinance": {
      "type": "object",
      "properties": {
        "revenue": {
          "type": "object",
          "properties": {
            "average": {
              "title": "Gross Revenue (Average)",
              "format": "double",
              "type": "number"
            },
            "upperBound": {
              "title": "Gross Revenue (Upper Bound)",
              "format": "double",
              "type": "number"
            },
            "lowerBound": {
              "title": "Gross Revenue (Lower Bound)",
              "format": "double",
              "type": "number"
            },
            "year": {
              "title": "Gross Revenue Year",
              "format": "int32",
              "type": "integer"
            },
            "currency": {
              "title": "Gross Revenue Currency",
              "description": "Currency of the value - CZK, EUR, ...",
              "type": "string"
            }
          }
        },
        "court": {
          "description": "Court",
          "title": "Court",
          "type": "string"
        },
        "owners": {
          "items": {
            "$ref": "#/definitions/DataFeed.Model.Entities.Owners"
          },
          "type": "array"
        },
        "dateEstablished": {
          "title": "Date Established",
          "type": "string"
        },
        "riskIndicator": {
          "title": "Risk Indicator",
          "format": "double",
          "type": "number"
        },
        "legalForm": {
          "type": "object",
          "properties": {
            "Text": {
              "description": "legal Form",
              "title": "Legal Form",
              "type": "string"
            }
          }
        }
      }
    },
    "DataFeed.Model.Entities.Filing": {
      "type": "object",
      "properties": {
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "DataFeed.Model.Entities.Address": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string",
          "title": "Country"
        },
        "longitude": {
          "title": "Longitude",
          "format": "double",
          "type": "number"
        },
        "latitude": {
          "title": "Latitude",
          "format": "double",
          "type": "number"
        },
        "subLocality": {
          "type": "string",
          "title": "Sub-locality"
        },
        "formattedPostalCode": {
          "type": "string",
          "title": "Postal Code (formatted)"
        },
        "postalCode": {
          "type": "string",
          "title": "Postal Code"
        },
        "locality": {
          "type": "string",
          "title": "Locality"
        },
        "street": {
          "type": "string",
          "title": "Street"
        },
        "streetNumber": {
          "type": "string",
          "title": "Street Number"
        },
        "administrativeArea": {
          "type": "string",
          "title": "Administrative Area"
        }
      }
    },
    "DataFeed.Model.Entities.Owners": {
      "type": "object",
      "properties": {
        "dateofbirth": {
          "type": "string",
          "title": "Date of Birth"
        },
        "name": {
          "type": "string",
          "title": "Name"
        },
        "share": {
          "title": "Share",
          "format": "double",
          "type": "number"
        },
        "registeredaddress": {
          "$ref": "#/definitions/DataFeed.Model.Entities.RegisteredAddress"
        }
      }
    },
    "DataFeed.Model.Entities.Datum": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "dataType": {
          "type": "string"
        }
      }
    },
    "DataFeed.Model.Entities.CountryDetail": {
      "type": "object",
      "properties": {
        "alpha2Code": {
          "type": "string"
        },
        "alpha3Code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "flag": {
          "type": "string"
        },
        "demonym": {
          "type": "string"
        },
        "jurisdictionCode": {
          "type": "string"
        },
        "nativeName": {
          "type": "string"
        }
      }
    },
    "DataFeed.Model.Entities.RegisteredAddress": {
      "type": "object",
      "properties": {
        "city": {
          "description": "Owner's City",
          "title": "City",
          "type": "string"
        },
        "streetName": {
          "description": "Owner's Street Name",
          "title": "Street Name",
          "type": "string"
        },
        "orientationNumber": {
          "description": "Owner's Orientation Number",
          "title": "Orientation Number",
          "type": "string"
        },
        "cityPart": {
          "description": "Owner's City Part",
          "title": "City Part",
          "type": "string"
        },
        "latitude": {
          "description": "Owner's Latitude",
          "title": "Latitude",
          "format": "double",
          "type": "number"
        },
        "admcode": {
          "description": "Owner's Adm Code",
          "title": "Adm Code",
          "type": "string"
        },
        "region": {
          "description": "Owner's Region",
          "title": "Region",
          "type": "string"
        },
        "streetNumber": {
          "description": "Owner's Street Number",
          "title": "Street Number",
          "type": "string"
        },
        "longitude": {
          "description": "Owner's Longitude",
          "title": "Longitude",
          "format": "double",
          "type": "number"
        },
        "cityDistrict": {
          "description": "Owner's City District",
          "title": "City District",
          "type": "string"
        }
      }
    },
    "GoogleApi.Entities.Common.Enums.PlaceLocationType": {
      "format": "int32",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131
      ],
      "type": "integer"
    },
    "GoogleApi.Entities.Places.Common.Term": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "DataFeed.Model.Entities.BankAccount": {
      "type": "object",
      "properties": {
        "accountCode": {
          "title": "Account Code",
          "description": "Code of the account",
          "type": "string"
        },
        "publishDate": {
          "title": "Publish Date",
          "description": "Date it was published",
          "type": "string"
        },
        "accountType": {
          "title": "Account Type",
          "description": "Type of the account",
          "type": "string"
        },
        "accountNumber": {
          "title": "Account Number",
          "description": "Number of the account",
          "type": "string"
        }
      }
    },
    "DataFeed.Model.Entities.CountryList": {
      "type": "object",
      "properties": {
        "nativeName": {
          "type": "string"
        },
        "demonym": {
          "type": "string"
        },
        "jurisdictionCode": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "flag": {
          "type": "string"
        }
      }
    },
    "DataFeed.Model.Entities.Company.CompanyDetail": {
      "type": "object",
      "properties": {
        "companyNumber": {
          "type": "string",
          "description": "The identifier given to the company by the company register"
        },
        "currentStatus": {
          "type": "string",
          "description": "The given description of the filing (e.g. Active)"
        },
        "name": {
          "type": "string",
          "description": "The legal name of the company"
        },
        "registeredAddress": {
          "$ref": "#/definitions/DataFeed.Model.Entities.Address"
        },
        "companyType": {
          "type": "string",
          "description": "The type of company (e.g. LLC, Private Limited Company, GBMH)"
        },
        "dissolutionDate": {
          "description": "The date the company was dissolved",
          "format": "date-time",
          "type": "string"
        },
        "incorporationDate": {
          "description": "The date the company was incorporated",
          "format": "date-time",
          "type": "string"
        },
        "reliableVATPayer": {
          "title": "Reliable VAT Payer",
          "description": "Company reliability for VAT paying",
          "type": "boolean"
        },
        "registeredAddressFull": {
          "type": "string",
          "description": "Registered address of the company, as a string"
        },
        "jurisdictionCode": {
          "type": "string",
          "description": "The code for the jurisdiction in which the company is incorporated"
        },
        "registryUrl": {
          "type": "string",
          "description": "The URL of the companies page in the company register. Note, not all company registers provide persistent urls for the companies in the register"
        },
        "filings": {
          "items": {
            "$ref": "#/definitions/DataFeed.Model.Entities.Filing"
          },
          "type": "array"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/DataFeed.Model.Entities.Datum"
          },
          "type": "array"
        },
        "bankAccounts": {
          "items": {
            "$ref": "#/definitions/DataFeed.Model.Entities.BankAccount"
          },
          "type": "array"
        }
      }
    },
    "DataFeed.Model.Entities.Company.CompanyList": {
      "type": "object",
      "properties": {
        "companyNumber": {
          "type": "string",
          "description": "The identifier given to the company by the company register"
        },
        "name": {
          "type": "string",
          "description": "The legal name of the company"
        }
      }
    },
    "GoogleApi.Entities.Places.Common.MatchedSubstring": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "string"
        },
        "length": {
          "type": "string"
        }
      }
    },
    "GoogleApi.Entities.Places.Common.Prediction": {
      "type": "object",
      "properties": {
        "terms": {
          "items": {
            "$ref": "#/definitions/GoogleApi.Entities.Places.Common.Term"
          },
          "type": "array"
        },
        "matchedSubstrings": {
          "items": {
            "$ref": "#/definitions/GoogleApi.Entities.Places.Common.MatchedSubstring"
          },
          "type": "array"
        },
        "placeId": {
          "type": "string"
        },
        "types": {
          "items": {
            "$ref": "#/definitions/GoogleApi.Entities.Common.Enums.PlaceLocationType"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "structuredFormatting": {
          "$ref": "#/definitions/GoogleApi.Entities.Places.Common.StructuredFormatting"
        }
      }
    }
  },
  "schemes": [
    "https"
  ],
  "x-ms-connector-metadata": [
    {
      "propertyValue": "https://www.talxis.com",
      "propertyName": "Website"
    },
    {
      "propertyValue": "https://www.talxis.com",
      "propertyName": "Privacy policy"
    },
    {
      "propertyValue": "Productivity;Data",
      "propertyName": "Categories"
    }
  ],
  "swagger": "2.0",
  "info": {
    "description": "TALXIS Data Feed is a complex service aggregating data from multiple connectors.",
    "title": "TALXIS Data Feed",
    "version": "1.0",
    "contact": {
      "email": "hello@networg.com",
      "url": "https://www.talxis.com",
      "name": "TALXIS"
    }
  },
  "host": "datafeed.connectors.talxis.com",
  "paths": {
    "/v1.0/Companies/{jurisdictionCode}/{companyNumber}/logo": {
      "get": {
        "description": "Get company logo",
        "operationId": "CompanyLogo",
        "tags": [
          "Companies"
        ],
        "summary": "Get Company Logo",
        "parameters": [
          {
            "description": "Jurisdiction Code - eg. CZ, SK, ...",
            "required": true,
            "in": "path",
            "type": "string",
            "enum": [
              "cz",
              "sk"
            ],
            "name": "jurisdictionCode",
            "x-ms-summary": "Jurisdiction Code"
          },
          {
            "description": "National Identification Number",
            "required": true,
            "in": "path",
            "type": "string",
            "name": "companyNumber",
            "x-ms-summary": "Company Number"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1.0/Geospatial/countries/{code}": {
      "get": {
        "description": "Returns detail of the country.",
        "operationId": "CountryDetail",
        "summary": "Get Country Detail",
        "x-ms-visibility": "internal",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "code",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Geospatial"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DataFeed.Model.Entities.CountryDetail"
            },
            "description": "Success"
          }
        }
      }
    },
    "/v1.0/Geospatial/address/autocomplete": {
      "get": {
        "description": "The Query Autocomplete service can be used to provide a query prediction for text-based geographic searches, by returning suggested queries as you type.",
        "operationId": "AddressAutoComplete",
        "summary": "Autocomplete Address",
        "x-ms-visibility": "internal",
        "parameters": [
          {
            "description": "The text string on which to search.",
            "in": "query",
            "name": "query",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Geospatial"
        ],
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/GoogleApi.Entities.Places.Common.Prediction"
              },
              "type": "array"
            },
            "description": "Success"
          }
        }
      }
    },
    "/v1.0/Companies/{jurisdictionCode}/{companyNumber}": {
      "get": {
        "description": "Get company detail using company number",
        "operationId": "GetCompany",
        "summary": "Get Company",
        "parameters": [
          {
            "description": "Jurisdiction Code - eg. CZ, SK, ...",
            "required": true,
            "in": "path",
            "type": "string",
            "name": "jurisdictionCode",
            "x-ms-summary": "Jurisdiction Code"
          },
          {
            "description": "National Identification Number",
            "required": true,
            "in": "path",
            "type": "string",
            "name": "companyNumber",
            "x-ms-summary": "Company Number"
          },
          {
            "description": "The language in which to return results.",
            "x-ms-summary": "Language",
            "in": "query",
            "name": "language",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DataFeed.Model.Entities.Company.CompanyDetail"
            },
            "description": "Success"
          }
        }
      }
    },
    "/v1.0/Geospatial/countries": {
      "get": {
        "description": "Get list of all countries or search by query.",
        "operationId": "Countries",
        "summary": "Countries",
        "x-ms-visibility": "internal",
        "parameters": [
          {
            "description": "Native name or partial name.",
            "in": "query",
            "name": "query",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Geospatial"
        ],
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DataFeed.Model.Entities.CountryList"
              },
              "type": "array"
            },
            "description": "Success"
          }
        }
      }
    },
    "/v1.0/Companies/{jurisdictionCode}/{companyNumber}/finance": {
      "get": {
        "description": "Get company finance report",
        "operationId": "GetCompanyFinace",
        "summary": "Get company finance report",
        "parameters": [
          {
            "description": "Jurisdiction code like country code (CZ, SK, ...)",
            "required": true,
            "in": "path",
            "type": "string",
            "enum": [
              "CZ",
              "SK",
              "DE"
            ],
            "name": "jurisdictionCode",
            "x-ms-summary": "Jurisdiction Code"
          },
          {
            "description": "National Identification Number of the company (ICO)",
            "required": true,
            "in": "path",
            "type": "string",
            "name": "companyNumber",
            "x-ms-summary": "Company Number"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DataFeed.Model.Entities.Company.CompanyFinance"
            },
            "description": "Success"
          }
        }
      }
    },
    "/v1.0/DateTime/GetWeekOfYear": {
      "get": {
        "description": "Returns week number based on provided criteria.",
        "operationId": "GetWeekOfYear",
        "summary": "Get Week Number From Date",
        "parameters": [
          {
            "description": "Enter the week you want to return number from",
            "required": true,
            "in": "query",
            "type": "string",
            "format": "date",
            "name": "time",
            "x-ms-summary": "Date"
          },
          {
            "description": "Define rule for determining the first week of the year (possibilities: FirstDay, FirstFullWeek, FirstFourDayWeek)",
            "required": true,
            "in": "query",
            "type": "string",
            "enum": [
              "FirstDay",
              "FirstFullWeek",
              "FirstFourDayWeek"
            ],
            "name": "rule",
            "x-ms-summary": "Rule for the first week"
          },
          {
            "description": "Specify at what day the week starts",
            "required": true,
            "in": "query",
            "type": "string",
            "enum": [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"
            ],
            "name": "firstDayOfWeek",
            "x-ms-summary": "First day of week"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "DateTime"
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "properties": {
                "weekNumber": {
                  "description": "Number of the week based on provided criteria",
                  "title": "Week Number",
                  "type": "integer"
                }
              }
            },
            "description": "Success"
          }
        }
      }
    },
    "/v1.0/Companies/Search": {
      "get": {
        "description": "Search by company name",
        "operationId": "CompanySearch",
        "summary": "Search Companies",
        "x-ms-visibility": "internal",
        "parameters": [
          {
            "in": "query",
            "type": "string",
            "name": "jurisdictionCode",
            "required": true
          },
          {
            "in": "query",
            "type": "string",
            "name": "query",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DataFeed.Model.Entities.Company.CompanyList"
              },
              "type": "array"
            },
            "description": "Success"
          }
        }
      }
    },
    "/v1.0/Geospatial/address/geocode": {
      "get": {
        "description": "Geocoding is a process of converting addresses (like \"1600 Amphitheatre Parkway, Mountain View, CA\") into geographic coordinates (like latitude 37.423021 and longitude -122.083739)",
        "operationId": "AddressGeocode",
        "summary": "Geocode Address",
        "parameters": [
          {
            "description": "Address to be converted.",
            "required": true,
            "in": "query",
            "type": "string",
            "name": "query",
            "x-ms-summary": "Geocode Address"
          },
          {
            "x-ms-summary": "Language",
            "in": "query",
            "description": "The language in which to return results.",
            "name": "language",
            "type": "string"
          },
          {
            "x-ms-summary": "Region",
            "in": "query",
            "description": "The region code, specified as a ccTLD (\"top-level domain\") two-character value.",
            "name": "region",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Geospatial"
        ],
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DataFeed.Model.Entities.Address"
              },
              "type": "array"
            },
            "description": "Success"
          }
        }
      }
    },
    "/v1.0/Maps/google/key": {
      "get": {
        "description": "Generates new short lived key",
        "operationId": "GoogleMapsKey",
        "summary": "Get Google Maps API Key",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Maps"
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "properties": {
                "key": {
                  "description": "API key to use with Google Maps API service.",
                  "title": "Key",
                  "type": "string"
                },
                "expiresOn": {
                  "description": "Expiration time of the requested API key.",
                  "title": "Expires On",
                  "format": "date-time",
                  "type": "string"
                }
              }
            },
            "description": "Success"
          }
        }
      }
    },
    "/v1.0/Salutations/{language}/": {
      "get": {
        "description": "Get salutation",
        "operationId": "GetSalutation",
        "summary": "Get salutation",
        "parameters": [
          {
            "description": "Language which you want to get the salutation for.",
            "required": true,
            "in": "path",
            "type": "string",
            "enum": [
              "CS",
              "SK"
            ],
            "name": "language",
            "x-ms-summary": "Language"
          },
          {
            "description": "Person's surname",
            "required": true,
            "in": "query",
            "type": "string",
            "name": "surname",
            "x-ms-summary": "Surname"
          },
          {
            "description": "Person's gender",
            "required": true,
            "in": "query",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "name": "gender",
            "x-ms-summary": "Gender"
          },
          {
            "description": "Person's title (prefix)",
            "required": false,
            "in": "query",
            "type": "string",
            "name": "title",
            "x-ms-summary": "Title"
          },
          {
            "description": "Person's suffix",
            "required": false,
            "in": "query",
            "type": "string",
            "name": "suffix",
            "x-ms-summary": "Suffix"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Salutations"
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "string"
            },
            "description": "Success"
          }
        }
      }
    },
    "/v1.0/Holidays/countries/{countryIsoCode}/publicHolidays/{year}": {
      "get": {
        "description": "Get holidays of given state in given year",
        "operationId": "GetHolidays",
        "tags": [
          "Holidays"
        ],
        "summary": "Get Holidays",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Country Iso Code (CZ, SK, DE...)",
            "required": true,
            "in": "path",
            "type": "string",
            "name": "countryIsoCode",
            "x-ms-summary": "Country Iso Code"
          },
          {
            "description": "Year of the holidays",
            "required": true,
            "in": "path",
            "type": "string",
            "name": "year",
            "x-ms-summary": "Year"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DataFeed.Model.Entities.Holidays"
              },
              "type": "array"
            },
            "description": "Success"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2_auth": {
      "authorizationUrl": "https://login.windows.net/common/oauth2/authorize",
      "scopes": {},
      "flow": "accessCode",
      "type": "oauth2",
      "tokenUrl": "https://login.windows.net/common/oauth2/authorize"
    }
  },
  "security": [
    {
      "oauth2_auth": []
    }
  ]
}