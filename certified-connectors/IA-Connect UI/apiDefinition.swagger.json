{
  "swagger": "2.0",
  "info": {
    "title": "IA-Connect UI",
    "description": "IA-Connect is a Robotic Process Automation (RPA) platform which adds RPA functionality from the Cloud to on-premises virtual machines or over Citrix or Microsoft Remote Desktop (RDS) connections. This is the module for Windows application User Interface Automation (UIA).",
    "version": "9.0",
    "contact": {
      "name": "Ultima Labs",
      "url": "https://www.ultima.com/ultima-labs",
      "email": "IAConnect@ultima.com"
    }
  },
  "host": "DefinedInConnectionParameters",
  "basePath": "/IAConnectRESTClient",
  "schemes": [
    "https"
  ],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.ultima.com/ultima-labs"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.ultima.com/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "IT Operations;Productivity"
    }
  ],
  "paths": {
    "/UIAControl/DoesTopLevelWindowExist": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Does top level Win32 window exist",
        "description": "A simple and fast Win32 action which reports whether a top-level window exists. A top-level window is one that is directly connected to the desktop.  The window must exist: IA-Connect will not wait. It is recommended to use the action 'Wait for desktop element' which is more powerful.",
        "parameters": [
          {
            "in": "body",
            "name": "UIADoesTopLevelWindowExist",
            "description": "Inputs for IA-Connect UIADoesTopLevelWindowExist action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchClassName": {
                  "type": "string",
                  "title": "Search class name",
                  "description": "The element class name of the top level window to search for, e.g. 'Notepad'."
                },
                "SearchWindowTitle": {
                  "type": "string",
                  "title": "Search window title",
                  "description": "The title of the top level window to search for."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "WindowExists": {
                  "type": "boolean",
                  "title": "Window exists",
                  "description": "Returns true if the window exists or false if not."
                }
              }
            }
          }
        },
        "operationId": "UIADoesTopLevelWindowExist"
      }
    },
    "/UIAControl/GetHandleForTopLevelWindow": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA handle for top level Win32 window",
        "description": "A simple and fast Win32 action which returns the handle for any top-level window which has the specified class name or window title. A top-level window is one that is directly connected to the desktop.  The window must exist: IA-Connect will not wait. It is recommended to use the action 'Wait for desktop element' which is more powerful.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetHandleForTopLevelWindow",
            "description": "Inputs for IA-Connect UIAGetHandleForTopLevelWindow action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchClassName": {
                  "type": "string",
                  "title": "Search class name",
                  "description": "The element class name of the top level window to search for, e.g. 'Notepad'."
                },
                "SearchWindowTitle": {
                  "type": "string",
                  "title": "Search window title",
                  "description": "The title of the top level window to search for."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "WindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Window handle",
                  "description": "The UIA handle for the window. This can be used as an input to further UIA actions within this window."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The UIA name of the window element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The UIA class name of the window element."
                },
                "ElementAutomationId": {
                  "type": "string",
                  "title": "Element automation Id",
                  "description": "The UIA automation Id of the window element."
                },
                "ElementLocalizedControlType": {
                  "type": "string",
                  "title": "Element localized control type",
                  "description": "The UIA localized control type of the window element."
                }
              }
            }
          }
        },
        "operationId": "UIAGetHandleForTopLevelWindow"
      }
    },
    "/UIAControl/WaitForTopLevelWindow": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wait for UIA top level Win32 window",
        "description": "A simple and fast Win32 action which waits for a specified time for a top-level window to exist before returning a handle. A top-level window is one that is directly connected to the desktop. It is recommended to use the action 'Wait for desktop element' which is more powerful.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAWaitForTopLevelWindow",
            "description": "Inputs for IA-Connect UIAWaitForTopLevelWindow action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchClassName": {
                  "type": "string",
                  "title": "Search class name",
                  "description": "The element class name of the top level window to search for, e.g. 'Notepad'."
                },
                "SearchWindowTitle": {
                  "type": "string",
                  "title": "Search window title",
                  "description": "The title of the top level window to search for."
                },
                "SecondsToWait": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Seconds to wait"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SecondsToWait",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "WindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Window handle",
                  "description": "The UIA handle for the window. This can be used as an input to further UIA actions within this window."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The UIA name of the window element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The UIA class name of the window element."
                },
                "ElementAutomationId": {
                  "type": "string",
                  "title": "Element automation Id",
                  "description": "The UIA automation Id of the window element."
                },
                "ElementLocalizedControlType": {
                  "type": "string",
                  "title": "Element localized control type",
                  "description": "The UIA localized control type of the window element."
                },
                "ElementExists": {
                  "type": "boolean",
                  "title": "Element exists",
                  "description": "Returns true if the window exists or false if not."
                }
              }
            }
          }
        },
        "operationId": "UIAWaitForTopLevelWindow"
      }
    },
    "/UIAControl/DoesProcessHaveWindow": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Does process have Win32 window",
        "description": "A simple and fast Win32 action which reports whether a process (specified by name) has any visible windows. The window must exist: IA-Connect will not wait. It is recommended to use the action 'Wait for desktop element' which is more powerful.",
        "parameters": [
          {
            "in": "body",
            "name": "UIADoesProcessHaveWindow",
            "description": "Inputs for IA-Connect UIADoesProcessHaveWindow action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchProcessName": {
                  "type": "string",
                  "title": "Search process name",
                  "description": "The name of the process to search for, e.g. notepad."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchProcessName",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ProcessHasWindow": {
                  "type": "boolean",
                  "title": "Process has window",
                  "description": "Returns true if the process has a visible window, or false if not."
                }
              }
            }
          }
        },
        "operationId": "UIADoesProcessHaveWindow"
      }
    },
    "/UIAControl/GetHandleForProcessMainWindow": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA handle for process main window",
        "description": "A simple and fast Win32 action which returns the handle for any main window of a process (specified by name). The 'Main' window is typically the main application window: a login dialog or sub-window is generally not the 'Main' window.  The window must exist: IA-Connect will not wait. It is recommended to use the action 'Wait for desktop element' which is more powerful.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetHandleForProcessMainWindow",
            "description": "Inputs for IA-Connect UIAGetHandleForProcessMainWindow action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchProcessName": {
                  "type": "string",
                  "title": "Search process name",
                  "description": "The name of the process to search for, e.g. notepad."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchProcessName",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "WindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Window handle",
                  "description": "The UIA handle for the window. This can be used as an input to further UIA actions within this window."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The UIA name of the window element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The UIA class name of the window element."
                },
                "ElementAutomationId": {
                  "type": "string",
                  "title": "Element automation Id",
                  "description": "The UIA automation Id of the window element."
                },
                "ElementLocalizedControlType": {
                  "type": "string",
                  "title": "Element localized control type",
                  "description": "The UIA localized control type of the window element."
                }
              }
            }
          }
        },
        "operationId": "UIAGetHandleForProcessMainWindow"
      }
    },
    "/UIAControl/WaitForProcessMainWindow": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wait for UIA process main window",
        "description": "A simple and fast Win32 action which waits for a specified time for the main window of a process (specified by name) to exist before returning a handle. The 'Main' window is typically the main application window: a login dialog or sub-window is generally not the 'Main' window. It is recommended to use the action 'Wait for desktop element' which is more powerful.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAWaitForProcessMainWindow",
            "description": "Inputs for IA-Connect UIAWaitForProcessMainWindow action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchProcessName": {
                  "type": "string",
                  "title": "Search process name",
                  "description": "The name of the process to search for, e.g. notepad."
                },
                "SecondsToWait": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Seconds to wait",
                  "description": "The maximum number of seconds to wait for the process main window."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SearchProcessName",
                "SecondsToWait",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "WindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Window handle",
                  "description": "The UIA handle for the window. This can be used as an input to further UIA actions within this window."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The UIA name of the window element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The UIA class name of the window element."
                },
                "ElementAutomationId": {
                  "type": "string",
                  "title": "Element automation Id",
                  "description": "The UIA automation Id of the window element."
                },
                "ElementLocalizedControlType": {
                  "type": "string",
                  "title": "Element localized control type",
                  "description": "The UIA localized control type of the window element."
                },
                "ElementExists": {
                  "type": "boolean",
                  "title": "Element exists",
                  "description": "Returns true if the window exists or false if not."
                }
              }
            }
          }
        },
        "operationId": "UIAWaitForProcessMainWindow"
      }
    },
    "/UIAControl/GetHandleForProcessIdMainWindow": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA handle for process Id main window",
        "description": "A simple and fast Win32 action which returns the handle for any main window of a process (specified by Process ID). The 'Main' window is typically the main application window: a login dialog or sub-window is generally not the 'Main' window. It is recommended to use the action 'Wait for desktop element' which is more powerful.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetHandleForProcessIdMainWindow",
            "description": "Inputs for IA-Connect UIAGetHandleForProcessIdMainWindow action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ProcessId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Search process Id",
                  "description": "The Id of the process to wait for (as provided by the 'Run Process' action in the IA-Connect Environment / Session actions)."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ProcessId",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "WindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Window handle",
                  "description": "The UIA handle for the window. This can be used as an input to further UIA actions within this window."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The UIA name of the window element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The UIA class name of the window element."
                },
                "ElementAutomationId": {
                  "type": "string",
                  "title": "Element automation Id",
                  "description": "The UIA automation Id of the window element."
                },
                "ElementLocalizedControlType": {
                  "type": "string",
                  "title": "Element localized control type",
                  "description": "The UIA localized control type of the window element."
                }
              }
            }
          }
        },
        "operationId": "UIAGetHandleForProcessIdMainWindow"
      }
    },
    "/UIAControl/WaitForProcessIdMainWindow": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wait for UIA process Id main window",
        "description": "A simple and fast Win32 action which waits for a main window of a process (specified by Process ID) to exist and returns a handle. The 'Main' window is typically the main application window: a login dialog or sub-window is generally not the 'Main' window. It is recommended to use the action 'Wait for desktop element' which is more powerful.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAWaitForProcessIdMainWindow",
            "description": "Inputs for IA-Connect UIAWaitForProcessIdMainWindow action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ProcessId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Search process Id",
                  "description": "The Id of the process to wait for (as provided by the 'Run Process' action in the IA-Connect Environment / Session actions)."
                },
                "SecondsToWait": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Seconds to wait",
                  "description": "The maximum number of seconds to wait for the process main window."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ProcessId",
                "SecondsToWait",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementExists": {
                  "type": "boolean",
                  "title": "Element exists",
                  "description": "Returns true if the element exists or false if not."
                },
                "WindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Window handle",
                  "description": "The UIA handle for the window. This can be used as an input to further UIA actions within this window."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The UIA name of the window element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The UIA class name of the window element."
                },
                "ElementAutomationId": {
                  "type": "string",
                  "title": "Element automation Id",
                  "description": "The UIA automation Id of the window element."
                },
                "ElementLocalizedControlType": {
                  "type": "string",
                  "title": "Element localized control type",
                  "description": "The UIA localized control type of the window element."
                }
              }
            }
          }
        },
        "operationId": "UIAWaitForProcessIdMainWindow"
      }
    },
    "/UIAControl/GetHandleForFocussedElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA handle for focussed element",
        "description": "Returns a handle for the currently focused UIA element.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetHandleForFocussedElement",
            "description": "Inputs for IA-Connect UIAGetHandleForFocussedElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "WindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Window handle",
                  "description": "The UIA handle for the window. This can be used as an input to further UIA actions within this window."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The UIA name of the element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The UIA class name of the element."
                },
                "ElementAutomationId": {
                  "type": "string",
                  "title": "Element automation Id",
                  "description": "The UIA automation Id of the element."
                },
                "ElementLocalizedControlType": {
                  "type": "string",
                  "title": "Element localized control type",
                  "description": "The UIA localized control type of the element."
                }
              }
            }
          }
        },
        "operationId": "UIAGetHandleForFocussedElement"
      }
    },
    "/UIAControl/GetHandleForMainWindowOfFocussedElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA handle for main window of focussed element",
        "description": "Returns a handle for the main window of the currently focused UIA element.  The 'Main' window is typically the main application window: a login dialog or sub-window is generally not the 'Main' window.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetHandleForMainWindowOfFocussedElement",
            "description": "Inputs for IA-Connect UIAGetHandleForMainWindowOfFocussedElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "WindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Window handle",
                  "description": "The UIA handle for the window. This can be used as an input to further UIA actions within this window."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The UIA name of the window element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The UIA class name of the window element."
                },
                "ElementAutomationId": {
                  "type": "string",
                  "title": "Element automation Id",
                  "description": "The UIA automation Id of the window element."
                },
                "ElementLocalizedControlType": {
                  "type": "string",
                  "title": "Element localized control type",
                  "description": "The UIA localized control type of the window element."
                }
              }
            }
          }
        },
        "operationId": "UIAGetHandleForMainWindowOfFocussedElement"
      }
    },
    "/UIAControl/GetHandleForDesktop": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA handle for desktop",
        "description": "Returns a handle for the desktop. This is an obsolete action because the handle '-2' can be used to refer to the desktop element but also because there are plenty of actions which can search relative to the desktop (e.g 'wait for desktop element').",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetHandleForDesktop",
            "description": "Inputs for IA-Connect UIAGetHandleForDesktop action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "WindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Window handle",
                  "description": "The UIA handle for the desktop. This can be used as an input to further UIA actions within this window."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The UIA name of the desktop element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The UIA class name of the desktop element."
                },
                "ElementAutomationId": {
                  "type": "string",
                  "title": "Element automation Id",
                  "description": "The UIA automation Id of the desktop element."
                },
                "ElementLocalizedControlType": {
                  "type": "string",
                  "title": "Element localized control type",
                  "description": "The UIA localized control type of the desktop element."
                }
              }
            }
          }
        },
        "operationId": "UIAGetHandleForDesktop"
      }
    },
    "/UIAControl/SetForegroundWindow": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set foreground UIA window",
        "description": "Brings a window to the foreground.",
        "parameters": [
          {
            "in": "body",
            "name": "UIASetForegroundWindow",
            "description": "Inputs for IA-Connect UIASetForegroundWindow action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "WindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Window handle",
                  "description": "The UIA handle for the window which should be set as the foreground window."
                },
                "ToggleWindow": {
                  "type": "boolean",
                  "default": true,
                  "title": "Toggle window",
                  "description": "Should the window be toggled by attempting to focus or click it? This helps to ensure that the window is reliably brought to the foreground.",
                  "x-ms-visibility": "advanced"
                },
                "ToggleUsesGlobalLeftMouseClickAgent": {
                  "type": "boolean",
                  "default": true,
                  "title": "Toggle uses global left mouse click agent",
                  "description": "If choosing to toggle the window, this specifies whether to use global mouse clicks to focus the IA-Connect Agent first.",
                  "x-ms-visibility": "advanced"
                },
                "ToggleDelay": {
                  "type": "number",
                  "format": "double",
                  "default": 0.25,
                  "title": "Toggle delay in seconds",
                  "description": "If choosing to toggle the window, this specifies the pause after toggling.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "WindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIASetForegroundWindow"
      }
    },
    "/UIAControl/MaximiseWindow": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Maximise UIA window",
        "description": "Maximises the window with the specified UIA handle.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAMaximiseWindow",
            "description": "Inputs for IA-Connect UIAMaximiseWindow action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "WindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Window handle",
                  "description": "The UIA handle for the window to be maximised."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "WindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAMaximiseWindow"
      }
    },
    "/UIAControl/MinimiseWindow": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Minimise UIA window",
        "description": "Minimises the window with the specified UIA handle.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAMinimiseWindow",
            "description": "Inputs for IA-Connect UIAMinimiseWindow action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "WindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Window handle",
                  "description": "The UIA handle for the window to be minimised."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "WindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAMinimiseWindow"
      }
    },
    "/UIAControl/SetWindowToNormal": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set UIA window to normal",
        "description": "Normalises the window with the specified UIA handle (i.e. sets it to a normal sized window instead of minimised or maximised).",
        "parameters": [
          {
            "in": "body",
            "name": "UIASetWindowToNormal",
            "description": "Inputs for IA-Connect UIASetWindowToNormal action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "WindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Window handle",
                  "description": "The UIA handle for the window to be normalised."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "WindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIASetWindowToNormal"
      }
    },
    "/UIAControl/DoesElementExist": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Does UIA element exist",
        "description": "Reports whether an element exists and returns some basic element properties.",
        "parameters": [
          {
            "in": "body",
            "name": "UIADoesElementExist",
            "description": "Inputs for IA-Connect UIADoesElementExist action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchProcessId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Search process Id",
                  "description": "If specified then the search will only consider elements owned by a process with this Process ID (PID). If IA-Connect launched the process then the PID is provided by the 'Run Process' action in the IA-Connect Environment / Session actions. If you don't know the PID then leave this field blank."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "ReturnElementHandle": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return element handle",
                  "description": "If set to true than a handle to the located element will be returned. This handle can be used in further actions to act as a 'parent' handle.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "IncludeChildProcesses": {
                  "type": "boolean",
                  "default": false,
                  "title": "Include child processes",
                  "description": "If set to true and a 'Search process Id' is specified, child processes of that process Id are also included in the search. If set to false then only a process matching the exact 'Search process Id' will be searched.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementExists": {
                  "type": "boolean",
                  "title": "Element exists",
                  "description": "Returns true if the element exists or false if not."
                },
                "ElementHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element handle",
                  "description": "The UIA handle for the element. This can be used as an input to further UIA actions acting on this element."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The UIA name of the element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The UIA class name of the element."
                },
                "ElementAutomationId": {
                  "type": "string",
                  "title": "Element automation Id",
                  "description": "The UIA automation Id of the element."
                },
                "ElementLocalizedControlType": {
                  "type": "string",
                  "title": "Element localized control type",
                  "description": "The UIA localized control type of the element."
                }
              }
            }
          }
        },
        "operationId": "UIADoesElementExist"
      }
    },
    "/UIAControl/DoesDesktopElementExist": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Does UIA desktop element exist",
        "description": "Reports whether a desktop element exists and provides some basic element properties.",
        "parameters": [
          {
            "in": "body",
            "name": "UIADoesDesktopElementExist",
            "description": "Inputs for IA-Connect UIADoesDesktopElementExist action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchProcessId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Search process Id",
                  "description": "If specified then the search will only consider elements owned by a process with this Process ID (PID). If IA-Connect launched the process then the PID is provided by the 'Run Process' action in the IA-Connect Environment / Session actions. If you don't know the PID then leave this field blank."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "ReturnElementHandle": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return element handle",
                  "description": "If set to true than a handle to the located element will be returned. This handle can be used in further actions to act as a 'parent' handle.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "IncludeChildProcesses": {
                  "type": "boolean",
                  "default": false,
                  "title": "Include child processes",
                  "description": "If set to true and a 'Search process Id' is specified, child processes of that process Id are also included in the search. If set to false then only a process matching the exact 'Search process Id' will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementExists": {
                  "type": "boolean",
                  "title": "Element exists",
                  "description": "Returns true if the element exists or false if not."
                },
                "ElementHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element handle",
                  "description": "The UIA handle for the element. This can be used as an input to further UIA actions acting on this element."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The UIA name of the element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The UIA class name of the element."
                },
                "ElementAutomationId": {
                  "type": "string",
                  "title": "Element automation Id",
                  "description": "The UIA automation Id of the element."
                },
                "ElementLocalizedControlType": {
                  "type": "string",
                  "title": "Element localized control type",
                  "description": "The UIA localized control type of the element."
                }
              }
            }
          }
        },
        "operationId": "UIADoesDesktopElementExist"
      }
    },
    "/UIAControl/WaitForElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wait for UIA element",
        "description": "Waits for an element (typically an individual element within a window such as a button or a text input area) to exist.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAWaitForElement",
            "description": "Inputs for IA-Connect UIAWaitForElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchProcessId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Search process Id",
                  "description": "If specified then the search will only consider elements owned by a process with this Process ID (PID). If IA-Connect launched the process then the PID is provided by the 'Run Process' action in the IA-Connect Environment / Session actions. If you don't know the PID then leave this field blank."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "ReturnElementHandle": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return element handle",
                  "description": "If set to true than a handle to the located element will be returned. This handle can be used in further actions to act as a 'parent' handle.",
                  "x-ms-visibility": "advanced"
                },
                "SecondsToWait": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Seconds to wait",
                  "description": "The maximum number of seconds to wait for the element to exist."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "IncludeChildProcesses": {
                  "type": "boolean",
                  "default": false,
                  "title": "Include child processes",
                  "description": "If set to true and a 'Search process Id' is specified, child processes of that process Id are also included in the search. If set to false then only a process matching the exact 'Search process Id' will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "RaiseExceptionIfElementNotFound": {
                  "type": "boolean",
                  "default": false,
                  "title": "Raise exception if element not found",
                  "description": "Should IA-Connect raise an exception if the UIA element does not exist after the wait period?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "SecondsToWait",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementExists": {
                  "type": "boolean",
                  "title": "Element exists",
                  "description": "Returns true if the element exists or false if not."
                },
                "ElementHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element handle",
                  "description": "The UIA handle for the element. This can be used as an input to further UIA actions acting on this element."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The UIA name of the element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The UIA class name of the element."
                },
                "ElementAutomationId": {
                  "type": "string",
                  "title": "Element automation Id",
                  "description": "The UIA automation Id of the element."
                },
                "ElementLocalizedControlType": {
                  "type": "string",
                  "title": "Element localized control type",
                  "description": "The UIA localized control type of the element."
                }
              }
            }
          }
        },
        "operationId": "UIAWaitForElement"
      }
    },
    "/UIAControl/WaitForDesktopElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wait for UIA desktop element",
        "description": "Waits for a desktop element (typically a window) to exist.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAWaitForDesktopElement",
            "description": "Inputs for IA-Connect UIAWaitForDesktopElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchProcessId": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Search process Id",
                  "description": "If specified then the search will only consider elements owned by a process with this Process ID (PID). If IA-Connect launched the process then the PID is provided by the 'Run Process' action in the IA-Connect Environment / Session actions. If you don't know the PID then leave this field blank."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "ReturnElementHandle": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return element handle",
                  "description": "If set to true than a handle to the located element will be returned. This handle can be used in further actions to act as a 'parent' handle.",
                  "x-ms-visibility": "advanced"
                },
                "SecondsToWait": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Seconds to wait",
                  "description": "The maximum number of seconds to wait for the element to exist."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "IncludeChildProcesses": {
                  "type": "boolean",
                  "default": false,
                  "title": "Include child processes",
                  "description": "If set to true and a 'Search process Id' is specified, child processes of that process Id are also included in the search. If set to false then only a process matching the exact 'Search process Id' will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "RaiseExceptionIfElementNotFound": {
                  "type": "boolean",
                  "default": false,
                  "title": "Raise exception if element not found",
                  "description": "Should IA-Connect raise an exception if the UIA element does not exist after the wait period?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SecondsToWait",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementExists": {
                  "type": "boolean",
                  "title": "Element exists",
                  "description": "Returns true if the element exists or false if not."
                },
                "ElementHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element handle",
                  "description": "The UIA handle for the element. This can be used as an input to further UIA actions acting on this element."
                },
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The UIA name of the element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The UIA class name of the element."
                },
                "ElementAutomationId": {
                  "type": "string",
                  "title": "Element automation Id",
                  "description": "The UIA automation Id of the element."
                },
                "ElementLocalizedControlType": {
                  "type": "string",
                  "title": "Element localized control type",
                  "description": "The UIA localized control type of the element."
                }
              }
            }
          }
        },
        "operationId": "UIAWaitForDesktopElement"
      }
    },
    "/UIAControl/UIAWaitForElementToNotExist": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wait for UIA element to not exist",
        "description": "Waits for an element (typically an individual element within a window such as a button or a text input area) to no longer exist.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAWaitForElementToNotExist",
            "description": "Inputs for IA-Connect UIAWaitForElementToNotExist action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchProcessId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Search process Id",
                  "description": "If specified then the search will only consider elements owned by a process with this Process ID (PID). If IA-Connect launched the process then the PID is provided by the 'Run Process' action in the IA-Connect Environment / Session actions. If you don't know the PID then leave this field blank."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "SecondsToWait": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Seconds to wait",
                  "description": "The maximum number of seconds to wait for the element to not exist."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "IncludeChildProcesses": {
                  "type": "boolean",
                  "default": false,
                  "title": "Include child processes",
                  "description": "If set to true and a 'Search process Id' is specified, child processes of that process Id are also included in the search. If set to false then only a process matching the exact 'Search process Id' will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "RaiseExceptionIfElementStillExists": {
                  "type": "boolean",
                  "default": false,
                  "title": "Raise exception if element still exists",
                  "description": "Should IA-Connect raise an exception if the UIA element still exists after the wait period?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "SecondsToWait",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementExistsBeforeWait": {
                  "type": "boolean",
                  "title": "Element exists before wait",
                  "description": "Returns true if the element existed before waiting or false if not."
                },
                "ElementExistsAfterWait": {
                  "type": "boolean",
                  "title": "Element exists after wait",
                  "description": "Returns true if the element existed after waiting or false if not."
                }
              }
            }
          }
        },
        "operationId": "UIAWaitForElementToNotExist"
      }
    },
    "/UIAControl/UIAWaitForDesktopElementToNotExist": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Wait for UIA desktop element to not exist",
        "description": "Waits for a desktop element (typically a window) to no longer exist.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAWaitForDesktopElementToNotExist",
            "description": "Inputs for IA-Connect UIAWaitForDesktopElementToNotExist action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchProcessId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Search process Id",
                  "description": "If specified then the search will only consider elements owned by a process with this Process ID (PID). If IA-Connect launched the process then the PID is provided by the 'Run Process' action in the IA-Connect Environment / Session actions. If you don't know the PID then leave this field blank."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "SecondsToWait": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Seconds to wait",
                  "description": "The maximum number of seconds to wait for the element to not exist."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "IncludeChildProcesses": {
                  "type": "boolean",
                  "default": false,
                  "title": "Include child processes",
                  "description": "If set to true and a 'Search process Id' is specified, child processes of that process Id are also included in the search. If set to false then only a process matching the exact 'Search process Id' will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "RaiseExceptionIfElementStillExists": {
                  "type": "boolean",
                  "default": false,
                  "title": "Raise exception if element still exists",
                  "description": "Should IA-Connect raise an exception if the UIA element still exists after the wait period?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "SecondsToWait",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementExistsBeforeWait": {
                  "type": "boolean",
                  "title": "Element exists before wait",
                  "description": "Returns true if the element existed before waiting or false if not."
                },
                "ElementExistsAfterWait": {
                  "type": "boolean",
                  "title": "Element exists after wait",
                  "description": "Returns true if the element existed after waiting or false if not."
                }
              }
            }
          }
        },
        "operationId": "UIAWaitForDesktopElementToNotExist"
      }
    },
    "/UIAControl/PressElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Press UIA element",
        "description": "Presses an element (typically a button).",
        "parameters": [
          {
            "in": "body",
            "name": "UIAPressElement",
            "description": "Inputs for IA-Connect UIAPressElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "Wait": {
                  "type": "boolean",
                  "default": false,
                  "title": "Wait for button event to complete",
                  "description": "Should the automation wait for the button event to complete before continuing. If set to true this can cause a timeout if the button opens a modal dialog.",
                  "x-ms-visibility": "advanced"
                },
                "Win32ClickButton": {
                  "type": "boolean",
                  "default": false,
                  "title": "Win32 click button",
                  "description": "Should a Win32 click event be used? This is a 'fire and forget' click event, which can be useful when dealing with modal dialogs that are presented after a click.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAPressElement"
      }
    },
    "/UIAControl/GlobalMouseClickOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global left mouse click on UIA element",
        "description": "Moves the mouse to the centre of an element and clicks the left mouse button.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGlobalMouseClickOnElement",
            "description": "Inputs for IA-Connect UIAGlobalMouseClickOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "FocusElementFirst": {
                  "type": "boolean",
                  "default": true,
                  "title": "Focus element first",
                  "description": "Should IA-Connect attempt to focus the element before global clicking?"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetX": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset X",
                  "description": "The number of X pixels to offset the click action by. This parameter supports both positive (right) and negative (left) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetY": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset Y",
                  "description": "The number of Y pixels to offset the click action by. This parameter supports both positive (down) and negative (up) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "OffsetRelativeTo": {
                  "type": "string",
                  "title": "Offset relative to",
                  "enum": [
                    "Center",
                    "Left",
                    "Right",
                    "Top",
                    "Bottom",
                    "Top Left",
                    "Top Right",
                    "Bottom Left",
                    "Bottom Right"
                  ],
                  "description": "The relative position of the element to offset from (Center / Centre / Middle, Left, Right, Top, Bottom, Top Left, Top Right, Bottom Left, Bottom Right)",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAGlobalMouseClickOnElement"
      }
    },
    "/UIAControl/GlobalRightMouseClickOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global right mouse click on UIA element",
        "description": "Moves the mouse to the centre of an element and clicks the right mouse button.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGlobalRightMouseClickOnElement",
            "description": "Inputs for IA-Connect UIAGlobalRightMouseClickOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "FocusElementFirst": {
                  "type": "boolean",
                  "default": true,
                  "title": "Focus element first",
                  "description": "Should IA-Connect attempt to focus the element before global clicking?"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetX": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset X",
                  "description": "The number of X pixels to offset the click action by. This parameter supports both positive (right) and negative (left) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetY": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset Y",
                  "description": "The number of Y pixels to offset the click action by. This parameter supports both positive (down) and negative (up) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "OffsetRelativeTo": {
                  "type": "string",
                  "title": "Offset relative to",
                  "enum": [
                    "Center",
                    "Left",
                    "Right",
                    "Top",
                    "Bottom",
                    "Top Left",
                    "Top Right",
                    "Bottom Left",
                    "Bottom Right"
                  ],
                  "description": "The relative position of the element to offset from (Center / Centre / Middle, Left, Right, Top, Bottom, Top Left, Top Right, Bottom Left, Bottom Right)",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAGlobalRightMouseClickOnElement"
      }
    },
    "/UIAControl/GlobalMiddleMouseClickOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global middle mouse click on UIA element",
        "description": "Moves the mouse to the centre of an element and clicks the middle mouse button.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGlobalMiddleMouseClickOnElement",
            "description": "Inputs for IA-Connect UIAGlobalMiddleMouseClickOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "FocusElementFirst": {
                  "type": "boolean",
                  "default": true,
                  "title": "Focus element first",
                  "description": "Should IA-Connect attempt to focus the element before global clicking?"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetX": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset X",
                  "description": "The number of X pixels to offset the click action by. This parameter supports both positive (right) and negative (left) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetY": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset Y",
                  "description": "The number of Y pixels to offset the click action by. This parameter supports both positive (down) and negative (up) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "OffsetRelativeTo": {
                  "type": "string",
                  "title": "Offset relative to",
                  "enum": [
                    "Center",
                    "Left",
                    "Right",
                    "Top",
                    "Bottom",
                    "Top Left",
                    "Top Right",
                    "Bottom Left",
                    "Bottom Right"
                  ],
                  "description": "The relative position of the element to offset from (Center / Centre / Middle, Left, Right, Top, Bottom, Top Left, Top Right, Bottom Left, Bottom Right)",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAGlobalMiddleMouseClickOnElement"
      }
    },
    "/UIAControl/GlobalDoubleLeftMouseClickOnElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global double left mouse click on UIA element",
        "description": "Moves the mouse to the centre of an element and double clicks the left mouse button.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGlobalDoubleLeftMouseClickOnElement",
            "description": "Inputs for IA-Connect UIAGlobalDoubleLeftMouseClickOnElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "DelayInMilliseconds": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Delay in milliseconds",
                  "description": "The delay (in milliseconds) between each of the clicks."
                },
                "FocusElementFirst": {
                  "type": "boolean",
                  "default": true,
                  "title": "Focus element first",
                  "description": "Should IA-Connect attempt to focus the element before global clicking?"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetX": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset X",
                  "description": "The number of X pixels to offset the click action by. This parameter supports both positive (right) and negative (left) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "ClickOffsetY": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Click offset Y",
                  "description": "The number of Y pixels to offset the click action by. This parameter supports both positive (down) and negative (up) offset values.",
                  "x-ms-visibility": "advanced"
                },
                "OffsetRelativeTo": {
                  "type": "string",
                  "title": "Offset relative to",
                  "enum": [
                    "Center",
                    "Left",
                    "Right",
                    "Top",
                    "Bottom",
                    "Top Left",
                    "Top Right",
                    "Bottom Left",
                    "Bottom Right"
                  ],
                  "description": "The relative position of the element to offset from (Center / Centre / Middle, Left, Right, Top, Bottom, Top Left, Top Right, Bottom Left, Bottom Right)",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAGlobalDoubleLeftMouseClickOnElement"
      }
    },
    "/UIAControl/SelectElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Select UIA element",
        "description": "Selects an element (typically an item in a list or drop-down).",
        "parameters": [
          {
            "in": "body",
            "name": "UIASelectElement",
            "description": "Inputs for IA-Connect UIASelectElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIASelectElement"
      }
    },
    "/UIAControl/InputPasswordIntoElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Input password into UIA element",
        "description": "UIA action which inputs a password into an element (typically a password entry field), replacing the existing text.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAInputPasswordIntoElement",
            "description": "Inputs for IA-Connect UIAInputPasswordIntoElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "PasswordToInput": {
                  "type": "string",
                  "format": "password",
                  "title": "Password to input",
                  "description": "The password value to input."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "PasswordToInput",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAInputPasswordIntoElement"
      }
    },
    "/UIAControl/InputTextIntoElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Input text into UIA element",
        "description": "UIA action which inputs text into an element (typically a text entry field), either replacing the existing text or inserting the new value at a specific position.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAInputTextIntoElement",
            "description": "Inputs for IA-Connect UIAInputTextIntoElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "TextToInput": {
                  "type": "string",
                  "title": "Text to input",
                  "description": "The text value to input."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "ReplaceExistingValue": {
                  "type": "boolean",
                  "default": true,
                  "title": "Replace existing value",
                  "description": "If there is existing text in the element, should this be replaced?",
                  "x-ms-visibility": "advanced"
                },
                "InsertPosition": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Insert position",
                  "description": "The position (index) to begin inserting text. If there is existing text, the insert position can be used to insert at a specific position within the existing text.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "TextToInput",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAInputTextIntoElement"
      }
    },
    "/UIAControl/UIAInputTextIntoMultipleElements": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Input text into multiple UIA elements",
        "description": "UIA Action which inputs different pieces of text into multiple elements (typically text entry fields), either replacing the existing text or inserting the new value at a specific position.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAInputTextIntoMultipleElements",
            "description": "Inputs for IA-Connect UIAInputTextIntoMultipleElements action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "InputElementsJSON": {
                  "type": "string",
                  "title": "Input elements",
                  "description": "An array of UIA elements to enter text into, in JSON format."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "InputElementsJSON",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAInputTextIntoMultipleElements"
      }
    },
    "/UIAControl/InputReturnIntoElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Input return into UIA element",
        "description": "Inputs a Windows return / new line () into an element (typically a text entry field), either replacing the existing text or inserting the return at a specific position.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAInputReturnIntoElement",
            "description": "Inputs for IA-Connect UIAInputReturnIntoElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "ReplaceExistingValue": {
                  "type": "boolean",
                  "default": false,
                  "title": "Replace existing value",
                  "description": "If there is existing text in the element, should this be replaced?",
                  "x-ms-visibility": "advanced"
                },
                "InsertPosition": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Insert position",
                  "description": "The position (index) to begin inserting text. If there is existing text, the insert position can be used to insert at a specific position within the existing text.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAInputReturnIntoElement"
      }
    },
    "/UIAControl/FocusElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Focus UIA element",
        "description": "Focusses an element which makes it the active element for keyboard focus and, depending on the application, may bring the element window to the foreground.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAFocusElement",
            "description": "Inputs for IA-Connect UIAFocusElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAFocusElement"
      }
    },
    "/UIAControl/ToggleElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Toggle UIA element",
        "description": "Toggles an element (typically a checkbox or a radio box). This gives the element the opposite state to its current state (e.g. checked becomes unchecked and vice-versa). If you want to set a specific state, use the action 'Check element' instead.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAToggleElement",
            "description": "Inputs for IA-Connect UIAToggleElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAToggleElement"
      }
    },
    "/UIAControl/CheckElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check UIA element",
        "description": "Sets the state of an element (typically a checkbox or radio box) to either checked or unchecked.",
        "parameters": [
          {
            "in": "body",
            "name": "UIACheckElement",
            "description": "Inputs for IA-Connect UIACheckElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "CheckElement": {
                  "type": "boolean",
                  "default": true,
                  "title": "Check element",
                  "description": "Should the element be checked (true) or unchecked (false)?"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIACheckElement"
      }
    },
    "/UIAControl/UIACheckMultipleElements": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check multiple UIA elements",
        "description": "Sets the state of multiple elements (typically a checkbox or radio box) to either checked or unchecked.",
        "parameters": [
          {
            "in": "body",
            "name": "UIACheckMultipleElements",
            "description": "Inputs for IA-Connect UIACheckMultipleElements action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "InputElementsJSON": {
                  "type": "string",
                  "title": "Input elements",
                  "description": "An array of UIA elements to check, in JSON format."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "InputElementsJSON",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIACheckMultipleElements"
      }
    },
    "/UIAControl/UIAIsElementChecked": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Is UIA element checked",
        "description": "This action returns true or false indicating whether an element (typically a checkbox or radio box) is checked.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAIsElementChecked",
            "description": "Inputs for IA-Connect UIAIsElementChecked action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementIsChecked": {
                  "type": "boolean",
                  "title": "Element is checked",
                  "description": "Returns true if the element is checked or false if not."
                }
              }
            }
          }
        },
        "operationId": "UIAIsElementChecked"
      }
    },
    "/UIAControl/CloseElementWindow": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Close UIA element window",
        "description": "Closes the element window. Typically only works on windows or dialogs.",
        "parameters": [
          {
            "in": "body",
            "name": "UIACloseElementWindow",
            "description": "Inputs for IA-Connect UIACloseElementWindow action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIACloseElementWindow"
      }
    },
    "/UIAControl/GetElementTextValue": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA element text value",
        "description": "Returns the text value of an element. A text value is usually associated with a label, but many elements can have this property.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetElementTextValue",
            "description": "Inputs for IA-Connect UIAGetElementTextValue action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementTextValue": {
                  "type": "string",
                  "title": "Element text value",
                  "description": "The text value of the element."
                }
              }
            }
          }
        },
        "operationId": "UIAGetElementTextValue"
      }
    },
    "/UIAControl/GetElementValue": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA element value",
        "description": "Returns the value of an element. A value is usually associated with a text input area, but many elements can have this property.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetElementValue",
            "description": "Inputs for IA-Connect UIAGetElementValue action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementValue": {
                  "type": "string",
                  "title": "Element value",
                  "description": "The value of the element."
                }
              }
            }
          }
        },
        "operationId": "UIAGetElementValue"
      }
    },
    "/UIAControl/GetElementLabelValue": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA element label value",
        "description": "Returns the value of the label on the element.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetElementLabelValue",
            "description": "Inputs for IA-Connect UIAGetElementLabelValue action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementLabelValue": {
                  "type": "string",
                  "title": "Element label value",
                  "description": "The value of the label on the element."
                }
              }
            }
          }
        },
        "operationId": "UIAGetElementLabelValue"
      }
    },
    "/UIAControl/GetElementProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA element properties",
        "description": "Returns all properties of an element. This can be useful if you are uncertain which field holds the property values required.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetElementProperties",
            "description": "Inputs for IA-Connect UIAGetElementProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "ReturnElementHandle": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return element handle",
                  "description": "If set to true than a handle to the located element will be returned. This handle can be used in further actions to act as a 'parent' handle.",
                  "x-ms-visibility": "advanced"
                },
                "ReturnElementValue": {
                  "type": "boolean",
                  "default": false,
                  "title": "Return element value",
                  "description": "If set to true than the value of the located element will be returned."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ElementName": {
                  "type": "string",
                  "title": "Element name",
                  "description": "The UIA name of the element."
                },
                "ElementClassName": {
                  "type": "string",
                  "title": "Element class name",
                  "description": "The UIA class name of the element."
                },
                "ElementAutomationId": {
                  "type": "string",
                  "title": "Element automation Id",
                  "description": "The UIA automation Id of the element."
                },
                "ElementFrameworkId": {
                  "type": "string",
                  "title": "Element framework Id",
                  "description": "The UIA framework Id of the element."
                },
                "ElementControlType": {
                  "type": "string",
                  "title": "Element control type",
                  "description": "The UIA control type as a number. This is similar to localized control type but isn't language specific."
                },
                "ElementLocalizedControlType": {
                  "type": "string",
                  "title": "Element localized control type",
                  "description": "The UIA localized control type of the element."
                },
                "ElementIsEnabled": {
                  "type": "boolean",
                  "title": "Element is enabled",
                  "description": "Returns whether the element enabled or not."
                },
                "ElementIsOffscreen": {
                  "type": "boolean",
                  "title": "Element is offscreen",
                  "description": "Returns whether the element is offscreen or not."
                },
                "ElementIsKeyboardFocusable": {
                  "type": "boolean",
                  "title": "Element is keyboard focusable",
                  "description": "Returns whether the element can be focussed by the keyboard."
                },
                "ElementHasKeyboardFocus": {
                  "type": "boolean",
                  "title": "Element has keyboard focus",
                  "description": "Returns whether the element currently has keyboard focus."
                },
                "ElementIsPasswordField": {
                  "type": "boolean",
                  "title": "Element is password field",
                  "description": "Returns whether an element is a password input field."
                },
                "ElementAcceleratorKey": {
                  "type": "string",
                  "title": "Element accelerator key",
                  "description": "Returns the hotkey which could be pressed to activate the element."
                },
                "ElementAccessKey": {
                  "type": "string",
                  "title": "Element access key",
                  "description": "Returns the hotkey which could be pressed to activate a menu element."
                },
                "ElementLeftEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element left edge",
                  "description": "The distance in pixels between the left edge of the element or window and the left edge of the display."
                },
                "ElementRightEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element right edge",
                  "description": "The distance in pixels between the right edge of the element or window and the left edge of the display."
                },
                "ElementTopEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element top edge",
                  "description": "The distance in pixels between the top edge of the element or window and the top edge of the display."
                },
                "ElementBottomEdge": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element bottom edge",
                  "description": "The distance in pixels between the bottom edge of the element or window and the top edge of the display."
                },
                "ElementClickablePointX": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element clickable point X",
                  "description": "The X coordinate in pixels of a central clickable point in the element relative to the left edge of the display as returned by the underlying application."
                },
                "ElementClickablePointY": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element clickable point Y",
                  "description": "The Y coordinate in pixels of a central clickable point in the element relative to the top edge of the display as returned by the underlying application."
                },
                "ElementProcessId": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element process ID",
                  "description": "The Process ID (PID) of the process which owns this element."
                },
                "ElementHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element handle",
                  "description": "If the input 'Return element handle' was set to true, this will hold a numeric element handle which can be used in further actions to act as a 'parent' handle for further actions."
                },
                "ElementValue": {
                  "type": "string",
                  "title": "Element value",
                  "description": "If the input 'Return element value' was set to true and if the element has a value pattern, this will hold that value."
                },
                "ElementTextValue": {
                  "type": "string",
                  "title": "Element text value",
                  "description": "If the input 'Return element value' was set to true and if the element has a text value pattern, this will hold that text value."
                }
              }
            }
          }
        },
        "operationId": "UIAGetElementProperties"
      }
    },
    "/UIAControl/GetMultipleElementProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get multiple UIA element properties",
        "description": "Returns the properties of multiple elements. This can be useful if you are uncertain which fields holds the property values required.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetMultipleElementProperties",
            "description": "Inputs for IA-Connect UIAGetMultipleElementProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchDescendants": {
                  "type": "boolean",
                  "default": false,
                  "title": "Search descendants",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "ReturnElementHandle": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return element handle",
                  "description": "If set to true than a handle to the located element will be returned. This handle can be used in further actions to act as a 'parent' handle.",
                  "x-ms-visibility": "advanced"
                },
                "ReturnElementValue": {
                  "type": "boolean",
                  "default": false,
                  "title": "Return element value",
                  "description": "If set to true than the value of the located element will be returned."
                },
                "FirstItemToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "First item to return",
                  "description": "The element index of the first item to return, starting from 1. If you wish to return the elements in the reverse order (from the bottom of the UIA tree), you can alternatively specify a negative index starting from -1.",
                  "x-ms-visibility": "advanced"
                },
                "MaxItemsToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max items to return",
                  "description": "The maximum number of elements to return, or 0 to return all items.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfElementsFound": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of elements found",
                  "description": "The number of elements found that match the search criteria."
                },
                "NumberOfElementsReturned": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of elements returned",
                  "description": "The number of elements returned (this can be lower than the number of elements found if specifying a maximum number of items to return)."
                },
                "ElementProperties": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Element properties",
                  "description": "The element properties of the elements found that match the search criteria."
                }
              }
            }
          }
        },
        "operationId": "UIAGetMultipleElementProperties"
      }
    },
    "/UIAControl/GetDesktopElements": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA desktop elements",
        "description": "Returns a list of all windows and dialogs on the desktop.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetDesktopElements",
            "description": "Inputs for IA-Connect UIAGetDesktopElements action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "SearchElementLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "Filter the results by the localized control type of the element."
                },
                "SearchProcessID": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Search process Id",
                  "description": "If specified then the search will only consider elements owned by a process with this Process ID (PID). If IA-Connect launched the process then the PID is provided by the 'Run Process' action in the IA-Connect Environment / Session actions. If you don't know the PID then leave this field blank."
                },
                "ReturnElementHandle": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return element handle",
                  "description": "If set to true than a handle to the located element will be returned. This handle can be used in further actions to act as a 'parent' handle.",
                  "x-ms-visibility": "advanced"
                },
                "FirstItemToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "First item to return",
                  "description": "The element index of the first item to return, starting from 1. If you wish to return the elements in the reverse order (from the bottom of the UIA tree), you can alternatively specify a negative index starting from -1.",
                  "x-ms-visibility": "advanced"
                },
                "MaxItemsToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max items to return",
                  "description": "The maximum number of elements to return, or 0 to return all items.",
                  "x-ms-visibility": "advanced"
                },
                "IncludeChildProcesses": {
                  "type": "boolean",
                  "default": false,
                  "title": "Include child processes",
                  "description": "If set to true and a 'Search process Id' is specified, child processes of that process Id are also included in the search. If set to false then only a process matching the exact 'Search process Id' will be returned.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfElementsFound": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of elements found",
                  "description": "The number of desktop elements found that match the search criteria."
                },
                "NumberOfElementsReturned": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of elements returned",
                  "description": "The number of desktop elements returned (this can be lower than the number of elements found if specifying a maximum number of items to return)."
                },
                "ElementProperties": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Element properties",
                  "description": "The element properties of the desktop elements found that match the search criteria."
                }
              }
            }
          }
        },
        "operationId": "UIAGetDesktopElements"
      }
    },
    "/UIAControl/ExpandElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Expand UIA element",
        "description": "Expands an element (typically a menu / dropdown item). If the item is already expanded, nothing will happen.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAExpandElement",
            "description": "Inputs for IA-Connect UIAExpandElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAExpandElement"
      }
    },
    "/UIAControl/CollapseElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Collapse UIA element",
        "description": "Collapses an element (typically a menu / dropdown item). If the item is already collapsed, nothing will happen.",
        "parameters": [
          {
            "in": "body",
            "name": "UIACollapseElement",
            "description": "Inputs for IA-Connect UIACollapseElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIACollapseElement"
      }
    },
    "/UIAControl/TakeScreenShotOfElementLocation": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Take screenshot of UIA element location",
        "description": "Takes a screenshot of the location of an element and returns an image. The element should be brought to the front first as the screenshot is taking a copy of the screen at the elements location.",
        "parameters": [
          {
            "in": "body",
            "name": "UIATakeScreenShotOfElementLocation",
            "description": "Inputs for IA-Connect UIATakeScreenShotOfElementLocation action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "ImageFormat": {
                  "type": "string",
                  "title": "Image format",
                  "enum": [
                    "PNG",
                    "JPG",
                    "BMP",
                    "GIF"
                  ],
                  "description": "The image format to use for the screenshot. This can affect the quality and size of data being returned. Supported formats are PNG (the default), JPG, BMP and GIF"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ScreenBitmapBase64": {
                  "type": "string",
                  "title": "Screen image as Base64",
                  "description": "The screen image as a Base64 encoded string."
                }
              }
            }
          }
        },
        "operationId": "UIATakeScreenShotOfElementLocation"
      }
    },
    "/UIAControl/DrawRectangleAroundElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Draw rectangle around UIA element",
        "description": "Draws a rectangle around the perimeter of an element to aid in identifying that the element found is the one required. The rectangle is automatically removed after 5 seconds.",
        "parameters": [
          {
            "in": "body",
            "name": "UIADrawRectangleAroundElement",
            "description": "Inputs for IA-Connect UIADrawRectangleAroundElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "PenColour": {
                  "type": "string",
                  "default": "#800080",
                  "title": "Pen colour",
                  "description": "The colour of the rectangle to be drawn (e.g. red, green, blue, yellow, purple or orange) or a string hex code e.g. #FF0000."
                },
                "PenThicknessPixels": {
                  "type": "integer",
                  "format": "int32",
                  "default": 4,
                  "title": "Pen thickness pixels",
                  "description": "The thickness (in pixels) of the highlight rectangle border."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIADrawRectangleAroundElement"
      }
    },
    "/UIAControl/GetParentElementHandle": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA parent element handle",
        "description": "Returns a handle for the parent element of the specified element. The parent element is defined as the element which is at the next level up the UIA 'tree' and is almost always a containing element.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetParentElementHandle",
            "description": "Inputs for IA-Connect UIAGetParentElementHandle action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ElementHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element handle",
                  "description": "The UIA handle for the target element."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ElementHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "ParentElementHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent element handle",
                  "description": "A UIA handle for the parent element."
                }
              }
            }
          }
        },
        "operationId": "UIAGetParentElementHandle"
      }
    },
    "/UIAControl/GetDataGridElementContents": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA datagrid element contents",
        "description": "Returns the contents of a DataGrid element. This is an element with rows, columns, header and cells (i.e. a table).",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetDataGridElementContents",
            "description": "Inputs for IA-Connect UIAGetDataGridElementContents action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "OnScreenColumnsOnly": {
                  "type": "boolean",
                  "default": true,
                  "title": "Retrieve Onscreen columns only",
                  "description": "If set to true then only onscreen columns will be returned."
                },
                "OnScreenRowsOnly": {
                  "type": "boolean",
                  "default": true,
                  "title": "Retrieve Onscreen rows only",
                  "description": "If set to true then only onscreen rows will be returned."
                },
                "ReturnNullValuesAsBlank": {
                  "type": "boolean",
                  "default": true,
                  "title": "Return null values as blank",
                  "description": "If set to true, null values will be returned as '' (i.e. blank). If set to false, null values are typically returned as '(null)'.",
                  "x-ms-visibility": "advanced"
                },
                "AlternativeHeaderRowName": {
                  "type": "string",
                  "title": "Alternative header row name",
                  "description": "By default, the header row in a DataGrid has the UIA name 'Top Row'. If the header row has a different name, specify that name here.",
                  "x-ms-visibility": "advanced"
                },
                "ReturnRowUIAName": {
                  "type": "boolean",
                  "default": false,
                  "title": "Return row UIA name",
                  "description": "If this input is set to then the row UIA name will be stored in a column in the output collection. The name of the column is defined by the input 'Name of column to store row UIA name'.",
                  "x-ms-visibility": "advanced"
                },
                "NameOfColumnToStoreRowUIAName": {
                  "type": "string",
                  "title": "Name of column to store row UIA name",
                  "description": "If the input 'Return row UIA name' is set to true then this input specifies the name of the column in the output collection to hold the row UIA name.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "FirstItemToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "First item to return",
                  "description": "The element index of the first item to return, starting from 1. If you wish to return the elements in the reverse order (from the bottom of the UIA tree), you can alternatively specify a negative index starting from -1.",
                  "x-ms-visibility": "advanced"
                },
                "MaxItemsToReturn": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0,
                  "title": "Max items to return",
                  "description": "The maximum number of elements to return, or 0 to return all items.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "DataGridContentsJSON": {
                  "type": "string",
                  "title": "Datagrid contents JSON",
                  "description": "The datagrid element contents, in JSON format."
                }
              }
            }
          }
        },
        "operationId": "UIAGetDataGridElementContents"
      }
    },
    "/UIAControl/GetDataGridElementProperties": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA datagrid element properties",
        "description": "Returns table properties of a DataGrid element. This is an element with rows, columns, header and cells (i.e. a table).",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetDataGridElementProperties",
            "description": "Inputs for IA-Connect UIAGetDataGridElementProperties action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "AlternativeHeaderRowName": {
                  "type": "string",
                  "title": "Alternative header row name",
                  "description": "By default, the header row in a DataGrid has the UIA name 'Top Row'. If the header row has a different name, specify that name here.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfColumns": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of columns",
                  "description": "The number of columns in the datagrid."
                },
                "NumberOfVisibleColumns": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of visible columns",
                  "description": "The number of visible columns in the datagrid."
                },
                "NumberOfRows": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of rows",
                  "description": "The number of rows in the datagrid."
                },
                "NumberOfVisibleRows": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of visible rows",
                  "description": "The number of visible rows in the datagrid."
                },
                "FirstVisibleRow": {
                  "type": "integer",
                  "format": "int32",
                  "title": "First visible row",
                  "description": "The index of the first visible row in the datagrid."
                },
                "LastVisibleRow": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Last visible row",
                  "description": "The index of the last visible row in the datagrid."
                },
                "NumberOfScrollbars": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of scrollbars",
                  "description": "The number of scrollbars that the datagrid has."
                },
                "ScrollbarNames": {
                  "type": "string",
                  "title": "Scrollbar names",
                  "description": "A comma separated list of the names of the scrollbars (e.g. Horizontal, Vertical)."
                }
              }
            }
          }
        },
        "operationId": "UIAGetDataGridElementProperties"
      }
    },
    "/UIAControl/GetListElementItems": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA list element items",
        "description": "Returns a list of child element items found under the specified element (typically dropdown / menu items).",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetListElementItems",
            "description": "Inputs for IA-Connect UIAGetListElementItems action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "ExpandFirst": {
                  "type": "boolean",
                  "default": false,
                  "title": "Expand first",
                  "description": "If set to true then IA-Connect will attempt to expand the list before searching for the list item elements. This is useful for dynamic lists as the list item elements may not be created until the list is expanded."
                },
                "CollapseAfter": {
                  "type": "boolean",
                  "default": false,
                  "title": "Collapse after",
                  "description": "If set to true then the list will be collapsed after executing the search."
                },
                "CheckForSelectedItems": {
                  "type": "boolean",
                  "default": true,
                  "title": "Check for selected items",
                  "description": "If set to true then the output collection will contain an additional property indicating whether the list item is currently selected."
                },
                "SecondsBetweenExpandCollapse": {
                  "type": "number",
                  "format": "double",
                  "default": 0,
                  "title": "Seconds between expand and collapse",
                  "description": "The number of seconds to wait between the expand and collapse actions if these are set to true."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfListItems": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of list items",
                  "description": "The number of items in the list."
                },
                "ListItemsJSON": {
                  "type": "string",
                  "title": "List items JSON",
                  "description": "The properties of the items in the list, in JSON format."
                },
                "NumberOfSelectedItems": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of selected items",
                  "description": "The number of selected items in the list."
                },
                "IndexOfFirstSelectedItem": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Index of first selected item",
                  "description": "The index in the list of the first selected item."
                },
                "SelectedItemName": {
                  "type": "string",
                  "title": "Selected item name",
                  "description": "The name of the selected item."
                }
              }
            }
          }
        },
        "operationId": "UIAGetListElementItems"
      }
    },
    "/UIAControl/ClickListElementItemByName": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Click UIA list element item by name",
        "description": "Clicks the list element with the specified name. This is typically used to select an item in a dropdown / menu item.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAClickListElementItemByName",
            "description": "Inputs for IA-Connect UIAClickListElementItemByName action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "ExpandFirst": {
                  "type": "boolean",
                  "default": false,
                  "title": "Expand first",
                  "description": "If set to true then IA-Connect will attempt to expand the list before searching for the list item elements. This is useful for dynamic lists as the list item elements may not be created until the list is expanded."
                },
                "CollapseAfter": {
                  "type": "boolean",
                  "default": false,
                  "title": "Collapse after",
                  "description": "If set to true then the list will be collapsed after executing the search."
                },
                "ItemName": {
                  "type": "string",
                  "title": "Item name",
                  "description": "The name of the element item to be clicked."
                },
                "SecondsBetweenExpandCollapse": {
                  "type": "number",
                  "format": "double",
                  "title": "Seconds between expand and collapse",
                  "description": "The number of seconds to wait between the expand and collapse actions if these are set to true."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAClickListElementItemByName"
      }
    },
    "/UIAControl/ClickListElementItemByIndex": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Click UIA list element item by index",
        "description": "Clicks the list element that matches the specified index. This is typically used to select an item in a dropdown / menu item.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAClickListElementItemByIndex",
            "description": "Inputs for IA-Connect UIAClickListElementItemByIndex action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "ExpandFirst": {
                  "type": "boolean",
                  "default": false,
                  "title": "Expand first",
                  "description": "If set to true then IA-Connect will attempt to expand the list before searching for the list item elements. This is useful for dynamic lists as the list item elements may not be created until the list is expanded."
                },
                "CollapseAfter": {
                  "type": "boolean",
                  "default": false,
                  "title": "Collapse after",
                  "description": "If set to true then the list will be collapsed after executing the search."
                },
                "ItemIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Item index",
                  "description": "The index in the list of the item to be clicked."
                },
                "SecondsBetweenExpandCollapse": {
                  "type": "number",
                  "format": "double",
                  "title": "Seconds between expand and collapse",
                  "description": "The number of seconds to wait between the expand and collapse actions if these are set to true."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAClickListElementItemByIndex"
      }
    },
    "/UIAControl/UIASetElementToNumericValue": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set UIA element to numeric value",
        "description": "Sets the value of the element which has a numeric input, for example a text field or a scrollbar.",
        "parameters": [
          {
            "in": "body",
            "name": "UIASetElementToNumericValue",
            "description": "Inputs for IA-Connect UIASetElementToNumericValue action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "NewValue": {
                  "type": "integer",
                  "format": "int32",
                  "title": "New value",
                  "description": "The numeric value to set the element to."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "NewValue",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIASetElementToNumericValue"
      }
    },
    "/UIAControl/UIASetElementToNumericRangeValue": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set UIA element to numeric range value",
        "description": "Sets the value of the element which has a numeric range, for example a scrollbar.",
        "parameters": [
          {
            "in": "body",
            "name": "UIASetElementToNumericRangeValue",
            "description": "Inputs for IA-Connect UIASetElementToNumericRangeValue action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "NewValue": {
                  "type": "number",
                  "format": "double",
                  "title": "New value",
                  "description": "The numeric range value to set the element to."
                },
                "NewValueIsPercentage": {
                  "type": "boolean",
                  "default": false,
                  "title": "New value is percentage",
                  "description": "Is the new value a percentage?"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "NewValue",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIASetElementToNumericRangeValue"
      }
    },
    "/UIAControl/UIAResetAllElementHandles": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Reset all UIA element handles",
        "description": "Resets all UIA element handles currently stored by IA-Connect which can be useful if you have been identifying a lot of elements and have a large number of element handles stored. In scenarios with extremely high numbers of element handles (100,000+) this action can also be used to free up RAM usage.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAResetAllElementHandles",
            "description": "Inputs for IA-Connect UIAResetAllElementHandles action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAResetAllElementHandles"
      }
    },
    "/UIAControl/UIAGlobalPasswordInputIntoElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global input password into UIA element",
        "description": "Moves the mouse to centre of the element, focusses it, left clicks, and presses keys. Typically used with a password input that will not accept native UIA input methods.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGlobalPasswordInputIntoElement",
            "description": "Inputs for IA-Connect UIAGlobalPasswordInputIntoElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "FocusElement": {
                  "type": "boolean",
                  "default": true,
                  "title": "Focus element first",
                  "description": "Should IA-Connect attempt to focus the element before global clicking?"
                },
                "GlobalMouseClickOnElement": {
                  "type": "boolean",
                  "default": true,
                  "title": "Global left mouse click on element",
                  "description": "Should a global mouse click be performed at the element coordinates (to focus the element) before entering text?"
                },
                "ReplaceExistingValueUsingDoubleClickDelete": {
                  "type": "boolean",
                  "default": false,
                  "title": "Replace existing value using double mouse click delete",
                  "description": "Should any existing value be replaced by double clicking the mouse (to highlight it) and then deleting?",
                  "x-ms-visibility": "advanced"
                },
                "ReplaceExistingValueUsingCTRLADelete": {
                  "type": "boolean",
                  "default": false,
                  "title": "Replace existing value using CTRL-A delete",
                  "description": "Should any existing value be replaced by pressing Ctrl-A (to highlight all) and then deleting? Some elements may not support highlighting with Ctrl-A in which case the alternative option of 'Replace existing value using double mouse click delete' should be tried.",
                  "x-ms-visibility": "advanced"
                },
                "PasswordToInput": {
                  "type": "string",
                  "format": "password",
                  "title": "Password to input",
                  "description": "The password value to global input."
                },
                "SendKeyEvents": {
                  "type": "boolean",
                  "default": false,
                  "title": "Use send key events",
                  "description": "If set to true then send key events (a lower level API which sends simulated keystrokes to the operating system) will be used. If set to false then send keys (a higher level API which sends keystrokes to the focused element) will be used instead.",
                  "x-ms-visibility": "advanced"
                },
                "Interval": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Interval in milliseconds",
                  "description": "The number of milliseconds between each key press."
                },
                "DontInterpretSymbols": {
                  "type": "boolean",
                  "default": false,
                  "title": "Dont interpret symbols",
                  "description": "Should symbols in the 'Password to input' not be interpreted as special keys (e.g. + for Shift, ^ for Ctrl)? This should be set to true if you are attempting to input the actual symbols.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "PasswordToInput",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAGlobalPasswordInputIntoElement"
      }
    },
    "/UIAControl/UIAGlobalTextInputIntoElement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Global input text into UIA element",
        "description": "Moves the mouse to centre of the element, focusses it, left clicks, and presses keys. Typically used with a text input that will not accept native UIA input methods.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGlobalTextInputIntoElement",
            "description": "Inputs for IA-Connect UIAGlobalTextInputIntoElement action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ParentWindowHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Parent window handle",
                  "description": "The parent UIA window handle to act as the starting point for the search. This can be discovered via Inspection using actions like 'Wait for desktop element' or 'Wait for element'."
                },
                "SearchElementName": {
                  "type": "string",
                  "title": "Search element name",
                  "description": "The optional UIA element name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementClassName": {
                  "type": "string",
                  "title": "Search element class name",
                  "description": "The optional UIA element class name to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchElementAutomationId": {
                  "type": "string",
                  "title": "Search element automation ID",
                  "description": "The optional UIA element automation ID to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchLocalizedControlType": {
                  "type": "string",
                  "title": "Search element localized control type",
                  "description": "The optional UIA element localized control type to search for (starting from the parent window handle). This can be discovered via Inspection."
                },
                "SearchSubTree": {
                  "type": "boolean",
                  "default": true,
                  "title": "Search UIA subtree",
                  "description": "If set to true then the whole UIA tree below the parent window handle will be searched. This is more thorough but can take longer. If set to false, only elements directly below the parent window handle in the UIA tree will be searched."
                },
                "MatchIndex": {
                  "type": "integer",
                  "format": "int32",
                  "default": 1,
                  "title": "Match index",
                  "description": "If multiple elements match the search, which element (starting at 1) should be matched. Can be used in conjunction with 'Sort by column' to choose the sort order for matching.",
                  "x-ms-visibility": "advanced"
                },
                "SearchFilter": {
                  "type": "string",
                  "title": "Search filter",
                  "description": "An optional advanced filter to further restrict the search using conditional operators and any element field. Example 1: [Width] < 200. Example 2: [Name] like 'Document*' AND [ClassName] like 'Label*'. See the documentation for more examples.",
                  "x-ms-visibility": "advanced"
                },
                "SortByColumn": {
                  "type": "string",
                  "title": "Sort by column name",
                  "description": "If multiple elements match the search, this allows you to specify which element property to sort by. This will be used in conjunction with 'Match index' to pick the required element. For example: If 'Sort by column name' is [TopEdge] and 'Match index' is 1 then the matching element nearest the top of the screen will be matched.",
                  "x-ms-visibility": "advanced"
                },
                "MatchIndexAscending": {
                  "type": "boolean",
                  "default": true,
                  "title": "Match index is ascending",
                  "description": "If multiple elements match the search, should 'Match index' match from the top of the sorted list (true) or from the bottom of the sorted list (false).",
                  "x-ms-visibility": "advanced"
                },
                "FocusElement": {
                  "type": "boolean",
                  "default": true,
                  "title": "Focus element first",
                  "description": "Should IA-Connect attempt to focus the element before global clicking?"
                },
                "GlobalMouseClickOnElement": {
                  "type": "boolean",
                  "default": true,
                  "title": "Global left mouse click on element",
                  "description": "Should a global mouse click be performed at the element coordinates (to focus the element) before entering text?"
                },
                "ReplaceExistingValueUsingDoubleClickDelete": {
                  "type": "boolean",
                  "default": false,
                  "title": "Replace existing value using double mouse click delete",
                  "description": "Should any existing value be replaced by double clicking the mouse (to highlight it) and then deleting?",
                  "x-ms-visibility": "advanced"
                },
                "ReplaceExistingValueUsingCTRLADelete": {
                  "type": "boolean",
                  "default": false,
                  "title": "Replace existing value using CTRL-A delete",
                  "description": "Should any existing value be replaced by pressing Ctrl-A (to highlight all) and then deleting? Some elements may not support highlighting with Ctrl-A in which case the alternative option of 'Replace existing value using double mouse click delete' should be tried.",
                  "x-ms-visibility": "advanced"
                },
                "TextToInput": {
                  "type": "string",
                  "title": "Text to input",
                  "description": "The text value to global input."
                },
                "SendKeyEvents": {
                  "type": "boolean",
                  "default": false,
                  "title": "Use send key events",
                  "description": "If set to true then send key events (a lower level API which sends simulated keystrokes to the operating system) will be used. If set to false then send keys (a higher level API which sends keystrokes to the focused element) will be used instead.",
                  "x-ms-visibility": "advanced"
                },
                "Interval": {
                  "type": "integer",
                  "format": "int32",
                  "default": 10,
                  "title": "Interval in milliseconds",
                  "description": "The number of milliseconds between each key press.",
                  "x-ms-visibility": "advanced"
                },
                "DontInterpretSymbols": {
                  "type": "boolean",
                  "default": false,
                  "title": "Dont interpret symbols",
                  "description": "Should symbols in the 'Text to input' not be interpreted as special keys (e.g. + for Shift, ^ for Ctrl)? This should be set to true if you are attempting to input the actual symbols.",
                  "x-ms-visibility": "advanced"
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ParentWindowHandle",
                "TextToInput",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIAGlobalTextInputIntoElement"
      }
    },
    "/UIAControl/UIAGetElementPropertiesAsList": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Get UIA element properties as list",
        "description": "Returns the properties of an element as a single line list (single line collection / data table) instead of individual items, this maybe useful depending on how you intend to use the data.",
        "parameters": [
          {
            "in": "body",
            "name": "UIAGetElementPropertiesAsList",
            "description": "Inputs for IA-Connect UIAGetElementPropertiesAsList action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ElementHandle": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Element handle",
                  "description": "The UIA handle for the target element."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "ElementHandle",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "NumberOfElementsFound": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of elements found",
                  "description": "The number of elements found."
                },
                "NumberOfElementsReturned": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Number of elements returned",
                  "description": "The number of elements returned."
                },
                "UIAElementPropertiesJSON": {
                  "type": "string",
                  "title": "UIA element properties JSON",
                  "description": "The UIA properties of the element, in JSON format."
                }
              }
            }
          }
        },
        "operationId": "UIAGetElementPropertiesAsList"
      }
    },
    "/UIAControl/UIASetTransactionTimeout": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Set UIA transaction timeout",
        "description": "Controls how long the UIA API will wait for an application to return the information about an element. This transaction timeout would typically only be reached if the application was non-responsive.",
        "parameters": [
          {
            "in": "body",
            "name": "UIASetTransactionTimeout",
            "description": "Inputs for IA-Connect UIASetTransactionTimeout action",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "TimeoutInSeconds": {
                  "type": "number",
                  "format": "double",
                  "default": 5,
                  "title": "Timeout in seconds",
                  "description": "The maximum length of time that the UIA API will wait for an application to return the information about an element."
                },
                "Workflow": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "default": "@{workflow()}",
                  "title": "Workflow",
                  "description": "Add the following expression here: workflow()"
                }
              },
              "required": [
                "TimeoutInSeconds",
                "Workflow"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {}
          }
        },
        "operationId": "UIASetTransactionTimeout"
      }
    }
  },
  "definitions": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "RESTAPIKey"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": []
}