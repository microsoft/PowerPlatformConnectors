{
  "basePath": "/api/",
  "consumes": [],
  "definitions": {
    "policyResultResource": {
      "properties": {
        "Enabled": {
          "default": false,
          "description": "True if the resource is enabled and false if it's disabled",
          "title": "Enabled",
          "type": "boolean"
        },
        "Id": {
          "default": "",
          "description": "Unique ID of the resource",
          "pattern": "^(.*)$",
          "title": "ID",
          "type": "string"
        },
        "LastUsed": {
          "default": "",
          "description": "Date and time when the resource was last used",
          "pattern": "^(.*)$",
          "title": "Last-used date and time",
          "type": "string"
        },
        "Name": {
          "default": "",
          "description": "Name of the resource",
          "pattern": "^(.*)$",
          "title": "Name",
          "type": "string"
        },
        "NonCompliantSince": {
          "default": "",
          "description": "Date and time when the analysis discovered the resource as being non-compliant with the policy",
          "pattern": "^(.*)$",
          "title": "Non-compliant since",
          "type": "string"
        },
        "Owners": {
          "description": "List of principals who own this resource",
          "items": {
            "$ref": "#/definitions/policyResultResourcePrincipalWithoutResources"
          },
          "title": "Owners",
          "type": "array"
        },
        "Type": {
          "default": "",
          "description": "Type of the resource",
          "pattern": "^(.*)$",
          "title": "Type",
          "type": "string"
        },
        "Url": {
          "default": "",
          "description": "URL to access the resource in the browser",
          "pattern": "^(.*)$",
          "title": "URL",
          "type": "string"
        },
        "Users": {
          "description": "List of principals who use this resource",
          "items": {
            "$ref": "#/definitions/policyResultResourcePrincipalWithoutResources"
          },
          "title": "Users",
          "type": "array"
        }
      },
      "required": [
        "Type",
        "Name",
        "Url",
        "Id",
        "NonCompliantSince",
        "Enabled",
        "LastUsed"
      ],
      "type": "object"
    },
    "policyResultResourcePrincipal": {
      "properties": {
        "Email": {
          "default": "",
          "description": "Person's e-mail address",
          "pattern": "^(.*)$",
          "title": "E-mail",
          "type": "string"
        },
        "Name": {
          "default": "",
          "description": "User's or group's display name",
          "pattern": "^(.*)$",
          "title": "Name",
          "type": "string"
        },
        "OwnedNonCompliantResources": {
          "description": "Non-compliant resources owned by this principal",
          "items": {
            "$ref": "#/definitions/policyResultResourceWithoutPrincipals"
          },
          "title": "Owned non-compliant resources",
          "type": "array"
        },
        "Type": {
          "default": "",
          "description": "Type of principal",
          "pattern": "^(.*)$",
          "title": "Type",
          "type": "string"
        },
        "UsedNonCompliantResources": {
          "description": "Non-compliant resources used by this principal",
          "items": {
            "$ref": "#/definitions/policyResultResourceWithoutPrincipals"
          },
          "title": "Used non-compliant resources",
          "type": "array"
        }
      },
      "required": [
        "Name",
        "Type"
      ],
      "type": "object"
    },
    "policyResultResourcePrincipalWithoutResources": {
      "properties": {
        "Email": {
          "default": "",
          "description": "Person's e-mail address",
          "pattern": "^(.*)$",
          "title": "E-mail",
          "type": "string"
        },
        "Name": {
          "default": "",
          "description": "User's or group's display name",
          "pattern": "^(.*)$",
          "title": "Name",
          "type": "string"
        },
        "Type": {
          "default": "",
          "description": "Type of principal",
          "pattern": "^(.*)$",
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "Name",
        "Type"
      ],
      "type": "object"
    },
    "policyResultResourceWithoutPrincipals": {
      "properties": {
        "Enabled": {
          "default": false,
          "description": "True if the resource is enabled and false if it's disabled",
          "title": "Enabled",
          "type": "boolean"
        },
        "Id": {
          "default": "",
          "description": "Unique ID of the resource",
          "pattern": "^(.*)$",
          "title": "ID",
          "type": "string"
        },
        "LastUsed": {
          "default": "",
          "description": "Date and time when the resource was last used",
          "pattern": "^(.*)$",
          "title": "Last-used date and time",
          "type": "string"
        },
        "Name": {
          "default": "",
          "description": "Name of the resource",
          "pattern": "^(.*)$",
          "title": "Name",
          "type": "string"
        },
        "NonCompliantSince": {
          "default": "",
          "description": "Date and time when the analysis discovered the resource as being non-compliant with the policy",
          "pattern": "^(.*)$",
          "title": "Non-compliant since",
          "type": "string"
        },
        "Type": {
          "default": "",
          "description": "Type of the resource",
          "pattern": "^(.*)$",
          "title": "Type",
          "type": "string"
        },
        "Url": {
          "default": "",
          "description": "URL to access the resource in the browser",
          "pattern": "^(.*)$",
          "title": "URL",
          "type": "string"
        }
      },
      "required": [
        "Type",
        "Name",
        "Url",
        "Id",
        "NonCompliantSince",
        "Enabled",
        "LastUsed"
      ],
      "type": "object"
    }
  },
  "host": "api-app.rencore.com",
  "info": {
    "description": "Rencore Governance helps you to automate managing your Office 365 tenant.",
    "title": "Rencore Governance",
    "version": "1.0",
    "x-ms-api-annotation": {
      "status": "Preview"
    }
  },
  "parameters": {},
  "paths": {
    "/v1/apps": {
      "get": {
        "description": "Get connected tenants",
        "operationId": "GetApps",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type:": {
                "description": "Content-Type:",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "properties": {
                  "id": {
                    "description": "id",
                    "type": "string"
                  },
                  "name": {
                    "description": "name",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get connected tenants",
        "x-ms-visibility": "internal"
      }
    },
    "/v1/apps/{appId}/policies/{policyId}/hooks/{hookId}": {
      "delete": {
        "description": "Delete hook",
        "operationId": "DeleteHook",
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "path",
            "name": "policyId",
            "required": true,
            "type": "string",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "path",
            "name": "hookId",
            "required": true,
            "type": "string",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete hook",
        "x-ms-visibility": "internal"
      }
    },
    "/v1/apps/{appId}/policies": {
      "get": {
        "description": "Get available policies",
        "operationId": "GetPolicies",
        "parameters": [
          {
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Type:": {
                "description": "Content-Type:",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "properties": {
                  "id": {
                    "description": "id",
                    "type": "string"
                  },
                  "name": {
                    "description": "name",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get available policies",
        "x-ms-visibility": "internal"
      }
    },
    "/v1/apps/{appId}/policies/{policyId}/hooks": {
      "post": {
        "description": "Get notified of changes in your Office 365 tenant monitored by Rencore Governance",
        "operationId": "PolicyNotificationTrigger",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Tenant for which you want to receive notifications",
            "in": "path",
            "name": "appId",
            "required": true,
            "type": "string",
            "x-ms-dynamic-values": {
              "operationId": "GetApps",
              "value-path": "id",
              "value-title": "name"
            },
            "x-ms-summary": "Tenant",
            "x-ms-url-encoding": "single"
          },
          {
            "description": "Policy for which you want to receive notifications",
            "in": "path",
            "name": "policyId",
            "required": true,
            "type": "string",
            "x-ms-dynamic-values": {
              "operationId": "GetPolicies",
              "parameters": {
                "appId": {
                  "parameter": "appId"
                }
              },
              "value-path": "id",
              "value-title": "name"
            },
            "x-ms-summary": "Policy",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "url": {
                  "description": "url",
                  "title": "",
                  "type": "string",
                  "x-ms-notification-url": true,
                  "x-ms-visibility": "internal"
                }
              },
              "required": [
                "url"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "When an Office 365 policy in Rencore Governance is violated",
        "x-ms-trigger": "single"
      },
      "x-ms-notification-content": {
        "description": "Policy results",
        "schema": {
          "properties": {
            "AffectedUsers": {
              "default": [],
              "description": "Users affected by the non-compliant resources they either own or use",
              "items": {
                "$ref": "#/definitions/policyResultResourcePrincipal"
              },
              "title": "Affected users",
              "type": "array"
            },
            "NonCompliantResources": {
              "default": [],
              "description": "List of resources that violate the policy",
              "items": {
                "$ref": "#/definitions/policyResultResource"
              },
              "title": "Non-compliant resources",
              "type": "array"
            },
            "TotalAffectedUsers": {
              "default": 0,
              "description": "The total number of users affected by the non-compliant resources they either own or use",
              "title": "Number of affected users",
              "type": "integer"
            },
            "TotalNonCompliantResources": {
              "default": 0,
              "description": "The total number of resources that violate the policy",
              "title": "Number of non-compliant resources",
              "type": "integer"
            },
            "TotalResources": {
              "default": 0,
              "description": "The total number of resources analyzed by the policy",
              "title": "Number of resources analyzed",
              "type": "integer"
            }
          },
          "required": [
            "TotalResources",
            "TotalNonCompliantResources",
            "TotalAffectedUsers",
            "NonCompliantResources",
            "AffectedUsers"
          ],
          "type": "object"
        }
      }
    }
  },
  "produces": [],
  "responses": {},
  "schemes": [
    "https"
  ],
  "security": [
    {
      "oauth2_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "oauth2_auth": {
      "authorizationUrl": "https://login.windows.net/common/oauth2/authorize",
      "flow": "accessCode",
      "scopes": {
        "user_impersonation": "user_impersonation"
      },
      "tokenUrl": "https://login.windows.net/common/oauth2/authorize",
      "type": "oauth2"
    }
  },
  "swagger": "2.0",
  "tags": []
}