{
  "swagger": "2.0",
  "info": {
    "version": "3.0",
    "title": "DQ on Demand",
    "contact": {
      "name": "Support",
      "url": "https://dqglobal.com/support",
      "email": "support@dqglobal.com"
    },
    "description": "DQ on Demand is a Data Quality as a Service (DQaaS) Data Quality Improvement Platform that is designed to make the task of data management simpler.\n\n DQ on Demand is for those who are not prepared to accept the high cost of low-quality data, are frustrated with differing levels of quality, conflicting rules and levels of and data governance.\n\nBilling is transactional, i.e. each request will consume credits, which can be spent on any of the available services."
  },
  "host": "api-v3.dqondemand.co.uk",
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.dqglobal.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.dqglobal.com/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Data"
    }
  ],
  "definitions": {
    "CasingOptions": {
      "type": "string",
      "enum": [
        "ProperCase_FamilyName",
        "ProperCase_Address",
        "UpperCase",
        "LowerCase",
        "TitleCase"
      ]
    },
    "ValidateActions": {
      "type": "string",
      "enum": [
        "Email",
        "Telephone",
        "PostCode",
        "UrlAddress"
      ]
    },
    "MetaverseCategories": {
      "type": "string",
      "enum": [
        "Addresses",
        "Numbers",
        "GivenNames",
        "Businesses",
        "BusinessJobTitles",
        "Dates",
        "Miscellaneous",
        "WeightsAndMeasures",
        "Qualifications",
        "Salutations",
        "Countries",
        "FamilyNames",
        "Salacious"
      ]
    },
    "TransformActions": {
      "type": "string",
      "enum": [
        "Elaborate",
        "Abbreviate",
        "Normalize",
        "Exclude",
        "Transliterate"
      ]
    },
    "MetaverseLanguage": {
      "type": "string",
      "enum": [
        "English",
        "Spanish",
        "French",
        "Italian",
        "German"
      ]
    },
    "FormatActions": {
      "type": "string",
      "enum": [
        "Email",
        "PostCode",
        "TelephoneE164",
        "TelephoneInternational",
        "TelephoneNational",
        "TelephoneRFC3966",
        "UrlAddress"
      ]
    },
    "DeriveActions": {
      "type": "string",
      "enum": [
        "Job",
        "Gender",
        "EmailType",
        "FromPostalCode",
        "CountryFromCity"
      ]
    },
    "PhoneticAlgorithms": {
      "type": "string",
      "enum": [
        "DQFonetix",
        "DQMetaphone",
        "DQSoundex",
        "Soundex",
        "Metaphone",
        "DoubleMetaphone",
        "Caverphone",
        "Caverphone2",
        "Nysiis"
      ]
    },
    "GenerateDoNotTokenize": {
      "type": "string",
      "enum": [
        "WhiteSpace",
        "Numbers",
        "Punctuation",
        "Symbol",
        "NonPrinting",
        "Letters"
      ]
    },
    "GenerateLetterSettingEnum": {
      "type": "string",
      "enum": [
        "Vowels",
        "Consonants"
      ]
    },
    "GenerateNumberOptionEnum": {
      "type": "string",
      "enum": [
        "Odd",
        "Even"
      ]
    },
    "ClassifyCategories": {
      "type": "string",
      "enum": [
        "All",
        "Addresses",
        "Numbers",
        "GivenNames",
        "Businesses",
        "BusinessJobTitles",
        "Dates",
        "Miscellaneous",
        "WeightsAndMeasures",
        "Qualifications",
        "Salutations",
        "Countries",
        "FamilyNames",
        "Salacious"
      ]
    },
    "ComparisonAlgorithms": {
      "type": "string",
      "enum": [
        "JaroWinkler",
        "Jaro",
        "LevenshteinPercentage",
        "LevenshteinChangeCount",
        "MongeElkan",
        "NeedlemanWunsch",
        "Sift3",
        "SmithWatermanGotoh",
        "HammingPercentage",
        "HammingChangeCount"
      ]
    },
    "ScoringComparisonAlgorithms": {
      "type": "string",
      "enum": [
        "Jaro",
        "JaroWinkler",
        "Levenshtein",
        "MongeElkan",
        "NeedlemanWunsch",
        "Sift3",
        "SmithWatermanGotoh"
      ]
    },
    "CongruenceActionEnum": {
      "type": "string",
      "enum": [
        "CountryToEmail",
        "CountryToPhone",
        "CountryToURL"
      ]
    },
    "AlphaSequenceParameter": {
      "type": "string",
      "enum": [
        "AscFields",
        "DescFields",
        "AscFieldsByWords",
        "DescFieldsByWords",
        "AscFieldsByCharacters",
        "DescFieldsByCharacters",
        "AscCharacters",
        "DescCharacters",
        "AscWords",
        "DescWords",
        "None"
      ]
    },
    "DateFormatEnum": {
      "type": "string",
      "enum": [
        "MMDDYYYY",
        "DDMMYYYY"
      ]
    },
    "ScoringMethodEnum": {
      "type": "string",
      "enum": [
        "InterScore",
        "IntraScore"
      ]
    },
    "AvailableScoreMethodsEnum": {
      "type": "string",
      "enum": [
        "AutoDetect",
        "DateDifferenceWithValidRangeForComparison",
        "EditDistanceScore",
        "EmailScore",
        "EmailScoreAsPerDomain",
        "EmailScoreAsPerUserName",
        "ExactMatch",
        "NumberDifferenceWithValidRangeForComparison"
      ]
    },
    "InterScoreMethodType": {
      "type": "string",
      "enum": [
        "AnyMatch",
        "AllMatch",
        "CountOfMatch",
        "ThresholdCount"
      ]
    },
    "ScoringResultEnum": {
      "type": "string",
      "enum": [
        "Simplified",
        "Full"
      ]
    },
    "ParseOptions": {
      "type": "string",
      "enum": [
        "PhoneNumber",
        "Email",
        "URL"
      ]
    },
    "SearchAddressProvider": {
      "type": "string",
      "enum": [
        "Loqate",
        "Fetchify",
        "GetAddressIO",
        "AFD"
      ]
    },
    "SuppressProvider": {
      "type": "string",
      "enum": [
        "REaDGroup"
      ]
    },
    "AuthenticateEmailProvider": {
      "type": "string",
      "enum": [
        "Betterfy",
        "TextMagic",
        "Loqate",
        "Fetchify",
        "Gamalogic",
        "AFD"
      ]
    },
    "AuthenticatePhoneProvider": {
      "type": "string",
      "enum": [
        "TextMagic",
        "Loqate",
        "Fetchify",
        "AFD"
      ]
    },
    "GetUsage": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The HTTP Status code of the response.",
          "type": "integer",
          "x-ms-visibility": "advanced"
        },
        "message": {
          "description": "A message describing the request status.",
          "type": "string",
          "x-ms-visibility": "advanced"
        },
        "data": {
          "type": "object",
          "description": "The Response object.",
          "properties": {
            "FilterCriteria": {
              "type": "object",
              "description": "The supplied filter criteria.",
              "properties": {
                "startDate": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "format": "date-time",
                  "pattern": "yyyy-MM-dd hh:mm:ss.fff",
                  "description": "The StartDate entered."
                },
                "endDate": {
                  "type": "string",
                  "x-ms-visibility": "advanced",
                  "format": "date-time",
                  "pattern": "yyyy-MM-dd hh:mm:ss.fff",
                  "description": "The EndDate entered."
                }
              }
            },
            "Results": {
              "type": "array",
              "description": "A List of your usage details.",
              "items": {
                "type": "object",
                "properties": {
                  "providerName": {
                    "type": "string",
                    "description": "The name of the provider.",
                    "x-ms-visibility": "important"
                  },
                  "usage": {
                    "description": "An array containing all functions for the provider and your usage for each.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "functionName": {
                          "type": "string",
                          "description": "The name of the function.",
                          "x-ms-visibility": "important"
                        },
                        "creditsUsed": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The number of credits you have spent on this function.",
                          "x-ms-visibility": "important"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "example": {
        "status": 200,
        "message": "Success",
        "data": {
          "filterCriteria": {
            "startDate": "2019-12-24 23:59:59:666",
            "endDate": "2019-12-25 00:00:00:666"
          },
          "results": [
            {
              "providerName": "DQ Global",
              "usage": [
                {
                  "functionName": "Classify",
                  "creditsUsed": 123
                },
                {
                  "functionName": "Derive",
                  "creditsUsed": 123
                }
              ]
            }
          ]
        }
      }
    },
    "GetPricesOutput": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "description": "The HTTP Status code of the response."
        },
        "message": {
          "type": "string",
          "description": "A message describing the request status."
        },
        "data": {
          "type": "array",
          "description": "The Response.",
          "items": {
            "type": "object",
            "properties": {
              "providerName": {
                "type": "string",
                "description": "The name of the provider."
              },
              "functions": {
                "type": "array",
                "description": "List of Functions offered by the provider.",
                "items": {
                  "type": "object",
                  "properties": {
                    "functionName": {
                      "type": "string",
                      "description": "The name of the function offered."
                    },
                    "creditCost": {
                      "type": "integer",
                      "x-nullable": true,
                      "description": "The cost of the function."
                    },
                    "functionDescription": {
                      "type": "string",
                      "description": "A brief description about the function."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "example": {
        "status": 200,
        "message": "Success",
        "data": [
          {
            "providerName": "DQ Global",
            "functions": [
              {
                "functionName": "Classify",
                "creditCost": 123456789,
                "functionDescription": "An example description"
              },
              {
                "functionName": "Derive",
                "creditCost": 123456789,
                "functionDescription": "An example description"
              },
              {
                "functionName": "Transform",
                "creditCost": 123456789,
                "functionDescription": "An example description"
              }
            ]
          }
        ]
      }
    },
    "ValidateInputJson": {
      "type": "array",
      "minItems": 0,
      "maxItems": 1000,
      "items": {
        "type": "object",
        "required": [
          "Input",
          "EntityType"
        ],
        "properties": {
          "Input": {
            "type": "string",
            "x-ms-visibility": "important",
            "description": "The data to validate."
          },
          "EntityType": {
            "type": "string",
            "x-ms-visibility": "important",
            "enum": [
              "Email",
              "Telephone",
              "PostCode",
              "UrlAddress"
            ],
            "description": "The Type of Validation to perform."
          },
          "CountryIdentifier": {
            "type": "string",
            "x-ms-visibility": "important",
            "description": "The country identifier (`GB`, `GBR`, `United Kingdom`, etc) to validate against."
          },
          "UID": {
            "type": "string",
            "x-ms-visibility": "advanced",
            "description": "The record identifier which will be echoed back to you."
          }
        }
      },
      "example": [
        {
          "Input": "info@@dqglobal.com",
          "EntityType": "Email",
          "UID": "<Record ID>"
        },
        {
          "Input": "www.dqglobal.coom",
          "EntityType": "UrlAddress",
          "UID": "<Record ID>"
        },
        {
          "Input": "PO13 9FU",
          "EntityType": "PostCode",
          "CountryIdentifier": "GB",
          "UID": "<Record ID>"
        }
      ]
    },
    "ValidateEmailInput": {
      "type": "array",
      "minItems": 0,
      "maxItems": 1000,
      "items": {
        "type": "object",
        "required": [
          "Input"
        ],
        "properties": {
          "Input": {
            "type": "string",
            "x-ms-visibility": "important",
            "description": "The Email Address to validate."
          },
          "UID": {
            "type": "string",
            "x-ms-visibility": "advanced",
            "description": "The record identifier which will be echoed back to you."
          }
        }
      },
      "example": [
        {
          "Input": "info@@dqglobal.com",
          "UID": "<Record ID>"
        },
        {
          "Input": "info@dqglobal.com",
          "UID": "<Record ID>"
        }
      ]
    },
    "ValidatePostCodeInput": {
      "type": "array",
      "minItems": 0,
      "maxItems": 1000,
      "items": {
        "type": "object",
        "required": [
          "Input",
          "CountryIdentifier"
        ],
        "properties": {
          "Input": {
            "type": "string",
            "x-ms-visibility": "important",
            "description": "The Postcode to validate."
          },
          "CountryIdentifier": {
            "type": "string",
            "x-ms-visibility": "important",
            "description": "The country identifier (`GB`, `GBR`, `United Kingdom`, etc) to validate against."
          },
          "UID": {
            "type": "string",
            "x-ms-visibility": "advanced",
            "description": "The record identifier which will be echoed back to you."
          }
        }
      },
      "example": [
        {
          "Input": "PO13 9FU",
          "CountryIdentifier": "GB",
          "UID": "<Record ID>"
        },
        {
          "Input": "PO13 9FU",
          "CountryIdentifier": "USA",
          "UID": "<Record ID>"
        }
      ]
    },
    "ValidateTelephoneInput": {
      "type": "array",
      "minItems": 0,
      "maxItems": 1000,
      "items": {
        "type": "object",
        "required": [
          "Input",
          "CountryIdentifier"
        ],
        "properties": {
          "Input": {
            "type": "string",
            "x-ms-visibility": "important",
            "description": "The Phone number to validate."
          },
          "CountryIdentifier": {
            "type": "string",
            "x-ms-visibility": "important",
            "description": "The country identifier (`GB`, `GBR`, `United Kingdom`, etc) to validate against."
          },
          "UID": {
            "type": "string",
            "x-ms-visibility": "advanced",
            "description": "The record identifier which will be echoed back to you."
          }
        }
      },
      "example": [
        {
          "Input": "+442392988303",
          "CountryIdentifier": "GB",
          "UID": "<Record ID>"
        },
        {
          "Input": "+12392988303",
          "CountryIdentifier": "GB",
          "UID": "<Record ID>"
        }
      ]
    },
    "ValidateUrlAddressInput": {
      "type": "array",
      "minItems": 0,
      "maxItems": 1000,
      "items": {
        "type": "object",
        "required": [
          "Input"
        ],
        "properties": {
          "Input": {
            "type": "string",
            "x-ms-visibility": "important",
            "description": "The URL to validate."
          },
          "UID": {
            "type": "string",
            "x-ms-visibility": "advanced",
            "description": "The record identifier which will be echoed back to you."
          }
        }
      },
      "example": [
        {
          "Input": "https://www.google.co.in/",
          "UID": "<Record ID>"
        },
        {
          "Input": "www.google.com",
          "UID": "<Record ID>"
        }
      ]
    },
    "ClassifyResponse": {
      "description": "The response.",
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "description": "List of values that matched against the Address category.",
          "items": {
            "type": "string"
          }
        },
        "numbers": {
          "type": "array",
          "description": "List of values that matched against the Number category.",
          "items": {
            "type": "string"
          }
        },
        "givenNames": {
          "type": "array",
          "description": "List of values that matched against the Given Name category.",
          "items": {
            "type": "string"
          }
        },
        "businesses": {
          "type": "array",
          "description": "List of values that matched against the Business category.",
          "items": {
            "type": "string"
          }
        },
        "businessJobTitles": {
          "type": "array",
          "description": "List of values that matched against the Job Title category.",
          "items": {
            "type": "string"
          }
        },
        "dates": {
          "type": "array",
          "description": "List of values that matched against the Dates category.",
          "items": {
            "type": "string"
          }
        },
        "miscellaneous": {
          "type": "array",
          "description": "List of values that matched against the Miscellaneous category.",
          "items": {
            "type": "string"
          }
        },
        "weightsAndMeasures": {
          "type": "array",
          "description": "List of values that matched against the Weights and Measurements category.",
          "items": {
            "type": "string"
          }
        },
        "qualifications": {
          "type": "array",
          "description": "List of values that matched against the Qualifications category.",
          "items": {
            "type": "string"
          }
        },
        "salutations": {
          "type": "array",
          "description": "List of values that matched against the Salutations category.",
          "items": {
            "type": "string"
          }
        },
        "countries": {
          "type": "array",
          "description": "List of values that matched against the Countries category.",
          "items": {
            "type": "string"
          }
        },
        "familyNames": {
          "type": "array",
          "description": "List of values that matched against the Family Name category.",
          "items": {
            "type": "string"
          }
        },
        "salacious": {
          "type": "array",
          "description": "List of values that matched against the Salacious category.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GenerateInputJson": {
      "type": "array",
      "minItems": 0,
      "maxItems": 1000,
      "items": {
        "type": "object",
        "required": [
          "Input",
          "PatternSetting"
        ],
        "properties": {
          "Input": {
            "type": "string",
            "x-ms-visibility": "important",
            "description": "The value to tokenize."
          },
          "PatternSetting": {
            "$ref": "#/definitions/GenerateSettings"
          },
          "UID": {
            "type": "string",
            "x-ms-visibility": "advanced",
            "description": "The record identifier which will be echoed back to you."
          }
        }
      },
      "example": [
        {
          "Input": "This 123 Is $$a Test",
          "PatternSetting": {
            "DoNotTokenize": [
              "WhiteSpace"
            ],
            "LetterSettings": {
              "CaseSensitive": true,
              "LetterCategories": false,
              "Exclude": [
                "Consonants"
              ],
              "Collapse": [
                "Vowels"
              ]
            },
            "NumberSettings": {
              "NumberCategories": false,
              "Collapse": [
                "Even"
              ],
              "Exclude": []
            },
            "SymbolSettings": {
              "Collapse": false,
              "Exclude": false
            },
            "WhiteSpaceSettings": {
              "Collapse": false,
              "Exclude": false
            },
            "NonPrintingSettings": {
              "Collapse": false,
              "Exclude": false
            }
          },
          "UID": "<Record ID>"
        }
      ]
    },
    "GenerateSettings": {
      "description": "The settings for how to tokenize your data.",
      "x-ms-summary": "Pattern Settings",
      "x-ms-visibility": "important",
      "type": "object",
      "required": [
        "DoNotTokenize",
        "LetterSettings",
        "NumberSettings",
        "SymbolSettings",
        "WhiteSpaceSettings",
        "NonPrintingSettings"
      ],
      "properties": {
        "DoNotTokenize": {
          "type": "array",
          "x-ms-summary": "Exclude from Token",
          "items": {
            "type": "string",
            "enum": [
              "WhiteSpace",
              "Numbers",
              "Punctuation",
              "Symbol",
              "NonPrinting",
              "Letters"
            ]
          },
          "description": "List the character types not to tokenize."
        },
        "LetterSettings": {
          "$ref": "#/definitions/GenerateLetterSettings"
        },
        "NumberSettings": {
          "$ref": "#/definitions/GenerateNumberSettings"
        },
        "SymbolSettings": {
          "$ref": "#/definitions/GenerateSymbolSettings"
        },
        "WhiteSpaceSettings": {
          "$ref": "#/definitions/GenerateWhiteSpaceSettings"
        },
        "NonPrintingSettings": {
          "$ref": "#/definitions/GenerateNonPrintingSettings"
        }
      }
    },
    "GenerateLetterSettings": {
      "x-ms-summary": "Letter Settings",
      "type": "object",
      "required": [
        "Exclude",
        "Collapse",
        "LetterCategories",
        "CaseSensitive"
      ],
      "properties": {
        "CaseSensitive": {
          "type": "boolean",
          "x-ms-visibility": "important",
          "description": "Return Upper and lower letter tokens?",
          "default": true
        },
        "LetterCategories": {
          "type": "boolean",
          "x-ms-visibility": "important",
          "description": "Categories letters by type? (Categories: UpperCaseVowel = V, LowerCaseVowel = v, UpperCaseConsonant = C, LowerCaseConsonant = c)",
          "default": false
        },
        "Exclude": {
          "type": "array",
          "x-ms-visibility": "important",
          "items": {
            "type": "string",
            "enum": [
              "Vowels",
              "Consonants"
            ]
          },
          "description": "Exclude the following types of letters from the pattern?"
        },
        "Collapse": {
          "type": "array",
          "x-ms-visibility": "important",
          "items": {
            "type": "string",
            "enum": [
              "Vowels",
              "Consonants"
            ]
          },
          "description": "Collapse the following types of letters in the pattern?"
        }
      }
    },
    "GenerateNumberSettings": {
      "x-ms-summary": "Number Settings",
      "type": "object",
      "required": [
        "Exclude",
        "Collapse",
        "NumberCategories"
      ],
      "properties": {
        "NumberCategories": {
          "type": "boolean",
          "description": "Categories numbers by type? (Categories: OddNumber = 1, EvenNumber = 2)",
          "default": true,
          "x-ms-visibility": "important"
        },
        "Exclude": {
          "type": "array",
          "x-ms-visibility": "important",
          "items": {
            "type": "string",
            "enum": [
              "Odd",
              "Even"
            ]
          },
          "description": "Exclude the following types of numbers from the pattern?"
        },
        "Collapse": {
          "type": "array",
          "x-ms-visibility": "important",
          "items": {
            "type": "string",
            "enum": [
              "Odd",
              "Even"
            ]
          },
          "description": "Collapse the following types of numbers in the pattern?"
        }
      }
    },
    "GenerateSymbolSettings": {
      "x-ms-summary": "Symbol Settings",
      "type": "object",
      "required": [
        "Exclude",
        "Collapse"
      ],
      "properties": {
        "Exclude": {
          "type": "boolean",
          "description": "Exclude symbols from the pattern?",
          "default": false,
          "x-ms-visibility": "important"
        },
        "Collapse": {
          "type": "boolean",
          "description": "Collapse repeated symbols into a single symbol? I.E.@@ -> @",
          "default": false,
          "x-ms-visibility": "important"
        }
      }
    },
    "GenerateWhiteSpaceSettings": {
      "x-ms-summary": "Whitespace Settings",
      "type": "object",
      "required": [
        "Exclude",
        "Collapse"
      ],
      "properties": {
        "Exclude": {
          "type": "boolean",
          "description": "Exclude whitespace from the pattern?",
          "default": false,
          "x-ms-visibility": "important"
        },
        "Collapse": {
          "type": "boolean",
          "description": "Collapse multiple whitespace characters into a single character?",
          "default": false,
          "x-ms-visibility": "important"
        }
      }
    },
    "GenerateNonPrintingSettings": {
      "x-ms-summary": "Non-Printing Settings",
      "type": "object",
      "required": [
        "Exclude",
        "Collapse"
      ],
      "properties": {
        "Exclude": {
          "type": "boolean",
          "description": "Exclude Non Printing characters from the pattern?",
          "default": false,
          "x-ms-visibility": "important"
        },
        "Collapse": {
          "type": "boolean",
          "description": "Collapse multiple Non Printing characters into a single character?",
          "default": false,
          "x-ms-visibility": "important"
        }
      }
    },
    "CongruenceResultSingle": {
      "type": "object",
      "description": "The Response.",
      "properties": {
        "status": {
          "description": "The HTTP Status code of the response.",
          "type": "integer",
          "x-ms-visibility": "advanced"
        },
        "message": {
          "description": "A message describing the request status.",
          "type": "string",
          "x-ms-visibility": "advanced"
        },
        "data": {
          "type": "object",
          "description": "The response.",
          "properties": {
            "congruenceString": {
              "type": "string",
              "description": "Description about what type of congruence was found.",
              "x-ms-visibility": "important"
            },
            "code": {
              "type": "string",
              "description": "Code for what type of congruence was found.",
              "x-ms-visibility": "important"
            }
          }
        }
      }
    },
    "DQGlobal": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The HTTP Status code of the response.",
          "type": "integer",
          "x-ms-visibility": "advanced"
        },
        "message": {
          "description": "A message describing the request status.",
          "type": "string",
          "x-ms-visibility": "advanced"
        },
        "data": {
          "description": "The response.",
          "type": "string",
          "x-ms-visibility": "important"
        }
      }
    },
    "DQGlobalInt": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The HTTP Status code of the response.",
          "type": "integer",
          "x-ms-visibility": "advanced"
        },
        "message": {
          "description": "A message describing the request status.",
          "type": "string",
          "x-ms-visibility": "advanced"
        },
        "data": {
          "description": "The response.",
          "type": "integer",
          "format": "int64",
          "x-ms-visibility": "important"
        }
      }
    },
    "DQGlobalFloat": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The HTTP Status code of the response.",
          "type": "integer",
          "x-ms-visibility": "advanced"
        },
        "message": {
          "description": "A message describing the request status.",
          "type": "string",
          "x-ms-visibility": "advanced"
        },
        "data": {
          "description": "The response.",
          "type": "number",
          "format": "float",
          "x-ms-visibility": "important"
        }
      }
    },
    "DQGlobalBool": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The HTTP Status code of the response.",
          "type": "integer",
          "x-ms-visibility": "advanced"
        },
        "message": {
          "description": "A message describing the request status.",
          "type": "string",
          "x-ms-visibility": "advanced"
        },
        "data": {
          "description": "The response.",
          "type": "boolean",
          "x-ms-visibility": "important"
        }
      }
    },
    "Unauthorized": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The HTTP Status code of the response.",
          "type": "integer",
          "x-ms-visibility": "advanced"
        },
        "message": {
          "description": "A message describing the request status.",
          "type": "string",
          "x-ms-visibility": "advanced"
        }
      },
      "example": {
        "status": 401,
        "message": "Authorization has been denied for this request."
      }
    },
    "BadRequest": {
      "title": "Bad Request Response",
      "type": "object",
      "properties": {
        "status": {
          "description": "The HTTP Status code of the response.",
          "type": "integer",
          "x-ms-visibility": "advanced"
        },
        "message": {
          "description": "A message describing the request status.",
          "type": "string",
          "x-ms-visibility": "advanced"
        }
      },
      "example": {
        "status": 400,
        "message": "<A description about why the request is wrong>"
      }
    },
    "Exception": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The HTTP Status code of the response.",
          "type": "integer",
          "x-ms-visibility": "advanced"
        },
        "message": {
          "description": "A message describing the request status.",
          "type": "string",
          "x-ms-visibility": "advanced"
        }
      },
      "example": {
        "status": 500,
        "message": "Oops! Something went wrong.  Please contact our support team"
      }
    },
    "FailedDependency": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The HTTP Status code of the response.",
          "type": "integer",
          "x-ms-visibility": "advanced"
        },
        "message": {
          "description": "A message describing the request status.",
          "type": "string",
          "x-ms-visibility": "advanced"
        }
      },
      "example": {
        "status": 424,
        "message": "The Third Party returned a 503 Service Unavailable. Please try again later or contact support@dqglobal.com"
      }
    },
    "RequestTimeout": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The HTTP Status code of the response.",
          "type": "integer",
          "x-ms-visibility": "advanced"
        },
        "message": {
          "description": "A message describing the request status.",
          "type": "string",
          "x-ms-visibility": "advanced"
        }
      },
      "example": {
        "status": 408,
        "message": "Your Request took too long to process. Please try again later or contact support@dqglobal.com"
      }
    }
  },
  "paths": {
    "/Account/Usage": {
      "x-summary": "Get Usage",
      "get": {
        "operationId": "UsageGet",
        "summary": "Retrieve your usage",
        "description": "Retrieve your usage statistics for each vendor function within the given time frame.\nNote: Usage statistics update every 24 hours at Midnight UTC Time.",
        "parameters": [
          {
            "in": "query",
            "name": "StartDate",
            "x-example": "2019-12-24 23:59:59:666",
            "type": "string",
            "format": "date-time",
            "pattern": "yyyy-MM-dd hh:mm:ss.fff",
            "required": true,
            "description": "Usage period start.",
            "x-ms-summary": "Start Time (yyyy-MM-dd HH:mm:ss.fff)",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "EndDate",
            "x-example": "2019-12-25 00:00:00:666",
            "type": "string",
            "format": "date-time",
            "pattern": "yyyy-MM-dd hh:mm:ss.fff",
            "required": true,
            "description": "Usage period end.",
            "x-ms-summary": "End Time (yyyy-MM-dd HH:mm:ss.fff)",
            "x-ms-visibility": "important"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/GetUsage"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "Success",
                "data": {
                  "filterCriteria": {
                    "startDate": "2019-12-24 23:59:59:666",
                    "endDate": "2019-12-25 00:00:00:666"
                  },
                  "results": [
                    {
                      "providerName": "DQ Global",
                      "usage": [
                        {
                          "functionName": "Classify",
                          "creditsUsed": 123
                        },
                        {
                          "functionName": "Derive",
                          "creditsUsed": 123
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/Account/Prices": {
      "x-summary": "Get Prices",
      "get": {
        "operationId": "PricingGet",
        "summary": "Retrieve Function Pricing",
        "description": "Retrieve the current price list.",
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/GetPricesOutput"
            }
          }
        }
      }
    },
    "/Account/Balance": {
      "x-summary": "Get Balance",
      "get": {
        "operationId": "BalanceGet",
        "summary": "Retrieve current balance",
 
        "description": "Retrieve your current balance.",
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalInt"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": 123456789
              }
            }
          }
        }
      }
    },
    "/Case": {
      "x-summary": "Case",
      "get": {
        "operationId": "CaseSingular",
        "summary": "Case",

        "description": "Alter the casing of your data.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "case example",
            "required": true,
            "type": "string",
            "description": "The value to submit for casing.",
            "x-ms-summary": "Input",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "CaseType",
            "x-example": "TitleCase",
            "required": true,
            "type": "string",
            "enum": [
              "ProperCase_FamilyName",
              "ProperCase_Address",
              "UpperCase",
              "LowerCase",
              "TitleCase"
            ],
            "description": "The type of casing to perform.",
            "x-ms-summary": "Casing Type",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "Language",
            "x-example": "English",
            "enum": [
              "English",
              "Spanish",
              "French",
              "Italian",
              "German"
            ],
            "required": true,
            "type": "string",
            "description": "The language your data is in.",
            "x-ms-summary": "Language",
            "default": "English",
            "x-ms-visibility": "important"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "Case Example"
              }
            }
          }
        }
      }
    },
    "/Classify": {
      "x-summary": "Classify",
      "get": {
        "operationId": "ClassifyGet",
        "summary": "Classify",
        "description": "Identify extra information about a piece of data. E.g. Brian or Sven is a person name. Road, Strasse, Rue are address elements. Ltd, LLC are Company legal suffixes.",
    
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "Robert",
            "required": true,
            "type": "string",
            "description": "The value to classify.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "Categories",
            "x-example": "Salutations,GivenNames",
            "required": true,
            "enum": [
              "All",
              "Addresses",
              "Numbers",
              "GivenNames",
              "Businesses",
              "BusinessJobTitles",
              "Dates",
              "Miscellaneous",
              "WeightsAndMeasures",
              "Qualifications",
              "Salutations",
              "Countries",
              "FamilyNames",
              "Salacious"
            ],
            "type": "string",
            "format": "csv",
            "default": "All",
            "description": "A comma separated list of the categories that to test against.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Categories"
          },
          {
            "in": "query",
            "name": "Language",
            "x-example": "English",
            "type": "string",
            "enum": [
              "English",
              "Spanish",
              "French",
              "Italian",
              "German"
            ],
            "required": false,
            "description": "The language your data is in.",
            "default": "English",
            "x-ms-visibility": "important",
            "x-ms-summary": "Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string"
                },
                "data": {
                  "$ref": "#/definitions/ClassifyResponse"
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "addresses": [],
                  "numbers": [],
                  "givenNames": [
                    "robert"
                  ],
                  "businesses": [],
                  "businessJobTitles": [],
                  "dates": [],
                  "miscellaneous": [],
                  "weightsAndMeasures": [],
                  "qualifications": [],
                  "salutations": [],
                  "countries": [],
                  "familyNames": [
                    "robert"
                  ],
                  "salacious": []
                }
              }
            }
          }
        }
      }
    },
    "/Compare": {
      "x-summary": "Compare",
      "get": {
        "operationId": "CompareGet",
        "summary": "Compare",
      
        "description": "Score the similarity between two values using one of the available algorithms, including: Levenshtein, Jaro, JaroWinkler and more...",
        "parameters": [
          {
            "in": "query",
            "name": "Input1",
            "x-example": "InputValue123",
            "required": true,
            "type": "string",
            "description": "The first value to compare.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input 1"
          },
          {
            "in": "query",
            "name": "Input2",
            "x-example": "InputValue",
            "required": true,
            "type": "string",
            "description": "The second value to compare.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input 2"
          },
          {
            "in": "query",
            "name": "ComparisonAlgorithm",
            "x-example": "JaroWinkler",
            "enum": [
              "JaroWinkler",
              "Jaro",
              "LevenshteinPercentage",
              "LevenshteinChangeCount",
              "MongeElkan",
              "NeedlemanWunsch",
              "Sift3",
              "SmithWatermanGotoh",
              "HammingPercentage",
              "HammingChangeCount"
            ],
            "required": true,
            "type": "string",
            "description": "The name of the algorithm to use for comparison.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Comparison Algorithm",
            "default": "JaroWinkler"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalFloat"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": 95.38461
              }
            }
          }
        }
      }
    },
    "/Congruence/Email": {
      "x-summary": "Email",
      "get": {
        "operationId": "EmailCongruenceGet",
        "summary": "Congruence Email",
       
        "description": "Check if an Email address matches the Contact details.",
        "parameters": [
          {
            "in": "query",
            "name": "Email",
            "x-example": "Robert.Smith@example.com",
            "required": true,
            "type": "string",
            "description": "The Email to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Email"
          },
          {
            "in": "query",
            "name": "FirstName",
            "x-example": "Robert",
            "required": true,
            "type": "string",
            "description": "The First Name to look for.",
            "x-ms-visibility": "important",
            "x-ms-summary": "First Name"
          },
          {
            "in": "query",
            "name": "LastName",
            "x-example": "Smith",
            "required": true,
            "type": "string",
            "description": "The Last Name to look for.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Last Name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/CongruenceResultSingle"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "code": "14",
                  "congruenceString": "Given Name and Family Name both found in email"
                }
              }
            }
          }
        }
      }
    },
    "/Congruence/Country": {
      "x-summary": "Country",
      "get": {
        "operationId": "CountryCongruenceGet",
        "summary": "Congruence Country",
       
        "description": "Check if a value is from the country you expect.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "Robert.Smith@Example.co.uk",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "Country",
            "x-example": "United Kingdom",
            "required": true,
            "type": "string",
            "description": "A Country Identifier. I.E. `GB`, `GBR`, `United Kingdom` etc.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          },
          {
            "in": "query",
            "name": "ActionType",
            "x-example": "CountryToEmail",
            "required": true,
            "type": "string",
            "enum": [
              "CountryToEmail",
              "CountryToPhone",
              "CountryToURL"
            ],
            "description": "The type of congruence to perform.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Action"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/CongruenceResultSingle"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "code": "1",
                  "congruenceString": "True"
                }
              }
            }
          }
        }
      }
    },
    "/Congruence/Salutation": {
      "x-summary": "Salutation",
      "get": {
        "operationId": "SalutationCongruenceGet",
        "summary": "Congruence Salutation",
        
        "description": "Check if the Salutation is of the same gender as the name.",
        "parameters": [
          {
            "in": "query",
            "name": "Salutation",
            "x-example": "Mr",
            "required": true,
            "type": "string",
            "description": "The salutation to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Salutation"
          },
          {
            "in": "query",
            "name": "FirstName",
            "x-example": "Robert",
            "required": true,
            "type": "string",
            "description": "The First Name to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "First Name"
          },
          {
            "in": "query",
            "name": "Language",
            "x-example": "English",
            "required": true,
            "type": "string",
            "enum": [
              "English",
              "Spanish",
              "French",
              "Italian",
              "German"
            ],
            "description": "The language your data is in.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Language",
            "default": "English"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/CongruenceResultSingle"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "code": "1",
                  "congruenceString": "True"
                }
              }
            }
          }
        }
      }
    },
    "/Derive/Gender": {
      "x-summary": "Gender",
      "x-description": "Derive Gender will return the Gender as both a string and an integer. (0 = Female, 1 = Male, 2 = Either, 3 = Unknown)",
      "get": {
        "operationId": "DeriveGenderGet",
        "summary": "Derive Gender",
        
        "description": "Derive the Gender of a person using their first name.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "Robert",
            "required": true,
            "type": "string",
            "description": "The first name to try and Derive a gender from.",
            "x-ms-visibility": "important",
            "x-ms-summary": "First Name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "type": "object",
                  "description": "The Response.",
                  "properties": {
                    "gender": {
                      "type": "string",
                      "description": "The Gender. (Female, Male, Either, Unknown)",
                      "x-ms-visibility": "important"
                    },
                    "resultCode": {
                      "type": "integer",
                      "description": "A Numeric equivalent of the Gender. (0 Female, 1 Male, 2 Either, 3 Unknown)",
                      "x-ms-visibility": "important"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "gender": "Male",
                  "resultCode": 1
                }
              }
            }
          }
        }
      }
    },
    "/Derive/CountryFromCity": {
      "x-summary": "CountryFromCity",
      "get": {
        "operationId": "DeriveCityGet",
        "summary": "Derive CountryFromCity",
       
        "description": "Retrieve a list of Countries that have the placename supplied.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "London",
            "required": true,
            "type": "string",
            "description": "The City for which you would like to find the country.",
            "x-ms-visibility": "important",
            "x-ms-summary": "City"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "type": "array",
                  "description": "The Response.",
                  "items": {
                    "type": "object",
                    "description": "A list of matching countries.",
                    "properties": {
                      "countryName": {
                        "type": "string",
                        "description": "Name of the derived Country.",
                        "x-ms-visibility": "important"
                      },
                      "iSO2": {
                        "type": "string",
                        "description": "ISO 3166-1 alpha-2 code of the derived country.",
                        "x-ms-visibility": "important"
                      },
                      "iSO3": {
                        "type": "string",
                        "description": "ISO 3166-1 alpha-3 code of the derived country.",
                        "x-ms-visibility": "important"
                      },
                      "iDD": {
                        "type": "string",
                        "description": "International Dialing Code of the derived country.",
                        "x-ms-visibility": "important"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": [
                  {
                    "countryName": "United Kingdom",
                    "iSO2": "GB",
                    "iSO3": "GBR",
                    "iDD": "+44"
                  },
                  {
                    "countryName": "United States Of America",
                    "iSO2": "US",
                    "iSO3": "USA",
                    "iDD": "+1"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/Derive/FromPostalCode": {
      "x-summary": "FromPostalCode",
      "get": {
        "operationId": "DerivePostCodeGet",
        "summary": "Derive FromPostalCode",
        
        "description": "Return Information pertaining to the supplied PostCode, Such as: Latitude & Longitude.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "P7C",
            "required": true,
            "type": "string",
            "description": "The postal code to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Postal Code"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "CA",
            "required": true,
            "type": "string",
            "description": "The country identifier (`GB`, `GBR`, `United Kingdom`, etc) of the PostalCode supplied.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "type": "object",
                  "description": "The Response.",
                  "properties": {
                    "county": {
                      "type": "string",
                      "description": "The County the Postcode is located within.",
                      "x-ms-visibility": "important"
                    },
                    "latitude": {
                      "type": "string",
                      "description": "The Latitude of the postCode area.",
                      "x-ms-visibility": "important"
                    },
                    "longitude": {
                      "type": "string",
                      "description": "The Longitude of the postCode area.",
                      "x-ms-visibility": "important"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "county": "Ontario",
                  "latitude": "48.352",
                  "longitude": "-89.4649"
                }
              }
            }
          }
        }
      }
    },
    "/Derive/EmailType": {
      "x-summary": "EmailType",
      "get": {
        "operationId": "DeriveEmailGet",
        "summary": "Derive EmailType",
        
        "description": "Derive the Domain and Mailbox type. I.E.is it a business email? or a personal email?",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "support@dqglobal.com",
            "required": true,
            "type": "string",
            "description": "The email to use for derivation.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Email"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "type": "object",
                  "description": "The Response.",
                  "properties": {
                    "domainType": {
                      "type": "string",
                      "description": "The Type of Domain. (Business, FreeProvider)",
                      "x-ms-visibility": "important"
                    },
                    "mailBoxType": {
                      "type": "string",
                      "description": "The Type of Mailbox. (Personal, Generic)",
                      "x-ms-visibility": "important"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "domainType": "Business",
                  "mailBoxType": "Generic"
                }
              }
            }
          }
        }
      }
    },
    "/DeriveISO": {
      "x-summary": "DeriveISO",
      "get": {
        "operationId": "DeriveISOGet",
        "summary": "Derive Country",
        
        "description": "Derive a country from your supplied data.",
        "parameters": [
          {
            "in": "query",
            "name": "Email",
            "x-example": "test@example.co.uk",
            "required": false,
            "type": "string",
            "description": "The email to use for derivation.",
            "x-ms-summary": "Email",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "Url",
            "x-example": "example.co.uk",
            "required": false,
            "type": "string",
            "description": "The URL to use for derivation.",
            "x-ms-summary": "Website",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "Phone",
            "x-example": "00442392988303",
            "required": false,
            "type": "string",
            "description": "The Phone to use for derivation.",
            "x-ms-summary": "Phone",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "Country",
            "x-example": "USA",
            "required": false,
            "type": "string",
            "description": "The country identifier (`GB`, `GBR`, `United Kingdom`, etc) for derivation.",
            "x-ms-summary": "Country Identifier",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "City",
            "x-example": "Portsmouth",
            "required": false,
            "type": "string",
            "description": "The City to use for derivation.",
            "x-ms-summary": "City",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "Threshold",
            "x-example": 40,
            "required": false,
            "type": "integer",
            "default": 70,
            "description": "The match percentage for when a possible value should be returned.",
            "x-ms-summary": "Threshold",
            "x-ms-visibility": "advanced"
          },
          {
            "in": "query",
            "name": "OnlyReturnBest",
            "x-example": false,
            "required": false,
            "type": "boolean",
            "default": false,
            "description": "Return only the highest scoring result?",
            "x-ms-summary": "Return Highest Match?",
            "x-ms-visibility": "advanced"
          },
          {
            "in": "query",
            "name": "DefaultToCountry",
            "x-example": false,
            "required": false,
            "type": "boolean",
            "default": false,
            "description": "If the Response will be `Unknown` then Derive using only the Country.",
            "x-ms-summary": "Default To Country?",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "type": "array",
                  "description": "A list of possible countries.",
                  "items": {
                    "type": "object",
                    "description": "One of the possible countries.",
                    "properties": {
                      "countryName": {
                        "type": "string",
                        "description": "Name of the derived Country.",
                        "x-ms-visibility": "important"
                      },
                      "congruentToGivenCountry": {
                        "type": "boolean",
                        "description": "Does derived country match supplied country?",
                        "x-ms-visibility": "important"
                      },
                      "matchCertainty": {
                        "type": "integer",
                        "description": "Certainty Score. (0-100)",
                        "x-ms-visibility": "important"
                      },
                      "isO2": {
                        "type": "string",
                        "description": "ISO 3166-1 alpha-2 code of the derived country.",
                        "x-ms-visibility": "important"
                      },
                      "isO3": {
                        "type": "string",
                        "description": "ISO 3166-1 alpha-3 code of the derived country.",
                        "x-ms-visibility": "important"
                      },
                      "diallingCode": {
                        "type": "string",
                        "description": "International Dialing Code of the derived country.",
                        "x-ms-visibility": "important"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": [
                  {
                    "countryName": "United Kingdom",
                    "congruentToGivenCountry": false,
                    "matchCertainty": 80,
                    "isO2": "GB",
                    "isO3": "GBR",
                    "diallingCode": "+44"
                  },
                  {
                    "countryName": "United States Of America",
                    "congruentToGivenCountry": true,
                    "matchCertainty": 40,
                    "isO2": "US",
                    "isO3": "USA",
                    "diallingCode": "+1"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/Format/Email": {
      "x-summary": "Email",
      "get": {
        "operationId": "FormatEmailGet",
        "summary": "Format Email",
        "description": "Format your email address. A common example is when an email is coped from Outlook it will return `Example <example@example.com>` and we will convert that to `example@example.com`.",
        
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "info@@dqglobal.com",
            "required": true,
            "type": "string",
            "description": "The Email Address to Format.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Email"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "info@dqglobal.com"
              }
            }
          }
        }
      }
    },
    "/Format/PostCode": {
      "x-summary": "PostCode",
      "get": {
        "operationId": "FormatPostCodeGet",
        "summary": "Format PostCode",
        "description": "Format your Postcode so its syntactically valid for the country. I.E. `SW1A1AA` to `SW1A 1AA`",
        
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "828@306",
            "required": true,
            "type": "string",
            "description": "The Postal Code to Format.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Postal Code"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "US",
            "required": true,
            "type": "string",
            "description": "The country identifier (`GB`, `GBR`, `United Kingdom`, etc) to format against.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "828306"
              }
            }
          }
        }
      }
    },
    "/Format/TelephoneE164": {
      "x-summary": "TelephoneE164",
      "get": {
        "operationId": "FormatE164Get",
        "summary": "Format PhoneE164",
        "description": "Format your phone number in the E.164 syntax. E.G. `+448457909090`",
        
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "20-30532700",
            "required": true,
            "type": "string",
            "description": "The phone number to format.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Phone"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "GB",
            "type": "string",
            "required": true,
            "description": "The country identifier (`GB`, `GBR`, `United Kingdom`, etc) to format against.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "+442030532700"
              }
            }
          }
        }
      }
    },
    "/Format/TelephoneInternational": {
      "x-summary": "TelephoneInternational",
      "get": {
        "operationId": "FormatInternationalGet",
        "summary": "Format Phone International",
        "description": "Format your phone number in International syntax. E.G. `+44 845 790 9090`",
       
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "23 9298 8303",
            "required": true,
            "type": "string",
            "description": "The phone number to format.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Phone"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "GB",
            "type": "string",
            "required": true,
            "description": "The country identifier (`GB`, `GBR`, `United Kingdom`, etc) to format against.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "+44 20 3053 2700"
              }
            }
          }
        }
      }
    },
    "/Format/TelephoneNational": {
      "x-summary": "TelephoneNational",
      "get": {
        "operationId": "FormatNationalGet",
        "summary": "Format Phone National",
        "description": "Format your phone number in National syntax. E.G. `0845 790 9090`",
        
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "20-30532700",
            "required": true,
            "type": "string",
            "description": "The phone number to format.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Phone"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "GB",
            "type": "string",
            "required": true,
            "description": "The country identifier (`GB`, `GBR`, `United Kingdom`, etc) to format against.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "020 3053 2700"
              }
            }
          }
        }
      }
    },
    "/Format/TelephoneRFC3966": {
      "x-summary": "TelephoneRFC3966",
      "get": {
        "operationId": "FormatRFC3966Get",
        "summary": "Format PhoneRFC3966",
        "description": "Format your phone number in RFC3966 syntax. E.G. `tel:+44-845-790-9090`",
       
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "23 9298 8303",
            "required": true,
            "type": "string",
            "description": "The phone number to format.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Phone"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "GB",
            "type": "string",
            "required": true,
            "description": "The country identifier (`GB`, `GBR`, `United Kingdom`, etc) to format against.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "tel:+44-20-3053-2700"
              }
            }
          }
        }
      }
    },
    "/Format/UrlAddress": {
      "x-summary": "UrlAddress",
      "get": {
        "operationId": "FormatURLGet",
        "summary": "Format URL",
        "description": "Ensure all of your URLs are in using the same Protocols and correct common mistakes.",
       
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "www..google.co.in",
            "required": true,
            "type": "string",
            "description": "The URL to Format.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Website"
          },
          {
            "in": "query",
            "name": "URLPrefix",
            "x-example": "https://www.",
            "required": true,
            "type": "string",
            "description": "The Prefix you would like to prepend to the URL.",
            "x-ms-visibility": "important",
            "x-ms-summary": "URL Prefix"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "https://www.google.co.in"
              }
            }
          }
        }
      }
    },
    "/Generate": {
      "x-summary": "Generate",
      "post": {
        "operationId": "GeneratePattern",
        "summary": "Generate Pattern",
        
        "description": "Generate a Pattern representation of your data. I.E. `Example123` -> `Aaaaaaa999`",
        "parameters": [
          {
            "in": "body",
            "name": "Input",
            "x-ms-visibility": "important",
            "schema": {
              "$ref": "#/definitions/GenerateInputJson"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "input": {
                        "description": "The original value.",
                        "type": "string",
                        "x-ms-visibility": "advanced"
                      },
                      "output": {
                        "description": "The response.",
                        "type": "string",
                        "x-ms-visibility": "important"
                      },
                      "uid": {
                        "description": "The unique identifier provided.",
                        "type": "string",
                        "x-ms-visibility": "advanced"
                      },
                      "status": {
                        "description": "HTTP Status code of this item.",
                        "type": "integer",
                        "x-ms-visibility": "advanced"
                      },
                      "message": {
                        "description": "A message describing the request status.",
                        "type": "string",
                        "x-ms-visibility": "advanced"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": [
                  {
                    "input": "This 123 Is $$a Test",
                    "output": "a 999 A SSa a",
                    "uid": "<Record ID>",
                    "status": 200,
                    "message": "Success"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/GenerateToken": {
      "x-summary": "GenerateToken",
      "get": {
        "operationId": "GenerateTokenGet",
        "summary": "Generate Token",
      
        "description": "Generate a phonetic token of your data. Example (Using DQFonetix) Xerox = YQA, Xeroks = YQA",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "InputValue",
            "required": true,
            "type": "string",
            "description": "The value you with to tokenize.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "generateAlgorithmType",
            "x-example": "DQFonetix",
            "enum": [
              "DQFonetix",
              "DQMetaphone",
              "DQSoundex",
              "Soundex",
              "Metaphone",
              "DoubleMetaphone",
              "Caverphone",
              "Caverphone2",
              "Nysiis"
            ],
            "required": true,
            "type": "string",
            "description": "Which Algorithm should be used?",
            "x-ms-visibility": "important",
            "x-ms-summary": "Algorithm",
            "default": "DQFonetix"
          },
          {
            "in": "query",
            "name": "Language",
            "x-example": "English",
            "type": "string",
            "enum": [
              "English",
              "Spanish",
              "French",
              "Italian",
              "German"
            ],
            "required": false,
            "description": "The language of your data (required when using DQFonetix, DQMetaphone, DQSoundex).",
            "x-ms-summary": "Language",
            "default": "English"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "QSJOMV"
              }
            }
          }
        }
      }
    },
    "/Parse/PhoneNumber": {
      "x-summary": "PhoneNumber",
      "get": {
        "operationId": "ParsePhoneGet",
        "summary": "Parse Phone",
        "description": "Split a Phonenumber into its component parts: Country, Number, Prefix, Type.",
       
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "02392988303",
            "required": true,
            "type": "string",
            "description": "The Phone number to split.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Phone"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "GB",
            "required": true,
            "type": "string",
            "description": "A Country Identifier. I.E. `GB`, `GBR`, `United Kingdom` etc.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "type": "object",
                  "description": "The Response.",
                  "properties": {
                    "countryCode": {
                      "type": "string",
                      "description": "The Country Dialing Code.",
                      "x-ms-visibility": "important"
                    },
                    "extension": {
                      "type": "string",
                      "description": "The Extension number. (If Applicable)",
                      "x-ms-visibility": "important"
                    },
                    "nationalNumber": {
                      "type": "string",
                      "description": "PhoneNumber supplied, formatted in National Syntax.",
                      "x-ms-visibility": "important"
                    },
                    "numberType": {
                      "type": "string",
                      "enum": [
                        "FIXED_LINE",
                        "MOBILE",
                        "FIXED_LINE_OR_MOBILE",
                        "TOLL_FREE",
                        "PREMIUM_RATE",
                        "SHARED_COST",
                        "VOIP",
                        "PERSONAL_NUMBER",
                        "PAGER",
                        "UAN",
                        "VOICEMAIL",
                        "UNKNOWN"
                      ],
                      "description": "Type of Number. I.E. Mobile, Fixed_Line, etc.",
                      "x-ms-visibility": "important"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "countryCode": "44",
                  "extension": "",
                  "nationalNumber": "2392988303",
                  "numberType": "FIXED_LINE"
                }
              }
            }
          }
        }
      }
    },
    "/Parse/Email": {
      "x-summary": "Email",
      "get": {
        "operationId": "ParseEmailGet",
        "summary": "Parse Email",
        "description": "Split an Email into its component parts: MailBox, Domain, TLD/",
      
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "support@example.com",
            "required": true,
            "type": "string",
            "description": "The Email to split.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Email"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "type": "object",
                  "description": "The Response.",
                  "properties": {
                    "mailbox": {
                      "type": "string",
                      "description": "The Input Email.",
                      "x-ms-visibility": "important"
                    },
                    "localPart": {
                      "type": "string",
                      "description": "The Email local part. I.E.`support`",
                      "x-ms-visibility": "important"
                    },
                    "domain": {
                      "type": "string",
                      "description": "The Email Domain. I.E. `gmail.com`",
                      "x-ms-visibility": "important"
                    },
                    "tld": {
                      "type": "string",
                      "description": "The Top Level Domain. I.E. `.co.uk`",
                      "x-ms-visibility": "important"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "mailbox": "support@example.com",
                  "localPart": "support",
                  "domain": "example.com",
                  "tld": "com"
                }
              }
            }
          }
        }
      }
    },
    "/Parse/URL": {
      "x-summary": "URL",
      "get": {
        "operationId": "ParseURLGet",
        "summary": "Parse URL",
        "description": "Split a URL into its component parts: Host, Scheme, Port, Path.",
       
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "http://www.dqglobal.com",
            "required": true,
            "type": "string",
            "description": "The Website to split.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Website"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "type": "object",
                  "description": "The Response.",
                  "properties": {
                    "host": {
                      "type": "string",
                      "description": "The Domain name. I.E. `www.example.com`",
                      "x-ms-visibility": "important"
                    },
                    "scheme": {
                      "type": "string",
                      "description": "The Protocol used in the URL. I.E. HTTP, HTTPS, etc.",
                      "x-ms-visibility": "important"
                    },
                    "hostNameType": {
                      "type": "string",
                      "enum": [
                        "Unknown",
                        "Basic",
                        "Dns",
                        "IPv4",
                        "IPv6"
                      ],
                      "description": "The type of the host name specified in the URL.",
                      "x-ms-visibility": "important"
                    },
                    "pathAndQuery": {
                      "type": "string",
                      "description": "The Path and Query parameters used. I.E. `http://www.example.com/Path` would return `/Path`",
                      "x-ms-visibility": "important"
                    },
                    "port": {
                      "type": "string",
                      "description": "The Port used.",
                      "x-ms-visibility": "important"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "host": "www.dqglobal.com",
                  "scheme": "http",
                  "hostNameType": "Dns",
                  "pathAndQuery": "/",
                  "port": "80"
                }
              }
            }
          }
        }
      }
    },
    "/Scoring": {
      "x-summary": "Scoring",
      "post": {
        "operationId": "Scoring",
        "summary": "Scoring",
        
        "description": "Score records by choosing from a large set of record scoring options; customize your group weightings, score misaligned data and select from various data specific scoring rules.",
        "parameters": [
          {
            "in": "body",
            "name": "Input",
            "x-ms-visibility": "important",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "IsDatum",
                  "UniqueId",
                  "RecordSource",
                  "GroupFields"
                ],
                "properties": {
                  "IsDatum": {
                    "type": "boolean",
                    "description": "Is this record the Datum / Master record. I.E. the record you will compare others against.",
                    "x-ms-visibility": "important",
                    "x-ms-summary": "Is Datum?"
                  },
                  "UniqueId": {
                    "type": "string",
                    "description": "The RecordId so you can identify it in the output list.",
                    "x-ms-visibility": "important",
                    "x-ms-summary": "Record Id"
                  },
                  "RecordSource": {
                    "type": "string",
                    "description": "Name of the source this record came from so you can identify it in the output list.",
                    "x-ms-visibility": "important",
                    "x-ms-summary": "Record Source"
                  },
                  "GroupFields": {
                    "type": "array",
                    "description": "List of Groups to be scored (Groups will be scored against other groups with the same Name). Note: Every Record must have the same number of Entries in the GroupFields Array.",
                    "x-ms-visibility": "important",
                    "items": {
                      "type": "object",
                      "required": [
                        "GroupFieldId",
                        "Settings",
                        "Values"
                      ],
                      "properties": {
                        "GroupFieldId": {
                          "type": "string",
                          "description": "The Group Name.",
                          "x-ms-visibility": "important",
                          "x-ms-summary": "Group Name"
                        },
                        "Settings": {
                          "type": "object",
                          "description": "Scoring settings to be applied to the group.",
                          "x-ms-visibility": "important",
                          "required": [
                            "ScoringType",
                            "ScoreMethod",
                            "ComparisonAlgorithm",
                            "IsCaseSensitiveScore",
                            "AlphaSequenceParameter",
                            "IsReplaceDoubleSpaceWithSingle",
                            "IsRemoveAllWhiteSpaces",
                            "IsTrimString",
                            "IsIncludePunctuation",
                            "IsIncludeSymbols",
                            "IsIncludeNonPrinting",
                            "IsIncludeNumbers",
                            "IsIncludeAlphaChars",
                            "IsWeightingFactorUsed",
                            "IsIncludeOriginalDataForScoring",
                            "IncludeTokenForScoring",
                            "IncludeTransformedDataForScoring",
                            "AutoPopulateEmptyTransformed",
                            "AutoPopulateEmptyToken"
                          ],
                          "properties": {
                            "ScoringType": {
                              "type": "string",
                              "description": "`IntraScore`: Used for groups containing data from a single field. `InterScore`: Used for groups containing data from multiple fields. I.E.Email1 vs Email2 vs Email3.",
                              "x-ms-visibility": "important",
                              "enum": [
                                "InterScore",
                                "IntraScore"
                              ]
                            },
                            "ScoreMethod": {
                              "type": "string",
                              "description": "What type of scoring should be performed?",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Scoring Method",
                              "enum": [
                                "EditDistanceScore",
                                "ExactMatch",
                                "EmailScore",
                                "EmailScoreAsPerDomain",
                                "EmailScoreAsPerUserName",
                                "PostalCodeWholeInput",
                                "PostalCodeLeftN",
                                "PostalCodeRightN",
                                "PostalCodeAsZip",
                                "PostalCodeAsZip4",
                                "AddressLine1PremiseBinary",
                                "AddressLine1PremiseProportional",
                                "AddressLine1Street",
                                "AddressLine1WholeInput",
                                "DateBinary",
                                "DateProportional"
                              ]
                            },
                            "ComparisonAlgorithm": {
                              "type": "string",
                              "description": "Which algorithm would you like to use? Note: Our preferred algorithm is `JaroWinkler`",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Comparison Algorithm",
                              "enum": [
                                "JaroWinkler",
                                "Jaro",
                                "LevenshteinPercentage",
                                "LevenshteinChangeCount",
                                "MongeElkan",
                                "NeedlemanWunsch",
                                "Sift3",
                                "SmithWatermanGotoh",
                                "HammingPercentage",
                                "HammingChangeCount"
                              ]
                            },
                            "IsNullToNullScored": {
                              "type": "boolean",
                              "description": "When performing the comparison should an empty value vs another empty value be considered a match or not?",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Null vs Null Match?",
                              "default": false
                            },
                            "IsNullToValueScored": {
                              "type": "boolean",
                              "description": "When performing the comparison should an empty value vs a populated value be considered a match or not?",
                              "x-ms-visibility": "important",
                              "default": false,
                              "x-ms-summary": "Null vs Value match?"
                            },
                            "IsCaseSensitiveScore": {
                              "type": "boolean",
                              "description": "Should casing be considered when performing the comparison?",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Case Sensitive?"
                            },
                            "AlphaSequenceParameter": {
                              "type": "string",
                              "description": "Should any alphabetical sorting be applied to your data? This helps to minimize the effect of misaligned data.",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Alpha Sequence",
                              "enum": [
                                "AscCharacters",
                                "DescCharacters",
                                "AscWords",
                                "DescWords",
                                "None"
                              ]
                            },
                            "IsReplaceDoubleSpaceWithSingle": {
                              "type": "boolean",
                              "description": "Should two space characters be concatenated to a single space character?",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Replace Double Space With Single Space?"
                            },
                            "IsRemoveAllWhiteSpaces": {
                              "type": "boolean",
                              "description": "Should all whitespace characters be removed from the input? (Space, Non breaking Space, Tab, etc)",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Remove All Whitespace?"
                            },
                            "IsTrimString": {
                              "type": "boolean",
                              "description": "Should whitespace at the start and end of the input be removed?",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Trim String?"
                            },
                            "IsIncludePunctuation": {
                              "type": "boolean",
                              "description": "Should Punctuation be included when performing the comparison?",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Include Punctuation?"
                            },
                            "IsIncludeSymbols": {
                              "type": "boolean",
                              "description": "Should Symbols be included when performing the comparison?",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Include Symbols?"
                            },
                            "IsIncludeNonPrinting": {
                              "type": "boolean",
                              "description": "Should Non-Printing characters be included when performing the comparison?",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Include Non-Printing?"
                            },
                            "IsIncludeNumbers": {
                              "type": "boolean",
                              "description": "Should Numbers be included when performing the comparison?",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Include Numbers?"
                            },
                            "IsIncludeAlphaChars": {
                              "type": "boolean",
                              "description": "Should Letters be included when performing the comparison?",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Include Letters?"
                            },
                            "IsWeightingFactorUsed": {
                              "type": "boolean",
                              "description": "Should a weighting be applied to the result of the group? Note: Weighting value is set using the `Weighting` property.",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Apply Weighting?"
                            },
                            "IsIncludeOriginalDataForScoring": {
                              "type": "boolean",
                              "description": "Should the original input be used in the score calculation? (I.E.before any characters have been excluded).",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Include Pre-Transformed Data For Scoring?"
                            },
                            "IncludeTokenForScoring": {
                              "type": "boolean",
                              "description": "Should the Tokenized value be used in the score calculation?",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Include Token for Scoring?"
                            },
                            "IncludeTransformedDataForScoring": {
                              "type": "boolean",
                              "description": "Should the Transformed value be used in the score calculation? (I.E.after characters have been excluded).",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Include Transforms Data for Scoring?"
                            },
                            "AutoPopulateEmptyTransformed": {
                              "type": "boolean",
                              "description": "Auto populate the `GroupValues.TransformedValue` property using `GroupValues.Value` if `GroupValues.TransformedValue` is null?",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Auto Populate TransformedValue when empty?"
                            },
                            "AutoPopulateEmptyToken": {
                              "type": "boolean",
                              "description": "Auto populate the `GroupValues.Token` property using `GroupValues.TransformedValue` (after transformation) if `GroupValues.Token` is null?",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Auto Populate Token when empty?"
                            },
                            "Weighting": {
                              "type": "integer",
                              "format": "int32",
                              "minimum": -100,
                              "maximum": 100,
                              "description": "Must be a number between -100 and 100. (100 = no change to the result) (A Negative weighting would be used to lower the overall score if values in that group match)",
                              "x-ms-visibility": "important",
                              "default": 100,
                              "x-ms-summary": "Group Weighting"
                            },
                            "PostalCodeNChars": {
                              "type": "integer",
                              "format": "int32",
                              "description": "How many characters should be taken from the postal code? Note: Only applies when ScoreMethod is one of: PostalCodeLeftN, PostalCodeRightN.",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "PostalCodeNChars"
                            },
                            "PositiveValidRange": {
                              "type": "integer",
                              "format": "int32",
                              "description": "How far above can the number go and still be valid. I.E.5 vs 10 is a positive range of 5, but 5 vs 4 is a negative range of 1. Note: Only applies when scoreMethod is one of: PostalCodeAsZip, AddressLine1WholeInput, AddressLine1Premise.",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Positive Valid Range"
                            },
                            "NegativeValidRange": {
                              "type": "integer",
                              "format": "int32",
                              "description": "How far below can the number go and still be valid. I.E.5 vs 10 is a positive range of 5, but 5 vs 4 is a negative range of 1. Note: Only applies when scoreMethod is one of: PostalCodeAsZip, AddressLine1WholeInput, AddressLine1Premise.",
                              "x-ms-visibility": "important",
                              "x-ms-summary": "Negative Valid Range"
                            },
                            "DateFormat": {
                              "type": "string",
                              "description": "What format are your Date values in?",
                              "x-ms-visibility": "important",
                              "enum": [
                                "DDMMYYYY",
                                "MMDDYYYY"
                              ],
                              "default": "DDMMYYYY",
                              "x-ms-summary": "Date Format"
                            },
                            "InterScoreSettings": {
                              "type": "object",
                              "description": "Additional config for when using scoringType = InterScore.",
                              "x-ms-visibility": "important",
                              "properties": {
                                "InterScoreMethodType": {
                                  "type": "string",
                                  "description": "What type of multi field comparison should be used?",
                                  "x-ms-visibility": "important",
                                  "x-ms-summary": "Scoring Method",
                                  "enum": [
                                    "AnyMatch",
                                    "AllMatch"
                                  ]
                                },
                                "ThresholdValue": {
                                  "type": "integer",
                                  "format": "int32",
                                  "minimum": 0,
                                  "maximum": 100,
                                  "description": "Similarity Threshold for what counts as a match. (Between 0 and 100, Default = 100)",
                                  "x-ms-visibility": "important",
                                  "x-ms-summary": "Threshold"
                                }
                              }
                            }
                          }
                        },
                        "Values": {
                          "type": "array",
                          "description": "List of Values to compare within the group.",
                          "x-ms-visibility": "important",
                          "items": {
                            "type": "object",
                            "required": [
                              "Value"
                            ],
                            "properties": {
                              "Value": {
                                "type": "string",
                                "description": "The Original Field Value.",
                                "x-ms-visibility": "important",
                                "x-ms-summary": "Value"
                              },
                              "TransformedValue": {
                                "type": "string",
                                "description": "The Transformed field value. (I.E. After whitespace, numbers, etc have been removed).",
                                "x-ms-visibility": "advanced",
                                "x-ms-summary": "Transformed Value"
                              },
                              "Token": {
                                "type": "string",
                                "description": "A Tokenized representation of the data.",
                                "x-ms-visibility": "advanced",
                                "x-ms-summary": "Token Value"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "example": [
                {
                  "IsDatum": true,
                  "UniqueId": "123",
                  "RecordSource": "SQLServer-Instance1",
                  "GroupFields": [
                    {
                      "GroupFieldId": "Name",
                      "Settings": {
                        "ScoringType": "IntraScore",
                        "scoreMethod": "EditDistanceScore",
                        "comparisonAlgorithm": "JaroWinkler",
                        "IsNullToNullScored": true,
                        "IsNullToValueScored": true,
                        "IsCaseSensitiveScore": false,
                        "AlphaSequenceParameter": "AscWords",
                        "IsReplaceDoubleSpaceWithSingle": true,
                        "IsRemoveAllWhiteSpaces": false,
                        "IsTrimString": true,
                        "IsIncludePunctuation": false,
                        "IsIncludeSymbols": false,
                        "IsIncludeNonPrinting": false,
                        "IsIncludeNumbers": true,
                        "IsIncludeAlphaChars": true,
                        "IsWeightingFactorUsed": false,
                        "IsIncludeOriginalDataForScoring": false,
                        "IncludeTokenForScoring": false,
                        "IncludeTransformedDataForScoring": true,
                        "AutoPopulateEmptyTransformed": true,
                        "AutoPopulateEmptyToken": true,
                        "Weighting": 100,
                        "PostalCodeNChars": 0,
                        "PositiveValidRange": 0,
                        "NegativeValidRange": 0,
                        "InterScoreSettings": null,
                        "DateFormat": "DDMMYYYY"
                      },
                      "Values": [
                        {
                          "Value": "Clarc",
                          "TransformedValue": null,
                          "Token": null
                        }
                      ]
                    }
                  ]
                },
                {
                  "IsDatum": false,
                  "UniqueId": "ABC",
                  "RecordSource": "SQLServer-Instance2",
                  "GroupFields": [
                    {
                      "GroupFieldId": "Name",
                      "Settings": {
                        "ScoringType": "IntraScore",
                        "scoreMethod": "EditDistanceScore",
                        "comparisonAlgorithm": "JaroWinkler",
                        "IsNullToNullScored": true,
                        "IsNullToValueScored": true,
                        "IsCaseSensitiveScore": false,
                        "AlphaSequenceParameter": "AscWords",
                        "IsReplaceDoubleSpaceWithSingle": true,
                        "IsRemoveAllWhiteSpaces": false,
                        "IsTrimString": true,
                        "IsIncludePunctuation": false,
                        "IsIncludeSymbols": false,
                        "IsIncludeNonPrinting": false,
                        "IsIncludeNumbers": true,
                        "IsIncludeAlphaChars": true,
                        "IsWeightingFactorUsed": false,
                        "IsIncludeOriginalDataForScoring": false,
                        "IncludeTokenForScoring": false,
                        "IncludeTransformedDataForScoring": true,
                        "AutoPopulateEmptyTransformed": true,
                        "AutoPopulateEmptyToken": true,
                        "Weighting": 100,
                        "PostalCodeNChars": 0,
                        "PositiveValidRange": 0,
                        "NegativeValidRange": 0,
                        "InterScoreSettings": null,
                        "DateFormat": "DDMMYYYY"
                      },
                      "Values": [
                        {
                          "Value": "Clark",
                          "TransformedValue": null,
                          "Token": null
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "type": "array",
                  "description": "List of scoring results.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "datumRecordSource": {
                        "type": "string",
                        "description": "The `RecordSource` value supplied on the Input Datum record.",
                        "x-ms-visibility": "important"
                      },
                      "datumUniqueId": {
                        "type": "string",
                        "description": "The `UniqueId` value supplied on the Input Datum record.",
                        "x-ms-visibility": "important"
                      },
                      "secondaryRecordSource": {
                        "type": "string",
                        "description": "The `RecordSource` value supplied on the Input Secondary record.",
                        "x-ms-visibility": "important"
                      },
                      "secondaryUniqueId": {
                        "type": "string",
                        "description": "The `UniqueId` value supplied on the Input Secondary record.",
                        "x-ms-visibility": "important"
                      },
                      "percentageScore": {
                        "type": "number",
                        "format": "float",
                        "description": "Record similarity between 0 and 100.",
                        "x-ms-visibility": "important"
                      },
                      "groupOutput": {
                        "description": "List of scoring results for each field group supplied.",
                        "x-ms-visibility": "advanced",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "groupFieldID": {
                              "type": "string",
                              "description": "The Group Name.",
                              "x-ms-visibility": "advanced"
                            },
                            "groupPercentageScore": {
                              "type": "number",
                              "format": "float",
                              "description": "The Similarity Score of the group.",
                              "x-ms-visibility": "advanced"
                            },
                            "warnings": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "List of Warnings (if any) for the group.",
                              "x-ms-visibility": "advanced"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": [
                  {
                    "datumRecordSource": "SQLServer-Instance1",
                    "datumUniqueId": "123",
                    "secondaryRecordSource": "SQLServer-Instance2",
                    "secondaryUniqueId": "ABC",
                    "percentageScore": 92,
                    "groupOutput": [
                      {
                        "groupFieldID": "Name",
                        "groupPercentageScore": 0.92,
                        "warnings": null
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/Transform": {
      "x-summary": "Transform All Categories",
      "get": {
        "operationId": "TransformGet",
        "summary": "Transform",
        
        "description": "Transform data (Abbreviate, Elaborate, Exclude or Normalize) in 5 spoken languages. Choose from 11 different transformation libraries including: Business, Countries, First Names and Addressing... e.g. Abbreviate country transform (United Kingdom to UK).",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "Robert",
            "required": true,
            "type": "string",
            "description": "The value to be transformed.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "EntityType",
            "x-example": "GivenNames",
            "enum": [
              "Addresses",
              "Numbers",
              "GivenNames",
              "Businesses",
              "BusinessJobTitles",
              "Dates",
              "Miscellaneous",
              "WeightsAndMeasures",
              "Qualifications",
              "Salutations",
              "Countries",
              "FamilyNames",
              "Salacious"
            ],
            "required": true,
            "type": "string",
            "description": "The Category to use for transforming.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Category"
          },
          {
            "in": "query",
            "name": "OperationType",
            "x-example": "Abbreviate",
            "enum": [
              "Elaborate",
              "Abbreviate",
              "Normalize",
              "Exclude",
              "Transliterate"
            ],
            "required": true,
            "type": "string",
            "description": "The type of transformation to be performed.",
            "x-ms-visibility": "important",
            "default": "Abbreviate",
            "x-ms-summary": "Action"
          },
          {
            "in": "query",
            "name": "Language",
            "x-example": "English",
            "enum": [
              "English",
              "Spanish",
              "French",
              "Italian",
              "German"
            ],
            "type": "string",
            "required": false,
            "description": "The Input Language of the data you are supplying.",
            "x-ms-visibility": "important",
            "default": "English",
            "x-ms-summary": "Language"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "Bob"
              }
            }
          }
        }
      }
    },
    "/SequenceTransform": {
      "x-summary": "Sequence Transform",
      "post": {
        "operationId": "SequenceTransform",
        "summary": "Sequence Transform",
       
        "description": "Perform multiple transformations in a single request. For Example; Elaborate Numbers and Abbreviate Addresses.",
        "parameters": [
          {
            "in": "body",
            "name": "Input",
            "x-ms-visibility": "important",
            "schema": {
              "type": "array",
              "minItems": 0,
              "maxItems": 1000,
              "items": {
                "type": "object",
                "required": [
                  "Input",
                  "Settings"
                ],
                "properties": {
                  "Input": {
                    "type": "string",
                    "x-ms-visibility": "important",
                    "description": "The value to be transformed.",
                    "x-ms-summary": "Input"
                  },
                  "Settings": {
                    "type": "array",
                    "x-ms-summary": "Settings",
                    "x-ms-visibility": "important",
                    "description": "List of transformations to perform.",
                    "items": {
                      "type": "object",
                      "required": [
                        "EntityType",
                        "OperationType",
                        "Language"
                      ],
                      "properties": {
                        "EntityType": {
                          "type": "string",
                          "enum": [
                            "Addresses",
                            "Numbers",
                            "GivenNames",
                            "Businesses",
                            "BusinessJobTitles",
                            "Dates",
                            "Miscellaneous",
                            "WeightsAndMeasures",
                            "Qualifications",
                            "Salutations",
                            "Countries",
                            "FamilyNames",
                            "Salacious"
                          ],
                          "description": "The Category to use for transforming.",
                          "x-ms-visibility": "important",
                          "x-ms-summary": "Category"
                        },
                        "OperationType": {
                          "type": "string",
                          "enum": [
                            "Elaborate",
                            "Abbreviate",
                            "Normalize",
                            "Exclude",
                            "Transliterate"
                          ],
                          "description": "The type of transformation to perform.",
                          "default": "Abbreviate",
                          "x-ms-visibility": "important",
                          "x-ms-summary": "Action"
                        },
                        "Language": {
                          "type": "string",
                          "enum": [
                            "English",
                            "Spanish",
                            "French",
                            "Italian",
                            "German"
                          ],
                          "description": "The spoken language that the value is in.",
                          "default": "English",
                          "x-ms-visibility": "important",
                          "x-ms-summary": "Language"
                        }
                      }
                    }
                  },
                  "UID": {
                    "type": "string",
                    "x-ms-visibility": "advanced",
                    "description": "The record identifier which will be echoed back to you.",
                    "x-ms-summary": "Record Id"
                  }
                }
              },
              "example": [
                {
                  "Input": "Bob Smith one two three London Road",
                  "UID": "<Record ID>",
                  "Settings": [
                    {
                      "EntityType": "GivenNames",
                      "OperationType": "Elaborate",
                      "Language": "English"
                    },
                    {
                      "EntityType": "Numbers",
                      "OperationType": "Exclude",
                      "Language": "English"
                    },
                    {
                      "EntityType": "Addresses",
                      "OperationType": "Abbreviate",
                      "Language": "English"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "input": {
                        "description": "The original value.",
                        "type": "string",
                        "x-ms-visibility": "advanced"
                      },
                      "output": {
                        "description": "The response.",
                        "type": "string",
                        "x-ms-visibility": "important"
                      },
                      "uid": {
                        "description": "The unique identifier provided.",
                        "type": "string",
                        "x-ms-visibility": "advanced"
                      },
                      "status": {
                        "description": "HTTP Status code of this item.",
                        "type": "integer",
                        "x-ms-visibility": "advanced"
                      },
                      "message": {
                        "description": "A message describing the request status.",
                        "type": "string",
                        "x-ms-visibility": "advanced"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": [
                  {
                    "input": "Bob Smith one two three London Road",
                    "output": "Robert Smith London Rd",
                    "uid": "<Record ID>",
                    "status": 200,
                    "message": "Success"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/Validate/Email": {
      "x-summary": "Email",
      "get": {
        "operationId": "ValidateEmailGet",
        "summary": "Validate Email",
        
        "description": "Check the syntactical validity of an Email Address.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "info@dqglobal.com",
            "required": true,
            "type": "string",
            "description": "The email to validate.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Email"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": true
              }
            }
          }
        }
      }
    },
    "/Validate/PostCode": {
      "x-summary": "PostCode",
      "get": {
        "operationId": "ValidatePostCodeGet",
        "summary": "Validate PostCode",
        
        "description": "Check the syntactical validity of a PostCode.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "PO13 9FU",
            "required": true,
            "type": "string",
            "description": "The postal code to be validated.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Postal Code"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "GB",
            "type": "string",
            "required": true,
            "description": "A Country Identifier. I.E. `GB`, `GBR`, `United Kingdom` etc.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": true
              }
            }
          }
        }
      }
    },
    "/Validate/UrlAddress": {
      "x-summary": "UrlAddress",
      "get": {
        "operationId": "ValidateURLGet",
        "summary": "Validate URL",
        
        "description": "Check the syntactical validity of a URL.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "https://www.google.co.in/",
            "required": true,
            "type": "string",
            "description": "The URL to be validated.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Website"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": true
              }
            }
          }
        }
      }
    },
    "/Validate/Telephone": {
      "x-summary": "Telephone",
      "get": {
        "operationId": "ValidatePhoneGet",
        "summary": "Validate Phone",
    
        "description": "Check the syntactical validity of a PhoneNumber.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "+442392988303",
            "required": true,
            "type": "string",
            "description": "The phone to be validated.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Phone"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "GB",
            "required": true,
            "type": "string",
            "description": "A Country Identifier. I.E. `GB`, `GBR`, `United Kingdom` etc.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": true
              }
            }
          }
        }
      }
    },
    "/Validate/DateTime": {
      "x-summary": "DateTime",
      "get": {
        "operationId": "ValidateDateTimeGet",
        "summary": "Validate DateTime",
    
        "description": "Check if your DateTime values are in the syntax you expect.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "2020-01-01",
            "required": true,
            "type": "string",
            "description": "The datetime to be validated.",
            "x-ms-visibility": "important",
            "x-ms-summary": "DateTime"
          },
          {
            "in": "query",
            "name": "DateTimeFormat",
            "x-example": "yyyy-mm-dd",
            "required": true,
            "type": "string",
            "description": "The expected format. Example: `yyyy-mm-dd`",
            "x-ms-visibility": "important",
            "x-ms-summary": "Format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": true
              }
            }
          }
        }
      }
    },
    "/ValidatePlus/Email": {
      "x-summary": "Email",
      "get": {
        "operationId": "ValidatePlusEmailGet",
        "summary": "ValidatePlus Email",
       
        "description": "Check the syntactical validity of an Email Address.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "info@dqglobal.com",
            "required": true,
            "type": "string",
            "description": "The email to be validated.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Email"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "description": "The response.",
                  "type": "object",
                  "x-ms-visibility": "important",
                  "properties": {
                    "isValid": {
                      "type": "boolean",
                      "x-ms-visibility": "important",
                      "description": "Boolean value stating the validity of the supplied value."
                    },
                    "messages": {
                      "type": "array",
                      "x-ms-visibility": "important",
                      "description": "List of reasons as to why the supplied value was invalid.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "isValid": true,
                  "messages": [
                    "Email is valid"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/ValidatePlus/PostCode": {
      "x-summary": "PostCode",
      "get": {
        "operationId": "ValidatePlusPostCodeGet",
        "summary": "ValidatePlus PostCode",
       
        "description": "Check the syntactical validity of a PostCode.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "PO13 9FU",
            "required": true,
            "type": "string",
            "description": "The postal code to be validated.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Postal Code"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "GB",
            "type": "string",
            "required": true,
            "description": "A Country Identifier. I.E. `GB`, `GBR`, `United Kingdom` etc.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "description": "The response.",
                  "type": "object",
                  "x-ms-visibility": "important",
                  "properties": {
                    "isValid": {
                      "type": "boolean",
                      "x-ms-visibility": "important",
                      "description": "Boolean value stating the validity of the supplied value."
                    },
                    "messages": {
                      "type": "array",
                      "x-ms-visibility": "important",
                      "description": "List of reasons as to why the supplied value was invalid.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "isValid": true,
                  "messages": [
                    "Postcode is valid"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/ValidatePlus/UrlAddress": {
      "x-summary": "UrlAddress",
      "get": {
        "operationId": "ValidatePlusURLGet",
        "summary": "ValidatePlus URL",
        
        "description": "Check the syntactical validity of a URL.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "https://www.google.co.in/",
            "required": true,
            "type": "string",
            "description": "The URL to validate.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Website"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "description": "The response.",
                  "type": "object",
                  "x-ms-visibility": "important",
                  "properties": {
                    "isValid": {
                      "type": "boolean",
                      "x-ms-visibility": "important",
                      "description": "Boolean value stating the validity of the supplied value."
                    },
                    "messages": {
                      "type": "array",
                      "x-ms-visibility": "important",
                      "description": "List of reasons as to why the supplied value was invalid.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "isValid": true,
                  "messages": [
                    "URL is valid"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/Verify/Address/{Provider}": {
      "x-summary": "Verify Address",
      "get": {
        "operationId": "VerifyAddressGet",
        "summary": "Verify Address",
        
        "description": "Check your address is deliverable by verifying it against a set of reference data.",
        "parameters": [
          {
            "in": "path",
            "name": "Provider",
            "x-example": "Loqate",
            "required": true,
            "type": "string",
            "enum": [
              "Loqate"
            ],
            "description": "The Provider to use.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Provider",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "query",
            "name": "Line1",
            "x-example": "10 Downing Street",
            "required": false,
            "type": "string",
            "description": "Address Line1.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Line 1"
          },
          {
            "in": "query",
            "name": "Line2",
            "x-example": "",
            "required": false,
            "type": "string",
            "description": "Address Line2.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Line 2"
          },
          {
            "in": "query",
            "name": "Line3",
            "x-example": "",
            "required": false,
            "type": "string",
            "description": "Address Line3.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Line 3"
          },
          {
            "in": "query",
            "name": "PostalCode",
            "x-example": "SW1A 2AA",
            "required": false,
            "type": "string",
            "description": "Address PostalCode.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Postal Code"
          },
          {
            "in": "query",
            "name": "City",
            "x-example": "London",
            "required": false,
            "type": "string",
            "description": "Address City.",
            "x-ms-visibility": "important",
            "x-ms-summary": "City"
          },
          {
            "in": "query",
            "name": "State",
            "x-example": "",
            "required": false,
            "type": "string",
            "description": "Address State / Province.",
            "x-ms-visibility": "important",
            "x-ms-summary": "State / Province"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "GB",
            "x-ms-summary": "Country Identifier",
            "required": true,
            "type": "string",
            "description": "A CountryIdentifier I.E.(GB, GBR, 44, United Kingdom, etc)",
            "x-ms-visibility": "important"
          },
          {
            "in": "query",
            "name": "Geocode",
            "x-example": true,
            "required": true,
            "type": "boolean",
            "description": "Return Latitude & Longitude information if known?",
            "x-ms-visibility": "important",
            "x-ms-summary": "Geocode?"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "description": "The response.",
                  "type": "object",
                  "properties": {
                    "dqLine1": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "description": "Line1 of the address block.",
                      "x-nullable": true
                    },
                    "dqLine2": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "description": "Line2 of the address block.",
                      "x-nullable": true
                    },
                    "dqLine3": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "description": "Line3 of the address block.",
                      "x-nullable": true
                    },
                    "dqLine4": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "description": "Line4 of the address block.",
                      "x-nullable": true
                    },
                    "dqCity": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "description": "The city the address is located within.",
                      "x-nullable": true
                    },
                    "dqCounty_District": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "description": "The County / District the address is located within.",
                      "x-nullable": true
                    },
                    "dqState_Province": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "description": "The State / Province the address is located within.",
                      "x-nullable": true
                    },
                    "dqziP_PostalCode": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "description": "The address ZIP / PostalCode.",
                      "x-nullable": true
                    },
                    "dqCountry": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "description": "The name of the country the address is located within.",
                      "x-nullable": true
                    },
                    "dqisO3": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "description": "The ISO 3166-1 alpha-3 code of the country the address is located within.",
                      "x-nullable": true
                    },
                    "dqisO2": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "description": "The ISO 3166-1 alpha-2 code of the country the address is located within.",
                      "x-nullable": true
                    },
                    "dqLatitude": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "description": "The Latitude for the address.",
                      "x-nullable": true
                    },
                    "dqLongitude": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "description": "The Longitude for the address.",
                      "x-nullable": true
                    },
                    "status": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "enum": [
                        "VERIFIED",
                        "SUSPECT",
                        "UNVERIFIED"
                      ],
                      "description": "The address verification status.",
                      "x-nullable": true
                    },
                    "additionalInfo": {
                      "type": "object",
                      "x-ms-visibility": "advanced",
                      "x-nullable": true,
                      "additionalProperties": true
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "dqLine1": "10 Downing Street",
                  "dqLine2": "",
                  "dqLine3": "",
                  "dqLine4": "",
                  "dqCity": "London",
                  "dqCounty_District": "",
                  "dqState_Province": "London",
                  "dqziP_POSTALCODE": "SW1A 2AA",
                  "dqCountry": "United Kingdom",
                  "dqisO3": "GBR",
                  "dqisO2": "GB",
                  "dqLatitude": "51.503360",
                  "dqLongitude": "-0.127670",
                  "status": "VERIFIED",
                  "additionalInfo": {}
                }
              }
            }
          }
        }
      }
    },
    "/Search/Address/Find/{Provider}": {
      "x-summary": "Search Address Find",
      "get": {
        "operationId": "SearchAddressFind",
        "summary": "SearchAddress - Find",
        
        "description": "Return a list of possible address matches.",
        "parameters": [
          {
            "in": "path",
            "name": "Provider",
            "x-example": "Loqate",
            "required": true,
            "type": "string",
            "enum": [
              "Loqate",
              "Fetchify",
              "GetAddressIO",
              "AFD"
            ],
            "description": "The Provider to use.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Provider",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "query",
            "name": "query",
            "x-example": "10 Downing Street sw1a",
            "required": true,
            "type": "string",
            "description": "The Address to search for.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Query"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "United Kingdom",
            "required": true,
            "type": "string",
            "description": "A CountryIdentifier (GB, GBR, 44, United Kingdom, etc) for the country to search in.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "description": "The response.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "x-ms-visibility": "important",
                        "type": "string",
                        "x-nullable": true,
                        "description": "The AddressId to use in the Retrieve call."
                      },
                      "label": {
                        "x-ms-visibility": "important",
                        "type": "string",
                        "x-nullable": true,
                        "description": "A preview of the address."
                      },
                      "subLabel": {
                        "x-ms-visibility": "important",
                        "type": "string",
                        "x-nullable": true,
                        "description": "A preview of the address."
                      },
                      "additionalInfo": {
                        "type": "object",
                        "x-ms-visibility": "advanced",
                        "x-nullable": true,
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": [ 
                  {
                    "id": "GB|RM|B|23747771",
                    "label": "10 Downing Street, London SW1A 2AA, UK",
                    "subLabel": null,
                    "additionalInfo": {}
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/Search/Address/Retrieve/{Provider}": {
      "x-summary": "Search Address Retrieve",
      "get": {
        "operationId": "SearchAddressRetrieve",
        "summary": "SearchAddress - Retrieve",
        
        "description": "Return the address details using the ID from the Find call.",
        "parameters": [
          {
            "in": "path",
            "name": "Provider",
            "x-example": "Loqate",
            "required": true,
            "type": "string",
            "enum": [
              "Loqate",
              "Fetchify",
              "GetAddressIO",
              "AFD"
            ],
            "description": "The Provider to use.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Provider",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "query",
            "name": "Id",
            "x-example": "GB|RM|B|23747771",
            "required": true,
            "type": "string",
            "description": "The ID from the Find request.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Address Id"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "United Kingdom",
            "required": true,
            "type": "string",
            "description": "A CountryIdentifier (GB, GBR, 44, United Kingdom, etc) for the country to search in.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "description": "The response.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "dqLine1": {
                        "type": "string",
                        "description": "Line1 of the address block.",
                        "x-ms-visibility": "important",
                        "x-nullable": true
                      },
                      "dqLine2": {
                        "type": "string",
                        "description": "Line2 of the address block.",
                        "x-ms-visibility": "important",
                        "x-nullable": true
                      },
                      "dqLine3": {
                        "type": "string",
                        "description": "Line3 of the address block.",
                        "x-ms-visibility": "important",
                        "x-nullable": true
                      },
                      "dqLine4": {
                        "type": "string",
                        "description": "Line4 of the address block.",
                        "x-ms-visibility": "important",
                        "x-nullable": true
                      },
                      "dqCity": {
                        "type": "string",
                        "description": "The City the address is located within.",
                        "x-ms-visibility": "important",
                        "x-nullable": true
                      },
                      "dqCounty_District": {
                        "type": "string",
                        "description": "The County / District the address is located within.",
                        "x-ms-visibility": "important",
                        "x-nullable": true
                      },
                      "dqState_Province": {
                        "type": "string",
                        "description": "The State / Province the address is located within.",
                        "x-ms-visibility": "important",
                        "x-nullable": true
                      },
                      "dqziP_PostalCode": {
                        "type": "string",
                        "description": "The address ZIP / PostalCode.",
                        "x-ms-visibility": "important",
                        "x-nullable": true
                      },
                      "dqCountry": {
                        "type": "string",
                        "description": "The name of the Country the address is located within.",
                        "x-ms-visibility": "important",
                        "x-nullable": true
                      },
                      "dqisO3": {
                        "type": "string",
                        "description": "The ISO 3166-1 alpha-3 code of the country the address is located within.",
                        "x-ms-visibility": "important",
                        "x-nullable": true
                      },
                      "dqisO2": {
                        "type": "string",
                        "description": "The ISO 3166-1 alpha-2 code of the country the address is located within.",
                        "x-ms-visibility": "important",
                        "x-nullable": true
                      },
                      "additionalInfo": {
                        "type": "object",
                        "additionalProperties": true,
                        "x-ms-visibility": "advanced",
                        "x-nullable": true
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": [
                  {
                    "dqLine1": "10 Downing St",
                    "dqLine2": "",
                    "dqLine3": "",
                    "dqLine4": "",
                    "dqCity": "London",
                    "dqCounty_District": "Greater London,England",
                    "dqState_Province": null,
                    "dqziP_PostalCode": "SW1A 2AB",
                    "dqCountry": "United Kingdom",
                    "dqisO3": "GBR",
                    "dqisO2": "GB",
                    "additionalInfo": {}
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/Suppress/Deceased/{Provider}": {
      "x-summary": "Suppress - Deceased",
      "get": {
        "operationId": "SuppressDeceased",
        "summary": "Suppress - Deceased",
       
        "description": "Check whether a person has died.\\n\\nNote: At present this endpoint only supports `GB` data.",
        "parameters": [
          {
            "in": "path",
            "name": "Provider",
            "x-example": "REaDGroup",
            "required": true,
            "type": "string",
            "enum": [
              "REaDGroup"
            ],
            "description": "The Provider to use.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Provider",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "query",
            "name": "Title",
            "x-example": "Mr",
            "required": false,
            "type": "string",
            "description": "Salutation of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Title"
          },
          {
            "in": "query",
            "name": "FirstName",
            "x-example": "David",
            "required": false,
            "type": "string",
            "description": "First Name of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "First Name"
          },
          {
            "in": "query",
            "name": "LastName",
            "x-example": "Cameron",
            "required": true,
            "type": "string",
            "description": "Last Name of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Last Name"
          },
          {
            "in": "query",
            "name": "Line1",
            "x-example": "10 Downing Street",
            "required": false,
            "type": "string",
            "description": "Address Line 1 of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Line 1"
          },
          {
            "in": "query",
            "name": "Line2",
            "x-example": "",
            "required": false,
            "type": "string",
            "description": "Address Line 2 of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Line 2"
          },
          {
            "in": "query",
            "name": "Line3",
            "x-example": "",
            "required": false,
            "type": "string",
            "description": "Address Line 3 of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Line 3"
          },
          {
            "in": "query",
            "name": "Town",
            "x-example": "London",
            "required": false,
            "type": "string",
            "description": "Address Town of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Town"
          },
          {
            "in": "query",
            "name": "County",
            "x-example": "",
            "required": false,
            "type": "string",
            "description": "Address County of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "County"
          },
          {
            "in": "query",
            "name": "Postcode",
            "x-example": "SW1A 2AA",
            "required": true,
            "type": "string",
            "description": "Address PostalCode of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Postal Code"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "GB",
            "required": true,
            "type": "string",
            "description": "A Country Identifier (GB, GBR, United Kingdom, etc) for the address to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "description": "The response.",
                  "type": "object",
                  "properties": {
                    "status": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "enum": [
                        "Suppressed",
                        "Suspect",
                        "NotFound"
                      ],
                      "x-nullable": true,
                      "description": "Suppression Status based on the Confidence percentage."
                    },
                    "confidence": {
                      "x-ms-visibility": "important",
                      "type": "number",
                      "format": "double",
                      "x-nullable": true,
                      "description": "Confident percentage that your record should be suppressed."
                    },
                    "newAddress": {
                      "x-ms-visibility": "important",
                      "type": "object",
                      "x-nullable": true,
                      "description": "The New address (if known).",
                      "properties": {
                        "title": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Title / Salutation."
                        },
                        "forename": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "First Name."
                        },
                        "surname": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Last Name."
                        },
                        "moveDate": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "format": "date-time",
                          "x-nullable": true,
                          "description": "Move Date."
                        },
                        "address1": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Address Line1."
                        },
                        "address2": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Address Line2."
                        },
                        "address3": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Address Line3."
                        },
                        "town": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Address Town."
                        },
                        "county": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Address County."
                        },
                        "postcode": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Address Postcode."
                        }
                      }
                    },
                    "additionalInfo": {
                      "type": "object",
                      "x-ms-visibility": "advanced",
                      "x-nullable": true,
                      "additionalProperties": true
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": [
                  {
                    "status": "NotFound",
                    "confidence": 0,
                    "newAddress": null,
                    "additionalInfo": null
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/Suppress/GoneAway/{Provider}": {
      "x-summary": "Suppress - GoneAway",
      "get": {
        "operationId": "SuppressGoneAway",
        "summary": "Suppress - GoneAway",
        
        "description": "Check whether a person has moved and retrieve their new address (if it is known) Note: At present this endpoint only supports `GB` data.",
        "parameters": [
          {
            "in": "path",
            "name": "Provider",
            "x-example": "REaDGroup",
            "required": true,
            "type": "string",
            "enum": [
              "REaDGroup"
            ],
            "description": "The Provider to use.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Provider",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "query",
            "name": "Title",
            "x-example": "Mr",
            "required": false,
            "type": "string",
            "description": "Salutation of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Title"
          },
          {
            "in": "query",
            "name": "FirstName",
            "x-example": "David",
            "required": false,
            "type": "string",
            "description": "First Name of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "First Name"
          },
          {
            "in": "query",
            "name": "LastName",
            "x-example": "Cameron",
            "required": true,
            "type": "string",
            "description": "Last Name of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Last Name"
          },
          {
            "in": "query",
            "name": "Line1",
            "x-example": "10 Downing Street",
            "required": false,
            "type": "string",
            "description": "Address Line 1 of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Line 1"
          },
          {
            "in": "query",
            "name": "Line2",
            "x-example": "",
            "required": false,
            "type": "string",
            "description": "Address Line 2 of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Line 2"
          },
          {
            "in": "query",
            "name": "Line3",
            "x-example": "",
            "required": false,
            "type": "string",
            "description": "Address Line 3 of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Line 3"
          },
          {
            "in": "query",
            "name": "Town",
            "x-example": "London",
            "required": false,
            "type": "string",
            "description": "Address Town of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Town"
          },
          {
            "in": "query",
            "name": "County",
            "x-example": "",
            "required": false,
            "type": "string",
            "description": "Address County of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "County"
          },
          {
            "in": "query",
            "name": "Postcode",
            "x-example": "SW1A 2AA",
            "required": true,
            "type": "string",
            "description": "Address PostalCode of the person to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Postal Code"
          },
          {
            "in": "query",
            "name": "ISO2",
            "x-example": "GB",
            "required": true,
            "type": "string",
            "description": "A Country Identifier (GB, GBR, United Kingdom, etc) for the address to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          },
          {
            "in": "query",
            "name": "ReturnNewAddress",
            "x-example": false,
            "required": true,
            "type": "boolean",
            "description": "If the New address is known, should it be returned?",
            "x-ms-visibility": "important",
            "x-ms-summary": "Return New Address?"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "description": "The response.",
                  "type": "object",
                  "properties": {
                    "status": {
                      "x-ms-visibility": "important",
                      "type": "string",
                      "enum": [
                        "Suppressed",
                        "Suspect",
                        "NotFound"
                      ],
                      "x-nullable": true,
                      "description": "Suppression Status based on the Confidence percentage."
                    },
                    "confidence": {
                      "x-ms-visibility": "important",
                      "type": "number",
                      "format": "double",
                      "x-nullable": true,
                      "description": "Confident percentage that your record should be suppressed."
                    },
                    "newAddress": {
                      "x-ms-visibility": "important",
                      "type": "object",
                      "x-nullable": true,
                      "description": "The New address (if known).",
                      "properties": {
                        "title": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Title / Salutation."
                        },
                        "forename": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "First Name."
                        },
                        "surname": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Last Name."
                        },
                        "moveDate": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "format": "date-time",
                          "x-nullable": true,
                          "description": "Move Date."
                        },
                        "address1": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Address Line1."
                        },
                        "address2": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Address Line2."
                        },
                        "address3": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Address Line3."
                        },
                        "town": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Address Town."
                        },
                        "county": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Address County."
                        },
                        "postcode": {
                          "x-ms-visibility": "important",
                          "type": "string",
                          "x-nullable": true,
                          "description": "Address Postcode."
                        }
                      }
                    },
                    "additionalInfo": {
                      "type": "object",
                      "x-ms-visibility": "advanced",
                      "x-nullable": true,
                      "additionalProperties": true
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": [
                  {
                    "status": "Suppressed",
                    "confidence": 100,
                    "newAddress": null,
                    "additionalInfo": null
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/Authenticate/Email/{Provider}": {
      "x-summary": "Authenticate Email",
      "get": {
        "operationId": "AuthenticateEmailGet",
        "summary": "Authenticate Email",
        
        "description": "Truly confirm if your email is authentic and will deliver. \\n\\nNote: `Betterfy` only support business email addresses and will not check free email providers such as `hotmail`, `gmail`, etc.",
        "parameters": [
          {
            "in": "path",
            "name": "Provider",
            "x-example": "GamaLogic",
            "required": true,
            "type": "string",
            "enum": [
              "Betterfy",
              "TextMagic",
              "Loqate",
              "Fetchify",
              "Gamalogic",
              "AFD"
            ],
            "description": "The Provider to use.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Provider",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "query",
            "name": "Email",
            "x-example": "support@dqglobal.com",
            "required": true,
            "type": "string",
            "description": "The Email address to authenticate.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Email"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "description": "The response.",
                  "type": "object",
                  "properties": {
                    "emailAddress": {
                      "type": "string",
                      "description": "The Email that was supplied.",
                      "x-ms-visibility": "advanced"
                    },
                    "domainPart": {
                      "type": "string",
                      "description": "The Domain part of the Email. I.E.`Bob.Smith@Example.com` -> `Example.com`",
                      "x-ms-visibility": "important"
                    },
                    "isCorporate": {
                      "type": "boolean",
                      "description": "Is the supplied email a business email or from a free email provider (`hotmail`, `gmail`, etc)",
                      "x-ms-visibility": "important"
                    },
                    "isDisposable": {
                      "type": "boolean",
                      "description": "Is the supplied email address a disposable mailbox.",
                      "x-ms-visibility": "important"
                    },
                    "isRoleBased": {
                      "type": "boolean",
                      "description": "Is the Local part of the email role based (`support`, `sales`, `marketing`, etc)",
                      "x-ms-visibility": "important"
                    },
                    "localPart": {
                      "type": "string",
                      "description": "The Local part of the Email. I.E.`Bob.Smith@Example.com` -> `Bob.Smith`",
                      "x-ms-visibility": "important"
                    },
                    "result": {
                      "type": "boolean",
                      "description": "Authentication Result.",
                      "x-ms-visibility": "important"
                    },
                    "additionalInfo": {
                      "type": "object",
                      "additionalProperties": true,
                      "description": "Dictionary of additional fields returned by the provider.",
                      "x-ms-visibility": "advanced"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "emailAddress": "support@dqglobal.com",
                  "domainPart": "dqglobal.com",
                  "isCorporate": true,
                  "isDisposable": false,
                  "isRoleBased": true,
                  "localPart": "support",
                  "result": true,
                  "additionalInfo": null
                }
              }
            }
          }
        }
      }
    },
    "/Authenticate/Phone/{Provider}": {
      "x-summary": "Authenticate Phone",
      "get": {
        "operationId": "AuthenticatePhoneGet",
        "summary": "Authenticate Phone",
        
        "description": "Truly confirm if your phonenumber is authentic and will dial.",
        "parameters": [
          {
            "in": "path",
            "name": "Provider",
            "x-example": "Loqate",
            "required": true,
            "type": "string",
            "enum": [
              "TextMagic",
              "Loqate",
              "Fetchify",
              "AFD"
            ],
            "description": "The Provider to use.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Provider",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "query",
            "name": "Phone",
            "x-example": "02392988303",
            "required": true,
            "type": "string",
            "description": "The Phone number to authenticate.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Phone"
          },
          {
            "in": "query",
            "name": "CountryIdentifier",
            "x-example": "GB",
            "required": true,
            "type": "string",
            "description": "A Country Identifier (GB, GBR, United Kingdom, etc). Note: Only required if the provided phone number is not in international format. (starting with +)",
            "x-ms-visibility": "important",
            "x-ms-summary": "Country Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "The HTTP Status code of the response.",
                  "type": "integer",
                  "x-ms-visibility": "advanced"
                },
                "message": {
                  "description": "A message describing the request status.",
                  "type": "string",
                  "x-ms-visibility": "advanced"
                },
                "data": {
                  "description": "The response.",
                  "type": "object",
                  "properties": {
                    "numberType": {
                      "type": "string",
                      "enum": [
                        "Mobile",
                        "Landline",
                        "VOIP"
                      ],
                      "description": "The Type of number provided.",
                      "x-ms-visibility": "important"
                    },
                    "isO2": {
                      "type": "string",
                      "description": "ISO 3166-1 alpha-2 country code.",
                      "x-ms-visibility": "advanced"
                    },
                    "isO3": {
                      "type": "string",
                      "description": "ISO 3166-1 alpha-3 country code.",
                      "x-ms-visibility": "advanced"
                    },
                    "dialingCode": {
                      "type": "string",
                      "description": "Country Telephone Prefix.",
                      "x-ms-visibility": "advanced"
                    },
                    "nationalFormat": {
                      "type": "string",
                      "description": "The Phonenumber in National Format.",
                      "x-ms-visibility": "advanced"
                    },
                    "result": {
                      "type": "boolean",
                      "description": "Authentication Result.",
                      "x-ms-visibility": "important"
                    },
                    "additionalInfo": {
                      "type": "object",
                      "additionalProperties": true,
                      "description": "Dictionary of additional fields returned by the provider.",
                      "x-ms-visibility": "advanced"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": {
                  "result": true,
                  "numberType": "Landline",
                  "isO2": "GB",
                  "isO3": "GBR",
                  "dialingCode": "44",
                  "nationalFormat": "023 9298 8303",
                  "additionalInfo": null
                }
              }
            }
          }
        }
      }
    },
    "/StringExtension/IsAllUpper": {
      "x-summary": "IsAllUpper",
      "get": {
        "operationId": "StringExtIsAllUpper",
        "summary": "IsAllUpper",
       
        "description": "Check if a value is comprised only of upper case letters.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "this is an input",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": false
              }
            }
          }
        }
      }
    },
    "/StringExtension/IsAllLower": {
      "x-summary": "IsAllLower",
      "get": {
        "operationId": "StringExtIsAllLower",
        "summary": "IsAllLower",
       
        "description": "Check if a value is comprised only of lower case letters.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "this is an input",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": true
              }
            }
          }
        }
      }
    },
    "/StringExtension/IsMixedCase": {
      "x-summary": "IsMixedCase",
      "get": {
        "operationId": "StringExtIsMixedCase",
        "summary": "IsMixedCase",
        
        "description": "Check if a value is comprised only of upper case and lower case letters.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "this is input",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": false
              }
            }
          }
        }
      }
    },
    "/StringExtension/IsAlphaNumeric": {
      "x-summary": "IsAlphaNumeric",
      "get": {
        "operationId": "StringExtIsAlphaNumeric",
        "summary": "IsAlphaNumeric",
       
        "description": "Check if a value is comprised of letters and/or numbers.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "this is input",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": false
              }
            }
          }
        }
      }
    },
    "/StringExtension/IsNumeric": {
      "x-summary": "IsNumeric",
      "get": {
        "operationId": "StringExtIsNumeric",
        "summary": "IsNumeric",
      
        "description": "Check if a value is comprised only of numbers.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "this is input",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": false
              }
            }
          }
        }
      }
    },
    "/StringExtension/IsISO4217CurrencyCode": {
      "x-summary": "IsISO4217CurrencyCode",
      "get": {
        "operationId": "StringExtIsISO4217",
        "summary": "IsISO4217CurrencyCode",
        
        "description": "Check if a value is a valid ISO4217 code. I.E. GBP, USD, EUR, etc.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "EUR",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": true
              }
            }
          }
        }
      }
    },
    "/StringExtension/IsISO2Code": {
      "x-summary": "IsISO2Code",
      "get": {
        "operationId": "StringExtIsISO2",
        "summary": "IsISO2Code",
        "description": "Check if a value is a valid ISO3166 Alpha-2 country code. I.E.GBP, UK, FR, ES, etc.",
        
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "GB",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": true
              }
            }
          }
        }
      }
    },
    "/StringExtension/IsISO3Code": {
      "x-summary": "IsISO3Code",
      "get": {
        "operationId": "StringExtIsISO3",
        "summary": "IsISO3Code",
        "description": "Check if a value is a valid ISO3166 Alpha-3 country code. I.E.GBR, USA, FRA, etc.",
        
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "GBR",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": true
              }
            }
          }
        }
      }
    },
    "/StringExtension/RemoveLeading": {
      "x-summary": "RemoveLeading",
      "get": {
        "operationId": "StringExtRemoveLeading",
        "summary": "RemoveLeading",
        
        "description": "Remove the specified string from the start of a value.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "Sample Test Input",
            "required": true,
            "type": "string",
            "description": "The value to be altered.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "ValToRemove",
            "x-example": "Sample",
            "required": true,
            "type": "string",
            "description": "The value to remove.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Value to Remove"
          },
          {
            "in": "query",
            "name": "LeaveOneAtStart",
            "x-example": false,
            "required": true,
            "type": "boolean",
            "description": "Leave one occurrence at the start?",
            "default": false,
            "x-ms-visibility": "important",
            "x-ms-summary": "Leave One at the start?"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "Test Input"
              }
            }
          }
        }
      }
    },
    "/StringExtension/RemoveCharacters": {
      "x-summary": "RemoveCharacters",
      "get": {
        "operationId": "StringExtRemoveChars",
        "summary": "RemoveCharacters",
        "description": "Remove the specified character type from the input.",
       
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "Sample Test Input",
            "required": true,
            "type": "string",
            "description": "The value to alter.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "characterType",
            "x-example": "LowerCaseConsonant",
            "enum": [
              "Digit",
              "Letter",
              "LetterOrDigit",
              "Punctuation",
              "Whitespace",
              "Upper",
              "Lower",
              "Symbol",
              "UpperCaseVowel",
              "LowerCaseVowel",
              "UpperCaseConsonant",
              "LowerCaseConsonant",
              "OddDigit",
              "EvenDigit",
              "NonPrinting"
            ],
            "required": true,
            "type": "string",
            "description": "The type of characters to remove.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Character Type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "Sae Te Iu"
              }
            }
          }
        }
      }
    },
    "/StringExtension/RemoveSingleCharacterWords": {
      "x-summary": "RemoveSingleCharacterWords",
      "get": {
        "operationId": "StringExtRemoveSingleWords",
        "summary": "Remove Single Character Words",
        
        "description": "Remove all single characters from the input I.E. `This is a test` -> `This is test`",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "pull together a sentence.",
            "required": true,
            "type": "string",
            "description": "The value to alter.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "pull together sentence."
              }
            }
          }
        }
      }
    },
    "/StringExtension/ReplaceAdjacentRepeatingText": {
      "x-summary": "ReplaceAdjacentRepeatingText",
      "get": {
        "operationId": "StringExtReplaceRepeatingText",
        "summary": "Replace Adjacent Repeating Text",
        "description": "Check and replace repeated neighbouring characters.",
        
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "required": true,
            "type": "string",
            "description": "The value to alter.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "RepeatingValue",
            "required": true,
            "type": "string",
            "description": "The repeating character to remove.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Repeating Character"
          },
          {
            "in": "query",
            "name": "Replacement",
            "required": true,
            "type": "string",
            "description": "The replacement character.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Replacement Character"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            }
          }
        }
      }
    },
    "/StringExtension/ReplaceIfEndsWith": {
      "x-summary": "ReplaceIfEndsWith",
      "get": {
        "operationId": "StringExtReplaceEndsWith",
        "summary": "Replace If EndsWith",
        
        "description": "Check the end of the supplied input for a value, if found replace the found value with the specified replacement value.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "this is input",
            "required": true,
            "type": "string",
            "description": "The value to alter.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "stringToReplace",
            "x-example": "put",
            "required": true,
            "type": "string",
            "description": "The value to replace.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Value to Replace"
          },
          {
            "in": "query",
            "name": "replacement",
            "x-example": "#",
            "required": true,
            "type": "string",
            "description": "The replacement value.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Replacement Value"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "this is in#"
              }
            }
          }
        }
      }
    },
    "/StringExtension/ReplaceIfStartsWith": {
      "x-summary": "ReplaceIfStartsWith",
      "get": {
        "operationId": "StringExtReplaceStartsWith",
        "summary": "Replace If StartsWith",
       
        "description": "Check the start of the supplied input for a value, if found replace the found value with the specified replacement value.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "this is input",
            "required": true,
            "type": "string",
            "description": "The value to alter.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "stringToReplace",
            "x-example": "th",
            "required": true,
            "type": "string",
            "description": "The value to replace.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Value to Replace"
          },
          {
            "in": "query",
            "name": "replacement",
            "x-example": "#",
            "required": true,
            "type": "string",
            "description": "The replacement value.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Replacement Value"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "#is is input"
              }
            }
          }
        }
      }
    },
    "/StringExtension/StringToBinary": {
      "x-summary": "StringToBinary",
      "get": {
        "operationId": "StringExtStringToBinary",
        "summary": "String To Binary",
       
        "description": "Convert a string value into its Binary equivalent.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "EUR",
            "required": true,
            "type": "string",
            "description": "The value to convert.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "010001010101010101010010"
              }
            }
          }
        }
      }
    },
    "/StringExtension/BinaryToString": {
      "x-summary": "BinaryToString",
      "get": {
        "operationId": "StringExtBinaryToString",
        "summary": "Binary To String",
        
        "description": "This will convert a Binary value into its string equivalent.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "010001010101010101010010",
            "required": true,
            "type": "string",
            "description": "The value to convert.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "EUR"
              }
            }
          }
        }
      }
    },
    "/StringExtension/StringToHex": {
      "x-summary": "StringToHex",
      "get": {
        "operationId": "StringExtStringToHex",
        "summary": "String To Hex",
        
        "description": "Convert a string value into its Hex equivalent.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "450055005200",
            "required": true,
            "type": "string",
            "description": "The value to convert.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "450055005200"
              }
            }
          }
        }
      }
    },
    "/StringExtension/HexToString": {
      "x-summary": "HexToString",
      "get": {
        "operationId": "StringExtHexToString",
        "summary": "Hex To String",
        
        "description": "Convert a Hex input into its string equivalent.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "450055005200",
            "required": true,
            "type": "string",
            "description": "The value to convert.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "EUR"
              }
            }
          }
        }
      }
    },
    "/StringExtension/Reverse": {
      "x-summary": "Reverse",
      "get": {
        "operationId": "StringExtReverse",
        "summary": "Reverse",
        
        "description": "Reverse a string value. I.E. `example` -> `elpmaxe`",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "this is input",
            "required": true,
            "type": "string",
            "description": "The value to be reversed.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "tupni si siht"
              }
            }
          }
        }
      }
    },
    "/StringExtension/NormalizeWhiteSpace": {
      "x-summary": "NormalizeWhiteSpace",
      "get": {
        "operationId": "StringExtNormWhiteSpace",
        "summary": "Normalize WhiteSpace",
        
        "description": "Convert whitespace within a string into a single space.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "Sample text in     input",
            "required": true,
            "type": "string",
            "description": "The value to be altered.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "Sample text in input"
              }
            }
          }
        }
      }
    },
    "/StringExtension/NormalizeAlphaNumericPhone": {
      "x-summary": "NormalizeAlphaNumericPhone",
      "get": {
        "operationId": "StringExtNormPhone",
        "summary": "Normalize AlphaNumeric Phone",
        
        "description": "Convert letters into numbers using a phone keypad. I.E. `1-800-flowers` -> `1-800-3569377`",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "1-800-flowers",
            "required": true,
            "type": "string",
            "description": "The value to be altered.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "1-800-3569377"
              }
            }
          }
        }
      }
    },
    "/StringExtension/CollapseAdjacentRepeatedCharacters": {
      "x-summary": "CollapseAdjacentRepeatedCharacters",
      "get": {
        "operationId": "StringExtCollapseRepeatedChars",
        "summary": "Collapse Adjacent Repeated Characters",
        
        "description": "The word `Silly` would be reduced to `Sily` if the maximum repeat was set to 1, as the `l` is repeated once. However, The word `Silly` would remain unchanged if the maximum repeat was set to 2, as the `l` is not repeated more than once. Inversely, The word `Global` would remain the same regardless of the maximum repeat as the `l` is repeated, but not consecutively.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "saample test",
            "required": true,
            "type": "string",
            "description": "The value to be altered.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "collapseNumerics",
            "x-example": true,
            "required": false,
            "type": "boolean",
            "description": "Include Numbers in the check?",
            "x-ms-visibility": "important",
            "x-ms-summary": "Collapse Numbers?"
          },
          {
            "in": "query",
            "name": "maximumRepeat",
            "x-example": 1,
            "required": false,
            "type": "integer",
            "description": "Maximum Number of repeated characters allowed before collapsing.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Maximum Repeats"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "sample test"
              }
            }
          }
        }
      }
    },
    "/StringExtension/CollapseAdjacentRepeatedType": {
      "x-summary": "CollapseAdjacentRepeatedType",
      "get": {
        "operationId": "StringExtCollapseRepeatedType",
        "summary": "Collapse Adjacent Repeated Type",
        
        "description": "Check and replace repeated neighbouring characters of the same type. I.E.`Test$$££` -> `Test$£` Note: Both the $ and the £ are counted as a symbol, but they are not the same character so did not get collapsed.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "Test$$££",
            "required": true,
            "type": "string",
            "description": "The value to be altered.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "MaximumRepeat",
            "x-example": 1,
            "required": true,
            "type": "integer",
            "description": "Maximum Number of repeated characters allowed before collapsing.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Maximum Repeats"
          },
          {
            "in": "query",
            "name": "type",
            "enum": [
              "Letter",
              "LowerCaseLetter",
              "UpperCaseLetter",
              "UpperCaseVowel",
              "LowerCaseVowel",
              "UpperCaseConsonant",
              "LowerCaseConsonant",
              "LetterOrNumber",
              "Number",
              "Punctuation",
              "Whitespace",
              "Symbol",
              "NonPrinting"
            ],
            "x-example": "Symbol",
            "required": true,
            "type": "string",
            "description": "The character type to check for.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Character Type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "Test$£"
              }
            }
          }
        }
      }
    },
    "/StringExtension/FilterStopWords": {
      "x-summary": "FilterStopWords",
      "get": {
        "operationId": "StringExtRemoveStopWords",
        "summary": "Remove StopWords",
        
        "description": "Filter out rudimentary ENGLISH stop words E.G. a, about, after and many more.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "Sample text in input",
            "required": true,
            "type": "string",
            "description": "The value to be altered.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "Sample text input"
              }
            }
          }
        }
      }
    },
    "/StringExtension/RetainCharacters": {
      "x-summary": "RetainCharacters",
      "get": {
        "operationId": "StringExtRetainChars",
        "summary": "Retain Characters",
        
        "description": "This will replace all characters in the supplied input with the replacement character, except the ones you have specified to keep.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "this is input",
            "required": true,
            "type": "string",
            "description": "The value to be altered.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "replacement",
            "x-example": "#",
            "required": true,
            "type": "string",
            "description": "The replacement character.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Replacement Character"
          },
          {
            "in": "query",
            "name": "charactersToRetain",
            "x-example": "i",
            "required": true,
            "type": "string",
            "description": "Concatenated list of characters to retain. I.E. to retain vowels use `aeiou`",
            "x-ms-visibility": "important",
            "x-ms-summary": "Characters To Retain"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "##i##i##i####"
              }
            }
          }
        }
      }
    },
    "/StringExtension/ExtractCharacters": {
      "x-summary": "ExtractCharacters",
      "get": {
        "operationId": "StringExtExtractChars",
        "summary": "Extract Characters",
        
        "description": "Extract a given number of characters from the start or end of a string.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "Sample text",
            "required": true,
            "type": "string",
            "description": "The value to extract from.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "extractLength",
            "x-example": 6,
            "required": true,
            "type": "integer",
            "description": "The Number of characters to extract.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Extract Length"
          },
          {
            "in": "query",
            "name": "extractFrom",
            "x-example": "start",
            "enum": [
              "Start",
              "End"
            ],
            "required": true,
            "type": "string",
            "description": "Where in the value should the extraction happen.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Extract Location"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "Sample"
              }
            }
          }
        }
      }
    },
    "/StringExtension/ExtractWords": {
      "x-summary": "ExtractWords",
      "get": {
        "operationId": "StringExtExtractWords",
        "summary": "Extract Words",
        
        "description": "Extract a given number of words from the start or end of a string.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "Sample text input here",
            "required": true,
            "type": "string",
            "description": "The value to extract from.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "extractLength",
            "x-example": 2,
            "required": true,
            "type": "integer",
            "description": "The Number of words to extract.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Extract Length"
          },
          {
            "in": "query",
            "name": "extractFrom",
            "x-example": "start",
            "enum": [
              "Start",
              "End"
            ],
            "required": true,
            "type": "string",
            "description": "Where in the value should the extraction happen.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Extract Location"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "Sample text"
              }
            }
          }
        }
      }
    },
    "/StringExtension/RemoveHTML": {
      "x-summary": "RemoveHTML",
      "get": {
        "operationId": "StringExtRemoveHTML",
        "summary": "RemoveHTML",
        "description": "Remove all HTML Tags from the Input.",
        
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "Sample text <b>input</b> here",
            "required": true,
            "type": "string",
            "description": "The value to be altered.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "Sample text input here"
              }
            }
          }
        }
      }
    },
    "/StringExtension/EndsWith": {
      "x-summary": "EndsWith",
      "get": {
        "operationId": "StringExtEndsWith",
        "summary": "EndsWith",
        
        "description": "Check if a value ends in with a specific string.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "sample test input",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "checkfor",
            "x-example": "input",
            "required": true,
            "type": "string",
            "description": "The value to check for.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Look For"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": true
              }
            }
          }
        }
      }
    },
    "/StringExtension/StartsWith": {
      "x-summary": "StartsWith",
      "get": {
        "operationId": "StringExtStartsWith",
        "summary": "StartsWith",
        
        "description": "Check if a value starts with a specific string.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "sample test input",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "checkfor",
            "x-example": "input",
            "required": true,
            "type": "string",
            "description": "The value to check for.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Look For"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": true
              }
            }
          }
        }
      }
    },
    "/StringExtension/EnsureEndsWith": {
      "x-summary": "EnsureEndsWith",
      "get": {
        "operationId": "StringExtEnsureEndsWith",
        "summary": "Ensure EndsWith",
        
        "description": "Check if your value ends with the desired string, if it does not it will be appended.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "Sample text ",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "suffix",
            "x-example": "input",
            "required": true,
            "type": "string",
            "description": "Value you want at the end.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Look For"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "Sample text input"
              }
            }
          }
        }
      }
    },
    "/StringExtension/EnsureStartsAndEndsWith": {
      "x-summary": "EnsureStartsAndEndsWith",
      "get": {
        "operationId": "StringExtEnsureStartEndsWith",
        "summary": "Ensure Starts and Ends With",
        
        "description": "Check if your value both starts with and ends with the desired string, and if not it will be prepended and or appended.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": " Sample text ",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "topAndTail",
            "x-example": "input",
            "required": true,
            "type": "string",
            "description": "The value to look for.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Look For"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "input Sample text input"
              }
            }
          }
        }
      }
    },
    "/StringExtension/EnsureStartsWith": {
      "x-summary": "EnsureStartsWith",
      "get": {
        "operationId": "StringExtEnsureStartsWith",
        "summary": "Ensure StartsWith",
        
        "description": "Check if your value starts with the desired string, if not it will be prepended.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": " Sample text ",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "prefix",
            "x-example": "input",
            "required": true,
            "type": "string",
            "description": "The value you want at the start.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Look For"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobal"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": "input Sample text"
              }
            }
          }
        }
      }
    },
    "/StringExtension/StartsWithType": {
      "x-summary": "StartsWithType",
      "get": {
        "operationId": "StringExtStartWithType",
        "summary": "Starts With Type",
        
        "description": "Check if the supplied value starts with the desired character type.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "example",
            "required": true,
            "type": "string",
            "description": "The value to check.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "type",
            "x-example": "LowerCaseLetter",
            "enum": [
              "Letter",
              "LowerCaseLetter",
              "UpperCaseLetter",
              "UpperCaseVowel",
              "LowerCaseVowel",
              "UpperCaseConsonant",
              "LowerCaseConsonant",
              "LetterOrNumber",
              "Number",
              "Punctuation",
              "Whitespace",
              "Symbol",
              "NonPrinting"
            ],
            "required": true,
            "type": "string",
            "description": "The character type to check for.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Character Type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": true
              }
            }
          }
        }
      }
    },
    "/StringExtension/EndsWithType": {
      "x-summary": "EndsWithType",
      "get": {
        "operationId": "StringExtEndsWithType",
        "summary": "Ends With Type",
        
        "description": "Check if the supplied value ends with the desired character type.",
        "parameters": [
          {
            "in": "query",
            "name": "Input",
            "x-example": "example!",
            "required": true,
            "type": "string",
            "description": "The value to be checked.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Input"
          },
          {
            "in": "query",
            "name": "type",
            "x-example": "LowerCaseLetter",
            "enum": [
              "Letter",
              "LowerCaseLetter",
              "UpperCaseLetter",
              "UpperCaseVowel",
              "LowerCaseVowel",
              "UpperCaseConsonant",
              "LowerCaseConsonant",
              "LetterOrNumber",
              "Number",
              "Punctuation",
              "Whitespace",
              "Symbol",
              "NonPrinting"
            ],
            "required": true,
            "type": "string",
            "description": "The character type to check for.",
            "x-ms-visibility": "important",
            "x-ms-summary": "Character Type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.",
            "schema": {
              "$ref": "#/definitions/DQGlobalBool"
            },
            "examples": {
              "application/json": {
                "status": 200,
                "message": "success",
                "data": false
              }
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2_auth": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://api-v3.dqondemand.co.uk/api/Account/Authorize",
      "tokenUrl": "https://api-v3.dqondemand.co.uk/api/Account/Login",
      "scopes": {}
    }
  },
  "security": [
    {
      "oauth2_auth": []
    }
  ]
}