{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "QPP NG Integration Hub",
    "description": "The QPP NG Integration Hub connector offers a comprehensive suite of actions for seamless integration to the Quark Publishing Platform NextGen. Effortlessly retrieve and manage user metadata, asset information, Users and more. Streamline your processes by leveraging a wide range of actions, from checking group memberships to uploading and downloading files. Simplify your QPP NG interactions and enhance your workflows with this versatile and powerful integration hub.",
    "contact": {
      "name": "Quark Technical Support",
      "url": "https://quarksoftware.my.site.com",
      "email": "support_cases@quark.com"
    }
  },
  "host": "webhook.app.quark.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/webhooks/api/v3/registration": {
      "x-ms-notification-content": {
        "description": "Register a webhook for certain event.",
        "schema": {}
      },
      "post": {
        "description": "Registers a webhook for a given event and Change type.",
        "summary": "Triggers when an event occurs for an Already Registered Webhook",
        "operationId": "Webhook-trigger",
        "x-ms-trigger": "single",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "Request body of webhook",
            "in": "body",
            "required": true,
            "description": "Registers webhook",
            "schema": {
              "type": "object",
              "required": [
                "endpoint",
                "version",
                "object",
                "name",
                "changeType",
                "type"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "x-ms-summary": "Webhook Name",
                  "description": "Unique Name to Describe Webhook Purpose and Meaning etc.",
                  "title": "Webhook Name"
                },
                "type": {
                  "type": "string",
                  "x-ms-summary": "Webhook Type",
                  "description": "Describe Webhooks Type that will be listened to ,Such as Event etc.",
                  "title": "Webhook Type",
                  "default": "EVENT"
                },
                "object": {
                  "type": "string",
                  "x-ms-summary": "Object",
                  "description": "Describes the type of Object to listen to Like ASSET etc.",
                  "title": "Object",
                  "default": "ASSET"
                },
                "changeType": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Describes the Type of Change to Listen to.",
                    "title": "Change Type"
                  },
                  "x-ms-summary": "Change Type",
                  "default": [
                    "ASSET ADDED"
                  ]
                },
                "endpoint": {
                  "type": "string",
                  "x-ms-summary": "Endpoint",
                  "x-ms-notification-url": true,
                  "x-ms-visibility": "internal",
                  "description": "This is generated Automatically when Flow with Webhook is saved.",
                  "title": "Endpoint"
                },
                "filter": {
                  "type": "string",
                  "x-ms-summary": "Filter Criteria",
                  "description": "Filter Criteria Can be defined to Filter the Type of event.",
                  "title": "Filter Criteria"
                },
                "version": {
                  "type": "string",
                  "x-ms-summary": "Version used",
                  "description": "Version used as per webhook Service in QPPNG platform.",
                  "title": "Version used",
                  "default": "1.0"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebhookSuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "default": {
            "description": "Operation Failed."
          }
        }
      }
    },
    "/webhooks/api/v3/registration/{nameOrId}": {
      "delete": {
        "description": "Deletes an Already existing webhook for a given event and Change type.",
        "summary": "Deletes Webhook",
        "operationId": "Delete-webhook-trigger",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "nameOrId",
            "in": "path",
            "required": true,
            "description": "Name or Id for the existing webhook on the environment.",
            "x-ms-url-encoding": "single",
            "type": "string",
            "x-ms-summary": "Name Or Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a json object containing status as SUCCESS and deleted webhook's basic information.",
            "schema": {
              "$ref": "#/definitions/WebhookSuccessResponse"
            }
          },
          "400": {
            "description": "Returns a json object containing status as FAIL and message describing the failure reason."
          }
        }
      }
    },
    "/api/v1/assetService/setAttributeValues": {
      "post": {
        "summary": "Set Attribute Values",
        "description": "Set attribute values for the QPP Platform.",
        "operationId": "SetAttributeValues",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "assetId",
            "in": "query",
            "type": "string",
            "required": true,
            "x-ms-summary": "Asset Id",
            "description": "QPP Platform Asset Id."
          },
          {
            "name": "Request Body",
            "in": "body",
            "schema": {
              "type": "array",
              "title": "Attribute Array",
              "description": "An array of attributes.",
              "items": {
                "type": "object",
                "title": "Attribute Item",
                "description": "An item representing an attribute.",
                "properties": {
                  "attributeId": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Attribute Id",
                    "description": "Identifier of the attribute.",
                    "default": 25
                  },
                  "type": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Type",
                    "description": "Type of the attribute.",
                    "default": 7
                  },
                  "multiValued": {
                    "type": "boolean",
                    "title": "Multi Valued",
                    "description": "Indicates if the attribute is multi-valued.",
                    "default": true
                  },
                  "attributeValue": {
                    "$ref": "#/definitions/SetAttributeValue"
                  }
                }
              }
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with empty body",
            "schema": {}
          },
          "400": {
            "description": "QppServiceException: Unhandled server exception."
          }
        }
      }
    },
    "/api/v1/assetService/getAsset": {
      "get": {
        "summary": "Get Asset Meta Data",
        "description": "Get Asset Data for given Asset Id.",
        "operationId": "GetAsset",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "assetId",
            "default": 50,
            "in": "query",
            "type": "integer",
            "required": true,
            "description": "Id for the Asset on QPP NG Platform being Pointed to.",
            "x-ms-summary": "Asset Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Asset data.",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "400": {
            "description": "QppServiceException: unhandled server execption."
          },
          "401": {
            "description": "AssetNotFoundException:If the child asset of the relationship does not exist."
          }
        }
      }
    },
    "/api/v1/assetService/getAttributeValues": {
      "get": {
        "summary": "Get Attribute Values from Ids",
        "description": "Get Attribute Values for Comma Separated Id's.",
        "operationId": "GetAttributeValues",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "assetId",
            "default": 50,
            "in": "query",
            "type": "integer",
            "required": true,
            "description": "Id for the Asset on QPP NG Platform being Pointed to.",
            "x-ms-summary": "Asset Id"
          },
          {
            "name": "attributeIds",
            "in": "query",
            "description": "Attribute ids should refer to the QPP Server's attribute ids.",
            "required": true,
            "type": "string",
            "default": "24,25",
            "x-ms-summary": "QPPNG Attribute Ids"
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Asset attribute values by id.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            }
          },
          "400": {
            "description": "QppServiceException: unhandled server execption."
          },
          "401": {
            "description": "AssetNotFoundException:If the child asset of the relationship does not exist."
          }
        }
      }
    },
    "/api/v1/trusteeService/isGroupMember": {
      "get": {
        "summary": "Is User a Group Member",
        "description": "This request will return either true or false that a user is member of group specific to userId and GroupId.",
        "operationId": "IsGroupMember",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "userId",
            "default": 1,
            "in": "query",
            "type": "integer",
            "required": true,
            "description": "Id of QPPNG User.",
            "x-ms-summary": "Id of QPPNG User"
          },
          {
            "name": "groupId",
            "default": 227,
            "in": "query",
            "type": "integer",
            "required": true,
            "description": "Id for Group In QPPNG.",
            "x-ms-summary": "Id for Group In QPPNG"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns either true or false.",
            "schema": {}
          },
          "400": {
            "description": "QppServiceException: Unhandled server exception."
          }
        }
      }
    },
    "/api/v1/collectionService/getCollectionGroups": {
      "get": {
        "summary": "Get Groups for a Collection",
        "description": "This request returns an array of applicable routings groups for the given collection for the specified workflow and status. This will return all collection mapped groups whose userclass is the same as one of the status mapped userclasses.",
        "operationId": "GetCollectionGroups",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "collectionId",
            "in": "query",
            "description": "Variable collectionId should refer to the QPPNG Colllection Id.",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Id for QPPNG Collection",
            "default": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of applicable routing GroupInfo objects for the given collection and status.",
            "schema": {
              "$ref": "#/definitions/ListResponseCollectionGroup"
            }
          },
          "400": {
            "description": "QppServiceException: Unhandled server exception."
          },
          "401": {
            "description": "InvalidCollectionException:If the given collection either does not exist or the logged on user has no access to this collection. Exact reason of the exception can be known by calling getExceptionCode() of the exception."
          }
        }
      }
    },
    "/api/v1/trusteeService/getUser": {
      "get": {
        "summary": "Get User by Id",
        "description": "This request is used to fetch the metadata of a specified user.",
        "operationId": "GetUser",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "userId",
            "default": 1,
            "in": "query",
            "type": "integer",
            "required": true,
            "description": "Id for the QPPNG User.",
            "x-ms-summary": "QPPNG User Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an userInfoList object with its metadata.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "QppServiceException: Unhandled server exception."
          }
        }
      }
    },
    "/api/v1/trusteeService/getUserByName": {
      "get": {
        "summary": "Get User by Name",
        "description": "This request will return user metadata specific to username.",
        "operationId": "GetUserByName",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "userName",
            "default": "Administrator",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "This reffers to the Username for QPPNG User.",
            "x-ms-summary": "Username for QPPNG User"
          }
        ],
        "responses": {
          "200": {
            "description": "User Found.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "QppServiceException: Unhandled server exception."
          }
        }
      }
    },
    "/api/v1/assetService/getAssetDownloadInfo": {
      "get": {
        "summary": "Get Asset Download Info",
        "description": "Request will return asset download info which can be used together with Download Blob Action to Download The asset Stream.",
        "operationId": "GetAssetDownloadInfo",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "assetId",
            "in": "query",
            "description": "AssetId should refer to the QPP Server's Asset.",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Asset Id"
          },
          {
            "name": "minorVersion",
            "in": "query",
            "description": "Minor Version should refer to the required Asset's minor version. Provide 0 to fetch metadata of latest version.",
            "required": false,
            "type": "integer",
            "default": 0,
            "x-ms-summary": "Minor Version"
          },
          {
            "name": "majorVersion",
            "in": "query",
            "description": "Major Version should refer to the required Asset's major version. Provide null to fetch metadata of latest version.",
            "required": false,
            "type": "integer",
            "default": 1,
            "x-ms-summary": "Major Version"
          }
        ],
        "responses": {
          "200": {
            "description": "Will return asset  download info.",
            "schema": {
              "$ref": "#/definitions/AssetDownloadInfo"
            }
          },
          "400": {
            "description": "QppServiceException: Unhandled server exception."
          }
        }
      }
    },
    "/api/v1/trusteeService/getGroupMembers": {
      "get": {
        "summary": "Get Group Members",
        "description": "This request will return list of users and all their metadata specific to group Id.",
        "operationId": "GetGroupMembers",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Group Id should refer to the QPPNG Group.",
            "required": true,
            "type": "integer",
            "default": 227,
            "x-ms-summary": "Group Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of user for group.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "QppServiceException: Unhandled server exception."
          }
        }
      }
    },
    "/api/v1/assetService/getAttributeValuesByName": {
      "get": {
        "summary": "Get Attributes by Name",
        "description": "Get Attribute Values for Comma Separated names.",
        "operationId": "GetAttributeValuesByName",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "assetId",
            "in": "query",
            "description": "AssetId should refer to the QPP Server's Asset.",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Asset Id"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "Attribute Names String should refer to the QPPNG Server's attribute Names, Comma separated if multiple.",
            "required": true,
            "type": "string",
            "default": "Status,Workflow",
            "x-ms-summary": "Attribute Names"
          }
        ],
        "responses": {
          "200": {
            "description": "Found the Asset attribute values by id.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            }
          },
          "400": {
            "description": "QppServiceException: unhandled server execption."
          },
          "401": {
            "description": "AssetNotFoundException:If the child asset of the relationship does not exist or lie in a collection that is not accessible to the logged in user."
          }
        }
      }
    },
    "/api/v3/blob/{contextId}/{fileIdentifier}": {
      "get": {
        "summary": "Download (Blob)",
        "description": "This request is used to Download file by input stream from Download URL.",
        "operationId": "DownloadBlob",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "fileIdentifier",
            "in": "path",
            "description": "file Identifier refers to type of file.",
            "required": true,
            "type": "string",
            "x-ms-summary": "File Identifier",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "contextId",
            "in": "path",
            "description": "ContextId id refer to resource info.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Context Id",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns array blob type of storage rules by blobType ",
            "schema": {
              "type": "object",
              "properties": {
                "$content-type": {
                  "type": "string",
                  "title": "Content type",
                  "description": "The content type of the document, e.g. application/pdf."
                },
                "$content": {
                  "type": "string",
                  "format": "byte",
                  "title": "Content",
                  "description": "The content of the document in Base64 encoding."
                }
              }
            }
          },
          "400": {
            "description": "BlobServiceException: bad request."
          }
        }
      },
      "put": {
        "summary": "Upload (Blob)",
        "description": "This request is used to upload file by input stream.",
        "operationId": "UploadBlob",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "fileIdentifier",
            "in": "path",
            "description": "File Identifier is refers to type of file.",
            "required": true,
            "type": "string",
            "x-ms-summary": "File Identifier",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "contextId",
            "in": "path",
            "description": "Context Id refers to resource info.",
            "required": true,
            "type": "string",
            "x-ms-summary": "context Id",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "InputStreamResource",
            "description": "Input Stream for resource , Needs binary Input.",
            "x-ms-summary": "Input Stream Resource",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Success Code with Empty Body.",
            "schema": {}
          },
          "400": {
            "description": "BlobServiceException: bad request."
          }
        }
      }
    },
    "/api/v1/queryService/getPaginatedQueryResultsWithFilters": {
      "post": {
        "summary": "Get Paginated Query Results with Filters",
        "description": "This request returns paginated Query Element and details of a Query stored in the system with specific filter in query.",
        "operationId": "GetPaginatedQueryResultsWithFilters",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "queryId",
            "in": "query",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Existing QPPNG Query Id",
            "description": "This refers to an Existing QPPNG Query Id."
          },
          {
            "in": "body",
            "name": "queryFiltersAndDisplay",
            "x-ms-summary": "Query Filters And Display",
            "description": "Query Filters And Display information included in the query definition",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryDefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This will return list of queryresultelement object for query.",
            "schema": {
              "$ref": "#/definitions/ListResponseQueryResultElement"
            }
          },
          "400": {
            "description": "QppServiceException: Unhandled server exception."
          }
        }
      }
    },
    "/api/v1/assetService/initNewCheckin": {
      "post": {
        "summary": "Initiate New Check-in",
        "description": "Request will check-in a local file, as per given Qpp attribute values array,For example Required Attribute value are Name,Collection,extension etc to check-in an asset to QPPNG Platform.",
        "operationId": "InitNewCheckin",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "createMinorVersion",
            "in": "query",
            "description": "Variable createMinorVersion should refer to true or false for creating version for checking.",
            "required": true,
            "type": "boolean",
            "default": false,
            "x-ms-summary": "Create Minor Version"
          },
          {
            "in": "body",
            "name": "Asset",
            "description": "Contains asset metadata in the form of array of attribute values.For example Required Attribute value are Name,Collection,extension etc to check-in an xml asset",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InitNewCheckInAssetServiceApiImpl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "checkin asset successfully.",
            "schema": {
              "$ref": "#/definitions/AssetUploadInfo"
            }
          },
          "400": {
            "description": "QppServiceException: unhandled server execption."
          },
          "401": {
            "description": "MinorVersionNotSupportedException :This exception is thrown while trying to create asset's minor version when it is not allowed in the revision control settings of the collection(in which the asset is being checked-in) for the given content type."
          }
        }
      }
    },
    "/api/v1/assetService/initCheckin": {
      "post": {
        "summary": "Initiate Check-in and Update",
        "description": "Request will check-in and Update an already exiting asset in QPPNG. Asset Needs to be checked Out before hand. Use checkout action before.",
        "operationId": "InitCheckin",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "createMinorVersion",
            "in": "query",
            "description": "Variable createMinorVersion should refer to true or false for creating version for checking.",
            "required": true,
            "type": "boolean",
            "default": false,
            "x-ms-summary": "Create Minor Version"
          },
          {
            "in": "body",
            "name": "Asset",
            "description": "Contains asset metadata in the form of array of attribute values.For example Required Attribute value are Name,Collection,extension etc to check-in an xml asset",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "assetId": {
                  "type": "integer",
                  "title": "Asset Id",
                  "description": "Asset Id for the Asset to be checked-in"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "checkin asset successfully.",
            "schema": {
              "$ref": "#/definitions/AssetUploadInfo"
            }
          },
          "400": {
            "description": "QppServiceException: unhandled server execption."
          },
          "401": {
            "description": "MinorVersionNotSupportedException :This exception is thrown while trying to create asset's minor version when it is not allowed in the revision control settings of the collection(in which the asset is being checked-in) for the given content type."
          }
        }
      }
    },
    "/api/v1/workflowService/getWorkflowByName": {
      "get": {
        "summary": "Get Workflow by name",
        "description": "This request returns all the metadata of a specified workflow by name.",
        "operationId": "GetWorkflowByName",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "workflowName",
            "in": "query",
            "description": "Workflow Name for whom Meta Data needs to be fetched.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Workflow Name"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Workflow object with all the metadata.",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "400": {
            "description": "QppServiceException: Unexpected exception while processing request."
          }
        }
      }
    },
    "/api/v3/assetService/getChildAssetRelations": {
      "get": {
        "summary": "Get Child Asset Relations",
        "description": "Get Child Asset Relations for a give Parent Asset Id.",
        "operationId": "GetChildAssetRelationsV3",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "parentAssetId",
            "in": "query",
            "description": "Parent Asset Id should refer to the QPP Server's parent Asset.",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Parent Asset Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an assetRelationInfoList between assets.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetRelation"
              }
            }
          },
          "400": {
            "description": "QppServiceException: unhandled server execption."
          },
          "401": {
            "description": "AssetNotFoundException:If the child asset of the relationship does not exist or lie in a collection that is not accessible to the logged in user."
          }
        }
      }
    },
    "/api/v1/attributeService/getAttributesByName": {
      "get": {
        "summary": "Get Attributes by Name",
        "description": "This request returns all existing attributes with their metadata in QPPNG Server specific to names.",
        "operationId": "GetAttributesByName",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "attributeNames",
            "in": "query",
            "description": "Attribute Names String should refer to the QPP Server's attribute Name, Comma Separated If Multiple.",
            "required": true,
            "type": "string",
            "default": "Status,Workflow",
            "x-ms-summary": "Attribute Names"
          }
        ],
        "responses": {
          "200": {
            "description": "This request returns all existing attributes with their metadata of QPP Server.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attribute"
              }
            }
          },
          "400": {
            "description": "QppServiceException:Unhandled server exception."
          }
        }
      }
    },
    "/api/v1/attributeService/createAttribute": {
      "post": {
        "summary": "Creates a new attribute",
        "description": "Creates a new attribute and returns its id and After successful creation of attribute message.",
        "operationId": "CreateAttribute",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "Attribute Definition",
            "in": "body",
            "description": "Request body to create Attribute",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAttributeSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a attributeInfoList object containing a list of successfully created attribute.",
            "schema": {
              "$ref": "#/definitions/CreateAttributeSchema"
            }
          },
          "400": {
            "description": "QppServiceException :Unhandled server exception."
          }
        }
      }
    },
    "/api/v1/contentStructureService/addAttributeToContentTypes": {
      "post": {
        "summary": "Update Attribute Mapping for Content Type",
        "description": "This request is used to update the attribute mapping of content types and their children with the specified map of attributes in request Body",
        "operationId": "AddAttributeToContentTypes",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "attributeId",
            "in": "query",
            "description": "Attribute ids that needs to be mapped.",
            "required": true,
            "type": "integer",
            "default": 24,
            "x-ms-summary": "Attribute Id"
          },
          {
            "name": "contentTypeIds",
            "in": "query",
            "description": "Content Types on which these Attributes needs to be mapped to.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Content Type Ids"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Added with empty body response",
            "schema": {}
          },
          "400": {
            "description": "QppServiceException: Unhandled server exception."
          }
        }
      }
    },
    "/api/v1/contentStructureService/getContentTypesInfoByName": {
      "get": {
        "summary": "Get Content Types Info by Name",
        "description": "This request is used to retrieve content type info by content type name.",
        "operationId": "GetContentTypesInfoByName",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "contentTypeName",
            "in": "query",
            "description": "Name for the content type.",
            "required": true,
            "type": "string",
            "x-ms-summary": "Content Type Name"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns array of ContentTypeInfo.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContentTypeInfo"
              }
            }
          },
          "400": {
            "description": "QppServiceException: Unhandled server exception."
          }
        }
      }
    },
    "/api/v1/queryService/createQuery": {
      "post": {
        "summary": "Create Query",
        "description": "This request will create a query with definition and details of a query in request Body.",
        "operationId": "CreateQuery",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "in": "body",
            "name": "QueryDefinition",
            "description": "QueryDefinition Required for creating a Query",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateQueryDefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "will create query and return with id.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "title": "Newly Created Query Id",
              "description": "Newly Created Query Id"
            }
          },
          "400": {
            "description": "QppServiceException: Unhandled server exception."
          }
        }
      }
    },
    "/api/v1/queryService/getAllQueries": {
      "get": {
        "summary": "Get All Queries",
        "description": "This request will return all the query with there definition.",
        "operationId": "GetAllQueries",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          }
        ],
        "responses": {
          "200": {
            "description": "list of all Queries wirh thir definition object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QueryDefinition"
              }
            }
          },
          "400": {
            "description": "QppServiceException: Unhandled server exception."
          }
        }
      }
    },
    "/api/v1/trusteeService/getAllUsers": {
      "get": {
        "summary": "Get All Users",
        "description": "This request is used to fetch all users.",
        "operationId": "GetAllUsers",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an userInfoList object containing metadata of users in the form of an array.",
            "schema": {
              "$ref": "#/definitions/ListResponseUser"
            }
          },
          "400": {
            "description": "QppServiceException: Unhandled server exception."
          }
        }
      }
    },
    "/api/v1/publishingService/publishAsset": {
      "post": {
        "summary": "Publish Asset",
        "description": "This request returns the stream after publishing an asset into a specified format using the publishing channel.",
        "operationId": "PublishAssetUsingPOST",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "assetId",
            "in": "query",
            "description": "Variable assetId should refer to the QPP Server's Asset.",
            "x-ms-summary": "Asset Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "publishingChannelId",
            "in": "query",
            "description": "variable channelId should refer to Id of channel to be used.",
            "x-ms-summary": "Publishing Channel Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the filestream after publishing an asset into required format.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublishingOutputDownloadInfo"
              }
            }
          },
          "400": {
            "description": "AssetNotFoundException: If given assetId does not exist or the asset lies in a collection that is not accessible to the logged in user. The specific reason for the exception can be determined by calling getExceptionCode()."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v3/assetService/checkOut": {
      "post": {
        "summary": "CheckOut",
        "description": "Marks the asset with the given assetId as Checked Out",
        "operationId": "CheckOutV3",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "assetId",
            "in": "query",
            "description": "Variable assetId should refer to the QPP Server's Asset. ",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Asset Id"
          },
          {
            "name": "Request Body",
            "in": "body",
            "schema": {
              "type": "array",
              "title": "Attribute Array",
              "description": "An array of attributes.",
              "items": {
                "type": "object",
                "title": "Attribute Item",
                "description": "An item representing an attribute.",
                "properties": {
                  "attributeId": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Attribute Id",
                    "description": "Identifier of the attribute.",
                    "default": 16
                  },
                  "type": {
                    "type": "integer",
                    "format": "int32",
                    "title": "Type",
                    "description": "Type of the attribute.",
                    "default": 1
                  },
                  "attributeValue": {
                    "$ref": "#/definitions/CheckOutAttributeValue"
                  }
                }
              }
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "return an asset with checkout",
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          },
          "400": {
            "description": "QppServiceException: unhandled server execption"
          },
          "401": {
            "description": "InvalidAttributeValueException :This exception can be thrown while setting some attribute value."
          }
        }
      }
    },
    "/api/v3/assetService/getParentAssetRelations": {
      "get": {
        "summary": "Get Parent Asset Relations",
        "description": "This request will the list of relation of an parent asset relation",
        "operationId": "GetParentAssetRelationsV3",
        "parameters": [
          {
            "name": "new_url",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Url for the Host environment that This Action needs to points to.",
            "x-ms-summary": "Host Name"
          },
          {
            "name": "childAssetId",
            "in": "query",
            "description": "Variable childAssetId should refer to the QPP Server's child asset which has raltion with parent and for whom parent relations needs to be find out",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Child Asset Id"
          }
        ],
        "responses": {
          "200": {
            "description": "Will return the list of asset relation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetRelation"
              }
            }
          },
          "400": {
            "description": "QppServiceException: unhandled server execption"
          },
          "401": {
            "description": "AssetNotFoundException:If no asset corresponding to the given id exists or the asset lies in a collection that is not accessible to the logged in user.The specific reason for the exception can be determined by calling getExceptionCode()"
          }
        }
      }
    }
  },
  "definitions": {
    "WebhookRequestBody": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "x-ms-summary": "Webhook Type"
        },
        "object": {
          "type": "string",
          "x-ms-summary": "Object"
        },
        "changeType": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-summary": "Change Type"
        },
        "endpoint": {
          "type": "string",
          "x-ms-summary": "Endpoint"
        },
        "filter": {
          "type": "string",
          "x-ms-summary": "Filter Criteria"
        },
        "version": {
          "type": "string",
          "x-ms-summary": "Version used"
        }
      }
    },
    "PublishingOutputDownloadInfo": {
      "type": "object",
      "properties": {
        "attributesMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "title": "Additional Properties",
            "description": "Defines the other properties relevant to the published output like file extension."
          }
        },
        "directDownload": {
          "type": "boolean",
          "title": "Direct Download",
          "description": "Defines if Direct Download is allowed"
        },
        "downloadUrl": {
          "type": "string",
          "title": "Download Url",
          "description": "Provides download Url which can be used with Download blob Action to download from the blob location"
        }
      },
      "title": "Publishing Output Download Info",
      "description": "Defines the Publishing Output Download Info"
    },
    "WebhookSuccessResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID",
          "description": "Defines the ID for the webhook success response."
        },
        "status": {
          "type": "string",
          "title": "Status",
          "description": "Defines the status for the webhook success response."
        },
        "message": {
          "type": "string",
          "title": "Message",
          "description": "Defines the message for the webhook success response."
        },
        "version": {
          "type": "string",
          "title": "Version",
          "description": "Defines the version for the webhook success response."
        }
      }
    },
    "AttributeValue": {
      "type": "object",
      "properties": {
        "attributeId": {
          "type": "integer",
          "format": "int32",
          "title": "Attribute ID",
          "description": "Defines the Attribute ID for the QPPNG attribute."
        },
        "attributeName": {
          "type": "string",
          "title": "Attribute Name",
          "description": "Defines the Attribute Name for the QPPNG attribute."
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "title": "Type",
          "description": "Defines the type for the QPPNG attribute."
        },
        "multiValued": {
          "type": "boolean",
          "title": "MultiValued",
          "description": "Defines if the attribute is multi-valued."
        },
        "attributeValue": {
          "$ref": "#/definitions/Value"
        }
      }
    },
    "AssetUploadInfo": {
      "type": "object",
      "properties": {
        "contextId": {
          "type": "string",
          "title": "Context ID",
          "description": "Defines the context ID for the asset upload."
        },
        "uploadUrl": {
          "type": "string",
          "title": "Upload URL",
          "description": "Defines the upload URL for the asset."
        }
      }
    },
    "Asset": {
      "type": "object",
      "properties": {
        "assetId": {
          "type": "integer",
          "format": "int32",
          "title": "Asset ID",
          "description": "Defines the Asset ID for the QPPNG asset."
        },
        "assetVersion": {
          "$ref": "#/definitions/AssetVersion"
        },
        "attributeValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeValue"
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "title": "ID",
          "description": "User ID."
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "User's name."
        },
        "domainId": {
          "type": "integer",
          "format": "int32",
          "title": "Domain ID",
          "description": "Domain ID of the user."
        },
        "sourceReference": {
          "type": "string",
          "title": "Source Reference",
          "description": "Source reference for the user."
        },
        "childDomainValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DomainValue"
          },
          "title": "Child Domain Values",
          "description": "Array of child domain values."
        },
        "hasChildren": {
          "type": "boolean",
          "title": "Has Children",
          "description": "Indicates if the user has children."
        },
        "isDeleted": {
          "type": "boolean",
          "title": "Is Deleted",
          "description": "Indicates if the user is deleted."
        },
        "user": {
          "type": "boolean",
          "title": "Is User",
          "description": "Indicates if the entity is a user."
        },
        "ldapProfileId": {
          "type": "integer",
          "format": "int32",
          "title": "LDAP Profile ID",
          "description": "LDAP profile ID for the user."
        },
        "defaultUserClassId": {
          "type": "integer",
          "format": "int32",
          "title": "Default User Class ID",
          "description": "Default user class ID."
        },
        "emailAddress": {
          "type": "string",
          "title": "Email Address",
          "description": "User's email address."
        },
        "deleted": {
          "type": "boolean",
          "title": "Is Deleted",
          "description": "Indicates if the user is deleted."
        },
        "ldapDistinguishedName": {
          "type": "string",
          "title": "LDAP Distinguished Name",
          "description": "LDAP distinguished name for the user."
        },
        "nativeTrustee": {
          "type": "boolean",
          "title": "Native Trustee",
          "description": "Indicates if the user is a native trustee."
        },
        "firstName": {
          "type": "string",
          "title": "First Name",
          "description": "User's first name."
        },
        "lastName": {
          "type": "string",
          "title": "Last Name",
          "description": "User's last name."
        },
        "phoneNumber": {
          "type": "string",
          "title": "Phone Number",
          "description": "User's phone number."
        },
        "enabled": {
          "type": "boolean",
          "title": "Is Enabled",
          "description": "Indicates if the user is enabled."
        },
        "externallyAuthenticated": {
          "type": "boolean",
          "title": "Externally Authenticated",
          "description": "Indicates if the user is externally authenticated."
        },
        "nameForAuthentication": {
          "type": "string",
          "title": "Name for Authentication",
          "description": "Name for authentication."
        }
      }
    },
    "ListResponseCollectionGroup": {
      "type": "object",
      "properties": {
        "get_count": {
          "type": "integer",
          "format": "int32",
          "title": "Count",
          "description": "Number of items in the response."
        },
        "get_nextLink": {
          "type": "string",
          "title": "Next Link",
          "description": "URL for the next set of results."
        },
        "get_value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CollectionGroup"
          },
          "title": "Value",
          "description": "Array of collection groups."
        }
      }
    },
    "Value": {
      "type": "object",
      "title": "Value",
      "description": "Value"
    },
    "InitNewCheckInValue": {
      "type": "object",
      "title": "Value",
      "description": "Value",
      "default": {
        "value": "Rajan25121.xml"
      }
    },
    "SetAttributeValue": {
      "type": "object",
      "title": "Value",
      "description": "Value",
      "default": {
        "domainValues": [
          {
            "id": 5015
          }
        ]
      }
    },
    "CheckOutAttributeValue": {
      "type": "object",
      "title": "Value",
      "description": "Value",
      "default": {
        "value": "c:/checkedoutfiles"
      }
    },
    "AssetVersion": {
      "type": "object",
      "properties": {
        "majorVersion": {
          "type": "integer",
          "format": "int32",
          "title": "Major Version",
          "description": "Major Version of the asset."
        },
        "minorVersion": {
          "type": "integer",
          "format": "int32",
          "title": "Minor Version",
          "description": "Minor Version of the asset."
        },
        "branchId": {
          "type": "integer",
          "format": "int32",
          "title": "Branch ID",
          "description": "Branch Version ID."
        },
        "systemName": {
          "type": "string",
          "title": "System Name",
          "description": "System Name for Asset Version."
        }
      }
    },
    "DomainValue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "title": "ID",
          "description": "Domain value ID."
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Name of the domain value."
        },
        "domainId": {
          "type": "integer",
          "format": "int32",
          "title": "Domain ID",
          "description": "Domain ID of the domain value."
        },
        "sourceReference": {
          "type": "string",
          "title": "Source Reference",
          "description": "Source reference of the domain value."
        },
        "childDomainValues": {
          "type": "string",
          "title": "Child Domain Values",
          "description": "Array of child domain values."
        },
        "hasChildren": {
          "type": "boolean",
          "title": "Has Children",
          "description": "Indicates if the domain value has children."
        },
        "isDeleted": {
          "type": "boolean",
          "title": "Is Deleted",
          "description": "Indicates if the domain value is deleted."
        }
      }
    },
    "CollectionGroup": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "integer",
          "format": "int64",
          "title": "Group ID",
          "description": "ID of the collection group."
        },
        "groupInfo": {
          "$ref": "#/definitions/GroupInfo"
        },
        "overriddenUserClassId": {
          "type": "integer",
          "format": "int64",
          "title": "Overridden User Class ID",
          "description": "ID of the overridden user class."
        }
      }
    },
    "GroupInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "title": "ID",
          "description": "Group ID."
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Name of the group."
        },
        "domainId": {
          "type": "integer",
          "format": "int32",
          "title": "Domain ID",
          "description": "Domain ID of the group."
        },
        "sourceReference": {
          "type": "string",
          "title": "Source Reference",
          "description": "Source reference of the group."
        },
        "childDomainValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DomainValue"
          },
          "title": "Child Domain Values",
          "description": "Array of child domain values."
        },
        "hasChildren": {
          "type": "boolean",
          "title": "Has Children",
          "description": "Indicates if the group has children."
        },
        "isDeleted": {
          "type": "boolean",
          "title": "Is Deleted",
          "description": "Indicates if the group is deleted."
        },
        "user": {
          "type": "boolean",
          "title": "Is User",
          "description": "Indicates if the group represents a user."
        },
        "ldapProfileId": {
          "type": "integer",
          "format": "int64",
          "title": "LDAP Profile ID",
          "description": "LDAP profile ID."
        },
        "defaultUserClassId": {
          "type": "integer",
          "format": "int64",
          "title": "Default User Class ID",
          "description": "ID of the default user class."
        },
        "emailAddress": {
          "type": "string",
          "title": "Email Address",
          "description": "Email address of the group."
        },
        "deleted": {
          "type": "boolean",
          "title": "Deleted",
          "description": "Indicates if the group is deleted."
        },
        "ldapDistinguishedName": {
          "type": "string",
          "title": "LDAP Distinguished Name",
          "description": "LDAP distinguished name of the group."
        },
        "nativeTrustee": {
          "type": "boolean",
          "title": "Native Trustee",
          "description": "Indicates if the group is a native trustee."
        }
      }
    },
    "AssetDownloadInfo": {
      "type": "object",
      "properties": {
        "contextId": {
          "type": "string",
          "title": "Context ID",
          "description": "ID of the context."
        },
        "downloadUrl": {
          "type": "string",
          "title": "Download URL",
          "description": "URL for downloading the asset."
        }
      }
    },
    "BlobStreamingServiceApiImpl": {
      "type": "object",
      "title": "Blob Streaming Service API Implementation",
      "description": "Implementation details for Blob Streaming Service API."
    },
    "InitNewCheckInAssetServiceApiImpl": {
      "type": "object",
      "properties": {
        "attributeValues": {
          "type": "array",
          "items": {
            "type": "object",
            "title": "Attribute Item",
            "description": "An item representing an attribute.",
            "properties": {
              "attributeId": {
                "type": "integer",
                "format": "int32",
                "title": "Attribute Id",
                "description": "Identifier of the attribute.",
                "default": 2
              },
              "type": {
                "type": "integer",
                "format": "int32",
                "title": "Type",
                "description": "Type of the attribute.",
                "default": 1
              },
              "multiValued": {
                "type": "boolean",
                "title": "Multi Valued",
                "description": "Indicates if the attribute is multi-valued.",
                "default": false
              },
              "attributeValue": {
                "$ref": "#/definitions/InitNewCheckInValue"
              }
            }
          }
        }
      }
    },
    "Workflow": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "title": "ID",
          "description": "Unique identifier for the workflow."
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Name of the workflow."
        },
        "domainId": {
          "type": "integer",
          "format": "int32",
          "title": "Domain ID",
          "description": "Identifier of the domain associated with the workflow."
        },
        "sourceReference": {
          "type": "string",
          "title": "Source Reference",
          "description": "Reference associated with the source of the workflow."
        },
        "childDomainValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DomainValue"
          },
          "title": "Child Domain Values",
          "description": "List of child domain values associated with the workflow."
        },
        "hasChildren": {
          "type": "boolean",
          "title": "Has Children",
          "description": "Indicates if the workflow has children."
        },
        "isDeleted": {
          "type": "boolean",
          "title": "Is Deleted",
          "description": "Indicates if the workflow has been marked as deleted."
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Status"
          },
          "title": "Statuses",
          "description": "List of statuses in the workflow."
        },
        "createdBy": {
          "type": "integer",
          "format": "int64",
          "title": "Created By",
          "description": "User ID of the creator of the workflow."
        },
        "created": {
          "type": "string",
          "title": "Created Date",
          "description": "Date when the workflow was created."
        },
        "lastModifiedBy": {
          "type": "integer",
          "format": "int64",
          "title": "Last Modified By",
          "description": "User ID of the last modifier of the workflow."
        },
        "lastModified": {
          "type": "string",
          "title": "Last Modified Date",
          "description": "Date when the workflow was last modified."
        },
        "constrainedStatusTransition": {
          "type": "boolean",
          "title": "Constrained Status Transition",
          "description": "Defines if status transition is constrained."
        },
        "statusRoutingUserclasses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatusRoutingUserClasses"
          },
          "title": "Status Routing User Classes",
          "description": "List of status routing user classes."
        },
        "statusTransitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatusTransition"
          },
          "title": "Status Transitions",
          "description": "List of status transitions."
        }
      },
      "title": "Workflow",
      "description": "Details of a workflow."
    },
    "Status": {
      "type": "object",
      "title": "Status",
      "description": "Represents a status.",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "title": "ID",
          "description": "Unique identifier for the status."
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Name of the status."
        },
        "domainId": {
          "type": "integer",
          "format": "int32",
          "title": "Domain ID",
          "description": "Domain identifier for the status."
        },
        "sourceReference": {
          "type": "string",
          "title": "Source Reference",
          "description": "Reference to the source of the status."
        },
        "childDomainValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DomainValue"
          },
          "title": "Child Domain Values",
          "description": "Array of child domain values."
        },
        "hasChildren": {
          "type": "boolean",
          "title": "Has Children",
          "description": "Indicates if the status has child statuses."
        },
        "isDeleted": {
          "type": "boolean",
          "title": "Is Deleted",
          "description": "Indicates if the status is deleted."
        },
        "workflowId": {
          "type": "integer",
          "format": "int64",
          "title": "Workflow ID",
          "description": "ID of the workflow associated with the status."
        },
        "colorRed": {
          "type": "integer",
          "format": "int32",
          "title": "Color Red",
          "description": "Red component of the status color."
        },
        "colorGreen": {
          "type": "integer",
          "format": "int32",
          "title": "Color Green",
          "description": "Green component of the status color."
        },
        "colorBlue": {
          "type": "integer",
          "format": "int32",
          "title": "Color Blue",
          "description": "Blue component of the status color."
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "title": "Position",
          "description": "Position of the status."
        }
      }
    },
    "StatusRoutingUserClasses": {
      "type": "object",
      "title": "Status Routing User Classes",
      "description": "Mapping of status to user classes for routing.",
      "properties": {
        "statusId": {
          "type": "integer",
          "format": "int64",
          "title": "Status ID",
          "description": "ID of the status for routing."
        },
        "routingUserClassIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "title": "Routing User Class IDs",
          "description": "Array of user class IDs for routing."
        },
        "userClassBasedRouting": {
          "type": "boolean",
          "title": "User Class Based Routing",
          "description": "Indicates if user class-based routing is enabled."
        }
      }
    },
    "StatusTransition": {
      "type": "object",
      "title": "Status Transition",
      "description": "Details of a status transition within a workflow.",
      "properties": {
        "statusId": {
          "type": "integer",
          "format": "int64",
          "title": "Status ID",
          "description": "ID of the status transition."
        },
        "workflowInitiatingStatus": {
          "type": "boolean",
          "title": "Workflow Initiating Status",
          "description": "Indicates if the transition is initiated by the workflow."
        },
        "nextPossibleStatusIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "title": "Next Possible Status IDs",
          "description": "IDs of the next possible statuses after this transition."
        }
      }
    },
    "AssetRelation": {
      "type": "object",
      "title": "Asset Relation",
      "description": "Details of a relationship between assets.",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "title": "ID",
          "description": "Unique ID of the asset relation."
        },
        "parentAssetId": {
          "type": "integer",
          "format": "int32",
          "title": "Parent Asset ID",
          "description": "ID of the parent asset in the relation."
        },
        "parentAssetVersion": {
          "$ref": "#/definitions/AssetVersion"
        },
        "childAssetId": {
          "type": "integer",
          "format": "int32",
          "title": "Child Asset ID",
          "description": "ID of the child asset in the relation."
        },
        "childAssetVersion": {
          "$ref": "#/definitions/AssetVersion"
        },
        "relationTypeId": {
          "type": "integer",
          "format": "int32",
          "title": "Relation Type ID",
          "description": "ID of the type of relation."
        },
        "relationState": {
          "type": "integer",
          "format": "int32",
          "title": "Relation State",
          "description": "State of the relation."
        },
        "lockedToChildVersion": {
          "type": "boolean",
          "title": "Locked to Child Version",
          "description": "Flag indicating if the relation is locked to the child version."
        },
        "freezeToCurrentVersion": {
          "type": "boolean",
          "title": "Freeze to Current Version",
          "description": "Flag indicating if the relation is frozen to the current version."
        },
        "relationAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeValue"
          },
          "title": "Relation Attributes",
          "description": "Attributes associated with the relation."
        }
      }
    },
    "Attribute": {
      "type": "object",
      "title": "Attribute",
      "description": "Details of an attribute associated with an entity.",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "title": "ID",
          "description": "Unique ID of the attribute."
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Name of the attribute."
        },
        "valueType": {
          "type": "integer",
          "format": "int32",
          "title": "Value Type",
          "description": "Type of value that the attribute holds."
        },
        "userDefined": {
          "type": "boolean",
          "title": "User Defined",
          "description": "Indicates if the attribute is user-defined."
        },
        "queryable": {
          "type": "boolean",
          "title": "Queryable",
          "description": "Indicates if the attribute is queryable."
        },
        "multiValued": {
          "type": "boolean",
          "title": "Multi Valued",
          "description": "Indicates if the attribute can hold multiple values."
        },
        "modificationLevel": {
          "type": "integer",
          "format": "int32",
          "title": "Modification Level",
          "description": "Level of modification of the attribute."
        },
        "created": {
          "type": "string",
          "title": "Created Date",
          "description": "Date when the attribute was created."
        },
        "lastModified": {
          "type": "string",
          "title": "Last Modified Date",
          "description": "Date when the attribute was last modified."
        },
        "creator": {
          "type": "integer",
          "format": "int32",
          "title": "Creator",
          "description": "ID of the user who created the attribute."
        },
        "lastModifier": {
          "type": "integer",
          "format": "int32",
          "title": "Last Modifier",
          "description": "ID of the user who last modified the attribute."
        },
        "displayable": {
          "type": "boolean",
          "title": "Displayable",
          "description": "Indicates if the attribute is displayable."
        },
        "limitedAccess": {
          "type": "boolean",
          "title": "Limited Access",
          "description": "Indicates if the attribute has limited access."
        },
        "limitedAccessChangeable": {
          "type": "boolean",
          "title": "Limited Access Changeable",
          "description": "Indicates if the limited access setting can be changed."
        },
        "constraintsChangeable": {
          "type": "boolean",
          "title": "Constraints Changeable",
          "description": "Indicates if the constraints of the attribute can be changed."
        },
        "valuePreferencesChangeable": {
          "type": "boolean",
          "title": "Value Preferences Changeable",
          "description": "Indicates if the value preferences can be changed."
        },
        "booleanValuePreferences": {
          "$ref": "#/definitions/BooleanValuePreferences"
        },
        "numericValuePreferences": {
          "$ref": "#/definitions/NumericValuePreferences"
        },
        "dateValuePreferences": {
          "$ref": "#/definitions/DateValuePreferences"
        },
        "dateTimeValuePreferences": {
          "$ref": "#/definitions/DateTimeValuePreferences"
        },
        "timeValuePreferences": {
          "$ref": "#/definitions/TimeValuePreferences"
        },
        "measurementValuePreferences": {
          "$ref": "#/definitions/MeasurementValuePreferences"
        },
        "textValuePreferences": {
          "$ref": "#/definitions/TextValuePreferences"
        },
        "domainValueListPreferences": {
          "$ref": "#/definitions/DomainValueListPreferences"
        },
        "domainValuePreferences": {
          "$ref": "#/definitions/DomainValuePreferences"
        }
      }
    },
    "CreateAttributeSchema": {
      "type": "object",
      "title": "Attribute",
      "description": "Details of an attribute associated with an entity.",
      "required": [
        "name",
        "valueType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "title": "ID",
          "description": "Unique ID of the attribute."
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Name of the attribute.",
          "default": "TBD Attribute"
        },
        "valueType": {
          "type": "integer",
          "format": "int32",
          "title": "Value Type",
          "description": "Type of value that the attribute holds 1 for text type etc.",
          "default": 1
        },
        "userDefined": {
          "type": "boolean",
          "title": "User Defined",
          "description": "Indicates if the attribute is user-defined."
        },
        "queryable": {
          "type": "boolean",
          "title": "Queryable",
          "description": "Indicates if the attribute is queryable."
        },
        "multiValued": {
          "type": "boolean",
          "title": "Multi Valued",
          "description": "Indicates if the attribute can hold multiple values."
        },
        "modificationLevel": {
          "type": "integer",
          "format": "int32",
          "title": "Modification Level",
          "description": "Level of modification of the attribute."
        },
        "created": {
          "type": "string",
          "title": "Created Date",
          "description": "Date when the attribute was created."
        },
        "lastModified": {
          "type": "string",
          "title": "Last Modified Date",
          "description": "Date when the attribute was last modified."
        },
        "creator": {
          "type": "integer",
          "format": "int32",
          "title": "Creator",
          "description": "ID of the user who created the attribute."
        },
        "lastModifier": {
          "type": "integer",
          "format": "int32",
          "title": "Last Modifier",
          "description": "ID of the user who last modified the attribute."
        },
        "displayable": {
          "type": "boolean",
          "title": "Displayable",
          "description": "Indicates if the attribute is displayable."
        },
        "limitedAccess": {
          "type": "boolean",
          "title": "Limited Access",
          "description": "Indicates if the attribute has limited access."
        },
        "limitedAccessChangeable": {
          "type": "boolean",
          "title": "Limited Access Changeable",
          "description": "Indicates if the limited access setting can be changed."
        },
        "constraintsChangeable": {
          "type": "boolean",
          "title": "Constraints Changeable",
          "description": "Indicates if the constraints of the attribute can be changed."
        },
        "valuePreferencesChangeable": {
          "type": "boolean",
          "title": "Value Preferences Changeable",
          "description": "Indicates if the value preferences can be changed."
        },
        "booleanValuePreferences": {
          "type": "string",
          "title": "Boolean Value Preferences",
          "description": "Indicates the preferences value for Boolean Value."
        },
        "numericValuePreferences": {
          "type": "string",
          "title": "Numeric Value Preferences",
          "description": "Indicates Numeric Value Preferences"
        },
        "dateValuePreferences": {
          "type": "string",
          "title": "Date Value Preferences",
          "description": "Indicates Date Value Preferences"
        },
        "dateTimeValuePreferences": {
          "type": "string",
          "title": "Date Time Value Preferences",
          "description": "Indicates Date Time Value Preferences"
        },
        "timeValuePreferences": {
          "type": "string",
          "title": "Time Value Preferences",
          "description": "Indicates Time Value Preferences"
        },
        "measurementValuePreferences": {
          "type": "string",
          "title": "Measurement Value Preferences",
          "description": "Indicates Measurement Value Preferences"
        },
        "textValuePreferences": {
          "type": "string",
          "title": "Text Value Preferences",
          "description": "Indicates Text Value Preferences"
        },
        "domainValueListPreferences": {
          "type": "string",
          "title": "Domain Value List Preferences",
          "description": "Indicates Domain Value List Preferences"
        },
        "domainValuePreferences": {
          "type": "string",
          "title": "Domain Value List Preferences",
          "description": "Indicates Domain Value Preferences"
        }
      }
    },
    "ContentTypeInfo": {
      "type": "object",
      "title": "Content Type Information",
      "description": "Details of a content type.",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "title": "ID",
          "description": "Unique ID of the content type."
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Name of the content type."
        },
        "domainId": {
          "type": "integer",
          "format": "int32",
          "title": "Domain ID",
          "description": "Domain ID associated with the content type."
        },
        "sourceReference": {
          "type": "string",
          "title": "Source Reference",
          "description": "Reference to the source of the content type."
        },
        "childDomainValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DomainValue"
          },
          "title": "Child Domain Values",
          "description": "List of child domain values associated with the content type."
        },
        "hasChildren": {
          "type": "boolean",
          "title": "Has Children",
          "description": "Indicates if the content type has children."
        },
        "isDeleted": {
          "type": "boolean",
          "title": "Is Deleted",
          "description": "Indicates if the content type is deleted."
        },
        "systemDefined": {
          "type": "boolean",
          "title": "System Defined",
          "description": "Indicates if the content type is system-defined."
        },
        "childrenAvailable": {
          "type": "boolean",
          "title": "Children Available",
          "description": "Indicates if children are available for the content type."
        },
        "extensible": {
          "type": "boolean",
          "title": "Extensible",
          "description": "Indicates if the content type is extensible."
        }
      }
    },
    "BooleanValuePreferences": {
      "type": "object",
      "title": "Boolean Value Preferences",
      "description": "Preferences for boolean values.",
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/BooleanValue"
        }
      }
    },
    "BooleanValue": {
      "type": "object",
      "title": "Boolean Value",
      "description": "Boolean value.",
      "properties": {
        "value": {
          "type": "boolean",
          "title": "Value",
          "description": "The boolean value."
        }
      }
    },
    "NumericValuePreferences": {
      "type": "object",
      "title": "Numeric Value Preferences",
      "description": "Preferences for numeric values.",
      "properties": {
        "minimumPossibleValue": {
          "$ref": "#/definitions/NumericValue"
        },
        "maximumPossibleValue": {
          "$ref": "#/definitions/NumericValue"
        },
        "defaultValue": {
          "$ref": "#/definitions/NumericValue"
        }
      }
    },
    "NumericValue": {
      "type": "object",
      "title": "Numeric Value",
      "description": "Numeric value.",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int64",
          "title": "Value",
          "description": "The numeric value."
        }
      }
    },
    "DateValue": {
      "type": "object",
      "title": "Date Value",
      "description": "Date value.",
      "properties": {
        "value": {
          "type": "string",
          "title": "Value",
          "description": "The date value."
        }
      }
    },
    "DateValuePreferences": {
      "type": "object",
      "title": "Date Value Preferences",
      "description": "Preferences for date values.",
      "properties": {
        "minimumPossibleValue": {
          "$ref": "#/definitions/DateValue"
        },
        "maximumPossibleValue": {
          "$ref": "#/definitions/DateValue"
        },
        "defaultValue": {
          "$ref": "#/definitions/DateValue"
        }
      }
    },
    "DateTimeValue": {
      "type": "object",
      "title": "DateTime Value",
      "description": "DateTime value.",
      "properties": {
        "value": {
          "type": "string",
          "title": "Value",
          "description": "The DateTime value."
        }
      }
    },
    "DateTimeValuePreferences": {
      "type": "object",
      "title": "DateTime Value Preferences",
      "description": "Preferences for DateTime values.",
      "properties": {
        "minimumPossibleValue": {
          "$ref": "#/definitions/DateTimeValue"
        },
        "maximumPossibleValue": {
          "$ref": "#/definitions/DateTimeValue"
        },
        "defaultValue": {
          "$ref": "#/definitions/DateTimeValue"
        }
      }
    },
    "TimeValue": {
      "type": "object",
      "title": "Time Value",
      "description": "Time value.",
      "properties": {
        "value": {
          "type": "string",
          "title": "Value",
          "description": "The time value."
        }
      }
    },
    "TimeValuePreferences": {
      "type": "object",
      "title": "Time Value Preferences",
      "description": "Preferences for time values.",
      "properties": {
        "minimumPossibleValue": {
          "$ref": "#/definitions/TimeValue"
        },
        "maximumPossibleValue": {
          "$ref": "#/definitions/TimeValue"
        },
        "defaultValue": {
          "$ref": "#/definitions/TimeValue"
        }
      }
    },
    "MeasurementValue": {
      "type": "object",
      "title": "Measurement Value",
      "description": "Measurement value.",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "title": "Value",
          "description": "The measurement value."
        }
      }
    },
    "MeasurementValuePreferences": {
      "type": "object",
      "title": "Measurement Value Preferences",
      "description": "Preferences for measurement values.",
      "properties": {
        "measurementUnit": {
          "type": "integer",
          "format": "int32",
          "title": "Measurement Unit",
          "description": "Measurement unit."
        },
        "onlyMeasurementUnitChangeable": {
          "type": "boolean",
          "title": "Only Measurement Unit Changeable",
          "description": "Indicates if only the measurement unit is changeable."
        },
        "minimumPossibleValue": {
          "$ref": "#/definitions/MeasurementValue"
        },
        "maximumPossibleValue": {
          "$ref": "#/definitions/MeasurementValue"
        },
        "defaultValue": {
          "$ref": "#/definitions/MeasurementValue"
        }
      }
    },
    "TextValue": {
      "type": "object",
      "title": "Text Value",
      "description": "Text value",
      "properties": {
        "value": {
          "type": "string",
          "title": "Value",
          "description": "The text value."
        }
      }
    },
    "TextValuePreferences": {
      "type": "object",
      "title": "Text Value Preferences",
      "description": "Preferences for text values.",
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/TextValue"
        },
        "maxLengthPossible": {
          "type": "integer",
          "format": "int32",
          "title": "Max Length Possible",
          "description": "Maximum possible length for text value."
        },
        "textSearchEnabled": {
          "type": "boolean",
          "title": "Text Search Enabled",
          "description": "Indicates if text search is enabled."
        }
      }
    },
    "DomainValueList": {
      "type": "object",
      "title": "Domain Value List",
      "description": "List of domain values.",
      "properties": {
        "domainValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DomainValue"
          },
          "title": "Domain Values",
          "description": "List of domain values."
        }
      }
    },
    "DomainValueListPreferences": {
      "type": "object",
      "title": "Domain Value List Preferences",
      "description": "Preferences for domain value lists.",
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/DomainValueList"
        },
        "domainId": {
          "type": "integer",
          "format": "int32",
          "title": "Domain ID",
          "description": "Domain ID associated with the domain value list."
        }
      }
    },
    "DomainValuePreferences": {
      "type": "object",
      "title": "Domain Value Preferences",
      "description": "Preferences for domain values.",
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/DomainValue"
        },
        "domainId": {
          "type": "integer",
          "format": "int32",
          "title": "Domain ID",
          "description": "Domain ID associated with the domain value."
        }
      }
    },
    "QueryDefinition": {
      "type": "object",
      "title": "Query Definition",
      "description": "Definition of a query.",
      "properties": {
        "queryId": {
          "type": "integer",
          "format": "int64",
          "title": "Query ID",
          "description": "Unique ID of the query."
        },
        "queryName": {
          "type": "string",
          "title": "Query Name",
          "description": "Name of the query."
        },
        "ownerId": {
          "type": "integer",
          "format": "int64",
          "title": "Owner ID",
          "description": "ID of the query owner."
        },
        "parameterized": {
          "type": "boolean",
          "title": "Parameterized",
          "description": "Indicates if the query is parameterized."
        },
        "queryDisplay": {
          "$ref": "#/definitions/QueryDisplay"
        },
        "queryConditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryCondition"
          },
          "title": "Query Conditions",
          "description": "List of query conditions."
        },
        "queryContext": {
          "$ref": "#/definitions/QueryContext"
        }
      }
    },
    "CreateQueryDefinition": {
      "type": "object",
      "title": "Query Definition",
      "description": "Definition of a query.",
      "required": [
        "queryName"
      ],
      "properties": {
        "queryName": {
          "type": "string",
          "title": "Query Name",
          "description": "Name of the query.",
          "default": "NewQueryNameHere"
        },
        "ownerId": {
          "type": "integer",
          "format": "int64",
          "title": "Owner ID",
          "description": "ID of the query owner."
        },
        "parameterized": {
          "type": "boolean",
          "title": "Parameterized",
          "description": "Indicates if the query is parameterized."
        },
        "queryDisplay": {
          "$ref": "#/definitions/QueryDisplay"
        },
        "queryConditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateQueryCondition"
          },
          "title": "Query Conditions",
          "description": "List of query conditions."
        },
        "queryContext": {
          "$ref": "#/definitions/QueryContext"
        }
      }
    },
    "QueryDisplay": {
      "type": "object",
      "title": "Query Display",
      "description": "Display settings for a query.",
      "required": [
        "displayMode"
      ],
      "properties": {
        "displayColumns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DisplayColumn"
          },
          "title": "Display Columns",
          "description": "List of display columns."
        },
        "sorting": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortInfo"
          },
          "title": "Sorting",
          "description": "List of sorting settings."
        },
        "displayMode": {
          "type": "integer",
          "format": "int32",
          "title": "Display Mode",
          "description": "Display mode setting.",
          "default": 6
        },
        "groupingAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupingInfo"
          },
          "title": "Grouping Attributes",
          "description": "List of grouping attributes."
        },
        "exploreMode": {
          "type": "integer",
          "format": "int32",
          "title": "Explore Mode",
          "description": "Explore mode setting."
        }
      }
    },
    "QueryCondition": {
      "type": "object",
      "title": "Query Condition",
      "description": "Condition for a query.",
      "required": [
        "logicalOperator",
        "comparisonOperator",
        "negated",
        "parameterized",
        "type",
        "attributeId",
        "value"
      ],
      "properties": {
        "logicalOperator": {
          "type": "integer",
          "format": "int32",
          "title": "Logical Operator",
          "description": "Logical operator for the condition.",
          "default": 1
        },
        "comparisonOperator": {
          "type": "integer",
          "format": "int32",
          "title": "Comparison Operator",
          "description": "Comparison operator for the condition.",
          "default": 1
        },
        "negated": {
          "type": "boolean",
          "title": "Negated",
          "description": "Indicates if the condition is negated.",
          "default": false
        },
        "parameterized": {
          "type": "boolean",
          "title": "Parameterized",
          "description": "Indicates if the condition is parameterized.",
          "default": false
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "title": "Type",
          "description": "Type of the condition.",
          "default": 1
        },
        "attributeId": {
          "type": "integer",
          "format": "int32",
          "title": "Attribute Id",
          "description": "Attribute Id for Search.",
          "default": 1531
        },
        "value": {
          "type": "string",
          "title": "Value to Search Against",
          "description": "value to Search Against.",
          "default": "SVVnOQW9MEqC9GN5mcsr4GQALPdn"
        }
      }
    },
    "CreateQueryCondition": {
      "type": "object",
      "title": "Query Condition",
      "description": "Condition for a query.",
      "properties": {
        "logicalOperator": {
          "type": "integer",
          "format": "int32",
          "title": "Logical Operator",
          "description": "Logical operator for the condition."
        },
        "comparisonOperator": {
          "type": "integer",
          "format": "int32",
          "title": "Comparison Operator",
          "description": "Comparison operator for the condition."
        },
        "negated": {
          "type": "boolean",
          "title": "Negated",
          "description": "Indicates if the condition is negated."
        },
        "parameterized": {
          "type": "boolean",
          "title": "Parameterized",
          "description": "Indicates if the condition is parameterized."
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "title": "Type",
          "description": "Type of the condition."
        },
        "attributeId": {
          "type": "integer",
          "format": "int32",
          "title": "Attribute Id",
          "description": "Attribute Id for Search."
        },
        "value": {
          "type": "string",
          "title": "Value to Search Against",
          "description": "value to Search Against."
        }
      }
    },
    "QueryContext": {
      "type": "object",
      "title": "Query Context",
      "description": "Context settings for a query.",
      "properties": {
        "contentType": {
          "type": "integer",
          "format": "int64",
          "title": "Content Type",
          "description": "ID of the content type for the query context."
        },
        "collections": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "title": "Collections",
          "description": "List of collection IDs for the query context."
        },
        "recursive": {
          "type": "boolean",
          "title": "Recursive",
          "description": "Indicates if the query context is recursive."
        },
        "includeAllVersions": {
          "type": "boolean",
          "title": "Include All Versions",
          "description": "Indicates if all versions are included in the query context."
        },
        "includeBranches": {
          "type": "boolean",
          "title": "Include Branches",
          "description": "Indicates if branches are included in the query context."
        }
      }
    },
    "DisplayColumn": {
      "type": "object",
      "title": "Display Column",
      "description": "Column for display in a query.",
      "required": [
        "columnId",
        "width",
        "attributeColumn"
      ],
      "properties": {
        "columnId": {
          "type": "integer",
          "format": "int64",
          "title": "Column ID",
          "description": "ID of the display column.",
          "default": 2
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "title": "Width",
          "description": "Width of the display column.",
          "default": 300
        },
        "attributeColumn": {
          "type": "boolean",
          "title": "Attribute Column",
          "description": "Indicates if the column is an attribute column.",
          "default": true
        }
      }
    },
    "SortInfo": {
      "type": "object",
      "title": "Sort Info",
      "description": "Sorting settings for a query.",
      "properties": {
        "columnId": {
          "type": "integer",
          "format": "int64",
          "title": "Column ID",
          "description": "ID of the column for sorting."
        },
        "descending": {
          "type": "boolean",
          "title": "Descending",
          "description": "Indicates if the sorting is in descending order."
        },
        "attributeColumn": {
          "type": "boolean",
          "title": "Attribute Column",
          "description": "Indicates if the sorted column is an attribute column."
        }
      }
    },
    "GroupingInfo": {
      "type": "object",
      "title": "Grouping Info",
      "description": "Grouping settings for a query.",
      "properties": {
        "attributeId": {
          "type": "integer",
          "format": "int64",
          "title": "Attribute ID",
          "description": "ID of the attribute for grouping."
        },
        "descending": {
          "type": "boolean",
          "title": "Descending",
          "description": "Indicates if the grouping is in descending order."
        }
      }
    },
    "ListResponseQueryResultElement": {
      "type": "object",
      "title": "List Response Query Result Element",
      "description": "Response element for listing query results.",
      "properties": {
        "get_count": {
          "type": "integer",
          "format": "int32",
          "title": "Count",
          "description": "Number of results in the list response."
        },
        "get_nextLink": {
          "type": "string",
          "title": "Next Link",
          "description": "Link to the next page of results."
        },
        "get_value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryResultElement"
          },
          "title": "Value",
          "description": "Array of query result elements."
        }
      }
    },
    "QueryResultElement": {
      "type": "object",
      "title": "Query Result Element",
      "description": "Element in a query result.",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "title": "ID",
          "description": "Unique identifier for the element."
        },
        "childAvailable": {
          "type": "boolean",
          "title": "Child Available",
          "description": "Indicates if child elements are available."
        },
        "elementType": {
          "type": "integer",
          "format": "int32",
          "title": "Element Type",
          "description": "Type of the element."
        }
      }
    },
    "ListResponseUser": {
      "type": "object",
      "title": "List Response User",
      "description": "Response element for listing users.",
      "properties": {
        "get_count": {
          "type": "integer",
          "format": "int32",
          "title": "Count",
          "description": "Number of users in the list response."
        },
        "get_nextLink": {
          "type": "string",
          "title": "Next Link",
          "description": "Link to the next page of results."
        },
        "get_value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "title": "Value",
          "description": "Array of user elements."
        }
      }
    },
    "PublishedOutputInfo": {
      "type": "object",
      "title": "Published Output Info",
      "description": "Information about a published output.",
      "properties": {
        "downloadUrl": {
          "type": "string",
          "title": "Download URL",
          "description": "URL for downloading the output."
        },
        "directDownload": {
          "type": "boolean",
          "title": "Direct Download",
          "description": "Indicates if the output can be downloaded directly."
        },
        "attributesMap": {
          "type": "object",
          "title": "Attributes Map",
          "description": "Map of attributes related to the published output.",
          "properties": {
            "file-extension": {
              "type": "string",
              "title": "File Extension",
              "description": "File extension of the output."
            },
            "mime-type": {
              "type": "string",
              "title": "MIME Type",
              "description": "MIME type of the output."
            },
            "resource-name": {
              "type": "string",
              "title": "Resource Name",
              "description": "Name of the resource."
            }
          }
        }
      }
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": [],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.quark.com/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.quark.com/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Content and Files;Productivity"
    }
  ]
}