{
  "definitions": {
    "AlternateFileFormatCandidate": {
      "description": "Alternate file format possibility",
      "properties": {
        "DetectedFileExtension": {
          "description": "Detected file extension of the file format, with a leading period",
          "type": "string"
        },
        "DetectedMimeType": {
          "description": "MIME type of this file extension",
          "type": "string"
        },
        "Probability": {
          "description": "Probability that this extension is the right one; possible values are between 0.0 (lowest confidence) and 1.0 (highest confidence)",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "AutodetectDocumentValidationResult": {
      "description": "Document validation result",
      "properties": {
        "DocumentIsValid": {
          "description": "True if the document is valid and has no errors, false otherwise",
          "type": "boolean"
        },
        "ErrorCount": {
          "description": "Number of validation errors found in the document",
          "format": "int32",
          "type": "integer"
        },
        "ErrorsAndWarnings": {
          "description": "Details of errors and warnings found",
          "items": {
            "$ref": "#/definitions/DocumentValidationError"
          },
          "type": "array"
        },
        "FileFormatExtension": {
          "type": "string"
        },
        "WarningCount": {
          "description": "Number of validation warnings found in the document",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AutodetectGetInfoResult": {
      "description": "Result of an autodetect/get-info operation",
      "properties": {
        "AlternateFileTypeCandidates": {
          "description": "Alternate file type options and their probability",
          "items": {
            "$ref": "#/definitions/AlternateFileFormatCandidate"
          },
          "type": "array"
        },
        "Author": {
          "description": "User name of the creator/author of the document, if available, null if not available",
          "type": "string"
        },
        "DateModified": {
          "description": "The timestamp that the document was last modified, if available, null if not available",
          "format": "date-time",
          "type": "string"
        },
        "DetectedFileExtension": {
          "description": "Detected file extension of the file format, with a leading period",
          "type": "string"
        },
        "DetectedMimeType": {
          "description": "MIME type of this file extension",
          "type": "string"
        },
        "PageCount": {
          "description": "Number of pages in a page-based document; for presentations, this is the number of slides and for a spreadsheet this is the number of worksheets.  Contains 0 when the page count cannot be determined, or if the concept of page count does not apply (e.g. for an image)",
          "format": "int64",
          "type": "integer"
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "AutodetectToPngResult": {
      "description": "Result of converting an autodetected input to a PNG array",
      "properties": {
        "PngResultPages": {
          "description": "Array of converted pages",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConvertedPngPage": {
      "description": "A single converted page",
      "properties": {
        "PageNumber": {
          "description": "Page number of the converted page, starting with 1",
          "format": "int32",
          "type": "integer"
        },
        "URL": {
          "description": "URL to the PNG file of this page; file is stored in an in-memory cache and will be deleted",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentValidationError": {
      "description": "Validation error found in document",
      "properties": {
        "Description": {
          "description": "Description of the error",
          "type": "string"
        },
        "IsError": {
          "description": "True if this is an error, false otherwise",
          "type": "boolean"
        },
        "Path": {
          "description": "XPath to the error",
          "type": "string"
        },
        "Uri": {
          "description": "URI of the part in question",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentValidationResult": {
      "description": "Document validation result",
      "properties": {
        "DocumentIsValid": {
          "description": "True if the document is valid and has no errors, false otherwise",
          "type": "boolean"
        },
        "ErrorCount": {
          "description": "Number of validation errors found in the document",
          "format": "int32",
          "type": "integer"
        },
        "ErrorsAndWarnings": {
          "description": "Details of errors and warnings found",
          "items": {
            "$ref": "#/definitions/DocumentValidationError"
          },
          "type": "array"
        },
        "WarningCount": {
          "description": "Number of validation warnings found in the document",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DocxBody": {
      "properties": {
        "AllParagraphs": {
          "description": "All paragraphs anywhere in the document; these objects are not sequentially placed but are scatted across document",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          },
          "type": "array"
        },
        "AllTables": {
          "description": "All tables anywhere in the document; these objects are not sequentially placed but are scatted across the document",
          "items": {
            "$ref": "#/definitions/DocxTable"
          },
          "type": "array"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocxCellStyle": {
      "description": "Style in an Excel spreadsheet",
      "properties": {
        "BuiltInID": {
          "description": "Built=in ID of the cell style",
          "format": "int32",
          "type": "integer"
        },
        "FormatID": {
          "description": "Format ID of the cell style",
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "description": "Name of the style",
          "type": "string"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocxFooter": {
      "description": "Footer in a Word Document (DOCX)",
      "properties": {
        "Paragraphs": {
          "description": "Paragraphs in this footer",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          },
          "type": "array"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "SectionsWithFooter": {
          "description": "Sections that the footer is applied to",
          "items": {
            "$ref": "#/definitions/DocxSection"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DocxHeader": {
      "description": "Header of a Word Document (DOCX)",
      "properties": {
        "Paragraphs": {
          "description": "Paragraphs in this header",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          },
          "type": "array"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "SectionsWithHeader": {
          "description": "Sections that the header is applied to",
          "items": {
            "$ref": "#/definitions/DocxSection"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DocxImage": {
      "properties": {
        "ImageContentsURL": {
          "description": "URL to the image contents; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the contents.",
          "type": "string"
        },
        "ImageDataContentType": {
          "description": "Read-only; image data MIME content-type",
          "type": "string"
        },
        "ImageDataEmbedId": {
          "description": "Read-only; internal ID for the image contents",
          "type": "string"
        },
        "ImageDescription": {
          "description": "The Description of the image",
          "type": "string"
        },
        "ImageHeight": {
          "description": "Height of the image in EMUs (English Metric Units); set to 0 to default to page width and aspect-ratio based height",
          "format": "int64",
          "type": "integer"
        },
        "ImageId": {
          "description": "The Id of the image",
          "format": "int64",
          "type": "integer"
        },
        "ImageInternalFileName": {
          "description": "Read-only; internal file name/path for the image",
          "type": "string"
        },
        "ImageName": {
          "description": "The Name of the image",
          "type": "string"
        },
        "ImageWidth": {
          "description": "Width of the image in EMUs (English Metric Units); set to 0 to default to page width and aspect-ratio based height",
          "format": "int64",
          "type": "integer"
        },
        "InlineWithText": {
          "description": "True if the image is inline with the text; false if it is floating",
          "type": "boolean"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "XOffset": {
          "description": "X (horizontal) offset of the image",
          "format": "int64",
          "type": "integer"
        },
        "YOffset": {
          "description": "Y (vertical) offset of the image",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DocxInsertImageRequest": {
      "description": "Input to set-footer command",
      "properties": {
        "ImageToAdd": {
          "$ref": "#/definitions/DocxImage",
          "description": "Optional: Image to add; if you supply in this object, do not supply InputImageFileBytes or InputImageFileUrl."
        },
        "InputDocumentFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputDocumentFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "InputImageFileBytes": {
          "description": "Optional: Bytes of the input image file to operate on; if you supply this value do not supply InputImageFileUrl or ImageToAdd.",
          "format": "byte",
          "type": "string"
        },
        "InputImageFileUrl": {
          "description": "Optional: URL of an image file to operate on as input; if you supply this value do not supply InputImageFileBytes or ImageToAdd.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "InsertPath": {
          "description": "Optional; location within the document to insert the object; fill in the InsertPath field using the Path value from an existing object.  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject",
          "type": "string"
        },
        "InsertPlacement": {
          "description": "Optional; default is DocumentEnd.  Placement Type of the insert; possible values are: DocumentStart (very beginning of the document), DocumentEnd (very end of the document), BeforeExistingObject (right before an existing object - fill in the InsertPath field using the Path value from an existing object), AfterExistingObject (right after an existing object - fill in the InsertPath field using the Path value from an existing object)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocxInsertImageResponse": {
      "description": "Result of running a set-footer command",
      "properties": {
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocxPage": {
      "properties": {
        "PageNumber": {
          "description": "Page number of this page, 1-based",
          "format": "int32",
          "type": "integer"
        },
        "Paragraphs": {
          "description": "All paragraphs anywhere in the document; these objects are not sequentially placed but are scatted across document",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DocxParagraph": {
      "description": "A paragraph in a Word Document (DOCX) file; there is where text, content and formatting are stored - similar to the paragraph tag in HTML",
      "properties": {
        "ContentRuns": {
          "description": "The content runs in the paragraph - this is where text is stored; similar to a span in HTML",
          "items": {
            "$ref": "#/definitions/DocxRun"
          },
          "type": "array"
        },
        "ParagraphIndex": {
          "description": "The index of the paragraph; 0-based",
          "format": "int32",
          "type": "integer"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "StyleID": {
          "description": "Style ID of the style applied to the paragraph; null if no style is applied",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocxRemoveObjectRequest": {
      "description": "Input to a Insert Paragraph request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "PathToObjectToRemove": {
          "description": "Path within the document of the object to delete; fill in the PathToObjectToRemove field using the Path value from an existing object.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocxRemoveObjectResponse": {
      "description": "Result of running an Remove-Object command",
      "properties": {
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocxRun": {
      "description": "A content run in a Word Document (DOCX) file",
      "properties": {
        "Bold": {
          "description": "True to make the text bold, false otherwise",
          "type": "boolean"
        },
        "FontFamily": {
          "description": "Font Family name for the text, e.g. \"Arial\" or \"Times New Roman\"",
          "type": "string"
        },
        "FontSize": {
          "description": "Font size in font points (e.g. \"24\")",
          "type": "string"
        },
        "Italic": {
          "description": "True to make the text italic, false otherwise",
          "type": "boolean"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "RunIndex": {
          "description": "Index of the run, 0-based",
          "format": "int32",
          "type": "integer"
        },
        "TextItems": {
          "description": "Text items inside the run; this is where the actual text content is stored",
          "items": {
            "$ref": "#/definitions/DocxText"
          },
          "type": "array"
        },
        "Underline": {
          "description": "Underline mode for the text; possible values are: Words, Double, Thick, Dotted, DottedHeavy, Dash, DashedHeavy, DashLong, DashLongHeavy, DotDash, DashDotHeavy, DotDotDash, DashDotDotHeavy, Wave, WavyHeavy, WavyDouble, None",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocxSection": {
      "description": "Section of a Word Document (DOCX)",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "StartingPageNumbers": {
          "description": "Page numbers that the section starts at, typically just one",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DocxSetFooterAddPageNumberRequest": {
      "description": "Input to set-footer/add-page-number command",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "PrependText": {
          "description": "Optional: extra text to add before the page number, for example if you want to show \"Page 1\" then you can set PrependText to \"Page\"",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocxSetFooterRequest": {
      "description": "Input to set-footer command",
      "properties": {
        "FooterToApply": {
          "$ref": "#/definitions/DocxFooter",
          "description": "Footer to apply"
        },
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocxSetFooterResponse": {
      "description": "Result of running a set-footer command",
      "properties": {
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocxSetHeaderRequest": {
      "description": "Input to a set-header command",
      "properties": {
        "HeaderToApply": {
          "$ref": "#/definitions/DocxHeader",
          "description": "Header to apply"
        },
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocxSetHeaderResponse": {
      "description": "Result of running a set-header command",
      "properties": {
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocxStyle": {
      "description": "Style in a DOCX Word Document",
      "properties": {
        "Bold": {
          "description": "Style applies bold formatting",
          "type": "boolean"
        },
        "FontFamily": {
          "description": "Font family",
          "type": "string"
        },
        "FontSize": {
          "description": "Font size",
          "type": "string"
        },
        "Italic": {
          "description": "Style applies italic formatting",
          "type": "boolean"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "StyleID": {
          "description": "ID of the style",
          "type": "string"
        },
        "Underline": {
          "description": "Style applies underline formatting",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocxTable": {
      "description": "A table in a Word Document (DOCX) file",
      "properties": {
        "BottomBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "BottomBorderSize": {
          "description": "Width of the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "BottomBorderSpace": {
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "BottomBorderType": {
          "description": "Type for the bottom border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "CellHorizontalBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "CellHorizontalBorderSize": {
          "description": "Width of the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "CellHorizontalBorderSpace": {
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "CellHorizontalBorderType": {
          "description": "Type for the cell horizontal border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "CellVerticalBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "CellVerticalBorderSize": {
          "description": "Width of the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "CellVerticalBorderSpace": {
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "CellVerticalBorderType": {
          "description": "Type for the cell vertical border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "EndBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "EndBorderSize": {
          "description": "Width of the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "EndBorderSpace": {
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "EndBorderType": {
          "description": "Type for the end border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "LeftBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "LeftBorderSize": {
          "description": "Width of the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "LeftBorderSpace": {
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "LeftBorderType": {
          "description": "Type for the left border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "RightBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "RightBorderSize": {
          "description": "Width of the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "RightBorderSpace": {
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "RightBorderType": {
          "description": "Type for the right border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "StartBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "StartBorderSize": {
          "description": "Width of the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "StartBorderSpace": {
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "StartBorderType": {
          "description": "Type for the start border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "TableID": {
          "description": "The ID of the table; leave blank for new tables",
          "type": "string"
        },
        "TableIndentationMode": {
          "description": "Table indentation type",
          "type": "string"
        },
        "TableIndentationWidth": {
          "description": "Table indentation width",
          "format": "int32",
          "type": "integer"
        },
        "TableRows": {
          "description": "Rows in the table; this is where the contents is located",
          "items": {
            "$ref": "#/definitions/DocxTableRow"
          },
          "type": "array"
        },
        "TopBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "TopBorderSize": {
          "description": "Width of the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "TopBorderSpace": {
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "format": "int32",
          "type": "integer"
        },
        "TopBorderType": {
          "description": "Type for the top border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "Width": {
          "description": "The Width of the table, or 0 if not specified",
          "type": "string"
        },
        "WidthType": {
          "description": "The Width configuration type of the table",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocxTableCell": {
      "description": "A cell in a Word Document (DOCX) file",
      "properties": {
        "CellIndex": {
          "description": "The index of the cell, 0-based",
          "format": "int32",
          "type": "integer"
        },
        "CellShadingColor": {
          "description": "Color of the cell shading",
          "type": "string"
        },
        "CellShadingFill": {
          "description": "Fill of the cell shading",
          "type": "string"
        },
        "CellShadingPattern": {
          "description": "Pattern of the cell shading",
          "type": "string"
        },
        "CellWidth": {
          "description": "Width of the cell",
          "type": "string"
        },
        "CellWidthMode": {
          "description": "Width mode of the cell; can be auto (for automatic) or manual",
          "type": "string"
        },
        "Paragraphs": {
          "description": "Paragraphs inside the cell; this is where the contents of the cell are stored",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          },
          "type": "array"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocxTableRow": {
      "description": "A row in a Word Document (DOCX) file",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "RowCells": {
          "description": "Cells in the row; this is where the contents of the row is stored",
          "items": {
            "$ref": "#/definitions/DocxTableCell"
          },
          "type": "array"
        },
        "RowIndex": {
          "description": "Index of the row, 0-based",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DocxTemplateApplicationRequest": {
      "description": "Word DOCX template application request",
      "properties": {
        "Operations": {
          "description": "Operations to apply to this template",
          "items": {
            "$ref": "#/definitions/DocxTemplateOperation"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DocxTemplateOperation": {
      "properties": {
        "Action": {
          "description": "Operation action to take; possible values are \"Replace\"",
          "enum": [
            1
          ],
          "format": "int32",
          "type": "integer"
        },
        "MatchAgainst": {
          "description": "For Replace operations, the string to match against (to be replaced with ReplaceWith string)",
          "type": "string"
        },
        "ReplaceWith": {
          "description": "For Replace operations, the string to Replace the original string with",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocxText": {
      "description": "Unit of text content in a Word Document (DOCX) file",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "TextContent": {
          "description": "Text string containing the text content of this text content item",
          "type": "string"
        },
        "TextIndex": {
          "description": "Index of the text content in the run; 0-based",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ExifValue": {
      "description": "EXIF tag and value",
      "properties": {
        "DataType": {
          "description": "Date type of the EXIF value",
          "type": "string"
        },
        "DataValue": {
          "description": "Value, formatted as a string of the EXIF value",
          "type": "string"
        },
        "Tag": {
          "description": "Tag name for the EXIF value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FinishEditingRequest": {
      "description": "Input to a Finish Editing request",
      "properties": {
        "InputFileUrl": {
          "description": "URL of a document being edited to get the contents of.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetDocxBodyRequest": {
      "description": "Input to a Get Body request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetDocxBodyResponse": {
      "description": "Result of running a Get-Body command",
      "properties": {
        "Body": {
          "$ref": "#/definitions/DocxBody",
          "description": "Body in the DOCX document"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GetDocxHeadersAndFootersRequest": {
      "description": "Input to a Get Tables request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetDocxHeadersAndFootersResponse": {
      "description": "Result of running a Get-Tables command",
      "properties": {
        "Footers": {
          "items": {
            "$ref": "#/definitions/DocxFooter"
          },
          "type": "array"
        },
        "Headers": {
          "items": {
            "$ref": "#/definitions/DocxHeader"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GetDocxImagesRequest": {
      "description": "Input to a Get Images request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetDocxImagesResponse": {
      "description": "Result of running a Get-Images command",
      "properties": {
        "Images": {
          "description": "Images in the DOCX document",
          "items": {
            "$ref": "#/definitions/DocxImage"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GetDocxPagesRequest": {
      "description": "Input to a Get Word DOCX Document Pages request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetDocxPagesResponse": {
      "properties": {
        "PageCount": {
          "format": "int32",
          "type": "integer"
        },
        "Pages": {
          "items": {
            "$ref": "#/definitions/DocxPage"
          },
          "type": "array"
        },
        "Successful": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GetDocxSectionsRequest": {
      "description": "Input to a Get Sections request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetDocxSectionsResponse": {
      "description": "Result of running a Get-Sections command",
      "properties": {
        "Sections": {
          "description": "Sections in the DOCX document",
          "items": {
            "$ref": "#/definitions/DocxSection"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GetDocxStylesRequest": {
      "description": "Input to a Get Tables request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetDocxStylesResponse": {
      "description": "Result of running a Get-Tables command",
      "properties": {
        "Styles": {
          "description": "Styles in the DOCX document",
          "items": {
            "$ref": "#/definitions/DocxStyle"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GetDocxTablesRequest": {
      "description": "Input to a Get Tables request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetDocxTablesResponse": {
      "description": "Result of running a Get-Tables command",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Tables": {
          "description": "Tables in the DOCX file",
          "items": {
            "$ref": "#/definitions/DocxTable"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GetImageInfoResult": {
      "description": "Result of running a get-info operation on an image",
      "properties": {
        "BitDepth": {
          "description": "Bit depth of the image",
          "format": "int32",
          "type": "integer"
        },
        "ColorCount": {
          "description": "Unique colors in the image",
          "format": "int32",
          "type": "integer"
        },
        "ColorSpace": {
          "description": "Color space of the image",
          "type": "string"
        },
        "ColorType": {
          "description": "Color type of the image",
          "type": "string"
        },
        "Comment": {
          "description": "Comment string in the image",
          "type": "string"
        },
        "CompressionLevel": {
          "description": "Compression level value from 0 (lowest quality) to 100 (highest quality)",
          "format": "int32",
          "type": "integer"
        },
        "DPI": {
          "description": "DPI (pixels per unit, e.g. pixels per inch) of the image",
          "format": "double",
          "type": "number"
        },
        "DPIUnit": {
          "description": "Units of the DPI measurement; can be either in Inches or Centimeters",
          "type": "string"
        },
        "ExifProfileName": {
          "description": "Name of the EXIF profile used",
          "type": "string"
        },
        "ExifValues": {
          "description": "EXIF tags and values embedded in the image",
          "items": {
            "$ref": "#/definitions/ExifValue"
          },
          "type": "array"
        },
        "HasTransparency": {
          "description": "True if the image contains transparency, otherwise false",
          "type": "boolean"
        },
        "Height": {
          "description": "Height in pixels of the image",
          "format": "int32",
          "type": "integer"
        },
        "ImageFormat": {
          "description": "Image format",
          "type": "string"
        },
        "ImageHashSignature": {
          "description": "SHA256 hash signature of the image",
          "type": "string"
        },
        "MimeType": {
          "description": "MIME type of the image format",
          "type": "string"
        },
        "Successful": {
          "type": "boolean"
        },
        "Width": {
          "description": "Width in pixels of the image",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GetXlsxColumnsRequest": {
      "description": "Input to a Get Columns request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the columns of; leave blank to default to the first worksheet"
        }
      },
      "type": "object"
    },
    "GetXlsxColumnsResponse": {
      "description": "Result of running a Get-Columns command",
      "properties": {
        "Columns": {
          "description": "Spreadsheet Columns in the DOCX document",
          "items": {
            "$ref": "#/definitions/XlsxSpreadsheetColumn"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GetXlsxImagesRequest": {
      "description": "Input to a Get Images request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the images of; leave blank to default to the first worksheet"
        }
      },
      "type": "object"
    },
    "GetXlsxImagesResponse": {
      "description": "Result of running a Get-Images command",
      "properties": {
        "Images": {
          "description": "Spreadsheet Columns in the DOCX document",
          "items": {
            "$ref": "#/definitions/XlsxImage"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GetXlsxRowsAndCellsRequest": {
      "description": "Input to a Get Worksheets request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the rows and cells of; leave blank to default to the first worksheet"
        }
      },
      "type": "object"
    },
    "GetXlsxRowsAndCellsResponse": {
      "description": "Result of running a Get-Worksheets command",
      "properties": {
        "Rows": {
          "description": "Spreadsheet Rows in the DOCX document",
          "items": {
            "$ref": "#/definitions/XlsxSpreadsheetRow"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GetXlsxStylesRequest": {
      "description": "Input to a Get Worksheets request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetXlsxStylesResponse": {
      "description": "Result of running a Get-Worksheets command",
      "properties": {
        "CellStyles": {
          "description": "Cell styles",
          "items": {
            "$ref": "#/definitions/DocxCellStyle"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GetXlsxWorksheetsRequest": {
      "description": "Input to a Get Worksheets request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetXlsxWorksheetsResponse": {
      "description": "Result of running a Get-Worksheets command",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Worksheets": {
          "description": "Styles in the DOCX document",
          "items": {
            "$ref": "#/definitions/XlsxWorksheet"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "HtmlMdResult": {
      "description": "Result from converting a Markdown file to HTML",
      "properties": {
        "Html": {
          "description": "Resulting HTML from the conversion",
          "type": "string"
        },
        "Successful": {
          "description": "True if operation was successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "HtmlTemplateApplicationRequest": {
      "description": "HTML template application request",
      "properties": {
        "HtmlTemplate": {
          "description": "HTML template input as a string",
          "type": "string"
        },
        "HtmlTemplateUrl": {
          "description": "URL to HTML template input",
          "type": "string"
        },
        "Operations": {
          "description": "Operations to apply to this template",
          "items": {
            "$ref": "#/definitions/HtmlTemplateOperation"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "HtmlTemplateApplicationResponse": {
      "description": "Response from an HTML template application",
      "properties": {
        "FinalHtml": {
          "description": "Final HTML result of all operations on input",
          "type": "string"
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "HtmlTemplateOperation": {
      "properties": {
        "Action": {
          "description": "Operation action to take; possible values are \"Replace\"",
          "enum": [
            1
          ],
          "format": "int32",
          "type": "integer"
        },
        "MatchAgsint": {
          "description": "For Replace operations, the string to match against (to be replaced with ReplaceWith string)",
          "type": "string"
        },
        "ReplaceWith": {
          "description": "For Replace operations, the string to Replace the original string with",
          "type": "string"
        }
      },
      "type": "object"
    },
    "HtmlToOfficeRequest": {
      "description": "Details of the HTML to Office request",
      "properties": {
        "Html": {
          "description": "HTML to render to Office format",
          "type": "string"
        }
      },
      "type": "object"
    },
    "HtmlToPdfRequest": {
      "description": "Details of the HTML to PDF request",
      "properties": {
        "ExtraLoadingWait": {
          "description": "Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites.",
          "format": "int32",
          "type": "integer"
        },
        "Html": {
          "description": "HTML to render to PDF",
          "type": "string"
        }
      },
      "type": "object"
    },
    "HtmlToPngRequest": {
      "description": "Details of the HTML to PNG request",
      "properties": {
        "ExtraLoadingWait": {
          "description": "Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites.",
          "format": "int32",
          "type": "integer"
        },
        "Html": {
          "description": "HTML to render to PNG (screenshot)",
          "type": "string"
        },
        "ScreenshotHeight": {
          "description": "Optional: Height of the screenshot in pixels; supply 0 to default to 1280 x 1024, supply -1 to measure the full screen height of the page and attempt to take a screen-height screenshot",
          "format": "int32",
          "type": "integer"
        },
        "ScreenshotWidth": {
          "description": "Optional: Width of the screenshot in pixels; supply 0 to default to 1280 x 1024, supply -1 to measure the full screen height of the page and attempt to take a screen-height screenshot",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "InsertDocxInsertParagraphRequest": {
      "description": "Input to a Insert Paragraph request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "InsertPath": {
          "description": "Optional; location within the document to insert the object; fill in the InsertPath field using the Path value from an existing object.  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject",
          "type": "string"
        },
        "InsertPlacement": {
          "description": "Optional; default is DocumentEnd.  Placement Type of the insert; possible values are: DocumentStart (very beginning of the document), DocumentEnd (very end of the document), BeforeExistingObject (right before an existing object - fill in the InsertPath field using the Path value from an existing object), AfterExistingObject (right after an existing object - fill in the InsertPath field using the Path value from an existing object)",
          "type": "string"
        },
        "ParagraphToInsert": {
          "$ref": "#/definitions/DocxParagraph",
          "description": "Table you would like to insert"
        }
      },
      "type": "object"
    },
    "InsertDocxInsertParagraphResponse": {
      "description": "Result of running an Insert-Paragraph command",
      "properties": {
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "InsertDocxTableRowRequest": {
      "description": "Input to a Insert Table Row request",
      "properties": {
        "ExistingTablePath": {
          "description": "Required; the path to the existing table to modify",
          "type": "string"
        },
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "InsertPlacement": {
          "description": "Optional; default is TableEnd.  Placement Type of the insert; possible values are: TableStart (very beginning of the table), TableEnd (very end of the document), or a 0-based row index number as an integer, 0 being the first row in the table, 1 being the second row in the table, 2 being the third row in the table, etc. to insert this row after",
          "type": "string"
        },
        "RowToInsert": {
          "$ref": "#/definitions/DocxTableRow",
          "description": "Table you would like to insert"
        }
      },
      "type": "object"
    },
    "InsertDocxTableRowResponse": {
      "description": "Result of running an Insert-Table Row command",
      "properties": {
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "InsertDocxTablesRequest": {
      "description": "Input to a Insert Tables request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "InsertPath": {
          "description": "Optional; location within the document to insert the object; fill in the InsertPath field using the Path value from an existing object.  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject",
          "type": "string"
        },
        "InsertPlacement": {
          "description": "Optional; default is DocumentEnd.  Placement Type of the insert; possible values are: DocumentStart (very beginning of the document), DocumentEnd (very end of the document), BeforeExistingObject (right before an existing object - fill in the InsertPath field using the Path value from an existing object), AfterExistingObject (right after an existing object - fill in the InsertPath field using the Path value from an existing object)",
          "type": "string"
        },
        "TableToInsert": {
          "$ref": "#/definitions/DocxTable",
          "description": "Table you would like to insert"
        }
      },
      "type": "object"
    },
    "InsertDocxTablesResponse": {
      "description": "Result of running an Insert-Tables command",
      "properties": {
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "InsertXlsxWorksheetRequest": {
      "description": "Input to a Get Worksheets request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToInsert": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Workersheet to insert"
        }
      },
      "type": "object"
    },
    "InsertXlsxWorksheetResponse": {
      "description": "Result of running a Get-Worksheets command",
      "properties": {
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MultipageImageFormatConversionResult": {
      "description": "Result of converting a multi-page image into individual pages with a different format",
      "properties": {
        "PageCount": {
          "description": "The number of pages in the converted output",
          "format": "int32",
          "type": "integer"
        },
        "Pages": {
          "description": "Converted page results",
          "items": {
            "$ref": "#/definitions/PageConversionResult"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PageConversionResult": {
      "description": "Converted page as an image",
      "properties": {
        "FileBytes": {
          "description": "File bytes (contents) of the image in converted file format",
          "format": "byte",
          "type": "string"
        },
        "Filename": {
          "description": "File name of the image in the converted file format",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PdfDocument": {
      "description": "A single PDF file corresponding to one page in the original document",
      "properties": {
        "DocumentContents": {
          "description": "If returnDocumentContents is set to true, will contain the contents of the document; otherwise will be set to null and the document contents will be available via the URL parameter",
          "format": "byte",
          "type": "string"
        },
        "PageNumber": {
          "description": "Page number of the converted page, starting with 1 for the first page",
          "format": "int32",
          "type": "integer"
        },
        "URL": {
          "description": "URL to the PDF file of this worksheet; file is stored in an in-memory cache and will be deleted",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PdfFormField": {
      "description": "Field definition and value in the form",
      "properties": {
        "FieldComboBoxSelectedIndex": {
          "description": "Applies to ComboBox field types only; specifies the selected index of the combo box selection if available",
          "format": "int32",
          "type": "integer"
        },
        "FieldName": {
          "description": "Name of the form field",
          "type": "string"
        },
        "FieldType": {
          "description": "The data type of the field; possible values are Text (FieldValue will be a string), Checkbox (FieldValue can be \"true\" or \"false\"), ComboBox (FieldComboBoxSelectedIndex will also be populated), Other",
          "type": "string"
        },
        "FieldValue": {
          "description": "Value of the form field",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PdfFormFields": {
      "description": "Result of retrieving PDF form fields",
      "properties": {
        "FormFields": {
          "description": "Fields and field values found in the form",
          "items": {
            "$ref": "#/definitions/PdfFormField"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PdfMetadata": {
      "description": "Result of an autodetect/get-info operation",
      "properties": {
        "Author": {
          "description": "User name of the creator/author of the document, if available, null if not available",
          "type": "string"
        },
        "Creator": {
          "description": "Creator of the document",
          "type": "string"
        },
        "DateCreated": {
          "description": "The timestamp that the document was created, if available, null if not available",
          "format": "date-time",
          "type": "string"
        },
        "DateModified": {
          "description": "The timestamp that the document was last modified, if available, null if not available",
          "format": "date-time",
          "type": "string"
        },
        "Keywords": {
          "description": "Keywords of the document",
          "type": "string"
        },
        "Subject": {
          "description": "Subject of the document",
          "type": "string"
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "Title": {
          "description": "Title of the document",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PdfPageText": {
      "description": "Text of a single page of a PDF",
      "properties": {
        "PageNumber": {
          "description": "Page number of the page (1-based)",
          "format": "int32",
          "type": "integer"
        },
        "PageText": {
          "description": "Text of the page",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PdfTextByPageResult": {
      "description": "Text of the PDF, broken down by page",
      "properties": {
        "Pages": {
          "description": "Pages in the PDF",
          "items": {
            "$ref": "#/definitions/PdfPageText"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PdfToPngResult": {
      "description": "Result of converting a PDF to a PNG array",
      "properties": {
        "PngResultPages": {
          "description": "Array of converted pages",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RemoveDocxHeadersAndFootersRequest": {
      "description": "Input to a Remove Headers and Footers request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "RemoveFooters": {
          "description": "True if you would like to remove all footers from the input document, false otherwise",
          "type": "boolean"
        },
        "RemoveHeaders": {
          "description": "True if you would like to remove all headers from the input document, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RemoveDocxHeadersAndFootersResponse": {
      "description": "Result of running a Remove Headers and Footers command",
      "properties": {
        "EditedDocumentURL": {
          "description": "URL of the resulting edited document; this is a secure URL and cannot be downloaded without adding the Apikey header; it is also temporary, stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RemoveDocxPagesRequest": {
      "description": "Input to a Remove Word DOCX Document Pages request",
      "properties": {
        "EndDeletePageNumber": {
          "description": "Page number (1-based) to stop deleting pages; inclusive",
          "format": "int32",
          "type": "integer"
        },
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "StartDeletePageNumber": {
          "description": "Page number (1-based) to start deleting pages; inclusive",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReplaceStringRequest": {
      "description": "Input to a string replacement request",
      "properties": {
        "InputFileBytes": {
          "description": "Optional: Bytes of the input file to operate on",
          "format": "byte",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "MatchCase": {
          "description": "True if the case should be matched, false for case insensitive match",
          "type": "boolean"
        },
        "MatchString": {
          "description": "String to search for and match against, to be replaced",
          "type": "string"
        },
        "ReplaceString": {
          "description": "String to replace the matched values with",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ScreenshotRequest": {
      "description": "Details of the screenshot request",
      "properties": {
        "ExtraLoadingWait": {
          "description": "Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites.  Provide a value of 0 for the default of 5000 milliseconds (5 seconds)",
          "format": "int32",
          "type": "integer"
        },
        "ScreenshotHeight": {
          "description": "Optional: Height of the screenshot in pixels; supply 0 to default to 1280 x 1024, supply -1 to measure the full screen height of the page and attempt to take a screen-height screenshot",
          "format": "int32",
          "type": "integer"
        },
        "ScreenshotWidth": {
          "description": "Optional: Width of the screenshot in pixels; supply 0 to default to 1280 x 1024, supply -1 to measure the full screen height of the page and attempt to take a screen-height screenshot",
          "format": "int32",
          "type": "integer"
        },
        "Url": {
          "description": "URL address of the website to screenshot.  HTTP and HTTPS are both supported, as are custom ports.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SetFormFieldValue": {
      "description": "Individual field value to set in a PDF form",
      "properties": {
        "CheckboxValue": {
          "description": "For fields of type Checkbox, the value to put into the field",
          "type": "boolean"
        },
        "ComboBoxSelectedIndex": {
          "description": "For fields of type ComboBox; specifies the selected index of the combo box selection",
          "format": "int32",
          "type": "integer"
        },
        "FieldName": {
          "description": "Name of the field to set; you can call /convert/edit/pdf/form/get-fields to enumerate field names in a form",
          "type": "string"
        },
        "TextValue": {
          "description": "For fields of type Text, the text value to put into the field",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SetPdfFormFieldsRequest": {
      "description": "Request to set the fields in a PDF form",
      "properties": {
        "FieldValues": {
          "description": "Field values to set",
          "items": {
            "$ref": "#/definitions/SetFormFieldValue"
          },
          "type": "array"
        },
        "InputFileBytes": {
          "description": "Contents of the input file to set the fields on",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SetPdfMetadataRequest": {
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "type": "string"
        },
        "MetadataToSet": {
          "$ref": "#/definitions/PdfMetadata"
        }
      },
      "type": "object"
    },
    "SplitPdfResult": {
      "description": "Result of performing a PDF file split operation",
      "properties": {
        "Documents": {
          "description": "PDF documents as output",
          "items": {
            "$ref": "#/definitions/PdfDocument"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SplitXlsxWorksheetResult": {
      "description": "The result of splitting a spreadsheet into individual Excel XLSX worksheets",
      "properties": {
        "ResultWorksheets": {
          "items": {
            "$ref": "#/definitions/WorksheetResult"
          },
          "type": "array"
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TextConversionResult": {
      "description": "Text conversion result from converting a document to Plain Text (TXT) format",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "TextResult": {
          "description": "Plain Text (TXT) format conversion result of the input document.  The text result is returned as a string.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewerResponse": {
      "description": "Result of creating a viewer",
      "properties": {
        "HtmlEmbed": {
          "type": "string"
        },
        "Successful": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "WorksheetResult": {
      "description": "A single Excel XLSX file corresponding to one worksheet (tab) in the original spreadsheet",
      "properties": {
        "URL": {
          "description": "URL to the XLSX file of this worksheet; file is stored in an in-memory cache and will be deleted",
          "type": "string"
        },
        "WorksheetName": {
          "description": "The name of the worksheet",
          "type": "string"
        },
        "WorksheetNumber": {
          "description": "Worksheet number of the converted page, starting with 1 for the left-most worksheet",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "XlsxImage": {
      "properties": {
        "ImageContentsURL": {
          "description": "URL to the image contents; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the contents.",
          "type": "string"
        },
        "ImageDataContentType": {
          "description": "Read-only; image data MIME content-type",
          "type": "string"
        },
        "ImageDataEmbedId": {
          "description": "Read-only; internal ID for the image contents",
          "type": "string"
        },
        "ImageInternalFileName": {
          "description": "Read-only; internal file name/path for the image",
          "type": "string"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        }
      },
      "type": "object"
    },
    "XlsxSpreadsheetCell": {
      "description": "Cell in an Excel Spreadsheet worksheet",
      "properties": {
        "CellIdentifier": {
          "description": "Cell reference of the cell, e.g. A1, Z22, etc.",
          "type": "string"
        },
        "Formula": {
          "type": "string"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        },
        "StyleIndex": {
          "description": "Identifier for the style to apply to this style",
          "format": "int32",
          "type": "integer"
        },
        "TextValue": {
          "description": "Text value of the cell",
          "type": "string"
        }
      },
      "type": "object"
    },
    "XlsxSpreadsheetColumn": {
      "description": "Column in an Excel spreadsheet worksheet",
      "properties": {
        "HeadingCell": {
          "$ref": "#/definitions/XlsxSpreadsheetCell",
          "description": "Heading cell for this column"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        }
      },
      "type": "object"
    },
    "XlsxSpreadsheetRow": {
      "description": "Row in an Excel spreadsheet worksheet",
      "properties": {
        "Cells": {
          "description": "Spreadsheet Cells in the spreadsheet row",
          "items": {
            "$ref": "#/definitions/XlsxSpreadsheetCell"
          },
          "type": "array"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        }
      },
      "type": "object"
    },
    "XlsxWorksheet": {
      "description": "A worksheet (tab) in an Excel (XLSX) spreadsheet",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new worksheets",
          "type": "string"
        },
        "WorksheetName": {
          "description": "User-facing name of the worksheet tab",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "host": "api.cloudmersive.com",
  "info": {
    "description": "Convert API lets you effortlessly convert file formats and types.",
    "title": "Cloudmersive Document Conversion",
    "version": "v1",
    "x-ms-api-annotation": {
      "status": "Preview"
    }

  },
  "paths": {
    "/convert/autodetect/get-info": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Auto-detects a document's type information; does not require file extension.  Analyzes file contents to confirm file type.  Even if no file extension is present, the auto-detect system will reliably analyze the contents of the file and identify its file type.  Supports over 100 image file formats, Office document file formats, PDF, and more.",
        "operationId": "ConvertDocument_AutodetectGetInfo",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AutodetectGetInfoResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get document type information",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/autodetect/to/pdf": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Automatically detect file type and convert it to PDF.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT), over 100 image formats, HTML files, and even multi-page TIFF files.",
        "operationId": "ConvertDocument_AutodetectToPdf",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Document to PDF",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/autodetect/to/png": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Automatically detect file type and convert it to an array of PNG images.  Supports all of the major Office document file formats, over 100 image formats, and even multi-page TIFF files.",
        "operationId": "ConvertDocument_AutodetectToPngArray",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AutodetectToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Document to PNG array",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/autodetect/to/txt": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Automatically detect file type and convert it to Text.  Supports all of the major Office document file formats including Word (DOCX, DOC), Excel (XLSX, XLS), PowerPoint (PPTX, PPT) and PDF files.",
        "operationId": "ConvertDocument_AutodetectToTxt",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextConversionResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Document to Text",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/compare/docx": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Compare two Office Word Documents (docx) files and highlight the differences",
        "operationId": "CompareDocument_Docx",
        "parameters": [
          {
            "description": "First input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile1",
            "required": true,
            "type": "file",
            "x-ms-summary": "First input file to perform the operation on."
          },
          {
            "description": "Second input file to perform the operation on (more than 2 can be supplied).",
            "in": "formData",
            "name": "inputFile2",
            "required": true,
            "type": "file",
            "x-ms-summary": "Second input file to perform the operation on (more than 2 can be supplied)."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Compare Two Word DOCX",
        "tags": [
          "CompareDocument"
        ]
      }
    },
    "/convert/csv/to/json": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert a CSV file to a JSON object array",
        "operationId": "ConvertData_CsvToJson",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert CSV to JSON conversion",
        "tags": [
          "ConvertData"
        ]
      }
    },
    "/convert/csv/to/xlsx": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert CSV file to Office Excel XLSX Workbooks file format.",
        "operationId": "ConvertDocument_CsvToXlsx",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert CSV to Excel XLSX Spreadsheet",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/doc/to/docx": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert/upgrade Office Word (97-2003 Format) Documents (doc) to the modern DOCX format",
        "operationId": "ConvertDocument_DocToDocx",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Word DOC (97-03) Document to DOCX",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/doc/to/pdf": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert Office Word (97-2003 Format) Documents (doc) to standard PDF",
        "operationId": "ConvertDocument_DocToPdf",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Word DOC (97-03) Document to PDF",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/docx/to/pdf": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert Office Word Documents (docx) to standard PDF",
        "operationId": "ConvertDocument_DocxToPdf",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Word DOCX Document to PDF",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/docx/to/txt": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert Office Word Documents (docx) to text",
        "operationId": "ConvertDocument_DocxToTxt",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextConversionResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Word DOCX Document to Text",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/edit/begin-editing": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Uploads a document to Cloudmersive to begin a series of one or more editing operations",
        "operationId": "EditDocument_BeginEditing",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Begin editing a document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/delete-pages": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns the pages and contents of each page defined in the Word Document (DOCX) format file",
        "operationId": "EditDocument_DocxDeletePages",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveDocxPagesRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Delete, remove pages from a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/get-body": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document",
        "operationId": "EditDocument_DocxBody",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxBodyRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxBodyResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get body from a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/get-headers-and-footers": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns the footer content from a Word Document (DOCX) format file",
        "operationId": "EditDocument_DocxGetHeadersAndFooters",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxHeadersAndFootersRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxHeadersAndFootersResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get content of a footer from a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/get-images": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns the images defined in the Word Document (DOCX) format file",
        "operationId": "EditDocument_DocxGetImages",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxImagesRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxImagesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get images from a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/get-pages": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns the pages and contents of each page defined in the Word Document (DOCX) format file",
        "operationId": "EditDocument_DocxPages",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxPagesRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxPagesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get pages and content from a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/get-sections": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns the sections defined in the Word Document (DOCX) format file",
        "operationId": "EditDocument_DocxGetSections",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxSectionsRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxSectionsResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get sections from a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/get-styles": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns the styles defined in the Word Document (DOCX) format file",
        "operationId": "EditDocument_DocxGetStyles",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxStylesRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxStylesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get styles from a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/get-tables": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns all the table objects in an Office Word Document (docx)",
        "operationId": "EditDocument_DocxGetTables",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocxTablesRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDocxTablesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get tables in Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/insert-image": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxInsertImage",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocxInsertImageRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocxInsertImageResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Insert image into a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/insert-paragraph": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxInsertParagraph",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsertDocxInsertParagraphRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InsertDocxInsertParagraphResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Insert a new paragraph into a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/insert-table": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxInsertTable",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsertDocxTablesRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InsertDocxTablesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Insert a new table into a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/insert-table-row": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxInsertTableRow",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsertDocxTableRowRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InsertDocxTableRowResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Insert a new row into an existing table in a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/remove-headers-and-footers": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxRemoveHeadersAndFooters",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveDocxHeadersAndFootersRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RemoveDocxHeadersAndFootersResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Remove headers and footers from Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/remove-object": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxRemoveObject",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocxRemoveObjectRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocxRemoveObjectResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Delete any object in a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/replace-all": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Replace all instances of a string in an Office Word Document (docx)",
        "operationId": "EditDocument_DocxReplace",
        "parameters": [
          {
            "description": "Document string replacement configuration input",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceStringRequest"
            },
            "x-ms-summary": "Document string replacement configuration input"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Replace string in Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/set-footer": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxSetFooter",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocxSetFooterRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocxSetFooterResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Set the footer in a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/set-footer/add-page-number": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxSetFooterAddPageNumber",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocxSetFooterAddPageNumberRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocxSetFooterResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Add page number to footer in a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/docx/set-header": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.",
        "operationId": "EditDocument_DocxSetHeader",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocxSetHeaderRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocxSetHeaderResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Set the header in a Word DOCX document",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/finish-editing": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.",
        "operationId": "EditDocument_FinishEditing",
        "parameters": [
          {
            "description": "Cloudmersive Document URL to complete editing on",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinishEditingRequest"
            },
            "x-ms-summary": "Cloudmersive Document URL to complete editing on"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Download result from document editing",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/pptx/replace-all": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Replace all instances of a string in an Office PowerPoint Document (pptx)",
        "operationId": "EditDocument_PptxReplace",
        "parameters": [
          {
            "description": "Replacement document configuration input",
            "in": "body",
            "name": "reqConfig",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceStringRequest"
            },
            "x-ms-summary": "Replacement document configuration input"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Replace string in PowerPoint PPTX presentation",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/xlsx/get-columns": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns the rows and cells defined in the Excel Spreadsheet worksheet",
        "operationId": "EditDocument_XlsxGetColumns",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetXlsxColumnsRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetXlsxColumnsResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get rows and cells from a Excel XLSX spreadsheet, worksheet",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/xlsx/get-images": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns the images defined in the Excel Spreadsheet worksheet",
        "operationId": "EditDocument_XlsxGetImages",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetXlsxImagesRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetXlsxImagesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get images from a Excel XLSX spreadsheet, worksheet",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/xlsx/get-rows-and-cells": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns the rows and cells defined in the Excel Spreadsheet worksheet",
        "operationId": "EditDocument_XlsxGetRowsAndCells",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetXlsxRowsAndCellsRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetXlsxRowsAndCellsResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get rows and cells from a Word XLSX spreadsheet, worksheet",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/xlsx/get-styles": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns the style defined in the Excel Spreadsheet",
        "operationId": "EditDocument_XlsxGetStyles",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetXlsxStylesRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetXlsxStylesResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get styles from a Excel XLSX spreadsheet, worksheet",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/xlsx/get-worksheets": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file",
        "operationId": "EditDocument_XlsxGetWorksheets",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetXlsxWorksheetsRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetXlsxWorksheetsResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get worksheets from a Excel XLSX spreadsheet",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/edit/xlsx/insert-worksheet": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Inserts a new worksheet into an Excel Spreadsheet",
        "operationId": "EditDocument_XlsxInsertWorksheet",
        "parameters": [
          {
            "description": "Document input request",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsertXlsxWorksheetRequest"
            },
            "x-ms-summary": "Document input request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InsertXlsxWorksheetResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Insert a new worksheet into an Excel XLSX spreadsheet",
        "tags": [
          "EditDocument"
        ]
      }
    },
    "/convert/html/to/docx": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Convert HTML to Office Word Document (DOCX) format",
        "operationId": "ConvertWeb_HtmlToDocx",
        "parameters": [
          {
            "description": "HTL input to convert to DOCX",
            "in": "body",
            "name": "inputRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HtmlToOfficeRequest"
            },
            "x-ms-summary": "HTL input to convert to DOCX"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert HTML to Word DOCX Document",
        "tags": [
          "ConvertWeb"
        ]
      }
    },
    "/convert/html/to/pdf": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert standard HTML, with full support for CSS, JavaScript, Images, and other complex behavior to PDF.  To use external files such as images, use an absolute URL to the file.",
        "operationId": "ConvertDocument_HtmlToPdf",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert HTML to PDF Document",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/html/to/png": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert standard HTML, with full support for CSS, JavaScript, Images, and other complex behavior to an array of PNG images, one for each page.  To use external files in your HTML such as images, use an absolute URL to the file.",
        "operationId": "ConvertDocument_HtmlToPng",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PdfToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert HTML to PNG image array",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/image-multipage/{format1}/to/{format2}": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert between over 100 file formats, including support for Multiple-Page formats (e.g. PDFs, TIFFs, etc. with multiple pages).",
        "operationId": "ConvertImage_MultipageImageFormatConvert",
        "parameters": [
          {
            "description": "Input file format as a 3+ letter file extension.  You can also provide...",
            "in": "path",
            "name": "format1",
            "required": true,
            "type": "string",
            "x-ms-summary": "Input file format as a 3+ letter file extension.  You can also provide..."
          },
          {
            "description": "Output (convert to this format) file format as a 3+ letter file extens...",
            "in": "path",
            "name": "format2",
            "required": true,
            "type": "string",
            "x-ms-summary": "Output (convert to this format) file format as a 3+ letter file extens..."
          },
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MultipageImageFormatConversionResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Multi-page image format conversion",
        "tags": [
          "ConvertImage"
        ]
      }
    },
    "/convert/image/get-info": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Get details from an image such as size, format and MIME type, compression, EXIF data such as location, DPI, unique colors, transparency information, and more",
        "operationId": "ConvertImage_GetImageInfo",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetImageInfoResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get information about an image",
        "tags": [
          "ConvertImage"
        ]
      }
    },
    "/convert/image/set-dpi/{dpi}": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Resize an image to have a different DPI",
        "operationId": "ConvertImage_ImageSetDPI",
        "parameters": [
          {
            "description": "New DPI in pixels-per-inch, for example 300 DPI or 600 DPI",
            "format": "int32",
            "in": "path",
            "name": "dpi",
            "required": true,
            "type": "integer",
            "x-ms-summary": "New DPI in pixels-per-inch, for example 300 DPI or 600 DPI"
          },
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Change image DPI",
        "tags": [
          "ConvertImage"
        ]
      }
    },
    "/convert/image/{format1}/to/{format2}": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert between over 100 file formats, including key formats such as Photoshop (PSD), PNG, JPG, GIF, NEF, and BMP.",
        "operationId": "ConvertImage_ImageFormatConvert",
        "parameters": [
          {
            "description": "Input file format as a 3+ letter file extension.  You can also provide...",
            "in": "path",
            "name": "format1",
            "required": true,
            "type": "string",
            "x-ms-summary": "Input file format as a 3+ letter file extension.  You can also provide..."
          },
          {
            "description": "Output (convert to this format) file format as a 3+ letter file extens...",
            "in": "path",
            "name": "format2",
            "required": true,
            "type": "string",
            "x-ms-summary": "Output (convert to this format) file format as a 3+ letter file extens..."
          },
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Image format conversion",
        "tags": [
          "ConvertImage"
        ]
      }
    },
    "/convert/merge/docx": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Combine two Office Word Documents (docx) into one single Office Word document",
        "operationId": "MergeDocument_Docx",
        "parameters": [
          {
            "description": "First input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile1",
            "required": true,
            "type": "file",
            "x-ms-summary": "First input file to perform the operation on."
          },
          {
            "description": "Second input file to perform the operation on (more than 2 can be supplied).",
            "in": "formData",
            "name": "inputFile2",
            "required": true,
            "type": "file",
            "x-ms-summary": "Second input file to perform the operation on (more than 2 can be supplied)."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Merge Two Word DOCX Together",
        "tags": [
          "MergeDocument"
        ]
      }
    },
    "/convert/merge/docx/multi": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Combine multiple Office Word Documents (docx) into one single Office Word document",
        "operationId": "MergeDocument_DocxMulti",
        "parameters": [
          {
            "description": "First input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile1",
            "required": true,
            "type": "file",
            "x-ms-summary": "First input file to perform the operation on."
          },
          {
            "description": "Second input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile2",
            "required": true,
            "type": "file",
            "x-ms-summary": "Second input file to perform the operation on."
          },
          {
            "description": "Third input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile3",
            "required": false,
            "type": "file",
            "x-ms-summary": "Third input file to perform the operation on."
          },
          {
            "description": "Fourth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile4",
            "required": false,
            "type": "file",
            "x-ms-summary": "Fourth input file to perform the operation on."
          },
          {
            "description": "Fifth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile5",
            "required": false,
            "type": "file",
            "x-ms-summary": "Fifth input file to perform the operation on."
          },
          {
            "description": "Sixth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile6",
            "required": false,
            "type": "file",
            "x-ms-summary": "Sixth input file to perform the operation on."
          },
          {
            "description": "Seventh input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile7",
            "required": false,
            "type": "file",
            "x-ms-summary": "Seventh input file to perform the operation on."
          },
          {
            "description": "Eighth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile8",
            "required": false,
            "type": "file",
            "x-ms-summary": "Eighth input file to perform the operation on."
          },
          {
            "description": "Ninth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile9",
            "required": false,
            "type": "file",
            "x-ms-summary": "Ninth input file to perform the operation on."
          },
          {
            "description": "Tenth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile10",
            "required": false,
            "type": "file",
            "x-ms-summary": "Tenth input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Merge Multple Word DOCX Together",
        "tags": [
          "MergeDocument"
        ]
      }
    },
    "/convert/merge/pdf": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document",
        "operationId": "MergeDocument_Pdf",
        "parameters": [
          {
            "description": "First input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile1",
            "required": true,
            "type": "file",
            "x-ms-summary": "First input file to perform the operation on."
          },
          {
            "description": "Second input file to perform the operation on (more than 2 can be supplied).",
            "in": "formData",
            "name": "inputFile2",
            "required": true,
            "type": "file",
            "x-ms-summary": "Second input file to perform the operation on (more than 2 can be supplied)."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Merge Two PDF Files Together",
        "tags": [
          "MergeDocument"
        ]
      }
    },
    "/convert/merge/pdf/multi": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document",
        "operationId": "MergeDocument_PdfMulti",
        "parameters": [
          {
            "description": "First input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile1",
            "required": true,
            "type": "file",
            "x-ms-summary": "First input file to perform the operation on."
          },
          {
            "description": "Second input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile2",
            "required": true,
            "type": "file",
            "x-ms-summary": "Second input file to perform the operation on."
          },
          {
            "description": "Third input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile3",
            "required": false,
            "type": "file",
            "x-ms-summary": "Third input file to perform the operation on."
          },
          {
            "description": "Fourth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile4",
            "required": false,
            "type": "file",
            "x-ms-summary": "Fourth input file to perform the operation on."
          },
          {
            "description": "Fifth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile5",
            "required": false,
            "type": "file",
            "x-ms-summary": "Fifth input file to perform the operation on."
          },
          {
            "description": "Sixth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile6",
            "required": false,
            "type": "file",
            "x-ms-summary": "Sixth input file to perform the operation on."
          },
          {
            "description": "Seventh input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile7",
            "required": false,
            "type": "file",
            "x-ms-summary": "Seventh input file to perform the operation on."
          },
          {
            "description": "Eighth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile8",
            "required": false,
            "type": "file",
            "x-ms-summary": "Eighth input file to perform the operation on."
          },
          {
            "description": "Ninth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile9",
            "required": false,
            "type": "file",
            "x-ms-summary": "Ninth input file to perform the operation on."
          },
          {
            "description": "Tenth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile10",
            "required": false,
            "type": "file",
            "x-ms-summary": "Tenth input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Merge Multple PDF Files Together",
        "tags": [
          "MergeDocument"
        ]
      }
    },
    "/convert/merge/png/vertical": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically",
        "operationId": "MergeDocument_Png",
        "parameters": [
          {
            "description": "First input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile1",
            "required": true,
            "type": "file",
            "x-ms-summary": "First input file to perform the operation on."
          },
          {
            "description": "Second input file to perform the operation on (more than 2 can be supplied).",
            "in": "formData",
            "name": "inputFile2",
            "required": true,
            "type": "file",
            "x-ms-summary": "Second input file to perform the operation on (more than 2 can be supplied)."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Merge Multple PNG Files Together",
        "tags": [
          "MergeDocument"
        ]
      }
    },
    "/convert/merge/pptx": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation",
        "operationId": "MergeDocument_Pptx",
        "parameters": [
          {
            "description": "First input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile1",
            "required": true,
            "type": "file",
            "x-ms-summary": "First input file to perform the operation on."
          },
          {
            "description": "Second input file to perform the operation on (more than 2 can be supplied).",
            "in": "formData",
            "name": "inputFile2",
            "required": true,
            "type": "file",
            "x-ms-summary": "Second input file to perform the operation on (more than 2 can be supplied)."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Merge Two PowerPoint PPTX Together",
        "tags": [
          "MergeDocument"
        ]
      }
    },
    "/convert/merge/pptx/multi": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation",
        "operationId": "MergeDocument_PptxMulti",
        "parameters": [
          {
            "description": "First input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile1",
            "required": true,
            "type": "file",
            "x-ms-summary": "First input file to perform the operation on."
          },
          {
            "description": "Second input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile2",
            "required": true,
            "type": "file",
            "x-ms-summary": "Second input file to perform the operation on."
          },
          {
            "description": "Third input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile3",
            "required": false,
            "type": "file",
            "x-ms-summary": "Third input file to perform the operation on."
          },
          {
            "description": "Fourth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile4",
            "required": false,
            "type": "file",
            "x-ms-summary": "Fourth input file to perform the operation on."
          },
          {
            "description": "Fifth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile5",
            "required": false,
            "type": "file",
            "x-ms-summary": "Fifth input file to perform the operation on."
          },
          {
            "description": "Sixth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile6",
            "required": false,
            "type": "file",
            "x-ms-summary": "Sixth input file to perform the operation on."
          },
          {
            "description": "Seventh input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile7",
            "required": false,
            "type": "file",
            "x-ms-summary": "Seventh input file to perform the operation on."
          },
          {
            "description": "Eighth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile8",
            "required": false,
            "type": "file",
            "x-ms-summary": "Eighth input file to perform the operation on."
          },
          {
            "description": "Ninth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile9",
            "required": false,
            "type": "file",
            "x-ms-summary": "Ninth input file to perform the operation on."
          },
          {
            "description": "Tenth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile10",
            "required": false,
            "type": "file",
            "x-ms-summary": "Tenth input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Merge Multple PowerPoint PPTX Together",
        "tags": [
          "MergeDocument"
        ]
      }
    },
    "/convert/merge/xlsx": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet",
        "operationId": "MergeDocument_Xlsx",
        "parameters": [
          {
            "description": "First input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile1",
            "required": true,
            "type": "file",
            "x-ms-summary": "First input file to perform the operation on."
          },
          {
            "description": "Second input file to perform the operation on (more than 2 can be supplied).",
            "in": "formData",
            "name": "inputFile2",
            "required": true,
            "type": "file",
            "x-ms-summary": "Second input file to perform the operation on (more than 2 can be supplied)."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Merge Two Excel XLSX Together",
        "tags": [
          "MergeDocument"
        ]
      }
    },
    "/convert/merge/xlsx/multi": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet",
        "operationId": "MergeDocument_XlsxMulti",
        "parameters": [
          {
            "description": "First input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile1",
            "required": true,
            "type": "file",
            "x-ms-summary": "First input file to perform the operation on."
          },
          {
            "description": "Second input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile2",
            "required": true,
            "type": "file",
            "x-ms-summary": "Second input file to perform the operation on."
          },
          {
            "description": "Third input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile3",
            "required": false,
            "type": "file",
            "x-ms-summary": "Third input file to perform the operation on."
          },
          {
            "description": "Fourth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile4",
            "required": false,
            "type": "file",
            "x-ms-summary": "Fourth input file to perform the operation on."
          },
          {
            "description": "Fifth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile5",
            "required": false,
            "type": "file",
            "x-ms-summary": "Fifth input file to perform the operation on."
          },
          {
            "description": "Sixth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile6",
            "required": false,
            "type": "file",
            "x-ms-summary": "Sixth input file to perform the operation on."
          },
          {
            "description": "Seventh input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile7",
            "required": false,
            "type": "file",
            "x-ms-summary": "Seventh input file to perform the operation on."
          },
          {
            "description": "Eighth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile8",
            "required": false,
            "type": "file",
            "x-ms-summary": "Eighth input file to perform the operation on."
          },
          {
            "description": "Ninth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile9",
            "required": false,
            "type": "file",
            "x-ms-summary": "Ninth input file to perform the operation on."
          },
          {
            "description": "Tenth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile10",
            "required": false,
            "type": "file",
            "x-ms-summary": "Tenth input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Merge Multple Excel XLSX Together",
        "tags": [
          "MergeDocument"
        ]
      }
    },
    "/convert/pdf/to/docx": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert standard PDF to Office Word Documents (docx).    Converts a PDF at high fidelity into Word format, where it can be easily edited and processed.",
        "operationId": "ConvertDocument_PdfToDocx",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert PDF to Word DOCX Document",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/pdf/to/png": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert PDF document to PNG array, one image per page.",
        "operationId": "ConvertDocument_PdfToPngArray",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PdfToPngResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert PDF to PNG Image Array",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/pdf/to/png/merge-single": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert PDF document to a single tall PNG image, by stacking/concatenating the images vertically into a single \"tall\" image",
        "operationId": "ConvertDocument_PdfToPngSingle",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert PDF to Single PNG image",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/pdf/to/pptx": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert standard PDF to Office PowerPoint Presentation (pptx).  Converts a PDF file at high fidelity into PowerPoint format, where it can be easily edited and processed.",
        "operationId": "ConvertDocument_PdfToPptx",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert PDF to PowerPoint PPTX Presentation",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/pdf/to/txt": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "PDF document to text",
        "operationId": "ConvertDocument_PdfToTxt",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextConversionResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert PDF Document to Text",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/png/to/pdf": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert an array of PNG images, one image per page, into a newly-created PDF.  Supports images of different sizes as input.",
        "operationId": "ConvertDocument_PngArrayToPdf",
        "parameters": [
          {
            "description": "First input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile1",
            "required": true,
            "type": "file",
            "x-ms-summary": "First input file to perform the operation on."
          },
          {
            "description": "Second input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile2",
            "required": true,
            "type": "file",
            "x-ms-summary": "Second input file to perform the operation on."
          },
          {
            "description": "Third input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile3",
            "required": false,
            "type": "file",
            "x-ms-summary": "Third input file to perform the operation on."
          },
          {
            "description": "Fourth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile4",
            "required": false,
            "type": "file",
            "x-ms-summary": "Fourth input file to perform the operation on."
          },
          {
            "description": "Fifth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile5",
            "required": false,
            "type": "file",
            "x-ms-summary": "Fifth input file to perform the operation on."
          },
          {
            "description": "Sixth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile6",
            "required": false,
            "type": "file",
            "x-ms-summary": "Sixth input file to perform the operation on."
          },
          {
            "description": "Seventh input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile7",
            "required": false,
            "type": "file",
            "x-ms-summary": "Seventh input file to perform the operation on."
          },
          {
            "description": "Eighth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile8",
            "required": false,
            "type": "file",
            "x-ms-summary": "Eighth input file to perform the operation on."
          },
          {
            "description": "Ninth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile9",
            "required": false,
            "type": "file",
            "x-ms-summary": "Ninth input file to perform the operation on."
          },
          {
            "description": "Tenth input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile10",
            "required": false,
            "type": "file",
            "x-ms-summary": "Tenth input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert PNG Array to PDF",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/ppt/to/pdf": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert Office PowerPoint (97-2003) Documents (ppt) to standard PDF",
        "operationId": "ConvertDocument_PptToPdf",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert PowerPoint PPT (97-03) Presentation to PDF",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/ppt/to/pptx": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert/upgrade Office PowerPoint (97-2003) Documents (ppt) to modern PPTX",
        "operationId": "ConvertDocument_PptToPptx",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert PowerPoint PPT (97-03) Presentation to PPTX",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/pptx/to/pdf": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert Office PowerPoint Documents (pptx) to standard PDF",
        "operationId": "ConvertDocument_PptxToPdf",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert PowerPoint PPTX Presentation to PDF",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/pptx/to/txt": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert Office PowerPoint Documents (pptx) to standard Text",
        "operationId": "ConvertDocument_PptxToTxt",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextConversionResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert PowerPoint PPTX Presentation to Text",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/split/pdf": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Split an input PDF file into separate pages, comprised of one PDF file per page.",
        "operationId": "SplitDocument_PdfByPage",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          },
          {
            "description": "Set to true to directly return all of the document contents in the Doc...",
            "in": "header",
            "name": "returnDocumentContents",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "Set to true to directly return all of the document contents in the Doc..."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SplitPdfResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Split a PDF file into separate PDF files, one per page",
        "tags": [
          "SplitDocument"
        ]
      }
    },
    "/convert/split/xlsx": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Split an Excel XLSX Spreadsheet, comprised of multiple Worksheets (or Tabs) into separate Excel XLSX spreadsheet files, with each containing exactly one Worksheet.",
        "operationId": "SplitDocument_Xlsx",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SplitXlsxWorksheetResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Split a single Excel XLSX into Separate Worksheets",
        "tags": [
          "SplitDocument"
        ]
      }
    },
    "/convert/template/html/apply": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Apply operations to fill in an HTML template, generating a final HTML result",
        "operationId": "ConvertTemplate_ApplyHtmlTemplate",
        "parameters": [
          {
            "description": "Operations to apply to template",
            "in": "body",
            "name": "value",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HtmlTemplateApplicationRequest"
            },
            "x-ms-summary": "Operations to apply to template"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HtmlTemplateApplicationResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Apply HTML template",
        "tags": [
          "ConvertTemplate"
        ]
      }
    },
    "/convert/validate/autodetect": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Automatically detect the type of content, verify and validate that the content is indeed fully valid at depth, and then report the validation result.",
        "operationId": "ValidateDocument_AutodetectValidation",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AutodetectDocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Autodetect content type and validate",
        "tags": [
          "ValidateDocument"
        ]
      }
    },
    "/convert/validate/docx": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Validate a Word document (DOCX); if the document is not valid, identifies the errors in the document",
        "operationId": "ValidateDocument_DocxValidation",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Validate a Word document (DOCX)",
        "tags": [
          "ValidateDocument"
        ]
      }
    },
    "/convert/validate/executable": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Validate if an input file is a binary executable file; if the document is not valid",
        "operationId": "ValidateDocument_ExecutableValidation",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Validate if a file is executable",
        "tags": [
          "ValidateDocument"
        ]
      }
    },
    "/convert/validate/json": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Validate a JSON (JavaScript Object Notation) document file; if the document is not valid, identifies the errors in the document",
        "operationId": "ValidateDocument_JsonValidation",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Validate a JSON file",
        "tags": [
          "ValidateDocument"
        ]
      }
    },
    "/convert/validate/pdf": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Validate a PDF document; if the document is not valid, identifies the errors in the document",
        "operationId": "ValidateDocument_PdfValidation",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Validate a PDF document file",
        "tags": [
          "ValidateDocument"
        ]
      }
    },
    "/convert/validate/pptx": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Validate a PowerPoint presentation (PPTX); if the document is not valid, identifies the errors in the document",
        "operationId": "ValidateDocument_PptxValidation",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Validate a PowerPoint presentation (PPTX)",
        "tags": [
          "ValidateDocument"
        ]
      }
    },
    "/convert/validate/xlsx": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Validate a Excel document (XLSX); if the document is not valid, identifies the errors in the document",
        "operationId": "ValidateDocument_XlsxValidation",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Validate a Excel document (XLSX)",
        "tags": [
          "ValidateDocument"
        ]
      }
    },
    "/convert/validate/xml": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Validate an XML document file; if the document is not valid, identifies the errors in the document",
        "operationId": "ValidateDocument_XmlValidation",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentValidationResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Validate an XML file",
        "tags": [
          "ValidateDocument"
        ]
      }
    },
    "/convert/viewer/create/web/simple": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Creates an HTML embed code for a simple web-based viewer of a document; supports Office document types and PDF.",
        "operationId": "ViewerTools_CreateSimple",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ViewerResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Create a web-based viewer",
        "tags": [
          "ViewerTools"
        ]
      }
    },
    "/convert/web/html/to/pdf": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Fully renders a website and returns a PDF of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported.",
        "operationId": "ConvertWeb_HtmlToPdf",
        "parameters": [
          {
            "description": "HTML to PDF request parameters",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HtmlToPdfRequest"
            },
            "x-ms-summary": "HTML to PDF request parameters"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert HTML string to PDF",
        "tags": [
          "ConvertWeb"
        ]
      }
    },
    "/convert/web/html/to/png": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Fully renders a website and returns a PNG (screenshot) of the HTML.  Javascript, HTML5, CSS and other advanced features are all supported.",
        "operationId": "ConvertWeb_HtmlToPng",
        "parameters": [
          {
            "description": "HTML to PNG request parameters",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HtmlToPngRequest"
            },
            "x-ms-summary": "HTML to PNG request parameters"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert HTML string to PNG",
        "tags": [
          "ConvertWeb"
        ]
      }
    },
    "/convert/web/md/to/html": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert a markdown file (.md) to HTML",
        "operationId": "ConvertWeb_MdToHtml",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HtmlMdResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Markdown to HTML",
        "tags": [
          "ConvertWeb"
        ]
      }
    },
    "/convert/web/url/to/pdf": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Fully renders a website and returns a PDF of the full page.  Javascript, HTML5, CSS and other advanced features are all supported.",
        "operationId": "ConvertWeb_UrlToPdf",
        "parameters": [
          {
            "description": "URL to PDF request parameters",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScreenshotRequest"
            },
            "x-ms-summary": "URL to PDF request parameters"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert a URL to PDF",
        "tags": [
          "ConvertWeb"
        ]
      }
    },
    "/convert/web/url/to/screenshot": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Fully renders a website and returns a PNG screenshot of the full page image.  Javascript, HTML5, CSS and other advanced features are all supported.",
        "operationId": "ConvertWeb_UrlToScreenshot",
        "parameters": [
          {
            "description": "Screenshot request parameters",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScreenshotRequest"
            },
            "x-ms-summary": "Screenshot request parameters"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Take screenshot of URL",
        "tags": [
          "ConvertWeb"
        ]
      }
    },
    "/convert/xls/to/csv": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert/upgrade Office Excel (97-2003) Workbooks (xls) to standard CSV format.",
        "operationId": "ConvertDocument_XlsToCsv",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Excel XLS (97-03) Spreadsheet to CSV",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/xls/to/json": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert an Excel (97-2003) XLS file to a JSON object array",
        "operationId": "ConvertData_XlsToJson",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Excel (97-2003) XLS to JSON conversion",
        "tags": [
          "ConvertData"
        ]
      }
    },
    "/convert/xls/to/pdf": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert Office Excel (97-2003) Workbooks (xls) to standard PDF.  Converts all worksheets in the workbook to PDF.",
        "operationId": "ConvertDocument_XlsToPdf",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Excel XLS (97-03) Spreadsheet to PDF",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/xls/to/xlsx": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert/upgrade Office Excel (97-2003) Workbooks (xls) to modern XLSX format.",
        "operationId": "ConvertDocument_XlsToXlsx",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Excel XLS (97-03) Spreadsheet to XLSX",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/xlsx/to/csv": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert Office Excel Workbooks (XLSX) to standard Comma-Separated Values (CSV) format.  Supports both XLSX and XLSB file Excel formats.",
        "operationId": "ConvertDocument_XlsxToCsv",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          },
          {
            "description": "Optional, set the output text encoding for the result; possible values...",
            "in": "header",
            "name": "outputEncoding",
            "required": false,
            "type": "string",
            "x-ms-summary": "Optional, set the output text encoding for the result; possible values..."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Excel XLSX Spreadsheet to CSV",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/xlsx/to/json": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert an Excel XLSX file to a JSON object array",
        "operationId": "ConvertData_XlsxToJson",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Excel XLSX to JSON conversion",
        "tags": [
          "ConvertData"
        ]
      }
    },
    "/convert/xlsx/to/pdf": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert Office Excel Workbooks (XLSX) to standard PDF.  Converts all worksheets in the workbook to PDF.  Supports both XLSX and XLSB Excel file formats.",
        "operationId": "ConvertDocument_XlsxToPdf",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Output file content from the operation",
              "format": "binary",
              "title": "OutputContent",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Excel XLSX Spreadsheet to PDF",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/xlsx/to/txt": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert Office Excel Workbooks (XLSX) to standard Text.  Converts all worksheets in the workbook to Text.  Supports both XLSX and XLSB file formats.",
        "operationId": "ConvertDocument_XlsxToTxt",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextConversionResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert Excel XLSX Spreadsheet to Text",
        "tags": [
          "ConvertDocument"
        ]
      }
    },
    "/convert/xml/to/json": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Convert an XML string or file into JSON",
        "operationId": "ConvertData_XmlToJson",
        "parameters": [
          {
            "description": "Input file to perform the operation on.",
            "in": "formData",
            "name": "inputFile",
            "required": true,
            "type": "file",
            "x-ms-summary": "Input file to perform the operation on."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Convert XML to JSON conversion",
        "tags": [
          "ConvertData"
        ]
      }
    }
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "Apikey": {
      "description": "API Key Authentication",
      "in": "header",
      "name": "Apikey",
      "type": "apiKey"
    }
  },
  "swagger": "2.0"
}