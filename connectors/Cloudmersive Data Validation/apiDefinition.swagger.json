{
  "definitions": {
    "AddressGetServersResponse": {
      "description": "Result of a partial email address validation",
      "properties": {
        "Servers": {
          "description": "Email servers for this email address",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Success": {
          "description": "True if partial address validation was successufl, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "AddressVerifySyntaxOnlyResponse": {
      "description": "Syntactic validity of email address",
      "properties": {
        "ValidAddress": {
          "description": "True if the email address is syntactically valid, false if it is not",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CheckResponse": {
      "description": "Result of a validation operation",
      "properties": {
        "ValidDomain": {
          "description": "True if the domain name was valid, false if it is not",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "FirstNameValidationRequest": {
      "description": "Request to validate a first name",
      "properties": {
        "FirstName": {
          "description": "First name to process",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FirstNameValidationResponse": {
      "description": "Result of a first name validation operation",
      "properties": {
        "Successful": {
          "description": "True if the validation operation was successful, false otherwise",
          "type": "boolean"
        },
        "ValidationResult": {
          "description": "Possible values are: ValidFirstName, ValidUnknownFirstName, InvalidSpamInput, InvalidCharacters, InvalidEmpty",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FullEmailValidationResponse": {
      "description": "Full email addresss validation result",
      "properties": {
        "Domain": {
          "description": "Domain name of the email address",
          "type": "string"
        },
        "IsCatchallDomain": {
          "description": "True if the domain is a catch-all domain name, false otherwise.  Catch-all domain names, while rare, always accept inbound email to ensure they do not lose any potentially useful emails.  Catch-all domain names can occassionally be configured to first accept and store all inbound email, but then later send a bounce email back to the sender after a delayed period of time.",
          "type": "boolean"
        },
        "IsDisposable": {
          "description": "True if the email address is a disposable email address, false otherwise; these disposable providers are not typically used to receive email and so will have a low likelihood of opening mail sent there.",
          "type": "boolean"
        },
        "IsFreeEmailProvider": {
          "description": "True if the email domain name is a free provider (typically a free to sign up web email provider for consumers / personal use), false otherwise.",
          "type": "boolean"
        },
        "MailServerUsedForValidation": {
          "description": "Email server connected to for verification",
          "type": "string"
        },
        "ValidAddress": {
          "description": "True if the email address is valid overall, false otherwise",
          "type": "boolean"
        },
        "Valid_Domain": {
          "description": "True if the domain name of the email address is valid, false otherwise.  This is one component of ValidAddress, but not the only one.",
          "type": "boolean"
        },
        "Valid_SMTP": {
          "description": "True if the email address was verified by the remote server, false otherwise.  This is one component of ValidAddress, but not the only one.",
          "type": "boolean"
        },
        "Valid_Syntax": {
          "description": "True if the syntax of the email address is valid, false otherwise.  This is one component of ValidAddress, but not the only one.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "FullNameValidationRequest": {
      "description": "Request to validate a full name string",
      "properties": {
        "FullNameString": {
          "description": "Full name to process as a free-form string; supports many components such as First Name, Middle Name, Last Name, Title, Nickname, Suffix, and Display Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FullNameValidationResponse": {
      "description": "Result of a full name validation operation",
      "properties": {
        "DisplayName": {
          "description": "The full display name of the name",
          "type": "string"
        },
        "FirstName": {
          "description": "The first name (given name)",
          "type": "string"
        },
        "LastName": {
          "description": "The last name (surname)",
          "type": "string"
        },
        "MiddleName": {
          "description": "The middle name(s); if there are multiple names they will be separated by spaces",
          "type": "string"
        },
        "NickName": {
          "description": "Nickname (if supplied)",
          "type": "string"
        },
        "Successful": {
          "description": "True if the validation operation was successful, false otherwise",
          "type": "boolean"
        },
        "Suffix": {
          "description": "Suffix to the name, e.g. \"Jr.\" or \"Sr.\"",
          "type": "string"
        },
        "Title": {
          "description": "The person's title (if supplied), e.g. \"Mr.\" or \"Ms.\"",
          "type": "string"
        },
        "ValidationResult_FirstName": {
          "description": "Possible values are: ValidFirstName, ValidUnknownFirstName, InvalidSpamInput, InvalidCharacters, InvalidEmpty",
          "type": "string"
        },
        "ValidationResult_LastName": {
          "description": "Possible values are: ValidLastName, ValidUnknownLastName, InvalidSpamInput, InvalidCharacters, InvalidEmpty",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GeolocateResponse": {
      "description": "Geolocation result",
      "properties": {
        "City": {
          "description": "City of IP address",
          "type": "string"
        },
        "CountryCode": {
          "description": "Two-letter country code of IP address",
          "type": "string"
        },
        "CountryName": {
          "description": "Country name of IP address",
          "type": "string"
        },
        "Latitude": {
          "description": "Latitude of IP address",
          "format": "double",
          "type": "number"
        },
        "Longitude": {
          "description": "Longitude of IP address",
          "format": "double",
          "type": "number"
        },
        "RegionCode": {
          "description": "State/region code of IP address",
          "type": "string"
        },
        "RegionName": {
          "description": "State/region of IP address",
          "type": "string"
        },
        "TimezoneStandardName": {
          "description": "Timezone of IP address",
          "type": "string"
        },
        "ZipCode": {
          "description": "Zip or postal code of IP address",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetGenderRequest": {
      "description": "Request to get the gender from a first name",
      "properties": {
        "CountryCode": {
          "description": "Optional; the country for this name, possible values are \"US\", \"LY\", \"NI\", \"TT\", \"MK\", \"KZ\", \"BO\", \"UG\", \"TZ\", \"CL\", \"SI\", \"MA\", \"RW\", \"VN\", \"AW\", \"CY\", \"BH\", \"SG\", \"ZA\", \"MU\", \"BR\", \"TN\", \"KH\", \"US\", \"TH\", \"TW\", \"UY\", \"DO\", \"CO\", \"UA\", \"QA\", \"BY\", \"SN\", \"SD\", \"FJ\", \"LB\", \"BE\", \"ML\", \"LV\", \"FR\", \"TM\", \"NG\", \"EC\", \"NO\", \"SL\", \"CR\", \"PA\", \"GE\", \"CH\", \"KR\", \"RS\", \"ZM\", \"FI\", \"BF\", \"MC\", \"AU\", \"GA\", \"LS\", \"RU\", \"IN\", \"SE\", \"LK\", \"BZ\", \"MX\", \"GH\", \"AF\", \"TJ\", \"BN\", \"DZ\", \"CM\", \"GR\", \"MD\", \"HN\", \"AT\", \"NZ\", \"SV\", \"GW\", \"NA\", \"AR\", \"MZ\", \"PK\", \"MN\", \"IQ\", \"BW\", \"VE\", \"PT\", \"BS\", \"AL\", \"TG\", \"ID\", \"ET\", \"CF\", \"JP\", \"BB\", \"PH\", \"CU\", \"BD\", \"AO\", \"SM\", \"LC\", \"ME\", \"RO\",  DANIL\"O\"\", \"ES\", \"EE\", \"IL\", \"ZW\", \"SY\", \"MW\", \"LU\", \"IR\", \"SC\", \"NL\", \"JO\", \"AM\", \"DE\", \"GL\", \"OM\", \"DK\", \"HR\", \"LI\", \"TD\", \"KM\", \"BA\", \"GM\", \"GD\", \"CA\", \"CZ\", \"MR\", \"ST\", \"IS\", \"LR\", \"IE\", \"VC\", \"AE\", \"KG\", \"DJ\", \"TR\", \"KE\", \"NE\", \"UZ\", \"CN\", \"GQ\", \"SK\", \"BJ\", \"MG\", \"BT\", \"EG\", \"PL\", \"IT\", \"SA\", \"MY\", \"CI\", \"AG\", \"AD\", \"KS\", \"HU\", \"CG\", \"KP\", \"DM\", \"GN\", \"GT\", \"NP\", \"JM\", \"LA\", \"GB\", \"BG\", \"HT\", \"PE\", \"AZ\", \"LT\", \"SZ\", \"PY\", \"MT\", \"VA\"",
          "type": "string"
        },
        "FirstName": {
          "description": "Input first name (given name) to get the gender of",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetGenderResponse": {
      "description": "Result of the GetGender operation",
      "properties": {
        "Gender": {
          "description": "Gender for this name; possible values are Male, Female, and Neutral (can be applied to Male or Female)",
          "type": "string"
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LastNameValidationRequest": {
      "description": "Request to validate a last name",
      "properties": {
        "LastName": {
          "description": "Last name to process",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LastNameValidationResponse": {
      "description": "Result of a last name validation operation",
      "properties": {
        "Successful": {
          "description": "True if the validation operation was successful, false otherwise",
          "type": "boolean"
        },
        "ValidationResult": {
          "description": "Possible values are: ValidLastName, ValidUnknownLastName, InvalidSpamInput, InvalidCharacters, InvalidEmpty",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ParseAddressRequest": {
      "description": "Request to parse an address formatted as a string/free text into a structured address",
      "properties": {
        "AddressString": {
          "description": "A mailing address or street address formatted as a single text string; this will be parsed into its components",
          "type": "string"
        },
        "CapitalizationMode": {
          "description": "Optional; indicates how the parsed output should be capitalized; default is Title Case; possible values are: \"Uppercase\" will set the capitalization to UPPER CASE; \"Lowercase\" will set the capitalization to lower case; \"Titlecase\" will set the capitalization to Title Case; and \"Originalcase\" will preserve the original casing as much as possible",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ParseAddressResponse": {
      "description": "Result of parsing an address into its component parts",
      "properties": {
        "Building": {
          "description": "The name of the building, house or structure if applicable, such as \"Cloudmersive Building 2\".  This will often by null.",
          "type": "string"
        },
        "City": {
          "description": "The city of the address.",
          "type": "string"
        },
        "Country": {
          "description": "Country of the address, if present in the address.  If not included in the address it will be null.",
          "type": "string"
        },
        "PostalCode": {
          "description": "The postal code or zip code of the address.",
          "type": "string"
        },
        "StateOrProvince": {
          "description": "The state or province of the address.",
          "type": "string"
        },
        "Street": {
          "description": "The name of the street or road of the address.  For example, in the address \"1600 Pennsylvania Avenue NW\" the street number would be \"Pennsylvania Avenue NW\".",
          "type": "string"
        },
        "StreetNumber": {
          "description": "The street number or house number of the address.  For example, in the address \"1600 Pennsylvania Avenue NW\" the street number would be \"1600\".  This value will typically be populated for most addresses.",
          "type": "string"
        },
        "Successful": {
          "description": "True if the parsing operation was successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PhoneNumberValidateRequest": {
      "description": "Request to validate a phone number",
      "properties": {
        "DefaultCountryCode": {
          "description": "Optional, default country code.  If left blank, will default to \"US\".",
          "type": "string"
        },
        "PhoneNumber": {
          "description": "Raw phone number string to parse as input for validation",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PhoneNumberValidationResponse": {
      "description": "Result from validating a phone number",
      "properties": {
        "CountryCode": {
          "description": "Two digit country code of the phone number",
          "type": "string"
        },
        "CountryName": {
          "description": "User-friendly long name of the country for the phone number",
          "type": "string"
        },
        "E164Format": {
          "description": "E.164 format of the phone number",
          "type": "string"
        },
        "InternationalFormat": {
          "description": "Internaltional format of the phone number",
          "type": "string"
        },
        "IsValid": {
          "description": "True if the phone number is valid, false otherwise",
          "type": "boolean"
        },
        "NationalFormat": {
          "description": "National format of the phone number",
          "type": "string"
        },
        "PhoneNumberType": {
          "description": "Type of phone number; possible values are: FixedLine, Mobile, FixedLineOrMobile, TollFree, PremiumRate, \r\nSharedCost, Voip, PersonalNumber, Pager, Uan, Voicemail, Unknown",
          "type": "string"
        },
        "Successful": {
          "description": "True if the operation was successful, false if there was an error during validation.  See IsValid for validation result.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UserAgentValidateRequest": {
      "description": "User-Agent parse and validation request",
      "properties": {
        "UserAgentString": {
          "description": "The user agent string you wish to parse and validate",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserAgentValidateResponse": {
      "description": "The result of a User-Agent validation request",
      "properties": {
        "BotName": {
          "description": "Optional; name of the robot if the request was from a known robot, otherwise null",
          "type": "string"
        },
        "BotURL": {
          "description": "Optional; if available, the URL to the robot",
          "type": "string"
        },
        "BrowserEngineName": {
          "description": "Name of the Browser Engine",
          "type": "string"
        },
        "BrowserEngineVersion": {
          "description": "Version of the Browser Engine",
          "type": "string"
        },
        "BrowserName": {
          "description": "Name of the Browser",
          "type": "string"
        },
        "BrowserVersion": {
          "description": "Version of the Browser",
          "type": "string"
        },
        "DeviceBrandName": {
          "description": "Brand name of the User-Agent",
          "type": "string"
        },
        "DeviceModel": {
          "description": "Model name or number of the User-Agent",
          "type": "string"
        },
        "DeviceType": {
          "description": "Device type of the User-Agent; possible values are \"DESKTOP\", \"SMARTPHONE\", \"TABLET\"",
          "type": "string"
        },
        "IsBot": {
          "description": "True if the request is a known robot, false otherwise",
          "type": "boolean"
        },
        "OperatingSystem": {
          "description": "Operating System of the User-Agent (e.g. Windows)",
          "type": "string"
        },
        "OperatingSystemCPUPlatform": {
          "description": "The CPU platform of the User-Agent (e.g. x64)",
          "type": "string"
        },
        "OperatingSystemVersion": {
          "description": "The version of the operating system of the User-Agent (e.g. \"10\" for Windows 10)",
          "type": "string"
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ValidateIdentifierRequest": {
      "description": "Identifier validation request, including the input identifier as well as various identifier rules",
      "properties": {
        "AllowHyphens": {
          "description": "True if hyphens are allowd in the identifier, false otherwise",
          "type": "boolean"
        },
        "AllowNumbers": {
          "description": "True if numbers are allowed in the identifier, false otherwise",
          "type": "boolean"
        },
        "AllowPeriods": {
          "description": "True if periods are allowed in the identifier, false otherwise",
          "type": "boolean"
        },
        "AllowUnderscore": {
          "description": "True if underscores are allowed in the identifier, false otherwise",
          "type": "boolean"
        },
        "AllowWhitespace": {
          "description": "True if whitespace is allowed in the identifier, false otherwise",
          "type": "boolean"
        },
        "Input": {
          "description": "Text string identifier input",
          "type": "string"
        },
        "MaxLength": {
          "description": "Optional; maximum length, if any, of the identifier",
          "format": "int32",
          "type": "integer"
        },
        "MinLength": {
          "description": "Optional; minimum length, if any, of the identifier",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ValidateIdentifierResponse": {
      "description": "Result of performing an identifier validation operation",
      "properties": {
        "Error": {
          "description": "Resulting error from the identifier validation; possible errors are: \"InputIsEmpty\", \"ContainsWhitespace\", \"ContainsNumbers\", \"ContainsHyphen\", \"ContainsUnderscore\", \"ContainsPeriod\", \"TooShort\", \"TooLong\", \"ContainsSpecialCharacters\"",
          "type": "string"
        },
        "ValidIdentifier": {
          "description": "True if the input identifier is valid, false otherwise",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ValidateUrlRequestFull": {
      "description": "Request to determine if a URL is valid",
      "properties": {
        "URL": {
          "description": "URL to validate",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ValidateUrlRequestSyntaxOnly": {
      "description": "Request to determine if a URL is valid",
      "properties": {
        "URL": {
          "description": "URL to validate",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ValidateUrlResponseFull": {
      "description": "Result of validating a URL with full validation",
      "properties": {
        "ValidURL": {
          "description": "True if the URL has valid syntax, a valid domain, a valid endpoint, and passes virus scan checks; false otherwise",
          "type": "boolean"
        },
        "Valid_Domain": {
          "description": "True if the domain name is valid and exists, false otherwise",
          "type": "boolean"
        },
        "Valid_Endpoint": {
          "description": "True if the endpoint is up and responsive and passes a virus scan check, false otherwise",
          "type": "boolean"
        },
        "Valid_Syntax": {
          "description": "True if the URL has valid syntax, false otherwise",
          "type": "boolean"
        },
        "WellFormedURL": {
          "description": "Well-formed version of the URL",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ValidateUrlResponseSyntaxOnly": {
      "description": "Result of validating a URL with syntax only",
      "properties": {
        "ValidURL": {
          "description": "True if the URL is valid, false otherwise",
          "type": "boolean"
        },
        "WellFormedURL": {
          "description": "Well-formed version of the URL",
          "type": "string"
        }
      },
      "type": "object"
    },
    "VatLookupRequest": {
      "description": "Input to a VAT lookup request",
      "properties": {
        "VatCode": {
          "description": "VAT code to lookup; example \"CZ25123891\"",
          "type": "string"
        }
      },
      "type": "object"
    },
    "VatLookupResponse": {
      "properties": {
        "BusinessAddress": {
          "description": "Business address",
          "type": "string"
        },
        "BusinessName": {
          "description": "Name of the business",
          "type": "string"
        },
        "CountryCode": {
          "description": "Two-letter country code",
          "type": "string"
        },
        "IsValid": {
          "description": "True if the VAT code is valid, false otherwise",
          "type": "boolean"
        },
        "VatNumber": {
          "description": "VAT number",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WhoisResponse": {
      "description": "Result of a WHOIS operation",
      "properties": {
        "CreatedDt": {
          "description": "Creation date for the record",
          "format": "date-time",
          "type": "string"
        },
        "RawTextRecord": {
          "description": "WHOIS raw text record",
          "type": "string"
        },
        "ValidDomain": {
          "description": "True if the domain is valid, false if it is not",
          "type": "boolean"
        },
        "WhoisServer": {
          "description": "Server used to lookup WHOIS information (may change based on lookup).",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "host": "api.cloudmersive.com",
  "info": {
    "description": "The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.",
    "title": "Cloudmersive Data Validation",
    "version": "v1",
    "x-ms-api-annotation": {
      "status": "Preview"
    }
  },
  "paths": {
    "/validate/address/parse": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Uses machine learning and Natural Language Processing (NLP) to handle a wide array of cases, including non-standard and unstructured address strings across a wide array of countries and address formatting norms.",
        "operationId": "Address_ParseString",
        "parameters": [
          {
            "description": "Input parse request",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ParseAddressRequest"
            },
            "x-ms-summary": "Input parse request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ParseAddressResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Parse an unstructured input text string into an international, formatted address",
        "tags": [
          "Address"
        ]
      }
    },
    "/validate/domain/check": {
      "post": {
        "consumes": [
          "text/xml",
          "text/plain",
          "text/javascript",
          "application/json",
          "text/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.",
        "operationId": "Domain_Check",
        "parameters": [
          {
            "description": "Domain name to check, for example \"cloudmersive.com\".  The input is a ...",
            "in": "body",
            "name": "domain",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "Domain name to check, for example \"cloudmersive.com\".  The input is a ..."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CheckResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Validate a domain name",
        "tags": [
          "Domain"
        ]
      }
    },
    "/validate/domain/url/full": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Validate whether a URL is syntactically valid (does not check endpoint for validity), whether it exists, and whether the endpoint is up and passes virus scan checks.  Accepts various types of input and produces a well-formed URL as output.",
        "operationId": "Domain_UrlFull",
        "parameters": [
          {
            "description": "Input URL request",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidateUrlRequestFull"
            },
            "x-ms-summary": "Input URL request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidateUrlResponseFull"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Validate a URL fully",
        "tags": [
          "Domain"
        ]
      }
    },
    "/validate/domain/url/syntax-only": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Validate whether a URL is syntactically valid (does not check endpoint for validity).  Accepts various types of input and produces a well-formed URL as output.",
        "operationId": "Domain_UrlSyntaxOnly",
        "parameters": [
          {
            "description": "Input URL information",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidateUrlRequestSyntaxOnly"
            },
            "x-ms-summary": "Input URL information"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidateUrlResponseSyntaxOnly"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Validate a URL syntactically",
        "tags": [
          "Domain"
        ]
      }
    },
    "/validate/domain/whois": {
      "post": {
        "consumes": [
          "text/xml",
          "text/plain",
          "text/javascript",
          "application/json",
          "text/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain's owners.",
        "operationId": "Domain_Post",
        "parameters": [
          {
            "description": "Domain name to check, for example \"cloudmersive.com\".   The input is a...",
            "in": "body",
            "name": "domain",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "Domain name to check, for example \"cloudmersive.com\".   The input is a..."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WhoisResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get WHOIS information for a domain",
        "tags": [
          "Domain"
        ]
      }
    },
    "/validate/email/address/full": {
      "post": {
        "consumes": [
          "text/xml",
          "text/plain",
          "text/javascript",
          "application/json",
          "text/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Performs a full validation of the email address.  Checks for syntactic correctness, identifies the mail server in question if any, and then contacts the email server to validate the existence of the account - without sending any emails.",
        "operationId": "Email_FullValidation",
        "parameters": [
          {
            "description": "Email address to validate, e.g. \"support@cloudmersive.com\".    The inp...",
            "in": "body",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "Email address to validate, e.g. \"support@cloudmersive.com\".    The inp..."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FullEmailValidationResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Fully validate an email address",
        "tags": [
          "Email"
        ]
      }
    },
    "/validate/ip/geolocate": {
      "post": {
        "consumes": [
          "text/xml",
          "text/plain",
          "text/javascript",
          "application/json",
          "text/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Identify an IP address Country, State/Provence, City, Zip/Postal Code, etc.  Useful for security and UX applications.",
        "operationId": "IPAddress_Post",
        "parameters": [
          {
            "description": "IP address to geolocate, e.g. \"55.55.55.55\".  The input is a string so...",
            "in": "body",
            "name": "value",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "IP address to geolocate, e.g. \"55.55.55.55\".  The input is a string so..."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GeolocateResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Geolocate an IP address",
        "tags": [
          "IPAddress"
        ]
      }
    },
    "/validate/name/first": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Determines if a string is a valid first name (given name)",
        "operationId": "Name_ValidateFirstName",
        "parameters": [
          {
            "description": "Validation request information",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FirstNameValidationRequest"
            },
            "x-ms-summary": "Validation request information"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FirstNameValidationResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Validate a first name",
        "tags": [
          "Name"
        ]
      }
    },
    "/validate/name/full-name": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Parses a full name string (e.g. \"Mr. Jon van der Waal Jr.\") into its component parts (and returns these component parts), and then validates whether it is a valid name string or not",
        "operationId": "Name_ValidateFullName",
        "parameters": [
          {
            "description": "Validation request information",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FullNameValidationRequest"
            },
            "x-ms-summary": "Validation request information"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FullNameValidationResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Parse and validate a full name",
        "tags": [
          "Name"
        ]
      }
    },
    "/validate/name/get-gender": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Determines the gender of a first name (given name)",
        "operationId": "Name_GetGender",
        "parameters": [
          {
            "description": "Gender request information",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetGenderRequest"
            },
            "x-ms-summary": "Gender request information"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetGenderResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Get the gender of a first name",
        "tags": [
          "Name"
        ]
      }
    },
    "/validate/name/identifier": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Determines if the input name is a valid technical / code identifier.  Configure input rules such as whether whitespace, hyphens, underscores, etc. are allowed.  For example, a valid identifier might be \"helloWorld\" but not \"hello*World\".",
        "operationId": "Name_Identifier",
        "parameters": [
          {
            "description": "Identifier validation request information",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidateIdentifierRequest"
            },
            "x-ms-summary": "Identifier validation request information"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidateIdentifierResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Validate a code identifier",
        "tags": [
          "Name"
        ]
      }
    },
    "/validate/name/last": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Determines if a string is a valid last name (surname)",
        "operationId": "Name_ValidateLastName",
        "parameters": [
          {
            "description": "Validation request information",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LastNameValidationRequest"
            },
            "x-ms-summary": "Validation request information"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LastNameValidationResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Validate a last name",
        "tags": [
          "Name"
        ]
      }
    },
    "/validate/phonenumber/basic": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Validate a phone number by analyzing the syntax",
        "operationId": "PhoneNumber_SyntaxOnly",
        "parameters": [
          {
            "description": "Phone number to validate in a PhoneNumberValidateRequest object.  Try ...",
            "in": "body",
            "name": "value",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhoneNumberValidateRequest"
            },
            "x-ms-summary": "Phone number to validate in a PhoneNumberValidateRequest object.  Try ..."
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PhoneNumberValidationResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Validate phone number (basic)",
        "tags": [
          "PhoneNumber"
        ]
      }
    },
    "/validate/useragent/parse": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Uses a parsing system and database to parse the User-Agent into its structured component parts, such as Browser, Browser Version, Browser Engine, Operating System, and importantly, Robot identification.",
        "operationId": "UserAgent_Parse",
        "parameters": [
          {
            "description": "Input parse request",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserAgentValidateRequest"
            },
            "x-ms-summary": "Input parse request"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserAgentValidateResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Parse an HTTP User-Agent string, identify robots",
        "tags": [
          "UserAgent"
        ]
      }
    },
    "/validate/vat/lookup": {
      "post": {
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "description": "Checks if a VAT code is valid, and if it is, returns more information about it",
        "operationId": "Vat_VatLookup",
        "parameters": [
          {
            "description": "Input VAT code",
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VatLookupRequest"
            },
            "x-ms-summary": "Input VAT code"
          }
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VatLookupResponse"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ],
        "summary": "Lookup a VAT code",
        "tags": [
          "Vat"
        ]
      }
    }
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "Apikey": {
      "description": "API Key Authentication",
      "in": "header",
      "name": "Apikey",
      "type": "apiKey"
    }
  },
  "swagger": "2.0"
}