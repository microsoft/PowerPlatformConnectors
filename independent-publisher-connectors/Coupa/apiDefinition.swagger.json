{
  "swagger": "2.0",
  "info": {
    "title": "Coupa",
    "description": "Provides robust access to read, edit, or integrate your data with the Coupa platform.",
    "version": "1.0",
    "contact": {
      "name": "NovaGL",
      "url": "https://www.coupa.com",
      "email": "gl1@live.om"
    }
  },
  "host": "instance.coupahost.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.coupa.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.coupa.com/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Commerce"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/order_pads": {
      "get": {
        "description": "Query Order Lists",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "x-ms-summary": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "x-ms-summary": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "order_by",
            "x-ms-summary": "order_by",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "limited",
              "shallow",
              "none"
            ],
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OrderPad objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderPad"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Order Lists - Query Order Lists",
        "tags": [
          "OrderPad"
        ],
        "operationId": "OrderListQuery"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create Order List",
        "parameters": [
          {
            "in": "body",
            "name": "OrderPad",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderPad"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/OrderPad"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Order Lists - Create Order List",
        "tags": [
          "OrderPad"
        ],
        "operationId": "OrderListCreate"
      }
    },
    "/api/order_pads/{id}": {
      "get": {
        "description": "Show Order List",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "x-ms-summary": "id",
            "description": "id",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "x-ms-summary": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "x-ms-summary": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "order_by",
            "x-ms-summary": "order_by",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "limited",
              "shallow",
              "none"
            ],
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OrderPad object",
            "schema": {
              "$ref": "#/definitions/OrderPad"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Order Lists - Get Order List by ID",
        "tags": [
          "OrderPad"
        ],
        "operationId": "OrderListGetId"
      }
    },
    "/api/invoices": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Invoice - Get Invoices",
        "description": "Get Invoices",
        "operationId": "InvoicesGet",
        "parameters": [
          {
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "default": "desc",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "invoice_date[lt]",
            "format": "date-time",
            "x-ms-summary": "Invoice Date Less than",
            "required": false,
            "type": "string",
            "description": "Invoice Date <"
          },
          {
            "enum": [
              "limited",
              "shallow",
              "none"
            ],
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "x-ms-summary": "limit",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "x-ms-summary": "offset",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "approved",
              "draft",
              "new",
              "on_hold",
              "pending_action",
              "pending_approval",
              "pending_receipt"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "description": "status",
            "x-ms-summary": "status",
            "type": "string"
          },
          {
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "default_invoices_filter"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "Invoice Object",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invoices"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      },
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Invoices - Create Invoice",
        "description": "Create Invoice",
        "operationId": "InvoiceCreate",
        "parameters": [
          {
            "name": "requestedbody",
            "x-ms-summary": "requestedbody",
            "in": "body",
            "description": "request body",
            "schema": {
              "$ref": "#/definitions/Invoices"
            }
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "Invoice Object",
            "schema": {
              "$ref": "#/definitions/Invoices"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      }
    },
    "/api/invoices/{id}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Invoices - Get Invoice by ID",
        "description": "Get Invoices by ID",
        "operationId": "InvoicesGetById",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "description": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "x-ms-url-encoding": "single"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "Invoice Object",
            "schema": {
              "$ref": "#/definitions/Invoices"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      },
      "delete": {
        "tags": [
          "Invoices"
        ],
        "summary": "Invoices - Delete Invoice by ID",
        "description": "Delete Invoices by ID",
        "operationId": "InvoicesDelete",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Invoice ID"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "default"
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      },
      "put": {
        "tags": [
          "Invoices"
        ],
        "summary": "Invoices - Update Invoice",
        "description": "Update Invoice",
        "operationId": "InvoicesUpdate",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Invoice ID"
          },
          {
            "name": "requestedbody",
            "x-ms-summary": "requestedbody",
            "in": "body",
            "description": "request body",
            "schema": {
              "$ref": "#/definitions/Invoices"
            }
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "Invoice Object",
            "schema": {
              "$ref": "#/definitions/Invoices"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      }
    },
    "/api/invoices/{id}/void": {
      "put": {
        "tags": [
          "Invoices"
        ],
        "summary": "Invoices - Void an Invoice",
        "description": "Void an Invoice",
        "operationId": "InvoicesVoid",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Invoice ID"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "Invoice Object",
            "schema": {
              "$ref": "#/definitions/Invoices"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      }
    },
    "/api/receiving_transactions/{id}/void": {
      "put": {
        "tags": [
          "Receipts"
        ],
        "responses": {
          "200": {
            "description": "Receipt Object",
            "schema": {
              "$ref": "#/definitions/InventoryTransaction"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Receipts - Void a receipt",
        "description": "Void Receipts by ID",
        "operationId": "ReceiptsVoid",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "description": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "x-ms-summary": "fields",
            "description": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ]
      }
    },
    "/api/receiving_transactions": {
      "post": {
        "tags": [
          "Receipts"
        ],
        "responses": {
          "200": {
            "description": "InventoryTransaction Object",
            "schema": {
              "$ref": "#/definitions/InventoryTransaction"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Receipts - Create or Partial Void a goods receipt",
        "description": "Create a new goods receipt",
        "operationId": "ReceiptCreate",
        "parameters": [
          {
            "name": "body",
            "x-ms-summary": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "quantity": {
                  "type": "integer",
                  "format": "int32",
                  "description": "quantity",
                  "x-ms-summary": "quantity"
                },
                "type": {
                  "type": "string",
                  "description": "type",
                  "x-ms-summary": "type",
                  "title": "type",
                  "enum": [
                    "ReceivingQuantityConsumption",
                    "ReceivingAmountConsumption",
                    "ReceivingQuantityDisposal",
                    "ReceivingAmountDisposal",
                    "ReceivingQuantityReturnToSupplier",
                    "ReceivingAmountReturnToSupplier",
                    "InventoryReceipt",
                    "VoidReceivingQuantityConsumption",
                    "VoidReceivingAmountConsumption",
                    "VoidReceivingQuantityDisposal",
                    "VoidReceivingAmountDisposal",
                    "VoidReceivingQuantityReturnToSupplier",
                    "VoidReceivingAmountReturnToSupplier",
                    "VoidInventoryReceipt"
                  ],
                  "default": "ReceivingQuantityConsumption"
                },
                "original-transaction-id": {
                  "type": "number",
                  "description": "Receipt transaction ID to void",
                  "x-ms-summary": "Receipt transaction ID to void",
                  "title": "original-transaction-id"
                },
                "order-line": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Order Line ID",
                      "x-ms-summary": "Coupa Interal Line ID"
                    }
                  },
                  "description": "order-line",
                  "x-ms-summary": "order-line"
                }
              }
            }
          }
        ]
      }
    },
    "/api/contracts": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "responses": {
          "200": {
            "description": "Contract Object",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contract"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "parameters": [
          {
            "name": "offset",
            "x-ms-summary": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Offset"
          },
          {
            "name": "limit",
            "x-ms-summary": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Limit"
          },
          {
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "shallow",
              "limited",
              "none"
            ]
          },
          {
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        ],
        "summary": "Contracts - Get Contracts",
        "description": "Get Contracts",
        "operationId": "ContractGet"
      },
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Contracts - Create a Contract",
        "description": "Create contract",
        "operationId": "ContractPost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Contract",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          },
          {
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "type": "string",
            "required": false,
            "enum": [
              "limited",
              "shallow",
              "none"
            ]
          },
          {
            "in": "query",
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/contracts/{id}": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/Contract"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "description": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "x-ms-summary": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Offset"
          },
          {
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "shallow",
              "limited",
              "none"
            ]
          },
          {
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        ],
        "summary": "Contracts - Get Contract by ID",
        "description": "Get Contract by ID",
        "operationId": "ContractGetId"
      }
    },
    "/api/contracts/{id}/contract_terms": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/ContractTerm"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "description": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "x-ms-summary": "body",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ContractTerm"
            }
          }
        ],
        "summary": "Contracts - Add a contract term",
        "description": "Add a contract term",
        "operationId": "ContractTermAdd"
      }
    },
    "/api/requisitions/add_to_cart": {
      "post": {
        "tags": [
          "Requisitions"
        ],
        "responses": {
          "200": {
            "description": "Requisitions Object",
            "schema": {
              "$ref": "#/definitions/RequisitionHeader"
            }
          }
        },
        "summary": "Requisitions - Add To Cart (Free Text)",
        "description": "Add a free text requistion to the cart",
        "operationId": "ReqFreeText",
        "parameters": [
          {
            "name": "body",
            "x-ms-summary": "body",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RequisitionHeader"
            }
          }
        ]
      }
    },
    "/api/purchase_orders": {
      "get": {
        "tags": [
          "Purchase Orders"
        ],
        "summary": "Purchase Orders - Get Purchase Orders",
        "description": "Get Purchase Orders",
        "operationId": "POGet",
        "parameters": [
          {
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "x-ms-summary": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "x-ms-summary": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "order_by",
            "x-ms-summary": "order_by",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "limited",
              "shallow",
              "none"
            ],
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "Basic Object",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchaseOrder"
              }
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      }
    },
    "/api/purchase_orders/{id}": {
      "get": {
        "tags": [
          "Purchase Orders"
        ],
        "summary": "Purchase Orders - Get Purchase Order by ID",
        "description": "Get Purchase Order by ID",
        "operationId": "POGetId",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "id"
          },
          {
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "po_shallow"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "x-ms-summary": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "x-ms-summary": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "order_by",
            "x-ms-summary": "order_by",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "limited",
              "shallow",
              "none"
            ],
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "PurchaseOrder Object",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      }
    },
    "/api/purchase_orders/{id}/cancel": {
      "put": {
        "description": "Purchase Orders - Cancel Purchase Order",
        "summary": "Purchase Orders - Cancel Purchase Order",
        "tags": [
          "Purchase Orders"
        ],
        "operationId": "POCancel",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "id"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "PurchaseOrder Object",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      }
    },
    "/api/purchase_orders/{id}/close": {
      "put": {
        "description": "Purchase Orders - Close Purchase Order",
        "summary": "Purchase Orders - Close Purchase Order",
        "tags": [
          "Purchase Orders"
        ],
        "operationId": "POClose",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "id"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "PurchaseOrder Object",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      }
    },
    "/api/purchase_orders/{id}/reopen": {
      "put": {
        "description": "Purchase Orders - Reopen Purchase Order",
        "summary": "Purchase Orders - Reopen Purchase Order",
        "tags": [
          "Purchase Orders"
        ],
        "operationId": "POReOpen",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "id"
          },
          {
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "reason_insight_code": {
                  "type": "string",
                  "description": "Reason Code",
                  "x-ms-summary": "Reason Code",
                  "title": "reason_insight_code",
                  "default": "API"
                },
                "reason-insight-event-comment": {
                  "type": "string",
                  "description": "Reason Comment",
                  "x-ms-summary": "Reason Comment",
                  "title": "reason-insight-event-comment",
                  "default": "PO was re-opened by API integration"
                }
              }
            }
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "PurchaseOrder Object",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      }
    },
    "/api/requisitions": {
      "get": {
        "tags": [
          "Requisitions"
        ],
        "summary": "Requisitions - Get Requisitions",
        "description": "Get Requisitions",
        "operationId": "ReqGet",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "x-ms-summary": "limit",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "x-ms-summary": "offset",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "Requisition Object",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RequisitionHeader"
              }
            }
          }
        },
        "x-ms-visibility": "important"
      }
    },
    "/api/requisitions/{id}": {
      "get": {
        "tags": [
          "Requisitions"
        ],
        "summary": "Requisitions - Get Requisition by ID",
        "description": "Get Requisition by ID",
        "operationId": "ReqGetById",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "id"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "Requisition Object",
            "schema": {
              "$ref": "#/definitions/RequisitionHeader"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      },
      "put": {
        "tags": [
          "Requisitions"
        ],
        "summary": "Requisitions - Update Requisition",
        "description": "Update Requisition",
        "operationId": "ReqUpdate",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "id"
          },
          {
            "name": "requestedbody",
            "x-ms-summary": "requestedbody",
            "in": "body",
            "description": "request body",
            "schema": {
              "$ref": "#/definitions/RequisitionHeader"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "schema": {
              "$ref": "#/definitions/RequisitionHeader"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      }
    },
    "/api/requisitions/": {
      "post": {
        "tags": [
          "Requisitions"
        ],
        "summary": "Requisitions - Create Requisition",
        "description": "Create Requisition",
        "operationId": "Req_Create",
        "parameters": [
          {
            "name": "requestedbody",
            "x-ms-summary": "requestedbody",
            "in": "body",
            "description": "request body",
            "schema": {
              "$ref": "#/definitions/RequisitionHeader"
            }
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "Requisition Object",
            "schema": {
              "$ref": "#/definitions/RequisitionHeader"
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      }
    },
    "/api/items/{id}": {
      "get": {
        "tags": [
          "Items"
        ],
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "description": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "shallow",
              "limited",
              "none"
            ]
          }
        ],
        "summary": "Items - Get Item by ID",
        "description": "Get Item by ID",
        "operationId": "ItemsGetbyId"
      }
    },
    "/api/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Items - Query Items",
        "description": "Query Items",
        "operationId": "ItemsQuery",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "x-ms-summary": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "x-ms-summary": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "order_by",
            "x-ms-summary": "order_by",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "limited",
              "shallow",
              "none"
            ],
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "Items Object",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Item"
              }
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      },
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Items - Create Item",
        "description": "Create Item",
        "operationId": "ItemsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "request body",
            "x-ms-summary": "request body",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "200",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      }
    },
    "/api/supplier_items/{id}": {
      "get": {
        "tags": [
          "Supplier Items"
        ],
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/SupplierItem"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "description": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "x-ms-summary": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Offset"
          },
          {
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "shallow",
              "limited",
              "none"
            ]
          },
          {
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        ],
        "summary": "Items - Get Supplier Item by ID",
        "description": "Get Supplier Items by ID",
        "operationId": "SupplierItemsGetById"
      }
    },
    "/api/purchase_orders/{po_id}/comments": {
      "post": {
        "tags": [
          "Comments"
        ],
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/Comments"
            }
          }
        },
        "parameters": [
          {
            "name": "po_id",
            "x-ms-summary": "po_id",
            "in": "path",
            "required": true,
            "type": "string",
            "x-ms-url-encoding": "single",
            "description": "Purchase Order ID"
          },
          {
            "name": "body",
            "x-ms-summary": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comments"
            }
          }
        ],
        "summary": "Comments - Add Purchase Order Comment",
        "description": "POST a comment on Purchase Order",
        "operationId": "CommentsPOCreate"
      }
    },
    "/api/comments/{id}/attachments/": {
      "post": {
        "tags": [
          "Attachments"
        ],
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/Attachments"
            }
          }
        },
        "summary": "Attachments - Add Attachment (URL) to a Comment",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "Comment id",
            "description": "Comment id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "x-ms-summary": "body",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Attachments"
            }
          }
        ],
        "description": "Add an Attachment (URL) to a Comment",
        "operationId": "AttachmentsComment"
      }
    },
    "/api/purchase_orders/{id}/attachments/": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "responses": {
          "200": {
            "description": "Attachments Object",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachments"
              }
            }
          }
        },
        "summary": "Attachments - Get Attachments from a Purchase Order",
        "description": "Get Attachments from a Purchase Order",
        "operationId": "AttachmentsPoGet",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "description": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "Attachments"
        ],
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/Attachments"
            }
          }
        },
        "summary": "Attachments - Add Attachment (URL) to a Purchase Order",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "description": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "x-ms-summary": "body",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Attachments"
            }
          }
        ],
        "description": "Add Attachment (URL) to a Purchase Order",
        "operationId": "AttachmentsPo"
      }
    },
    "/api/addresses/{id}": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Addresses - Get Address by ID",
        "description": "Get Address",
        "operationId": "AddressGet",
        "parameters": [
          {
            "name": "id",
            "description": "id",
            "x-ms-summary": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "Addresses"
        ],
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Addresses - Update Existing Address",
        "description": "Update Existing Address",
        "operationId": "AddressUpdate",
        "parameters": [
          {
            "name": "id",
            "x-ms-summary": "id",
            "description": "id",
            "x-ms-url-encoding": "single",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "x-ms-summary": "body",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        ]
      }
    },
    "/api/addresses": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "parameters": [
          {
            "name": "limit",
            "description": "limit",
            "x-ms-summary": "limit",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "description": "offset",
            "x-ms-summary": "offset",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "limited",
              "shallow",
              "none"
            ],
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Address Object",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Addresses - Query Addresses",
        "description": "Query Address",
        "operationId": "AddressQuery"
      },
      "post": {
        "tags": [
          "Addresses"
        ],
        "responses": {
          "200": {
            "description": "Address Object",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Addresses - Create Address",
        "description": "Create Address",
        "operationId": "Address_Create",
        "parameters": [
          {
            "name": "body",
            "x-ms-summary": "body",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        ]
      }
    },
    "/api/integrations": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Integrations - Query integrations",
        "description": "Query integrations",
        "produces": [
          "application/json"
        ],
        "operationId": "IntegrationsQuery",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "x-ms-summary": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "x-ms-summary": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "order_by",
            "x-ms-summary": "order_by",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "limited",
              "shallow",
              "none"
            ],
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Integration objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Integration"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/suppliers": {
      "get": {
        "tags": [
          "Supplier"
        ],
        "summary": "Suppliers - Query suppliers",
        "description": "Query suppliers",
        "produces": [
          "application/json"
        ],
        "operationId": "SuppliersGet",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "type": "integer",
            "required": false,
            "x-ms-summary": "limit"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "type": "integer",
            "required": false,
            "x-ms-summary": "offset"
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "order_by",
            "type": "string",
            "required": false,
            "x-ms-summary": "order_by"
          },
          {
            "in": "query",
            "name": "dir",
            "description": "dir",
            "type": "string",
            "required": false,
            "x-ms-summary": "dir",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "type": "string",
            "required": false,
            "x-ms-summary": "return_object",
            "enum": [
              "limited",
              "shallow",
              "none"
            ]
          },
          {
            "in": "query",
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Supplier objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Supplier"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/integration_runs/{id}": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Integrations - Show integration run",
        "description": "Show integration run",
        "operationId": "IntegrationRunGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "id",
            "required": true,
            "type": "integer",
            "x-ms-url-encoding": "single",
            "x-ms-summary": "id"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "type": "integer",
            "required": false,
            "x-ms-summary": "limit"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "type": "integer",
            "required": false,
            "x-ms-summary": "offset"
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "order_by",
            "type": "string",
            "required": false,
            "x-ms-summary": "order_by"
          },
          {
            "in": "query",
            "name": "dir",
            "description": "dir",
            "type": "string",
            "required": false,
            "x-ms-summary": "dir",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "type": "string",
            "required": false,
            "x-ms-summary": "return_object",
            "enum": [
              "limited",
              "shallow",
              "none"
            ]
          },
          {
            "in": "query",
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "IntegrationRun object",
            "schema": {
              "$ref": "#/definitions/IntegrationRun"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/integration_errors": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Integration - Show integration errors",
        "description": "Show integration errors",
        "produces": [
          "application/json"
        ],
        "operationId": "IntegrationErrorsQuery",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "x-ms-summary": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "x-ms-summary": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "order_by",
            "x-ms-summary": "order_by",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "limited",
              "shallow",
              "none"
            ],
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Integration Error Object",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IntegrationError"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/integration_runs": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Integrations - Show Integration Runs",
        "description": "Query Integration Runs",
        "operationId": "IntegrationRunsQuery",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "x-ms-summary": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "x-ms-summary": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "order_by",
            "x-ms-summary": "order_by",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "limited",
              "shallow",
              "none"
            ],
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [],
        "responses": {
          "200": {
            "description": "Integration Run Object",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IntegrationRun"
              }
            }
          }
        },
        "deprecated": false,
        "x-ms-visibility": "important"
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Users - Query users",
        "description": "Query users",
        "operationId": "UsersQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "login",
            "description": "login",
            "x-ms-summary": "login",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "x-ms-summary": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "x-ms-summary": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "order_by",
            "x-ms-summary": "order_by",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "limited",
              "shallow",
              "none"
            ],
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserSimple"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Not Authorised"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/lookups": {
      "get": {
        "tags": [
          "Lookup"
        ],
        "summary": "Lookup - Query lookups",
        "description": "Query lookups",
        "operationId": "LookupQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Lookup Name",
            "x-ms-summary": "Lookup Name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "x-ms-summary": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "x-ms-summary": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "order_by",
            "x-ms-summary": "order_by",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "limited",
              "shallow",
              "none"
            ],
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Lookup objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Lookup"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/lookup_values": {
      "get": {
        "tags": [
          "Lookup"
        ],
        "summary": "Lookup - Query lookup values",
        "description": "Query lookup values",
        "operationId": "LookupValuesQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "lookup[name]",
            "description": "Lookup Name",
            "x-ms-summary": "Lookup Name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "x-ms-summary": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "x-ms-summary": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "order_by",
            "description": "order_by",
            "x-ms-summary": "order_by",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "dir",
            "description": "dir",
            "x-ms-summary": "dir",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "limited",
              "shallow",
              "none"
            ],
            "in": "query",
            "name": "return_object",
            "description": "return_object",
            "x-ms-summary": "return_object",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "filter",
            "x-ms-summary": "filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "LookupValue objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LookupValue"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "definitions": {
    "RequisitionHeader": {
      "type": "object",
      "properties": {
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachments"
          }
        },
        "exported": {
          "type": "boolean",
          "description": "Indicates if transaction has been exported",
          "readOnly": true,
          "x-ms-visibility": "advanced"
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "justification": {
          "type": "string",
          "description": "Requisition Justification Comments",
          "x-ms-visibility": "advanced"
        },
        "need-by-date": {
          "type": "string",
          "description": "Item Need By Date",
          "format": "date-time",
          "x-ms-visibility": "advanced"
        },
        "req-title": {
          "type": "string",
          "description": "Optional title of the Requisition"
        },
        "requester": {
          "$ref": "#/definitions/UserSimple"
        },
        "created-by": {
          "$ref": "#/definitions/UserSimple"
        },
        "requisition-lines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequisitionLine"
          }
        },
        "ship-to-address": {
          "$ref": "#/definitions/Address"
        },
        "ship-to-attention": {
          "type": "string",
          "description": "Ship to Address Attention"
        },
        "status": {
          "type": "string",
          "description": "transaction status"
        }
      },
      "required": [
        "requisition-lines",
        "status"
      ]
    },
    "RequisitionLine": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachments"
          }
        },
        "commodity": {
          "$ref": "#/definitions/Commodity"
        },
        "contract": {
          "$ref": "#/definitions/Contract"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "description": {
          "type": "string",
          "description": "description"
        },
        "form-response": {
          "$ref": "#/definitions/FormResponse"
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "image-url": {
          "type": "string",
          "description": "Image url",
          "readOnly": true,
          "x-ms-visibility": "advanced"
        },
        "item": {
          "$ref": "#/definitions/Item"
        },
        "line-num": {
          "type": "integer",
          "description": "line_num",
          "format": "int32"
        },
        "line-owner": {
          "$ref": "#/definitions/UserSimple"
        },
        "line-type": {
          "type": "string",
          "description": "line type",
          "enum": [
            "RequisitionQuantityLine",
            "RequisitionAmountLine"
          ]
        },
        "order-line-id": {
          "type": "integer",
          "description": "order_line_id",
          "format": "int32",
          "readOnly": true,
          "x-ms-visibility": "advanced"
        },
        "status": {
          "type": "string",
          "description": "transaction status",
          "readOnly": true,
          "x-ms-visibility": "advanced"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "total": {
          "type": "number",
          "description": "total",
          "x-ms-visibility": "advanced",
          "readOnly": true
        },
        "transmission-emails": {
          "type": "string",
          "description": "Transmission emails",
          "x-ms-visibility": "advanced"
        },
        "transmission-method-override": {
          "type": "string",
          "description": "Transmission method override",
          "x-ms-visibility": "advanced",
          "enum": [
            "supplier_default",
            "email",
            "do_not_transmit"
          ]
        },
        "unit-price": {
          "type": "number",
          "description": "line item price"
        },
        "uom": {
          "$ref": "#/definitions/Uom"
        }
      },
      "required": [
        "description",
        "item"
      ]
    },
    "Invoices": {
      "type": "object",
      "properties": {
        "invoice-date": {
          "type": "string",
          "description": "invoice-date",
          "x-ms-summary": "invoice-date"
        },
        "invoice-number": {
          "type": "string",
          "description": "invoice-number",
          "x-ms-summary": "invoice-number"
        },
        "line-level-taxation": {
          "type": "boolean",
          "description": "line-level-taxation",
          "x-ms-summary": "line-level-taxation"
        },
        "total-with-taxes": {
          "type": "string",
          "description": "total-with-taxes",
          "x-ms-summary": "total-with-taxes",
          "x-ms-visibility": "advanced"
        },
        "document-type": {
          "type": "string",
          "description": "document-type",
          "x-ms-summary": "document-type",
          "default": "Invoice",
          "x-ms-visibility": "advanced"
        },
        "requested-by": {
          "type": "object",
          "x-ms-visibility": "advanced",
          "properties": {
            "login": {
              "type": "string",
              "description": "login",
              "x-ms-summary": "login"
            }
          }
        },
        "account-type": {
          "$ref": "#/definitions/AccountType"
        },
        "currency": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "code",
              "x-ms-summary": "code"
            }
          }
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "ship-to-address": {
          "type": "string",
          "description": "location-code",
          "x-ms-summary": "location-code"
        },
        "invoice-lines": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "account": {
                "$ref": "#/definitions/Account"
              },
              "accounting-total": {
                "type": "string",
                "description": "accounting-total",
                "x-ms-summary": "accounting-total",
                "x-ms-visibility": "advanced"
              },
              "description": {
                "type": "string",
                "description": "description",
                "x-ms-summary": "description"
              },
              "line-num": {
                "type": "integer",
                "format": "int32",
                "description": "line-num",
                "x-ms-summary": "line-num"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "description": "Coupa Internal Order Line ID",
                "x-ms-summary": "line-id"
              },
              "order-header-num": {
                "type": "integer",
                "format": "int32",
                "description": "order-header-num",
                "x-ms-summary": "order-header-num",
                "x-ms-visibility": "advanced"
              },
              "po-number": {
                "type": "string",
                "description": "po-number",
                "x-ms-summary": "po-number"
              },
              "order-line-num": {
                "type": "string",
                "description": "order-line-num",
                "x-ms-summary": "order-line-num"
              },
              "price": {
                "type": "string",
                "description": "price",
                "x-ms-summary": "price"
              },
              "quantity": {
                "type": "string",
                "description": "quantity",
                "x-ms-summary": "quantity"
              },
              "total": {
                "type": "string",
                "description": "total",
                "x-ms-summary": "total",
                "x-ms-visibility": "advanced"
              },
              "type": {
                "type": "string",
                "description": "type",
                "x-ms-summary": "type",
                "enum": [
                  "InvoiceQuantityLine",
                  "InvoiceAmountLine"
                ]
              },
              "contract": {
                "$ref": "#/definitions/Contract"
              },
              "currency": {
                "$ref": "#/definitions/Currency"
              },
              "uom": {
                "$ref": "#/definitions/Uom"
              }
            }
          }
        }
      }
    },
    "PurchaseOrder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id",
          "x-ms-summary": "id",
          "x-ms-url-encoding": "single"
        },
        "created-at": {
          "type": "string",
          "description": "created-at",
          "x-ms-summary": "created-at"
        },
        "status": {
          "type": "string",
          "description": "status",
          "x-ms-summary": "status"
        },
        "ship-to-attention": {
          "type": "string",
          "description": "ship-to-attention",
          "x-ms-summary": "ship-to-attention"
        },
        "ship-to-address": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32",
              "x-ms-summary": "id",
              "description": "id"
            },
            "name": {
              "type": "string",
              "x-ms-summary": "name",
              "description": "name"
            }
          },
          "description": "ship-to-address",
          "x-ms-summary": "ship-to-address"
        },
        "order-lines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLine"
          }
        }
      }
    },
    "Attachments": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "type",
          "x-ms-visibility": "advanced"
        },
        "intent": {
          "type": "string",
          "description": "intent",
          "x-ms-summary": "intent",
          "title": "Intent",
          "default": "Internal",
          "enum": [
            "Internal",
            "Supplier"
          ]
        },
        "url": {
          "type": "string",
          "description": "url",
          "x-ms-summary": "url"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name"
        },
        "location-code": {
          "type": "string",
          "description": "location-code",
          "title": "Location Code"
        },
        "street1": {
          "type": "string",
          "description": "street1"
        },
        "street2": {
          "type": "string",
          "description": "street2"
        },
        "city": {
          "type": "string",
          "description": "city"
        },
        "state": {
          "type": "string",
          "description": "state",
          "title": "State"
        },
        "postal-code": {
          "type": "string",
          "description": "postal-code",
          "title": "Postcode"
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id",
          "title": "ID"
        }
      }
    },
    "Country": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "code"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Coupa unique identifier",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "name"
        }
      }
    },
    "OrderPad": {
      "properties": {
        "add-all-items": {
          "description": "Flag indicating to add all items",
          "default": "false",
          "type": "string"
        },
        "any-supplier": {
          "description": "any_supplier",
          "type": "string",
          "default": "true"
        },
        "base-value": {
          "description": "base_value"
        },
        "base-value-currency": {
          "$ref": "#/definitions/Currency"
        },
        "id": {
          "description": "Coupa unique identifier",
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "order-pad-lines": {
          "items": {
            "$ref": "#/definitions/OrderPadLine"
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "order-pad-lines"
      ],
      "type": "object"
    },
    "OrderPadLine": {
      "type": "object",
      "required": [
        "item",
        "order-amount-method",
        "supplier-id"
      ],
      "properties": {
        "item": {
          "$ref": "#/definitions/Item"
        },
        "order-amount-method": {
          "type": "string",
          "description": "order_amount_method",
          "default": "par",
          "enum": [
            "amount",
            "par"
          ]
        },
        "supplier-id": {
          "type": "integer",
          "format": "int32",
          "description": "supplier_id"
        },
        "par-level": {
          "type": "number",
          "description": "par_level"
        },
        "amount": {
          "type": "number",
          "description": "amount"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Coupa unique identifier",
          "readOnly": true
        }
      }
    },
    "Comments": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id",
          "x-ms-summary": "id",
          "x-ms-url-encoding": "single",
          "x-ms-visibility": "internal"
        },
        "commentable-id": {
          "type": "integer",
          "format": "int32",
          "description": "commentable-id",
          "x-ms-summary": "commentable-id"
        },
        "comments": {
          "type": "string",
          "description": "comments",
          "x-ms-summary": "comments"
        }
      }
    },
    "Currency": {
      "properties": {
        "code": {
          "type": "string"
        },
        "enabled": {
          "description": "Enabled",
          "type": "string"
        },
        "id": {
          "description": "Coupa unique identifier",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Contract": {
      "type": "object",
      "properties": {
        "contract-terms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContractTerm"
          }
        },
        "created-at": {
          "type": "string",
          "description": "YYYY-MM-DDTHH:MM:SS+HH:MMZ",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Descriptive notes about the contract"
        },
        "end-date": {
          "type": "string",
          "description": "Expiry Date"
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "maximum-value": {
          "type": "string",
          "description": "Maximum Commit Amount"
        },
        "minimum-value": {
          "type": "string",
          "description": "Minimum Commit Amount"
        },
        "name": {
          "type": "string",
          "description": "Contract Name"
        },
        "number": {
          "type": "string",
          "description": "Contract Number"
        },
        "start-date": {
          "type": "string",
          "description": "Start Date"
        },
        "status": {
          "type": "string",
          "description": "Status of the Contract"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "supplier-account": {
          "type": "string",
          "description": "Supplier Account Number"
        },
        "updated-at": {
          "format": "date-time",
          "type": "string",
          "description": "YYYY-MM-DDTHH:MM:SS+HH:MMZ",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "description": "version",
          "format": "int32"
        }
      }
    },
    "ContractTerm": {
      "type": "object",
      "properties": {
        "contract-term-type": {
          "type": "string",
          "description": "contract term type",
          "enum": [
            "PerOrderContractTerm",
            "TotalQtyContractTerm",
            "TotalAmtContractTerm",
            "PriceRangeContractTerm"
          ]
        },
        "created-at": {
          "type": "string",
          "description": "YYYY-MM-DDTHH:MM:SS+HH:MMZ",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "name"
        },
        "tier-1-disc-pct": {
          "type": "string",
          "description": "tier_1_disc_pct"
        },
        "tier-1-upper-bound": {
          "type": "string",
          "description": "tier_1_upper_bound"
        },
        "tier-2-disc-pct": {
          "type": "string",
          "description": "tier_2_disc_pct"
        },
        "tier-2-upper-bound": {
          "type": "string",
          "description": "tier_2_upper_bound"
        },
        "tier-3-disc-pct": {
          "type": "string",
          "description": "tier_3_disc_pct"
        },
        "tier-3-upper-bound": {
          "type": "string",
          "description": "tier_3_upper_bound"
        },
        "type": {
          "type": "string",
          "description": "type",
          "readOnly": true
        },
        "updated-at": {
          "format": "date-time",
          "type": "string",
          "description": "YYYY-MM-DDTHH:MM:SS+HH:MMZ",
          "readOnly": true
        },
        "use-pct-discounts": {
          "type": "string",
          "description": "use_pct_discounts"
        }
      }
    },
    "Supplier": {
      "type": "object",
      "properties": {
        "account-number": {
          "type": "string",
          "description": "Account number"
        },
        "created-at": {
          "type": "string",
          "description": "YYYY-MM-DDTHH:MM:SS+HH:MMZ",
          "readOnly": true
        },
        "display-name": {
          "type": "string",
          "description": "display_name"
        },
        "id": {
          "type": "integer",
          "description": "Coupa Internal ID",
          "format": "int32",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Supplier name"
        },
        "number": {
          "type": "string",
          "description": "Supplier number"
        },
        "status": {
          "type": "string",
          "description": "Supplier status"
        }
      }
    },
    "UserSimple": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Active\\Inactive"
        },
        "approval-groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroup"
          }
        },
        "business-group-security-type": {
          "type": "integer",
          "description": "business_group_security_type",
          "format": "int32",
          "enum": [
            0,
            1
          ]
        },
        "content-groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BusinessGroup"
          }
        },
        "created-at": {
          "type": "string",
          "description": "YYYY-MM-DDTHH:MM:SS+HH:MMZ",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "description": "email"
        },
        "login": {
          "type": "string",
          "description": "employee number"
        },
        "fullname": {
          "type": "string",
          "description": "full name",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "updated-at": {
          "format": "date-time",
          "type": "string",
          "description": "YYYY-MM-DDTHH:MM:SS+HH:MMZ",
          "readOnly": true
        },
        "user-groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroup"
          }
        }
      }
    },
    "UserGroup": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Active"
        },
        "can-approve": {
          "type": "boolean",
          "description": "User group has the ability to be an approver"
        },
        "content-groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BusinessGroup"
          }
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        }
      }
    },
    "BusinessGroup": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "description"
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "name"
        },
        "updated-at": {
          "format": "date-time",
          "type": "string",
          "description": "YYYY-MM-DDTHH:MM:SS+HH:MMZ",
          "readOnly": true
        }
      },
      "required": [
        "name"
      ]
    },
    "Commodity": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Active\\Inactive",
          "enum": [
            true,
            false
          ]
        },
        "created-at": {
          "type": "string",
          "description": "YYYY-MM-DDTHH:MM:SS+HH:MMZ",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "name"
        },
        "updated-at": {
          "format": "date-time",
          "type": "string",
          "description": "updated-at",
          "readOnly": true
        }
      },
      "required": [
        "name"
      ]
    },
    "Item": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Item name"
        },
        "description": {
          "type": "string",
          "description": "Item desciption"
        },
        "item-number": {
          "type": "string",
          "description": "Unique item number"
        },
        "active": {
          "type": "boolean",
          "description": "Active\\Inactive"
        },
        "commodity": {
          "$ref": "#/definitions/Commodity"
        },
        "uom": {
          "$ref": "#/definitions/Uom"
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "image-url": {
          "type": "string",
          "description": "URL for item image (will be copied into Coupa on item create/update)",
          "x-ms-visibility": "advanced"
        }
      }
    },
    "Uom": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name"
        },
        "code": {
          "type": "string",
          "description": "code"
        },
        "active": {
          "type": "boolean",
          "description": "Active\\Inactive",
          "x-ms-visibility": "advanced"
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true,
          "x-ms-visibility": "advanced"
        }
      }
    },
    "SupplierItem": {
      "type": "object",
      "properties": {
        "price": {
          "type": "string",
          "description": "price"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "contract": {
          "$ref": "#/definitions/Contract"
        },
        "contract-term": {
          "$ref": "#/definitions/ContractTerm"
        },
        "created-at": {
          "type": "string",
          "description": "YYYY-MM-DDTHH:MM:SS+HH:MMZ",
          "readOnly": true,
          "x-ms-visibility": "advanced"
        },
        "item": {
          "$ref": "#/definitions/Item"
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true,
          "x-ms-visibility": "advanced"
        },
        "lead-time": {
          "type": "integer",
          "description": "lead_time",
          "format": "int32",
          "x-ms-visibility": "advanced"
        },
        "manufacturer": {
          "type": "string",
          "description": "manufacturer",
          "x-ms-visibility": "advanced"
        },
        "minimum-order-quantity": {
          "type": "string",
          "description": "minimum_order_quantity",
          "x-ms-visibility": "advanced"
        },
        "order-increment": {
          "type": "string",
          "description": "order_increment",
          "x-ms-visibility": "advanced"
        },
        "price-tier-1": {
          "type": "string",
          "description": "price_tier_1",
          "x-ms-visibility": "advanced"
        },
        "price-tier-2": {
          "type": "string",
          "description": "price_tier_2",
          "x-ms-visibility": "advanced"
        },
        "price-tier-3": {
          "type": "string",
          "description": "price_tier_3",
          "x-ms-visibility": "advanced"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "preferred": {
          "type": "boolean",
          "description": "Indicates preferred supplier for this item"
        },
        "supplier-aux-part-num": {
          "type": "string",
          "description": "supplier_aux_part_num",
          "x-ms-visibility": "advanced"
        },
        "supplier-part-num": {
          "type": "string",
          "description": "supplier_part_num"
        },
        "unspsc-code": {
          "type": "string",
          "description": "UNSPSC code",
          "readOnly": true
        }
      },
      "required": [
        "supplier",
        "supplier-part-num"
      ]
    },
    "IntegrationRun": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Coupa unique identifier",
          "readOnly": true
        },
        "integration": {
          "$ref": "#/definitions/Integration"
        },
        "integration-errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IntegrationError"
          }
        },
        "records-processed": {
          "type": "integer",
          "format": "int32",
          "description": "records_processed"
        },
        "start-time": {
          "type": "string",
          "description": "start_time"
        },
        "status": {
          "type": "string",
          "description": "transaction status"
        },
        "total-records": {
          "type": "integer",
          "format": "int32",
          "description": "total_records"
        },
        "updated-at": {
          "format": "date-time",
          "type": "string",
          "description": "YYYY-MM-DDTHH:MM:SS+HH:MMZ"
        }
      }
    },
    "IntegrationError": {
      "type": "object",
      "properties": {
        "contact-alert-type": {
          "type": "string",
          "description": "contact_alert_type"
        },
        "created-by": {
          "$ref": "#/definitions/UserSimple"
        },
        "creation-method": {
          "type": "string",
          "description": "creation_method"
        },
        "document-id": {
          "type": "integer",
          "format": "int32",
          "description": "document_id"
        },
        "document-status": {
          "type": "string",
          "description": "document_status"
        },
        "document-type": {
          "type": "string",
          "description": "document_type",
          "enum": [
            "ContingentWorkOrderHeader",
            "ExternalOrderHeader",
            "OrderHeader",
            "InventoryTransaction",
            "InvoiceHeader",
            "ExpenseReport",
            "RequisitionHeader",
            "Account",
            "Supplier",
            "User",
            "Address",
            "RemitToAddress",
            "Contract",
            "ExchangeRate",
            "Invoice",
            "Requisition",
            "Payment",
            "ApprovalChain",
            "LookupValue",
            "Item",
            "SupplierInformation",
            "Asn::Header",
            "AccountValidationRule",
            "Payables::External::Payable",
            "Charge",
            "Payables::Invoice",
            "Payables::Expense",
            "CoupaPay::Payment",
            "CoupaPay::Statement"
          ]
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Coupa unique identifier",
          "readOnly": true
        },
        "integration-filename": {
          "type": "string",
          "description": "filename that is associated with integration error"
        },
        "status": {
          "type": "string",
          "description": "transaction status"
        },
        "updated-at": {
          "format": "date-time",
          "type": "string",
          "description": "Automatically created by Coupa",
          "readOnly": true
        },
        "updated-by": {
          "$ref": "#/definitions/UserSimple"
        }
      }
    },
    "Integration": {
      "type": "object",
      "properties": {
        "business-object": {
          "type": "string",
          "description": "Business Object"
        },
        "code": {
          "type": "string",
          "description": "Unique Integration Code"
        },
        "created-at": {
          "type": "string",
          "description": "YYYY-MM-DDTHH:MM:SS+HH:MMZ",
          "readOnly": true
        },
        "direction": {
          "type": "string",
          "description": "Direction",
          "enum": [
            "to_coupa",
            "from_coupa"
          ]
        },
        "end-system": {
          "type": "string",
          "description": "End System"
        },
        "end-system-type": {
          "type": "string",
          "description": "End System Type",
          "enum": [
            "payroll",
            "erp",
            "hr",
            "third_party_partner",
            "third_party_vendor",
            "other",
            "internal"
          ]
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Integration Name"
        },
        "standard": {
          "type": "boolean",
          "description": "Standard",
          "readOnly": true
        }
      }
    },
    "OrderLine": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "accounting-total": {
          "type": "number",
          "description": "accounting_total"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachments"
          }
        },
        "commodity": {
          "$ref": "#/definitions/Commodity"
        },
        "contract": {
          "$ref": "#/definitions/Contract"
        },
        "description": {
          "type": "string",
          "description": "description"
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "invoiced": {
          "type": "number",
          "description": "invoiced"
        },
        "item": {
          "$ref": "#/definitions/Item"
        },
        "line-num": {
          "type": "string",
          "description": "line_num"
        },
        "order-header-id": {
          "type": "integer",
          "description": "order_header_id",
          "format": "int32"
        },
        "price": {
          "type": "number",
          "description": "price"
        },
        "quantity": {
          "type": "number",
          "description": "quantity"
        },
        "received": {
          "type": "string",
          "description": "Quantity/Amount received"
        },
        "requester": {
          "$ref": "#/definitions/UserSimple"
        },
        "source-part-num": {
          "type": "string",
          "description": "source_part_num"
        },
        "status": {
          "type": "string",
          "description": "transaction status"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "total": {
          "type": "number",
          "description": "total"
        },
        "type": {
          "type": "string",
          "description": "type"
        },
        "uom": {
          "$ref": "#/definitions/Uom"
        }
      }
    },
    "InventoryTransaction": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachments"
          }
        },
        "id": {
          "type": "integer",
          "description": "Coupa's Internal Inventory Transaction ID",
          "format": "int32",
          "readOnly": true
        },
        "item": {
          "$ref": "#/definitions/Item"
        },
        "order-line": {
          "$ref": "#/definitions/OrderLine"
        },
        "price": {
          "type": "number",
          "description": "Item Price"
        },
        "quantity": {
          "type": "number",
          "description": "Receipt Quantity"
        },
        "receipt": {
          "$ref": "#/definitions/Receipt"
        },
        "requester": {
          "$ref": "#/definitions/UserSimple"
        },
        "status": {
          "type": "string",
          "description": "Inventory Transaction Status",
          "readOnly": true
        },
        "total": {
          "type": "number",
          "description": "Receipt Total"
        },
        "transaction-date": {
          "type": "string",
          "format": "date-time",
          "description": "Actual date of transaction"
        },
        "type": {
          "type": "string",
          "description": "Inventory Transaction Type"
        },
        "uom": {
          "$ref": "#/definitions/Uom"
        },
        "updated-at": {
          "format": "date-time",
          "type": "string",
          "description": "Time of Inventory Transaction Updation",
          "readOnly": true
        }
      },
      "required": [
        "type"
      ]
    },
    "Account": {
      "type": "object",
      "properties": {
        "account-type": {
          "$ref": "#/definitions/AccountType"
        },
        "account-type-id": {
          "type": "integer",
          "description": "Account Type Id",
          "format": "int32",
          "readOnly": true
        },
        "active": {
          "type": "boolean",
          "description": "Active\\Inactive flag"
        },
        "code": {
          "type": "string",
          "description": "All segments concatenated with a hyphen ( - )"
        },
        "created-at": {
          "type": "string",
          "description": "YYYY-MM-DDTHH:MM:SS+HH:MMZ",
          "readOnly": true
        },
        "created-by": {
          "$ref": "#/definitions/UserSimple"
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "This is the nickname for the account."
        },
        "segment-1": {
          "type": "string",
          "description": "Each segment represents the segment of the account code"
        },
        "segment-2": {
          "type": "string",
          "description": "Each segment represents the segment of the account code"
        },
        "segment-3": {
          "type": "string",
          "description": "Each segment represents the segment of the account code"
        },
        "segment-4": {
          "type": "string",
          "description": "Each segment represents the segment of the account code"
        },
        "segment-5": {
          "type": "string",
          "description": "Each segment represents the segment of the account code"
        },
        "segment-6": {
          "type": "string",
          "description": "Each segment represents the segment of the account code"
        },
        "updated-by": {
          "$ref": "#/definitions/UserSimple"
        }
      }
    },
    "AccountType": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "A false value will inactivate the COA"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "name"
        }
      }
    },
    "Receipt": {
      "type": "object",
      "properties": {
        "created-at": {
          "type": "string",
          "description": "Automatically created by Coupa in the format",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "quantity": {
          "type": "number",
          "description": "quantity"
        },
        "receipt-date": {
          "type": "string",
          "format": "date-time",
          "description": "receipt_date"
        },
        "total": {
          "type": "number",
          "description": "total",
          "readOnly": true
        },
        "unit-price": {
          "type": "number",
          "description": "line item price"
        },
        "uom": {
          "$ref": "#/definitions/Uom"
        },
        "updated-at": {
          "format": "date-time",
          "type": "string",
          "description": "Automatically created by Coupa in the format",
          "readOnly": true
        }
      },
      "required": [
        "receipt-date"
      ]
    },
    "LookupValue": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Active\\Inactive"
        },
        "name": {
          "type": "string",
          "description": "Name of the lookup value"
        },
        "description": {
          "type": "string",
          "description": "Description of the lookup value"
        },
        "external-ref-num": {
          "type": "string",
          "description": "External Ref Num (actual account value when used in accounting)"
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "is-default": {
          "type": "boolean",
          "description": "is_default"
        },
        "lookup": {
          "$ref": "#/definitions/Lookup"
        },
        "lookup-id": {
          "type": "integer",
          "description": "lookup_id",
          "format": "int32"
        }
      },
      "required": [
        "lookup",
        "name"
      ]
    },
    "Lookup": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Active\\Inactive Flag"
        },
        "description": {
          "type": "string",
          "description": "description"
        },
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "level-1-name": {
          "type": "string",
          "description": "level_1_name"
        },
        "level-2-name": {
          "type": "string",
          "description": "level_2_name"
        },
        "level-3-name": {
          "type": "string",
          "description": "level_3_name"
        },
        "level-4-name": {
          "type": "string",
          "description": "level_4_name"
        },
        "name": {
          "type": "string",
          "description": "name"
        }
      },
      "required": [
        "name"
      ]
    },
    "FormResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Coupa unique identifier",
          "format": "int32",
          "readOnly": true
        },
        "updated-at": {
          "format": "date-time",
          "type": "string",
          "description": "Automatically created by Coupa in the format YYYY-MM-DDTHH:MM:SS+HH:MMZ",
          "readOnly": true
        }
      }
    }},
  "parameters": {},
  "responses": {},
  "securityDefinitions": {},
  "security": [],
  "tags": []
}
