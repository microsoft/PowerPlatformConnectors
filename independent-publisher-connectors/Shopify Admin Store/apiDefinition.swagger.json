{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Shopify Admin Store",
    "description": "Manage a shopify store's customers, products, collections and customers using the Shopify Admin API.",
    "contact": {
      "name": "Hitachi Solutions",
      "email":"jlindstrom@hitachisolutions.com",
      "url": "https://global.hitachi-solutions.com/"
    }
  },
  "host": "storename.myshopify.com",
  "basePath": "/admin/api/2021-04",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/orders.json": {
      "post": {
        "description": "Creates an order",
        "summary": "Create an order",
        "tags": [
          "Order"
        ],
        "operationId": "CreateOrder",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "Order details",
            "schema": {
              "$ref": "#/definitions/CreateapendingorderwithanexistingcustomerRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Order response",
            "schema": {
              "type": "object",
              "properties": {
                "orders": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/OrderResponse"
                  },
                  "description": "List of Orders"
                }}
              }
            }
          }
        }
      },
      "/orders/{order_id}.json": {
        "put": {
          "description": "Updates an existing Order",
          "summary": "Update an order",
          "tags": [
            "Order"
          ],
          "operationId": "UpdateOrder",
          "deprecated": false,
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "order_id",
              "in": "path",
              "required": true,
              "type": "integer",
              "description": "Order id"
            },
            {
              "name": "Body",
              "in": "body",
              "required": true,
              "description": "Order details to be updated.",
              "schema": {
                "$ref": "#/definitions/UpdateanorderRequest"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "Order Updated",
              "schema": {
                "type": "object",
                "properties": {
                  "orders": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/OrderResponse"
                    },
                    "description": "Update Order Response"
                  }
                }
              }
            }
          }
        }
      },
      "/products.json": {
        "get": {
          "description": "Retrieves a list of all products from the store",
          "summary": "List all products",
          "tags": [
            "Product"
          ],
          "operationId": "ListProducts",
          "deprecated": false,
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [],
          "responses": {
            "default": {
              "description": "List of Products response",
              "schema": {
                "type": "object",
                "properties": {
                  "products": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ProductResponse"
                    },
                    "description": "List of products"
                  }
                }
              }
            }
          }
        },
        "post": {
          "description": "Add a new product to your store",
          "summary": "Create new product",
          "tags": [
            "Product"
          ],
          "operationId": "CreateProduct",
          "deprecated": false,
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "Body",
              "in": "body",
              "required": true,
              "description": "Product details",
              "schema": {
                "$ref": "#/definitions/Createanewproduct"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "default",
              "schema": {
                "$ref": "#/definitions/ProductResponse"
              }
            }
          }
        }
      },
      "/collects.json": {
        "post": {
          "description": "Adds a product to a custom collection",
          "summary": "Add  product to a collection",
          "tags": [
            "Collect"
          ],
          "operationId": "AddProductToCollection",
          "deprecated": false,
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "Body",
              "in": "body",
              "required": true,
              "description": "Product to be added to the custom collection.",
              "schema": {
                "$ref": "#/definitions/AddaproducttoacollectionRequest"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "Collect Response",
              "schema": {
                "type": "object",
                "properties": {
                  "collect": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The date and time (ISO 8601 format) when the collect was created."
                      },
                      "collection_id": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The ID of the custom collection containing the product."
                      },
                      "product_id": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The unique numeric identifier for the product in the custom collection."
                      },
                      "created_at": {
                        "type": "string",
                        "description": "The date and time (ISO 8601 format) when the collect was created."
                      },
                      "updated_at": {
                        "type": "string",
                        "description": "The date and time (ISO 8601 format) when the collect was last updated."
                      },
                      "position": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The position of this product in a manually sorted custom collection. The first position is 1. This value is applied only when the custom collection is sorted manually."
                      },
                      "sort_value": {
                        "type": "string",
                        "description": "This is the same value as position but padded with leading zeroes to make it alphanumeric-sortable. This value is applied only when the custom collection is sorted manually."
                      }
                    },
                    "description": "Collect object"
                  }
                }
              }
            }
          }
        }
      },
      "/trigger/customers.json": {
        "get": {
          "responses": {
            "default": {
              "description": "default",
              "schema": {
                "type": "object",
                "properties": {
                  "customers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CustomerResponse"
                    },
                    "description": "customers"
                  }
                }
              }
            }
          },
          "x-ms-trigger": "batch",
          "x-ms-trigger-metadata": {
            "mode": "polling",
            "kind": "query"
          },
          "operationId": "CustomerCreated",
          "parameters": [
            {
              "name": "since_id",
              "in": "query",
              "required": false,
              "type": "string",
              "x-ms-visibility": "internal"
            }
          ],
          "summary": "When a customer is created",
          "description": "When a new customer is created"
        }
      },
      "/trigger/products.json": {
        "get": {
          "responses": {
            "default": {
              "description": "default",
              "schema": {
                "type": "object",
                "properties": {
                  "products": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ProductResponse"
                    },
                    "description": "List of products"
                  }
                }
              }
            }
          },
          "summary": "When a product is created",
          "description": "When a new product is created",
          "operationId": "ProductCreated",
          "x-ms-trigger": "batch",
          "x-ms-trigger-metadata": {
            "mode": "polling",
            "kind": "query"
          },
          "parameters": [
            {
              "name": "since_id",
              "in": "query",
              "required": false,
              "type": "string",
              "x-ms-visibility": "internal"
            }
          ]
        }
      },
      "/trigger/orders.json": {
        "get": {
          "responses": {
            "default": {
              "description": "default",
              "schema": {
                "type": "object",
                "properties": {
                  "orders": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/OrderResponse"
                    },
                    "description": "List orders"
                  }
                }
              }
            }
          },
          "summary": "When an order is created",
          "description": "When an order is created",
          "operationId": "OrderCreated",
          "x-ms-trigger": "batch",
          "x-ms-trigger-metadata": {
            "mode": "polling",
            "kind": "query"
          },
          "parameters": [
            {
              "name": "since_id",
              "in": "query",
              "required": false,
              "type": "string",
              "x-ms-visibility": "internal"
            }
          ]
        }
      },
      "/products/{product_id}.json": {
        "get": {
          "description": "Retrieves a single product",
          "summary": "Get a single product",
          "tags": [
            "Product"
          ],
          "operationId": "GetProduct",
          "deprecated": false,
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "product_id",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "ID of the product to be retireved",
              "x-ms-summary": "Product ID"
            }
          ],
          "responses": {
            "default": {
              "description": "Retrieved product response",
              "schema": {
                "$ref": "#/definitions/ProductResponse"
              }
            }
          }
        },
        "put": {
          "description": "Updates a product",
          "summary": "Update a product",
          "tags": [
            "Product"
          ],
          "operationId": "UpdateProduct",
          "deprecated": false,
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "product_id",
              "in": "path",
              "required": true,
              "type": "string",
              "description": "ID of the product to be retrieved",
              "x-ms-summary": "Product ID"
            },
            {
              "name": "Body",
              "in": "body",
              "required": true,
              "description": "Product details to be updated",
              "schema": {
                "$ref": "#/definitions/Updateaproduct"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Updated product response",
              "schema": {
                "$ref": "#/definitions/ProductResponse"
              }
            }
          }
        }
      },
      "/customers.json": {
        "get": {
          "responses": {
            "default": {
              "description": "default",
              "schema": {
                "type": "object",
                "properties": {
                  "customers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CustomerResponse"
                    },
                    "description": "List of customers"
                  }
                }
              }
            }
          },
          "summary": "List all customers",
          "description": "Retrieves a list of all customers",
          "operationId": "ListCustomers",
          "parameters": [
            {
              "name": "ids",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Restrict results to customers specified by a comma-separated list of IDs."
            },
            {
              "name": "since_id",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Restrict results to those after the specified ID."
            },
            {
              "name": "created_at_min",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Show customers created after a specified date. (format: 2014-04-25T16:15:47-04:00)"
            },
            {
              "name": "created_at_max",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Show customers created before a specified date. (format: 2014-04-25T16:15:47-04:00)"
            },
            {
              "name": "updated_at_min",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Show customers last updated after a specified date. (format: 2014-04-25T16:15:47-04:00)"
            },
            {
              "name": "updated_at_max",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Show customers last updated before a specified date. (format: 2014-04-25T16:15:47-04:00)"
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "The maximum number of results to show. (default: 50, maximum: 250)"
            }
          ]
        },
        "post": {
          "responses": {
            "default": {
              "description": "default",
              "schema": {
                "type": "object",
                "properties": {
                  "customer": {
                    "$ref": "#/definitions/CustomerResponse"
                  }
                }
              }
            }
          },
          "summary": "Create a customer",
          "description": "Creates a customer",
          "operationId": "CreateCustomer",
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateanewcustomerrecordRequest"
              }
            }
          ]
        }
      },
      "/customers/{customer_id}.json": {
        "put": {
          "responses": {
            "default": {
              "description": "default",
              "schema": {
                "type": "object",
                "properties": {
                  "customer": {
                    "$ref": "#/definitions/CustomerResponse"
                  }
                }
              }
            }
          },
          "summary": "Update customer",
          "description": "Updates a customer",
          "operationId": "UpdateCustomer",
          "parameters": [
            {
              "name": "customer_id",
              "in": "path",
              "required": true,
              "type": "string"
            },
            {
              "name": "body",
              "in": "body",
              "required": false,
              "schema": {
                "type": "object",
                "properties": {
                  "customer": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "description": "id"
                      },
                      "first_name": {
                        "type": "string",
                        "description": "first_name"
                      },
                      "last_name": {
                        "type": "string",
                        "description": "last_name"
                      },
                      "email": {
                        "type": "string",
                        "description": "email"
                      },
                      "phone": {
                        "type": "string",
                        "description": "phone"
                      },
                      "note": {
                        "type": "string",
                        "description": "note"
                      },
                      "accepts_marketing": {
                        "type": "boolean",
                        "description": "accepts_marketing"
                      },
                      "accepts_marketing_updated_at": {
                        "type": "string",
                        "description": "accepts_marketing_updated_at"
                      },
                      "marketing_opt_in_level": {
                        "type": "string",
                        "description": "marketing_opt_in_level"
                      },
                      "addresses": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "address1": {
                              "type": "string",
                              "description": "address1"
                            },
                            "city": {
                              "type": "string",
                              "description": "city"
                            },
                            "province": {
                              "type": "string",
                              "description": "province"
                            },
                            "phone": {
                              "type": "string",
                              "description": "phone"
                            },
                            "zip": {
                              "type": "string",
                              "description": "zip"
                            },
                            "last_name": {
                              "type": "string",
                              "description": "last_name"
                            },
                            "first_name": {
                              "type": "string",
                              "description": "first_name"
                            },
                            "country": {
                              "type": "string",
                              "description": "country"
                            }
                          }
                        },
                        "description": "addresses"
                      },
                      "metafields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string",
                              "description": "key"
                            },
                            "value": {
                              "type": "string",
                              "description": "value"
                            },
                            "value_type": {
                              "type": "string",
                              "description": "value_type"
                            },
                            "namespace": {
                              "type": "string",
                              "description": "namespace"
                            }
                          }
                        },
                        "description": "metafields"
                      }
                    },
                    "description": "customer"
                  }
                }
              }
            }
          ]
        }
      },
      "/customers/{customer_id}/orders.json": {
        "get": {
          "responses": {
            "default": {
              "description": "default",
              "schema": {
                "type": "object",
                "properties": {
                  "orders": {
                    "type": "array",
                    "items": {"$ref": "#/definitions/OrderResponse"},
                    "description": "orders"
                  }
                }
              }
            }
          },
          "description": "Retrieves all orders belonging to a customer",
          "summary": "List all orders belonging to a customer",
          "operationId": "ListCustomerOrders",
          "parameters": [
            {
              "name": "customer_id",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ]
        }
      },
      "/customers/search.json": {
        "get": {
          "responses": {
            "default": {
              "description": "default",
              "schema": {
                "type": "object",
                "properties": {
                  "customers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CustomerResponse"
                    },
                    "description": "Customers returned from search."
                  }
                }
              }
            }
          },
          "summary": "Search for customers",
          "operationId": "SearchCustomers",
          "parameters": [
            {
              "name": "query",
              "in": "query",
              "required": false,
              "type": "string","description":"Text to search for in the shop's customer data"
            },
            {
              "name": "order",
              "in": "query",
              "required": false,
              "type": "string","description":"Set the field and direction by which to order results."
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "type": "integer","description":"The maximum number of results to show. (default: 50, maximum: 250)"
            }
          ],
          "description": "Searches for customers that match a supplied query."
        }
      },
      "/trigger/custom_collections.json": {
        "get": {
          "responses": {
            "default": {
              "description": "default",
              "schema": {
                "type": "object",
                "properties": {
                  "custom_collections": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The ID for the collection."
                        },
                        "handle": {
                          "type": "string",
                          "description": "A unique, human-readable string for the collection automatically generated from its title."
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "The date and time (ISO 8601 format) when the collection was last modified."
                        },
                        "published_at": {
                          "type": "string",
                          "description": "The time and date (ISO 8601 format) when the collection was made visible. Returns null for a hidden collection."
                        },
                        "sort_order": {
                          "type": "string",
                          "description": "The order in which products in the collection appear."
                        },
                        "template_suffix": {
                          "type": "string",
                          "description": "The suffix of the liquid template being used."
                        },
                        "published_scope": {
                          "type": "string",
                          "description": "Whether the collection is published to the Point of Sale channel. "
                        },
                        "title": {
                          "type": "string",
                          "description": "The name of the collection."
                        },
                        "body_html": {
                          "type": "string",
                          "description": "A description of the collection, complete with HTML markup. Many templates display this on their collection pages."
                        },
                        "admin_graphql_api_id": {
                          "type": "string",
                          "description": "Admin GraphQL API ID"
                        },
                        "image": {
                          "type": "object",
                          "properties": {
                            "created_at": {
                              "type": "string",
                              "description": "The time and date (ISO 8601 format) when the image was added to the collection."
                            },
                            "alt": {
                              "type": "string",
                              "description": " The alternative text that describes the collection image."
                            },
                            "width": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The width of the image in pixels."
                            },
                            "height": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The height of the image in pixels."
                            },
                            "src": {
                              "type": "string",
                              "description": "The source URL that specifies the location of the image."
                            }
                          },
                          "description": "Image associated with the collection."
                        }
                      }
                    },
                    "description": "custom_collections"
                  }
                }
              }
            }
          },
          "summary": "When a collection is created",
          "description": "When a collection is created",
          "operationId": "CollectionCreated",
          "x-ms-trigger": "batch",
          "x-ms-trigger-metadata": {
            "mode": "polling",
            "kind": "query"
          },
          "parameters": [
            {
              "name": "since_id",
              "in": "query",
              "required": false,
              "type": "string",
              "x-ms-visibility": "internal"
            }
          ]
        }
      }
    },
    "definitions": {
      "CreateanewcustomerrecordRequest": {
        "title": "CreateanewcustomerrecordRequest",
        "example": {
          "customer": {
            "first_name": "Steve",
            "last_name": "Lastnameson",
            "email": "steve.lastnameson@example.com",
            "phone": 15142546011,
            "verified_email": true,
            "addresses": [
              {
                "address1": "123 Oak St",
                "city": "Ottawa",
                "province": true,
                "phone": "555-1212",
                "zip": "123 ABC",
                "last_name": "Lastnameson",
                "first_name": "Mother",
                "country": "CA"
              }
            ]
          }
        },
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/definitions/Customer"
          }
        },
        "required": [
          "customer"
        ]
      },
      "Customer": {
        "title": "Customer",
        "example": {
          "first_name": "Steve",
          "last_name": "Lastnameson",
          "email": "steve.lastnameson@example.com",
          "phone": 15142546011,
          "verified_email": true,
          "addresses": [
            {
              "address1": "123 Oak St",
              "city": "Ottawa",
              "province": true,
              "phone": "555-1212",
              "zip": "123 ABC",
              "last_name": "Lastnameson",
              "first_name": "Mother",
              "country": "CA"
            }
          ]
        },
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "verified_email": {
            "type": "boolean"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Address"
            }
          },
          "send_email_invite": {
            "type": "boolean",
            "description": "send_email_invite"
          },
          "password": {
            "type": "string",
            "description": "password"
          },
          "password_confirmation": {
            "type": "string",
            "description": "password_confirmation"
          },
          "send_email_welcome": {
            "type": "boolean",
            "description": "send_email_welcome"
          },
          "accepts_marketing": {
            "type": "boolean",
            "description": "Whether the customer has consented to receive marketing material via email."
          },
          "metafields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Metafield"
            }
          }
        },
        "required": [
          "first_name",
          "last_name",
          "email"
        ]
      },
      "Address": {
        "title": "Address",
        "example": {
          "address1": "123 Oak St",
          "city": "Ottawa",
          "province": true,
          "phone": "555-1212",
          "zip": "123 ABC",
          "last_name": "Lastnameson",
          "first_name": "Mother",
          "country": "CA"
        },
        "type": "object",
        "properties": {
          "address1": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "province": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        },
        "required": [
          "address1",
          "city",
          "province",
          "phone",
          "zip",
          "last_name",
          "first_name",
          "country"
        ]
      },
      "Metafield": {
        "title": "Metafield",
        "example": {
          "key": "new",
          "value": "newvalue",
          "value_type": "string",
          "namespace": "global"
        },
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "value_type": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          }
        }
      },
      "CustomerResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "A unique identifier for the customer."
          },
          "email": {
            "type": "string",
            "description": "The unique email address of the customer. Attempting to assign the same email address to multiple customers returns an error."
          },
          "accepts_marketing": {
            "type": "boolean",
            "description": "Whether the customer has consented to receive marketing material via email."
          },
          "created_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the customer was created."
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the customer was last updateded."
          },
          "first_name": {
            "type": "string",
            "description": "The customer's first name."
          },
          "last_name": {
            "type": "string",
            "description": "The customer's last name."
          },
          "orders_count": {
            "type": "integer",
            "format": "int32",
            "description": "The number of orders associated with this customer."
          },
          "state": {
            "type": "string",
            "description": "The state of the customer's account with a shop."
          },
          "total_spent": {
            "type": "string",
            "description": "The total amount of money that the customer has spent across their order history."
          },
          "last_order_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the customer's last order."
          },
          "note": {
            "type": "string",
            "description": "A note about the customer."
          },
          "verified_email": {
            "type": "boolean",
            "description": "Whether the customer has verified their email address."
          },
          "multipass_identifier": {
            "type": "string",
            "description": "A unique identifier for the customer that's used with Multipass login."
          },
          "tax_exempt": {
            "type": "boolean",
            "description": "Whether the customer is exempt from paying taxes on their order."
          },
          "phone": {
            "type": "string",
            "description": "The unique phone number (E.164 format) for this customer."
          },
          "tags": {
            "type": "string",
            "description": "Tags that the shop owner has attached to the customer, formatted as a string of comma-separated values."
          },
          "last_order_name": {
            "type": "string",
            "description": "The name of the customer's last order. "
          },
          "currency": {
            "type": "string",
            "description": "The three-letter code (ISO 4217 format) for the currency that the customer used when they paid for their last order."
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "A unique identifier for the address."
                },
                "customer_id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "A unique identifier for the customer."
                },
                "first_name": {
                  "type": "string",
                  "description": "The customer's first name."
                },
                "last_name": {
                  "type": "string",
                  "description": "The customer's last name."
                },
                "company": {
                  "type": "string",
                  "description": " The customer's company."
                },
                "address1": {
                  "type": "string",
                  "description": " The customer's mailing address."
                },
                "address2": {
                  "type": "string",
                  "description": "An additional field for the customer's mailing address."
                },
                "city": {
                  "type": "string",
                  "description": "The customer's city, town, or village."
                },
                "province": {
                  "type": "string",
                  "description": "The customer's region name. Typically a province, a state, or a prefecture."
                },
                "country": {
                  "type": "string",
                  "description": " The customer's country."
                },
                "zip": {
                  "type": "string",
                  "description": " The customer's postal code."
                },
                "phone": {
                  "type": "string",
                  "description": "The customer's phone number at this address."
                },
                "name": {
                  "type": "string",
                  "description": "The customer's first and last names."
                },
                "province_code": {
                  "type": "string",
                  "description": " The code for the region of the address, such as the province, state, or district. "
                },
                "country_code": {
                  "type": "string",
                  "description": "The two-letter country code corresponding to the customer's country."
                },
                "country_name": {
                  "type": "string",
                  "description": "The customer's normalized country name."
                },
                "default": {
                  "type": "boolean",
                  "description": "Whether this address is the default address for the customer."
                }
              }
            },
            "description": "A list of the ten most recently updated addresses for the customer."
          },
          "accepts_marketing_updated_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the customer consented or objected to receiving marketing material by email."
          },
          "marketing_opt_in_level": {
            "type": "string",
            "description": "The marketing subscription opt-in level (as described by the M3AAWG best practices guideline) that the customer gave when they consented to receive marketing material by email."
          },
          "tax_exemptions": {
            "type": "array",
            "items": {},
            "description": "Whether the customer is exempt from paying specific taxes on their order."
          },
          "admin_graphql_api_id": {
            "type": "string",
            "description": "Admin GraphQL API ID"
          },
          "default_address": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int32",
                "description": "A unique identifier for the address."
              },
              "customer_id": {
                "type": "integer",
                "format": "int32",
                "description": "A unique identifier for the customer."
              },
              "first_name": {
                "type": "string",
                "description": "The customer's first name."
              },
              "last_name": {
                "type": "string",
                "description": "The customer's last name."
              },
              "company": {
                "type": "string",
                "description": " The customer's company."
              },
              "address1": {
                "type": "string",
                "description": " The customer's mailing address."
              },
              "address2": {
                "type": "string",
                "description": "An additional field for the customer's mailing address."
              },
              "city": {
                "type": "string",
                "description": "The customer's city, town, or village."
              },
              "province": {
                "type": "string",
                "description": "The customer's region name. Typically a province, a state, or a prefecture."
              },
              "country": {
                "type": "string",
                "description": " The customer's country."
              },
              "zip": {
                "type": "string",
                "description": " The customer's postal code."
              },
              "phone": {
                "type": "string",
                "description": "The customer's phone number at this address."
              },
              "name": {
                "type": "string",
                "description": "The customer's first and last names."
              },
              "province_code": {
                "type": "string",
                "description": " The code for the region of the address, such as the province, state, or district. "
              },
              "country_code": {
                "type": "string",
                "description": "The two-letter country code corresponding to the customer's country."
              },
              "country_name": {
                "type": "string",
                "description": "The customer's normalized country name."
              },
              "default": {
                "type": "boolean",
                "description": "Whether this address is the default address for the customer."
              }
            },
            "description": "The default address for the customer."
          }
        }
      },
      "CreateapendingorderwithanexistingcustomerRequest": {
        "title": "CreateapendingorderwithanexistingcustomerRequest",
        "example": {
          "order": {
            "line_items": [
              {
                "variant_id": 33214924878,
                "quantity": 1
              }
            ],
            "customer": {
              "id": 3989659651
            },
            "financial_status": "pending"
          }
        },
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/definitions/Order"
          }
        },
        "required": [
          "order"
        ]
      },
      "Order": {
        "title": "Order",
        "example": {
          "line_items": [
            {
              "variant_id": 33214924878,
              "quantity": 1
            }
          ],
          "customer": {
            "id": 3989659651
          },
          "financial_status": "pending"
        },
        "type": "object",
        "properties": {
          "line_items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LineItem"
            }
          },
          "customer": {
            "$ref": "#/definitions/Customer2"
          },
          "financial_status": {
            "type": "string"
          }
        },
        "required": [
          "line_items",
          "customer",
          "financial_status"
        ]
      },
      "OrderResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the order."
          },
          "closed_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the order was closed."
          },
          "created_at": {
            "type": "string",
            "description": "The autogenerated date and time (ISO 8601 format) when the order was created in Shopify. The value for this property cannot be changed."
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "description": "The order's position in the shop's count of orders. Numbers are sequential and start at 1."
          },
          "note": {
            "type": "string",
            "description": "An optional note that a shop owner can attach to the order."
          },
          "total_price": {
            "type": "string",
            "description": "The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency."
          },
          "name": {
            "type": "string",
            "description": "The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings."
          },
          "order_number": {
            "type": "integer",
            "format": "int32",
            "description": "The order 's position in the shop's count of orders starting at 1001."
          },
          "processing_method": {
            "type": "string",
            "description": "How the payment was processed. It has the following valid values: Checkout, direct, manual, offsite, express or free."
          },
          "source_name": {
            "type": "string",
            "description": "Where the order originated. Can be set only during order creation, and is not writeable afterwards. Values for Shopify channels are protected and cannot be assigned by other API clients: web, pos, shopify_draft_order, iphone, and android. "
          },
          "line_items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The ID of the line item."
                },
                "variant_id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The ID of the product variant."
                },
                "title": {
                  "type": "string",
                  "description": "The title of the product."
                },
                "quantity": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of items that were purchased."
                },
                "sku": {
                  "type": "string",
                  "description": "The item's SKU (stock keeping unit)."
                },
                "variant_title": {
                  "type": "string",
                  "description": "The title of the product variant."
                },
                "vendor": {
                  "type": "string",
                  "description": "The name of the item's supplier."
                },
                "fulfillment_service": {
                  "type": "string",
                  "description": "The service provider that's fulfilling the item. Valid values: manual, or the name of the provider, such as amazon or shipwire."
                },
                "product_id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The ID of the product that the line item belongs to. Can be null if the original product associated with the order is deleted at a later date."
                },
                "requires_shipping": {
                  "type": "boolean",
                  "description": "Whether the item requires shipping."
                },
                "taxable": {
                  "type": "boolean",
                  "description": "Whether the item was taxable."
                },
                "gift_card": {
                  "type": "boolean",
                  "description": "Whether the item is a gift card. If true, then the item is not taxed or considered for shipping charges."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the product variant."
                },
                "properties": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the property."
                      },
                      "value": {
                        "type": "string",
                        "description": "Value of the property."
                      }
                    }
                  },
                  "description": "An array of custom information for the item that has been added to the cart. Often used to provide product customization options."
                },
                "fulfillable_quantity": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The amount available to fulfill, calculated as follows: quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity"
                },
                "grams": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The weight of the item in grams."
                },
                "price": {
                  "type": "string",
                  "description": "The price of the item before discounts have been applied in the shop currency."
                },
                "total_discount": {
                  "type": "string",
                  "description": "The total amount of the discount allocated to the line item in the shop currency. "
                },
                "fulfillment_status": {
                  "type": "string",
                  "description": "How far along an order is in terms line items fulfilled. Valid values: null, fulfilled, partial, and not_eligible."
                },
                "discount_allocations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "amount": {
                        "type": "string",
                        "description": " The discount amount allocated to the line in the shop currency."
                      },
                      "discount_application_index": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The index of the associated discount application in the order's discount_applications list."
                      }
                    }
                  },
                  "description": "An ordered list of amounts allocated by discount applications. Each discount allocation is associated with a particular discount application."
                },
                "tax_lines": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "The name of the tax."
                      },
                      "price": {
                        "type": "string",
                        "description": "The amount added to the order for this tax in the shop currency."
                      },
                      "rate": {
                        "type": "number",
                        "format": "float",
                        "description": "The tax rate applied to the order to calculate the tax price."
                      }
                    }
                  },
                  "description": "A list of tax line objects, each of which details a tax applied to the item."
                }
              }
            },
            "description": "A list of line item objects, each containing information about an item in the order."
          },
          "billing_address": {
            "type": "object",
            "properties": {
              "first_name": {
                "type": "string",
                "description": "The first name of the person associated with the shipping address."
              },
              "address1": {
                "type": "string",
                "description": "The street address of the shipping address."
              },
              "phone": {
                "type": "string",
                "description": "The phone number at the shipping address."
              },
              "city": {
                "type": "string",
                "description": "The city, town, or village of the shipping address."
              },
              "zip": {
                "type": "string",
                "description": "The postal code (for example, zip, postcode, or Eircode) of the shipping address."
              },
              "province": {
                "type": "string",
                "description": "The name of the region (for example, province, state, or prefecture) of the shipping address."
              },
              "country": {
                "type": "string",
                "description": "The name of the country of the shipping address."
              },
              "last_name": {
                "type": "string",
                "description": "The last name of the person associated with the shipping address."
              },
              "address2": {
                "type": "string",
                "description": "An optional additional field for the street address of the shipping address."
              },
              "company": {
                "type": "string",
                "description": "The company of the person associated with the shipping address."
              },
              "latitude": {
                "type": "number",
                "format": "float",
                "description": "The latitude of the shipping address."
              },
              "longitude": {
                "type": "number",
                "format": "float",
                "description": "The longitude of the shipping address."
              },
              "name": {
                "type": "string",
                "description": "The full name of the person associated with the payment method."
              },
              "country_code": {
                "type": "string",
                "description": "The two-letter code (ISO 3166-1 format) for the country of the shipping address."
              },
              "province_code": {
                "type": "string",
                "description": "The two-letter abbreviation of the region of the shipping address."
              }
            },
            "description": "Billing Address on the order."
          },
          "shipping_address": {
            "type": "object",
            "properties": {
              "first_name": {
                "type": "string",
                "description": "The first name of the person associated with the shipping address."
              },
              "address1": {
                "type": "string",
                "description": "The street address of the shipping address."
              },
              "phone": {
                "type": "string",
                "description": "The phone number at the shipping address."
              },
              "city": {
                "type": "string",
                "description": "The city, town, or village of the shipping address."
              },
              "zip": {
                "type": "string",
                "description": "The postal code (for example, zip, postcode, or Eircode) of the shipping address."
              },
              "province": {
                "type": "string",
                "description": "The name of the region (for example, province, state, or prefecture) of the shipping address."
              },
              "country": {
                "type": "string",
                "description": "The name of the country of the shipping address."
              },
              "last_name": {
                "type": "string",
                "description": "The last name of the person associated with the shipping address."
              },
              "address2": {
                "type": "string",
                "description": "An optional additional field for the street address of the shipping address."
              },
              "company": {
                "type": "string",
                "description": "The company of the person associated with the shipping address."
              },
              "latitude": {
                "type": "number",
                "format": "float",
                "description": "The latitude of the shipping address."
              },
              "longitude": {
                "type": "number",
                "format": "float",
                "description": "The longitude of the shipping address."
              },
              "name": {
                "type": "string",
                "description": "The full name of the person associated with the payment method."
              },
              "country_code": {
                "type": "string",
                "description": "The two-letter code (ISO 3166-1 format) for the country of the shipping address."
              },
              "province_code": {
                "type": "string",
                "description": "The two-letter abbreviation of the region of the shipping address."
              }
            },
            "description": "Shipping address on the order."
          },
          "customer": {
            "$ref": "#/definitions/CustomerResponse"
          }
        }
      },
      "LineItem": {
        "title": "LineItem",
        "example": {
          "variant_id": 33214924878,
          "quantity": 1
        },
        "type": "object",
        "properties": {
          "variant_id": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "variant_id",
          "quantity"
        ]
      },
      "Customer2": {
        "title": "Customer2",
        "example": {
          "id": 3989659651
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "id"
        ]
      },
      "UpdateanorderRequest": {
        "title": "UpdateanorderRequest",
        "example": {
          "order": {
            "customer": "null"
          }
        },
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/definitions/Order1"
          }
        },
        "required": [
          "order"
        ]
      },
      "Order1": {
        "title": "Order1",
        "example": {
          "customer": "null"
        },
        "type": "object",
        "properties": {
          "customer": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "shipping_address": {
            "$ref": "#/definitions/Address"
          },
          "buyer_accepts_marketing": {
            "type": "boolean"
          },
          "metafields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Metafield"
            }
          }
        },
        "required": [
          "customer"
        ]
      },
      "Collect": {
        "title": "Collect",
        "example": {
          "product_id": 921728736,
          "collection_id": 841564295
        },
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "format": "int32",
            "description": "The unique numeric identifier for the product in the custom collection."
          },
          "collection_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the custom collection containing the product."
          }
        },
        "required": [
          "product_id",
          "collection_id"
        ]
      },
      "Createanewproduct": {
        "title": "Createanewproduct",
        "example": {
          "product": {
            "title": "Burton Custom Freestyle 151",
            "body_html": "<strong>Good snowboard!</strong>",
            "vendor": "Burton",
            "product_type": "Snowboard",
            "variants": [
              {
                "option1": "First",
                "price": "10.00",
                "sku": 123
              },
              {
                "option1": "Second",
                "price": "20.00",
                "sku": 123
              }
            ]
          }
        },
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/definitions/Product"
          }
        },
        "required": [
          "product"
        ]
      },
      "ProductResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "An unsigned 64-bit integer that's used as a unique identifier for the product."
          },
          "title": {
            "type": "string",
            "description": "The name of the product."
          },
          "body_html": {
            "type": "string",
            "description": "A description of the product. Supports HTML formatting."
          },
          "vendor": {
            "type": "string",
            "description": "The name of the product's vendor."
          },
          "product_type": {
            "type": "string",
            "description": "A categorization for the product used for filtering and searching products."
          },
          "created_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the product was created."
          },
          "handle": {
            "type": "string",
            "description": "A unique human-friendly string for the product."
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the product was last modified."
          },
          "published_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the product was published."
          },
          "template_suffix": {
            "type": "string",
            "description": "The suffix of the Liquid template used for the product page."
          },
          "published_scope": {
            "type": "string",
            "description": "Whether the product is published to the Point of Sale channel."
          },
          "tags": {
            "type": "string",
            "description": "A string of comma-separated tags that are used for filtering and search. A product can have up to 250 tags. Each tag can have up to 255 characters."
          },
          "admin_graphql_api_id": {
            "type": "string",
            "description": "Admin GraphQL API ID"
          },
          "variants": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric identifier for the product variant."
                },
                "product_id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric identifier for the product."
                },
                "title": {
                  "type": "string",
                  "description": "The title of the product variant. The title field is a concatenation of the option1, option2, and option3 fields. You can only update title indirectly using the option fields."
                },
                "price": {
                  "type": "string",
                  "description": "The price of the product variant."
                },
                "sku": {
                  "type": "string",
                  "description": "A unique identifier for the product variant in the shop."
                },
                "position": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The order of the product variant in the list of product variants. The first position in the list is 1. The position of variants is indicated by the order in which they are listed"
                },
                "inventory_policy": {
                  "type": "string",
                  "description": "Whether customers are allowed to place an order for the product variant when it's out of stock"
                },
                "compare_at_price": {
                  "type": "string",
                  "description": "The original price of the item before an adjustment or a sale."
                },
                "fulfillment_service": {
                  "type": "string",
                  "description": "The fulfillment service associated with the product variant."
                },
                "inventory_management": {
                  "type": "string",
                  "description": "The fulfillment service that tracks the number of items in stock for the product variant. "
                },
                "option1": {
                  "type": "string",
                  "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3"
                },
                "option2": {
                  "type": "string",
                  "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3"
                },
                "option3": {
                  "type": "string",
                  "description": "The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: option1, option2, option3"
                },
                "created_at": {
                  "type": "string",
                  "description": "The date and time (ISO 8601 format) when the product variant was created."
                },
                "updated_at": {
                  "type": "string",
                  "description": "The date and time when the product variant was last modified. Gets returned in ISO 8601 format."
                },
                "taxable": {
                  "type": "boolean",
                  "description": "Whether a tax is charged when the product variant is sold."
                },
                "barcode": {
                  "type": "string",
                  "description": "The barcode, UPC, or ISBN number for the product."
                },
                "grams": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The weight of the product variant in grams."
                },
                "image_id": {
                  "type": "string",
                  "description": "The unique numeric identifier for a product's image. The image must be associated to the same product as the variant."
                },
                "weight": {
                  "type": "number",
                  "format": "float",
                  "description": "The weight of the product variant in the unit system specified with weight_unit."
                },
                "weight_unit": {
                  "type": "string",
                  "description": "The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: g, kg, oz, and lb."
                },
                "inventory_item_id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique identifier for the inventory item."
                },
                "inventory_quantity": {
                  "type": "integer",
                  "format": "int32",
                  "description": "An aggregate of inventory across all locations."
                },
                "presentment_prices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "price": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "string",
                            "description": "The variant's price or compare-at price in the presentment currency."
                          },
                          "currency_code": {
                            "type": "string",
                            "description": " The three-letter code (ISO 4217 format) for one of the shop's enabled presentment currencies."
                          }
                        },
                        "description": "price"
                      },
                      "compare_at_price": {
                        "type": "string",
                        "description": "The original price of the item before an adjustment or a sale."
                      }
                    }
                  },
                  "description": "A list of the variant's presentment prices and compare-at prices in each of the shop's enabled presentment currencies. "
                },
                "admin_graphql_api_id": {
                  "type": "string",
                  "description": "Admin GraphQL API ID"
                }
              }
            },
            "description": "An array of product variants, each representing a different version of the product."
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric identifier for the product option."
                },
                "product_id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric identifier for the product."
                },
                "name": {
                  "type": "string",
                  "description": "Name of the product option."
                },
                "position": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Position of the product option."
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Values of the option."
                }
              }
            },
            "description": "The custom product properties. For example, Size, Color, and Material. Each product can have up to 3 options and each option value can be up to 255 characters. Product variants are made of up combinations of option values. Options cannot be created without values. To create new options, a variant with an associated option value also needs to be created."
          },
          "images": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "A unique numeric identifier for the product image."
                },
                "product_id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The id of the product associated with the image."
                },
                "position": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The order of the product image in the list. The first product image is at position 1 and is the main image for the product."
                },
                "created_at": {
                  "type": "string",
                  "description": "The date and time when the product image was created. The API returns this value in ISO 8601 format."
                },
                "updated_at": {
                  "type": "string",
                  "description": "The date and time when the product image was last modified. The API returns this value in ISO 8601 format."
                },
                "alt": {
                  "type": "string",
                  "description": "alt"
                },
                "width": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Width dimension of the image which is determined on upload."
                },
                "height": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Height dimension of the image which is determined on upload."
                },
                "src": {
                  "type": "string",
                  "description": "Specifies the location of the product image. This parameter supports URL filters that you can use to retrieve modified copies of the image. For example, add _small, to the filename to retrieve a scaled copy of the image at 100 x 100 px (for example, ipod-nano_small.png), or add _2048x2048 to retrieve a copy of the image constrained at 2048 x 2048 px resolution (for example, ipod-nano_2048x2048.png)."
                },
                "variant_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "description": "An array of variant ids associated with the image."
                },
                "admin_graphql_api_id": {
                  "type": "string",
                  "description": "Admin GraphQL API ID"
                }
              }
            },
            "description": "A list of product image objects, each one representing an image associated with the product."
          }
        }
      },
      "Product": {
        "title": "Product",
        "example": {
          "title": "Burton Custom Freestyle 151",
          "body_html": "<strong>Good snowboard!</strong>",
          "vendor": "Burton",
          "product_type": "Snowboard",
          "variants": [
            {
              "option1": "First",
              "price": "10.00",
              "sku": 123
            },
            {
              "option1": "Second",
              "price": "20.00",
              "sku": 123
            }
          ]
        },
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "body_html": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "product_type": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "template_suffix": {
            "type": "string"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Variant"
            }
          }
        },
        "required": [
          "title"
        ]
      },
      "Variant": {
        "title": "Variant",
        "example": {
          "option1": "First",
          "price": "10.00",
          "sku": 123
        },
        "type": "object",
        "properties": {
          "option1": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "sku": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "option1",
          "price",
          "sku"
        ]
      },
      "Updateaproduct": {
        "title": "Updateaproduct",
        "example": {
          "product": {
            "id": 9579007950,
            "title": "Updated Product Title",
            "variants": [
              {
                "id": 25831837123,
                "price": "2000.00",
                "sku": "Updating the Product SKU"
              }
            ]
          }
        },
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/definitions/Product1"
          }
        },
        "required": [
          "product"
        ]
      },
      "Product1": {
        "title": "Product1",
        "example": {
          "id": 9579007950,
          "title": "Updated Product Title",
          "variants": [
            {
              "id": 25831837123,
              "price": "2000.00",
              "sku": "Updating the Product SKU"
            }
          ]
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Variant1"
            }
          }
        },
        "required": [
          "id",
          "title",
          "variants"
        ]
      },
      "Variant1": {
        "title": "Variant1",
        "example": {
          "id": 25831837123,
          "price": "2000.00",
          "sku": "Updating the Product SKU"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "price": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "price",
          "sku"
        ]
      },
      "AddaproducttoacollectionRequest": {
        "title": "AddaproducttoacollectionRequest",
        "example": {
          "collect": {
            "product_id": 921728736,
            "collection_id": 841564295
          }
        },
        "type": "object",
        "properties": {
          "collect": {
            "$ref": "#/definitions/Collect"
          }
        },
        "required": [
          "collect"
        ]
      }
    },
    "parameters": {},
    "responses": {},
    "securityDefinitions": {},
    "x-ms-connector-metadata": [
      {
        "propertyName": "Website",
        "propertyValue": "https://shopify.dev/concepts/shopify-introduction"
      },
      {
        "propertyName": "Privacy policy",
        "propertyValue": "https://www.shopify.com/legal/privacy"
      },
      {
        "propertyName": "Categories",
        "propertyValue": "Commerce;Marketing"
      }
    ]
  }
