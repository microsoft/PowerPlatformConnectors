{
  "swagger": "2.0",
  "info": {
    "title": "Hugging Face",
    "description": "We're on a journey to advance and democratize artificial intelligence through open source and open science. Hugging Face is most notable for its Transformers library built for natural language processing applications and its platform that allows users to share machine learning models and datasets.",
    "version": "1.0",
    "contact": {
      "name": "Troy Taylor",
      "url": "https://www.hitachisolutions.com",
      "email": "ttaylor@hitachisolutions.com"
    }
  },
  "host": "api-inference.huggingface.co",
  "basePath": "/models/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/{model_id}": {
      "post": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {},
              "description": "The response object.",
              "title": "Response"
            }
          }
        },
        "summary": "Run a model by ID",
        "description": "Retrieve the response for your requested input.",
        "operationId": "ModelIDPost",
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "x-ms-summary": "Model ID",
            "x-ms-url-encoding": "single",
            "description": "The model identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "inputs": {
                  "type": "string",
                  "description": "The inputs.",
                  "title": "Inputs"
                },
                "parameters": {
                  "type": "object",
                  "properties": {},
                  "description": "The parameters.",
                  "title": "Parameters"
                },
                "query": {
                  "type": "string",
                  "description": "The query.",
                  "title": "Query"
                },
                "table": {
                  "type": "object",
                  "properties": {},
                  "description": "The table.",
                  "title": "Table"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "use_cache": {
                      "type": "boolean",
                      "description": "Whether to use cache.",
                      "title": "Use Cache"
                    },
                    "wait_for_model": {
                      "type": "boolean",
                      "description": "Whether to wait for model.",
                      "title": "Wait For Model"
                    }
                  },
                  "title": "Options"
                }
              },
              "required": [
                "inputs"
              ]
            }
          }
        ]
      }
    },
    "/bert-base-uncased": {
      "post": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "score": {
                    "type": "number",
                    "format": "float",
                    "description": "The score.",
                    "title": "Score"
                  },
                  "token": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The token.",
                    "title": "Token"
                  },
                  "token_str": {
                    "type": "string",
                    "description": "The token string.",
                    "title": "Token String"
                  },
                  "sequence": {
                    "type": "string",
                    "description": "The sequence.",
                    "title": "Sequence"
                  }
                }
              }
            }
          }
        },
        "summary": "Run a fill mask task",
        "description": "Retrieve a list of possible missing words.",
        "operationId": "FillMaskPost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "inputs": {
                  "type": "string",
                  "description": "The inputs.",
                  "title": "Inputs"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "use_cache": {
                      "type": "boolean",
                      "description": "Whether to use cache.",
                      "title": "Use Cache"
                    },
                    "wait_for_model": {
                      "type": "boolean",
                      "description": "Whether to wait for model.",
                      "title": "Wait For Model"
                    }
                  },
                  "title": "Options"
                }
              },
              "required": [
                "inputs"
              ]
            }
          }
        ]
      }
    },
    "/facebook/bart-large-cnn": {
      "post": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "summary_text": {
                    "type": "string",
                    "description": "The summary text.",
                    "title": "Summary Text"
                  }
                }
              }
            }
          }
        },
        "summary": "Run a summarization task",
        "description": "Retrieve a shorter text summary.",
        "operationId": "SummarizationPost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "inputs": {
                  "type": "string",
                  "description": "The inputs.",
                  "title": "Inputs"
                },
                "parameters": {
                  "type": "object",
                  "properties": {
                    "do_sample": {
                      "type": "boolean",
                      "description": "Whether to do sample.",
                      "title": "Do Sample"
                    },
                    "min_length": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The minimum length.",
                      "title": "Min Length"
                    },
                    "max_length": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The max length.",
                      "title": "Max Length"
                    },
                    "top_k": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The top tokens considered.",
                      "title": "Top Tokens"
                    },
                    "top_p": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The top probably tokens.",
                      "title": "Top Probably"
                    },
                    "temperature": {
                      "type": "number",
                      "format": "float",
                      "description": "The temperature.",
                      "title": "Temperature"
                    },
                    "repetition_penalty": {
                      "type": "number",
                      "format": "float",
                      "description": "The repetition penalty.",
                      "title": "Repetition Penalty"
                    },
                    "max_time": {
                      "type": "number",
                      "format": "float",
                      "description": "The max time.",
                      "title": "Max Time"
                    }
                  },
                  "title": "Parameters"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "use_cache": {
                      "type": "boolean",
                      "description": "Whether to use cache.",
                      "title": "Use Cache"
                    },
                    "wait_for_model": {
                      "type": "boolean",
                      "description": "Whether to wait for model.",
                      "title": "Wait For Model"
                    }
                  },
                  "title": "Options"
                }
              }
            }
          }
        ]
      }
    },
    "/deepset/roberta-base-squad2": {
      "post": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "score": {
                  "type": "number",
                  "format": "float",
                  "description": "The score.",
                  "title": "Score"
                },
                "start": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The start.",
                  "title": "Start"
                },
                "end": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The end.",
                  "title": "End"
                },
                "answer": {
                  "type": "string",
                  "description": "The answer.",
                  "title": "Answer"
                }
              }
            }
          }
        },
        "summary": "Run a question answering task",
        "description": "Retrieve an answer to your question.",
        "operationId": "AnswerPost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "inputs": {
                  "type": "object",
                  "properties": {
                    "question": {
                      "type": "string",
                      "description": "The question.",
                      "title": "Question"
                    },
                    "context": {
                      "type": "string",
                      "description": "The context.",
                      "title": "Context"
                    }
                  },
                  "title": "Inputs",
                  "required": [
                    "context",
                    "question"
                  ]
                }
              },
              "required": [
                "inputs"
              ]
            }
          }
        ]
      }
    },
    "/sentence-transformers/all-MiniLM-L6-v2": {
      "post": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "float",
                "description": "The values.",
                "title": "Values"
              }
            }
          }
        },
        "summary": "Run a sentence similarity task",
        "description": "Calculate the semantic similarity between one text and a list of other sentences by comparing their embeddings.",
        "operationId": "SentenceSimilarityPost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "inputs": {
                  "type": "object",
                  "properties": {
                    "source_sentence": {
                      "type": "string",
                      "description": "The source sentence.",
                      "title": "Source Sentence"
                    },
                    "sentences": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The sentences.",
                      "title": "Sentences"
                    }
                  },
                  "title": "Inputs",
                  "required": [
                    "sentences",
                    "source_sentence"
                  ]
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "use_cache": {
                      "type": "boolean",
                      "description": "Whether to use cache.",
                      "title": "Use Cache"
                    },
                    "wait_for_model": {
                      "type": "boolean",
                      "description": "Whether to wait for model.",
                      "title": "Wait For Model"
                    }
                  }
                }
              },
              "required": [
                "inputs"
              ]
            }
          }
        ]
      }
    },
    "/distilbert-base-uncased-finetuned-sst-2-english": {
      "post": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "The label.",
                      "title": "Label"
                    },
                    "score": {
                      "type": "number",
                      "format": "float",
                      "description": "The score.",
                      "title": "Score"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Run a text classification task",
        "description": "Retrieves the likelihood of classes of an input for sentiment-analysis.",
        "operationId": "TextClassificationPost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "inputs": {
                  "type": "string",
                  "description": "The inputs.",
                  "title": "Inputs"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "use_cache": {
                      "type": "boolean",
                      "description": "Whether to use cache.",
                      "title": "Use Cache"
                    },
                    "wait_for_model": {
                      "type": "boolean",
                      "description": "Whether to wait for model.",
                      "title": "Wait For Model"
                    }
                  },
                  "title": "Options"
                }
              },
              "required": [
                "inputs"
              ]
            }
          }
        ]
      }
    },
    "/gpt2": {
      "post": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "generated_text": {
                    "type": "string",
                    "description": "The generated text.",
                    "title": "Generated Text"
                  }
                }
              }
            }
          }
        },
        "summary": "Run a text generation task",
        "description": "Retrieve a continuation of text from a prompt.",
        "operationId": "TextGenerationPost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "inputs": {
                  "type": "string",
                  "description": "The inputs.",
                  "title": "Inputs"
                },
                "parameters": {
                  "type": "object",
                  "properties": {
                    "do_sample": {
                      "type": "boolean",
                      "description": "Whether to do sample.",
                      "title": "Do Sample"
                    },
                    "min_length": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The minimum length.",
                      "title": "Min Length"
                    },
                    "max_length": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The max length.",
                      "title": "Max Length"
                    },
                    "top_k": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The top tokens considered.",
                      "title": "Top Tokens"
                    },
                    "top_p": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The top probably tokens.",
                      "title": "Top Probably"
                    },
                    "temperature": {
                      "type": "number",
                      "format": "float",
                      "description": "The temperature.",
                      "title": "Temperature"
                    },
                    "repetition_penalty": {
                      "type": "number",
                      "format": "float",
                      "description": "The repetition penalty.",
                      "title": "Repetition Penalty"
                    },
                    "max_time": {
                      "type": "number",
                      "format": "float",
                      "description": "The max time.",
                      "title": "Max Time"
                    }
                  },
                  "title": "Parameters"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "use_cache": {
                      "type": "boolean",
                      "description": "Whether to use cache.",
                      "title": "Use Cache"
                    },
                    "wait_for_model": {
                      "type": "boolean",
                      "description": "Whether to wait for model.",
                      "title": "Wait For Model"
                    }
                  },
                  "title": "Options"
                }
              }
            }
          }
        ]
      }
    },
    "/dbmdz/bert-large-cased-finetuned-conll03-english": {
      "post": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "entity_group": {
                    "type": "string",
                    "description": "The entity group.",
                    "title": "Entity Group"
                  },
                  "score": {
                    "type": "number",
                    "format": "float",
                    "description": "The score.",
                    "title": "Score"
                  },
                  "word": {
                    "type": "string",
                    "description": "The word.",
                    "title": "Word"
                  },
                  "start": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The start.",
                    "title": "Start"
                  },
                  "end": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The end.",
                    "title": "End"
                  }
                }
              }
            }
          }
        },
        "summary": "Run a token classification task",
        "description": "Retrieve sentence parsing keywords contained within the text.",
        "operationId": "TokenClassificationPost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "inputs": {
                  "type": "string",
                  "description": "The inputs.",
                  "title": "Inputs"
                },
                "parameters": {
                  "type": "object",
                  "properties": {
                    "aggregation_strategy": {
                      "type": "string",
                      "description": "The aggregation strategy.",
                      "title": "Aggregation Strategy"
                    }
                  },
                  "title": "Parameters"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "use_cache": {
                      "type": "boolean",
                      "description": "Whether to use cache.",
                      "title": "Use Cache"
                    },
                    "wait_for_model": {
                      "type": "boolean",
                      "description": "Whether to wait for model.",
                      "title": "Wait For Model"
                    }
                  },
                  "title": "Options"
                }
              },
              "required": [
                "inputs"
              ]
            }
          }
        ]
      }
    },
    "/t5-base": {
      "post": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "translation_text": {
                    "type": "string",
                    "description": "The translation text.",
                    "title": "Translation Text"
                  }
                }
              }
            }
          }
        },
        "summary": "Run an English to German translation task",
        "description": "Retrieves translated text into German.",
        "operationId": "TranslationPost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "inputs": {
                  "type": "string",
                  "description": "The inputs.",
                  "title": "Inputs"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "use_cache": {
                      "type": "boolean",
                      "description": "Whether to use cache.",
                      "title": "Use Cache"
                    },
                    "wait_for_model": {
                      "type": "boolean",
                      "description": "Whether to wait for model.",
                      "title": "Wait For Model"
                    }
                  }
                }
              },
              "required": [
                "inputs"
              ]
            }
          }
        ]
      }
    },
    "/facebook/bart-large-mnli": {
      "post": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "sequence": {
                  "type": "string",
                  "description": "The sequence.",
                  "title": "Sequence"
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The labels",
                  "title": "Labels"
                },
                "scores": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "float"
                  },
                  "description": "The scores.",
                  "title": "Scores"
                }
              }
            }
          }
        },
        "summary": "Run a zero-shot classification task",
        "description": "Retrieve the results from a passed sentence/paragraph and the possible labels for that sentence.",
        "operationId": "ZeroShotPost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "inputs": {
                  "type": "string",
                  "description": "The inputs.",
                  "title": "Inputs"
                },
                "parameters": {
                  "type": "object",
                  "properties": {
                    "candidate_labels": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The candidate labels.",
                      "title": "Candidate Labels"
                    },
                    "multi_label": {
                      "type": "boolean",
                      "description": "Whether multi label.",
                      "title": "Multi Label"
                    }
                  },
                  "title": "Parameters"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "use_cache": {
                      "type": "boolean",
                      "description": "Whether to use cache.",
                      "title": "Use Cache"
                    },
                    "wait_for_model": {
                      "type": "boolean",
                      "description": "Whether to wait for model.",
                      "title": "Wait For Model"
                    }
                  },
                  "title": "Options"
                }
              }
            }
          }
        ]
      }
    },
    "/microsoft/DialoGPT-large": {
      "post": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "generated_text": {
                  "type": "string",
                  "description": "The generated text.",
                  "title": "Generated Text"
                },
                "conversation": {
                  "type": "object",
                  "properties": {
                    "past_user_inputs": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The past user inputs.",
                      "title": "Past User Inputs"
                    },
                    "generated_responses": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The generated responses.",
                      "title": "Generated Responses"
                    }
                  },
                  "title": "Conversation"
                }
              }
            }
          }
        },
        "summary": "Run a conversational task",
        "description": "Retrieve a generated response to a conversation.",
        "operationId": "ConversationalPost",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "inputs": {
                  "type": "object",
                  "properties": {
                    "past_user_inputs": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The past user inputs.",
                      "title": "Past User Inputs"
                    },
                    "generated_responses": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The generated responses.",
                      "title": "Generated Responses"
                    },
                    "text": {
                      "type": "string",
                      "description": "The text.",
                      "title": "Text"
                    }
                  },
                  "title": "Inputs",
                  "required": [
                    "text"
                  ]
                },
                "parameters": {
                  "type": "object",
                  "properties": {
                    "min_length": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The minimum length.",
                      "title": "Min Length"
                    },
                    "max_length": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The max length.",
                      "title": "Max Length"
                    },
                    "top_k": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The top tokens considered.",
                      "title": "Top Tokens"
                    },
                    "top_p": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The top probably tokens.",
                      "title": "Top Probably"
                    },
                    "temperature": {
                      "type": "number",
                      "format": "float",
                      "description": "The temperature.",
                      "title": "Temperature"
                    },
                    "repetition_penalty": {
                      "type": "number",
                      "format": "float",
                      "description": "The repetition penalty.",
                      "title": "Repetition Penalty"
                    },
                    "max_time": {
                      "type": "number",
                      "format": "float",
                      "description": "The max time.",
                      "title": "Max Time"
                    }
                  },
                  "title": "Parameters"
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "use_cache": {
                      "type": "boolean",
                      "description": "Whether to use cache.",
                      "title": "Use Cache"
                    },
                    "wait_for_model": {
                      "type": "boolean",
                      "description": "Whether to wait for model.",
                      "title": "Wait For Model"
                    }
                  },
                  "title": "Options"
                }
              },
              "required": [
                "inputs"
              ]
            }
          }
        ]
      }
    }
  },
  "definitions": {},
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": [],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://huggingface.co/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://huggingface.co/privacy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "AI"
    }
  ]
}