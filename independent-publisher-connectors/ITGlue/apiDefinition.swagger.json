{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "ITGlue",
    "description": "ITGlue Connector can be used to create, retrieve, update, and delete data in your IT Glue account. This includes Configurations, Passwords and Flexible Assets",
    "contact": {
      "name": "Nirmal",
      "url": "http://nkdews.com",
      "email": "nirmalk.web@gmail.com"
    },
    "termsOfService": "https://api.itglue.com/developer"
  },
  "host": "api.itglue.com",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/organization_types": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "data",
                  "items": {
                    "$ref": "#/definitions/organization-types-read"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/list-meta"
                },
                "links": {
                  "$ref": "#/definitions/list-links"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          }
        },
        "summary": "List Organization Types",
        "description": "Returns a list of organization types in your account.",
        "operationId": "List-Organization-Types",
        "parameters": [
          {
            "name": "filter[name]",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter by Name",
            "x-ms-summary": "Filter by Name",
            "x-ms-visibility": "advanced"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "name",
              "id",
              "created_at",
              "updated_at",
              "-name",
              "-id",
              "-created-at",
              "-updated-at"
            ],
            "description": "Sort by Field Name. fieldname for ascending, -fieldname for descending.",
            "x-ms-summary": "Sort",
            "x-ms-visibility": "advanced"
          },
          {
            "$ref": "#/parameters/page-number"
          },
          {
            "$ref": "#/parameters/page-size"
          }
        ],
        "tags": [
          "Organization Types"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/organization-types-read"
                }
              }
            }
          }
        },
        "summary": "Create an Organization Type",
        "description": "Creates a new organization type in your account. Returns the created object if successful.",
        "operationId": "Post-Organization-Type",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/organization-types-create"
                }
              },
              "required": [
                "data"
              ]
            },
            "x-examples": {
              "example-1": {
                "data": {
                  "type": "organization-types",
                  "attributes": {
                    "name": "string"
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/content-type"
          }
        ],
        "tags": [
          "Organization Types"
        ]
      }
    },
    "/organization_types/{object_id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/object_id"
          }
        ],
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "id"
                    },
                    "type": {
                      "type": "string",
                      "description": "type"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "name"
                        },
                        "created-at": {
                          "type": "string",
                          "description": "created-at"
                        },
                        "updated-at": {
                          "type": "string",
                          "description": "updated-at"
                        }
                      },
                      "description": "attributes"
                    }
                  },
                  "description": "data"
                }
              }
            }
          }
        },
        "summary": "Get an Organization Type",
        "description": "Returns the details of an existing organization type.",
        "operationId": "Get-organization-type",
        "tags": [
          "Organization Types"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/organization-types-read"
                }
              },
              "required": [
                "data"
              ]
            }
          }
        },
        "summary": "Update an Organization Type",
        "description": "Updates an organization type in your account. Returns 422 Bad Request error if trying to update an externally synced record.",
        "operationId": "Patch-organization-type",
        "parameters": [
          {
            "$ref": "#/parameters/object_id"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/organization-types-create"
                }
              },
              "required": [
                "data"
              ]
            }
          },
          {
            "$ref": "#/parameters/content-type"
          }
        ],
        "tags": [
          "Organization Types"
        ]
      }
    },
    "/configuration_types": {
      "get": {
        "summary": "List Configuration Types",
        "description": "Returns a list of configuration types in your account.",
        "operationId": "List-Configuration-Types",
        "parameters": [
          {
            "$ref": "#/parameters/page-size"
          },
          {
            "$ref": "#/parameters/page-number"
          },
          {
            "type": "string",
            "in": "query",
            "name": "filter[name]",
            "description": "Filter the results by the Name Field. Exact match only.",
            "x-ms-summary": "Filter By Name",
            "x-ms-visibility": "advanced"
          },
          {
            "type": "string",
            "in": "query",
            "name": "sort",
            "description": "Select the field to sort by. Ascending by fieldname, descending by -fieldname.",
            "enum": [
              "name",
              "id",
              "created_at",
              "updated_at",
              "-name",
              "-id",
              "-created_at",
              "-updated_at"
            ],
            "x-ms-summary": "Sort Order",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucess",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "data",
                  "items": {
                    "$ref": "#/definitions/configuration-types-read"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/list-meta"
                },
                "links": {
                  "$ref": "#/definitions/list-links"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          }
        },
        "tags": [
          "Configuration Types"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "description": "Created",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/configuration-types-read"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "422": {
            "description": "Unprocessable Entity (WebDAV)",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/configuration-types-create"
                }
              },
              "required": [
                "data"
              ]
            },
            "description": "Configuration Types"
          },
          {
            "$ref": "#/parameters/content-type"
          }
        ],
        "summary": "Create a Configuration Type",
        "description": "Creates a new configuration type in your account. Returns the created object if successful.",
        "operationId": "Post-Configuration-Type",
        "tags": [
          "Configuration Types"
        ]
      }
    },
    "/configuration_types/{object_id}": {
      "get": {
        "summary": "Get a Configuration Type",
        "operationId": "Get-Configuration-Type",
        "description": "Returns the details of an existing configuration type.",
        "parameters": [
          {
            "$ref": "#/parameters/object_id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Default",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/configuration-types-read"
                }
              },
              "required": [
                "data"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          },
          "404": {
            "$ref": "#/responses/401-Unauthorized"
          }
        },
        "tags": [
          "Configuration Types"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Default",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/configuration-types-read"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403-Forbidden"
          },
          "404": {
            "$ref": "#/responses/404-Not-Found"
          },
          "415": {
            "$ref": "#/responses/415-Bad_Content_Type"
          },
          "422": {
            "$ref": "#/responses/422-Bad_Request"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/object_id"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/configuration-types-create"
                }
              },
              "required": [
                "data"
              ]
            },
            "description": "Configuration Types"
          },
          {
            "$ref": "#/parameters/content-type"
          }
        ],
        "summary": "Update a Configuration Type",
        "description": "Updates a configuration type in your account. Returns 422 Bad Request error if trying to update an externally synced record.",
        "operationId": "Patch-Configuration-Type",
        "tags": [
          "Configuration Types"
        ]
      }
    },
    "/configuration_statuses": {
      "get": {
        "summary": "List Configuration Statuses",
        "description": "Returns a list of configuration statuses in your account.",
        "operationId": "List-Configuration-Statuses",
        "parameters": [
          {
            "$ref": "#/parameters/page-size"
          },
          {
            "$ref": "#/parameters/page-number"
          },
          {
            "type": "string",
            "in": "query",
            "name": "filter[name]",
            "description": "Filter the results by the Name Field. Exact match only.",
            "x-ms-summary": "Filter By Name",
            "x-ms-visibility": "advanced"
          },
          {
            "type": "string",
            "in": "query",
            "name": "sort",
            "description": "Select the field to sort by. Ascending by fieldname, descending by -fieldname.",
            "enum": [
              "name",
              "id",
              "created_at",
              "updated_at",
              "-name",
              "-id",
              "-created_at",
              "-updated_at"
            ],
            "x-ms-summary": "Sort Order",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucess",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "data",
                  "items": {
                    "$ref": "#/definitions/configuration-statuses-read"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/list-meta"
                },
                "links": {
                  "$ref": "#/definitions/list-links"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          }
        },
        "tags": [
          "Configuration Statuses"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "description": "Created",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/configuration-statuses-read"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "422": {
            "description": "Unprocessable Entity (WebDAV)",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/configuration-statuses-create"
                }
              },
              "required": [
                "data"
              ]
            },
            "description": "Configuration Status"
          },
          {
            "$ref": "#/parameters/content-type"
          }
        ],
        "summary": "Create a Configuration Status",
        "description": "Creates a new configuration status in your account. Returns the created object if successful.",
        "operationId": "Post-Configuration-Status",
        "tags": [
          "Configuration Statuses"
        ]
      }
    },
    "/configuration_statuses/{object_id}": {
      "get": {
        "summary": "Get a Configuration Status",
        "operationId": "Get-Configuration-Status",
        "description": "Returns the details of an existing configuration status.",
        "parameters": [
          {
            "$ref": "#/parameters/object_id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Default",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/configuration-statuses-read"
                }
              },
              "required": [
                "data"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          },
          "404": {
            "$ref": "#/responses/401-Unauthorized"
          }
        },
        "tags": [
          "Configuration Statuses"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Configuration Status",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/configuration-statuses-read"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403-Forbidden"
          },
          "404": {
            "$ref": "#/responses/404-Not-Found"
          },
          "415": {
            "$ref": "#/responses/415-Bad_Content_Type"
          },
          "422": {
            "$ref": "#/responses/422-Bad_Request"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/object_id"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/configuration-statuses-create"
                }
              },
              "required": [
                "data"
              ]
            },
            "description": "Configuration Status"
          },
          {
            "$ref": "#/parameters/content-type"
          }
        ],
        "summary": "Update a Configuration Status",
        "description": "Updates a configuration status in your account. Returns 422 Bad Request error if trying to update an externally synced record.",
        "operationId": "Patch-Configuration-Status",
        "tags": [
          "Configuration Statuses"
        ]
      }
    },
    "/countries": {
      "get": {
        "summary": "List Countries",
        "tags": [
          "Countries"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Countries",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/countries-read"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/list-meta"
                },
                "links": {
                  "$ref": "#/definitions/list-links"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          }
        },
        "operationId": "List-Countries",
        "description": "Returns a list of supported countries.",
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "filter[name]",
            "description": "Enter the Country Name field value to filter by.",
            "x-ms-summary": "Filter by Name",
            "x-ms-visibility": "advanced"
          },
          {
            "type": "string",
            "in": "query",
            "name": "filter[iso]",
            "description": "Enter the Country ISO codue field value to filter by.",
            "x-ms-summary": "Filter by Id",
            "x-ms-visibility": "advanced"
          },
          {
            "type": "string",
            "in": "query",
            "name": "sort",
            "x-ms-summary": "Sort by",
            "x-ms-visibility": "advanced",
            "enum": [
              "id",
              "name",
              "created-at",
              "updated-at",
              "-id",
              "-name",
              "-created-at",
              "-updated-at"
            ],
            "description": "Enter the field to sort by, fieldname for ascending, and -fieldname for descending."
          },
          {
            "$ref": "#/parameters/page-number"
          },
          {
            "$ref": "#/parameters/page-size"
          }
        ]
      }
    },
    "/countries/{object_id}": {
      "get": {
        "summary": "Get a Country",
        "parameters": [
          {
            "$ref": "#/parameters/object_id"
          }
        ],
        "tags": [
          "Countries"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/countries-read"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          },
          "404": {
            "$ref": "#/responses/404-Not-Found"
          }
        },
        "operationId": "Get-Country",
        "description": "Returns the details of one of the supported countries."
      },
      "parameters": [
        {
          "$ref": "#/parameters/object_id"
        }
      ]
    },
    "/flexible_asset_types": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/flexible-asset-types-read"
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/flexible-asset-fields-read"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/list-meta"
                },
                "links": {
                  "$ref": "#/definitions/list-links"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          }
        },
        "summary": "List Flexible Asset Types",
        "operationId": "List-Flexible-Asset-Types",
        "parameters": [
          {
            "$ref": "#/parameters/page-size"
          },
          {
            "$ref": "#/parameters/page-number"
          },
          {
            "type": "number",
            "in": "query",
            "name": "filter[id]",
            "x-ms-summary": "Filter by ID",
            "description": "Filter the list based on an Object ID",
            "x-ms-visibility": "advanced"
          },
          {
            "type": "string",
            "in": "query",
            "name": "filter[name]",
            "x-ms-summary": "Filter by Name",
            "description": "Filter the list based on the Type's name field",
            "x-ms-visibility": "advanced"
          },
          {
            "type": "string",
            "in": "query",
            "name": "filter[icon]",
            "x-ms-summary": "Filter by Icon",
            "description": "Filter the list based on the Type's icon field",
            "x-ms-visibility": "advanced"
          },
          {
            "type": "string",
            "in": "query",
            "name": "filter[enabled]",
            "x-ms-summary": "Filter by Enabled",
            "description": "Filter the list based on the Type's enabled status",
            "x-ms-visibility": "advanced"
          },
          {
            "type": "string",
            "in": "query",
            "name": "sort",
            "x-ms-summary": "Sort Order",
            "description": "Sort the list based on one of id, name, created_at, or updated_at fields",
            "x-ms-visibility": "advanced"
          },
          {
            "type": "string",
            "in": "query",
            "name": "include",
            "x-ms-summary": "Expand Results",
            "description": "Expand the results to also include flexible_asset_fields",
            "enum": [
              "flexible_asset_fields"
            ],
            "x-ms-visibility": "advanced"
          }
        ],
        "description": "Returns a list of flexible asset types in your account.",
        "tags": [
          "Flexible Asset Types"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/flexible-asset-types-read"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403-Forbidden"
          },
          "415": {
            "$ref": "#/responses/415-Bad_Content_Type"
          },
          "422": {
            "$ref": "#/responses/422-Bad_Request"
          },
          "500": {
            "$ref": "#/responses/500-Internal_Server_Error"
          }
        },
        "summary": "Create a Flexible Asset Type",
        "operationId": "Post-Flexible-Asset-Type",
        "description": "Creates a new flexible asset type in your account. Returns the created object if successful. Use the nested Fields array to add one or more flexible asset fields to a flexible asset type. Creating a new flexible asset type requires a)at least the first field to be defined in the nested Fields array (located under advanced); b) at least one field needs to be set as Use for Title; and c) one field set as Show in List. Failure to meet all three criteria will generate an error 422.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/flexible-asset-types-create"
                }
              },
              "required": [
                "data"
              ]
            },
            "description": "Flexible Asset Types"
          },
          {
            "$ref": "#/parameters/content-type"
          }
        ],
        "tags": [
          "Flexible Asset Types"
        ]
      }
    },
    "/flexible_asset_types/{object_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/flexible-asset-types-read"
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/flexible-asset-fields-read"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          },
          "404": {
            "$ref": "#/responses/404-Not-Found"
          }
        },
        "summary": "Get a Flexible Asset Type",
        "description": "Returns the details of an existing flexible asset type.",
        "operationId": "Get-Flexible-Asset-Type",
        "parameters": [
          {
            "$ref": "#/parameters/object_id"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "flexible_asset_fields"
            ],
            "x-ms-summary": "Expand Results",
            "description": "Expand the returned objects to include the selected. Use Comma Separated List for multiple items.",
            "x-ms-visibility": "advanced"
          }
        ],
        "tags": [
          "Flexible Asset Types"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/flexible-asset-types-read"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403-Forbidden"
          },
          "404": {
            "$ref": "#/responses/404-Not-Found"
          },
          "415": {
            "$ref": "#/responses/415-Bad_Content_Type"
          },
          "422": {
            "$ref": "#/responses/422-Bad_Request"
          },
          "500": {
            "$ref": "#/responses/500-Internal_Server_Error"
          }
        },
        "summary": "Update a Flexible Asset Type",
        "operationId": "Patch-Flexible-Asset-Type",
        "description": "Updates the details of an existing flexible asset type in your account. Returns 403 Forbidden error if any relationships are present in the request. An update does not require that the entire object resource with all of its attributes be enclosed. Any attributes you don't specify will remain unchanged.",
        "parameters": [
          {
            "$ref": "#/parameters/object_id"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/flexible-asset-types-update"
                }
              },
              "required": [
                "data"
              ]
            },
            "description": "Flexible Asset Types"
          },
          {
            "$ref": "#/parameters/content-type"
          }
        ],
        "tags": [
          "Flexible Asset Types"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/object_id"
        }
      ]
    },
    "/domains": {
      "get": {
        "summary": "List Domains",
        "tags": [
          "Domains"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Domains",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "$ref": "#/definitions/domains"
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/global-includable-objects"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/list-meta"
                },
                "links": {
                  "$ref": "#/definitions/list-links"
                }
              },
              "required": [
                "data"
              ]
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          }
        },
        "operationId": "List-Domains",
        "description": "Returns a list of domains for all organizations or for a specified organization.",
        "parameters": [
          {
            "$ref": "#/parameters/page-size"
          },
          {
            "$ref": "#/parameters/page-number"
          },
          {
            "type": "string",
            "in": "query",
            "name": "filter[id]",
            "description": "Specify the ID you wish to filter results by.",
            "x-ms-summary": "Filter by ID",
            "x-ms-visibility": "advanced"
          },
          {
            "type": "integer",
            "in": "query",
            "name": "filter[organization_id]",
            "description": "Specify the Organization ID you wish to filter results by.",
            "x-ms-summary": "Organization ID",
            "x-ms-visibility": "advanced"
          },
          {
            "type": "string",
            "in": "query",
            "name": "sort",
            "description": "Select the field to sort by. Ascending by fieldname, descending by -fieldname.",
            "enum": [
              "created_at",
              "updated_at",
              "-created_at",
              "-updated_at"
            ],
            "x-ms-summary": "Sort Order",
            "x-ms-visibility": "advanced"
          },
          {
            "type": "string",
            "in": "query",
            "name": "include",
            "description": "Expand the returned objects to include the selected. Use Comma Separated List for multiple items.",
            "enum": [
              "passwords",
              "attachments",
              "user_resource_accesses",
              "group_resource_accesses"
            ],
            "x-ms-summary": "Expand Results",
            "x-ms-visibility": "advanced"
          }
        ]
      }
    },
    "/flexible_asset_types/{parent_id}/relationships/flexible_asset_fields": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/parent_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "data",
                  "items": {
                    "$ref": "#/definitions/flexible-asset-fields-read"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/401-Unauthorized"
          },
          "404": {
            "$ref": "#/responses/404-Not-Found"
          }
        },
        "summary": "List Flexible Asset Fields",
        "description": "Returns a list of fields for the specified flexible asset type.",
        "operationId": "List-Flexible-Asset-Fields",
        "tags": [
          "Flexible Asset Types",
          "Flexible Asset Fields"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/parent_id"
        }
      ]
    }
  },
  "definitions": {
    "domains": {
      "description": "Domains",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "minLength": 1
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number"
            },
            "name": {
              "type": "string",
              "minLength": 1
            },
            "created-at": {
              "type": "string",
              "minLength": 1
            },
            "updated-at": {
              "type": "string",
              "minLength": 1
            },
            "organization-id": {
              "type": "number"
            },
            "organization-name": {
              "type": "string",
              "minLength": 1
            },
            "resource-url": {
              "type": "string",
              "minLength": 1
            },
            "restricted": {
              "type": "boolean"
            },
            "my-glue": {
              "type": "boolean"
            },
            "notes": {
              "type": "string",
              "minLength": 1
            },
            "registrar-name": {
              "type": "string",
              "minLength": 1
            },
            "expires-on": {
              "type": "string",
              "minLength": 1
            },
            "screenshot": {}
          }
        },
        "relationships": {
          "type": "object",
          "properties": {
            "user-resource-accesses": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "resource-accesses"
                        ],
                        "minLength": 1
                      }
                    }
                  }
                }
              }
            },
            "group-resource-accesses": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "group-resource-accesses"
                        ],
                        "minLength": 1
                      }
                    }
                  }
                }
              }
            },
            "passwords": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "passwords"
                        ],
                        "minLength": 1
                      }
                    }
                  }
                }
              }
            },
            "attachments": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "attachments"
                        ],
                        "minLength": 1
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "required": [
        "id",
        "type",
        "attributes"
      ]
    },
    "attachments": {
      "description": "Attachments",
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "type": {
          "type": "string",
          "minLength": 1
        },
        "attributes": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1
            },
            "attachment-file-name": {
              "type": "string",
              "minLength": 1
            },
            "attachment-content-type": {
              "type": "string",
              "minLength": 1
            },
            "attachment-file-size": {
              "type": "number"
            },
            "ext": {
              "type": "string",
              "minLength": 1
            },
            "created-at": {
              "type": "string",
              "minLength": 1
            },
            "updated-at": {
              "type": "string",
              "minLength": 1
            },
            "viewable": {
              "type": "boolean"
            },
            "download-url": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      },
      "required": [
        "id",
        "type",
        "attributes"
      ]
    },
    "passwords": {
      "description": "Passwords",
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "type": {
          "type": "string",
          "minLength": 1
        },
        "attributes": {
          "type": "object",
          "properties": {
            "organization-id": {
              "type": "number"
            },
            "organization-name": {
              "type": "string",
              "minLength": 1
            },
            "resource-url": {
              "type": "string",
              "minLength": 1
            },
            "restricted": {
              "type": "boolean"
            },
            "my-glue": {
              "type": "boolean"
            },
            "name": {
              "type": "string",
              "minLength": 1
            },
            "autofill-selectors": {},
            "username": {
              "type": "string",
              "minLength": 1
            },
            "url": {
              "type": "string",
              "minLength": 1
            },
            "notes": {},
            "password-updated-at": {
              "type": "string",
              "minLength": 1
            },
            "updated-by": {
              "type": "number"
            },
            "updated-by-type": {
              "type": "string",
              "minLength": 1
            },
            "resource-id": {
              "type": "number"
            },
            "cached-resource-type-name": {
              "type": "string",
              "minLength": 1
            },
            "cached-resource-name": {
              "type": "string",
              "minLength": 1
            },
            "password-category-id": {},
            "password-category-name": {},
            "created-at": {
              "type": "string",
              "minLength": 1
            },
            "updated-at": {
              "type": "string",
              "minLength": 1
            },
            "otp-enabled": {
              "type": "boolean"
            },
            "password-folder-id": {},
            "resource-type": {
              "type": "string",
              "minLength": 1
            },
            "parent-url": {
              "type": "string",
              "minLength": 1
            },
            "vault-id": {},
            "archived": {
              "type": "boolean"
            }
          }
        },
        "relationships": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/attachments"
          }
        }
      },
      "required": [
        "id",
        "type",
        "attributes"
      ]
    },
    "resource-accesses": {
      "description": "Resource Accesses",
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "type": {
          "type": "string",
          "minLength": 1
        },
        "attributes": {
          "type": "object",
          "properties": {
            "accessor-id": {
              "type": "number"
            },
            "accessor-type": {
              "type": "string",
              "minLength": 1
            },
            "name": {
              "type": "string",
              "minLength": 1
            },
            "meta": {
              "type": "object",
              "properties": {
                "role-name": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          }
        }
      },
      "required": [
        "id",
        "type",
        "attributes"
      ]
    },
    "list-meta": {
      "description": "List Meta",
      "type": "object",
      "properties": {
        "current-page": {
          "type": "number"
        },
        "next-page": {
          "type": "number"
        },
        "prev-page": {
          "type": "number"
        },
        "total-pages": {
          "type": "number"
        },
        "total-count": {
          "type": "number"
        },
        "filters": {
          "type": "object"
        }
      }
    },
    "list-links": {
      "description": "List Links",
      "type": "object",
      "properties": {
        "self": {
          "type": "string",
          "minLength": 1
        },
        "first": {
          "type": "string",
          "minLength": 1
        },
        "prev": {
          "type": "string",
          "minLength": 1
        },
        "next": {
          "type": "string",
          "minLength": 1
        },
        "last": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "error-response": {
      "description": "Error Response",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "minLength": 1
        }
      },
      "required": [
        "message"
      ]
    },
    "flexible-asset-types-read": {
      "description": "Flexible Asset Types",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "minLength": 1
        },
        "attributes": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1
            },
            "created-at": {
              "type": "string",
              "minLength": 1,
              "readOnly": true
            },
            "updated-at": {
              "type": "string",
              "minLength": 1,
              "readOnly": true
            },
            "description": {
              "type": "string",
              "minLength": 1
            },
            "icon": {
              "type": "string",
              "minLength": 1
            },
            "enabled": {
              "type": "boolean"
            },
            "show-in-menu": {
              "type": "boolean"
            }
          }
        },
        "relationships": {
          "type": "object",
          "properties": {
            "flexible-asset-fields": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "flexible-asset-fields"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "required": [
        "type",
        "attributes"
      ]
    },
    "flexible-asset-fields-read": {
      "description": "Flexible Asset Fields",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "minLength": 1
        },
        "attributes": {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "order": {
              "type": "number"
            },
            "name": {
              "type": "string",
              "minLength": 1
            },
            "kind": {
              "type": "string",
              "minLength": 1
            },
            "hint": {
              "type": "string",
              "minLength": 1
            },
            "decimals": {
              "type": "number"
            },
            "tag-type": {},
            "required": {
              "type": "boolean"
            },
            "use-for-title": {
              "type": "boolean"
            },
            "expiration": {
              "type": "boolean"
            },
            "show-in-list": {
              "type": "boolean"
            },
            "name-key": {
              "type": "string",
              "minLength": 1
            },
            "created-at": {
              "type": "string",
              "minLength": 1
            },
            "updated-at": {
              "type": "string",
              "minLength": 1
            },
            "flexible-asset-type-id": {
              "type": "number"
            },
            "default-value": {
              "type": "string",
              "minLength": 1
            }
          }
        },
        "relationships": {
          "type": "object",
          "properties": {
            "flexible-asset-type": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          }
        }
      },
      "required": [
        "id",
        "type",
        "attributes"
      ]
    },
    "global-includable-objects": {
      "description": "Global Includable Objects",
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "type": {
          "type": "string",
          "enum": [
            "attachments",
            "passwords",
            "resource-accesses",
            "group-resource-access"
          ],
          "minLength": 1
        },
        "attributes": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1
            },
            "attachment-file-name": {
              "type": "string",
              "minLength": 1
            },
            "attachment-content-type": {
              "type": "string",
              "minLength": 1
            },
            "attachment-file-size": {
              "type": "number"
            },
            "ext": {
              "type": "string",
              "minLength": 1
            },
            "created-at": {
              "type": "string",
              "minLength": 1
            },
            "updated-at": {
              "type": "string",
              "minLength": 1
            },
            "viewable": {
              "type": "boolean"
            },
            "download-url": {
              "type": "string",
              "minLength": 1
            },
            "organization-id": {
              "type": "number"
            },
            "organization-name": {
              "type": "string",
              "minLength": 1
            },
            "resource-url": {
              "type": "string",
              "minLength": 1
            },
            "restricted": {
              "type": "boolean"
            },
            "my-glue": {
              "type": "boolean"
            },
            "autofill-selectors": {},
            "username": {
              "type": "string",
              "minLength": 1
            },
            "url": {
              "type": "string",
              "minLength": 1
            },
            "notes": {},
            "password-updated-at": {
              "type": "string",
              "minLength": 1
            },
            "updated-by": {
              "type": "number"
            },
            "updated-by-type": {
              "type": "string",
              "minLength": 1
            },
            "resource-id": {
              "type": "number"
            },
            "cached-resource-type-name": {
              "type": "string",
              "minLength": 1
            },
            "cached-resource-name": {
              "type": "string",
              "minLength": 1
            },
            "password-category-id": {},
            "password-category-name": {},
            "otp-enabled": {
              "type": "boolean"
            },
            "password-folder-id": {},
            "resource-type": {
              "type": "string",
              "minLength": 1
            },
            "parent-url": {
              "type": "string",
              "minLength": 1
            },
            "vault-id": {},
            "archived": {
              "type": "boolean"
            },
            "id": {
              "type": "number"
            },
            "order": {
              "type": "number"
            },
            "kind": {
              "type": "string",
              "minLength": 1
            },
            "hint": {
              "type": "string",
              "minLength": 1
            },
            "decimals": {
              "type": "number"
            },
            "tag-type": {},
            "required": {
              "type": "boolean"
            },
            "use-for-title": {
              "type": "boolean"
            },
            "expiration": {
              "type": "boolean"
            },
            "show-in-list": {
              "type": "boolean"
            },
            "name-key": {
              "type": "string",
              "minLength": 1
            },
            "flexible-asset-type-id": {
              "type": "number"
            },
            "default-value": {
              "type": "string",
              "minLength": 1
            },
            "accessor-id": {
              "type": "number"
            },
            "accessor-type": {
              "type": "string",
              "minLength": 1
            },
            "meta": {
              "type": "object",
              "properties": {
                "role-name": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          }
        },
        "relationships": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "type": {
                "type": "string",
                "minLength": 1
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "attachment-file-name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "attachment-content-type": {
                    "type": "string",
                    "minLength": 1
                  },
                  "attachment-file-size": {
                    "type": "number"
                  },
                  "ext": {
                    "type": "string",
                    "minLength": 1
                  },
                  "created-at": {
                    "type": "string",
                    "minLength": 1
                  },
                  "updated-at": {
                    "type": "string",
                    "minLength": 1
                  },
                  "viewable": {
                    "type": "boolean"
                  },
                  "download-url": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          }
        }
      },
      "required": [
        "id",
        "type",
        "attributes"
      ]
    },
    "flexible-asset-types-create": {
      "description": "Flexible Asset Types",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "minLength": 1,
          "enum": [
            "flexible_asset_types"
          ],
          "x-ms-summary": "Record Type",
          "x-ms-visibility": "internal",
          "description": "The record type this object represents",
          "default": "flexible_asset_types"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "x-ms-summary": "Record ID",
              "x-ms-visibility": "advanced",
              "description": "Read Only. Record ID used only for record identification during bulk updates only.",
              "readOnly": true
            },
            "name": {
              "type": "string",
              "minLength": 1,
              "x-ms-summary": "Name",
              "x-ms-visibility": "important",
              "description": "Name of this flexible asset type."
            },
            "description": {
              "type": "string",
              "minLength": 1,
              "x-ms-summary": "Description",
              "x-ms-visibility": "important",
              "description": "Description of this flexible asset type."
            },
            "icon": {
              "type": "string",
              "minLength": 1,
              "x-ms-summary": "Icon",
              "x-ms-visbility": "important",
              "description": "Name of the standard icon to use (e.g. envelope). Names can be found on the new flexible asset form in IT Glue under the Pick Icon button."
            },
            "enabled": {
              "type": "boolean",
              "x-ms-summary": "Enabled",
              "x-ms-visibility": "advanced",
              "description": "Is the new flexible asset enabled?"
            },
            "show-in-menu": {
              "type": "boolean",
              "x-ms-summary": "In Menu",
              "x-ms-visibility": "advanced",
              "description": "Is the new flexible asset viewable in the side menu?"
            }
          }
        },
        "relationships": {
          "type": "object",
          "required": [
            "flexible-asset-fields"
          ],
          "properties": {
            "flexible-asset-fields": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "x-ms-summary": "Fields",
                  "x-ms-visibility": "advanced",
                  "description": "JSON object representing the Fixed Asset Fields. Must include at least 1 field as title and show in list.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "minLength": 1,
                        "enum": [
                          "flexible_asset_fields"
                        ],
                        "x-ms-summary": "Record Type",
                        "x-ms-visibility": "internal",
                        "description": "Type of record this object represents",
                        "default": "flexible_asset_fields"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "order": {
                            "type": "integer",
                            "x-ms-summary": "Order",
                            "x-ms-visibility": "important",
                            "description": "Postion of this field on the Flexible asset form."
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "x-ms-summary": "Field Name",
                            "x-ms-visibility": "important",
                            "description": "Name of the field"
                          },
                          "kind": {
                            "type": "string",
                            "minLength": 1,
                            "x-ms-summary": "Field Type",
                            "x-ms-visibility": "important",
                            "description": "Data type of the new field",
                            "enum": [
                              "Checkbox",
                              "Header",
                              "Date",
                              "Number",
                              "Select",
                              "Text",
                              "Textbox",
                              "Upload",
                              "Tag",
                              "Precent",
                              "Password"
                            ]
                          },
                          "hint": {
                            "type": "string",
                            "minLength": 1,
                            "x-ms-summary": "Field Hint",
                            "x-ms-visibility": "advanced",
                            "description": "Hint Text for field"
                          },
                          "tag-type": {
                            "type": "string",
                            "minLength": 1,
                            "x-ms-summary": "Tag Type",
                            "x-ms-visibility": "advanced",
                            "description": "If Field Type is Tag, what type of asset should the tag be?",
                            "enum": [
                              "AccountsUsers",
                              "Checklists",
                              "ChecklistTemplates",
                              "Contacts",
                              "Configurations",
                              "Documents",
                              "Domains",
                              "Passwords",
                              "Locations",
                              "Organizations",
                              "SslCertificates",
                              "Tickets",
                              "[FlexibleAssetType: id]"
                            ]
                          },
                          "required": {
                            "type": "boolean",
                            "x-ms-summary": "Required",
                            "x-ms-visibility": "advanced",
                            "description": "Is the field required"
                          },
                          "show-in-list": {
                            "type": "boolean",
                            "x-ms-summary": "Show in List?",
                            "x-ms-visibility": "advanced",
                            "description": "Should this field show in the asset listing view."
                          },
                          "decimals": {
                            "type": "integer",
                            "x-ms-summary": "Number of Decimals",
                            "x-ms-visibility": "advanced",
                            "description": "For number fields, how many desimals to show / store."
                          },
                          "default_value": {
                            "type": "string",
                            "x-ms-summary": "Default Value",
                            "x-ms-visibility": "advanced",
                            "description": "Default value for new Assets"
                          },
                          "use_for_title": {
                            "type": "boolean",
                            "x-ms-summary": "Title Field",
                            "x-ms-visibility": "advanced",
                            "description": "Use this field in generating the Asset's title."
                          },
                          "expiration": {
                            "type": "boolean",
                            "x-ms-summary": "Expiration",
                            "x-ms-visibility": "advanced",
                            "description": "For date fields, field is treated at an expiration date for the Asset."
                          }
                        }
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "required": [
        "type",
        "attributes",
        "relationships"
      ]
    },
    "flexible-asset-types-update": {
      "description": "Flexible Asset Types",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "minLength": 1,
          "enum": [
            "flexible_asset_types"
          ],
          "x-ms-summary": "Record Type",
          "x-ms-visibility": "internal",
          "description": "The record type this object represents",
          "default": "flexible_asset_types"
        },
        "attributes": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "x-ms-summary": "Record ID",
              "x-ms-visibility": "advanced",
              "description": "Read Only. Record ID used only for record identification during bulk updates only.",
              "readOnly": true
            },
            "name": {
              "type": "string",
              "minLength": 1,
              "x-ms-summary": "Name",
              "x-ms-visibility": "important",
              "description": "Name of this flexible asset type."
            },
            "description": {
              "type": "string",
              "minLength": 1,
              "x-ms-summary": "Description",
              "x-ms-visibility": "important",
              "description": "Description of this flexible asset type."
            },
            "icon": {
              "type": "string",
              "minLength": 1,
              "x-ms-summary": "Icon",
              "x-ms-visbility": "important",
              "description": "Name of the standard icon to use (e.g. envelope). Names can be found on the new flexible asset form in IT Glue under the Pick Icon button."
            },
            "enabled": {
              "type": "boolean",
              "x-ms-summary": "Enabled",
              "x-ms-visibility": "advanced",
              "description": "Is the new flexible asset enabled?"
            },
            "show-in-menu": {
              "type": "boolean",
              "x-ms-summary": "In Menu",
              "x-ms-visibility": "advanced",
              "description": "Is the new flexible asset viewable in the side menu?"
            }
          }
        }
      },
      "required": [
        "type",
        "attributes"
      ]
    },
    "countries-read": {
      "description": "Countries",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1
        },
        "type": {
          "type": "string",
          "minLength": 1,
          "default": "countries",
          "enum": [
            "countries"
          ]
        },
        "attributes": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1
            },
            "iso": {
              "type": "string",
              "minLength": 1
            },
            "created-at": {
              "type": "string",
              "minLength": 1
            },
            "updated-at": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      },
      "required": [
        "id",
        "type"
      ]
    },
    "configuration-types-read": {
      "description": "Configuration Types",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1
        },
        "type": {
          "type": "string",
          "minLength": 1
        },
        "attributes": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1
            },
            "configuration-count": {
              "type": "number"
            },
            "created-at": {
              "type": "string",
              "minLength": 1
            },
            "updated-at": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      },
      "required": [
        "id",
        "type"
      ]
    },
    "configuration-types-create": {
      "description": "Configuration Types",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "minLength": 1,
          "default": "configuration-types",
          "x-ms-summary": "Record Type",
          "x-ms-visibility": "internal",
          "enum": [
            "configuration-types"
          ]
        },
        "attributes": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "x-ms-summary": "Name",
              "description": "Configuration Type Name",
              "x-ms-visibility": "important"
            }
          }
        }
      },
      "required": [
        "type"
      ]
    },
    "configuration-statuses-read": {
      "description": "Configuration Statuses",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1
        },
        "type": {
          "type": "string",
          "minLength": 1
        },
        "attributes": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1
            },
            "created-at": {
              "type": "string",
              "minLength": 1
            },
            "updated-at": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      },
      "required": [
        "id",
        "type"
      ]
    },
    "configuration-statuses-create": {
      "description": "Configuration Statuses",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "minLength": 1,
          "default": "configuration-statuses",
          "x-ms-summary": "Record Type",
          "x-ms-visibility": "internal",
          "enum": [
            "configuration-statuses"
          ]
        },
        "attributes": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "x-ms-summary": "Name",
              "description": "Configuration Status Name",
              "x-ms-visibility": "important"
            }
          }
        }
      },
      "required": [
        "type"
      ]
    },
    "organization-types-read": {
      "description": "Organization Types",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1
        },
        "type": {
          "type": "string",
          "minLength": 1,
          "default": "organization-types",
          "enum": [
            "organization-types"
          ]
        },
        "attributes": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1
            },
            "created-at": {
              "type": "string",
              "minLength": 1
            },
            "updated-at": {
              "type": "string",
              "minLength": 1
            },
            "synced": {
              "type": "boolean"
            }
          }
        }
      },
      "required": [
        "id",
        "type"
      ]
    },
    "organization-types-create": {
      "description": "Organization Types",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "minLength": 1,
          "default": "organization-types",
          "x-ms-visibility": "internal",
          "enum": [
            "organization-types"
          ]
        },
        "attributes": {
          "type": "object",
          "required": [
            "name"
          ],
          "description": "Name of the Organization Type.",
          "x-ms-summary": "Name",
          "x-ms-visibility": "important",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      },
      "required": [
        "type",
        "attributes"
      ]
    }
  },
  "parameters": {
    "page-number": {
      "name": "page[number]",
      "in": "query",
      "type": "integer",
      "description": "Return the Nth page based on page size",
      "x-ms-summary": "Page Number",
      "x-ms-visibility": "advanced"
    },
    "page-size": {
      "name": "page[size]",
      "in": "query",
      "required": false,
      "type": "integer",
      "description": "Number of rows to return per page",
      "x-ms-summary": "Rows per Page",
      "x-ms-visibility": "advanced"
    },
    "object_id": {
      "name": "object_id",
      "in": "path",
      "x-ms-url-encoding": "single",
      "required": true,
      "type": "integer",
      "description": "ID of the record to return",
      "x-ms-summary": "Record ID",
      "x-ms-visibility": "important"
    },
    "parent_id": {
      "name": "parent_id",
      "in": "path",
      "x-ms-url-encoding": "single",
      "required": true,
      "type": "integer",
      "description": "ID of the parent record",
      "x-ms-summary": "Parent Record ID",
      "x-ms-visibility": "important"
    },
    "content-type": {
      "name": "Content-Type",
      "type": "string",
      "in": "header",
      "description": "POST Methods must set Content-Type to application/vnd.api+json",
      "required": true,
      "default": "application/vnd.api+json",
      "x-ms-visibility": "internal"
    }
  },
  "responses": {
    "401-Unauthorized": {
      "description": "Forbidden Response",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "404-Not-Found": {
      "description": "Example response",
      "schema": {
        "description": "Not Found",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number"
                },
                "title": {
                  "type": "string",
                  "minLength": 1
                },
                "detail": {
                  "type": "string",
                  "minLength": 1
                },
                "source": {
                  "type": "object",
                  "properties": {
                    "pointer": {}
                  }
                }
              }
            }
          }
        }
      }
    },
    "403-Forbidden": {
      "description": "Example response",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "415-Bad_Content_Type": {
      "description": "Example response",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "422-Bad_Request": {
      "description": "Example response",
      "schema": {
        "description": "Bad Request",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "object",
                  "properties": {
                    "pointer": {}
                  }
                },
                "detail": {
                  "type": "string",
                  "minLength": 1
                },
                "title": {
                  "type": "string",
                  "minLength": 1
                },
                "status": {
                  "type": "number"
                }
              }
            }
          }
        }
      }
    },
    "500-Internal_Server_Error": {
      "description": "Error 500 cill be returned when using certain parts of the API that are documented, but appear to be no longer in play.\n\n> As an example, Creating (POST) a flexible_asset_types object with the fields definition inline in the\n> attributes object will create an error 500. The only / proper way to create fields is through the \n> relationships object adjacent to the data tag.",
      "schema": {
        "type": "object"
      }
    }
  },
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "x-api-key",
      "description": "Retreive and set the API Key from your IT Glue account."
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.itglue.com/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.itglue.com/privacy-policy/"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Data;Productivity"
    }
  ],
  "tags": [
    {
      "name": "Attachments",
      "description": "An attachment refers to a file upload associated with an asset.\nThis resource allows you to manage all attachments in your account. Note that attachments are accessed from the relevant endpoints (GET /configurations, GET /passwords, etc.) using the include=attachments parameter to return the file attachments in the relationships attributes of the requested objects. Example: /configurations/1?include=attachments\nAn attachment can belong to only one asset. Each asset can have relationships with one or more attachments."
    },
    {
      "name": "Configurations",
      "description": "A configuration refers to a device you manage for a client organization.\nThe Configurations resource allows you to manage information about all configurations in your account.\nA configuration can belong to only one organization. Each configuration can have a primary IP address, a primary MAC address, plus one or more additional IP and MAC addresses that are maintained in a separate Configuration Interfaces resource."
    },
    {
      "name": "Contacts",
      "description": "A contact refers to a contact in a client organization.\nThe Contacts resource allows you to manage information about all contacts in your account.\nA contact can belong to only one organization. Each contact can have one location, which is maintained as a separate Locations resource."
    },
    {
      "name": "Countries",
      "description": "A country refers to any distinct national entity.\nThe Countries resource allows you to retrieve information about the country names that IT Glue supports. Country IDs can be used to POST new locations.\nSupported countries may be referenced by one or more locations. Each location can have one country, but it's not required."
    },
    {
      "name": "Documents",
      "description": "The Documents resource allows you to manage documents on your account."
    },
    {
      "name": "Domains",
      "description": "A domain refers to a domain name, such as example.com.\nThe Domains resource allows you to manage information about all domains in your account.\nA domain can belong to only one organization."
    },
    {
      "name": "Organizations",
      "description": "An organization refers to a client company.\nThe Organizations resource is used to manage information about organizations in your account.\nKeep in mind that an organization can have one or more sub-organizations, but there is currently no support in the API for assigning a parent to create new sub-organizations. You would need to manually complete this task from your IT Glue account."
    },
    {
      "name": "Configuration Types",
      "description": "A configuration type refers to the type categorization of a configuration, usually a type of device.\nThis resource is used to manage information about configuration types for your account. Configuration type IDs can be used to POST new configurations.\nA configuration type may be referenced by one or more configurations. It's required that each configuration item have one configuration type."
    },
    {
      "name": "Configuration Interfaces",
      "description": "A configuration interface refers to an IP address for a networked device.\nThis resource allows you to manage all IP and MAC addresses associated with the configurations in your account. Configuration interface IDs can be used to POST new configurations.\nA configuration interface can belong to only one configuration and can have only one IP address and one MAC address. Each configuration can have relationships with one or more configuration interfaces, one of which will be a primary interface.\nNote that when a configuration is created or updated with a new primary IP or MAC address, this creates or updates the configuration Interface object. If the primary IP or MAC address in the configuration interface object is updated, this also updates the primary IP or MAC address on the configuration."
    },
    {
      "name": "Configuration Statuses",
      "description": "A configuration status refers to the status that can be maintained on a configuration, for example, active or inactive.\nThis resource is used to manage information about configuration statuses for your account. Configuration status IDs can be used to POST new configurations.\nA configuration status may be referenced by one ore more configurations. Each configuration can have one configuration status, but it's not required."
    },
    {
      "name": "Contact Types",
      "description": "A contact type refers to the type categorization of a contact, for example, an approver or an owner.\nThis resource is used to manage information about contact types for your account. Contact type IDs can be used to POST new contacts.\nA contact type may be referenced by one or more contacts. Each contact can have one contact type, but it's not required."
    },
    {
      "name": "Organization Types",
      "description": "An organization type refers to the type categorization of an organization, for example, customer or vendor.\nThis resource is used to manage information about organization types for your account. Organization type IDs can be used to POST new organizations.\nA organization type may be referenced by one or more organizations. Each organization can have one organization type, but it's not required."
    },
    {
      "name": "Organization Statuses",
      "description": "An organization status refers to the status that can be maintained on an organization, for example, active or inactive.\nThis resource is used to manage information about organization statuses for your account. Organization status IDs can be used to POST new organizations.\nAn organization status may be referenced by one ore more organizations. Each organization can have one organization status, but it's not required."
    },
    {
      "name": "Flexible Asset Types",
      "description": "A flexible asset type refers to a set of custom fields that can be used to generate structured documentation.\nThis resource lets you create and access information about the flexible asset types in your account. Flexible asset type IDs and flexible asset field name-key values can be used to POST new flexible assets.\nThe different flexible asset types let you document different parts of the IT infrastructure. For example, LAN is one flexible asset type, Backup is another, and Email yet another.\nNote that when a flexible asset type is created with a flexible asset field, this creates a flexible asset field object. If the flexible asset field object is updated, this also updates the flexible asset type."
    },
    {
      "name": "Flexible Asset Fields",
      "description": "A flexible asset field refers to a field in a flexible asset type.\nThis resource lets you manage all of the flexible asset fields in your account. The name-key attributes of fields can be used to POST new flexible assets.\nEach flexible asset field has, at most, one immediate parent flexible asset type, and may be created after or at the same time as a new flexible asset type. Note: To avoid POST/PATCH errors, make sure that the name and order attributes are unique. In other words, no two fields with the same parent flexible asset type can have identical values for name or order. It's also required that at least one field has show-in-list set to true.\nTo explore the different fields that are available, refer to our Flexible asset field definitions article."
    }
  ]
}