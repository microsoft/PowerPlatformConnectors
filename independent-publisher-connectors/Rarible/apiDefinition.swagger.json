{
  "swagger": "2.0",
  "info": {
    "version": "v0.1",
    "title": "Rarible",
    "description": "Rarible Multichain Protocol is a blockchain-agnostic and decentralized tool to query, issue, and trade NFTs.",
    "contact": {
      "name": "Roy Paar",
      "email": "roypaar@microsoft.com"
    }
  },
  "host": "ethereum-api.rarible.org",
  "basePath": "/v0.1",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/erc20/balances/{contract}/{owner}": {
      "get": {
        "description": "Return an ERC20 token balance",
        "summary": "Return an ERC20 token balance",
        "tags": [
          "erc20-balance-controller"
        ],
        "operationId": "getErc20Balance",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contract",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address of the contract",
            "x-ms-summary": "Address of the contract",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address of the ERC20 token owner",
            "x-ms-summary": "Address of the ERC20 token owner",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Erc20DecimalBalance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Erc20IndexerApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Erc20IndexerApiError"
            }
          }
        }
      }
    },
    "/nft/ownerships/{ownershipId}": {
      "get": {
        "description": "Return NFTs by Ownership ID",
        "summary": "Return NFTs by Ownership ID",
        "tags": [
          "nft-ownership-controller"
        ],
        "operationId": "getNftOwnershipById",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ownershipId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the ownership in format: '$contractAddress:$tokenId:$ownerAddress'",
            "x-ms-summary": "ID of the ownership in format: '$contractAddress:$tokenId:$ownerAddress'",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "showDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Return ownership if it is deleted",
            "x-ms-summary": "Return ownership if it is deleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NftOwnership"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorEntityNotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/nft/ownerships/byItem": {
      "get": {
        "description": "Return NFTs by Item",
        "summary": "Return NFTs by Item",
        "tags": [
          "nft-ownership-controller"
        ],
        "operationId": "getNftOwnershipsByItem",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contract",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Address of the contract",
            "x-ms-summary": "Address of the contract"
          },
          {
            "name": "tokenId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Token identifier",
            "x-ms-summary": "Token identifier"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The number of items to return",
            "x-ms-summary": "The number of items to return"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NftOwnerships"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/nft/ownerships/all": {
      "get": {
        "description": "Return all NFTs by Owner",
        "summary": "Return all NFTs by Owner",
        "tags": [
          "nft-ownership-controller"
        ],
        "operationId": "getNftAllOwnerships",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The number of items to return",
            "x-ms-summary": "The number of items to return"
          },
          {
            "name": "showDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include deleted ownerships",
            "x-ms-summary": "Include deleted ownerships"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NftOwnerships"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/nft/items/{itemId}/meta": {
      "get": {
        "description": "Returns the NFT item meta by identifier",
        "summary": "Returns the NFT item meta by identifier",
        "tags": [
          "nft-item-controller"
        ],
        "operationId": "getNftItemMetaById",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Item identifier, has format `${contract}:${tokenId}`",
            "x-ms-summary": "Item identifier, has format `${contract}:${tokenId}`",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NftItemMeta"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/nft/items/{itemId}/lazy": {
      "get": {
        "description": "Returns the NFT lazy item by identifier",
        "summary": "Returns the NFT lazy item by identifier",
        "tags": [
          "nft-item-controller"
        ],
        "operationId": "getNftLazyItemById",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Item identifier, has format `${contract}:${tokenId}`",
            "x-ms-summary": "Item identifier, has format `${contract}:${tokenId}`",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LazyNft"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorEntityNotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/nft/items/{itemId}": {
      "get": {
        "description": "Returns the NFT item by identifier",
        "summary": "Returns the NFT item by identifier",
        "tags": [
          "nft-item-controller"
        ],
        "operationId": "getNftItemById",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Item identifier, has format `${contract}:${tokenId}`",
            "x-ms-summary": "Item identifier, has format `${contract}:${tokenId}`",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NftItem"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorEntityNotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/nft/items/byOwner": {
      "get": {
        "description": "Returns the NFT item by owner",
        "summary": "Returns the NFT item by owner",
        "tags": [
          "nft-item-controller"
        ],
        "operationId": "getNftItemsByOwner",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Address of the item owner",
            "x-ms-summary": "Address of the item owner"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The number of items to return",
            "x-ms-summary": "The number of items to return"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NftItems"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/nft/items/byCreator": {
      "get": {
        "description": "Returns the NFT item by creator",
        "summary": "Returns the NFT item by creator",
        "tags": [
          "nft-item-controller"
        ],
        "operationId": "getNftItemsByCreator",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "creator",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Address of the item creator",
            "x-ms-summary": "Address of the item creator"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The number of items to return",
            "x-ms-summary": "The number of items to return"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NftItems"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/nft/items/byCollection": {
      "get": {
        "description": "Returns the NFT items by collection",
        "summary": "Returns the NFT items by collection",
        "tags": [
          "nft-item-controller"
        ],
        "operationId": "getNftItemsByCollection",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "ID of the NFT collection",
            "x-ms-summary": "ID of the NFT collection"
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Address of NFT item owner",
            "x-ms-summary": "Address of NFT item owner"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The number of items to return",
            "x-ms-summary": "The number of items to return"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NftItems"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/nft/items/all": {
      "get": {
        "description": "Returns all NFT items",
        "summary": "Returns all NFT items",
        "tags": [
          "nft-item-controller"
        ],
        "operationId": "getNftAllItems",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The number of items to return",
            "x-ms-summary": "The number of items to return"
          },
          {
            "name": "showDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include deleted items",
            "x-ms-summary": "Include deleted items"
          },
          {
            "name": "lastUpdatedFrom",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Filter condition to return only items that were updated after this date (unix format)",
            "x-ms-summary": "Filter condition to return only items that were updated after this date"
          },
          {
            "name": "lastUpdatedTo",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Filter condition to return only items that were updated before this date (unix format)",
            "x-ms-summary": "Filter condition to return only items that were updated before this date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NftItems"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/nft/items/{itemId}/royalty": {
      "get": {
        "description": "Returns item royalty by identifier",
        "summary": "Returns item royalty by identifier",
        "tags": [
          "nft-item-controller"
        ],
        "operationId": "getNftItemRoyaltyById",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Item identifier, has format `contract:tokenId`",
            "x-ms-summary": "Item identifier, has format `contract:tokenId`",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NftItemRoyaltyList"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/nft/collections/{collection}/generate_token_id": {
      "get": {
        "description": "Returns next available tokenId for minter",
        "summary": "Returns next available tokenId for minter",
        "tags": [
          "nft-collection-controller"
        ],
        "operationId": "generateNftTokenId",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address of the NFT collection",
            "x-ms-summary": "Address of the NFT collection",
            "x-ms-url-encoding": "single"
          },
          {
            "name": "minter",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Minter address",
            "x-ms-summary": "Minter address"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NftTokenId"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/nft/collections/{collection}": {
      "get": {
        "description": "Returns collection by address",
        "summary": "Returns collection by address",
        "tags": [
          "nft-collection-controller"
        ],
        "operationId": "getNftCollectionById",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Address of the NFT collection",
            "x-ms-summary": "Address of the NFT collection",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NftCollection"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorEntityNotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/nft/collections/byOwner": {
      "get": {
        "description": "Returns collection by owner",
        "summary": "Returns collection by owner",
        "tags": [
          "nft-collection-controller"
        ],
        "operationId": "searchNftCollectionsByOwner",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Address of the collection owner",
            "x-ms-summary": "Address of the collection owner"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The number of collections to return",
            "x-ms-summary": "The number of collections to return"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NftCollections"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/nft/collections/all": {
      "get": {
        "description": "Returns all NFT collections",
        "summary": "Returns all NFT collections",
        "tags": [
          "nft-collection-controller"
        ],
        "operationId": "searchNftAllCollections",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The number of collections to return",
            "x-ms-summary": "The number of collections to return"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NftCollections"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/order/orders/{hash}": {
      "get": {
        "description": "Returns the order by order hash",
        "summary": "Returns the order by order hash",
        "tags": [
          "order-controller"
        ],
        "operationId": "getOrderByHash",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Hash of the order",
            "x-ms-summary": "Hash of the order",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorEntityNotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/order/orders/{hash}/updateMakeStock": {
      "get": {
        "description": "Update stock of the order by order hash",
        "summary": "Update stock of the order by order hash",
        "tags": [
          "order-controller"
        ],
        "operationId": "updateOrderMakeStock",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Hash of the order",
            "x-ms-summary": "Hash of the order",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorEntityNotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/order/orders/sell/byMakerAndByStatus": {
      "get": {
        "description": "Returns all orders for sale by maker and order status",
        "summary": "Returns all orders for sale by maker and order status",
        "tags": [
          "order-controller"
        ],
        "operationId": "getSellOrdersByMakerAndByStatus",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "maker",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The maker of the order",
            "x-ms-summary": "The maker of the order"
          },
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Address of the consumer to receive the commission for order",
            "x-ms-summary": "Address of the consumer to receive the commission for order"
          },
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "enum": [
              "ALL",
              "RARIBLE",
              "OPEN_SEA",
              "CRYPTO_PUNKS"
            ],
            "type": "string",
            "description": "The platform where the order was created",
            "x-ms-summary": "The platform where the order was created"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "exclusiveMinimum": false,
            "description": "The number of items to return",
            "x-ms-summary": "The number of items to return"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACTIVE",
              "FILLED",
              "HISTORICAL",
              "INACTIVE",
              "CANCELLED"
            ],
            "description": "The order status",
            "x-ms-summary": "The order status"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrdersPagination"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/order/orders/sell/byItemAndByStatus": {
      "get": {
        "description": "Returns all orders for sale by item and order status",
        "summary": "Returns all orders for sale by item and order status",
        "tags": [
          "order-controller"
        ],
        "operationId": "getSellOrdersByItemAndByStatus",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contract",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Address of the contract",
            "x-ms-summary": "Address of the contract"
          },
          {
            "name": "tokenId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Token identifier",
            "x-ms-summary": "Token identifier"
          },
          {
            "name": "maker",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The maker of the order",
            "x-ms-summary": "The maker of the order"
          },
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Address of the consumer to receive the commission for order",
            "x-ms-summary": "Address of the consumer to receive the commission for order"
          },
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "enum": [
              "ALL",
              "RARIBLE",
              "OPEN_SEA",
              "CRYPTO_PUNKS"
            ],
            "type": "string",
            "description": "The platform where the order was created",
            "x-ms-summary": "The platform where the order was created"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "exclusiveMinimum": false,
            "description": "The number of items to return",
            "x-ms-summary": "The number of items to return"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACTIVE",
              "FILLED",
              "HISTORICAL",
              "INACTIVE",
              "CANCELLED"
            ],
            "description": "The order status",
            "x-ms-summary": "The order status"
          },
          {
            "name": "currencyId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The currency ID",
            "x-ms-summary": "The currency ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrdersPagination"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/order/orders/currencies/bySellOrdersOfItem": {
      "get": {
        "description": "Returns currencies taken as payment in all sell orders of the item",
        "summary": "Returns currencies taken as payment in all sell orders of the item",
        "tags": [
          "order-controller"
        ],
        "operationId": "getCurrenciesBySellOrdersOfItem",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contract",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Address of the contract",
            "x-ms-summary": "Address of the contract"
          },
          {
            "name": "tokenId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Token identifier",
            "x-ms-summary": "Token identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderCurrencies"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/order/orders/currencies/byBidOrdersOfItem": {
      "get": {
        "description": "Returns currencies made as payment in all bid orders of the item",
        "summary": "Returns currencies made as payment in all bid orders of the item",
        "tags": [
          "order-controller"
        ],
        "operationId": "getCurrenciesByBidOrdersOfItem",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contract",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Address of the contract",
            "x-ms-summary": "Address of the contract"
          },
          {
            "name": "tokenId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Token identifier",
            "x-ms-summary": "Token identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderCurrencies"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/order/orders/sell/byCollectionAndByStatus": {
      "get": {
        "description": "Returns all orders for sale by collection and order status",
        "summary": "Returns all orders for sale by collection and order status",
        "tags": [
          "order-controller"
        ],
        "operationId": "getSellOrdersByCollectionAndByStatus",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Address of the NFT collection",
            "x-ms-summary": "Address of the NFT collection"
          },
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Address of the consumer to receive the commission for order",
            "x-ms-summary": "Address of the consumer to receive the commission for order"
          },
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "enum": [
              "ALL",
              "RARIBLE",
              "OPEN_SEA",
              "CRYPTO_PUNKS"
            ],
            "type": "string",
            "description": "The platform where the order was created",
            "x-ms-summary": "The platform where the order was created"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "exclusiveMinimum": false,
            "description": "The number of items to return",
            "x-ms-summary": "The number of items to return"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACTIVE",
              "FILLED",
              "HISTORICAL",
              "INACTIVE",
              "CANCELLED"
            ],
            "description": "The order status",
            "x-ms-summary": "The order status"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrdersPagination"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/order/orders/sellByStatus": {
      "get": {
        "description": "Returns all orders for sale by order status",
        "summary": "Returns all orders for sale by order status",
        "tags": [
          "order-controller"
        ],
        "operationId": "getSellOrdersByStatus",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Address of the consumer to receive the commission for order",
            "x-ms-summary": "Address of the consumer to receive the commission for order"
          },
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "enum": [
              "ALL",
              "RARIBLE",
              "OPEN_SEA",
              "CRYPTO_PUNKS"
            ],
            "type": "string",
            "description": "The platform where the order was created",
            "x-ms-summary": "The platform where the order was created"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "exclusiveMinimum": false,
            "description": "The number of items to return",
            "x-ms-summary": "The number of items to return"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACTIVE",
              "FILLED",
              "HISTORICAL",
              "INACTIVE",
              "CANCELLED"
            ],
            "description": "The order status",
            "x-ms-summary": "The order status"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "enum": [
              "LAST_UPDATE_ASC",
              "LAST_UPDATE_DESC"
            ],
            "type": "string",
            "description": "Sorting by last update",
            "x-ms-summary": "Sorting by last update"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrdersPagination"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/order/orders/bids/byMakerAndByStatus": {
      "get": {
        "description": "Returns all order bids by maker and order status",
        "summary": "Returns all order bids by maker and order status",
        "tags": [
          "order-controller"
        ],
        "operationId": "getOrderBidsByMakerAndByStatus",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "maker",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The maker of the order",
            "x-ms-summary": "The maker of the order"
          },
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Address of the consumer to receive the commission for order",
            "x-ms-summary": "Address of the consumer to receive the commission for order"
          },
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "enum": [
              "ALL",
              "RARIBLE",
              "OPEN_SEA",
              "CRYPTO_PUNKS"
            ],
            "type": "string",
            "description": "The platform where the order was created",
            "x-ms-summary": "The platform where the order was created"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "exclusiveMinimum": false,
            "description": "The number of orders to return",
            "x-ms-summary": "The number of orders to return"
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "ACTIVE",
              "FILLED",
              "HISTORICAL",
              "INACTIVE",
              "CANCELLED"
            ],
            "description": "The order status",
            "x-ms-summary": "The order status"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Lower time border of data (unix format)",
            "x-ms-summary": "Lower time border of data (unix format)"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Upper time border of data (unix format)",
            "x-ms-summary": "Upper time border of data (unix format)"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrdersPagination"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/order/orders/bids/byItemAndByStatus": {
      "get": {
        "description": "Returns all order bids by item and order status",
        "summary": "Returns all order bids by item and order status",
        "tags": [
          "order-controller"
        ],
        "operationId": "getOrderBidsByItemAndByStatus",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contract",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Address of the contract",
            "x-ms-summary": "Address of the contract"
          },
          {
            "name": "tokenId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Token identifier",
            "x-ms-summary": "Token identifier"
          },
          {
            "name": "maker",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The maker of the order",
            "x-ms-summary": "The maker of the order"
          },
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Address of the consumer to receive the commission for order",
            "x-ms-summary": "Address of the consumer to receive the commission for order"
          },
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "enum": [
              "ALL",
              "RARIBLE",
              "OPEN_SEA",
              "CRYPTO_PUNKS"
            ],
            "type": "string",
            "description": "The platform where the order was created",
            "x-ms-summary": "The platform where the order was created"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "exclusiveMinimum": false,
            "description": "The number of orders to return",
            "x-ms-summary": "The number of orders to return"
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "ACTIVE",
              "FILLED",
              "HISTORICAL",
              "INACTIVE",
              "CANCELLED"
            ],
            "description": "The order status",
            "x-ms-summary": "The order status"
          },
          {
            "name": "currencyId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The currency ID",
            "x-ms-summary": "The currency ID"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Lower time border of data (unix format)",
            "x-ms-summary": "Lower time border of data (unix format)"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Upper time border of data (unix format)",
            "x-ms-summary": "Upper time border of data (unix format)"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrdersPagination"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/order/orders/all/byStatus": {
      "get": {
        "description": "Returns all orders with status sorting",
        "summary": "Returns all orders with status sorting",
        "tags": [
          "order-controller"
        ],
        "operationId": "getOrdersAllByStatus",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "enum": [
              "LAST_UPDATE_ASC",
              "LAST_UPDATE_DESC"
            ],
            "type": "string",
            "description": "Sorting by last update",
            "x-ms-summary": "Sorting by last update"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Continuation token from the previous response",
            "x-ms-summary": "Continuation token from the previous response"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "exclusiveMinimum": false,
            "description": "The number of orders to return",
            "x-ms-summary": "The number of orders to return"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACTIVE",
              "FILLED",
              "HISTORICAL",
              "INACTIVE",
              "CANCELLED"
            ],
            "description": "Status of the order",
            "x-ms-summary": "Status of the order"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrdersPagination"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/order/aggregations/nftSellByMaker": {
      "get": {
        "description": "Aggregate NFT sell order by maker",
        "summary": "Aggregate NFT sell order by maker",
        "tags": [
          "order-aggregation-controller"
        ],
        "operationId": "aggregateNftSellByMaker",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "Lower time border of data (unix format)",
            "x-ms-summary": "Lower time border of data (unix format)"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "Upper time border of data (unix format)",
            "x-ms-summary": "Upper time border of data (unix format)"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "The number of items to return",
            "x-ms-summary": "The number of items to return"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "enum": [
              "ALL",
              "RARIBLE",
              "OPEN_SEA",
              "CRYPTO_PUNKS"
            ],
            "type": "string",
            "description": "The platform where the order was created",
            "x-ms-summary": "The platform where the order was created"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AggregationData"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/order/aggregations/nftPurchaseByTaker": {
      "get": {
        "description": "Aggregate NFT purchase by taker",
        "summary": "Aggregate NFT purchase by taker",
        "tags": [
          "order-aggregation-controller"
        ],
        "operationId": "aggregateNftPurchaseByTaker",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "Lower time border of data (unix format)",
            "x-ms-summary": "Lower time border of data (unix format)"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "Upper time border of data (unix format)",
            "x-ms-summary": "Upper time border of data (unix format)"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "The number of items to return",
            "x-ms-summary": "The number of items to return"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "enum": [
              "ALL",
              "RARIBLE",
              "OPEN_SEA",
              "CRYPTO_PUNKS"
            ],
            "type": "string",
            "description": "The platform where the order was created",
            "x-ms-summary": "The platform where the order was created"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AggregationData"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    },
    "/order/aggregations/nftPurchaseByCollection": {
      "get": {
        "description": "Aggregate NFT purchase by collection",
        "summary": "Aggregate NFT purchase by collection",
        "tags": [
          "order-aggregation-controller"
        ],
        "operationId": "aggregateNftPurchaseByCollection",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "Lower time border of data (unix format)",
            "x-ms-summary": "Lower time border of data (unix format)"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "Upper time border of data (unix format)",
            "x-ms-summary": "Upper time border of data (unix format)"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "The number of items to return",
            "x-ms-summary": "The number of items to return"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "enum": [
              "ALL",
              "RARIBLE",
              "OPEN_SEA",
              "CRYPTO_PUNKS"
            ],
            "type": "string",
            "description": "The platform where the order was created",
            "x-ms-summary": "The platform where the order was created"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AggregationData"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorBadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EthereumApiErrorServerError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Erc20DecimalBalance": {
      "title": "Erc20DecimalBalance",
      "type": "object",
      "properties": {
        "contract": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "owner": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "balance": {
          "example": "717802",
          "type": "string"
        },
        "decimalBalance": {
          "example": "717802.342336",
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "contract",
        "owner",
        "balance",
        "decimalBalance"
      ]
    },
    "Erc20IndexerApiError": {
      "title": "Erc20IndexerApiError",
      "type": "object",
      "properties": {
        "status": {
          "description": "HTTP status code",
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "$ref": "#/definitions/Code1"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      },
      "required": [
        "status",
        "code",
        "message"
      ]
    },
    "NftCollection": {
      "title": "NftCollection",
      "type": "object",
      "properties": {
        "id": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Type1"
        },
        "owner": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "name": {
          "description": "Collection name",
          "type": "string"
        },
        "symbol": {
          "description": "Collection symbol",
          "type": "string"
        },
        "features": {
          "description": "Set of supported features for this collection",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Feature"
          }
        },
        "supportsLazyMint": {
          "description": "Does the collection support lazy mint or not",
          "type": "boolean"
        },
        "minters": {
          "description": "List of addresses that can mint items in this collection",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta": {
          "$ref": "#/definitions/NftCollectionMeta"
        }
      },
      "required": [
        "id",
        "type",
        "name",
        "features",
        "supportsLazyMint"
      ]
    },
    "NftCollections": {
      "title": "NftCollections",
      "type": "object",
      "properties": {
        "total": {
          "description": "Number of collections were found by request",
          "type": "integer",
          "format": "int64"
        },
        "continuation": {
          "description": "Continuation token to paginate items search result",
          "type": "string"
        },
        "collections": {
          "description": "List of found collections",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NftCollection"
          }
        }
      },
      "required": [
        "total",
        "collections"
      ]
    },
    "NftSignature": {
      "title": "NftSignature",
      "type": "object",
      "properties": {
        "v": {
          "type": "integer",
          "format": "int32"
        },
        "r": {
          "type": "string"
        },
        "s": {
          "type": "string"
        }
      },
      "required": [
        "v",
        "r",
        "s"
      ]
    },
    "NftTokenId": {
      "title": "NftTokenId",
      "type": "object",
      "properties": {
        "tokenId": {
          "example": "717802",
          "type": "string"
        },
        "signature": {
          "$ref": "#/definitions/NftSignature"
        }
      },
      "required": [
        "tokenId",
        "signature"
      ]
    },
    "NftItem": {
      "title": "NftItem",
      "type": "object",
      "properties": {
        "id": {
          "description": "Item identifier, has format '${contract}:${tokenId}'",
          "type": "string"
        },
        "contract": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "tokenId": {
          "example": "717802",
          "type": "string"
        },
        "creators": {
          "description": "Creators of the target item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Part"
          }
        },
        "supply": {
          "example": "717802",
          "type": "string"
        },
        "lazySupply": {
          "example": "717802",
          "type": "string"
        },
        "owners": {
          "description": "Owners of the target items",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "royalties": {
          "description": "List of royalties",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Part"
          }
        },
        "lastUpdatedAt": {
          "description": "Datetime when the item was created",
          "type": "string",
          "format": "date-time"
        },
        "mintedAt": {
          "description": "Datetime when the item was minted",
          "type": "string",
          "format": "date-time"
        },
        "pending": {
          "description": "Pending information about the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemTransfer"
          }
        },
        "deleted": {
          "description": "Item was deleted or not",
          "type": "boolean"
        },
        "meta": {
          "$ref": "#/definitions/NftItemMeta"
        }
      },
      "required": [
        "id",
        "contract",
        "tokenId",
        "creators",
        "supply",
        "lazySupply",
        "royalties"
      ]
    },
    "NftItemAttribute": {
      "title": "NftItemAttribute",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "format": {
          "type": "string"
        }
      },
      "required": [
        "key"
      ]
    },
    "NftItemRoyalty": {
      "title": "NftItemRoyalty",
      "type": "object",
      "properties": {
        "account": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "account",
        "value"
      ]
    },
    "NftItems": {
      "title": "NftItems",
      "type": "object",
      "properties": {
        "total": {
          "description": "The total number of items satisfy the query",
          "type": "integer",
          "format": "int64"
        },
        "continuation": {
          "description": "Continuation token from the previous response",
          "type": "string"
        },
        "items": {
          "description": "List of found items",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NftItem"
          }
        }
      },
      "required": [
        "total",
        "items"
      ]
    },
    "NftItemMeta": {
      "title": "NftItemMeta",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the NFT item",
          "type": "string"
        },
        "description": {
          "description": "Description of the NFT item",
          "type": "string"
        },
        "attributes": {
          "description": "Attributes of the NFT item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NftItemAttribute"
          }
        },
        "image": {
          "$ref": "#/definitions/NftMedia"
        },
        "animation": {
          "$ref": "#/definitions/NftMedia"
        }
      },
      "required": [
        "name"
      ]
    },
    "NftCollectionMeta": {
      "title": "NftCollectionMeta",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the NFT collection",
          "type": "string"
        },
        "description": {
          "description": "Description of the NFT collection",
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/NftMedia"
        },
        "external_link": {
          "description": "External link to the original website for the collection",
          "type": "string"
        },
        "seller_fee_basis_points": {
          "description": "Indicates a 1% seller fee",
          "type": "integer",
          "format": "int32"
        },
        "fee_recipient": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "NftItemRoyaltyList": {
      "title": "NftItemRoyaltyList",
      "type": "object",
      "properties": {
        "royalty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NftItemRoyalty"
          }
        }
      }
    },
    "NftMedia": {
      "title": "NftMedia",
      "type": "object",
      "properties": {
        "url": {
          "description": "URL address of the NFT media",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "meta": {
          "description": "Meta of the NFT media",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/NftMediaMeta"
          }
        }
      },
      "required": [
        "url",
        "meta"
      ]
    },
    "NftMediaMeta": {
      "title": "NftMediaMeta",
      "type": "object",
      "properties": {
        "type": {
          "description": "NFT media type",
          "type": "string"
        },
        "width": {
          "description": "Width of the NFT image/video",
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "description": "Height of the NFT image/video",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "type"
      ]
    },
    "LazyNft": {
      "title": "LazyNft",
      "description": "Type of an Asset",
      "type": "object",
      "properties": {
        "contract": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "tokenId": {
          "example": "717802",
          "type": "string"
        },
        "uri": {
          "description": "Uniform Resource Identifier of the token",
          "type": "string"
        },
        "creators": {
          "description": "Addresses of the NFT item creators",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Part"
          }
        },
        "royalties": {
          "description": "List of royalties",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Part"
          }
        },
        "signatures": {
          "description": "Digital signatures",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "contract",
        "tokenId",
        "uri",
        "creators",
        "royalties",
        "signatures"
      ]
    },
    "NftOwnership": {
      "title": "NftOwnership",
      "type": "object",
      "properties": {
        "id": {
          "description": "Ownership identifier, has format '${token}:${tokenId}:${owner}'",
          "type": "string"
        },
        "contract": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "tokenId": {
          "example": "717802",
          "type": "string"
        },
        "owner": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "creators": {
          "description": "Creators of the target item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Part"
          }
        },
        "value": {
          "example": "717802",
          "type": "string"
        },
        "lazyValue": {
          "example": "717802",
          "type": "string"
        },
        "date": {
          "description": "Start date of ownership",
          "type": "string",
          "format": "date-time"
        },
        "pending": {
          "description": "History of ownership",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemHistory"
          }
        }
      },
      "required": [
        "id",
        "contract",
        "tokenId",
        "owner",
        "value",
        "lazyValue",
        "date",
        "pending"
      ]
    },
    "NftOwnerships": {
      "title": "NftOwnerships",
      "type": "object",
      "properties": {
        "total": {
          "description": "Number of ownerships were found by request",
          "type": "integer",
          "format": "int64"
        },
        "continuation": {
          "description": "Continuation token to paginate Ownerships search result",
          "type": "string"
        },
        "ownerships": {
          "description": "List of found ownerships",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NftOwnership"
          }
        }
      },
      "required": [
        "total",
        "ownerships"
      ]
    },
    "EthereumApiErrorEntityNotFound": {
      "title": "EthereumApiErrorEntityNotFound",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error type",
          "example": "NOT_FOUND",
          "type": "string",
          "default": "NOT_FOUND"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        },
        "status": {
          "description": "HTTP status code",
          "example": 404,
          "type": "integer",
          "default": 404,
          "format": "int32"
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "EthereumApiErrorBadRequest": {
      "title": "EthereumApiErrorBadRequest",
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/Code2"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        },
        "status": {
          "description": "HTTP status code",
          "example": 400,
          "type": "integer",
          "default": 400,
          "format": "int32"
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "EthereumApiErrorServerError": {
      "title": "EthereumApiErrorServerError",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error type",
          "example": "UNKNOWN",
          "type": "string",
          "default": "UNKNOWN"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        },
        "status": {
          "description": "HTTP status code",
          "example": 500,
          "type": "integer",
          "default": "500",
          "format": "int32"
        }
      },
      "required": [
        "code",
        "message",
        "status"
      ]
    },
    "ItemHistory": {
      "title": "ItemHistory",
      "description": "History of item",
      "type": "object",
      "properties": {
        "owner": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "contract": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "tokenId": {
          "example": "717802",
          "type": "string"
        },
        "value": {
          "example": "717802",
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "contract",
        "tokenId",
        "date"
      ]
    },
    "ItemTransfer": {
      "title": "ItemTransfer",
      "type": "object",
      "properties": {
        "type": {
          "example": "TRANSFER",
          "type": "string",
          "default": "TRANSFER"
        },
        "from": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        }
      },
      "required": [
        "type",
        "from"
      ]
    },
    "Asset": {
      "title": "Asset",
      "type": "object",
      "properties": {
        "assetType": {
          "type": "object"
        },
        "value": {
          "example": "717802",
          "type": "string"
        },
        "valueDecimal": {
          "example": "717802.342336",
          "type": "number"
        }
      },
      "required": [
        "assetType",
        "value"
      ]
    },
    "Part": {
      "title": "Part",
      "type": "object",
      "properties": {
        "account": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "account",
        "value"
      ]
    },
    "AggregationData": {
      "title": "AggregationData",
      "type": "object",
      "properties": {
        "address": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "sum": {
          "example": "717802.342336",
          "type": "number"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "address",
        "sum",
        "count"
      ]
    },
    "OrderStatus": {
      "title": "OrderStatus",
      "example": "ACTIVE",
      "type": "string",
      "enum": [
        "ACTIVE",
        "FILLED",
        "HISTORICAL",
        "INACTIVE",
        "CANCELLED"
      ]
    },
    "OrderExchangeHistory": {
      "title": "OrderExchangeHistory",
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "make": {
          "$ref": "#/definitions/Asset"
        },
        "take": {
          "$ref": "#/definitions/Asset"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "maker": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        }
      },
      "required": [
        "hash",
        "date"
      ]
    },
    "Order": {
      "title": "Order",
      "type": "object",
      "properties": {
        "maker": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "taker": {
          "example": "0x60f80121c31a0d46b5279700f9df786054aa5ee5",
          "type": "string"
        },
        "make": {
          "$ref": "#/definitions/Asset"
        },
        "take": {
          "$ref": "#/definitions/Asset"
        },
        "fill": {
          "example": "717802",
          "type": "string"
        },
        "fillValue": {
          "example": "717802.342336",
          "type": "number"
        },
        "start": {
          "type": "integer",
          "format": "int64"
        },
        "end": {
          "type": "integer",
          "format": "int64"
        },
        "makeStock": {
          "example": "717802",
          "type": "string"
        },
        "makeStockValue": {
          "example": "717802.342336",
          "type": "number"
        },
        "cancelled": {
          "type": "boolean"
        },
        "salt": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdateAt": {
          "type": "string",
          "format": "date-time"
        },
        "pending": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderExchangeHistory"
          }
        },
        "hash": {
          "type": "string"
        },
        "makeBalance": {
          "example": "717802",
          "type": "string"
        },
        "makePrice": {
          "example": "717802.342336",
          "type": "number"
        },
        "takePrice": {
          "example": "717802.342336",
          "type": "number"
        },
        "makePriceUsd": {
          "example": "717802.342336",
          "type": "number"
        },
        "takePriceUsd": {
          "example": "717802.342336",
          "type": "number"
        },
        "priceHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderPriceHistoryRecord"
          }
        },
        "status": {
          "$ref": "#/definitions/OrderStatus"
        }
      },
      "required": [
        "maker",
        "make",
        "take",
        "fill",
        "makeStock",
        "cancelled",
        "salt",
        "createdAt",
        "lastUpdateAt",
        "hash"
      ]
    },
    "OrderPriceHistoryRecord": {
      "title": "OrderPriceHistoryRecord",
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "makeValue": {
          "example": "717802.342336",
          "type": "number"
        },
        "takeValue": {
          "example": "717802.342336",
          "type": "number"
        }
      },
      "required": [
        "date",
        "makeValue",
        "takeValue"
      ]
    },
    "OrdersPagination": {
      "title": "OrdersPagination",
      "type": "object",
      "properties": {
        "orders": {
          "description": "Orders list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "continuation": {
          "description": "Continuation token from the previous response",
          "type": "string"
        }
      },
      "required": [
        "orders"
      ]
    },
    "OrderCurrencies": {
      "title": "OrderCurrencies",
      "description": "List of distinct currencies in which payments for sell or bid orders were suggested",
      "type": "object",
      "properties": {
        "orderType": {
          "$ref": "#/definitions/OrderType"
        },
        "currencies": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "orderType",
        "currencies"
      ]
    },
    "Code1": {
      "title": "Code1",
      "description": "Error type",
      "example": "UNKNOWN",
      "type": "string",
      "enum": [
        "UNKNOWN",
        "VALIDATION",
        "TOKEN_NOT_FOUND",
        "BALANCE_NOT_FOUND"
      ]
    },
    "Code2": {
      "title": "Code2",
      "description": "Error type. `BAD_REQUEST` - incorrect format of input data, `VALIDATION` - input data format is correct, but its content doesn't meet requirements of API call",
      "example": "BAD_REQUEST",
      "type": "string",
      "enum": [
        "BAD_REQUEST",
        "VALIDATION"
      ]
    },
    "Feature": {
      "title": "Feature",
      "example": "APPROVE_FOR_ALL",
      "type": "string",
      "enum": [
        "APPROVE_FOR_ALL",
        "SET_URI_PREFIX",
        "BURN",
        "MINT_WITH_ADDRESS",
        "SECONDARY_SALE_FEES",
        "MINT_AND_TRANSFER"
      ]
    },
    "OrderType": {
      "title": "OrderType",
      "example": "SELL",
      "type": "string",
      "enum": [
        "SELL",
        "BID"
      ]
    },
    "Type1": {
      "title": "Type1",
      "description": "Collection type",
      "example": "ERC721",
      "type": "string",
      "enum": [
        "ERC721",
        "ERC1155",
        "CRYPTO_PUNKS"
      ]
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {},
  "security": [],
  "tags": [
    {
      "name": "erc20-balance-controller"
    },
    {
      "name": "nft-ownership-controller"
    },
    {
      "name": "nft-item-controller"
    },
    {
      "name": "nft-collection-controller"
    },
    {
      "name": "order-controller"
    },
    {
      "name": "order-aggregation-controller"
    }
  ],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://rarible.com/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://static.rarible.com/privacy.pdf"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Finance"
    }
  ]
}