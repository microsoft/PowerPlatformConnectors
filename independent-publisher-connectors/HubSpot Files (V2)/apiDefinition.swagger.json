{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "HubSpot Files V2",
    "description": "With the easy-to-use HubSpot CRM, you'll never have to manually update reports or wonder how your team is tracking toward quotas. Get a real-time view of your entire sales pipeline on a visual dashboard. HubSpot CRM will automatically organize, enrich, and track each contact in a tidy timeline.",
    "contact": {
      "name": "Troy Taylor",
      "url": "https://www.hitachisolutions.com",
      "email": "ttaylor@hitachisolutions.com"
    }
  },
  "host": "api.hubapi.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/files/v3/files/{fileId}/gdpr-delete": {
      "delete": {
        "description": "Deletes a file for GDRP.",
        "summary": "Delete file for GDRP",
        "tags": [
          "Files"
        ],
        "operationId": "Delete-_files_v3_files_fileId_gdpr-delete_archiveGDPR",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "x-ms-summary": "File ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "ID of file to GDPR delete."
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        }
      }
    },
    "/files/v3/files/{fileId}": {
      "get": {
        "description": "Retrieve a file by ID.",
        "summary": "Get file",
        "tags": [
          "Files"
        ],
        "operationId": "Get_files_v3_files_fileId_getById",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "x-ms-summary": "File ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "ID of the desired file."
          },
          {
            "name": "properties",
            "in": "query",
            "x-ms-summary": "Properties",
            "description": "The properties.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation.",
            "schema": {
              "$ref": "#/definitions/File"
            }
          }
        },
        "x-ms-visibility": "important"
      },
      "delete": {
        "description": "Delete file by ID.",
        "summary": "Delete file",
        "tags": [
          "Files"
        ],
        "operationId": "Delete-_files_v3_files_fileId_archive",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "x-ms-summary": "File ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "FileId to delete."
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        }
      },
      "put": {
        "description": "Replaces existing file data with new file data. Can be used to change image content without having to upload a new file and update all references.",
        "summary": "Update file",
        "tags": [
          "Files"
        ],
        "operationId": "Put-_files_v3_files_fileId_replace",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "x-ms-summary": "File ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "ID of the desired file."
          },
          {
            "name": "file",
            "in": "formData",
            "x-ms-summary": "File",
            "required": false,
            "type": "file",
            "description": "File data that will replace existing file in the file manager."
          },
          {
            "name": "charsetHunch",
            "in": "formData",
            "x-ms-summary": "Character Set",
            "required": false,
            "type": "string",
            "description": "Character set of given file data."
          },
          {
            "name": "options",
            "in": "formData",
            "x-ms-summary": "Options",
            "required": false,
            "type": "string",
            "description": "JSON String representing FileReplaceOptions."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation.",
            "schema": {
              "$ref": "#/definitions/File"
            }
          }
        }
      },
      "patch": {
        "description": "Update properties of file by ID.",
        "summary": "Update file properties",
        "tags": [
          "Files"
        ],
        "operationId": "Patch-_files_v3_files_fileId_updateProperties",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "x-ms-summary": "File ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "ID of file to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Options to update.",
            "schema": {
              "$ref": "#/definitions/FileUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation.",
            "schema": {
              "$ref": "#/definitions/File"
            }
          }
        }
      }
    },
    "/files/v3/files": {
      "post": {
        "description": "Upload a single file with content specified in request body.",
        "summary": "Upload file",
        "tags": [
          "Files"
        ],
        "operationId": "Post-_files_v3_files_upload",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "x-ms-summary": "File",
            "required": true,
            "type": "file",
            "description": "File to be uploaded."
          },
          {
            "name": "folderId",
            "in": "formData",
            "x-ms-summary": "Folder ID",
            "required": false,
            "type": "string",
            "description": "Either 'folderId' or 'folderPath' is required. folderId is the ID of the folder the file will be uploaded to."
          },
          {
            "name": "folderPath",
            "in": "formData",
            "x-ms-summary": "Folder Path",
            "required": false,
            "type": "string",
            "description": "Either 'folderPath' or 'folderId' is required. This field represents the destination folder path for the uploaded file. If a path doesn't exist, the system will try to create one."
          },
          {
            "name": "fileName",
            "in": "formData",
            "x-ms-summary": "File Name",
            "required": true,
            "type": "string",
            "description": "Desired name for the uploaded file."
          },
          {
            "name": "charsetHunch",
            "in": "formData",
            "x-ms-summary": "Character Set",
            "required": false,
            "type": "string",
            "description": "Character set of the uploaded file."
          },
          {
            "name": "options.access",
            "in": "formData",
            "x-ms-summary": "Access Options",
            "required": true,
            "type": "string",
            "enum": [
              "PUBLIC_INDEXABLE",
              "PUBLIC_NOT_INDEXABLE",
              "PRIVATE"
            ],
            "description": "Access level for the uploaded file."
          },
          {
            "name": "options.ttl",
            "in": "formData",
            "x-ms-summary": "TTL Options",
            "required": false,
            "type": "integer",
            "description": "Time to live for the uploaded file."
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation.",
            "schema": {
              "$ref": "#/definitions/File"
            }
          }
        }
      }
    },
    "/files/v3/files/{fileId}/signed-url": {
      "get": {
        "description": "Generates signed URL that allows temporary access to a private file.",
        "summary": "Generate link",
        "tags": [
          "Files"
        ],
        "operationId": "Get-_files_v3_files_fileId_signed-url_getSignedUrl",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "x-ms-summary": "File ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "ID of file."
          },
          {
            "name": "size",
            "in": "query",
            "x-ms-summary": "Size",
            "required": false,
            "enum": [
              "thumb",
              "icon",
              "medium",
              "preview"
            ],
            "type": "string",
            "description": "For image files. This will resize the image to the desired size before sharing. Does not affect the original file, just the file served by this signed URL."
          },
          {
            "name": "expirationSeconds",
            "in": "query",
            "x-ms-summary": "Expiration",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "How long in seconds the link will provide access to the file."
          },
          {
            "name": "upscale",
            "in": "query",
            "x-ms-summary": "Upscale",
            "required": false,
            "type": "boolean",
            "description": "If size is provided, this will upscale the image to fit the size dimensions."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation.",
            "schema": {
              "$ref": "#/definitions/SignedUrl"
            }
          }
        }
      }
    },
    "/files/v3/files/import-from-url/async": {
      "post": {
        "description": "Asynchronously imports the file at the given URL into the file manager.",
        "summary": "Import file asynchronously",
        "tags": [
          "Files"
        ],
        "operationId": "Post-_files_v3_files_import-from-url_async_importFromUrl",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportFromUrlInput"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "accepted.",
            "schema": {
              "$ref": "#/definitions/ImportFromUrlTaskLocator"
            }
          }
        }
      }
    },
    "/files/v3/files/stat/{path}": {
      "get": {
        "description": "Retrieve the file by the path address.",
        "summary": "Get file by path",
        "tags": [
          "Files"
        ],
        "operationId": "Get-_files_v3_files_stat_path_getMetadata",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "x-ms-summary": "Path",
            "x-ms-url-encoding": "single",
            "description": "The path.",
            "required": true,
            "type": "string"
          },
          {
            "name": "properties",
            "in": "query",
            "x-ms-summary": "Properties",
            "description": "The properties.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation.",
            "schema": {
              "$ref": "#/definitions/FileStat"
            }
          }
        }
      }
    },
    "/files/v3/files/search": {
      "get": {
        "description": "Search through files in the file manager. Does not display hidden or archived files.",
        "summary": "Search files",
        "tags": [
          "Files"
        ],
        "operationId": "Get-_files_v3_files_search_doSearch",
        "parameters": [
          {
            "name": "properties",
            "in": "query",
            "x-ms-summary": "Properties",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Desired file properties in the return object."
          },
          {
            "name": "after",
            "in": "query",
            "x-ms-summary": "After",
            "required": false,
            "type": "string",
            "description": "The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit."
          },
          {
            "name": "before",
            "in": "query",
            "x-ms-summary": "Before",
            "description": "The before.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Limit",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of items to return. Maximum limit is 100."
          },
          {
            "name": "sort",
            "in": "query",
            "x-ms-summary": "Sort",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Sort files by a given field."
          },
          {
            "name": "id",
            "in": "query",
            "x-ms-summary": "ID",
            "required": false,
            "type": "string",
            "description": "Search files by given ID."
          },
          {
            "name": "createdAt",
            "in": "query",
            "x-ms-summary": "Created At",
            "required": false,
            "type": "string",
            "description": "Search files by time of creation."
          },
          {
            "name": "createdAtLte",
            "in": "query",
            "x-ms-summary": "Created At LTE",
            "description": "The created at time less than or equal.",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAtGte",
            "in": "query",
            "x-ms-summary": "Created At GTE",
            "description": "The created at greater than or equal.",
            "required": false,
            "type": "string"
          },
          {
            "name": "updatedAt",
            "in": "query",
            "x-ms-summary": "Updated At",
            "required": false,
            "type": "string",
            "description": "Search files by time of latest updated."
          },
          {
            "name": "updatedAtLte",
            "in": "query",
            "x-ms-summary": "Updated At LTE",
            "description": "The updated at later than or equal.",
            "required": false,
            "type": "string"
          },
          {
            "name": "updatedAtGte",
            "in": "query",
            "x-ms-summary": "Updated At GTE",
            "description": "The updated at greater than or equal.",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "x-ms-summary": "Name",
            "required": false,
            "type": "string",
            "description": "Search for files containing the given name."
          },
          {
            "name": "path",
            "in": "query",
            "x-ms-summary": "Path",
            "required": false,
            "type": "string",
            "description": "Search files by path."
          },
          {
            "name": "parentFolderId",
            "in": "query",
            "x-ms-summary": "Parent Folder ID",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Search files within given folderId."
          },
          {
            "name": "size",
            "in": "query",
            "x-ms-summary": "Size",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Query by file size."
          },
          {
            "name": "height",
            "in": "query",
            "x-ms-summary": "Height",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Search files by height of image or video."
          },
          {
            "name": "width",
            "in": "query",
            "x-ms-summary": "Width",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Search files by width of image or video."
          },
          {
            "name": "encoding",
            "in": "query",
            "x-ms-summary": "Encoding",
            "required": false,
            "type": "string",
            "description": "Search files with specified encoding."
          },
          {
            "name": "type",
            "in": "query",
            "x-ms-summary": "Type",
            "required": false,
            "type": "string",
            "description": "Filter by provided file type."
          },
          {
            "name": "extension",
            "in": "query",
            "x-ms-summary": "Extension",
            "required": false,
            "type": "string",
            "description": "Search files by given extension."
          },
          {
            "name": "url",
            "in": "query",
            "x-ms-summary": "URL",
            "required": false,
            "type": "string",
            "description": "Search for given URL."
          },
          {
            "name": "isUsableInContent",
            "in": "query",
            "x-ms-summary": "Is Usable In Content",
            "required": false,
            "type": "boolean",
            "description": "If true shows files that have been marked to be used in new content. It false shows files that should not be used in new content."
          },
          {
            "name": "allowsAnonymousAccess",
            "in": "query",
            "x-ms-summary": "Allow Anonymous Access",
            "required": false,
            "type": "boolean",
            "description": "If 'true' will show private files; if 'false' will show public files."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation.",
            "schema": {
              "$ref": "#/definitions/CollectionResponseFile"
            }
          }
        }
      }
    },
    "/files/v3/files/import-from-url/async/tasks/{taskId}/status": {
      "get": {
        "description": "Check the status of requested import.",
        "summary": "Check import status",
        "tags": [
          "Files"
        ],
        "operationId": "Get-_files_v3_files_import-from-url_async_tasks_taskId_status_checkImport",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "x-ms-summary": "Task ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "Import by URL task ID."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation.",
            "schema": {
              "$ref": "#/definitions/FileActionResponse"
            }
          }
        }
      }
    },
    "/files/v3/folders/{folderId}": {
      "get": {
        "description": "Get folder by ID.",
        "summary": "Get folder",
        "tags": [
          "Folders"
        ],
        "operationId": "Get-_files_v3_folders_folderId_getById",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "x-ms-summary": "Folder ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "ID of desired folder."
          },
          {
            "name": "properties",
            "in": "query",
            "x-ms-summary": "Properties",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Properties to set on returned folder."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation.",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          }
        }
      },
      "delete": {
        "description": "Delete folder by ID.",
        "summary": "Delete folder",
        "tags": [
          "Folders"
        ],
        "operationId": "Delete-_files_v3_folders_folderId_archive",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "x-ms-summary": "Folder ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "ID of folder to delete."
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        }
      }
    },
    "/files/v3/folders": {
      "post": {
        "description": "Creates a folder.",
        "summary": "Create folder",
        "tags": [
          "Folders"
        ],
        "operationId": "Post-_files_v3_folders_create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Folder creation options.",
            "schema": {
              "$ref": "#/definitions/FolderInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation.",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          }
        }
      }
    },
    "/files/v3/folders/search": {
      "get": {
        "description": "Search for folders. Does not contain hidden or archived folders.",
        "summary": "Search folders",
        "tags": [
          "Folders"
        ],
        "operationId": "Get-_files_v3_folders_search_doSearch",
        "parameters": [
          {
            "name": "properties",
            "in": "query",
            "x-ms-summary": "Properties",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Properties that should be included in the returned folders."
          },
          {
            "name": "after",
            "in": "query",
            "x-ms-summary": "After",
            "required": false,
            "type": "string",
            "description": "The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit."
          },
          {
            "name": "before",
            "in": "query",
            "x-ms-summary": "Before",
            "description": "The before.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Limit",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Limit of results to return. Max limit is 100."
          },
          {
            "name": "sort",
            "in": "query",
            "x-ms-summary": "Sort",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Sort results by given property. For example -name sorts by name field descending, name sorts by name field ascending."
          },
          {
            "name": "id",
            "in": "query",
            "x-ms-summary": "ID",
            "required": false,
            "type": "string",
            "description": "Search folder by given ID."
          },
          {
            "name": "createdAt",
            "in": "query",
            "x-ms-summary": "Created At",
            "required": false,
            "type": "string",
            "description": "Search for folders with the given creation timestamp."
          },
          {
            "name": "createdAtLte",
            "in": "query",
            "x-ms-summary": "Created At LTE",
            "description": "The created at time less than or equal.",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAtGte",
            "in": "query",
            "x-ms-summary": "Created At GTE",
            "description": "The created at greater than or equal.",
            "required": false,
            "type": "string"
          },
          {
            "name": "updatedAt",
            "in": "query",
            "x-ms-summary": "Updated At",
            "required": false,
            "type": "string",
            "description": "Search for folder at given update timestamp."
          },
          {
            "name": "updatedAtLte",
            "in": "query",
            "x-ms-summary": "Updated At LTE",
            "description": "The updated at later than or equal.",
            "required": false,
            "type": "string"
          },
          {
            "name": "updatedAtGte",
            "in": "query",
            "x-ms-summary": "Updated At GTE",
            "description": "The updated at greater than or equal.",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "x-ms-summary": "Name",
            "required": false,
            "type": "string",
            "description": "Search for folders containing the specified name."
          },
          {
            "name": "path",
            "in": "query",
            "x-ms-summary": "Path",
            "required": false,
            "type": "string",
            "description": "Search for folders by path."
          },
          {
            "name": "parentFolderId",
            "in": "query",
            "x-ms-summary": "Parent Folder ID",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Search for folders with the given parent folderId."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation.",
            "schema": {
              "$ref": "#/definitions/CollectionResponseFolder"
            }
          }
        }
      }
    },
    "/files/v3/folders/update/async/tasks/{taskId}/status": {
      "get": {
        "description": "Check status of folder update. Folder updates happen asynchronously.",
        "summary": "Check folder update",
        "tags": [
          "Folders"
        ],
        "operationId": "Get-_files_v3_folders_update_async_tasks_taskId_status_checkUpdateStatus",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "x-ms-summary": "Task ID",
            "x-ms-url-encoding": "single",
            "required": true,
            "type": "string",
            "description": "TaskId of folder update."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation.",
            "schema": {
              "$ref": "#/definitions/FolderActionResponse"
            }
          }
        }
      }
    },
    "/files/v3/folders/update/async": {
      "post": {
        "description": "Update properties of folder by given ID. This action happens asynchronously and will update all of the folder's children as well.",
        "summary": "Update folder properties",
        "tags": [
          "Folders"
        ],
        "operationId": "Post-_files_v3_folders_update_async_updateProperties",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Properties to change in the folder.",
            "schema": {
              "$ref": "#/definitions/FolderUpdateInput"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "accepted.",
            "schema": {
              "$ref": "#/definitions/FolderUpdateTaskLocator"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "StandardError": {
      "title": "Error",
      "type": "object",
      "properties": {
        "subCategory": {
          "type": "object",
          "description": "The subcategory.",
          "title": "Subcategory"
        },
        "context": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The context.",
          "title": "Context"
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The links.",
          "title": "Links"
        },
        "id": {
          "type": "string",
          "description": "The identifier.",
          "title": "ID"
        },
        "category": {
          "type": "string",
          "description": "The category.",
          "title": "Category"
        },
        "message": {
          "type": "string",
          "description": "The message.",
          "title": "Message"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          },
          "description": "The errors.",
          "title": "Errors"
        },
        "status": {
          "description": "The status.",
          "title": "Status",
          "type": "string"
        }
      },
      "required": [
        "context",
        "links",
        "category",
        "message",
        "errors",
        "status"
      ]
    },
    "FolderUpdateInput": {
      "title": "FolderUpdateInput",
      "description": "Object for updating folders.",
      "type": "object",
      "properties": {
        "parentFolderId": {
          "description": "New parent folderId. If changed, the folder and all it's children will be moved into the specified folder. parentFolderId and parentFolderPath cannot be specified at the same time.",
          "type": "integer",
          "format": "int32",
          "title": "Parent Folder ID"
        },
        "name": {
          "description": "New name. If specified the folder's name and fullPath will change. All children of the folder will be updated accordingly.",
          "type": "string",
          "title": "Name"
        },
        "id": {
          "description": "ID of the folder to change.",
          "type": "string",
          "title": "ID"
        }
      },
      "required": [
        "id"
      ]
    },
    "FolderActionResponse": {
      "title": "FolderActionResponse",
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/Folder"
        },
        "completedAt": {
          "description": "When the requested changes have been completed.",
          "title": "Completed At",
          "type": "string"
        },
        "numErrors": {
          "description": "Number of errors resulting from the requested changes.",
          "title": "Number of Errors",
          "type": "integer",
          "format": "int32"
        },
        "requestedAt": {
          "description": "Timestamp representing when the task was requested.",
          "title": "Requested At",
          "type": "string"
        },
        "startedAt": {
          "description": "Timestamp representing when the task was started at.",
          "title": "Started At",
          "type": "string"
        },
        "links": {
          "description": "Link to check the status of the task.",
          "title": "Links",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "errors": {
          "description": "Detailed errors resulting from the task.",
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StandardError"
          }
        },
        "taskId": {
          "description": "ID of the task.",
          "title": "Task ID",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Status"
        }
      },
      "required": [
        "completedAt",
        "startedAt",
        "taskId",
        "status"
      ]
    },
    "Paging": {
      "title": "Paging",
      "type": "object",
      "properties": {
        "next": {
          "$ref": "#/definitions/NextPage"
        },
        "prev": {
          "$ref": "#/definitions/PreviousPage"
        }
      }
    },
    "Error": {
      "title": "Error",
      "type": "object",
      "properties": {
        "subCategory": {
          "description": "A specific category that contains more specific detail about the error.",
          "title": "Subcategory",
          "type": "string"
        },
        "context": {
          "description": "Context about the error condition.",
          "title": "Context",
          "type": "object",
          "additionalProperties": {}
        },
        "correlationId": {
          "description": "A unique identifier for the request. Include this value with any error reports or support tickets.",
          "title": "Correlation ID",
          "type": "string",
          "format": "uuid"
        },
        "links": {
          "description": "A map of link names to associated URIs containing documentation about the error or recommended remediation steps.",
          "title": "Links",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "message": {
          "description": "A human readable message describing the error along with remediation steps where appropriate.",
          "title": "Message",
          "type": "string"
        },
        "category": {
          "description": "The error category.",
          "title": "Category",
          "type": "string"
        },
        "errors": {
          "description": "Further information about the errors.",
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          }
        }
      },
      "required": [
        "correlationId",
        "message",
        "category"
      ]
    },
    "Folder": {
      "title": "Folder",
      "type": "object",
      "properties": {
        "createdAt": {
          "description": "Timestamp of folder creation.",
          "title": "Created At",
          "type": "string"
        },
        "archivedAt": {
          "description": "Timestamp of folder deletion.",
          "title": "Archived At",
          "type": "string"
        },
        "archived": {
          "description": "Marks whether the folder is deleted or not.",
          "title": "Archived",
          "type": "boolean"
        },
        "path": {
          "description": "Path of the folder in the file manager.",
          "title": "Path",
          "type": "string"
        },
        "parentFolderId": {
          "description": "ID of the parent folder.",
          "title": "Parent Folder ID",
          "type": "string"
        },
        "name": {
          "description": "Name of the folder.",
          "title": "Name",
          "type": "string"
        },
        "id": {
          "description": "ID of the folder.",
          "title": "ID",
          "type": "string"
        },
        "updatedAt": {
          "description": "Timestamp of the latest update to the folder.",
          "title": "Updated At",
          "type": "string"
        }
      },
      "required": [
        "createdAt",
        "archived",
        "id",
        "updatedAt"
      ]
    },
    "CollectionResponseFile": {
      "title": "CollectionResponseFile",
      "description": "Collections of files.",
      "type": "object",
      "properties": {
        "paging": {
          "$ref": "#/definitions/Paging"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/File"
          }
        }
      },
      "required": [
        "results"
      ]
    },
    "ErrorDetail": {
      "title": "ErrorDetail",
      "type": "object",
      "properties": {
        "subCategory": {
          "description": "A specific category that contains more specific detail about the error.",
          "title": "Subcategory",
          "type": "string"
        },
        "code": {
          "description": "The status code associated with the error detail.",
          "title": "Code",
          "type": "string"
        },
        "in": {
          "description": "The name of the field or parameter in which the error was found.",
          "title": "Description",
          "type": "string"
        },
        "context": {
          "description": "Context about the error condition.",
          "title": "Context",
          "type": "object",
          "additionalProperties": {}
        },
        "message": {
          "description": "A human readable message describing the error along with remediation steps where appropriate.",
          "title": "Message",
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "FileActionResponse": {
      "title": "FileActionResponse",
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/File"
        },
        "completedAt": {
          "description": "Time of completion of task.",
          "title": "Completed At",
          "type": "string"
        },
        "numErrors": {
          "description": "Number of errors resulting from the task.",
          "title": "Number of Errors",
          "type": "integer",
          "format": "int32"
        },
        "requestedAt": {
          "description": "Timestamp of when the task was requested.",
          "title": "Requested At",
          "type": "string"
        },
        "startedAt": {
          "description": "Timestamp of when the task was started.",
          "title": "Started At",
          "type": "string"
        },
        "links": {
          "description": "Link to check the status of the requested task.",
          "title": "Links",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "errors": {
          "description": "Descriptive error messages.",
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StandardError"
          }
        },
        "taskId": {
          "description": "ID of the requested task.",
          "title": "Task ID",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Status"
        }
      },
      "required": [
        "completedAt",
        "startedAt",
        "taskId",
        "status"
      ]
    },
    "CollectionResponseFolder": {
      "title": "CollectionResponseFolder",
      "type": "object",
      "properties": {
        "paging": {
          "$ref": "#/definitions/Paging"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Folder"
          }
        }
      },
      "required": [
        "results"
      ]
    },
    "FileStat": {
      "title": "FileStat",
      "type": "object",
      "properties": {
        "file": {
          "$ref": "#/definitions/File"
        },
        "folder": {
          "$ref": "#/definitions/Folder"
        }
      }
    },
    "ImportFromUrlInput": {
      "title": "ImportFromUrlInput",
      "type": "object",
      "properties": {
        "folderPath": {
          "description": "One of folderPath or folderId is required. Destination folder path for the uploaded file. If the folder path does not exist, there will be an attempt to create the folder path.",
          "title": "Folder Path",
          "type": "string"
        },
        "access": {
          "$ref": "#/definitions/Access1"
        },
        "duplicateValidationScope": {
          "$ref": "#/definitions/DuplicateValidationScope"
        },
        "name": {
          "description": "Name to give the resulting file in the file manager.",
          "title": "Name",
          "type": "string"
        },
        "duplicateValidationStrategy": {
          "$ref": "#/definitions/DuplicateValidationStrategy"
        },
        "ttl": {
          "description": "Time to live. If specified the file will be deleted after the given time frame. If left unset, the file will exist indefinitely.",
          "title": "TTL",
          "type": "string"
        },
        "overwrite": {
          "description": "If true, will overwrite existing file if one with the same name and extension exists in the given folder. The overwritten file will be deleted and the uploaded file will take its place with a new ID. If unset or set as false, the new file's name will be updated to prevent colliding with existing file if one exists with the same path, name, and extension",
          "title": "Overwrite",
          "type": "boolean"
        },
        "url": {
          "description": "URL to download the new file from.",
          "title": "URL",
          "type": "string"
        },
        "folderId": {
          "description": "One of folderId or folderPath is required. Destination folderId for the uploaded file.",
          "title": "Folder ID",
          "type": "string"
        }
      },
      "required": [
        "access",
        "url"
      ]
    },
    "FileUpdateInput": {
      "title": "FileUpdateInput",
      "description": "Object for updating files.",
      "type": "object",
      "properties": {
        "access": {
          "$ref": "#/definitions/Access2"
        },
        "parentFolderId": {
          "description": "FolderId where the file should be moved to. folderId and folderPath parameters cannot be set at the same time.",
          "title": "Parent Folder ID",
          "type": "string"
        },
        "name": {
          "description": "New name for the file.",
          "title": "Name",
          "type": "string"
        },
        "parentFolderPath": {
          "description": "Folder path where the file should be moved to. folderId and folderPath parameters cannot be set at the same time.",
          "title": "Parent Folder Path",
          "type": "string"
        },
        "isUsableInContent": {
          "description": "Mark whether the file should be used in new content or not.",
          "title": "Is Usable In Context",
          "type": "boolean"
        },
        "expiresAt": {
          "description": "When expires at.",
          "title": "Expires At",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SignedUrl": {
      "title": "SignedUrl",
      "description": "Signed Url object with optional ancillary metadata of requested file.",
      "type": "object",
      "properties": {
        "extension": {
          "description": "Extension of the requested file.",
          "title": "Extension",
          "type": "string"
        },
        "size": {
          "description": "Size in bytes of the requested file.",
          "title": "Size",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the requested file.",
          "title": "Name",
          "type": "string"
        },
        "width": {
          "description": "For image and video files. The width of the file.",
          "title": "Width",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.",
          "title": "Type",
          "type": "string"
        },
        "expiresAt": {
          "description": "Timestamp of when the URL will no longer grant access to the file.",
          "title": "Expires At",
          "type": "string"
        },
        "url": {
          "description": "Signed URL with access to the specified file. Anyone with this URL will be able to access the file until it expires.",
          "title": "URL",
          "type": "string"
        },
        "height": {
          "description": "For image and video files. The height of the file.",
          "title": "Height",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "extension",
        "size",
        "name",
        "type",
        "expiresAt",
        "url"
      ]
    },
    "PreviousPage": {
      "title": "PreviousPage",
      "type": "object",
      "properties": {
        "before": {
          "description": "The before.",
          "title": "Before",
          "type": "string"
        },
        "link": {
          "description": "The link.",
          "title": "Link",
          "type": "string"
        }
      },
      "required": [
        "before"
      ]
    },
    "FolderInput": {
      "title": "FolderInput",
      "description": "Object for creating a folder.",
      "type": "object",
      "properties": {
        "parentFolderId": {
          "description": "FolderId of the parent of the created folder. If not specified, the folder will be created at the root level. parentFolderId and parentFolderPath cannot be set at the same time.",
          "title": "Parent Folder ID",
          "type": "string"
        },
        "parentPath": {
          "description": "Path of the parent of the created folder. If not specified the folder will be created at the root level. parentFolderPath and parentFolderId cannot be set at the same time.",
          "title": "Parent Path",
          "type": "string"
        },
        "name": {
          "description": "Desired name for the folder.",
          "title": "Name",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "ImportFromUrlTaskLocator": {
      "title": "ImportFromUrlTaskLocator",
      "description": "Information on the task that has been started, and where to check it's status.",
      "type": "object",
      "properties": {
        "links": {
          "description": "Links for where to check information related to the task. The `status` link gives the URL for where to check the status of the task.",
          "title": "Links",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "description": "ID of the task.",
          "title": "ID",
          "type": "string"
        }
      },
      "required": [
        "links",
        "id"
      ]
    },
    "File": {
      "title": "File",
      "description": "File.",
      "type": "object",
      "properties": {
        "extension": {
          "description": "Extension of the file. ex: .jpg, .png, .gif, .pdf, etc.",
          "title": "Extension",
          "type": "string"
        },
        "access": {
          "$ref": "#/definitions/Access"
        },
        "parentFolderId": {
          "description": "ID of the folder the file is in.",
          "title": "Parent Folder ID",
          "type": "string"
        },
        "encoding": {
          "description": "Encoding of the file.",
          "title": "Encoding",
          "type": "string"
        },
        "type": {
          "description": "Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.",
          "title": "Type",
          "type": "string"
        },
        "isUsableInContent": {
          "description": "Previously \"archived\". Indicates if the file should be used when creating new content like web pages.",
          "title": "Is Usable In Context",
          "type": "boolean"
        },
        "url": {
          "description": "URL of the given file. This URL can change depending on the domain settings of the account. Will use the select file hosting domain.",
          "title": "URL",
          "type": "string"
        },
        "expiresAt": {
          "description": "When expires at.",
          "title": "Expires At",
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "description": "Creation time of the file object.",
          "title": "Created At",
          "type": "string"
        },
        "archivedAt": {
          "description": "Deletion time of the file object.",
          "title": "Archived At",
          "type": "string"
        },
        "archived": {
          "description": "If the file is deleted.",
          "title": "Archived",
          "type": "boolean"
        },
        "path": {
          "description": "Path of the file in the file manager.",
          "title": "Path",
          "type": "string"
        },
        "size": {
          "description": "Size of the file in bytes.",
          "title": "Size",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the file.",
          "title": "Name",
          "type": "string"
        },
        "width": {
          "description": "For image and video files, the width of the content.",
          "title": "Width",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "File ID.",
          "title": "ID",
          "type": "string"
        },
        "defaultHostingUrl": {
          "description": "Default hosting URL of the file. This will use one of HubSpot's provided URLs to serve the file.",
          "title": "Default Hosting URL",
          "type": "string"
        },
        "updatedAt": {
          "description": "Timestamp of the latest update to the file.",
          "title": "Updated At",
          "type": "string"
        },
        "height": {
          "description": "For image and video files, the height of the content.",
          "title": "Height",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "access",
        "createdAt",
        "archived",
        "id",
        "updatedAt"
      ]
    },
    "NextPage": {
      "title": "NextPage",
      "type": "object",
      "properties": {
        "link": {
          "description": "The link.",
          "title": "Link",
          "type": "string"
        },
        "after": {
          "description": "The after.",
          "title": "After",
          "type": "string"
        }
      },
      "required": [
        "after"
      ]
    },
    "FolderUpdateTaskLocator": {
      "title": "FolderUpdateTaskLocator",
      "description": "Information on the task that has been started, and where to check it's status.",
      "type": "object",
      "properties": {
        "links": {
          "description": "Links for where to check information related to the task. The `status` link gives the URL for where to check the status of the task.",
          "title": "Links",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "description": "ID of the task.",
          "title": "ID",
          "type": "string"
        }
      },
      "required": [
        "links",
        "id"
      ]
    },
    "Access": {
      "title": "Access",
      "description": "File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE, PRIVATE.",
      "type": "string",
      "enum": [
        "PUBLIC_INDEXABLE",
        "PUBLIC_NOT_INDEXABLE",
        "HIDDEN_INDEXABLE",
        "HIDDEN_NOT_INDEXABLE",
        "HIDDEN_PRIVATE",
        "PRIVATE"
      ]
    },
    "Access1": {
      "title": "Access1",
      "description": "PUBLIC_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines can index the file. PUBLIC_NOT_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines *can't* index the file. PRIVATE: File is NOT publicly accessible. Requires a signed URL to see content. Search engines *can't* index the file.",
      "type": "string",
      "enum": [
        "PUBLIC_INDEXABLE",
        "PUBLIC_NOT_INDEXABLE",
        "HIDDEN_INDEXABLE",
        "HIDDEN_NOT_INDEXABLE",
        "HIDDEN_PRIVATE",
        "PRIVATE"
      ]
    },
    "Access2": {
      "title": "Access2",
      "description": "NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead.",
      "type": "string",
      "enum": [
        "PUBLIC_INDEXABLE",
        "PUBLIC_NOT_INDEXABLE",
        "HIDDEN_INDEXABLE",
        "HIDDEN_NOT_INDEXABLE",
        "HIDDEN_PRIVATE",
        "PRIVATE"
      ]
    },
    "DuplicateValidationScope": {
      "title": "DuplicateValidationScope",
      "description": "ENTIRE_PORTAL: Look for a duplicate file in the entire account. EXACT_FOLDER: Look for a duplicate file in the provided folder.",
      "type": "string",
      "enum": [
        "ENTIRE_PORTAL",
        "EXACT_FOLDER"
      ]
    },
    "DuplicateValidationStrategy": {
      "title": "DuplicateValidationStrategy",
      "description": "NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead.",
      "type": "string",
      "enum": [
        "NONE",
        "REJECT",
        "RETURN_EXISTING"
      ]
    },
    "size": {
      "title": "Size",
      "description": "The size.",
      "type": "string",
      "enum": [
        "thumb",
        "icon",
        "medium",
        "preview"
      ]
    },
    "Status": {
      "title": "Status",
      "description": "Current status of the task.",
      "type": "string",
      "enum": [
        "PENDING",
        "PROCESSING",
        "CANCELED",
        "COMPLETE"
      ]
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "Access Token (in the form 'Bearer YOUR_TOKEN')": {
      "type": "apiKey",
      "in": "header",
      "name": "authorization"
    }
  },
  "security": [
    {
      "Access Token (in the form 'Bearer YOUR_TOKEN')": []
    }
  ],
  "tags": [
    {
      "name": "Files"
    },
    {
      "name": "Folders"
    }
  ],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.hubspot.com/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://legal.hubspot.com/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Content and Files;Sales and CRM"
    }
  ]
}
