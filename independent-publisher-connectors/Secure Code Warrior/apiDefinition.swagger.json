{
  "swagger": "2.0",
  "info": {
    "version": "1.1",
    "title": "Secure Code Warrior",
    "description": "This Secure Code Warrior(https://securecodewarrior.com) connector provides programmatic access to the learning platform. Secure Code Warrior makes secure coding a positive and engaging experience for developers as they increase their software security skills. With our flagship Learning Platform, we guide each coder along their own preferred learning pathway, so that security-skilled developers become the everyday superheroes of our connected world.",
    "contact": {
      "name": "Troy Taylor",
      "url": "https://www.hitachisolutions.com",
      "email": "ttaylor@hitachisolutions.com"
    }
  },
  "externalDocs": {
    "description": "Find out more about Secure Code Warrior",
    "url": "https://securecodewarrior.com"
  },
  "host": "portal-api.securecodewarrior.com",
  "basePath": "/api/v2",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "X-API-Key"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": [
    {
      "name": "Training",
      "description": "Authorized Keys: Report API key, Admin API key, Team API Key"
    },
    {
      "name": "Assessments",
      "description": "Authorized Keys: Report API key, Admin API key, Team API Key"
    },
    {
      "name": "Tournaments",
      "description": "Authorized Keys: Report API key, Admin API key"
    },
    {
      "name": "Learning",
      "description": "Authorized Keys: Report API key, Admin API key, Team API Key"
    },
    {
      "name": "Users",
      "description": "Authorized Keys: Admin API key"
    },
    {
      "name": "Teams",
      "description": "Authorized Keys: Admin API key"
    },
    {
      "name": "URL fetcher",
      "description": "Authorized Keys: Report API key, Admin API key, Team API Key"
    },
    {
      "name": "Metrics",
      "description": "Authorized Keys: Report API key, Admin API key, Team API Key"
    },
    {
      "name": "Courses",
      "description": "Authorized Keys: Report API key, Admin API key, Team API Key"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "responses": {
    "RequestEntityTooLarge": {
      "description": "The request entity was too large. Limit is 1mb.",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "statusCode": 413,
          "error": "Request Entity Too Large",
          "message": "Request Entity Too Large",
          "code": 19
        }
      }
    },
    "BadRequest": {
      "description": "A bad request error",
      "examples": {
        "application/json": {
          "statusCode": 400,
          "error": "Bad Request",
          "message": "Request body expected",
          "code": 4
        }
      },
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "definitions": {
    "Tournament": {
      "type": "object",
      "title": "Tournament",
      "required": [
        "_id",
        "name",
        "start_time",
        "end_time",
        "timezone"
      ],
      "properties": {
        "_id": {
          "description": "The ID of the tournament",
          "type": "string",
          "example": "58454294bc0cedf458849d49"
        },
        "name": {
          "description": "The name of the tournament",
          "type": "string",
          "example": "Annual Tournament"
        },
        "description": {
          "description": "The tournament description",
          "type": "string",
          "example": "Get ready for the ultimate tournament! Test your skills and win some prizes."
        },
        "start_time": {
          "description": "The time the tournament starts",
          "type": "string",
          "format": "date-time",
          "example": "2018-01-17T04:57:47.715Z"
        },
        "end_time": {
          "description": "The time the tournament ends",
          "type": "string",
          "format": "date-time",
          "example": "2018-01-21T04:57:47.715Z"
        },
        "timezone": {
          "description": "The timezone that the tournament is being held in",
          "type": "string",
          "example": "Australia/Sydney"
        }
      }
    },
    "TournamentLeaderboardSearch": {
      "description": "Tournament leaderboard search filters",
      "type": "object",
      "properties": {
        "report_period_in_days": {
          "description": "The number of days into the past to report on (valid values - 1, 7 and 30 days)",
          "type": "integer",
          "example": 1
        },
        "startdate": {
          "description": "developer leaderboard completed on or after the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
          "type": "string",
          "example": "2017-01-01T00:00:00.000Z"
        },
        "enddate": {
          "description": "developer leaderboard completed on or before the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
          "type": "string",
          "example": "2019-01-01T00:00:00.000Z"
        },
        "users": {
          "description": "Users to include in leaderboard (one or more user emails, separated by comma)",
          "type": "string",
          "example": "dev1@securecodewarrior.com, dev2@securecodewarrior.com"
        },
        "team_names": {
          "description": "Team names (one or more team names, separated by comma)",
          "type": "string",
          "example": "Company 1 Team 1, Company 1 Team 2"
        },
        "tags": {
          "description": "User tags (one or more user tags, separated by comma)",
          "type": "string",
          "example": "tag-11, tag-12"
        },
        "page": {
          "description": "The page number of results",
          "type": "integer",
          "example": 1
        }
      }
    },
    "TournamentParticipant": {
      "type": "object",
      "title": "Tournament Participant",
      "required": [
        "rank",
        "developer",
        "blocked",
        "minutes_spent",
        "language",
        "max_points",
        "points",
        "lives_lost",
        "hints_used",
        "levels"
      ],
      "properties": {
        "rank": {
          "description": "The final position of the participant within the tournament",
          "type": "integer",
          "example": 1
        },
        "developer": {
          "$ref": "#/definitions/Developer"
        },
        "blocked": {
          "description": "Whether this participant was blocked from the tournnament",
          "type": "boolean",
          "example": false
        },
        "minutes_spent": {
          "description": "How long the developer spent answering (in minutes)",
          "type": "integer",
          "example": 45
        },
        "language": {
          "description": "The language/framework the the participant used",
          "type": "string",
          "example": "Java Spring"
        },
        "max_points": {
          "description": "The maximum amount of points available in the tournament",
          "type": "integer",
          "example": 4000
        },
        "points": {
          "description": "The amount of points the participant gained",
          "type": "integer",
          "example": 3500
        },
        "hints_used": {
          "description": "Number of hints the participant used",
          "type": "integer",
          "example": 25
        },
        "lives_lost": {
          "description": "The number of lives the participant lost during the tournament",
          "type": "integer",
          "example": 10
        },
        "levels": {
          "description": "The levels of the challenge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Level"
          }
        }
      }
    },
    "Level": {
      "type": "object",
      "title": "Level",
      "required": [
        "name",
        "challenges"
      ],
      "properties": {
        "name": {
          "description": "The level name",
          "type": "string",
          "example": "Level 1"
        },
        "challenges": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "number",
              "category",
              "subcategory",
              "difficulty",
              "status",
              "max_points",
              "points",
              "minutes_spent",
              "codebase_size",
              "stages"
            ],
            "properties": {
              "number": {
                "description": "The challenge number (starts at 1)",
                "type": "integer",
                "example": 1
              },
              "category": {
                "description": "The challenge category",
                "type": "string",
                "example": "Injection Flaws"
              },
              "subcategory": {
                "description": "The challenge subcategory",
                "type": "string",
                "example": "SQL Injection"
              },
              "difficulty": {
                "type": "string",
                "example": "hard",
                "enum": [
                  "easy",
                  "medium",
                  "hard"
                ]
              },
              "status": {
                "$ref": "#/definitions/Status"
              },
              "max_points": {
                "description": "The maximum points available for this challenge",
                "type": "integer",
                "example": 350
              },
              "points": {
                "description": "The points obtained for this challenge",
                "type": "integer",
                "example": 320
              },
              "codebase_size": {
                "type": "string",
                "example": "large",
                "enum": [
                  "small",
                  "large"
                ]
              },
              "minutes_spent": {
                "description": "How long the developer spent answering (in minutes)",
                "type": "integer",
                "example": 3
              },
              "stages": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Stage"
                }
              }
            }
          }
        }
      }
    },
    "Stage": {
      "type": "object",
      "title": "Stage",
      "required": [
        "number",
        "name",
        "status",
        "points",
        "max_points",
        "minutes_spent",
        "lives_lost",
        "hints_used"
      ],
      "properties": {
        "number": {
          "description": "The stage number",
          "type": "integer",
          "example": 1
        },
        "name": {
          "description": "The name of the stage",
          "type": "string",
          "example": "Locate Vulnerability"
        },
        "status": {
          "description": "The status of the attempt at this stage",
          "type": "string",
          "example": "correct",
          "enum": [
            "correct",
            "incorrect",
            "pending"
          ]
        },
        "points": {
          "description": "Points gained on this stage",
          "type": "integer",
          "example": 320
        },
        "max_points": {
          "description": "Maximum points available on this stage",
          "type": "integer",
          "example": 350
        },
        "minutes_spent": {
          "description": "How long the developer spent answering (in minutes)",
          "type": "integer",
          "example": 3
        },
        "lives_lost": {
          "description": "The number of lives lost on this stage",
          "type": "integer",
          "example": 1
        },
        "hints_used": {
          "description": "The number of hints used on this stage",
          "type": "integer",
          "example": 0
        }
      }
    },
    "Assessment": {
      "type": "object",
      "title": "Assessment",
      "required": [
        "_id",
        "status",
        "name",
        "description",
        "supported_languages",
        "difficulty",
        "success_ratio",
        "emits_certificate",
        "time_limit",
        "start_date",
        "end_date",
        "number_of_challenges",
        "self_assess",
        "retries_allowed"
      ],
      "properties": {
        "_id": {
          "description": "The assessment ID",
          "type": "string",
          "example": "5702d346c6bf9dfe533ffa6d"
        },
        "status": {
          "description": "The status of the assessment",
          "type": "string",
          "example": "correct",
          "enum": [
            "correct",
            "incorrect",
            "done"
          ]
        },
        "name": {
          "description": "The name of the assessment",
          "type": "string",
          "example": "Junior Developer Assessment"
        },
        "description": {
          "description": "The assessment description",
          "type": "string",
          "example": "This assessment is useful for onboarding new developers into the team"
        },
        "supported_languages": {
          "description": "List of languages/frameworks available for the assessment",
          "type": "array",
          "items": {
            "type": "string",
            "example": "[\"Java Spring\", \"Ruby Rails\"]"
          }
        },
        "difficulty": {
          "description": "The difficulty of the assessment",
          "type": "string",
          "example": "medium",
          "enum": [
            "easy",
            "medium",
            "hard"
          ]
        },
        "success_ratio": {
          "description": "The percentage required to pass the assessment",
          "type": "integer",
          "example": 75
        },
        "emits_certificate": {
          "type": "boolean",
          "description": "Is the assessment linked to a certificate?",
          "example": true
        },
        "time_limit": {
          "description": "The time limit of the assessment in milliseconds. null = no time limit",
          "type": "integer",
          "example": 3600000
        },
        "start_date": {
          "description": "The date the assessment starts",
          "type": "string",
          "format": "date-time",
          "example": "2018-01-17T04:57:47.715Z"
        },
        "end_date": {
          "description": "The date the assessment ends",
          "type": "string",
          "format": "date-time",
          "example": "2018-01-18T04:57:47.715Z"
        },
        "timezone": {
          "description": "The timezone of the assessment",
          "type": "string",
          "example": "Australia/Sydney"
        },
        "number_of_challenges": {
          "description": "The number of challenges in the assessment",
          "type": "integer",
          "example": 21
        },
        "self_assess": {
          "description": "Is assessment a public assessment?",
          "type": "boolean",
          "example": true
        },
        "retries_allowed": {
          "description": "Are retries allowed for this assessment?",
          "type": "boolean",
          "example": true
        }
      }
    },
    "AccuracyStats": {
      "type": "object",
      "title": "Accuracy Stats",
      "description": "Accuracy statistics in percentages. A pair is returned. Either located/fixed or identified/fixed",
      "properties": {
        "located": {
          "description": "The % of vulnerabilities located",
          "type": "integer",
          "example": 100
        },
        "identified": {
          "description": "The % of vulnerabilities identified",
          "type": "integer",
          "example": 100
        },
        "fixed": {
          "description": "The % of vulnerabilities fixed",
          "type": "integer",
          "example": 100
        }
      }
    },
    "AssessmentAttempt": {
      "type": "object",
      "title": "Assessment Attempt",
      "required": [
        "_id",
        "_assessment",
        "developer",
        "status",
        "language",
        "started",
        "completed",
        "deadline",
        "progress"
      ],
      "properties": {
        "_id": {
          "description": "The assessment attempt ID",
          "type": "string"
        },
        "_assessment": {
          "description": "The assessment it belongs to",
          "type": "string",
          "example": "5702d346c6bf9dfe533ffa6d"
        },
        "name": {
          "description": "The assessment name",
          "type": "string",
          "example": "Junior Developer Assessment"
        },
        "developer": {
          "$ref": "#/definitions/Developer"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "language": {
          "description": "The language/framework of the assessment. null = language/framework not selected for assessment supporting more than one language",
          "type": "string",
          "example": "Java Spring"
        },
        "started": {
          "description": "The date/time that the assessment was started",
          "type": "string",
          "format": "date-time",
          "example": "2018-01-17T04:57:47.715Z"
        },
        "completed": {
          "description": "The date/time that the assessment was completed",
          "type": "string",
          "format": "date-time",
          "example": "2018-01-18T04:57:47.715Z"
        },
        "deadline": {
          "description": "The date/time of the assessment deadline. If an assessment does not have a time limit, deadline will be <code>null</code>",
          "type": "string",
          "format": "date-time",
          "example": "2018-01-19T04:57:47.715Z"
        },
        "score": {
          "description": "Assessment score in %",
          "type": "integer",
          "example": 100
        },
        "completed_in": {
          "description": "The amount of time taken to complete the assessment attempt",
          "type": "string",
          "example": "2 seconds"
        },
        "passing_grade": {
          "description": "The percentage required to pass the assessment",
          "type": "integer",
          "example": 30
        },
        "pass_status": {
          "description": "The pass status of the assessment",
          "type": "string",
          "example": "Passed"
        },
        "progress": {
          "description": "Details of the assessment attempt",
          "type": "object",
          "properties": {
            "correct": {
              "description": "The number of correct challenges",
              "type": "integer",
              "example": 25
            },
            "incorrect": {
              "description": "The number of incorrect challenges",
              "type": "integer",
              "example": 0
            },
            "number_of_challenges": {
              "description": "The total number of challenges",
              "type": "integer",
              "example": 25
            },
            "completed": {
              "description": "The number of challenges completed",
              "type": "integer",
              "example": 25
            }
          }
        },
        "accuracy": {
          "description": "The accuracy of locating/identifying/fixing the vulnerabilities",
          "allOf": [
            {
              "$ref": "#/definitions/AccuracyStats"
            }
          ]
        },
        "challenges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Challenge"
          }
        }
      }
    },
    "Status": {
      "description": "Indicates the status of a challenge/assessment which may be pending, in progress, done or 'out of reach'",
      "type": "string",
      "example": "correct",
      "title": "Status",
      "enum": [
        "pending",
        "in_progress",
        "done",
        "out_of_reach",
        "skipped",
        "correct",
        "incorrect"
      ]
    },
    "Challenge": {
      "type": "object",
      "title": "Challenge",
      "required": [
        "number",
        "category",
        "subcategory",
        "difficulty",
        "status",
        "max_score",
        "score"
      ],
      "description": "A challenge object represents all the data relevent to a given type of challenge. The locate and identify fields are mutually exclusive thus only one will be returned based on the type of challenge. Empty array of challenges occurs when the language for the assessment attempt has yet to be selected",
      "properties": {
        "number": {
          "description": "The challenge number (starts at 1)",
          "type": "integer",
          "example": 1
        },
        "category": {
          "description": "The challenge category",
          "type": "string",
          "example": "Injection Flaws"
        },
        "subcategory": {
          "description": "The challenge subcategory",
          "type": "string",
          "example": "SQL Injection"
        },
        "difficulty": {
          "type": "string",
          "example": "medium",
          "enum": [
            "easy",
            "medium",
            "hard"
          ]
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "max_score": {
          "description": "The maximum score available for this challenge",
          "type": "integer",
          "example": 300
        },
        "score": {
          "description": "The score obtained for this challenge",
          "type": "integer",
          "example": 300
        },
        "locate": {
          "description": "The statistics associated with the \"locating vulnerabilities\" stage",
          "type": "object",
          "properties": {
            "status": {
              "description": "The current status of the stage",
              "type": "string",
              "example": "correct",
              "enum": [
                "correct",
                "incorrect"
              ]
            }
          }
        },
        "identify": {
          "description": "The statistics associated with the \"identifying vulnerabilities\" stage",
          "type": "object",
          "properties": {
            "status": {
              "description": "The current status of the stage",
              "type": "string",
              "example": "correct",
              "enum": [
                "correct",
                "incorrect"
              ]
            }
          }
        },
        "fix": {
          "description": "The statistics associated with the \"fixing vulnerabilities\" stage",
          "type": "object",
          "properties": {
            "status": {
              "description": "The current status of the stage",
              "type": "string",
              "example": "correct",
              "enum": [
                "correct",
                "incorrect"
              ]
            }
          }
        }
      }
    },
    "AssessmentsSearch": {
      "description": "Assessments search filters",
      "type": "object",
      "properties": {
        "status": {
          "description": "Assessment status",
          "type": "string",
          "example": "enabled",
          "enum": [
            "enabled",
            "disabled",
            "closed"
          ]
        },
        "name": {
          "description": "Assessment name",
          "type": "string",
          "example": "Example assessment"
        },
        "supported_languages": {
          "description": "Language(s) supported by assessment",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SupportedLanguage"
          }
        },
        "difficulty": {
          "description": "Assessment difficulty",
          "type": "string",
          "example": "easy",
          "enum": [
            "easy",
            "medium",
            "hard"
          ]
        },
        "page": {
          "description": "The page number of results",
          "type": "integer",
          "example": 1
        }
      }
    },
    "AssessmentAttemptsSearch": {
      "description": "Assessment attempts search filters",
      "type": "object",
      "properties": {
        "assessment_id": {
          "description": "The assessment ID",
          "type": "string",
          "pattern": "^[0-9a-fA-F]{24}$",
          "example": "51c258a2551350e514d1ae24"
        },
        "name": {
          "description": "The assessment name",
          "type": "string",
          "example": "Junior Developer Assessment"
        },
        "users": {
          "description": "Users attempting the assessment (one or more user emails, separated by comma)",
          "type": "string",
          "example": "dev1@securecodewarrior.com, dev2@securecodewarrior.com"
        },
        "status": {
          "description": "Assessment attempt status",
          "type": "string",
          "example": "pending",
          "enum": [
            "pending",
            "in_progress",
            "done"
          ]
        },
        "team_names": {
          "description": "Team names (one or more team names, separated by comma)",
          "type": "string",
          "example": "Company 1 Team 1, Company 1 Team 2"
        },
        "tags": {
          "description": "User tags (one or more user tags, separated by comma)",
          "type": "string",
          "example": "tag-11, tag-12"
        },
        "pass_status": {
          "description": "Assessment attempt pass status",
          "type": "string",
          "example": "pass",
          "enum": [
            "pass",
            "fail",
            "in_progress"
          ]
        },
        "page": {
          "description": "The page number of results",
          "type": "integer",
          "example": 1
        }
      }
    },
    "AssessmentAssign": {
      "description": "Assign assessment to users/teams",
      "type": "object",
      "properties": {
        "users": {
          "description": "List of users to assign the assessment to",
          "type": "array",
          "items": {
            "description": "User to assign to assessment\n",
            "type": "string",
            "example": "dev1@securecodewarrior.com"
          }
        },
        "teams": {
          "description": "List of teams to assign the assessment to",
          "type": "array",
          "items": {
            "description": "Team to assign to assessment\n",
            "type": "string",
            "example": "Company 1 Team 1"
          }
        },
        "sendEmail": {
          "description": "Flag to indicate if assessment invite email sent on assigning assessment (Default: true)",
          "type": "boolean",
          "example": false
        }
      }
    },
    "SupportedLanguage": {
      "description": "Language supported by the assessment",
      "type": "object",
      "properties": {
        "_id": {
          "description": "Language Id",
          "type": "string",
          "example": "java"
        },
        "_framework": {
          "description": "Language framework",
          "type": "string",
          "example": "spring"
        }
      }
    },
    "preferredDevLanguage": {
      "description": "Dev language preference",
      "type": "object",
      "properties": {
        "_id": {
          "description": "Language Id",
          "type": "string",
          "example": "java"
        },
        "_framework": {
          "description": "Language Framework",
          "type": "string",
          "example": "spring"
        }
      }
    },
    "AssessmentAssignResponse": {
      "description": "Response to assessment assign POST request",
      "type": "object",
      "required": [
        "user",
        "inviteEmailSent",
        "inviteUrl"
      ],
      "properties": {
        "user": {
          "description": "User email Id",
          "type": "string",
          "example": "dev3@securecodewarrior.com"
        },
        "inviteEmailSent": {
          "description": "Was invite email sent ?",
          "type": "boolean",
          "example": true
        },
        "inviteUrl": {
          "description": "Assessment invite url",
          "type": "string",
          "example": "<%= EXTERNAL_HOST %>/invite-accept/..."
        }
      }
    },
    "TeamLeaderboard": {
      "description": "The team leaderboard contains all the team leaderboard entries valid during the given reporting period",
      "required": [
        "report_period_in_days",
        "leaderboard"
      ],
      "type": "object",
      "title": "Team Leaderboard",
      "properties": {
        "report_period_in_days": {
          "description": "The number of days into the past to report on",
          "type": "integer",
          "example": 7,
          "enum": [
            "1",
            "7",
            "30"
          ]
        },
        "leaderboard": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TeamLeaderboardEntry"
          }
        },
        "links": {
          "description": "Related API pages and pagination details",
          "type": "object",
          "title": "Links",
          "properties": {
            "total_pages": {
              "type": "integer",
              "description": "The total number of pages in the results",
              "example": 10
            },
            "results_per_page": {
              "type": "integer",
              "description": "The maximum number of results in each page",
              "example": 100
            },
            "next_page": {
              "type": "integer",
              "description": "The page number of the next page (if one exists)",
              "example": 3
            },
            "prev_page": {
              "type": "integer",
              "description": "The page number of the previous page (if one exists)",
              "example": 1
            },
            "total_results": {
              "type": "integer",
              "description": "The total number of the results",
              "example": 513
            }
          }
        }
      }
    },
    "TeamLeaderboardEntry": {
      "description": "An entry in the team leaderboard",
      "required": [
        "rank",
        "name",
        "developers",
        "points_average",
        "points_total",
        "accuracy",
        "confidence_level",
        "time_spent",
        "installed_sensei",
        "stats_over_report_period"
      ],
      "type": "object",
      "title": "Team Leaderboard Entry",
      "properties": {
        "rank": {
          "description": "The team's rank on the leaderboard.",
          "type": "integer",
          "example": 1
        },
        "name": {
          "description": "The name of the team",
          "type": "string",
          "example": "Team Awesome"
        },
        "developers": {
          "description": "The number of developers on the team",
          "type": "integer",
          "example": 7
        },
        "points_average": {
          "description": "The team's average points",
          "type": "integer",
          "example": 300
        },
        "points_total": {
          "description": "The team's total points",
          "type": "integer",
          "example": 2100
        },
        "accuracy": {
          "description": "The team's accuracy (in %)",
          "type": "integer",
          "example": 100
        },
        "confidence_level": {
          "description": "The team's confidence level (in %)",
          "type": "integer",
          "example": 100
        },
        "time_spent": {
          "description": "The total minutes spent by the team on challenges",
          "type": "integer",
          "example": 100
        },
        "installed_sensei": {
          "description": "The number of developers in the team that have installed sensei",
          "type": "integer",
          "example": 3
        },
        "stats_over_report_period": {
          "$ref": "#/definitions/StatsOverReportPeriod"
        }
      }
    },
    "MostEngagedTeams": {
      "description": "Most Engaged Teams in the company",
      "required": [
        "teams"
      ],
      "type": "object",
      "properties": {
        "teams": {
          "description": "Team details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TeamEntry"
          }
        },
        "links": {
          "description": "Related API pages and pagination details",
          "type": "object",
          "title": "Links",
          "properties": {
            "total_pages": {
              "type": "integer",
              "description": "The total number of pages in the results",
              "example": 10
            },
            "results_per_page": {
              "type": "integer",
              "description": "The maximum number of results in each page",
              "example": 100
            },
            "next_page": {
              "type": "integer",
              "description": "The page number of the next page (if one exists)",
              "example": 3
            },
            "prev_page": {
              "type": "integer",
              "description": "The page number of the previous page (if one exists)",
              "example": 1
            },
            "total_results": {
              "type": "integer",
              "description": "The total number of the results",
              "example": 513
            }
          }
        }
      }
    },
    "TeamEntry": {
      "description": "This object represents team details",
      "required": [
        "name",
        "status",
        "timeSpent"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the team",
          "type": "string",
          "example": "Demo Team"
        },
        "status": {
          "description": "Status of the team",
          "type": "string",
          "example": "enabled"
        },
        "timeSpent": {
          "description": "Team time spent",
          "type": "integer",
          "example": 826765
        }
      }
    },
    "MostEngagedUsers": {
      "description": "Most Engaged Users in the company",
      "required": [
        "users"
      ],
      "type": "object",
      "properties": {
        "users": {
          "description": "User details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserEntry"
          }
        },
        "links": {
          "description": "Related API pages and pagination details",
          "type": "object",
          "title": "Links",
          "properties": {
            "total_pages": {
              "type": "integer",
              "description": "The total number of pages in the results",
              "example": 10
            },
            "results_per_page": {
              "type": "integer",
              "description": "The maximum number of results in each page",
              "example": 100
            },
            "next_page": {
              "type": "integer",
              "description": "The page number of the next page (if one exists)",
              "example": 3
            },
            "prev_page": {
              "type": "integer",
              "description": "The page number of the previous page (if one exists)",
              "example": 1
            },
            "total_results": {
              "type": "integer",
              "description": "The total number of the results",
              "example": 513
            }
          }
        }
      }
    },
    "UserEntry": {
      "description": "This object represents user details",
      "required": [
        "name",
        "status",
        "timeSpent"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the user",
          "type": "string",
          "example": "Demo User"
        },
        "status": {
          "description": "Status of the user",
          "type": "string",
          "example": "enabled"
        },
        "timeSpent": {
          "description": "Time spent by the user",
          "type": "integer",
          "example": 826765
        }
      }
    },
    "StatsOverReportPeriod": {
      "description": "The statistics computed for the given report period",
      "required": [
        "points_gained",
        "accuracy_change",
        "confidence_level_change",
        "minutes_spent",
        "challenges_correct",
        "challenges_incorrect"
      ],
      "type": "object",
      "title": "Stats over Report Period",
      "properties": {
        "points_gained": {
          "description": "The number of points the developer has gained",
          "type": "integer",
          "example": 25
        },
        "accuracy_change": {
          "description": "The change in accuracy over the reporting period",
          "type": "integer",
          "example": 21
        },
        "confidence_level_change": {
          "description": "The change in confidence level over the reporting period",
          "type": "integer",
          "example": 28
        },
        "minutes_spent": {
          "description": "The minutes spent by the team on challenges",
          "type": "integer",
          "example": 52
        },
        "challenges_correct": {
          "description": "The number of correct challenges",
          "type": "integer",
          "example": 32
        },
        "challenges_incorrect": {
          "description": "The number of incorrect challenges",
          "type": "integer",
          "example": 0
        }
      }
    },
    "Developer": {
      "description": "Information about an individual developer",
      "type": "object",
      "title": "Developer",
      "required": [
        "name",
        "email"
      ],
      "properties": {
        "name": {
          "description": "The name of the developer (first + middle + surname)",
          "type": "string",
          "example": "Code Warrior"
        },
        "email": {
          "description": "The developers email address",
          "type": "string",
          "example": "user@securecodewarrior.com"
        },
        "member_since": {
          "description": "The date the developer became a member",
          "type": "string",
          "format": "date-time",
          "example": "2018-01-01T04:57:47.715Z"
        },
        "last_logged_in": {
          "description": "The date the developer last logged in",
          "type": "string",
          "format": "date-time",
          "example": "2018-01-01T04:57:47.715Z"
        },
        "status": {
          "description": "The current status of the developer account",
          "type": "string",
          "example": "enabled"
        },
        "company": {
          "description": "The company name that the developer is a part of",
          "type": "string",
          "example": "Secure Code Warrior"
        },
        "team": {
          "description": "The team name that the developer is a part of",
          "type": "string",
          "example": "Team Awesome"
        },
        "tags": {
          "description": "The tags associated with this developer",
          "type": "array",
          "items": {
            "type": "string",
            "example": "Syd branch"
          }
        },
        "roles": {
          "description": "The roles that this developer has",
          "type": "string",
          "enum": [
            "user",
            "developer",
            "team manager",
            "company admin"
          ],
          "items": {
            "type": "string",
            "example": "developer"
          }
        }
      }
    },
    "DeveloperLeaderboardEntry": {
      "description": "This object represents an entry in the developer leaderboard",
      "required": [
        "rank",
        "developer",
        "overall_stats_over_report_period"
      ],
      "type": "object",
      "title": "Developer Leaderboard Entry",
      "properties": {
        "rank": {
          "description": "The developer's rank on the leaderboard",
          "type": "integer",
          "example": 1
        },
        "developer": {
          "$ref": "#/definitions/Developer"
        },
        "overall_stats_over_report_period": {
          "description": "The statistics computed overall for the given report period",
          "allOf": [
            {
              "$ref": "#/definitions/StatsOverReportPeriod"
            },
            {
              "type": "object",
              "properties": {
                "installed_sensei": {
                  "description": "Whether the developer installed Sensei",
                  "type": "boolean",
                  "example": true
                },
                "used_sensei": {
                  "description": "Whether the developer used Sensei",
                  "type": "boolean",
                  "example": true
                }
              }
            }
          ]
        },
        "challenges": {
          "description": "The challenges that have been attempted",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "language": {
                "description": "The language/framework the the challenge relates to",
                "type": "string",
                "example": "Java Spring"
              },
              "challenges_completed": {
                "description": "The number of challenges completed",
                "type": "integer",
                "example": 32
              },
              "total_challenges": {
                "description": "The total number of challenges available",
                "type": "integer",
                "example": 32
              },
              "progress": {
                "description": "The % progress made through the challenge",
                "type": "integer",
                "example": 100
              },
              "security_maturity": {
                "description": "The security maturity level of the developer",
                "type": "string",
                "example": "Security Champion",
                "enum": [
                  "Beginner",
                  "Security Aware",
                  "Security Skilled",
                  "Security Champion"
                ]
              },
              "points": {
                "description": "The points gained on this challenge",
                "type": "integer",
                "example": 120
              },
              "accuracy": {
                "description": "How accurate the developer was in answering (in %)",
                "type": "integer",
                "example": 100
              },
              "confidence_level": {
                "description": "How confident the developer was in answering (in %)",
                "type": "integer",
                "example": 100
              },
              "minutes_spent": {
                "description": "How long the developer spent answering (in minutes)",
                "type": "integer",
                "example": 52
              },
              "stats_over_report_period": {
                "$ref": "#/definitions/StatsOverReportPeriod"
              }
            }
          }
        },
        "challenges_summary": {
          "description": "Summary data for the challenges",
          "type": "object",
          "properties": {
            "challenges_completed": {
              "description": "The number of challenges completed",
              "type": "integer",
              "example": 32
            },
            "total_challenges": {
              "description": "The total number of challenges available",
              "type": "integer",
              "example": 32
            },
            "progress": {
              "description": "The amount of progress the developer has made (in %)",
              "type": "integer",
              "example": 100
            },
            "security_maturity": {
              "description": "The security maturity level of the developer",
              "type": "string",
              "example": "Security Champion",
              "enum": [
                "Beginner",
                "Security Aware",
                "Security Skilled",
                "Security Champion"
              ]
            },
            "points": {
              "description": "The total points gained in the challenges",
              "type": "integer",
              "example": 6200
            },
            "accuracy": {
              "description": "How accurate the developer was overall in answering the challenges (in %)",
              "type": "integer",
              "example": 100
            },
            "confidence_level": {
              "description": "How confident the developer was in answering the challenges (in %)",
              "type": "integer",
              "example": 100
            },
            "minutes_spent": {
              "description": "How long the developer spent answering (in minutes)",
              "type": "integer",
              "example": 72
            }
          }
        }
      }
    },
    "DeveloperLeaderboardSearch": {
      "description": "Developer leaderboard search filters",
      "type": "object",
      "properties": {
        "report_period_in_days": {
          "description": "The number of days into the past to report on (valid values - 1, 7 and 30 days)",
          "type": "integer",
          "example": 1
        },
        "startdate": {
          "description": "developer leaderboard completed on or after the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
          "type": "string",
          "example": "2017-01-01T00:00:00.000Z"
        },
        "enddate": {
          "description": "developer leaderboard completed on or before the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
          "type": "string",
          "example": "2019-01-01T00:00:00.000Z"
        },
        "users": {
          "description": "Users to include in leaderboard (one or more user emails, separated by comma)",
          "type": "string",
          "example": "dev1@securecodewarrior.com, dev2@securecodewarrior.com"
        },
        "team_names": {
          "description": "Team names (one or more team names, separated by comma)",
          "type": "string",
          "example": "Company 1 Team 1, Company 1 Team 2"
        },
        "tags": {
          "description": "User tags (one or more user tags, separated by comma)",
          "type": "string",
          "example": "tag-11, tag-12"
        },
        "page": {
          "description": "The page number of results",
          "type": "integer",
          "example": 1
        }
      }
    },
    "DeveloperLeaderboard": {
      "description": "The developer leaderboard contains all the developer leaderboard entries valid during the given reporting period",
      "required": [
        "report_period_in_days",
        "leaderboard"
      ],
      "type": "object",
      "title": "Developer Leaderboard",
      "properties": {
        "report_period_in_days": {
          "description": "The number of days into the past to report on",
          "type": "integer",
          "example": 7,
          "enum": [
            1,
            7,
            30
          ]
        },
        "leaderboard": {
          "description": "The leaderboard entries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperLeaderboardEntry"
          }
        },
        "links": {
          "description": "Related API pages and pagination details",
          "type": "object",
          "title": "Links",
          "properties": {
            "total_pages": {
              "type": "integer",
              "description": "The total number of pages in the results",
              "example": 10
            },
            "results_per_page": {
              "type": "integer",
              "description": "The maximum number of results in each page",
              "example": 100
            },
            "next_page": {
              "type": "integer",
              "description": "The page number of the next page (if one exists)",
              "example": 3
            },
            "prev_page": {
              "type": "integer",
              "description": "The page number of the previous page (if one exists)",
              "example": 1
            },
            "total_results": {
              "type": "integer",
              "description": "The total number of the results",
              "example": 513
            }
          }
        }
      }
    },
    "DeveloperProgressSearch": {
      "description": "Developer progress search filters",
      "type": "object",
      "properties": {
        "report_period_in_days": {
          "description": "The number of days into the past to report on (valid values - 1, 7 and 30 days)",
          "type": "integer",
          "example": 1
        },
        "startdate": {
          "description": "developer progress completed on or after the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
          "type": "string",
          "example": "2017-01-01T00:00:00.000Z"
        },
        "enddate": {
          "description": "developer progress completed on or before the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
          "type": "string",
          "example": "2019-01-01T00:00:00.000Z"
        },
        "users": {
          "description": "Users to include in developer progress (one or more user emails, separated by comma)",
          "type": "string",
          "example": "dev1@securecodewarrior.com, dev2@securecodewarrior.com"
        },
        "team_names": {
          "description": "Team names (one or more team names, separated by comma)",
          "type": "string",
          "example": "Company 1 Team 1, Company 1 Team 2"
        },
        "tags": {
          "description": "User tags (one or more user tags, separated by comma)",
          "type": "string",
          "example": "tag-11, tag-12"
        },
        "page": {
          "description": "The page number of results",
          "type": "integer",
          "example": 1
        }
      }
    },
    "DevelopersProgress": {
      "description": "This contains the progress of each developer on each of languages, realms, levels, and quests",
      "required": [
        "developers"
      ],
      "type": "object",
      "title": "Developer Progress",
      "properties": {
        "developers": {
          "description": "List of developers who have made an attempt at training",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperProgressEntry"
          }
        },
        "links": {
          "description": "Related API pages and pagination details",
          "type": "object",
          "title": "Links",
          "properties": {
            "total_pages": {
              "type": "integer",
              "description": "The total number of pages in the results",
              "example": 10
            },
            "results_per_page": {
              "type": "integer",
              "description": "The maximum number of results in each page",
              "example": 100
            },
            "next_page": {
              "type": "integer",
              "description": "The page number of the next page (if one exists)",
              "example": 3
            },
            "prev_page": {
              "type": "integer",
              "description": "The page number of the previous page (if one exists)",
              "example": 1
            },
            "total_results": {
              "type": "integer",
              "description": "The total number of the results",
              "example": 513
            }
          }
        }
      }
    },
    "DeveloperProgressEntry": {
      "description": "This entry represents an object in the developers training progress containing information the developer and the progress of their attempts in training mode",
      "required": [
        "developer",
        "languages"
      ],
      "type": "object",
      "title": "Developer Progress Entry",
      "properties": {
        "developer": {
          "$ref": "#/definitions/Developer"
        },
        "languages": {
          "description": "List of languages attempted by the developer on training mode",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrainingProgressEntry"
          }
        }
      }
    },
    "TrainingProgressEntry": {
      "description": "Entry with progress of completion on languages and list of realms",
      "required": [
        "name",
        "language_progress",
        "realms"
      ],
      "type": "object",
      "title": "Training Progress Entry",
      "properties": {
        "name": {
          "description": "Name of language framework",
          "type": "string",
          "example": "Java Spring"
        },
        "language_progress": {
          "description": "Percentage of the language completed",
          "type": "integer",
          "example": 100
        },
        "realms": {
          "description": "List of realms for each language",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "Name of realm",
                "type": "string",
                "example": "Defend Your Code"
              },
              "realm_progress": {
                "description": "Percentage of the realm completed",
                "type": "integer",
                "example": 100
              },
              "levels": {
                "description": "List of levels for each realm",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of level",
                      "type": "string",
                      "example": "Most Critical Weaknesses"
                    },
                    "level_progress": {
                      "description": "Percentage of the level completed",
                      "type": "integer",
                      "example": 100
                    },
                    "quests": {
                      "description": "List of quests for each level",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Name of quest",
                            "type": "string",
                            "example": "SQL Injection"
                          },
                          "quest_progress": {
                            "description": "percentage of quest completed",
                            "type": "integer",
                            "example": 100
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "DevelopersActivitySearch": {
      "description": "Developer activity search filters",
      "type": "object",
      "properties": {
        "report_period_in_days": {
          "description": "The number of days into the past to report on (valid values - 1, 7 and 30 days)",
          "type": "integer",
          "example": 1
        },
        "startdate": {
          "description": "developer challenge logs completed on or after the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
          "type": "string",
          "example": "2017-01-01T00:00:00.000Z"
        },
        "enddate": {
          "description": "developer challenge logs completed on or before the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
          "type": "string",
          "example": "2019-01-01T00:00:00.000Z"
        },
        "users": {
          "description": "Users to include in challenge logs (one or more user emails, separated by comma)",
          "type": "string",
          "example": "dev1@securecodewarrior.com, dev2@securecodewarrior.com"
        },
        "team_names": {
          "description": "Team names (one or more team names, separated by comma)",
          "type": "string",
          "example": "Company 1 Team 1, Company 1 Team 2"
        },
        "tags": {
          "description": "User tags (one or more user tags, separated by comma)",
          "type": "string",
          "example": "tag-11, tag-12"
        },
        "page": {
          "description": "The page number of results",
          "type": "integer",
          "example": 1
        }
      }
    },
    "DevelopersActivity": {
      "description": "Detailed log of challenges for a given time period",
      "required": [
        "activities"
      ],
      "type": "object",
      "title": "Developer Activity",
      "properties": {
        "activities": {
          "description": "List of developers containing with list of languages containing challenge attempts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityEntry"
          }
        },
        "links": {
          "description": "Related API pages and pagination details",
          "type": "object",
          "title": "Links",
          "properties": {
            "total_pages": {
              "type": "integer",
              "description": "The total number of pages in the results",
              "example": 10
            },
            "results_per_page": {
              "type": "integer",
              "description": "The maximum number of results in each page",
              "example": 100
            },
            "next_page": {
              "type": "integer",
              "description": "The page number of the next page (if one exists)",
              "example": 3
            },
            "prev_page": {
              "type": "integer",
              "description": "The page number of the previous page (if one exists)",
              "example": 1
            },
            "total_results": {
              "type": "integer",
              "description": "The total number of the results",
              "example": 513
            }
          }
        }
      }
    },
    "ActivityEntry": {
      "description": "This object represents the developer and their challenge attempts",
      "required": [
        "developer",
        "challenge"
      ],
      "type": "object",
      "title": "Activity Entry",
      "properties": {
        "developer": {
          "$ref": "#/definitions/Developer"
        },
        "challenge": {
          "$ref": "#/definitions/ChallengeAttempt"
        }
      }
    },
    "ChallengeAttempt": {
      "description": "Attempt made by deverloper in training mode",
      "required": [
        "language",
        "realm",
        "level",
        "quest",
        "category",
        "subcategory",
        "difficulty"
      ],
      "type": "object",
      "title": "Challenge Attempt",
      "properties": {
        "language": {
          "description": "Name of language framework",
          "type": "string",
          "example": "Java Spring"
        },
        "realm": {
          "description": "Name of realm",
          "type": "string",
          "example": "Defend Your Code"
        },
        "level": {
          "description": "Name of level",
          "type": "string",
          "example": "Most Critical Weaknesses"
        },
        "quest": {
          "description": "Name of quest",
          "type": "string",
          "example": "SQL Injection"
        },
        "category": {
          "description": "Category name of the challenge",
          "type": "string",
          "example": "Injection Flaws"
        },
        "subcategory": {
          "description": "Subcategory name of the challenge",
          "type": "string",
          "example": "SQL Injection"
        },
        "difficulty": {
          "description": "Level of difficulty for the challenge",
          "type": "string",
          "example": "Hard",
          "enum": [
            "Easy",
            "Medium",
            "Hard"
          ]
        },
        "started": {
          "description": "Time challenge was started",
          "type": "string",
          "format": "date-time",
          "example": "2018-01-17T04:57:47.715Z"
        },
        "completed": {
          "description": "Time challenges was completed",
          "type": "string",
          "format": "date-time",
          "example": "2018-01-18T04:57:47.715Z"
        },
        "duration": {
          "description": "Time in seconds it took for the challenge to complete",
          "type": "integer",
          "example": 120
        },
        "status": {
          "description": "Status of challenge, with incorrect status on challenge with 1 or more incorrect stages",
          "type": "string",
          "example": "correct",
          "enum": [
            "correct",
            "incorrect"
          ]
        },
        "hints_used": {
          "description": "Total number of hints from the challenge stages used by the developer",
          "type": "integer",
          "example": 0
        },
        "score": {
          "description": "Points acquired",
          "type": "integer",
          "example": 300
        },
        "max_score": {
          "description": "Max points attainable for the challenge",
          "type": "string",
          "example": 300
        },
        "select_vulnerability": {
          "$ref": "#/definitions/SelectVulnerability"
        },
        "locate_vulnerability": {
          "$ref": "#/definitions/LocateVulnerability"
        },
        "identify_solution": {
          "$ref": "#/definitions/IdentifySolution"
        }
      }
    },
    "SelectVulnerability": {
      "description": "Nature of challenge challenge",
      "type": "object",
      "title": "Select Vulnerability",
      "properties": {
        "attempt_index": {
          "description": "Number of times the developer has attempted the stage",
          "type": "integer",
          "example": 1
        },
        "status": {
          "description": "Outcome of the challenge, out_of_reach status describes a stage not yet attempted by the developer",
          "type": "string",
          "example": "correct",
          "enum": [
            "correct",
            "incorrect",
            "out_of_reach"
          ]
        },
        "max_score": {
          "description": "Max points attainable for selecting the vulnerability",
          "type": "integer",
          "example": 100
        },
        "score": {
          "description": "Points acquired for selecting the vulnerability",
          "type": "integer",
          "example": 100
        },
        "skipped": {
          "description": "When set to true, stage has been skipped. If status is false, stage was completed or has yet to be attempted",
          "type": "boolean",
          "example": false
        }
      }
    },
    "LocateVulnerability": {
      "description": "Nature of challenge challenge",
      "type": "object",
      "title": "Locate Vulnerability",
      "properties": {
        "attempt_index": {
          "description": "Number of times the developer has attempted the stage",
          "type": "integer",
          "example": 1
        },
        "status": {
          "description": "Outcome of the challenge",
          "type": "string",
          "example": "correct",
          "enum": [
            "correct",
            "incorrect",
            "out_of_reach"
          ]
        },
        "max_score": {
          "description": "Max points attainable for locating the vulnerability",
          "type": "integer",
          "example": 100
        },
        "score": {
          "description": "Points acquired for locating the vulnerability",
          "type": "integer",
          "example": 100
        }
      }
    },
    "IdentifySolution": {
      "description": "Nature of challenge challenge",
      "type": "object",
      "title": "Identify Solution",
      "properties": {
        "attempt_index": {
          "description": "Number of times the developer has attempted the stage",
          "type": "integer",
          "example": 1
        },
        "status": {
          "description": "Outcome of the challenge",
          "type": "string",
          "example": "correct",
          "enum": [
            "correct",
            "incorrect",
            "out_of_reach"
          ]
        },
        "max_score": {
          "description": "Max points attainable for identifying the solution",
          "type": "integer",
          "example": 100
        },
        "score": {
          "description": "Points acquired for identifying the solution",
          "type": "integer",
          "example": 100
        }
      }
    },
    "ResourceItem": {
      "description": "Resource item details",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "application_security_concepts"
        },
        "name": {
          "type": "string",
          "example": "Application Security Concepts"
        }
      }
    },
    "Resource": {
      "description": "Resource details",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "security_fundamentals"
        },
        "name": {
          "type": "string",
          "example": "Security Fundamentals"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceItem"
          }
        }
      }
    },
    "CompletedResource": {
      "description": "Details of a completed learning resource",
      "type": "object",
      "title": "Completed Resource",
      "properties": {
        "resource": {
          "type": "array",
          "description": "An ordered list of the categorisation and name of the completed resource",
          "items": {
            "type": "string"
          },
          "example": [
            "Application Security Weaknesses",
            "Web",
            "Data Handling",
            "Injection Flaws",
            "SQL Injection"
          ]
        },
        "time_completed": {
          "description": "When the learning resource was completed",
          "type": "string",
          "format": "date-time",
          "example": "2018-01-01T04:57:47.715Z"
        }
      }
    },
    "ResourceRecord": {
      "description": "A record of a developer's completed learning resources",
      "type": "object",
      "title": "Resource Record",
      "properties": {
        "profile": {
          "$ref": "#/definitions/Developer"
        },
        "completed": {
          "description": "All learning resources completed by the user",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompletedResource"
          }
        }
      }
    },
    "CourseURL": {
      "description": "URL to training courses",
      "type": "object",
      "title": "Course URL",
      "properties": {
        "url": {
          "description": "URL to course",
          "type": "string",
          "example": "<%= EXTERNAL_HOST %>/game/013/play/java/spring/realm/training_ground/level/common_weaknesses"
        }
      }
    },
    "UserCreate": {
      "type": "object",
      "title": "User Create",
      "properties": {
        "enabled": {
          "description": "Users status on the platform",
          "type": "boolean",
          "example": true
        },
        "email": {
          "description": "The email of the user",
          "type": "string",
          "example": "user@securecodewarrior.com"
        },
        "isProfileComplete": {
          "description": "Converts properties necessary for profile completion as required. If set to true properties 'name.first' and 'name.last' as required, Else the name is optional",
          "type": "boolean",
          "example": false,
          "default": false
        },
        "name": {
          "description": "Holds the properties for users first, middle and last name",
          "type": "object",
          "properties": {
            "first": {
              "description": "User first name. Required if 'isProfileComplete' is set to true",
              "type": "string",
              "example": "Secure"
            },
            "middle": {
              "description": "User middle name",
              "type": "string",
              "example": "Code"
            },
            "last": {
              "description": "User last name. Required if 'isProfileComplete' is set to true",
              "type": "string",
              "example": "Warrior"
            }
          }
        },
        "role": {
          "description": "The role assigned to the user which is one of developer, team manager or company administrator",
          "enum": [
            "developer",
            "team manager",
            "company admin"
          ],
          "type": "string",
          "example": "developer"
        },
        "team": {
          "description": "The team the user is associated with",
          "type": "string",
          "example": "Team Awesome"
        },
        "tags": {
          "description": "Any identifying information about the user. Example: Head Quarters, Asia-Pacific",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Syd branch"
          ]
        },
        "preferredDevLanguages": {
          "description": "Dev languages preference",
          "type": "array",
          "items": {
            "$ref": "#/definitions/preferredDevLanguage"
          }
        }
      },
      "required": [
        "email",
        "role"
      ]
    },
    "UserSearchParamBody": {
      "type": "object",
      "title": "User search body",
      "properties": {
        "id": {
          "description": "User resource ID",
          "type": "string",
          "example": "c0f1d2b3-ae71-440a-82fc-95d5fec4d91e"
        },
        "email": {
          "description": "The email of the user",
          "type": "string",
          "example": "user@securecodewarrior.com"
        },
        "role": {
          "description": "The role assigned to the user which is one of developer, team manager or company administrator",
          "enum": [
            "developer",
            "team manager",
            "company admin"
          ],
          "type": "string",
          "example": "developer"
        },
        "team": {
          "description": "The team the user is associated with",
          "type": "string",
          "example": "Team Awesome"
        },
        "tags": {
          "description": "Any identifying information about the user. Example: Head Quarters, Asia-Pacific",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Syd branch"
          ]
        }
      }
    },
    "TeamData": {
      "type": "object",
      "title": "Team Data",
      "properties": {
        "name": {
          "description": "Team name",
          "type": "string",
          "example": "Team Awesome"
        }
      },
      "required": [
        "name"
      ]
    },
    "UserData": {
      "type": "object",
      "title": "User Data",
      "properties": {
        "id": {
          "description": "The resource Id of the user",
          "type": "string",
          "example": "c0f1d2b3-ae71-440a-82fc-95d5fec4d91e"
        },
        "email": {
          "description": "The email of the user",
          "type": "string",
          "example": "user@securecodewarrior.com"
        },
        "role": {
          "description": "The role assigned to the user which is one of developer, team manager or company administrator",
          "enum": [
            "developer",
            "team manager",
            "company admin"
          ],
          "type": "string",
          "example": "developer"
        },
        "name": {
          "type": "object",
          "properties": {
            "first": {
              "description": "First name",
              "example": "Secure"
            },
            "middle": {
              "description": "Middle name",
              "example": "Code"
            },
            "last": {
              "description": "Last name",
              "example": "Warrior"
            }
          }
        },
        "status": {
          "type": "string",
          "description": "User status",
          "enum": [
            "enabled",
            "disabled",
            "invited",
            "registered"
          ],
          "example": "enabled"
        },
        "invite-date": {
          "type": "string",
          "format": "date-time",
          "description": "Time of when the user was last invited",
          "example": "2020-01-01T00:00:00.000Z"
        },
        "last-login-date": {
          "type": "string",
          "format": "date-time",
          "description": "Last time the user logged in",
          "example": "2020-01-01T00:00:00.000Z"
        },
        "team": {
          "$ref": "#/definitions/TeamData"
        },
        "tags": {
          "description": "Any identifying information about the user. Example: Head Quarters, Asia-Pacific",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Syd branch"
          ]
        },
        "preferredDevLanguages": {
          "description": "Dev languages preference",
          "type": "array",
          "items": {
            "$ref": "#/definitions/preferredDevLanguage"
          }
        }
      },
      "required": [
        "email",
        "role"
      ]
    },
    "UserUpdate": {
      "type": "object",
      "title": "User Update",
      "properties": {
        "email": {
          "description": "The email address of the user",
          "type": "string",
          "format": "email",
          "example": "newemail@example.com"
        },
        "enabled": {
          "description": "Users status on the platform",
          "type": "boolean",
          "example": false
        },
        "role": {
          "description": "The role assigned to the user which is one of developer, team manager or company administrator",
          "enum": [
            "developer",
            "team manager",
            "company admin"
          ],
          "type": "string",
          "example": "developer"
        },
        "team": {
          "description": "The team the user is associated with",
          "type": "string",
          "example": "Team Awesome"
        },
        "tags": {
          "description": "Any identifying information about the user. Example: Head Quarters, Asia-Pacific",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Syd branch"
          ]
        },
        "preferredDevLanguages": {
          "description": "Dev languages preference",
          "type": "array",
          "items": {
            "$ref": "#/definitions/preferredDevLanguage"
          }
        }
      }
    },
    "UserUpdated": {
      "type": "object",
      "title": "User Updated",
      "properties": {
        "statusCode": {
          "description": "Success response message status code",
          "type": "integer",
          "example": 200
        },
        "message": {
          "description": "Success response message description",
          "type": "string",
          "example": "User Updated"
        },
        "code": {
          "description": "Secure Code Warrior Code",
          "type": "string",
          "example": "103"
        }
      }
    },
    "UserCreated": {
      "type": "object",
      "title": "User Created",
      "properties": {
        "id": {
          "description": "Secure Code Warrior resource identifier",
          "example": "c0f1d2b3-ae71-440a-82fc-95d5fec4d91e",
          "type": "string"
        },
        "statusCode": {
          "description": "Success response message status code",
          "type": "integer",
          "example": 201
        },
        "message": {
          "description": "Success response message description",
          "type": "string",
          "example": "User Created"
        },
        "code": {
          "description": "Secure Code Warrior Code",
          "type": "string",
          "example": "100"
        }
      }
    },
    "UserDeleted": {
      "type": "object",
      "title": "User Deleted",
      "properties": {
        "statusCode": {
          "description": "Success response message status code",
          "type": "integer",
          "example": 200
        },
        "message": {
          "description": "Success response message description",
          "type": "string",
          "example": "User Deleted"
        },
        "code": {
          "description": "Secure Code Warrior Code",
          "type": "string",
          "example": "102"
        }
      }
    },
    "UsersList": {
      "title": "User List",
      "type": "object",
      "description": "List of UserData",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserData"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "title": "Error",
      "properties": {
        "statusCode": {
          "description": "Error response message status code",
          "type": "integer",
          "example": 422
        },
        "error": {
          "description": "Error message category",
          "type": "string",
          "example": "Unprocessable Entity"
        },
        "message": {
          "description": "Error message",
          "type": "string",
          "example": "Team license limit reached. Contact your company admin for an upgrade"
        },
        "code": {
          "description": "Secure Code Warrior request identifier",
          "type": "string",
          "example": "902"
        }
      }
    },
    "LearningProgressSearch": {
      "description": "Learning progress search filters",
      "type": "object",
      "properties": {
        "users": {
          "description": "Users to include in learning progress (one or more user emails, separated by comma)",
          "type": "string",
          "example": "dev1@securecodewarrior.com, dev2@securecodewarrior.com"
        },
        "team_names": {
          "description": "Team names (one or more team names, separated by comma)",
          "type": "string",
          "example": "Company 1 Team 1, Company 1 Team 2"
        },
        "tags": {
          "description": "User tags (one or more user tags, separated by comma)",
          "type": "string",
          "example": "tag-11, tag-12"
        },
        "page": {
          "description": "The page number of results",
          "type": "integer",
          "example": 1
        }
      }
    },
    "TopPerformers": {
      "description": "List of top performers",
      "type": "object",
      "properties": {
        "report_period_in_days": {
          "description": "The number of days in the past to report on",
          "type": "integer",
          "example": 7
        },
        "top_performers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopPerformer"
          }
        },
        "links": {
          "description": "Related API pages and pagination details",
          "type": "object",
          "title": "Links",
          "properties": {
            "total_pages": {
              "type": "integer",
              "description": "The total number of pages in the results",
              "example": 10
            },
            "results_per_page": {
              "type": "integer",
              "description": "The maximum number of results in each page",
              "example": 100
            },
            "next_page": {
              "type": "integer",
              "description": "The page number of the next page (if one exists)",
              "example": 3
            },
            "prev_page": {
              "type": "integer",
              "description": "The page number of the previous page (if one exists)",
              "example": 1
            },
            "total_results": {
              "type": "integer",
              "description": "The total number of the results",
              "example": 513
            }
          }
        }
      }
    },
    "TopPerformer": {
      "description": "Top performing user",
      "type": "object",
      "properties": {
        "points": {
          "description": "Total points earned within a period of time",
          "type": "integer",
          "example": 90000
        },
        "id": {
          "description": "User Id in UUID format",
          "type": "string",
          "example": "c0f1d2b3-ae71-440a-82fc-95d5fec4d91e"
        },
        "email": {
          "description": "User email",
          "type": "string",
          "example": "user@securecodewarrior.com"
        },
        "name": {
          "description": "Users name",
          "type": "object",
          "properties": {
            "first": {
              "description": "User first name",
              "type": "string",
              "example": "Secure"
            },
            "middle": {
              "description": "User middle name",
              "type": "string",
              "example": "Code"
            },
            "last": {
              "description": "User last name",
              "type": "string",
              "example": "Warrior"
            }
          }
        },
        "tags": {
          "description": "User tags",
          "type": "array",
          "items": {
            "type": "string",
            "example": "Syd branch"
          }
        },
        "status": {
          "type": "string",
          "description": "User status",
          "enum": [
            "enabled",
            "disabled",
            "invited",
            "registered"
          ],
          "example": "enabled"
        },
        "team": {
          "$ref": "#/definitions/TeamData"
        }
      }
    },
    "UsersTimeSpent": {
      "description": "Entry showing users activity.",
      "type": "object",
      "properties": {
        "id": {
          "description": "User Id in UUID format",
          "type": "string",
          "example": "c0f1d2b3-ae71-440a-82fc-95d5fec4d91e"
        },
        "email": {
          "description": "User email",
          "type": "string",
          "example": "user@securecodewarrior.com"
        },
        "name": {
          "description": "Users name",
          "type": "object",
          "properties": {
            "first": {
              "description": "User first name",
              "type": "string",
              "example": "Secure"
            },
            "middle": {
              "description": "User middle name",
              "type": "string",
              "example": "Code"
            },
            "last": {
              "description": "User last name",
              "type": "string",
              "example": "Warrior"
            }
          }
        },
        "tags": {
          "description": "User tags",
          "type": "array",
          "items": {
            "type": "string",
            "example": "Syd branch"
          }
        },
        "status": {
          "type": "string",
          "description": "User status",
          "enum": [
            "enabled",
            "disabled",
            "invited",
            "registered"
          ],
          "example": "enabled"
        },
        "team": {
          "$ref": "#/definitions/TeamData"
        },
        "time-spent": {
          "description": "Array of dates with the breakdown of time-spent/activity in a day",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "description": "Date in UTC",
                "type": "string",
                "format": "date",
                "example": "2020-01-01"
              },
              "activity": {
                "type": "object",
                "description": "Breakdown of time-spent per activity",
                "properties": {
                  "Assessments": {
                    "description": "Time-spent on Assessments",
                    "type": "integer",
                    "example": 30
                  },
                  "Learning": {
                    "description": "Time-spent on Learning",
                    "type": "integer",
                    "example": 60
                  },
                  "Tournaments": {
                    "description": "Time-spent on Tournaments",
                    "type": "integer",
                    "example": 129
                  },
                  "Training": {
                    "description": "Time-spent on Training",
                    "type": "integer",
                    "example": 300
                  }
                }
              }
            }
          }
        }
      }
    },
    "StrengthsAndWeaknesses": {
      "description": "Average strengths and weaknesses object",
      "required": [
        "auth",
        "data_handling",
        "misconfig",
        "practices",
        "sensitive_data",
        "other"
      ],
      "type": "object",
      "properties": {
        "auth": {
          "$ref": "#/definitions/AverageStrengthsAndWeaknessesEntry"
        },
        "data_handling": {
          "$ref": "#/definitions/AverageStrengthsAndWeaknessesEntry"
        },
        "misconfig": {
          "$ref": "#/definitions/AverageStrengthsAndWeaknessesEntry"
        },
        "practices": {
          "$ref": "#/definitions/AverageStrengthsAndWeaknessesEntry"
        },
        "sensitive_data": {
          "$ref": "#/definitions/AverageStrengthsAndWeaknessesEntry"
        },
        "other": {
          "$ref": "#/definitions/AverageStrengthsAndWeaknessesEntry"
        }
      }
    },
    "AverageStrengthsAndWeaknessesEntry": {
      "description": "This object represents each individual management category",
      "required": [
        "challenges",
        "hints",
        "points",
        "timeSpent"
      ],
      "type": "object",
      "properties": {
        "challenges": {
          "$ref": "#/definitions/ChallengesEntry"
        },
        "hints": {
          "$ref": "#/definitions/HintsEntry"
        },
        "points": {
          "description": "Points",
          "type": "integer",
          "example": 65686
        },
        "timeSpent": {
          "description": "Time spent",
          "type": "integer",
          "example": 99442723
        }
      }
    },
    "ChallengesEntry": {
      "description": "Challenges Data",
      "required": [
        "attempted",
        "correct",
        "incorrect",
        "percentageCorrect",
        "ratioCorrect"
      ],
      "type": "object",
      "properties": {
        "attempted": {
          "description": "Attempted challenges",
          "type": "integer",
          "example": 727
        },
        "correct": {
          "description": "Correct of attempted",
          "type": "integer",
          "example": 276
        },
        "incorrect": {
          "description": "Incorrect of attempted",
          "type": "integer",
          "example": 451
        },
        "percentageCorrect": {
          "description": "Percentage correct",
          "type": "integer",
          "example": 38
        },
        "ratioCorrect": {
          "description": "Ratio correct",
          "type": "number",
          "example": 0.3796423658872077
        }
      }
    },
    "HintsEntry": {
      "description": "Hints Data",
      "required": [
        "confidenceLevel",
        "total",
        "used"
      ],
      "type": "object",
      "properties": {
        "confidenceLevel": {
          "description": "Confidence Level",
          "type": "integer",
          "example": 94
        },
        "total": {
          "description": "Total",
          "type": "integer",
          "example": 4030
        },
        "used": {
          "description": "Used",
          "type": "integer",
          "example": 260
        }
      }
    },
    "TeamDetails": {
      "description": "Team Details",
      "required": [
        "id",
        "name",
        "onboardingMessage",
        "status",
        "memberJoinToken",
        "companyName",
        "languages"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Team Id",
          "type": "string",
          "example": "123fdab9ea7834e11e84a5bb"
        },
        "name": {
          "description": "Name of the team",
          "type": "string",
          "example": "Demo Team"
        },
        "tags": {
          "description": "Any identifying information about the team. Example: Head Quarters, Asia-Pacific, Engineering",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Engineering team"
          ]
        },
        "onboardingMessage": {
          "description": "On boarding message for the team",
          "type": "string",
          "example": "Sample on boarding message"
        },
        "status": {
          "description": "Team status",
          "type": "string",
          "example": "enabled"
        },
        "memberJoinToken": {
          "description": "Member Join Token",
          "type": "string",
          "example": "544219613"
        },
        "companyName": {
          "description": "Name of the company",
          "type": "string",
          "example": "Demo Company"
        },
        "languages": {
          "description": "Team languages",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Java Spring",
            "Java Enterprise Edition (JSP)",
            "JavaScript Node.js (Express)"
          ]
        }
      }
    },
    "TeamDeleteResponse": {
      "description": "Team Delete Response",
      "required": [
        "deleteStatus"
      ],
      "type": "object",
      "properties": {
        "deleteStatus": {
          "description": "Status of delete operation",
          "type": "string",
          "example": "success"
        }
      }
    },
    "LicensingEntry": {
      "description": "Licensing Entry",
      "type": "object",
      "properties": {
        "type": {
          "description": "License type",
          "type": "string",
          "enum": [
            "usage",
            "unlimited",
            "disabled"
          ],
          "example": "usage"
        },
        "granted": {
          "description": "Licenses granted (valid only if license type set to usage)",
          "type": "integer",
          "example": 50
        }
      }
    },
    "TeamLicensing": {
      "description": "Team licensing properties",
      "type": "object",
      "properties": {
        "training": {
          "$ref": "#/definitions/LicensingEntry"
        },
        "assessments": {
          "$ref": "#/definitions/LicensingEntry"
        },
        "tournaments": {
          "$ref": "#/definitions/LicensingEntry"
        }
      }
    },
    "TeamCreate": {
      "description": "Team create properties",
      "type": "object",
      "properties": {
        "name": {
          "description": "Team Name",
          "type": "string",
          "example": "New Sample Team"
        },
        "tags": {
          "description": "Any identifying information about the team. Example: Head Quarters, Asia-Pacific, Engineering",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Engineering team"
          ]
        },
        "activeFrom": {
          "description": "Team Active From. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
          "type": "string",
          "example": "2017-01-01T00:00:00.000Z"
        },
        "activeUntil": {
          "description": "Team Active Until. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
          "type": "string",
          "example": "2019-01-01T00:00:00.000Z"
        },
        "languages": {
          "description": "Team languages list, _id and _framework separated by double colons (::) and separated by commas (,)",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "java::spring",
            "java::ee",
            "nodejs::express"
          ]
        },
        "onboardingmessage": {
          "description": "Team On Boarding Message",
          "type": "string",
          "example": "Sample on boarding message"
        },
        "licensing": {
          "$ref": "#/definitions/TeamLicensing"
        }
      }
    },
    "TeamUpdate": {
      "description": "Team update properties",
      "type": "object",
      "properties": {
        "name": {
          "description": "Team Name",
          "type": "string",
          "example": "New Updated Team"
        },
        "tags": {
          "description": "Any identifying information about the team. Example: Head Quarters, Asia-Pacific, Engineering",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Engineering team"
          ]
        },
        "status": {
          "description": "Team Status",
          "type": "string",
          "example": "enabled"
        },
        "onboardingmessage": {
          "description": "Team On Boarding Message",
          "type": "string",
          "example": "Sample on boarding message"
        },
        "languages": {
          "description": "Team languages list, _id and _framework separated by double colons (::) and separated by commas (,)",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "java::spring",
            "java::ee",
            "nodejs::express"
          ]
        }
      }
    },
    "Course": {
      "type": "object",
      "title": "Course",
      "required": [
        "_id",
        "name",
        "description",
        "status",
        "supported_languages",
        "deadline",
        "created_by"
      ],
      "properties": {
        "_id": {
          "description": "The course ID",
          "type": "string",
          "example": "3027c99f-35d0-5806-b13d-a6b77b07ae9d"
        },
        "name": {
          "description": "The name of the course",
          "type": "string",
          "example": "Sample Course"
        },
        "description": {
          "description": "The course description",
          "type": "string",
          "example": "Sample Course Description"
        },
        "status": {
          "description": "The status of the course",
          "type": "string",
          "example": "published",
          "enum": [
            "archived",
            "draft",
            "published",
            "unpublished",
            "expired"
          ]
        },
        "supported_languages": {
          "description": "List of languages/frameworks available for the course",
          "type": "array",
          "items": {
            "type": "string",
            "example": [
              "Java Spring",
              "Ruby Rails"
            ]
          }
        },
        "deadline": {
          "description": "The date the course ends",
          "type": "string",
          "format": "date-time",
          "example": "2020-02-17T04:57:47.715Z"
        },
        "created_by": {
          "description": "The ResourceId of the author of the course",
          "type": "string",
          "example": "b1979bb3-6b37-53b2-9296-7ca86ad5ae0a"
        }
      }
    },
    "CourseDeveloperProgressEntry": {
      "description": "This entry represents a developer course progress",
      "required": [
        "user_id",
        "status",
        "accuracy",
        "confidence",
        "minutes_spent",
        "progress",
        "languages"
      ],
      "type": "object",
      "title": "Developer Course Progress Entry",
      "properties": {
        "user_id": {
          "description": "User resource ID",
          "type": "string",
          "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
          "example": "625d95c8-73b7-4a31-8bb6-84bdfe0253b1"
        },
        "status": {
          "description": "Course status",
          "type": "string",
          "enum": [
            "Invited",
            "In Progress",
            "Completed"
          ],
          "example": "In Progress"
        },
        "accuracy": {
          "description": "The percentage of correct attempts",
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        },
        "confidence": {
          "description": "The ratio of hits used to available hints",
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        },
        "minutes_spent": {
          "description": "The total time in mimnutes that the user spent on the course",
          "type": "integer",
          "minimum": 0
        },
        "first_completed_date": {
          "description": "The date the first course language was completed",
          "type": "string",
          "format": "date-time",
          "example": "2020-11-20T04:57:47.715Z"
        },
        "first_enrolled_date": {
          "description": "The date the first course language was enrolled in",
          "type": "string",
          "format": "date-time",
          "example": "2020-11-17T04:57:47.715Z"
        },
        "progress": {
          "description": "The progress of the course",
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        },
        "languages": {
          "description": "List of languages for the course",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CourseDeveloperProgressLanguageEntry"
          }
        },
        "invites": {
          "description": "List of invites and reminders",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CourseDeveloperProgressInviteEntry"
          },
          "example": [
            {
              "type": "invite",
              "send": "2020-11-01T05:07:20.714Z"
            },
            {
              "type": "reminder",
              "send": "2020-11-08T05:07:20.714Z"
            }
          ]
        }
      }
    },
    "CourseDeveloperProgressInviteEntry": {
      "description": "This entry represents a developer course progress invites and reminders.",
      "required": [
        "type",
        "send"
      ],
      "title": "Developer Course Progress Entry for invites and reminders.",
      "properties": {
        "type": {
          "description": "The type of invite",
          "enum": [
            "invite",
            "reminder",
            "reinvite"
          ],
          "type": "string"
        },
        "send": {
          "description": "The time the invitation was send",
          "type": "string"
        }
      }
    },
    "CourseDeveloperProgressLanguageEntry": {
      "description": "This entry represents a developer course progress for a single language",
      "required": [
        "accuracy",
        "confidence",
        "language",
        "minutes_spent",
        "progress",
        "status",
        "videos_watched"
      ],
      "type": "object",
      "title": "Developer Course Progress Entry for Single Lanugage",
      "properties": {
        "language": {
          "description": "The programming language",
          "type": "string",
          "example": "Java Enterprise Edition (JSP)"
        },
        "status": {
          "description": "The status for the course language",
          "type": "string",
          "example": "In Progress"
        },
        "accuracy": {
          "description": "The percentage of correct attempts for the language",
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        },
        "confidence": {
          "description": "The ratio of hits used to available hints for the language",
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        },
        "minutes_spent": {
          "description": "The total time in mimnutes that the user spent on the course for the language",
          "type": "integer",
          "minimum": 0
        },
        "progress": {
          "description": "The progress of the course for the language",
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        },
        "videos_watched": {
          "description": "The amount of videos user have watched for the language",
          "type": "integer",
          "minimum": 0
        }
      }
    },
    "CourseDeveloperProgressSearch": {
      "description": "Course developer progress search filter",
      "type": "object",
      "title": "Course Developer Progress Search Filter",
      "properties": {
        "course_id": {
          "description": "Array of course ID",
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "example": [
            "f7fabc6a-f87b-4b42-b7dc-e19b6089e9d0"
          ]
        },
        "user_id": {
          "description": "Array of user resource ID",
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "example": [
            "625d95c8-73b7-4a31-8bb6-84bdfe0253b1"
          ]
        },
        "status": {
          "description": "Course status",
          "type": "string",
          "enum": [
            "Invited",
            "In Progress",
            "Completed"
          ],
          "example": "In Progress"
        }
      }
    },
    "CourseDeveloperProgressSearchEntry": {
      "description": "This entry represents a developer course progress search",
      "allOf": [
        {
          "type": "object",
          "required": [
            "course_id"
          ],
          "title": "Developer Course Progress Search Entry",
          "properties": {
            "course_id": {
              "description": "Course ID",
              "type": "string",
              "format": "uuid",
              "example": "f7fabc6a-f87b-4b42-b7dc-e19b6089e9d0"
            }
          }
        },
        {
          "$ref": "#/definitions/CourseDeveloperProgressEntry"
        }
      ]
    }
  },
  "paths": {
    "/url-fetcher/course": {
      "x-swagger-router-controller": "url-fetcher",
      "get": {
        "security": [],
        "operationId": "CourseGetURL",
        "summary": "Get course URL",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Language Framework",
            "name": "language_framework",
            "description": "Name of language and framework in the format of \"Java::Spring\"",
            "type": "string",
            "maxLength": 32,
            "required": true
          },
          {
            "in": "query",
            "x-ms-summary": "Course",
            "name": "course",
            "description": "Name of course",
            "type": "string",
            "required": true,
            "maxLength": 64
          },
          {
            "in": "query",
            "x-ms-summary": "Module",
            "name": "module",
            "description": "Name of course module",
            "type": "string",
            "required": true,
            "maxLength": 64
          },
          {
            "in": "query",
            "x-ms-summary": "Redirect",
            "name": "redirect",
            "description": "Redirects user to the return URL",
            "type": "boolean",
            "required": false
          }
        ],
        "tags": [
          "URL fetcher"
        ],
        "description": "JSON containing course URL",
        "responses": {
          "200": {
            "description": "Returns a course URL",
            "schema": {
              "$ref": "#/definitions/CourseURL"
            }
          },
          "302": {
            "description": "Redirect straight to course URL"
          }
        }
      }
    },
    "/training/developer-leaderboard": {
      "x-swagger-router-controller": "training",
      "get": {
        "summary": "Get Developer Leaderboard",
        "operationId": "DeveloperGetLeaderboard",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Report Period",
            "name": "report_period",
            "description": "The number of days over which to view the changes in statistics",
            "type": "integer",
            "required": false,
            "enum": [
              1,
              7,
              30
            ]
          },
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Start Date",
            "name": "startdate",
            "description": "Include progress for leaderboard completed on or after the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "End Date",
            "name": "enddate",
            "description": "Include progress for leaderboard completed on or before the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "format": "date-time",
            "required": false
          }
        ],
        "tags": [
          "Training"
        ],
        "description": "This endpoint returns a list of all developers within the organisation, with their current stats as well as the change in stats over the report period (which may be 1, 7 or 30 days).",
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "leaderboard": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "rank": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The final position of the participant within the tournament.",
                        "title": "Rank"
                      },
                      "developer": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the developer (first + middle + surname)",
                            "title": "Name"
                          },
                          "email": {
                            "type": "string",
                            "description": "The developer's email address.",
                            "title": "Email"
                          },
                          "member_since": {
                            "type": "string",
                            "description": "The date the developer became a member.",
                            "title": "Member Since"
                          },
                          "last_logged_in": {
                            "type": "string",
                            "description": "The date the developer last logged in.",
                            "title": "Last Logged In"
                          },
                          "status": {
                            "type": "string",
                            "description": "The current status of the developer account.",
                            "title": "Status"
                          },
                          "company": {
                            "type": "string",
                            "description": "The company name that the developer is a part of",
                            "title": "Company"
                          },
                          "team": {
                            "type": "string",
                            "description": "The team name that the developer is a part of.",
                            "title": "Team"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "tags"
                          },
                          "roles": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "roles"
                          }
                        },
                        "description": "developer"
                      },
                      "blocked": {
                        "type": "boolean",
                        "description": "Whether this participant was blocked from the tournament.",
                        "title": "Blocked",
                        "enum": [
                          "true",
                          "false"
                        ]
                      },
                      "minutes_spent": {
                        "type": "integer",
                        "format": "int32",
                        "description": "How long the developer spent answering (in minutes).",
                        "title": "Minutes Spent"
                      },
                      "language": {
                        "type": "string",
                        "description": "The language/framework the participant used.",
                        "title": "Language"
                      },
                      "max_points": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum amount of points available in the tournament",
                        "title": "Max Points"
                      },
                      "points": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The amount of points the participant gained.",
                        "title": "Points"
                      },
                      "hints_used": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of hints the participant used.",
                        "title": "Hints Used"
                      },
                      "lives_lost": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of lives the participant lost during the tournament.",
                        "title": "Lives Lost"
                      },
                      "levels": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "name"
                            },
                            "challenges": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "number": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "number"
                                  },
                                  "category": {
                                    "type": "string",
                                    "description": "category"
                                  },
                                  "subcategory": {
                                    "type": "string",
                                    "description": "subcategory"
                                  },
                                  "difficulty": {
                                    "type": "string",
                                    "description": "difficulty"
                                  },
                                  "status": {
                                    "type": "string",
                                    "description": "status"
                                  },
                                  "max_points": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "max_points"
                                  },
                                  "points": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "points"
                                  },
                                  "codebase_size": {
                                    "type": "string",
                                    "description": "codebase_size"
                                  },
                                  "minutes_spent": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "minutes_spent"
                                  },
                                  "stages": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "number": {
                                          "type": "integer",
                                          "format": "int32",
                                          "description": "number"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "name"
                                        },
                                        "status": {
                                          "type": "string",
                                          "description": "status"
                                        },
                                        "points": {
                                          "type": "integer",
                                          "format": "int32",
                                          "description": "points"
                                        },
                                        "max_points": {
                                          "type": "integer",
                                          "format": "int32",
                                          "description": "max_points"
                                        },
                                        "minutes_spent": {
                                          "type": "integer",
                                          "format": "int32",
                                          "description": "minutes_spent"
                                        },
                                        "lives_lost": {
                                          "type": "integer",
                                          "format": "int32",
                                          "description": "lives_lost"
                                        },
                                        "hints_used": {
                                          "type": "integer",
                                          "format": "int32",
                                          "description": "hints_used"
                                        }
                                      }
                                    },
                                    "description": "stages"
                                  }
                                }
                              },
                              "description": "challenges"
                            }
                          }
                        },
                        "description": "levels"
                      }
                    }
                  },
                  "description": "leaderboard"
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The total number of pages in the results",
                      "title": "Total Pages"
                    },
                    "results_per_page": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum number of results in each page.",
                      "title": "Results per Page"
                    },
                    "next_page": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The page number of the next page (if one exists).",
                      "title": "Next Page"
                    },
                    "prev_page": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The page number of the previous page (if one exists).",
                      "title": "Previous Page"
                    },
                    "total_results": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The total number of the results.",
                      "title": "Total Results"
                    }
                  },
                  "description": "links"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/training/developers-progress": {
      "x-swagger-router-controller": "training",
      "get": {
        "summary": "Get Developer Progress",
        "operationId": "DeveloperGetProgress",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          }
        ],
        "tags": [
          "Training"
        ],
        "description": "This endpoint returns the training progress of all developers within the organisation, with current realm, level and quest progress.",
        "responses": {
          "200": {
            "description": "Returns an array of developer progress entries",
            "schema": {
              "$ref": "#/definitions/DevelopersProgress"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/training/developers-activity": {
      "x-swagger-router-controller": "training",
      "get": {
        "summary": "Get Developer Activity",
        "operationId": "DeveloperGetActivity",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          }
        ],
        "tags": [
          "Training"
        ],
        "description": "This endpoint returns the detailed challenge log of all developers within the organisation, with challenge score, difficulty and challenge outcome of the developer.",
        "responses": {
          "200": {
            "description": "Returns an array of developer challenge log entries",
            "schema": {
              "$ref": "#/definitions/DevelopersActivity"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/training/team-leaderboard": {
      "x-swagger-router-controller": "training",
      "get": {
        "summary": "Get Team Leaderboard",
        "operationId": "TeamGetLeaderboard",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Report Period",
            "name": "report_period",
            "description": "The number of days over which to view the changes in statistics",
            "type": "integer",
            "required": false,
            "enum": [
              1,
              7,
              30
            ]
          },
          {
            "in": "query",
            "x-ms-summary": "Omit Inactive",
            "name": "omitInactive",
            "description": "When set to true, will omit all inactive accounts from results",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Start Date",
            "name": "startdate",
            "description": "Include progress for leaderboard completed on or after the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": " End Date",
            "name": "enddate",
            "description": "Include progress for leaderboard completed on or before the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "format": "date-time",
            "required": false
          }
        ],
        "tags": [
          "Training"
        ],
        "description": "This endpoint returns a list of all teams within the organisation, with their current stats as well as the change in stats over the report period (which may be 1, 7 or 30 days).",
        "responses": {
          "200": {
            "description": "Returns all entries for the leaderboard",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamLeaderboard"
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/training/developer-leaderboard/search": {
      "x-swagger-router-controller": "training",
      "post": {
        "summary": "Search Developer Leaderboard",
        "operationId": "DeveloperSearchLeaderboard",
        "parameters": [
          {
            "in": "body",
            "name": "developer_leaderboard_search",
            "description": "Leaderboard search filters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeveloperLeaderboardSearch"
            }
          }
        ],
        "tags": [
          "Training"
        ],
        "description": "This endpoint returns a list of all developers within the organisation, with their current stats. This also lists the change in stats over the report period (which may be 1, 7 or 30 days) or a given date range. Results can be filtered based on developer emails, developer tags and team names.",
        "responses": {
          "200": {
            "description": "Returns an array of leaderboard entries",
            "schema": {
              "type": "object",
              "properties": {
                "leaderboard": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "rank": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The final position of the participant within the tournament.",
                        "title": "Rank"
                      },
                      "developer": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the developer (first + middle + surname).",
                            "title": "Name"
                          },
                          "email": {
                            "type": "string",
                            "description": "The developers email address",
                            "title": "Email"
                          },
                          "member_since": {
                            "type": "string",
                            "description": "The date the developer became a member.",
                            "title": "Member Since"
                          },
                          "last_logged_in": {
                            "type": "string",
                            "description": "The date the developer last logged in.",
                            "title": "Last Logged In"
                          },
                          "status": {
                            "type": "string",
                            "description": "The current status of the developer account.",
                            "title": "Status"
                          },
                          "company": {
                            "type": "string",
                            "description": "The company name that the developer is a part of.",
                            "title": "Company"
                          },
                          "team": {
                            "type": "string",
                            "description": "The team name that the developer is a part of.",
                            "title": "Team"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "tags"
                          },
                          "roles": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "roles"
                          }
                        },
                        "description": "developer"
                      },
                      "blocked": {
                        "type": "boolean",
                        "description": "Whether this participant was blocked from the tournament.",
                        "title": "Blocked",
                        "enum": [
                          "true",
                          "false"
                        ]
                      },
                      "minutes_spent": {
                        "type": "integer",
                        "format": "int32",
                        "description": "How long the developer spent answering (in minutes).",
                        "title": "Minutes Spent"
                      },
                      "language": {
                        "type": "string",
                        "description": "The language/framework the the participant used.",
                        "title": "Language"
                      },
                      "max_points": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum amount of points available in the tournament.",
                        "title": "Max Points"
                      },
                      "points": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The amount of points the participant gained.",
                        "title": "Points"
                      },
                      "hints_used": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of hints the participant used.",
                        "title": "Hints Used"
                      },
                      "lives_lost": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of lives the participant lost during the tournament.",
                        "title": "Lives Lost"
                      },
                      "levels": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "name"
                            },
                            "challenges": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "number": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "number"
                                  },
                                  "category": {
                                    "type": "string",
                                    "description": "category"
                                  },
                                  "subcategory": {
                                    "type": "string",
                                    "description": "subcategory"
                                  },
                                  "difficulty": {
                                    "type": "string",
                                    "description": "difficulty"
                                  },
                                  "status": {
                                    "type": "string",
                                    "description": "status"
                                  },
                                  "max_points": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "max_points"
                                  },
                                  "points": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "points"
                                  },
                                  "codebase_size": {
                                    "type": "string",
                                    "description": "codebase_size"
                                  },
                                  "minutes_spent": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "minutes_spent"
                                  },
                                  "stages": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "number": {
                                          "type": "integer",
                                          "format": "int32",
                                          "description": "number"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "name"
                                        },
                                        "status": {
                                          "type": "string",
                                          "description": "status"
                                        },
                                        "points": {
                                          "type": "integer",
                                          "format": "int32",
                                          "description": "points"
                                        },
                                        "max_points": {
                                          "type": "integer",
                                          "format": "int32",
                                          "description": "max_points"
                                        },
                                        "minutes_spent": {
                                          "type": "integer",
                                          "format": "int32",
                                          "description": "minutes_spent"
                                        },
                                        "lives_lost": {
                                          "type": "integer",
                                          "format": "int32",
                                          "description": "lives_lost"
                                        },
                                        "hints_used": {
                                          "type": "integer",
                                          "format": "int32",
                                          "description": "hints_used"
                                        }
                                      }
                                    },
                                    "description": "stages"
                                  }
                                }
                              },
                              "description": "challenges"
                            }
                          }
                        },
                        "description": "levels"
                      }
                    }
                  },
                  "description": "leaderboard"
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The total number of pages in the results.",
                      "title": "Total Pages"
                    },
                    "results_per_page": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum number of results in each page.",
                      "title": "Results per Page"
                    },
                    "next_page": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The page number of the next page (if one exists).",
                      "title": "Next Page"
                    },
                    "prev_page": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The page number of the previous page (if one exists).",
                      "title": "Previous Page"
                    },
                    "total_results": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The total number of the results.",
                      "title": "Total Results"
                    }
                  },
                  "description": "links"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/training/developers-progress/search": {
      "x-swagger-router-controller": "training",
      "post": {
        "summary": "Search Developers Progress",
        "operationId": "DevelopersSearchProgress",
        "parameters": [
          {
            "in": "body",
            "name": "developer_progress_search",
            "description": "Developer progress search filters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeveloperProgressSearch"
            }
          }
        ],
        "tags": [
          "Training"
        ],
        "description": "This endpoint returns the training progress of all developers within the organisation, with current realm, level and quest progress. This also lists the change in developer progress over the report period (which may be 1, 7 or 30 days) or a given date range. Results can be filtered based on developer emails, developer tags and team names.",
        "responses": {
          "200": {
            "description": "Returns an array of developer progress entries",
            "schema": {
              "$ref": "#/definitions/DevelopersProgress"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/metrics/activity/strengths-and-weaknesses": {
      "x-swagger-router-controller": "metrics",
      "get": {
        "summary": "Get Activity Strengths and Weaknesses",
        "operationId": "ActivityGetStrengthsAndWeaknesses",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Target Type",
            "name": "targetType",
            "description": "Type of target. Defaults depending on the scope of the API key. Report key defaults to company. Team key defaults to team.",
            "type": "string",
            "enum": [
              "company",
              "team",
              "developer"
            ]
          },
          {
            "in": "query",
            "x-ms-summary": "Target Identifier",
            "name": "targetIdentifier",
            "description": "Target Identifier (Team Name, User email or User Id)",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Language ID",
            "name": "languageId",
            "description": "Language Id",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Language Framework",
            "name": "languageFramework",
            "description": "Language Framework",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          }
        ],
        "tags": [
          "Metrics"
        ],
        "description": "This endpoint returns the average strengths and weaknesses for a company, team or user (depending on the level of granularity of the query) for a specific language or all languages",
        "responses": {
          "200": {
            "description": "Returns an object containing strengths and weaknesses by management categories",
            "schema": {
              "$ref": "#/definitions/StrengthsAndWeaknesses"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/training/developers-activity/search": {
      "x-swagger-router-controller": "training",
      "post": {
        "summary": "Search Developers Activity",
        "operationId": "DeveloperSearchActivity",
        "parameters": [
          {
            "in": "body",
            "name": "developer_activity_search",
            "description": "developer activity search filters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DevelopersActivitySearch"
            }
          }
        ],
        "tags": [
          "Training"
        ],
        "description": "This endpoint returns the detailed challenge log of all developers within the organisation, with challenge score, difficulty and challenge outcome of the developer. This also lists the challenge log over the report period (which may be 1, 7 or 30 days) or a given date range. Results can be filtered based on developer emails, developer tags and team names.",
        "responses": {
          "200": {
            "description": "Returns an array of developer challenge log entries",
            "schema": {
              "$ref": "#/definitions/DevelopersActivity"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/metrics/activity/teams/most-engaged": {
      "x-swagger-router-controller": "metrics",
      "get": {
        "summary": "Get Team Activity Most Engaged",
        "operationId": "TeamGetMostEngaged",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Report Period",
            "name": "report_period",
            "description": "The number of days over which to view most engaged teams (report_period should be specified alone or with enddate)",
            "type": "integer",
            "required": false,
            "enum": [
              1,
              7,
              30
            ]
          },
          {
            "in": "query",
            "x-ms-summary": "Start Date",
            "name": "startdate",
            "description": "Start date for date range (should not be specified with report_period). Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": " End Date",
            "name": "enddate",
            "description": "End date for date range (should be greater than startdate). Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Number of Teams",
            "name": "number_of_teams",
            "description": "Top 'N' number of teams",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Tags",
            "name": "tags",
            "description": "User tags",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          }
        ],
        "tags": [
          "Metrics"
        ],
        "description": "This endpoint returns the top 'N' most engaged teams.",
        "responses": {
          "200": {
            "description": "Returns an array of teams",
            "schema": {
              "$ref": "#/definitions/MostEngagedTeams"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/metrics/activity/users/most-engaged": {
      "x-swagger-router-controller": "metrics",
      "get": {
        "summary": "Get Users Activity Most Engaged",
        "operationId": "UserGetMostEngaged",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Report Period",
            "name": "report_period",
            "description": "The number of days over which to view most engaged users (report_period should be specified alone or with enddate)",
            "type": "integer",
            "required": false,
            "enum": [
              1,
              7,
              30
            ]
          },
          {
            "in": "query",
            "x-ms-summary": "Start Date",
            "name": "startdate",
            "description": "Start date for date range (should not be specified with report_period). Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": " End Date",
            "name": "enddate",
            "description": "End date for date range (should be greater than startdate). Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Number of users",
            "name": "number_of_users",
            "description": "Top 'N' number of users",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Team Name",
            "name": "team_name",
            "description": "Team Name",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Tags",
            "name": "tags",
            "description": "User tags",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          }
        ],
        "tags": [
          "Metrics"
        ],
        "description": "This endpoint returns the top 'N' most engaged users.",
        "responses": {
          "200": {
            "description": "Returns an array of users",
            "schema": {
              "$ref": "#/definitions/MostEngagedUsers"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/assessments": {
      "x-swagger-router-controller": "assessments",
      "get": {
        "operationId": "AssessmentsGet",
        "summary": "Get Assessments",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Start Date",
            "name": "startdate",
            "description": "Only return assessments started on and after the given date. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": " End Date",
            "name": "enddate",
            "description": "Only return assessments started or completed before the given date. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "format": "date-time",
            "required": false
          }
        ],
        "tags": [
          "Assessments"
        ],
        "description": "This endpoint will return a list of Assessment objects which contain a range of datapoints related to assessments. This includes assessment IDs, which may be used in conjunction with the other assessments API endpoints.",
        "responses": {
          "200": {
            "description": "Returns an array of Assessment objects",
            "schema": {
              "type": "object",
              "title": "Assessments",
              "properties": {
                "assessments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Assessment"
                  }
                },
                "links": {
                  "description": "Related API pages and pagination details",
                  "type": "object",
                  "title": "Links",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages in the results",
                      "example": 10
                    },
                    "results_per_page": {
                      "type": "integer",
                      "description": "The maximum number of results in each page",
                      "example": 100
                    },
                    "next_page": {
                      "type": "integer",
                      "description": "The page number of the next page (if one exists)",
                      "example": 3
                    },
                    "prev_page": {
                      "type": "integer",
                      "description": "The page number of the previous page (if one exists)",
                      "example": 1
                    },
                    "total_results": {
                      "type": "integer",
                      "description": "The total number of the results",
                      "example": 513
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/assessments/{assessment_id}/attempts": {
      "x-swagger-router-controller": "assessments",
      "get": {
        "summary": "Get Assessment Attempts",
        "operationId": "AssessmentGetAttempts",
        "parameters": [
          {
            "in": "path",
            "x-ms-summary": "Assessment ID",
            "name": "assessment_id",
            "description": "The assessment ID",
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "required": true
          },
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Developer's Email",
            "name": "developer",
            "description": "The email address of the developer to filter on",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Start Date",
            "name": "startdate",
            "description": "Only return attempts started on and after the given date. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": " End Date",
            "name": "enddate",
            "description": "Only return attempts started or completed before the given date. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "format": "date-time",
            "required": false
          }
        ],
        "tags": [
          "Assessments"
        ],
        "description": "This endpoint returns a detailed report for all developers who have taken the Assessment with the given ID. The scope of the report may be filtered in a number of ways. You may filter results to a given developer by supplying their email address with the query. If a start date is provided, only attempts started or completed after (and including) this date are included. If an end date is provided, only challenges started or completed before this date are included. Providing both indicates a date range to filter on. This includes all the data in the summary report plus details on all the challenges that are a part of the assessment.",
        "responses": {
          "200": {
            "description": "Returns the detailed assessment data",
            "schema": {
              "type": "object",
              "properties": {
                "attempts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "The assessment attempt ID",
                        "title": "ID"
                      },
                      "_assessment": {
                        "type": "string",
                        "description": "The assessment it belongs to",
                        "title": "Assessment"
                      },
                      "name": {
                        "type": "string",
                        "description": "The assessment name",
                        "title": "Assessment Name"
                      },
                      "developer": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the developer (first + middle + surname).",
                            "title": "Name"
                          },
                          "email": {
                            "type": "string",
                            "description": "The developer's email address.",
                            "title": "Email"
                          },
                          "member_since": {
                            "type": "string",
                            "description": "The date the developer became a member.",
                            "title": "Member Since"
                          },
                          "last_logged_in": {
                            "type": "string",
                            "description": "The date the developer last logged in.",
                            "title": "Last Logged In"
                          },
                          "status": {
                            "type": "string",
                            "description": "The current status of the developer account.",
                            "title": "Status"
                          },
                          "company": {
                            "type": "string",
                            "description": "The company name that the developer is a part of.",
                            "title": "Company"
                          },
                          "team": {
                            "type": "string",
                            "description": "The team name that the developer is a part of.",
                            "title": "Team"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "tags"
                          },
                          "roles": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "roles"
                          }
                        },
                        "description": "developer"
                      },
                      "status": {
                        "type": "string",
                        "description": "Indicates the status of a challenge/assessment which may be pending, in progress, done or 'out of reach'.",
                        "title": "Status"
                      },
                      "language": {
                        "type": "string",
                        "description": "The language/framework of the assessment. null = language/framework not selected for assessment supporting more than one language.",
                        "title": "Language"
                      },
                      "started": {
                        "type": "string",
                        "description": "The date/time that the assessment was started.",
                        "title": "Started"
                      },
                      "completed": {
                        "type": "string",
                        "description": "The date/time that the assessment was completed",
                        "title": "Completed"
                      },
                      "deadline": {
                        "type": "string",
                        "description": "The date/time of the assessment deadline. If an assessment does not have a time limit, deadline will be null.",
                        "title": "Deadline"
                      },
                      "score": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Assessment score in %.",
                        "title": "Score"
                      },
                      "completed_in": {
                        "type": "string",
                        "description": "The amount of time taken to complete the assessment attempt.",
                        "title": "Completed In"
                      },
                      "passing_grade": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The percentage required to pass the assessment.",
                        "title": "Passing Grade"
                      },
                      "pass_status": {
                        "type": "string",
                        "description": "The pass status of the assessment.",
                        "title": "Pass Status"
                      },
                      "progress": {
                        "type": "object",
                        "properties": {
                          "correct": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The number of correct challenges.",
                            "title": "Correct"
                          },
                          "incorrect": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The number of incorrect challenges.",
                            "title": "Incorrect"
                          },
                          "number_of_challenges": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The total number of challenges.",
                            "title": "Number of Challenges"
                          },
                          "completed": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The date/time that the assessment was completed.",
                            "title": "Completed"
                          }
                        },
                        "description": "progress"
                      },
                      "accuracy": {
                        "type": "object",
                        "properties": {
                          "located": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The % of vulnerabilities located",
                            "title": "Located"
                          },
                          "identified": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The % of vulnerabilities identified",
                            "title": "Identified"
                          },
                          "fixed": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The % of vulnerabilities fixed",
                            "title": "Fixed"
                          }
                        },
                        "description": "accuracy"
                      },
                      "challenges": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "number": {
                              "type": "integer",
                              "format": "int32",
                              "description": "number"
                            },
                            "category": {
                              "type": "string",
                              "description": "category"
                            },
                            "subcategory": {
                              "type": "string",
                              "description": "subcategory"
                            },
                            "difficulty": {
                              "type": "string",
                              "description": "difficulty"
                            },
                            "status": {
                              "type": "string",
                              "description": "status"
                            },
                            "max_score": {
                              "type": "integer",
                              "format": "int32",
                              "description": "max_score"
                            },
                            "score": {
                              "type": "integer",
                              "format": "int32",
                              "description": "score"
                            },
                            "locate": {
                              "type": "object",
                              "properties": {
                                "status": {
                                  "type": "string",
                                  "description": "status"
                                }
                              },
                              "description": "locate"
                            },
                            "identify": {
                              "type": "object",
                              "properties": {
                                "status": {
                                  "type": "string",
                                  "description": "status"
                                }
                              },
                              "description": "identify"
                            },
                            "fix": {
                              "type": "object",
                              "properties": {
                                "status": {
                                  "type": "string",
                                  "description": "status"
                                }
                              },
                              "description": "fix"
                            }
                          }
                        },
                        "description": "challenges"
                      }
                    }
                  },
                  "description": "attempts"
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The total number of pages in the results.",
                      "title": "Total Pages"
                    },
                    "results_per_page": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum number of results in each page.",
                      "title": "Results per Page"
                    },
                    "next_page": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The page number of the next page (if one exists).",
                      "title": "Next Page"
                    },
                    "prev_page": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The page number of the previous page (if one exists).",
                      "title": "Prev Page"
                    },
                    "total_results": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The total number of the results.",
                      "title": "Total Results"
                    }
                  },
                  "description": "links"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/assessments/search": {
      "x-swagger-router-controller": "assessments",
      "post": {
        "summary": "Search Assessment",
        "operationId": "AssessmentSearch",
        "parameters": [
          {
            "in": "body",
            "name": "assessments_search",
            "description": "Assessments search filters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssessmentsSearch"
            }
          }
        ],
        "tags": [
          "Assessments"
        ],
        "description": "This endpoint will return a list of Assessment objects which contain a range of datapoints related to assessments. This includes assessment IDs, which may be used in conjunction with the other assessments API endpoints. Results can be filtered based on status, name, supported language and difficulty.",
        "responses": {
          "200": {
            "description": "Returns an array of Assessment objects",
            "schema": {
              "type": "object",
              "properties": {
                "assessments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Assessment"
                  }
                },
                "links": {
                  "description": "Related API pages and pagination details",
                  "type": "object",
                  "title": "Links",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages in the results",
                      "example": 10
                    },
                    "results_per_page": {
                      "type": "integer",
                      "description": "The maximum number of results in each page",
                      "example": 100
                    },
                    "next_page": {
                      "type": "integer",
                      "description": "The page number of the next page (if one exists)",
                      "example": 3
                    },
                    "prev_page": {
                      "type": "integer",
                      "description": "The page number of the previous page (if one exists)",
                      "example": 1
                    },
                    "total_results": {
                      "type": "integer",
                      "description": "The total number of the results",
                      "example": 513
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/assessments/attempts/search": {
      "x-swagger-router-controller": "assessments",
      "post": {
        "summary": "Search Assessment Attempts",
        "operationId": "AssessmentSearchAttempts",
        "parameters": [
          {
            "in": "body",
            "name": "assessment_attempts_search",
            "description": "Assessment attempts search filters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssessmentAttemptsSearch"
            }
          }
        ],
        "tags": [
          "Assessments"
        ],
        "description": "This endpoint returns a detailed report for all developers who have taken the Assessment with the given ID. The scope of the report may be filtered in a number of ways. You may filter results to given developer(s) by supplying their email address(es) with the query. If a status is provided, only assessment attempts with specified status are included. If team name(s) provided, only assessment attempts of users within those team(s) are included. If tags(s) is provided, only assessment attempts of users with those tag(s) are included. If a pass_status is provided, only assessment attempts with specified pass_status are included. This includes all the data in the summary report plus details on all the challenges that are a part of the assessment.",
        "responses": {
          "200": {
            "description": "Returns the detailed assessment data",
            "schema": {
              "type": "object",
              "properties": {
                "attempts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "The assessment attempt ID",
                        "title": "ID"
                      },
                      "_assessment": {
                        "type": "string",
                        "description": "The assessment it belongs to",
                        "title": "Assessment"
                      },
                      "name": {
                        "type": "string",
                        "description": "The assessment name",
                        "title": "Assessment Name"
                      },
                      "developer": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the developer (first + middle + surname).",
                            "title": "Name"
                          },
                          "email": {
                            "type": "string",
                            "description": "The developer's email address.",
                            "title": "Email"
                          },
                          "member_since": {
                            "type": "string",
                            "description": "The date the developer became a member.",
                            "title": "Member Since"
                          },
                          "last_logged_in": {
                            "type": "string",
                            "description": "The date the developer last logged in.",
                            "title": "Last Logged In"
                          },
                          "status": {
                            "type": "string",
                            "description": "The current status of the developer account.",
                            "title": "Status"
                          },
                          "company": {
                            "type": "string",
                            "description": "The company name that the developer is a part of.",
                            "title": "Company"
                          },
                          "team": {
                            "type": "string",
                            "description": "The team name that the developer is a part of.",
                            "title": "Team"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "tags"
                          },
                          "roles": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "roles"
                          }
                        },
                        "description": "developer"
                      },
                      "status": {
                        "type": "string",
                        "description": "Indicates the status of a challenge/assessment which may be pending, in progress, done or 'out of reach'.",
                        "title": "Status"
                      },
                      "language": {
                        "type": "string",
                        "description": "The language/framework of the assessment. null = language/framework not selected for assessment supporting more than one language.",
                        "title": "Language"
                      },
                      "started": {
                        "type": "string",
                        "description": "The date/time that the assessment was started.",
                        "title": "Started"
                      },
                      "completed": {
                        "type": "string",
                        "description": "The date/time that the assessment was completed",
                        "title": "Completed"
                      },
                      "deadline": {
                        "type": "string",
                        "description": "The date/time of the assessment deadline. If an assessment does not have a time limit, deadline will be null.",
                        "title": "Deadline"
                      },
                      "score": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Assessment score in %.",
                        "title": "Score"
                      },
                      "completed_in": {
                        "type": "string",
                        "description": "The amount of time taken to complete the assessment attempt.",
                        "title": "Completed In"
                      },
                      "passing_grade": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The percentage required to pass the assessment.",
                        "title": "Passing Grade"
                      },
                      "pass_status": {
                        "type": "string",
                        "description": "The pass status of the assessment.",
                        "title": "Pass Status"
                      },
                      "progress": {
                        "type": "object",
                        "properties": {
                          "correct": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The number of correct challenges.",
                            "title": "Correct"
                          },
                          "incorrect": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The number of incorrect challenges.",
                            "title": "Incorrect"
                          },
                          "number_of_challenges": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The total number of challenges.",
                            "title": "Number of Challenges"
                          },
                          "completed": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The date/time that the assessment was completed.",
                            "title": "Completed"
                          }
                        },
                        "description": "progress"
                      },
                      "accuracy": {
                        "type": "object",
                        "properties": {
                          "located": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The % of vulnerabilities located",
                            "title": "Located"
                          },
                          "identified": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The % of vulnerabilities identified",
                            "title": "Identified"
                          },
                          "fixed": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The % of vulnerabilities fixed",
                            "title": "Fixed"
                          }
                        },
                        "description": "accuracy"
                      },
                      "challenges": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "number": {
                              "type": "integer",
                              "format": "int32",
                              "description": "number"
                            },
                            "category": {
                              "type": "string",
                              "description": "category"
                            },
                            "subcategory": {
                              "type": "string",
                              "description": "subcategory"
                            },
                            "difficulty": {
                              "type": "string",
                              "description": "difficulty"
                            },
                            "status": {
                              "type": "string",
                              "description": "status"
                            },
                            "max_score": {
                              "type": "integer",
                              "format": "int32",
                              "description": "max_score"
                            },
                            "score": {
                              "type": "integer",
                              "format": "int32",
                              "description": "score"
                            },
                            "locate": {
                              "type": "object",
                              "properties": {
                                "status": {
                                  "type": "string",
                                  "description": "status"
                                }
                              },
                              "description": "locate"
                            },
                            "identify": {
                              "type": "object",
                              "properties": {
                                "status": {
                                  "type": "string",
                                  "description": "status"
                                }
                              },
                              "description": "identify"
                            },
                            "fix": {
                              "type": "object",
                              "properties": {
                                "status": {
                                  "type": "string",
                                  "description": "status"
                                }
                              },
                              "description": "fix"
                            }
                          }
                        },
                        "description": "challenges"
                      }
                    }
                  },
                  "description": "attempts"
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The total number of pages in the results.",
                      "title": "Total Pages"
                    },
                    "results_per_page": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum number of results in each page.",
                      "title": "Results per Page"
                    },
                    "next_page": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The page number of the next page (if one exists).",
                      "title": "Next Page"
                    },
                    "prev_page": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The page number of the previous page (if one exists).",
                      "title": "Prev Page"
                    },
                    "total_results": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The total number of the results.",
                      "title": "Total Results"
                    }
                  },
                  "description": "links"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/assessments/{assessment_id}/assign": {
      "x-swagger-router-controller": "assessments",
      "post": {
        "summary": "Assign Assessments",
        "operationId": "AssessmentAssign",
        "parameters": [
          {
            "in": "path",
            "x-ms-summary": "Assessment ID",
            "name":"assessment_id",
            "description": "The assessment ID",
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "required": true
          },
          {
            "in": "body",
            "name": "assessment_assign",
            "description": "Assign assessment to users/teams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssessmentAssign"
            }
          }
        ],
        "tags": [
          "Assessments"
        ],
        "description": "This endpoint will assign the given assessment to the specified users/teams. Returns a list of users that were assigned to the assessment with their email, inviteUrl and status indicating whether invite email was sent.",
        "responses": {
          "200": {
            "description": "Returns an array of users with details about assessment assignment",
            "schema": {
              "type": "object",
              "properties": {
                "assessmentInvitations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AssessmentAssignResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "413": {
            "description": "Too many users to be handled per request. Please split the request into small ones and request multiple times."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/tournaments": {
      "x-swagger-router-controller": "tournaments",
      "get": {
        "operationId": "TournamentsGet",
        "summary": "Get Tournaments",
        "tags": [
          "Tournaments"
        ],
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Tournament Name",
            "name": "name",
            "description": "Tournament name",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Start Date",
            "name": "startdate",
            "description": "Only return tournaments that start on or after the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": " End Date",
            "name": "enddate",
            "description": "Only return tournaments that finish on or before the given time. time: YYYY-MM-DDTHH:mm:ss.SSSZ",
            "type": "string",
            "format": "date-time",
            "required": false
          }
        ],
        "description": "This endpoint returns a list of tournaments in the company.",
        "responses": {
          "200": {
            "description": "Returns the tournament ids",
            "schema": {
              "type": "object",
              "title": "Tournament IDs",
              "properties": {
                "tournaments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Tournament"
                  }
                },
                "links": {
                  "description": "Related API pages and pagination details",
                  "type": "object",
                  "title": "Links",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages in the results",
                      "example": 10
                    },
                    "results_per_page": {
                      "type": "integer",
                      "description": "The maximum number of results in each page",
                      "example": 100
                    },
                    "next_page": {
                      "type": "integer",
                      "description": "The page number of the next page (if one exists)",
                      "example": 3
                    },
                    "prev_page": {
                      "type": "integer",
                      "description": "The page number of the previous page (if one exists)",
                      "example": 1
                    },
                    "total_results": {
                      "type": "integer",
                      "description": "The total number of the results",
                      "example": 513
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/tournaments/{tournament_id}/leaderboard": {
      "x-swagger-router-controller": "tournaments",
      "get": {
        "summary": "Get Tournament Leaderboard",
        "operationId": "TournamentGetLeaderboard",
        "parameters": [
          {
            "in": "path",
            "x-ms-summary": "Tournament ID",
            "name":"tournament_id",
            "description": "The tournament ID",
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "required": true
          },
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          }
        ],
        "tags": [
          "Tournaments"
        ],
        "description": "This endpoint returns the leaderboard for a single tournament. This includes all levels, challenges and stages that the developer participated in, with detailed metrics of each.",
        "responses": {
          "200": {
            "description": "Returns the detailed tournament data",
            "schema": {
              "type": "object",
              "title": "Tournament Data",
              "properties": {
                "leaderboard": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TournamentParticipant"
                  }
                },
                "links": {
                  "description": "Related API pages and pagination details",
                  "type": "object",
                  "title": "Links",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages in the results",
                      "example": 10
                    },
                    "results_per_page": {
                      "type": "integer",
                      "description": "The maximum number of results in each page",
                      "example": 100
                    },
                    "next_page": {
                      "type": "integer",
                      "description": "The page number of the next page (if one exists)",
                      "example": 3
                    },
                    "prev_page": {
                      "type": "integer",
                      "description": "The page number of the previous page (if one exists)",
                      "example": 1
                    },
                    "total_results": {
                      "type": "integer",
                      "description": "The total number of the results",
                      "example": 513
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tournaments/{tournament_id}/leaderboard/search": {
      "x-swagger-router-controller": "tournaments",
      "post": {
        "summary": "Search Tournament Leaderboard",
        "operationId": "TournamentSearchLeaderboard",
        "parameters": [
          {
            "in": "path",
            "x-ms-summary": "Tournament ID",
            "name":"tournament_id",
            "description": "The tournament ID",
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "required": true
          },
          {
            "in": "body",
            "name": "tournament_leaderboard_search",
            "description": "Tournament Leaderboard search filters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TournamentLeaderboardSearch"
            }
          }
        ],
        "tags": [
          "Tournaments"
        ],
        "description": "This endpoint returns the leaderboard for a single tournament. This includes all levels, challenges and stages that the developer participated in, with detailed metrics of each. This endpoint can also return the leaderboard over a report period (which may be 1, 7 or 30 days) or a given date range. Results can be filtered based on developer emails, developer tags and team names.",
        "responses": {
          "200": {
            "description": "Returns the detailed tournament participant data",
            "schema": {
              "type": "object",
              "properties": {
                "leaderboard": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TournamentParticipant"
                  }
                },
                "links": {
                  "description": "Related API pages and pagination details",
                  "type": "object",
                  "title": "Links",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages in the results",
                      "example": 10
                    },
                    "results_per_page": {
                      "type": "integer",
                      "description": "The maximum number of results in each page",
                      "example": 100
                    },
                    "next_page": {
                      "type": "integer",
                      "description": "The page number of the next page (if one exists)",
                      "example": 3
                    },
                    "prev_page": {
                      "type": "integer",
                      "description": "The page number of the previous page (if one exists)",
                      "example": 1
                    },
                    "total_results": {
                      "type": "integer",
                      "description": "The total number of the results",
                      "example": 513
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/learning/progress": {
      "x-swagger-router-controller": "learning",
      "get": {
        "operationId": "LearningGetProgress",
        "summary": "Shows learning resources which have be completed, read or watched",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          }
        ],
        "tags": [
          "Learning"
        ],
        "description": "Learning description",
        "responses": {
          "200": {
            "description": "Returns the detailed learning progress data",
            "schema": {
              "type": "object",
              "title": "Resource Records",
              "properties": {
                "developers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ResourceRecord"
                  }
                },
                "links": {
                  "description": "Related API pages and pagination details",
                  "type": "object",
                  "title": "Links",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages in the results",
                      "example": 10
                    },
                    "results_per_page": {
                      "type": "integer",
                      "description": "The maximum number of results in each page",
                      "example": 100
                    },
                    "next_page": {
                      "type": "integer",
                      "description": "The page number of the next page (if one exists)",
                      "example": 3
                    },
                    "prev_page": {
                      "type": "integer",
                      "description": "The page number of the previous page (if one exists)",
                      "example": 1
                    },
                    "total_results": {
                      "type": "integer",
                      "description": "The total number of the results",
                      "example": 513
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/learning/resources": {
      "x-swagger-router-controller": "learning",
      "get": {
        "operationId": "LearningGetResources",
        "summary": "Get Resources",
        "tags": [
          "Learning"
        ],
        "description": "Learning resources list",
        "responses": {
          "200": {
            "description": "Returns the list of learning resources",
            "schema": {
              "type": "object",
              "properties": {
                "resources": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Resource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get Users",
        "description": "This is used to retrieve all user records. The response may be shaped by passing in a fields query parameter listing the\nattribute names to return.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of UserData",
            "schema": {
              "$ref": "#/definitions/UsersList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "413": {
            "$ref": "#/responses/RequestEntityTooLarge"
          }
        },
        "parameters": [
          {
            "description": "An array of fields. Only returns the attributes provided. Each attribute should be comma separated.",
            "in": "query",
            "x-ms-summary": "Fields",
            "name": "fields",
            "type": "string",
            "default": "[email,role,name,status,tags,team.name,preferredDevLanguages,invite-date,last-login-date]",
            "items": {
              "type": "string",
              "enum": [
                "email",
                "role",
                "name",
                "status",
                "tags",
                "team.name",
                "preferredDevLanguages",
                "invite-date",
                "last-login-date"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "description": "Returns the given page number of a paginated result set. Page sizes are 1000 records.",
            "type": "integer",
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "default": 1
          }
        ],
        "operationId": "UsersGet"
      },
      "post": {
        "summary": "Create a user",
        "description": "Creates a User.",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Send Invite",
            "name": "sendInvite",
            "description": "Flag to disable user invite and invite reminders.",
            "type": "boolean",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "description": "User object to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User Created",
            "examples": {
              "application/json": {
                "code": 100,
                "id": "4e3223d4-cbd2-484c-a262-b35193d553dd",
                "message": "User Created,",
                "statusCode": 201
              }
            },
            "schema": {
              "$ref": "#/definitions/UserCreated"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "413": {
            "$ref": "#/responses/RequestEntityTooLarge"
          }
        },
        "operationId": "UserCreate"
      }
    },
    "/users/search": {
      "post": {
        "summary": "Search Users",
        "description": "This is used to retrieve all user records. The response may be shaped by passing in a fields query parameter listing the\nattribute names to return. Filter is achieved by passing the filter criteria through the body.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of UserData",
            "schema": {
              "$ref": "#/definitions/UsersList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "413": {
            "$ref": "#/responses/RequestEntityTooLarge"
          }
        },
        "parameters": [
          {
            "description": "An array of fields. Only returns the attributes provided. Each attribute should be comma separated.",
            "in": "query",
            "x-ms-summary": "Fields",
            "name": "fields",
            "type": "string",
            "default": "[email, role, name, status, tags, team.name, preferredDevLanguages, invite-date, last-login-date]"
          },
          {
            "description": "Returns the given page number of a paginated result set. Page sizes are 1000 records.",
            "type": "integer",
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "default": 1
          },
          {
            "in": "body",
            "name": "body",
            "description": "User object to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSearchParamBody"
            }
          }
        ],
        "operationId": "UserSearch"
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get User",
        "description": "This is used to retrieve a single user record. The response may be shaped by passing in a fields query parameter listing the attribute names to return.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Returns a UserData",
            "schema": {
              "$ref": "#/definitions/UserData"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "413": {
            "$ref": "#/responses/RequestEntityTooLarge"
          }
        },
        "parameters": [
          {
            "type": "string",
            "in": "path",
            "x-ms-summary": "ID",
            "name":"id",
            "required": true,
            "description": "The user resource ID."
          },
          {
            "description": "Used to classify the type of user ID in the URL.",
            "enum": [
              "email"
            ],
            "type": "string",
            "in": "query",
            "x-ms-summary": "ID Type",
            "name": "idtype",
            "required": false
          },
          {
            "description": "An array of fields. Only returns the attributes specified in the Filter. Each attribute should be comma separated.",
            "in": "query",
            "x-ms-summary": "Fields",
            "name": "fields",
            "type": "string",
            "default": "[email, role, name, status, tags, team.name, preferredDevLanguages, invite-date, last-login-date]"
          }
        ],
        "operationId": "UserGet"
      },
      "delete": {
        "summary": "Delete User",
        "description": "Deletes the user referenced by the given ID.",
        "parameters": [
          {
            "type": "string",
            "in": "path",
            "x-ms-summary": "ID",
            "name":"id",
            "format": "string",
            "required": true,
            "description": "The user resource ID."
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User Deleted",
            "schema": {
              "$ref": "#/definitions/UserDeleted"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "413": {
            "$ref": "#/responses/RequestEntityTooLarge"
          }
        },
        "operationId": "UserDelete"
      },
      "patch": {
        "summary": "Update User",
        "description": "Updates a user with the given data. Tags will be replaced.",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "type": "string",
            "in": "path",
            "x-ms-summary": "ID",
            "name":"id",
            "format": "string",
            "required": true,
            "description": "The user resource ID."
          },
          {
            "description": "Used to disable the change of email notification sent to user.",
            "type": "boolean",
            "in": "query",
            "x-ms-summary": "Skip Notify If SSO",
            "name": "skipNotifyIfSso",
            "required": false
          },
          {
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            },
            "in": "body",
            "name": "body",
            "description": "Updates resource with the provided values",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User Updated",
            "schema": {
              "$ref": "#/definitions/UserUpdated"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "413": {
            "$ref": "#/responses/RequestEntityTooLarge"
          }
        },
        "operationId": "UserUpdate"
      }
    },
    "/learning/progress/search": {
      "x-swagger-router-controller": "learning",
      "post": {
        "summary": "Search Learning Progress",
        "operationId": "LearningSearchProgress",
        "parameters": [
          {
            "in": "body",
            "name": "learning_progress_search",
            "description": "learning progress search filters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LearningProgressSearch"
            }
          }
        ],
        "tags": [
          "Learning"
        ],
        "description": "Learning description Filters - users, teams and tags",
        "responses": {
          "200": {
            "description": "Returns the detailed learning progress data",
            "schema": {
              "type": "object",
              "properties": {
                "developers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ResourceRecord"
                  }
                },
                "links": {
                  "description": "Related API pages and pagination details",
                  "type": "object",
                  "title": "Links",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages in the results",
                      "example": 10
                    },
                    "results_per_page": {
                      "type": "integer",
                      "description": "The maximum number of results in each page",
                      "example": 100
                    },
                    "next_page": {
                      "type": "integer",
                      "description": "The page number of the next page (if one exists)",
                      "example": 3
                    },
                    "prev_page": {
                      "type": "integer",
                      "description": "The page number of the previous page (if one exists)",
                      "example": 1
                    },
                    "total_results": {
                      "type": "integer",
                      "description": "The total number of the results",
                      "example": 513
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/metrics/time-spent": {
      "x-swagger-router-controller": "metrics",
      "get": {
        "summary": "Get time spent",
        "operationId": "TimeGetSpent",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "ID",
            "name": "id",
            "description": "Filter results based on user Id in UUID format",
            "type": "string"
          },
          {
            "in": "query",
            "x-ms-summary": "Email",
            "name": "email",
            "description": "Filter results based on email",
            "type": "string"
          },
          {
            "in": "query",
            "x-ms-summary": "Tags",
            "name": "tags",
            "description": "Filter results base to show users with the tags. Specified tags are seperated by commas and uses OR logic to filter results.",
            "type": "string"
          },
          {
            "in": "query",
            "x-ms-summary": "Team",
            "name": "team",
            "type": "string",
            "description": "Filter results to show users belong to specified team"
          },
          {
            "in": "query",
            "x-ms-summary": "Start Date",
            "name": "startdate",
            "type": "string",
            "format": "date-time",
            "description": "Filter results to include results from start of day. Date format 'YYYY-MM-DD'. In UTC"
          },
          {
            "in": "query",
            "x-ms-summary": " End Date",
            "name": "enddate",
            "type": "string",
            "format": "date-time",
            "description": "Filter results to including all results till end of day. Date format 'YYYY-MM-DD'. In UTC"
          }
        ],
        "tags": [
          "Metrics"
        ],
        "description": "Time spent on the platform across Assessments, Learning, Tournaments and Training.",
        "responses": {
          "200": {
            "description": "Returns list of users with logs of their time-spent per activity.",
            "schema": {
              "type": "object",
              "properties": {
                "users": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UsersTimeSpent"
                  }
                },
                "links": {
                  "description": "Related API pages and pagination details",
                  "type": "object",
                  "title": "Links",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages in the results",
                      "example": 10
                    },
                    "results_per_page": {
                      "type": "integer",
                      "description": "The maximum number of results in each page",
                      "example": 100
                    },
                    "next_page": {
                      "type": "integer",
                      "description": "The page number of the next page (if one exists)",
                      "example": 3
                    },
                    "prev_page": {
                      "type": "integer",
                      "description": "The page number of the previous page (if one exists)",
                      "example": 1
                    },
                    "total_results": {
                      "type": "integer",
                      "description": "The total number of the results",
                      "example": 513
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "Invalid request parameters"
          }
        }
      }
    },
    "/metrics/activity-top-performers": {
      "x-swagger-router-controller": "metrics",
      "get": {
        "summary": "Get Activity Top Performers",
        "operationId": "ActivityGetTopPerform",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Report Period",
            "name": "report_period",
            "description": "The number of days over which to view the changes in statistics",
            "type": "integer",
            "required": false,
            "enum": [
              1,
              7,
              30
            ]
          },
          {
            "in": "query",
            "x-ms-summary": "Number of Users",
            "name": "num_users",
            "description": "The number of top performers to be returned",
            "type": "integer",
            "required": false,
            "default": 10
          },
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Tags",
            "name": "tags",
            "description": "Filter results to show top peformers for the specified tags. Specified tags are seperated by commas and uses OR logic to filter results.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Team",
            "name": "team",
            "type": "string",
            "description": "Filter results to show top performers for the given team"
          },
          {
            "in": "query",
            "x-ms-summary": "Start Time",
            "name": "starttime",
            "type": "string",
            "format": "date-time",
            "description": "Includes points from progress completed on or after the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ"
          },
          {
            "in": "query",
            "x-ms-summary": "End Time",
            "name": "endtime",
            "type": "string",
            "format": "date-time",
            "description": "Include points from progress completed on or before the given time. Format: YYYY-MM-DDTHH:mm:ss.SSSZ"
          }
        ],
        "tags": [
          "Metrics"
        ],
        "description": "This is used to retrieve list of top performing users.",
        "responses": {
          "200": {
            "description": "List of top performing users.",
            "schema": {
              "type": "object",
              "properties": {
                "schema": {
                  "$ref": "#/definitions/TopPerformers"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "Invalid request parameters."
          }
        }
      }
    },
    "/teams": {
      "x-swagger-router-controller": "teams",
      "get": {
        "summary": "Get Teams",
        "operationId": "TeamsGet",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "x-ms-summary": "Team Name",
            "name": "name",
            "description": "Team name",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Teams"
        ],
        "description": "This endpoint will return a list of Team objects which contain a range of datapoints related to teams. This includes team IDs, which may be used in conjunction with the other team API endpoints.",
        "responses": {
          "200": {
            "description": "Returns an array of Team objects",
            "schema": {
              "type": "object",
              "title": "Teams",
              "properties": {
                "teams": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TeamDetails"
                  }
                },
                "links": {
                  "description": "Related API pages and pagination details",
                  "type": "object",
                  "title": "Links",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages in the results",
                      "example": 10
                    },
                    "results_per_page": {
                      "type": "integer",
                      "description": "The maximum number of results in each page",
                      "example": 100
                    },
                    "next_page": {
                      "type": "integer",
                      "description": "The page number of the next page (if one exists)",
                      "example": 3
                    },
                    "prev_page": {
                      "type": "integer",
                      "description": "The page number of the previous page (if one exists)",
                      "example": 1
                    },
                    "total_results": {
                      "type": "integer",
                      "description": "The total number of the results",
                      "example": 513
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/team": {
      "x-swagger-router-controller": "teams",
      "post": {
        "summary": "Create a team",
        "operationId": "TeamCreate",
        "parameters": [
          {
            "in": "body",
            "name": "team_create",
            "description": "Properties to create team with.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamCreate"
            }
          }
        ],
        "tags": [
          "Teams"
        ],
        "description": "This is used to create a team.",
        "responses": {
          "200": {
            "description": "Team create.",
            "schema": {
              "$ref": "#/definitions/TeamDetails"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "Invalid request parameters."
          }
        }
      }
    },
    "/team/{team_id}": {
      "x-swagger-router-controller": "teams",
      "get": {
        "summary": "Get team details",
        "operationId": "TeamGetDetails",
        "parameters": [
          {
            "in": "path",
            "x-ms-summary": "Team ID",
            "name":"team_id",
            "description": "Team ID",
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "required": true
          }
        ],
        "tags": [
          "Teams"
        ],
        "description": "This is used to get details of a team.",
        "responses": {
          "200": {
            "description": "Team details.",
            "schema": {
              "$ref": "#/definitions/TeamDetails"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "Invalid request parameters."
          }
        }
      },
      "delete": {
        "summary": "Delete team",
        "operationId": "TeamDelete",
        "parameters": [
          {
            "in": "path",
            "x-ms-summary": "Team ID",
            "name":"team_id",
            "description": "Team ID",
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "required": true
          }
        ],
        "tags": [
          "Teams"
        ],
        "description": "This is used to delete a team.",
        "responses": {
          "200": {
            "description": "Delete team response.",
            "schema": {
              "$ref": "#/definitions/TeamDeleteResponse"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "Invalid request parameters."
          }
        }
      },
      "patch": {
        "summary": "Update team details",
        "operationId": "TeamUpdate",
        "parameters": [
          {
            "in": "path",
            "x-ms-summary": "Team ID",
            "name":"team_id",
            "description": "Team ID",
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "required": true
          },
          {
            "in": "body",
            "name": "team_update",
            "description": "Team properties to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamUpdate"
            }
          }
        ],
        "tags": [
          "Teams"
        ],
        "description": "This is used to update details of a team.",
        "responses": {
          "200": {
            "description": "Updated Team In Response.",
            "schema": {
              "$ref": "#/definitions/TeamDetails"
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "Invalid request parameters."
          }
        }
      }
    },
    "/courses": {
      "x-swagger-router-controller": "courses",
      "get": {
        "operationId": "CoursesGet",
        "summary": "Get all courses",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          }
        ],
        "tags": [
          "Courses"
        ],
        "description": "This endpoint will return a list of Course objects which contain a range of datapoints related to courses. This includes course IDs, which may be used in conjunction with the other course API endpoints.",
        "responses": {
          "200": {
            "description": "Returns an array of Course objects",
            "schema": {
              "type": "object",
              "title": "Courses",
              "properties": {
                "courses": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Course"
                  }
                },
                "links": {
                  "description": "Related API pages and pagination details",
                  "type": "object",
                  "title": "Links",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages in the results",
                      "example": 10
                    },
                    "results_per_page": {
                      "type": "integer",
                      "description": "The maximum number of results in each page",
                      "example": 100
                    },
                    "next_page": {
                      "type": "integer",
                      "description": "The page number of the next page (if one exists)",
                      "example": 3
                    },
                    "prev_page": {
                      "type": "integer",
                      "description": "The page number of the previous page (if one exists)",
                      "example": 1
                    },
                    "total_results": {
                      "type": "integer",
                      "description": "The total number of the results",
                      "example": 513
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/courses/{course_id}/developers-progress": {
      "x-swagger-router-controller": "courses",
      "get": {
        "operationId": "CourseGetDevelopersProgress",
        "summary": "Get progress of all developers for the course",
        "parameters": [
          {
            "in": "path",
            "x-ms-summary": "Course ID",
            "name":"course_id",
            "description": "Course ID",
            "type": "string",
            "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
            "required": true
          },
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          }
        ],
        "tags": [
          "Courses"
        ],
        "description": "This endpoint will return the progress of all developers for the specified course.",
        "responses": {
          "200": {
            "description": "Returns an array of developer progress information",
            "schema": {
              "type": "object",
              "title": "Courses",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseDeveloperProgressEntry"
                  }
                },
                "links": {
                  "description": "Related API pages and pagination details",
                  "type": "object",
                  "title": "Links",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages in the results",
                      "example": 10
                    },
                    "results_per_page": {
                      "type": "integer",
                      "description": "The maximum number of results in each page",
                      "example": 100
                    },
                    "next_page": {
                      "type": "integer",
                      "description": "The page number of the next page (if one exists)",
                      "example": 3
                    },
                    "prev_page": {
                      "type": "integer",
                      "description": "The page number of the previous page (if one exists)",
                      "example": 1
                    },
                    "total_results": {
                      "type": "integer",
                      "description": "The total number of the results",
                      "example": 513
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    },
    "/courses/developers-progress/search": {
      "x-swagger-router-controller": "courses",
      "post": {
        "summary": "Search course developers progress",
        "operationId": "DeveloperSearchProgress",
        "parameters": [
          {
            "in": "query",
            "x-ms-summary": "Page",
            "name": "page",
            "description": "The page number of results",
            "type": "integer",
            "required": false
          },
          {
            "in": "body",
            "name": "course_developer_progress_search",
            "description": "Developer progress search filters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CourseDeveloperProgressSearch"
            }
          }
        ],
        "tags": [
          "Courses"
        ],
        "description": "This endpoint returns the course progress of all developers within the organisation.",
        "responses": {
          "200": {
            "description": "Returns an array of developer progress entries",
            "schema": {
              "type": "object",
              "title": "Courses",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "description": "This entry represents a developer course progress",
                    "required": [
                      "user_id",
                      "status",
                      "accuracy",
                      "confidence",
                      "minutes_spent",
                      "progress",
                      "languages"
                    ],
                    "type": "object",
                    "title": "Developer Course Progress Entry",
                    "properties": {
                      "user_id": {
                        "description": "User resource ID",
                        "type": "string",
                        "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
                        "example": "625d95c8-73b7-4a31-8bb6-84bdfe0253b1"
                      },
                      "status": {
                        "description": "Course status",
                        "type": "string",
                        "enum": [
                          "Invited",
                          "In Progress",
                          "Completed"
                        ],
                        "example": "In Progress"
                      },
                      "accuracy": {
                        "description": "The percentage of correct attempts",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                      },
                      "confidence": {
                        "description": "The ratio of hits used to available hints",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                      },
                      "minutes_spent": {
                        "description": "The total time in mimnutes that the user spent on the course",
                        "type": "integer",
                        "minimum": 0
                      },
                      "first_completed_date": {
                        "description": "The date the first course language was completed",
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-11-20T04:57:47.715Z"
                      },
                      "first_enrolled_date": {
                        "description": "The date the first course language was enrolled in",
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-11-17T04:57:47.715Z"
                      },
                      "progress": {
                        "description": "The progress of the course",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                      },
                      "languages": {
                        "description": "List of languages for the course",
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/CourseDeveloperProgressLanguageEntry"
                        }
                      },
                      "invites": {
                        "description": "List of invites and reminders",
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/CourseDeveloperProgressInviteEntry"
                        },
                        "example": [
                          {
                            "type": "invite",
                            "send": "2020-11-01T05:07:20.714Z"
                          },
                          {
                            "type": "reminder",
                            "send": "2020-11-08T05:07:20.714Z"
                          }
                        ]
                      }
                    }
                  }
                },
                "links": {
                  "description": "Related API pages and pagination details",
                  "type": "object",
                  "title": "Links",
                  "properties": {
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages in the results",
                      "example": 10
                    },
                    "results_per_page": {
                      "type": "integer",
                      "description": "The maximum number of results in each page",
                      "example": 100
                    },
                    "next_page": {
                      "type": "integer",
                      "description": "The page number of the next page (if one exists)",
                      "example": 3
                    },
                    "prev_page": {
                      "type": "integer",
                      "description": "The page number of the previous page (if one exists)",
                      "example": 1
                    },
                    "total_results": {
                      "type": "integer",
                      "description": "The total number of the results",
                      "example": 513
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "422": {
            "description": "An invalid page parameter was provided (either a number greater than the total number of pages or less than 1)."
          }
        }
      }
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://www.securecodewarrior.com/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.securecodewarrior.com/trust/privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "IT Operations"
    }
  ]
}
