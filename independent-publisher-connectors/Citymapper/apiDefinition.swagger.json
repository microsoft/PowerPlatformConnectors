{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Citymapper",
    "description": "Citymapper allows you to add journey planning and turn-by-turn navigation to your products. Our services are powered by our industry-leading global transport data and custom routing algorithms trained on billions of trips.",
    "contact": {
      "name": "Troy Taylor",
      "url": "https://www.hitachisolutions.com",
      "email": "ttaylor@hitachisolutions.com"
    }
  },
  "host": "api.external.citymapper.com",
  "basePath": "/api/1/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/traveltimes": {
      "get": {
        "description": "Determines the travel time in various modes of travel between the given two points at the time the request is made.",
        "summary": "Get travel times between two locations",
        "operationId": "TravelTime",
        "deprecated": false,
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "x-ms-summary": "Start",
            "required": true,
            "type": "string",
            "description": "The geographical start point of the trip, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 digits of precision will be used."
          },
          {
            "name": "end",
            "in": "query",
            "x-ms-summary": "End",
            "required": true,
            "type": "string",
            "description": "The geographical end point of the trip, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 digits of precision will be used."
          },
          {
            "name": "traveltime_types",
            "in": "query",
            "x-ms-summary": "Travel Types",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "walk",
                "transit",
                "bike",
                "scooter",
                "motorscooter",
                "car"
              ]
            },
            "description": "A comma-separated list of different travel time types to attempt to request. Each request value corresponds to a particular field in the response (response fields will only be present when Citymapper was able to calculate a time for that travel time type). | value | response property | description | | ----- | ----------------- | ------------| | walk | walk_travel_time_minutes | Walking | | transit | transit_time_minutes | Public transit travel | | bike | bike_time_minutes | Bicycle travel (riding the entire way) | | scooter | scooter_time_minutes | Standing e-scooter travel (riding the entire way) | | motorscooter | motorscooter_time_minutes | Seated motor scooter travel (riding the entire way) | | car | car_time_minutes | Car travel (riding the entire way). Available on Enterprise plans only | When this field is omitted or empty, a default value of 'walk,transit' will be used."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "walk_travel_time_minutes": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Walk Time",
                  "description": "Estimated walking time between the two given points in minutes."
                },
                "transit_time_minutes": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Transit Time",
                  "description": "Estimated public transit travel time between the two given points in minutes."
                },
                "bike_time_minutes": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Bike Time",
                  "description": "Estimated bicycle travel time between two points in minutes."
                },
                "scooter_time_minutes": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Scooter Time",
                  "description": "Estimated e-scooter travel time between two points in minutes."
                },
                "motorscooter_time_minutes": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Motorscooter Time",
                  "description": "Estimated motor scooter travel time between two points in minutes."
                },
                "car_time_minutes": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Drive Time",
                  "description": "Estimated car travel time between two points in minutes."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "description": "Rate Limited",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/directions/scooterride": {
      "get": {
        "description": "Gets a scooter route between two points, providing enough information to render it on a map, along with a duration estimate. (These results are optimized for small battery-powered scooters that the rider stands on.) This call assumes that the rider has a scooter at the 'start' point, and provides an e-scooter route from there to the 'end' point if both are within Citymapper's supported areas. The resulting route should contain a single scooter leg, though the 'path_annotations' property of the leg may indicate sections during which the user should walk beside the scooter. This call does not incorporate any information about scooter operators' coverage or parking areas, but other service calls may be available to do so. Successful responses (HTTP code '200') will consume one 'Scooter Route' credit (or one 'Scooter Reroute' credit if 'reroute_signature' is used) for each HTTP response. Unsuccessful calls will not consume any credits.",
        "summary": "Get e-scooter directions between two points",
        "operationId": "ScooterRideDirections",
        "deprecated": false,
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "x-ms-summary": "Start",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical start of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "end",
            "in": "query",
            "x-ms-summary": "End",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical end of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "language",
            "in": "query",
            "x-ms-summary": "Language",
            "required": false,
            "type": "string",
            "description": "An IETF BCP 47 language tag that indicates the end-user's language preference.  When provided, the response will contain a 'language' property that indicates the language used for any localizable elements of the response (such as turning instructions). This language will be a best-effort attempt to fulfill the expressed preference, but it may contain a value that wasn't expressed in the request (this will generally be 'en-US' as a fallback). Note that language preference will generally only affect Citymapper-generated content such as turning instructions. External content such as Stop names and Status descriptions will generally be passed through in their original language."
          },
          {
            "name": "reroute_signature",
            "in": "query",
            "x-ms-summary": "Reroute Signature",
            "required": false,
            "type": "string",
            "description": "When rerouting (requesting an update to a previous response that accounts for the user's updated location), this value should be set to the 'signature' provided in the original Route. This allows for more efficient determination of the updated Route. This value must be URL-encoded. When providing this parameter, the 'current_location' (when applicable) or 'start' location should be set to the user's latest location. When this parameter is included, Citymapper may not return results in cases where the request differs significantly from the original, for instance if the 'end' location is different, or if more than 1 hour has passed since the original request."
          },
          {
            "name": "start_bearing",
            "in": "query",
            "x-ms-summary": "Start Bearing",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "An angle clockwise from North between 0 and 359, where North is 0 and East is 90. This bearing is used to influence the initial instruction text and/or routing, most-commonly to avoid the user from being asked to make a u-turn, if continuing on their current bearing gives a comparable route. This should be provided only if you wish to influence the initial direction of travel for the route."
          },
          {
            "name": "past_loc_coords",
            "in": "query",
            "x-ms-summary": "Past Locations",
            "required": false,
            "type": "string",
            "description": "Optional parameter to improve rerouting behavior. The Coordinates of up to 10 of the past locations of the user as a comma separated list. Coordinates must be in WGS84 'latitude,longitude' format. Coordinates must be in decimal, and only the first 6 digits of precision will be used. Must be chronologically ordered, most recent last. 'past_loc_ages' and 'past_loc_accuracies' must be provided alongside. The server will only consider a maximum of 10 locations, if more than 10 locations are provided the least recent locations will be ignored. The server is likely to ignore any locations older than 30 seconds or any that are less than 1 second apart."
          },
          {
            "name": "past_loc_ages",
            "in": "query",
            "x-ms-summary": "Past Location Ages",
            "required": false,
            "type": "string",
            "description": "Optional parameter to improve rerouting behavior. The Ages of up to 10 of the past locations of the user as a comma separated list. Ages must be in integer seconds since the current location. Must be chronologically ordered, most recent last. 'past_loc_coords' and 'past_loc_accuracies' must be provided alongside. The server will only consider a maximum of 10 locations, if more than 10 locations are provided the least recent locations will be ignored. The server is likely to ignore any locations older than 30 seconds or any that are less than 1 second apart."
          },
          {
            "name": "past_loc_accuracies",
            "in": "query",
            "x-ms-summary": "Past Location Accuracies",
            "required": false,
            "type": "string",
            "description": "Optional parameter to improve rerouting behavior. The GPS Accuracies of up to 10 of the past locations of the user as a comma separated list. Accuracies must be in integer meters. Must be chronologically ordered, most recent last. 'past_loc_ages' and 'past_loc_coords' must be provided alongside. The server will only consider a maximum of 10 locations, if more than 10 locations are provided the least recent locations will be ignored. The server is likely to ignore any locations older than 30 seconds or any that are less than 1 second apart."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routes": {
                  "type": "array",
                  "items": {
                    "title": "Route",
                    "type": "object",
                    "properties": {
                      "start": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "end": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "distance_meters": {
                        "title": "Distance in Meters",
                        "description": "The overall distance of the entire Route, in meters.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_seconds": {
                        "title": "Duration",
                        "description": "The overall estimated time to traverse the entire Route, in seconds, based on the selected vehicle or departure in the response.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_accuracy": {
                        "title": "Duration Accuracy",
                        "description": "Citymapper's assessment of how the accuracy level of 'duration_seconds' should be displayed to the user. This is largely based on the 'type' of the Departures used for times, but it involves additional heuristics developed over time for the Citymapper app. When this field is not provided, the value 'scheduled' should be used. | value | description | | ----- | ----------- | | estimated | A duration that should be considered approximate, as its calculation involved more uncertainty than usual. This is the lowest accuracy. | | scheduled | A normal duration, typically based on published timetable information. | | live | A duration largely based on real-time/live departure information. This is the highest accuracy. |",
                        "type": "string",
                        "enum": [
                          "estimated",
                          "scheduled",
                          "live"
                        ],
                        "default": "scheduled"
                      },
                      "price": {
                        "title": "Price",
                        "description": "Represents a monetary amount. This may either be  - An exact amount, represented by 'amount'. Formatted as e.g. '$31.50'  - A range of values between 'amount_range_minimum' and 'amount_range_maximum'. Formatted as e.g. '$318-22'  - A minimum price where the maximum is not known, represented by 'amount_range_minimum' but no 'amount_range_maximum'. Formatted as e.g. '$318+'",
                        "type": "object",
                        "properties": {
                          "formatted": {
                            "title": "Formatted",
                            "description": "The given price as a formatted string. By default, this is in the native currency format of the region where the route occurs.",
                            "type": "string"
                          },
                          "amount": {
                            "title": "Amount",
                            "description": "The price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_minimum": {
                            "title": "Amount Range Minimum",
                            "description": "If this Price represents a range of possible values, the minimum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_maximum": {
                            "title": "Amount range Maximum",
                            "description": "If this Price represents a range of possible values, the maximum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region. This may not be included if the range is open-ended",
                            "type": "string"
                          },
                          "currency": {
                            "title": "Currency",
                            "description": "The currency in which the price is given, in three-letter ISO 4217 form.",
                            "type": "string"
                          },
                          "demand_multipler": {
                            "title": "Demand Multiplier",
                            "description": "Indicates that prices are higher than usual because of demand, usually for Taxi (On-Demand) legs. May in rare cases be less than 1.0",
                            "type": "number",
                            "format": "float"
                          }
                        },
                        "required": [
                          "formatted"
                        ]
                      },
                      "emissions_grams_co2e": {
                        "title": "CO2e Emissions",
                        "description": "An estimate of the greenhouse gas emissions of the route, expressed in grams of carbon dioxide equivalent (CO2e).",
                        "type": "number",
                        "format": "float"
                      },
                      "legs": {
                        "title": "Legs",
                        "description": "Array of legs comprising the Route, in the order in which they should be traversed. Every valid route will have at least one.",
                        "type": "array",
                        "items": {
                          "title": "Leg",
                          "type": "object",
                          "properties": {
                            "travel_mode": {
                              "title": "Travel Mode",
                              "description": "The travel mode.",
                              "type": "string"
                            },
                            "duration_seconds": {
                              "title": "Duration",
                              "description": "The time required to traverse this leg, excluding any waiting or boarding time at the beginning. May be omitted in rare circumstances when the duration cannot be computed.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "title": "Path",
                              "description": "The geographic path that the leg traverses, as a series of WGS84 coordinates encoded in Google Polyline Format, with a decimal precision of 5 digits. For example, the value '_flyHbjPDZBTBNDJ' encodes the following series of (latitude, longitude) coordinates: '' [(51.51344, -0.08882), (51.51341, -0.08896), (51.51339, -0.08907), (51.51337, -0.08915), (51.51334, -0.08921)] ''",
                              "type": "string"
                            },
                            "instructions": {
                              "title": "Instructions",
                              "description": "This provides the list of turn instructions to guide the user through legs where the user needs to navigate, such as when walking or using a scooter or bike.",
                              "type": "array",
                              "items": {
                                "title": "Instruction",
                                "type": "object",
                                "properties": {
                                  "path_index": {
                                    "title": "Path Index",
                                    "description": "0-based index into the list of coordinates provided by the 'path' property of the leg. This indicates the location at which the instruction is to be followed, so it will be the location of the turn on the path, or the start or end of the leg.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "distance_meters": {
                                    "title": "Distance",
                                    "description": "The distance in meters of the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "time_seconds": {
                                    "title": "Time",
                                    "description": "The time in seconds that the user is expected to take to traverse the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "description_text": {
                                    "title": "Description",
                                    "description": "Plain-text description of the Instruction to the user.",
                                    "type": "string"
                                  },
                                  "description_format": {
                                    "title": "Description Format",
                                    "description": "Text format for rendering the Instruction with emphasized elements, where '{key}' indicates a part of the string that must be replaced with content defined by the entry corresponding to 'key' in 'description_format_replacements'. This allows the elements described by the replacements to be formatted differently by the client, if desired. Key strings will contain only the characters '[a-zA-Z0-9]'. '{ }' will not be nested, and the literal characters '{' and '}' are encoded by the escape sequences '\\{' and '\\}', respectively.",
                                    "type": "string"
                                  },
                                  "description_format_replacements": {
                                    "type": "array",
                                    "items": {
                                      "title": "DescriptionFormatReplacement",
                                      "type": "object",
                                      "properties": {
                                        "key": {
                                          "title": "Key",
                                          "description": "A key corresponding to a string enclosed in '{}' in 'description_format'.",
                                          "type": "string"
                                        },
                                        "text": {
                                          "title": "Text",
                                          "description": "The text to be used to replace the '{key}' substring in the 'description_format'.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "type": "string",
                                          "title": "Type",
                                          "description": "A value indicating what kind of real-world thing is being identified by this format replacement. This allows service clients to apply application-specific formatting if desired. | value | description | | ----- | ----------- | | street_name | The name of a street, road, or other way | | exit_number | The number of an exit, generally from a roundabout |",
                                          "enum": [
                                            "street_name",
                                            "exit_number"
                                          ]
                                        },
                                        "language": {
                                          "title": "Language",
                                          "description": "An IETF BCP 47 language tag that indicates what language the associated 'text' is in. Note that this can be different from the language of the surrounding description - this is most common when the replacement is a place-name in a local language whilst the description is in a different language.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "text"
                                      ]
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "title": "Type",
                                    "description": "Indicates the type of Instruction.",
                                    "enum": [
                                      "depart",
                                      "turn",
                                      "enter_roundabout",
                                      "exit_roundabout",
                                      "arrive"
                                    ]
                                  },
                                  "type_direction": {
                                    "type": "string",
                                    "title": "Type Direction",
                                    "description": "Indicates a direction that modifies this Instruction.",
                                    "enum": [
                                      "straight",
                                      "uturn",
                                      "left",
                                      "slight_left",
                                      "sharp_left",
                                      "right",
                                      "slight_right",
                                      "sharp_right"
                                    ]
                                  }
                                },
                                "required": [
                                  "path_index"
                                ]
                              }
                            }
                          },
                          "required": [
                            "travel_mode",
                            "path"
                          ]
                        },
                        "minItems": 1
                      },
                      "route_departure_time": {
                        "title": "Departure Time",
                        "description": "The time at which Citymapper thinks the user will set out on this route, given available departure information. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_arrival_time": {
                        "title": "Arrival Time",
                        "description": "The time at which Citymapper thinks the user will arrive at the end of this route, given available departure information and expected travel speed. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_metadata": {
                        "title": "Route Metadata",
                        "description": "Any metadata associated with the Route.",
                        "type": "object",
                        "properties": {
                          "groups": {
                            "type": "array",
                            "items": {
                              "title": "Route Group",
                              "description": "Group associated with specific routes of the same scenario.",
                              "type": "object",
                              "properties": {
                                "group_id": {
                                  "title": "Group ID",
                                  "description": "ID of a group a route contains in.",
                                  "type": "string"
                                },
                                "group_name": {
                                  "title": "Group",
                                  "description": "Localized name of a route group, e.g. 'Transit' or 'Le metro'.",
                                  "type": "string"
                                },
                                "route_position": {
                                  "title": "Route Position",
                                  "description": "A zero-based position of a route within specific group.",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              },
                              "required": [
                                "group_id",
                                "route_position"
                              ]
                            }
                          },
                          "profile_name": {
                            "title": "Profile Name",
                            "description": "Human-readable localized name of the 'profile' identifier. ",
                            "type": "string"
                          }
                        }
                      },
                      "profile": {
                        "title": "Profile",
                        "description": "Indicates which routing 'profile' was used to calculate this Route. For example, a response from a bike routing endpoint may return multiple routes, one with a 'quiet' profile and another with a 'fast' profile. Note that new values can be added at any time, so any code parsing this field must be able to handle unexpected values. This value will match the 'profiles' request parameter on endpoints that support selecting specific routing profiles. This value is intended to be machine readable only. For a profile name to show to a user, use the 'profile_name' in the 'route_metadata' object instead.",
                        "type": "string"
                      },
                      "signature": {
                        "title": "Signature",
                        "description": "A value to be passed back to the server in subsequent calls to refer to this route (for instance, when requesting live departure information via 'service/1/live/routeupdates'). It must be treated as an opaque value.",
                        "type": "string"
                      },
                      "requested_time": {
                        "title": "Requested Time",
                        "description": "Contains the 'time' parameter used as a departure or arrival time constraint when getting directions, if applicable.",
                        "type": "string"
                      },
                      "requested_time_type": {
                        "title": "Requested Time Type",
                        "description": "Contains the 'time_type' parameter used to determine how the 'time' will be used to constrain the directions that are returned, if applicable. If no parameter was given in the request, will return the 'time_type' used by default to plan the Route.",
                        "type": "string",
                        "enum": [
                          "arrive",
                          "depart",
                          "depart_approximate"
                        ]
                      }
                    },
                    "required": [
                      "start",
                      "end",
                      "legs",
                      "signature"
                    ]
                  }
                },
                "language": {
                  "title": "Language",
                  "description": "A IETF BCP 47 language tag that indicates the language used to encode localizable content, such as turning instructions, in this response. This will reflect a best-effort attempt to fulfill any language preference expressed by the 'language' request parameter, or 'en-US' as default.",
                  "type": "string"
                }
              },
              "required": [
                "routes"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "title": "ErrorResponse",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                },
                "error_code": {
                  "title": "Error Code",
                  "description": "A string code that can be used for triggering error handling code paths. Only present in responses with non-200 HTTP code. Note new values may be added at any time. | value | description | | ----- | ----------- | | no-results | The request was in Citymapper's coverage regions, but no results were found. | | coverage-region | The request is outside of Citymapper's coverage regions, or spans disconnected regions. | | coverage-start | The request's 'start' location falls outside of Citymapper's coverage regions. | | coverage-end | The request's 'end' location falls outside of Citymapper's coverage regions. | | coverage-distance | The request's 'start' and 'end' locations are further apart than the maximum allowed for this service. | | signature | A signature included in the request is invalid for use with this service. | | unknown-brand | The request references an unknown Brand ID. | | unknown-scenario | The request references an unknown Scenario ID. | | request-format | The request was semantically malformed. The 'message' field may contain additional details. | | configuration-required | The request can't be completed because of missing configuration. The 'message' should give details. | | deprecated | The request was made to a deprecated service. |",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "description": "Rate Limited",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/directions/scooter": {
      "get": {
        "description": "Gets a hired e-scooter route between two points, including any initial and final walks. The resulting route provides enough information to render it on a map, along with a duration estimate. These results are optimized for small battery-powered scooters that the rider stands on. This call can be used in several different ways:  **Use any scooter of the specified Brand** This is the simplest call, only requiring 'start', 'end', and 'brand_id'. Citymapper assumes that the user is at the 'start' point, and chooses a scooter of the specified Brand, if possible. **Use a scooter at a specified location** By adding 'original_vehicle_location' to 'start', 'end', and 'brand_id', Citymapper plans a route that assumes the scooter is at the given location. **Update a route in progress** In order to retrieve an updated route that includes rerouting from the user's current location if they've diverged from the planned Route, the caller can add the 'current_location' and 'ride_state' properties, which indicates which leg of the resulting route should be rerouted around the user's 'current_location'.",
        "summary": "Get hired e-scooter directions between two points",
        "operationId": "ScooterDirections",
        "deprecated": false,
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "x-ms-summary": "Start",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical start of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "end",
            "in": "query",
            "x-ms-summary": "End",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical end of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "brand_id",
            "in": "query",
            "x-ms-summary": "Brand ID",
            "required": true,
            "type": "string",
            "description": "The ID of the Brand of e-scooters to use for this route. This is necessary in order to determine the location of available scooters, along with any associated coverage and parking restrictions."
          },
          {
            "name": "ride_state",
            "in": "query",
            "x-ms-summary": "State",
            "required": false,
            "enum": [
              "walking_to_vehicle",
              "riding",
              "walking_to_end"
            ],
            "type": "string",
            "description": "Indicates where along the route the user is. If omitted, 'walking_to_vehicle' is used. This property along with 'current_location' allows the retrieval of an updated route that reflects the user's current progress through it. | value | description | | ----- | ----------- | | walking_to_vehicle | Indicates that the user is walking to collect the vehicle | | riding | Indicates that the user is riding the vehicle | | walking_to_end | Indicates that the user has left the vehicle and is walking to their destination |"
          },
          {
            "name": "current_location",
            "in": "query",
            "x-ms-summary": "Current Location",
            "required": false,
            "type": "string",
            "description": "The user's current location, in order to update the route based on the user's location. Provided in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 digits of precision will be used. This parameter is used to get an updated route that reflects the user's actual location if they diverge from the path given in the Route. If this is provided, the returned route will contain this location. Which leg of the route will contain this location is decided by the value of the 'ride_state' parameter."
          },
          {
            "name": "ride_start_location",
            "in": "query",
            "x-ms-summary": "Start Location",
            "required": false,
            "type": "string",
            "description": "The location of the vehicle to be used, at the beginning of the vehicle ride part of the user's trip along the Route. Provided in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 digits of precision will be used. This must be provided when 'ride_state' is 'riding' or 'walking_to_end'. If not provided when 'ride_state' is 'walking_to_vehicle' (or not specified), Citymapper will attempt to find the most appropriate vehicle that belongs to the specified 'brand_id'. For compatibility, 'original_vehicle_location' is an alias for this parameter"
          },
          {
            "name": "ride_end_location",
            "in": "query",
            "x-ms-summary": "End Location",
            "required": false,
            "type": "string",
            "description": "The location the vehicle was dropped off at the end of the vehicle ride part of the user's trip along the Route. Provided in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 digits of precision will be used. This must be provided when 'ride_state' is 'walking_to_end'. In all other states this parameter is ignored."
          },
          {
            "name": "language",
            "in": "query",
            "x-ms-summary": "Language",
            "required": false,
            "type": "string",
            "description": "An IETF BCP 47 language tag that indicates the end-user's language preference.  When provided, the response will contain a 'language' property that indicates the language used for any localizable elements of the response (such as turning instructions). This language will be a best-effort attempt to fulfill the expressed preference, but it may contain a value that wasn't expressed in the request (this will generally be 'en-US' as a fallback). Note that language preference will generally only affect Citymapper-generated content such as turning instructions. External content such as Stop names and Status descriptions will generally be passed through in their original language."
          },
          {
            "name": "reroute_signature",
            "in": "query",
            "x-ms-summary": "Reroute Signature",
            "required": false,
            "type": "string",
            "description": "When rerouting (requesting an update to a previous response that accounts for the user's updated location), this value should be set to the 'signature' provided in the original Route. This allows for more efficient determination of the updated Route. This value must be URL-encoded. When providing this parameter, the 'current_location' (when applicable) or 'start' location should be set to the user's latest location. When this parameter is included, Citymapper may not return results in cases where the request differs significantly from the original, for instance if the 'end' location is different, or if more than 1 hour has passed since the original request."
          },
          {
            "name": "start_bearing",
            "in": "query",
            "x-ms-summary": "Start Bearing",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "An angle clockwise from North between 0 and 359, where North is 0 and East is 90. This bearing is used to influence the initial instruction text and/or routing, most-commonly to avoid the user from being asked to make a u-turn, if continuing on their current bearing gives a comparable route. This should be provided only if you wish to influence the initial direction of travel for the route."
          },
          {
            "name": "past_loc_coords",
            "in": "query",
            "x-ms-summary": "Past Locations",
            "required": false,
            "type": "string",
            "description": "Optional parameter to improve rerouting behavior. The Coordinates of up to 10 of the past locations of the user as a comma separated list. Coordinates must be in WGS84 'latitude,longitude' format. Coordinates must be in decimal, and only the first 6 digits of precision will be used. Must be chronologically ordered, most recent last. 'past_loc_ages' and 'past_loc_accuracies' must be provided alongside. The server will only consider a maximum of 10 locations, if more than 10 locations are provided the least recent locations will be ignored. The server is likely to ignore any locations older than 30 seconds or any that are less than 1 second apart."
          },
          {
            "name": "past_loc_ages",
            "in": "query",
            "x-ms-summary": "Past Location Ages",
            "required": false,
            "type": "string",
            "description": "Optional parameter to improve rerouting behavior. The Ages of up to 10 of the past locations of the user as a comma separated list. Ages must be in integer seconds since the current location. Must be chronologically ordered, most recent last. 'past_loc_coords' and 'past_loc_accuracies' must be provided alongside. The server will only consider a maximum of 10 locations, if more than 10 locations are provided the least recent locations will be ignored. The server is likely to ignore any locations older than 30 seconds or any that are less than 1 second apart."
          },
          {
            "name": "past_loc_accuracies",
            "in": "query",
            "x-ms-summary": "Past Location Accuracies",
            "required": false,
            "type": "string",
            "description": "Optional parameter to improve rerouting behavior. The GPS Accuracies of up to 10 of the past locations of the user as a comma separated list. Accuracies must be in integer meters. Must be chronologically ordered, most recent last. 'past_loc_ages' and 'past_loc_coords' must be provided alongside. The server will only consider a maximum of 10 locations, if more than 10 locations are provided the least recent locations will be ignored. The server is likely to ignore any locations older than 30 seconds or any that are less than 1 second apart."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routes": {
                  "type": "array",
                  "items": {
                    "title": "Route",
                    "type": "object",
                    "properties": {
                      "start": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "end": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "distance_meters": {
                        "title": "Distance in Meters",
                        "description": "The overall distance of the entire Route, in meters.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_seconds": {
                        "title": "Duration",
                        "description": "The overall estimated time to traverse the entire Route, in seconds, based on the selected vehicle or departure in the response.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_accuracy": {
                        "title": "Duration Accuracy",
                        "description": "Citymapper's assessment of how the accuracy level of 'duration_seconds' should be displayed to the user. This is largely based on the 'type' of the Departures used for times, but it involves additional heuristics developed over time for the Citymapper app. When this field is not provided, the value 'scheduled' should be used. | value | description | | ----- | ----------- | | estimated | A duration that should be considered approximate, as its calculation involved more uncertainty than usual. This is the lowest accuracy. | | scheduled | A normal duration, typically based on published timetable information. | | live | A duration largely based on real-time/live departure information. This is the highest accuracy. |",
                        "type": "string",
                        "enum": [
                          "estimated",
                          "scheduled",
                          "live"
                        ],
                        "default": "scheduled"
                      },
                      "price": {
                        "title": "Price",
                        "description": "Represents a monetary amount. This may either be  - An exact amount, represented by 'amount'. Formatted as e.g. '$31.50'  - A range of values between 'amount_range_minimum' and 'amount_range_maximum'. Formatted as e.g. '$318-22'  - A minimum price where the maximum is not known, represented by 'amount_range_minimum' but no 'amount_range_maximum'. Formatted as e.g. '$318+'",
                        "type": "object",
                        "properties": {
                          "formatted": {
                            "title": "Formatted",
                            "description": "The given price as a formatted string. By default, this is in the native currency format of the region where the route occurs.",
                            "type": "string"
                          },
                          "amount": {
                            "title": "Amount",
                            "description": "The price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_minimum": {
                            "title": "Amount Range Minimum",
                            "description": "If this Price represents a range of possible values, the minimum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_maximum": {
                            "title": "Amount range Maximum",
                            "description": "If this Price represents a range of possible values, the maximum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region. This may not be included if the range is open-ended",
                            "type": "string"
                          },
                          "currency": {
                            "title": "Currency",
                            "description": "The currency in which the price is given, in three-letter ISO 4217 form.",
                            "type": "string"
                          },
                          "demand_multipler": {
                            "title": "Demand Multiplier",
                            "description": "Indicates that prices are higher than usual because of demand, usually for Taxi (On-Demand) legs. May in rare cases be less than 1.0",
                            "type": "number",
                            "format": "float"
                          }
                        },
                        "required": [
                          "formatted"
                        ]
                      },
                      "emissions_grams_co2e": {
                        "title": "CO2e Emissions",
                        "description": "An estimate of the greenhouse gas emissions of the route, expressed in grams of carbon dioxide equivalent (CO2e).",
                        "type": "number",
                        "format": "float"
                      },
                      "legs": {
                        "title": "Legs",
                        "description": "Array of legs comprising the Route, in the order in which they should be traversed. Every valid route will have at least one.",
                        "type": "array",
                        "items": {
                          "title": "Leg",
                          "type": "object",
                          "properties": {
                            "travel_mode": {
                              "title": "Travel Mode",
                              "description": "The travel mode.",
                              "type": "string"
                            },
                            "duration_seconds": {
                              "title": "Duration",
                              "description": "The time required to traverse this leg, excluding any waiting or boarding time at the beginning. May be omitted in rare circumstances when the duration cannot be computed.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "title": "Path",
                              "description": "The geographic path that the leg traverses, as a series of WGS84 coordinates encoded in Google Polyline Format, with a decimal precision of 5 digits. For example, the value '_flyHbjPDZBTBNDJ' encodes the following series of (latitude, longitude) coordinates: '' [(51.51344, -0.08882), (51.51341, -0.08896), (51.51339, -0.08907), (51.51337, -0.08915), (51.51334, -0.08921)] ''",
                              "type": "string"
                            },
                            "instructions": {
                              "title": "Instructions",
                              "description": "This provides the list of turn instructions to guide the user through legs where the user needs to navigate, such as when walking or using a scooter or bike.",
                              "type": "array",
                              "items": {
                                "title": "Instruction",
                                "type": "object",
                                "properties": {
                                  "path_index": {
                                    "title": "Path Index",
                                    "description": "0-based index into the list of coordinates provided by the 'path' property of the leg. This indicates the location at which the instruction is to be followed, so it will be the location of the turn on the path, or the start or end of the leg.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "distance_meters": {
                                    "title": "Distance",
                                    "description": "The distance in meters of the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "time_seconds": {
                                    "title": "Time",
                                    "description": "The time in seconds that the user is expected to take to traverse the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "description_text": {
                                    "title": "Description",
                                    "description": "Plain-text description of the Instruction to the user.",
                                    "type": "string"
                                  },
                                  "description_format": {
                                    "title": "Description Format",
                                    "description": "Text format for rendering the Instruction with emphasized elements, where '{key}' indicates a part of the string that must be replaced with content defined by the entry corresponding to 'key' in 'description_format_replacements'. This allows the elements described by the replacements to be formatted differently by the client, if desired. Key strings will contain only the characters '[a-zA-Z0-9]'. '{ }' will not be nested, and the literal characters '{' and '}' are encoded by the escape sequences '\\{' and '\\}', respectively.",
                                    "type": "string"
                                  },
                                  "description_format_replacements": {
                                    "type": "array",
                                    "items": {
                                      "title": "DescriptionFormatReplacement",
                                      "type": "object",
                                      "properties": {
                                        "key": {
                                          "title": "Key",
                                          "description": "A key corresponding to a string enclosed in '{}' in 'description_format'.",
                                          "type": "string"
                                        },
                                        "text": {
                                          "title": "Text",
                                          "description": "The text to be used to replace the '{key}' substring in the 'description_format'.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "type": "string",
                                          "title": "Type",
                                          "description": "A value indicating what kind of real-world thing is being identified by this format replacement. This allows service clients to apply application-specific formatting if desired. | value | description | | ----- | ----------- | | street_name | The name of a street, road, or other way | | exit_number | The number of an exit, generally from a roundabout |",
                                          "enum": [
                                            "street_name",
                                            "exit_number"
                                          ]
                                        },
                                        "language": {
                                          "title": "Language",
                                          "description": "An IETF BCP 47 language tag that indicates what language the associated 'text' is in. Note that this can be different from the language of the surrounding description - this is most common when the replacement is a place-name in a local language whilst the description is in a different language.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "text"
                                      ]
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "title": "Type",
                                    "description": "Indicates the type of Instruction.",
                                    "enum": [
                                      "depart",
                                      "turn",
                                      "enter_roundabout",
                                      "exit_roundabout",
                                      "arrive"
                                    ]
                                  },
                                  "type_direction": {
                                    "type": "string",
                                    "title": "Type Direction",
                                    "description": "Indicates a direction that modifies this Instruction.",
                                    "enum": [
                                      "straight",
                                      "uturn",
                                      "left",
                                      "slight_left",
                                      "sharp_left",
                                      "right",
                                      "slight_right",
                                      "sharp_right"
                                    ]
                                  }
                                },
                                "required": [
                                  "path_index"
                                ]
                              }
                            }
                          },
                          "required": [
                            "travel_mode",
                            "path"
                          ]
                        },
                        "minItems": 1
                      },
                      "route_departure_time": {
                        "title": "Departure Time",
                        "description": "The time at which Citymapper thinks the user will set out on this route, given available departure information. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_arrival_time": {
                        "title": "Arrival Time",
                        "description": "The time at which Citymapper thinks the user will arrive at the end of this route, given available departure information and expected travel speed. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_metadata": {
                        "title": "Route Metadata",
                        "description": "Any metadata associated with the Route.",
                        "type": "object",
                        "properties": {
                          "groups": {
                            "type": "array",
                            "items": {
                              "title": "Route Group",
                              "description": "Group associated with specific routes of the same scenario.",
                              "type": "object",
                              "properties": {
                                "group_id": {
                                  "title": "Group ID",
                                  "description": "ID of a group a route contains in.",
                                  "type": "string"
                                },
                                "group_name": {
                                  "title": "Group",
                                  "description": "Localized name of a route group, e.g. 'Transit' or 'Le metro'.",
                                  "type": "string"
                                },
                                "route_position": {
                                  "title": "Route Position",
                                  "description": "A zero-based position of a route within specific group.",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              },
                              "required": [
                                "group_id",
                                "route_position"
                              ]
                            }
                          },
                          "profile_name": {
                            "title": "Profile Name",
                            "description": "Human-readable localized name of the 'profile' identifier. ",
                            "type": "string"
                          }
                        }
                      },
                      "profile": {
                        "title": "Profile",
                        "description": "Indicates which routing 'profile' was used to calculate this Route. For example, a response from a bike routing endpoint may return multiple routes, one with a 'quiet' profile and another with a 'fast' profile. Note that new values can be added at any time, so any code parsing this field must be able to handle unexpected values. This value will match the 'profiles' request parameter on endpoints that support selecting specific routing profiles. This value is intended to be machine readable only. For a profile name to show to a user, use the 'profile_name' in the 'route_metadata' object instead.",
                        "type": "string"
                      },
                      "signature": {
                        "title": "Signature",
                        "description": "A value to be passed back to the server in subsequent calls to refer to this route (for instance, when requesting live departure information via 'service/1/live/routeupdates'). It must be treated as an opaque value.",
                        "type": "string"
                      },
                      "requested_time": {
                        "title": "Requested Time",
                        "description": "Contains the 'time' parameter used as a departure or arrival time constraint when getting directions, if applicable.",
                        "type": "string"
                      },
                      "requested_time_type": {
                        "title": "Requested Time Type",
                        "description": "Contains the 'time_type' parameter used to determine how the 'time' will be used to constrain the directions that are returned, if applicable. If no parameter was given in the request, will return the 'time_type' used by default to plan the Route.",
                        "type": "string",
                        "enum": [
                          "arrive",
                          "depart",
                          "depart_approximate"
                        ]
                      }
                    },
                    "required": [
                      "start",
                      "end",
                      "legs",
                      "signature"
                    ]
                  }
                },
                "language": {
                  "title": "Language",
                  "description": "A IETF BCP 47 language tag that indicates the language used to encode localizable content, such as turning instructions, in this response. This will reflect a best-effort attempt to fulfill any language preference expressed by the 'language' request parameter, or 'en-US' as default.",
                  "type": "string"
                }
              },
              "required": [
                "routes"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "title": "ErrorResponse",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                },
                "error_code": {
                  "title": "Error Code",
                  "description": "A string code that can be used for triggering error handling code paths. Only present in responses with non-200 HTTP code. Note new values may be added at any time. | value | description | | ----- | ----------- | | no-results | The request was in Citymapper's coverage regions, but no results were found. | | coverage-region | The request is outside of Citymapper's coverage regions, or spans disconnected regions. | | coverage-start | The request's 'start' location falls outside of Citymapper's coverage regions. | | coverage-end | The request's 'end' location falls outside of Citymapper's coverage regions. | | coverage-distance | The request's 'start' and 'end' locations are further apart than the maximum allowed for this service. | | signature | A signature included in the request is invalid for use with this service. | | unknown-brand | The request references an unknown Brand ID. | | unknown-scenario | The request references an unknown Scenario ID. | | request-format | The request was semantically malformed. The 'message' field may contain additional details. | | configuration-required | The request can't be completed because of missing configuration. The 'message' should give details. | | deprecated | The request was made to a deprecated service. |",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "description": "Rate Limited",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/directions/bikeride": {
      "get": {
        "description": "Gets a bike route between two points, providing enough information to render it on a map, along with a duration estimate. This call assumes that the rider has a bicycle at the 'start' point, and provides a biking route from there to the 'end' point if both are within Citymapper's supported areas. The resulting route should contain a single bike leg, though the 'path_annotations' property of the leg may indicate sections during which the user should walk beside the bike. This call does not incorporate any information about bike operators' coverage or parking areas, but other service calls may be available to do so. The maximum great-circle distance between the start and end is limited to 200km for this service.",
        "summary": "Get a bike route between two points",
        "operationId": "BikeRideDirections",
        "deprecated": false,
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "x-ms-summary": "Start",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical start of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "end",
            "in": "query",
            "x-ms-summary": "End",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical end of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "profiles",
            "in": "query",
            "x-ms-summary": "Profiles",
            "required": false,
            "type": "string",
            "description": "Indicates which 'profiles' to use when calculating bike directions. Each profile can generate a different route option, so requesting more profiles will generally give more options. Note that sometimes some of the resulting routes will be identical (in the case of one route being optimal in more than one way), and a profile may not always yield a Route. | value | description | | ----- | ----------- | | quiet | Attempts to use roads with less traffic | | regular | The default profile, balances traffic with directness | | fast | Attempts to find the shortest sensible route | If no profiles are specified, 'regular' will be used."
          },
          {
            "name": "language",
            "in": "query",
            "x-ms-summary": "Language",
            "required": false,
            "type": "string",
            "description": "An IETF BCP 47 language tag that indicates the end-user's language preference.  When provided, the response will contain a 'language' property that indicates the language used for any localizable elements of the response (such as turning instructions). This language will be a best-effort attempt to fulfill the expressed preference, but it may contain a value that wasn't expressed in the request (this will generally be 'en-US' as a fallback). Note that language preference will generally only affect Citymapper-generated content such as turning instructions. External content such as Stop names and Status descriptions will generally be passed through in their original language."
          },
          {
            "name": "reroute_signature",
            "in": "query",
            "x-ms-summary": "Reroute Signature",
            "required": false,
            "type": "string",
            "description": "When rerouting (requesting an update to a previous response that accounts for the user's updated location), this value should be set to the 'signature' provided in the original Route. This allows for more efficient determination of the updated Route. This value must be URL-encoded. When providing this parameter, the 'current_location' (when applicable) or 'start' location should be set to the user's latest location. When this parameter is included, Citymapper may not return results in cases where the request differs significantly from the original, for instance if the 'end' location is different, or if more than 1 hour has passed since the original request."
          },
          {
            "name": "start_bearing",
            "in": "query",
            "x-ms-summary": "Start Bearing",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "An angle clockwise from North between 0 and 359, where North is 0 and East is 90. This bearing is used to influence the initial instruction text and/or routing, most-commonly to avoid the user from being asked to make a u-turn, if continuing on their current bearing gives a comparable route. This should be provided only if you wish to influence the initial direction of travel for the route."
          },
          {
            "name": "past_loc_coords",
            "in": "query",
            "x-ms-summary": "Past Locations",
            "required": false,
            "type": "string",
            "description": "Optional parameter to improve rerouting behavior. The Coordinates of up to 10 of the past locations of the user as a comma separated list. Coordinates must be in WGS84 'latitude,longitude' format. Coordinates must be in decimal, and only the first 6 digits of precision will be used. Must be chronologically ordered, most recent last. 'past_loc_ages' and 'past_loc_accuracies' must be provided alongside. The server will only consider a maximum of 10 locations, if more than 10 locations are provided the least recent locations will be ignored. The server is likely to ignore any locations older than 30 seconds or any that are less than 1 second apart."
          },
          {
            "name": "past_loc_ages",
            "in": "query",
            "x-ms-summary": "Past Location Ages",
            "required": false,
            "type": "string",
            "description": "Optional parameter to improve rerouting behavior. The Ages of up to 10 of the past locations of the user as a comma separated list. Ages must be in integer seconds since the current location. Must be chronologically ordered, most recent last. 'past_loc_coords' and 'past_loc_accuracies' must be provided alongside. The server will only consider a maximum of 10 locations, if more than 10 locations are provided the least recent locations will be ignored. The server is likely to ignore any locations older than 30 seconds or any that are less than 1 second apart."
          },
          {
            "name": "past_loc_accuracies",
            "in": "query",
            "x-ms-summary": "Past Location Accuracies",
            "required": false,
            "type": "string",
            "description": "Optional parameter to improve rerouting behavior. The GPS Accuracies of up to 10 of the past locations of the user as a comma separated list. Accuracies must be in integer meters. Must be chronologically ordered, most recent last. 'past_loc_ages' and 'past_loc_coords' must be provided alongside. The server will only consider a maximum of 10 locations, if more than 10 locations are provided the least recent locations will be ignored. The server is likely to ignore any locations older than 30 seconds or any that are less than 1 second apart."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routes": {
                  "type": "array",
                  "items": {
                    "title": "Route",
                    "type": "object",
                    "properties": {
                      "start": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "end": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "distance_meters": {
                        "title": "Distance in Meters",
                        "description": "The overall distance of the entire Route, in meters.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_seconds": {
                        "title": "Duration",
                        "description": "The overall estimated time to traverse the entire Route, in seconds, based on the selected vehicle or departure in the response.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_accuracy": {
                        "title": "Duration Accuracy",
                        "description": "Citymapper's assessment of how the accuracy level of 'duration_seconds' should be displayed to the user. This is largely based on the 'type' of the Departures used for times, but it involves additional heuristics developed over time for the Citymapper app. When this field is not provided, the value 'scheduled' should be used. | value | description | | ----- | ----------- | | estimated | A duration that should be considered approximate, as its calculation involved more uncertainty than usual. This is the lowest accuracy. | | scheduled | A normal duration, typically based on published timetable information. | | live | A duration largely based on real-time/live departure information. This is the highest accuracy. |",
                        "type": "string",
                        "enum": [
                          "estimated",
                          "scheduled",
                          "live"
                        ],
                        "default": "scheduled"
                      },
                      "price": {
                        "title": "Price",
                        "description": "Represents a monetary amount. This may either be  - An exact amount, represented by 'amount'. Formatted as e.g. '$31.50'  - A range of values between 'amount_range_minimum' and 'amount_range_maximum'. Formatted as e.g. '$318-22'  - A minimum price where the maximum is not known, represented by 'amount_range_minimum' but no 'amount_range_maximum'. Formatted as e.g. '$318+'",
                        "type": "object",
                        "properties": {
                          "formatted": {
                            "title": "Formatted",
                            "description": "The given price as a formatted string. By default, this is in the native currency format of the region where the route occurs.",
                            "type": "string"
                          },
                          "amount": {
                            "title": "Amount",
                            "description": "The price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_minimum": {
                            "title": "Amount Range Minimum",
                            "description": "If this Price represents a range of possible values, the minimum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_maximum": {
                            "title": "Amount range Maximum",
                            "description": "If this Price represents a range of possible values, the maximum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region. This may not be included if the range is open-ended",
                            "type": "string"
                          },
                          "currency": {
                            "title": "Currency",
                            "description": "The currency in which the price is given, in three-letter ISO 4217 form.",
                            "type": "string"
                          },
                          "demand_multipler": {
                            "title": "Demand Multiplier",
                            "description": "Indicates that prices are higher than usual because of demand, usually for Taxi (On-Demand) legs. May in rare cases be less than 1.0",
                            "type": "number",
                            "format": "float"
                          }
                        },
                        "required": [
                          "formatted"
                        ]
                      },
                      "emissions_grams_co2e": {
                        "title": "CO2e Emissions",
                        "description": "An estimate of the greenhouse gas emissions of the route, expressed in grams of carbon dioxide equivalent (CO2e).",
                        "type": "number",
                        "format": "float"
                      },
                      "legs": {
                        "title": "Legs",
                        "description": "Array of legs comprising the Route, in the order in which they should be traversed. Every valid route will have at least one.",
                        "type": "array",
                        "items": {
                          "title": "Leg",
                          "type": "object",
                          "properties": {
                            "travel_mode": {
                              "title": "Travel Mode",
                              "description": "The travel mode.",
                              "type": "string"
                            },
                            "duration_seconds": {
                              "title": "Duration",
                              "description": "The time required to traverse this leg, excluding any waiting or boarding time at the beginning. May be omitted in rare circumstances when the duration cannot be computed.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "title": "Path",
                              "description": "The geographic path that the leg traverses, as a series of WGS84 coordinates encoded in Google Polyline Format, with a decimal precision of 5 digits. For example, the value '_flyHbjPDZBTBNDJ' encodes the following series of (latitude, longitude) coordinates: '' [(51.51344, -0.08882), (51.51341, -0.08896), (51.51339, -0.08907), (51.51337, -0.08915), (51.51334, -0.08921)] ''",
                              "type": "string"
                            },
                            "instructions": {
                              "title": "Instructions",
                              "description": "This provides the list of turn instructions to guide the user through legs where the user needs to navigate, such as when walking or using a scooter or bike.",
                              "type": "array",
                              "items": {
                                "title": "Instruction",
                                "type": "object",
                                "properties": {
                                  "path_index": {
                                    "title": "Path Index",
                                    "description": "0-based index into the list of coordinates provided by the 'path' property of the leg. This indicates the location at which the instruction is to be followed, so it will be the location of the turn on the path, or the start or end of the leg.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "distance_meters": {
                                    "title": "Distance",
                                    "description": "The distance in meters of the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "time_seconds": {
                                    "title": "Time",
                                    "description": "The time in seconds that the user is expected to take to traverse the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "description_text": {
                                    "title": "Description",
                                    "description": "Plain-text description of the Instruction to the user.",
                                    "type": "string"
                                  },
                                  "description_format": {
                                    "title": "Description Format",
                                    "description": "Text format for rendering the Instruction with emphasized elements, where '{key}' indicates a part of the string that must be replaced with content defined by the entry corresponding to 'key' in 'description_format_replacements'. This allows the elements described by the replacements to be formatted differently by the client, if desired. Key strings will contain only the characters '[a-zA-Z0-9]'. '{ }' will not be nested, and the literal characters '{' and '}' are encoded by the escape sequences '\\{' and '\\}', respectively.",
                                    "type": "string"
                                  },
                                  "description_format_replacements": {
                                    "type": "array",
                                    "items": {
                                      "title": "DescriptionFormatReplacement",
                                      "type": "object",
                                      "properties": {
                                        "key": {
                                          "title": "Key",
                                          "description": "A key corresponding to a string enclosed in '{}' in 'description_format'.",
                                          "type": "string"
                                        },
                                        "text": {
                                          "title": "Text",
                                          "description": "The text to be used to replace the '{key}' substring in the 'description_format'.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "type": "string",
                                          "title": "Type",
                                          "description": "A value indicating what kind of real-world thing is being identified by this format replacement. This allows service clients to apply application-specific formatting if desired. | value | description | | ----- | ----------- | | street_name | The name of a street, road, or other way | | exit_number | The number of an exit, generally from a roundabout |",
                                          "enum": [
                                            "street_name",
                                            "exit_number"
                                          ]
                                        },
                                        "language": {
                                          "title": "Language",
                                          "description": "An IETF BCP 47 language tag that indicates what language the associated 'text' is in. Note that this can be different from the language of the surrounding description - this is most common when the replacement is a place-name in a local language whilst the description is in a different language.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "text"
                                      ]
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "title": "Type",
                                    "description": "Indicates the type of Instruction.",
                                    "enum": [
                                      "depart",
                                      "turn",
                                      "enter_roundabout",
                                      "exit_roundabout",
                                      "arrive"
                                    ]
                                  },
                                  "type_direction": {
                                    "type": "string",
                                    "title": "Type Direction",
                                    "description": "Indicates a direction that modifies this Instruction.",
                                    "enum": [
                                      "straight",
                                      "uturn",
                                      "left",
                                      "slight_left",
                                      "sharp_left",
                                      "right",
                                      "slight_right",
                                      "sharp_right"
                                    ]
                                  }
                                },
                                "required": [
                                  "path_index"
                                ]
                              }
                            }
                          },
                          "required": [
                            "travel_mode",
                            "path"
                          ]
                        },
                        "minItems": 1
                      },
                      "route_departure_time": {
                        "title": "Departure Time",
                        "description": "The time at which Citymapper thinks the user will set out on this route, given available departure information. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_arrival_time": {
                        "title": "Arrival Time",
                        "description": "The time at which Citymapper thinks the user will arrive at the end of this route, given available departure information and expected travel speed. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_metadata": {
                        "title": "Route Metadata",
                        "description": "Any metadata associated with the Route.",
                        "type": "object",
                        "properties": {
                          "groups": {
                            "type": "array",
                            "items": {
                              "title": "Route Group",
                              "description": "Group associated with specific routes of the same scenario.",
                              "type": "object",
                              "properties": {
                                "group_id": {
                                  "title": "Group ID",
                                  "description": "ID of a group a route contains in.",
                                  "type": "string"
                                },
                                "group_name": {
                                  "title": "Group",
                                  "description": "Localized name of a route group, e.g. 'Transit' or 'Le metro'.",
                                  "type": "string"
                                },
                                "route_position": {
                                  "title": "Route Position",
                                  "description": "A zero-based position of a route within specific group.",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              },
                              "required": [
                                "group_id",
                                "route_position"
                              ]
                            }
                          },
                          "profile_name": {
                            "title": "Profile Name",
                            "description": "Human-readable localized name of the 'profile' identifier. ",
                            "type": "string"
                          }
                        }
                      },
                      "profile": {
                        "title": "Profile",
                        "description": "Indicates which routing 'profile' was used to calculate this Route. For example, a response from a bike routing endpoint may return multiple routes, one with a 'quiet' profile and another with a 'fast' profile. Note that new values can be added at any time, so any code parsing this field must be able to handle unexpected values. This value will match the 'profiles' request parameter on endpoints that support selecting specific routing profiles. This value is intended to be machine readable only. For a profile name to show to a user, use the 'profile_name' in the 'route_metadata' object instead.",
                        "type": "string"
                      },
                      "signature": {
                        "title": "Signature",
                        "description": "A value to be passed back to the server in subsequent calls to refer to this route (for instance, when requesting live departure information via 'service/1/live/routeupdates'). It must be treated as an opaque value.",
                        "type": "string"
                      },
                      "requested_time": {
                        "title": "Requested Time",
                        "description": "Contains the 'time' parameter used as a departure or arrival time constraint when getting directions, if applicable.",
                        "type": "string"
                      },
                      "requested_time_type": {
                        "title": "Requested Time Type",
                        "description": "Contains the 'time_type' parameter used to determine how the 'time' will be used to constrain the directions that are returned, if applicable. If no parameter was given in the request, will return the 'time_type' used by default to plan the Route.",
                        "type": "string",
                        "enum": [
                          "arrive",
                          "depart",
                          "depart_approximate"
                        ]
                      }
                    },
                    "required": [
                      "start",
                      "end",
                      "legs",
                      "signature"
                    ]
                  }
                },
                "language": {
                  "title": "Language",
                  "description": "A IETF BCP 47 language tag that indicates the language used to encode localizable content, such as turning instructions, in this response. This will reflect a best-effort attempt to fulfill any language preference expressed by the 'language' request parameter, or 'en-US' as default.",
                  "type": "string"
                }
              },
              "required": [
                "routes"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "title": "ErrorResponse",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                },
                "error_code": {
                  "title": "Error Code",
                  "description": "A string code that can be used for triggering error handling code paths. Only present in responses with non-200 HTTP code. Note new values may be added at any time. | value | description | | ----- | ----------- | | no-results | The request was in Citymapper's coverage regions, but no results were found. | | coverage-region | The request is outside of Citymapper's coverage regions, or spans disconnected regions. | | coverage-start | The request's 'start' location falls outside of Citymapper's coverage regions. | | coverage-end | The request's 'end' location falls outside of Citymapper's coverage regions. | | coverage-distance | The request's 'start' and 'end' locations are further apart than the maximum allowed for this service. | | signature | A signature included in the request is invalid for use with this service. | | unknown-brand | The request references an unknown Brand ID. | | unknown-scenario | The request references an unknown Scenario ID. | | request-format | The request was semantically malformed. The 'message' field may contain additional details. | | configuration-required | The request can't be completed because of missing configuration. The 'message' should give details. | | deprecated | The request was made to a deprecated service. |",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "description": "Rate Limited",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/directions/bike": {
      "get": {
        "description": "Gets a hired bike route between two points, including any initial and final walks. The resulting route provides enough information to render it on a map, along with a duration estimate. This call can be used in several different ways:  **Use any bike of the specified Brand** This is the simplest call, only requiring 'start', 'end', and 'brand_id'. Citymapper assumes that the user is at the 'start' point, and chooses a bike of the specified Brand, if possible. **Use a bike at a specified location** By adding 'original_vehicle_location' to 'start', 'end', and 'brand_id', Citymapper plans a route that assumes the bike is at the given location. **Update a route in progress** In order to retrieve an updated route that includes rerouting from the user's current location if they've diverged from the planned Route, the caller can add the 'current_location' and 'ride_state' properties, which indicates which leg of the resulting route should be rerouted around the user's 'current_location'.",
        "summary": "Get a hired bike route between two points",
        "operationId": "BikeDirections",
        "deprecated": false,
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "x-ms-summary": "Start",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical start of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "end",
            "in": "query",
            "x-ms-summary": "End",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical end of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "brand_id",
            "in": "query",
            "x-ms-summary": "Brand ID",
            "required": true,
            "type": "string",
            "description": "The ID of the Brand of bike to use for this route. This is necessary in order to determine the location of available bikes, along with any associated coverage and parking restrictions."
          },
          {
            "name": "ride_state",
            "in": "query",
            "x-ms-summary": "State",
            "required": false,
            "enum": [
              "walking_to_vehicle",
              "riding",
              "walking_to_end"
            ],
            "type": "string",
            "description": "Indicates where along the route the user is. If omitted, 'walking_to_vehicle' is used. This property along with 'current_location' allows the retrieval of an updated route that reflects the user's current progress through it. | value | description | | ----- | ----------- | | walking_to_vehicle | Indicates that the user is walking to collect the vehicle | | riding | Indicates that the user is riding the vehicle | | walking_to_end | Indicates that the user has left the vehicle and is walking to their destination |"
          },
          {
            "name": "current_location",
            "in": "query",
            "x-ms-summary": "Current Location",
            "required": false,
            "type": "string",
            "description": "The user's current location, in order to update the route based on the user's location. Provided in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 digits of precision will be used. This parameter is used to get an updated route that reflects the user's actual location if they diverge from the path given in the Route. If this is provided, the returned route will contain this location. Which leg of the route will contain this location is decided by the value of the 'ride_state' parameter."
          },
          {
            "name": "ride_start_location",
            "in": "query",
            "x-ms-summary": "Start Location",
            "required": false,
            "type": "string",
            "description": "The location of the vehicle to be used, at the beginning of the vehicle ride part of the user's trip along the Route. Provided in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 digits of precision will be used. This must be provided when 'ride_state' is 'riding' or 'walking_to_end'. If not provided when 'ride_state' is 'walking_to_vehicle' (or not specified), Citymapper will attempt to find the most appropriate vehicle that belongs to the specified 'brand_id'. For compatibility, 'original_vehicle_location' is an alias for this parameter"
          },
          {
            "name": "ride_end_location",
            "in": "query",
            "x-ms-summary": "End Location",
            "required": false,
            "type": "string",
            "description": "The location the vehicle was dropped off at the end of the vehicle ride part of the user's trip along the Route. Provided in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 digits of precision will be used. This must be provided when 'ride_state' is 'walking_to_end'. In all other states this parameter is ignored."
          },
          {
            "name": "profiles",
            "in": "query",
            "x-ms-summary": "Profiles",
            "required": false,
            "type": "string",
            "description": "Indicates which 'profiles' to use when calculating bike directions. Each profile can generate a different route option, so requesting more profiles will generally give more options. Note that sometimes some of the resulting routes will be identical (in the case of one route being optimal in more than one way), and a profile may not always yield a Route. | value | description | | ----- | ----------- | | quiet | Attempts to use roads with less traffic | | regular | The default profile, balances traffic with directness | | fast | Attempts to find the shortest sensible route | If no profiles are specified, 'regular' will be used."
          },
          {
            "name": "language",
            "in": "query",
            "x-ms-summary": "Language",
            "required": false,
            "type": "string",
            "description": "An IETF BCP 47 language tag that indicates the end-user's language preference.  When provided, the response will contain a 'language' property that indicates the language used for any localizable elements of the response (such as turning instructions). This language will be a best-effort attempt to fulfill the expressed preference, but it may contain a value that wasn't expressed in the request (this will generally be 'en-US' as a fallback). Note that language preference will generally only affect Citymapper-generated content such as turning instructions. External content such as Stop names and Status descriptions will generally be passed through in their original language."
          },
          {
            "name": "reroute_signature",
            "in": "query",
            "x-ms-summary": "Reroute Signature",
            "required": false,
            "type": "string",
            "description": "When rerouting (requesting an update to a previous response that accounts for the user's updated location), this value should be set to the 'signature' provided in the original Route. This allows for more efficient determination of the updated Route. This value must be URL-encoded. When providing this parameter, the 'current_location' (when applicable) or 'start' location should be set to the user's latest location. When this parameter is included, Citymapper may not return results in cases where the request differs significantly from the original, for instance if the 'end' location is different, or if more than 1 hour has passed since the original request."
          },
          {
            "name": "start_bearing",
            "in": "query",
            "x-ms-summary": "Start Bearing",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "An angle clockwise from North between 0 and 359, where North is 0 and East is 90. This bearing is used to influence the initial instruction text and/or routing, most-commonly to avoid the user from being asked to make a u-turn, if continuing on their current bearing gives a comparable route. This should be provided only if you wish to influence the initial direction of travel for the route."
          },
          {
            "name": "past_loc_coords",
            "in": "query",
            "x-ms-summary": "Past Locations",
            "required": false,
            "type": "string",
            "description": "Optional parameter to improve rerouting behavior. The Coordinates of up to 10 of the past locations of the user as a comma separated list. Coordinates must be in WGS84 'latitude,longitude' format. Coordinates must be in decimal, and only the first 6 digits of precision will be used. Must be chronologically ordered, most recent last. 'past_loc_ages' and 'past_loc_accuracies' must be provided alongside. The server will only consider a maximum of 10 locations, if more than 10 locations are provided the least recent locations will be ignored. The server is likely to ignore any locations older than 30 seconds or any that are less than 1 second apart."
          },
          {
            "name": "past_loc_ages",
            "in": "query",
            "x-ms-summary": "Past Location Ages",
            "required": false,
            "type": "string",
            "description": "Optional parameter to improve rerouting behavior. The Ages of up to 10 of the past locations of the user as a comma separated list. Ages must be in integer seconds since the current location. Must be chronologically ordered, most recent last. 'past_loc_coords' and 'past_loc_accuracies' must be provided alongside. The server will only consider a maximum of 10 locations, if more than 10 locations are provided the least recent locations will be ignored. The server is likely to ignore any locations older than 30 seconds or any that are less than 1 second apart."
          },
          {
            "name": "past_loc_accuracies",
            "in": "query",
            "x-ms-summary": "Past Location Accuracies",
            "required": false,
            "type": "string",
            "description": "Optional parameter to improve rerouting behavior. The GPS Accuracies of up to 10 of the past locations of the user as a comma separated list. Accuracies must be in integer meters. Must be chronologically ordered, most recent last. 'past_loc_ages' and 'past_loc_coords' must be provided alongside. The server will only consider a maximum of 10 locations, if more than 10 locations are provided the least recent locations will be ignored. The server is likely to ignore any locations older than 30 seconds or any that are less than 1 second apart."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routes": {
                  "type": "array",
                  "items": {
                    "title": "Route",
                    "type": "object",
                    "properties": {
                      "start": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "end": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "distance_meters": {
                        "title": "Distance in Meters",
                        "description": "The overall distance of the entire Route, in meters.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_seconds": {
                        "title": "Duration",
                        "description": "The overall estimated time to traverse the entire Route, in seconds, based on the selected vehicle or departure in the response.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_accuracy": {
                        "title": "Duration Accuracy",
                        "description": "Citymapper's assessment of how the accuracy level of 'duration_seconds' should be displayed to the user. This is largely based on the 'type' of the Departures used for times, but it involves additional heuristics developed over time for the Citymapper app. When this field is not provided, the value 'scheduled' should be used. | value | description | | ----- | ----------- | | estimated | A duration that should be considered approximate, as its calculation involved more uncertainty than usual. This is the lowest accuracy. | | scheduled | A normal duration, typically based on published timetable information. | | live | A duration largely based on real-time/live departure information. This is the highest accuracy. |",
                        "type": "string",
                        "enum": [
                          "estimated",
                          "scheduled",
                          "live"
                        ],
                        "default": "scheduled"
                      },
                      "price": {
                        "title": "Price",
                        "description": "Represents a monetary amount. This may either be  - An exact amount, represented by 'amount'. Formatted as e.g. '$31.50'  - A range of values between 'amount_range_minimum' and 'amount_range_maximum'. Formatted as e.g. '$318-22'  - A minimum price where the maximum is not known, represented by 'amount_range_minimum' but no 'amount_range_maximum'. Formatted as e.g. '$318+'",
                        "type": "object",
                        "properties": {
                          "formatted": {
                            "title": "Formatted",
                            "description": "The given price as a formatted string. By default, this is in the native currency format of the region where the route occurs.",
                            "type": "string"
                          },
                          "amount": {
                            "title": "Amount",
                            "description": "The price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_minimum": {
                            "title": "Amount Range Minimum",
                            "description": "If this Price represents a range of possible values, the minimum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_maximum": {
                            "title": "Amount range Maximum",
                            "description": "If this Price represents a range of possible values, the maximum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region. This may not be included if the range is open-ended",
                            "type": "string"
                          },
                          "currency": {
                            "title": "Currency",
                            "description": "The currency in which the price is given, in three-letter ISO 4217 form.",
                            "type": "string"
                          },
                          "demand_multipler": {
                            "title": "Demand Multiplier",
                            "description": "Indicates that prices are higher than usual because of demand, usually for Taxi (On-Demand) legs. May in rare cases be less than 1.0",
                            "type": "number",
                            "format": "float"
                          }
                        },
                        "required": [
                          "formatted"
                        ]
                      },
                      "emissions_grams_co2e": {
                        "title": "CO2e Emissions",
                        "description": "An estimate of the greenhouse gas emissions of the route, expressed in grams of carbon dioxide equivalent (CO2e).",
                        "type": "number",
                        "format": "float"
                      },
                      "legs": {
                        "title": "Legs",
                        "description": "Array of legs comprising the Route, in the order in which they should be traversed. Every valid route will have at least one.",
                        "type": "array",
                        "items": {
                          "title": "Leg",
                          "type": "object",
                          "properties": {
                            "travel_mode": {
                              "title": "Travel Mode",
                              "description": "The travel mode.",
                              "type": "string"
                            },
                            "duration_seconds": {
                              "title": "Duration",
                              "description": "The time required to traverse this leg, excluding any waiting or boarding time at the beginning. May be omitted in rare circumstances when the duration cannot be computed.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "title": "Path",
                              "description": "The geographic path that the leg traverses, as a series of WGS84 coordinates encoded in Google Polyline Format, with a decimal precision of 5 digits. For example, the value '_flyHbjPDZBTBNDJ' encodes the following series of (latitude, longitude) coordinates: '' [(51.51344, -0.08882), (51.51341, -0.08896), (51.51339, -0.08907), (51.51337, -0.08915), (51.51334, -0.08921)] ''",
                              "type": "string"
                            },
                            "instructions": {
                              "title": "Instructions",
                              "description": "This provides the list of turn instructions to guide the user through legs where the user needs to navigate, such as when walking or using a scooter or bike.",
                              "type": "array",
                              "items": {
                                "title": "Instruction",
                                "type": "object",
                                "properties": {
                                  "path_index": {
                                    "title": "Path Index",
                                    "description": "0-based index into the list of coordinates provided by the 'path' property of the leg. This indicates the location at which the instruction is to be followed, so it will be the location of the turn on the path, or the start or end of the leg.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "distance_meters": {
                                    "title": "Distance",
                                    "description": "The distance in meters of the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "time_seconds": {
                                    "title": "Time",
                                    "description": "The time in seconds that the user is expected to take to traverse the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "description_text": {
                                    "title": "Description",
                                    "description": "Plain-text description of the Instruction to the user.",
                                    "type": "string"
                                  },
                                  "description_format": {
                                    "title": "Description Format",
                                    "description": "Text format for rendering the Instruction with emphasized elements, where '{key}' indicates a part of the string that must be replaced with content defined by the entry corresponding to 'key' in 'description_format_replacements'. This allows the elements described by the replacements to be formatted differently by the client, if desired. Key strings will contain only the characters '[a-zA-Z0-9]'. '{ }' will not be nested, and the literal characters '{' and '}' are encoded by the escape sequences '\\{' and '\\}', respectively.",
                                    "type": "string"
                                  },
                                  "description_format_replacements": {
                                    "type": "array",
                                    "items": {
                                      "title": "DescriptionFormatReplacement",
                                      "type": "object",
                                      "properties": {
                                        "key": {
                                          "title": "Key",
                                          "description": "A key corresponding to a string enclosed in '{}' in 'description_format'.",
                                          "type": "string"
                                        },
                                        "text": {
                                          "title": "Text",
                                          "description": "The text to be used to replace the '{key}' substring in the 'description_format'.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "type": "string",
                                          "title": "Type",
                                          "description": "A value indicating what kind of real-world thing is being identified by this format replacement. This allows service clients to apply application-specific formatting if desired. | value | description | | ----- | ----------- | | street_name | The name of a street, road, or other way | | exit_number | The number of an exit, generally from a roundabout |",
                                          "enum": [
                                            "street_name",
                                            "exit_number"
                                          ]
                                        },
                                        "language": {
                                          "title": "Language",
                                          "description": "An IETF BCP 47 language tag that indicates what language the associated 'text' is in. Note that this can be different from the language of the surrounding description - this is most common when the replacement is a place-name in a local language whilst the description is in a different language.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "text"
                                      ]
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "title": "Type",
                                    "description": "Indicates the type of Instruction.",
                                    "enum": [
                                      "depart",
                                      "turn",
                                      "enter_roundabout",
                                      "exit_roundabout",
                                      "arrive"
                                    ]
                                  },
                                  "type_direction": {
                                    "type": "string",
                                    "title": "Type Direction",
                                    "description": "Indicates a direction that modifies this Instruction.",
                                    "enum": [
                                      "straight",
                                      "uturn",
                                      "left",
                                      "slight_left",
                                      "sharp_left",
                                      "right",
                                      "slight_right",
                                      "sharp_right"
                                    ]
                                  }
                                },
                                "required": [
                                  "path_index"
                                ]
                              }
                            }
                          },
                          "required": [
                            "travel_mode",
                            "path"
                          ]
                        },
                        "minItems": 1
                      },
                      "route_departure_time": {
                        "title": "Departure Time",
                        "description": "The time at which Citymapper thinks the user will set out on this route, given available departure information. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_arrival_time": {
                        "title": "Arrival Time",
                        "description": "The time at which Citymapper thinks the user will arrive at the end of this route, given available departure information and expected travel speed. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_metadata": {
                        "title": "Route Metadata",
                        "description": "Any metadata associated with the Route.",
                        "type": "object",
                        "properties": {
                          "groups": {
                            "type": "array",
                            "items": {
                              "title": "Route Group",
                              "description": "Group associated with specific routes of the same scenario.",
                              "type": "object",
                              "properties": {
                                "group_id": {
                                  "title": "Group ID",
                                  "description": "ID of a group a route contains in.",
                                  "type": "string"
                                },
                                "group_name": {
                                  "title": "Group",
                                  "description": "Localized name of a route group, e.g. 'Transit' or 'Le metro'.",
                                  "type": "string"
                                },
                                "route_position": {
                                  "title": "Route Position",
                                  "description": "A zero-based position of a route within specific group.",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              },
                              "required": [
                                "group_id",
                                "route_position"
                              ]
                            }
                          },
                          "profile_name": {
                            "title": "Profile Name",
                            "description": "Human-readable localized name of the 'profile' identifier. ",
                            "type": "string"
                          }
                        }
                      },
                      "profile": {
                        "title": "Profile",
                        "description": "Indicates which routing 'profile' was used to calculate this Route. For example, a response from a bike routing endpoint may return multiple routes, one with a 'quiet' profile and another with a 'fast' profile. Note that new values can be added at any time, so any code parsing this field must be able to handle unexpected values. This value will match the 'profiles' request parameter on endpoints that support selecting specific routing profiles. This value is intended to be machine readable only. For a profile name to show to a user, use the 'profile_name' in the 'route_metadata' object instead.",
                        "type": "string"
                      },
                      "signature": {
                        "title": "Signature",
                        "description": "A value to be passed back to the server in subsequent calls to refer to this route (for instance, when requesting live departure information via 'service/1/live/routeupdates'). It must be treated as an opaque value.",
                        "type": "string"
                      },
                      "requested_time": {
                        "title": "Requested Time",
                        "description": "Contains the 'time' parameter used as a departure or arrival time constraint when getting directions, if applicable.",
                        "type": "string"
                      },
                      "requested_time_type": {
                        "title": "Requested Time Type",
                        "description": "Contains the 'time_type' parameter used to determine how the 'time' will be used to constrain the directions that are returned, if applicable. If no parameter was given in the request, will return the 'time_type' used by default to plan the Route.",
                        "type": "string",
                        "enum": [
                          "arrive",
                          "depart",
                          "depart_approximate"
                        ]
                      }
                    },
                    "required": [
                      "start",
                      "end",
                      "legs",
                      "signature"
                    ]
                  }
                },
                "language": {
                  "title": "Language",
                  "description": "A IETF BCP 47 language tag that indicates the language used to encode localizable content, such as turning instructions, in this response. This will reflect a best-effort attempt to fulfill any language preference expressed by the 'language' request parameter, or 'en-US' as default.",
                  "type": "string"
                }
              },
              "required": [
                "routes"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "title": "ErrorResponse",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                },
                "error_code": {
                  "title": "Error Code",
                  "description": "A string code that can be used for triggering error handling code paths. Only present in responses with non-200 HTTP code. Note new values may be added at any time. | value | description | | ----- | ----------- | | no-results | The request was in Citymapper's coverage regions, but no results were found. | | coverage-region | The request is outside of Citymapper's coverage regions, or spans disconnected regions. | | coverage-start | The request's 'start' location falls outside of Citymapper's coverage regions. | | coverage-end | The request's 'end' location falls outside of Citymapper's coverage regions. | | coverage-distance | The request's 'start' and 'end' locations are further apart than the maximum allowed for this service. | | signature | A signature included in the request is invalid for use with this service. | | unknown-brand | The request references an unknown Brand ID. | | unknown-scenario | The request references an unknown Scenario ID. | | request-format | The request was semantically malformed. The 'message' field may contain additional details. | | configuration-required | The request can't be completed because of missing configuration. The 'message' should give details. | | deprecated | The request was made to a deprecated service. |",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "description": "Rate Limited",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/directions/motorscooterride": {
      "get": {
        "description": "Gets a motor scooter route between two points, providing enough information to render it on a map, along with a duration estimate. (These results are optimized for larger internal combustion or electric scooters where the rider is seated.) This call assumes that the rider has a scooter at the 'start' point, and provides an e-scooter route from there to the 'end' point if both are within Citymapper's supported areas. The resulting route should contain a single scooter leg, though the 'path_annotations' property of the leg may indicate sections during which the user should walk beside the scooter. This call does not incorporate any information about scooter operators' coverage or parking areas, but other service calls may be available to do so.",
        "summary": "Get a motor scooter route between two points",
        "operationId": "MotorScooterRideDirections",
        "deprecated": false,
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "x-ms-summary": "Start",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical start of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "end",
            "in": "query",
            "x-ms-summary": "End",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical end of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "language",
            "in": "query",
            "x-ms-summary": "Language",
            "required": false,
            "type": "string",
            "description": "An IETF BCP 47 language tag that indicates the end-user's language preference.  When provided, the response will contain a 'language' property that indicates the language used for any localizable elements of the response (such as turning instructions). This language will be a best-effort attempt to fulfill the expressed preference, but it may contain a value that wasn't expressed in the request (this will generally be 'en-US' as a fallback). Note that language preference will generally only affect Citymapper-generated content such as turning instructions. External content such as Stop names and Status descriptions will generally be passed through in their original language."
          },
          {
            "name": "reroute_signature",
            "in": "query",
            "x-ms-summary": "Reroute Signature",
            "required": false,
            "type": "string",
            "description": "When rerouting (requesting an update to a previous response that accounts for the user's updated location), this value should be set to the 'signature' provided in the original Route. This allows for more efficient determination of the updated Route. This value must be URL-encoded. When providing this parameter, the 'current_location' (when applicable) or 'start' location should be set to the user's latest location. When this parameter is included, Citymapper may not return results in cases where the request differs significantly from the original, for instance if the 'end' location is different, or if more than 1 hour has passed since the original request."
          },
          {
            "name": "start_bearing",
            "in": "query",
            "x-ms-summary": "Start Bearing",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "An angle clockwise from North between 0 and 359, where North is 0 and East is 90. This bearing is used to influence the initial instruction text and/or routing, most-commonly to avoid the user from being asked to make a u-turn, if continuing on their current bearing gives a comparable route. This should be provided only if you wish to influence the initial direction of travel for the route."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routes": {
                  "type": "array",
                  "items": {
                    "title": "Route",
                    "type": "object",
                    "properties": {
                      "start": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "end": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "distance_meters": {
                        "title": "Distance in Meters",
                        "description": "The overall distance of the entire Route, in meters.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_seconds": {
                        "title": "Duration",
                        "description": "The overall estimated time to traverse the entire Route, in seconds, based on the selected vehicle or departure in the response.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_accuracy": {
                        "title": "Duration Accuracy",
                        "description": "Citymapper's assessment of how the accuracy level of 'duration_seconds' should be displayed to the user. This is largely based on the 'type' of the Departures used for times, but it involves additional heuristics developed over time for the Citymapper app. When this field is not provided, the value 'scheduled' should be used. | value | description | | ----- | ----------- | | estimated | A duration that should be considered approximate, as its calculation involved more uncertainty than usual. This is the lowest accuracy. | | scheduled | A normal duration, typically based on published timetable information. | | live | A duration largely based on real-time/live departure information. This is the highest accuracy. |",
                        "type": "string",
                        "enum": [
                          "estimated",
                          "scheduled",
                          "live"
                        ],
                        "default": "scheduled"
                      },
                      "price": {
                        "title": "Price",
                        "description": "Represents a monetary amount. This may either be  - An exact amount, represented by 'amount'. Formatted as e.g. '$31.50'  - A range of values between 'amount_range_minimum' and 'amount_range_maximum'. Formatted as e.g. '$318-22'  - A minimum price where the maximum is not known, represented by 'amount_range_minimum' but no 'amount_range_maximum'. Formatted as e.g. '$318+'",
                        "type": "object",
                        "properties": {
                          "formatted": {
                            "title": "Formatted",
                            "description": "The given price as a formatted string. By default, this is in the native currency format of the region where the route occurs.",
                            "type": "string"
                          },
                          "amount": {
                            "title": "Amount",
                            "description": "The price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_minimum": {
                            "title": "Amount Range Minimum",
                            "description": "If this Price represents a range of possible values, the minimum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_maximum": {
                            "title": "Amount range Maximum",
                            "description": "If this Price represents a range of possible values, the maximum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region. This may not be included if the range is open-ended",
                            "type": "string"
                          },
                          "currency": {
                            "title": "Currency",
                            "description": "The currency in which the price is given, in three-letter ISO 4217 form.",
                            "type": "string"
                          },
                          "demand_multipler": {
                            "title": "Demand Multiplier",
                            "description": "Indicates that prices are higher than usual because of demand, usually for Taxi (On-Demand) legs. May in rare cases be less than 1.0",
                            "type": "number",
                            "format": "float"
                          }
                        },
                        "required": [
                          "formatted"
                        ]
                      },
                      "emissions_grams_co2e": {
                        "title": "CO2e Emissions",
                        "description": "An estimate of the greenhouse gas emissions of the route, expressed in grams of carbon dioxide equivalent (CO2e).",
                        "type": "number",
                        "format": "float"
                      },
                      "legs": {
                        "title": "Legs",
                        "description": "Array of legs comprising the Route, in the order in which they should be traversed. Every valid route will have at least one.",
                        "type": "array",
                        "items": {
                          "title": "Leg",
                          "type": "object",
                          "properties": {
                            "travel_mode": {
                              "title": "Travel Mode",
                              "description": "The travel mode.",
                              "type": "string"
                            },
                            "duration_seconds": {
                              "title": "Duration",
                              "description": "The time required to traverse this leg, excluding any waiting or boarding time at the beginning. May be omitted in rare circumstances when the duration cannot be computed.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "title": "Path",
                              "description": "The geographic path that the leg traverses, as a series of WGS84 coordinates encoded in Google Polyline Format, with a decimal precision of 5 digits. For example, the value '_flyHbjPDZBTBNDJ' encodes the following series of (latitude, longitude) coordinates: '' [(51.51344, -0.08882), (51.51341, -0.08896), (51.51339, -0.08907), (51.51337, -0.08915), (51.51334, -0.08921)] ''",
                              "type": "string"
                            },
                            "instructions": {
                              "title": "Instructions",
                              "description": "This provides the list of turn instructions to guide the user through legs where the user needs to navigate, such as when walking or using a scooter or bike.",
                              "type": "array",
                              "items": {
                                "title": "Instruction",
                                "type": "object",
                                "properties": {
                                  "path_index": {
                                    "title": "Path Index",
                                    "description": "0-based index into the list of coordinates provided by the 'path' property of the leg. This indicates the location at which the instruction is to be followed, so it will be the location of the turn on the path, or the start or end of the leg.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "distance_meters": {
                                    "title": "Distance",
                                    "description": "The distance in meters of the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "time_seconds": {
                                    "title": "Time",
                                    "description": "The time in seconds that the user is expected to take to traverse the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "description_text": {
                                    "title": "Description",
                                    "description": "Plain-text description of the Instruction to the user.",
                                    "type": "string"
                                  },
                                  "description_format": {
                                    "title": "Description Format",
                                    "description": "Text format for rendering the Instruction with emphasized elements, where '{key}' indicates a part of the string that must be replaced with content defined by the entry corresponding to 'key' in 'description_format_replacements'. This allows the elements described by the replacements to be formatted differently by the client, if desired. Key strings will contain only the characters '[a-zA-Z0-9]'. '{ }' will not be nested, and the literal characters '{' and '}' are encoded by the escape sequences '\\{' and '\\}', respectively.",
                                    "type": "string"
                                  },
                                  "description_format_replacements": {
                                    "type": "array",
                                    "items": {
                                      "title": "DescriptionFormatReplacement",
                                      "type": "object",
                                      "properties": {
                                        "key": {
                                          "title": "Key",
                                          "description": "A key corresponding to a string enclosed in '{}' in 'description_format'.",
                                          "type": "string"
                                        },
                                        "text": {
                                          "title": "Text",
                                          "description": "The text to be used to replace the '{key}' substring in the 'description_format'.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "type": "string",
                                          "title": "Type",
                                          "description": "A value indicating what kind of real-world thing is being identified by this format replacement. This allows service clients to apply application-specific formatting if desired. | value | description | | ----- | ----------- | | street_name | The name of a street, road, or other way | | exit_number | The number of an exit, generally from a roundabout |",
                                          "enum": [
                                            "street_name",
                                            "exit_number"
                                          ]
                                        },
                                        "language": {
                                          "title": "Language",
                                          "description": "An IETF BCP 47 language tag that indicates what language the associated 'text' is in. Note that this can be different from the language of the surrounding description - this is most common when the replacement is a place-name in a local language whilst the description is in a different language.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "text"
                                      ]
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "title": "Type",
                                    "description": "Indicates the type of Instruction.",
                                    "enum": [
                                      "depart",
                                      "turn",
                                      "enter_roundabout",
                                      "exit_roundabout",
                                      "arrive"
                                    ]
                                  },
                                  "type_direction": {
                                    "type": "string",
                                    "title": "Type Direction",
                                    "description": "Indicates a direction that modifies this Instruction.",
                                    "enum": [
                                      "straight",
                                      "uturn",
                                      "left",
                                      "slight_left",
                                      "sharp_left",
                                      "right",
                                      "slight_right",
                                      "sharp_right"
                                    ]
                                  }
                                },
                                "required": [
                                  "path_index"
                                ]
                              }
                            }
                          },
                          "required": [
                            "travel_mode",
                            "path"
                          ]
                        },
                        "minItems": 1
                      },
                      "route_departure_time": {
                        "title": "Departure Time",
                        "description": "The time at which Citymapper thinks the user will set out on this route, given available departure information. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_arrival_time": {
                        "title": "Arrival Time",
                        "description": "The time at which Citymapper thinks the user will arrive at the end of this route, given available departure information and expected travel speed. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_metadata": {
                        "title": "Route Metadata",
                        "description": "Any metadata associated with the Route.",
                        "type": "object",
                        "properties": {
                          "groups": {
                            "type": "array",
                            "items": {
                              "title": "Route Group",
                              "description": "Group associated with specific routes of the same scenario.",
                              "type": "object",
                              "properties": {
                                "group_id": {
                                  "title": "Group ID",
                                  "description": "ID of a group a route contains in.",
                                  "type": "string"
                                },
                                "group_name": {
                                  "title": "Group",
                                  "description": "Localized name of a route group, e.g. 'Transit' or 'Le metro'.",
                                  "type": "string"
                                },
                                "route_position": {
                                  "title": "Route Position",
                                  "description": "A zero-based position of a route within specific group.",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              },
                              "required": [
                                "group_id",
                                "route_position"
                              ]
                            }
                          },
                          "profile_name": {
                            "title": "Profile Name",
                            "description": "Human-readable localized name of the 'profile' identifier. ",
                            "type": "string"
                          }
                        }
                      },
                      "profile": {
                        "title": "Profile",
                        "description": "Indicates which routing 'profile' was used to calculate this Route. For example, a response from a bike routing endpoint may return multiple routes, one with a 'quiet' profile and another with a 'fast' profile. Note that new values can be added at any time, so any code parsing this field must be able to handle unexpected values. This value will match the 'profiles' request parameter on endpoints that support selecting specific routing profiles. This value is intended to be machine readable only. For a profile name to show to a user, use the 'profile_name' in the 'route_metadata' object instead.",
                        "type": "string"
                      },
                      "signature": {
                        "title": "Signature",
                        "description": "A value to be passed back to the server in subsequent calls to refer to this route (for instance, when requesting live departure information via 'service/1/live/routeupdates'). It must be treated as an opaque value.",
                        "type": "string"
                      },
                      "requested_time": {
                        "title": "Requested Time",
                        "description": "Contains the 'time' parameter used as a departure or arrival time constraint when getting directions, if applicable.",
                        "type": "string"
                      },
                      "requested_time_type": {
                        "title": "Requested Time Type",
                        "description": "Contains the 'time_type' parameter used to determine how the 'time' will be used to constrain the directions that are returned, if applicable. If no parameter was given in the request, will return the 'time_type' used by default to plan the Route.",
                        "type": "string",
                        "enum": [
                          "arrive",
                          "depart",
                          "depart_approximate"
                        ]
                      }
                    },
                    "required": [
                      "start",
                      "end",
                      "legs",
                      "signature"
                    ]
                  }
                },
                "language": {
                  "title": "Language",
                  "description": "A IETF BCP 47 language tag that indicates the language used to encode localizable content, such as turning instructions, in this response. This will reflect a best-effort attempt to fulfill any language preference expressed by the 'language' request parameter, or 'en-US' as default.",
                  "type": "string"
                }
              },
              "required": [
                "routes"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "title": "ErrorResponse",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                },
                "error_code": {
                  "title": "Error Code",
                  "description": "A string code that can be used for triggering error handling code paths. Only present in responses with non-200 HTTP code. Note new values may be added at any time. | value | description | | ----- | ----------- | | no-results | The request was in Citymapper's coverage regions, but no results were found. | | coverage-region | The request is outside of Citymapper's coverage regions, or spans disconnected regions. | | coverage-start | The request's 'start' location falls outside of Citymapper's coverage regions. | | coverage-end | The request's 'end' location falls outside of Citymapper's coverage regions. | | coverage-distance | The request's 'start' and 'end' locations are further apart than the maximum allowed for this service. | | signature | A signature included in the request is invalid for use with this service. | | unknown-brand | The request references an unknown Brand ID. | | unknown-scenario | The request references an unknown Scenario ID. | | request-format | The request was semantically malformed. The 'message' field may contain additional details. | | configuration-required | The request can't be completed because of missing configuration. The 'message' should give details. | | deprecated | The request was made to a deprecated service. |",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "description": "Rate Limited",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/directions/motorscooter": {
      "get": {
        "description": "Gets a hired motor scooter route between two points, including any initial and final walks. The resulting route provides enough information to render it on a map, along with a duration estimate. (These results are optimized for larger internal combustion or electric scooters where the rider is seated.) **NOTE:** The resulting route currently assumes that the user can ride directly to the specified 'end' location, not taking into account any parking or coverage zones. Thus, the resulting route will contain only an initial leg of 'travel_mode' 'walk' and a second leg of 'travel_mode' 'self_piloted'. A future update will incorporate parking and coverage zones and add a final 'walk' leg. This call can be used in several different ways:  **Use any scooter of the specified Brand** This is the simplest call, only requiring 'start', 'end', and 'brand_id'. Citymapper assumes that the user is at the 'start' point, and chooses a scooter of the specified Brand, if possible. **Use a scooter at a specified location** By adding 'original_vehicle_location' to 'start', 'end', and 'brand_id', Citymapper plans a route that assumes the scooter is at the given location. **Update a route in progress** In order to retrieve an updated route that includes rerouting from the user's current location if they've diverged from the planned Route, the caller can add the 'current_location' and 'ride_state' properties, which indicates which leg of the resulting route should be rerouted around the user's 'current_location'.",
        "summary": "Get a hired motor scooter route between two points",
        "operationId": "MotorScooterDirections",
        "deprecated": false,
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "x-ms-summary": "Start",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical start of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "end",
            "in": "query",
            "x-ms-summary": "End",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical end of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "brand_id",
            "in": "query",
            "x-ms-summary": "Brand ID",
            "required": true,
            "type": "string",
            "description": "The ID of the Brand of scooters to use for this route. This is necessary in order to determine the location of available scooters, along with any associated coverage and parking restrictions."
          },
          {
            "name": "ride_state",
            "in": "query",
            "x-ms-summary": "State",
            "required": false,
            "enum": [
              "walking_to_vehicle",
              "riding",
              "walking_to_end"
            ],
            "type": "string",
            "description": "Indicates where along the route the user is. If omitted, 'walking_to_vehicle' is used. This property along with 'current_location' allows the retrieval of an updated route that reflects the user's current progress through it. | value | description | | ----- | ----------- | | walking_to_vehicle | Indicates that the user is walking to collect the vehicle | | riding | Indicates that the user is riding the vehicle | | walking_to_end | Indicates that the user has left the vehicle and is walking to their destination |"
          },
          {
            "name": "current_location",
            "in": "query",
            "x-ms-summary": "Current Location",
            "required": false,
            "type": "string",
            "description": "The user's current location, in order to update the route based on the user's location. Provided in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 digits of precision will be used. This parameter is used to get an updated route that reflects the user's actual location if they diverge from the path given in the Route. If this is provided, the returned route will contain this location. Which leg of the route will contain this location is decided by the value of the 'ride_state' parameter."
          },
          {
            "name": "ride_start_location",
            "in": "query",
            "x-ms-summary": "Start Location",
            "required": false,
            "type": "string",
            "description": "The location of the vehicle to be used, at the beginning of the vehicle ride part of the user's trip along the Route. Provided in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 digits of precision will be used. This must be provided when 'ride_state' is 'riding' or 'walking_to_end'. If not provided when 'ride_state' is 'walking_to_vehicle' (or not specified), Citymapper will attempt to find the most appropriate vehicle that belongs to the specified 'brand_id'. For compatibility, 'original_vehicle_location' is an alias for this parameter"
          },
          {
            "name": "ride_end_location",
            "in": "query",
            "x-ms-summary": "End Location",
            "required": false,
            "type": "string",
            "description": "The location the vehicle was dropped off at the end of the vehicle ride part of the user's trip along the Route. Provided in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 digits of precision will be used. This must be provided when 'ride_state' is 'walking_to_end'. In all other states this parameter is ignored."
          },
          {
            "name": "language",
            "in": "query",
            "x-ms-summary": "Language",
            "required": false,
            "type": "string",
            "description": "An IETF BCP 47 language tag that indicates the end-user's language preference.  When provided, the response will contain a 'language' property that indicates the language used for any localizable elements of the response (such as turning instructions). This language will be a best-effort attempt to fulfill the expressed preference, but it may contain a value that wasn't expressed in the request (this will generally be 'en-US' as a fallback). Note that language preference will generally only affect Citymapper-generated content such as turning instructions. External content such as Stop names and Status descriptions will generally be passed through in their original language."
          },
          {
            "name": "reroute_signature",
            "in": "query",
            "x-ms-summary": "Reroute Signature",
            "required": false,
            "type": "string",
            "description": "When rerouting (requesting an update to a previous response that accounts for the user's updated location), this value should be set to the 'signature' provided in the original Route. This allows for more efficient determination of the updated Route. This value must be URL-encoded. When providing this parameter, the 'current_location' (when applicable) or 'start' location should be set to the user's latest location. When this parameter is included, Citymapper may not return results in cases where the request differs significantly from the original, for instance if the 'end' location is different, or if more than 1 hour has passed since the original request."
          },
          {
            "name": "start_bearing",
            "in": "query",
            "x-ms-summary": "Start Bearing",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "An angle clockwise from North between 0 and 359, where North is 0 and East is 90. This bearing is used to influence the initial instruction text and/or routing, most-commonly to avoid the user from being asked to make a u-turn, if continuing on their current bearing gives a comparable route. This should be provided only if you wish to influence the initial direction of travel for the route."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routes": {
                  "type": "array",
                  "items": {
                    "title": "Route",
                    "type": "object",
                    "properties": {
                      "start": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "end": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "distance_meters": {
                        "title": "Distance in Meters",
                        "description": "The overall distance of the entire Route, in meters.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_seconds": {
                        "title": "Duration",
                        "description": "The overall estimated time to traverse the entire Route, in seconds, based on the selected vehicle or departure in the response.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_accuracy": {
                        "title": "Duration Accuracy",
                        "description": "Citymapper's assessment of how the accuracy level of 'duration_seconds' should be displayed to the user. This is largely based on the 'type' of the Departures used for times, but it involves additional heuristics developed over time for the Citymapper app. When this field is not provided, the value 'scheduled' should be used. | value | description | | ----- | ----------- | | estimated | A duration that should be considered approximate, as its calculation involved more uncertainty than usual. This is the lowest accuracy. | | scheduled | A normal duration, typically based on published timetable information. | | live | A duration largely based on real-time/live departure information. This is the highest accuracy. |",
                        "type": "string",
                        "enum": [
                          "estimated",
                          "scheduled",
                          "live"
                        ],
                        "default": "scheduled"
                      },
                      "price": {
                        "title": "Price",
                        "description": "Represents a monetary amount. This may either be  - An exact amount, represented by 'amount'. Formatted as e.g. '$31.50'  - A range of values between 'amount_range_minimum' and 'amount_range_maximum'. Formatted as e.g. '$318-22'  - A minimum price where the maximum is not known, represented by 'amount_range_minimum' but no 'amount_range_maximum'. Formatted as e.g. '$318+'",
                        "type": "object",
                        "properties": {
                          "formatted": {
                            "title": "Formatted",
                            "description": "The given price as a formatted string. By default, this is in the native currency format of the region where the route occurs.",
                            "type": "string"
                          },
                          "amount": {
                            "title": "Amount",
                            "description": "The price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_minimum": {
                            "title": "Amount Range Minimum",
                            "description": "If this Price represents a range of possible values, the minimum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_maximum": {
                            "title": "Amount range Maximum",
                            "description": "If this Price represents a range of possible values, the maximum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region. This may not be included if the range is open-ended",
                            "type": "string"
                          },
                          "currency": {
                            "title": "Currency",
                            "description": "The currency in which the price is given, in three-letter ISO 4217 form.",
                            "type": "string"
                          },
                          "demand_multipler": {
                            "title": "Demand Multiplier",
                            "description": "Indicates that prices are higher than usual because of demand, usually for Taxi (On-Demand) legs. May in rare cases be less than 1.0",
                            "type": "number",
                            "format": "float"
                          }
                        },
                        "required": [
                          "formatted"
                        ]
                      },
                      "emissions_grams_co2e": {
                        "title": "CO2e Emissions",
                        "description": "An estimate of the greenhouse gas emissions of the route, expressed in grams of carbon dioxide equivalent (CO2e).",
                        "type": "number",
                        "format": "float"
                      },
                      "legs": {
                        "title": "Legs",
                        "description": "Array of legs comprising the Route, in the order in which they should be traversed. Every valid route will have at least one.",
                        "type": "array",
                        "items": {
                          "title": "Leg",
                          "type": "object",
                          "properties": {
                            "travel_mode": {
                              "title": "Travel Mode",
                              "description": "The travel mode.",
                              "type": "string"
                            },
                            "duration_seconds": {
                              "title": "Duration",
                              "description": "The time required to traverse this leg, excluding any waiting or boarding time at the beginning. May be omitted in rare circumstances when the duration cannot be computed.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "title": "Path",
                              "description": "The geographic path that the leg traverses, as a series of WGS84 coordinates encoded in Google Polyline Format, with a decimal precision of 5 digits. For example, the value '_flyHbjPDZBTBNDJ' encodes the following series of (latitude, longitude) coordinates: '' [(51.51344, -0.08882), (51.51341, -0.08896), (51.51339, -0.08907), (51.51337, -0.08915), (51.51334, -0.08921)] ''",
                              "type": "string"
                            },
                            "instructions": {
                              "title": "Instructions",
                              "description": "This provides the list of turn instructions to guide the user through legs where the user needs to navigate, such as when walking or using a scooter or bike.",
                              "type": "array",
                              "items": {
                                "title": "Instruction",
                                "type": "object",
                                "properties": {
                                  "path_index": {
                                    "title": "Path Index",
                                    "description": "0-based index into the list of coordinates provided by the 'path' property of the leg. This indicates the location at which the instruction is to be followed, so it will be the location of the turn on the path, or the start or end of the leg.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "distance_meters": {
                                    "title": "Distance",
                                    "description": "The distance in meters of the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "time_seconds": {
                                    "title": "Time",
                                    "description": "The time in seconds that the user is expected to take to traverse the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "description_text": {
                                    "title": "Description",
                                    "description": "Plain-text description of the Instruction to the user.",
                                    "type": "string"
                                  },
                                  "description_format": {
                                    "title": "Description Format",
                                    "description": "Text format for rendering the Instruction with emphasized elements, where '{key}' indicates a part of the string that must be replaced with content defined by the entry corresponding to 'key' in 'description_format_replacements'. This allows the elements described by the replacements to be formatted differently by the client, if desired. Key strings will contain only the characters '[a-zA-Z0-9]'. '{ }' will not be nested, and the literal characters '{' and '}' are encoded by the escape sequences '\\{' and '\\}', respectively.",
                                    "type": "string"
                                  },
                                  "description_format_replacements": {
                                    "type": "array",
                                    "items": {
                                      "title": "DescriptionFormatReplacement",
                                      "type": "object",
                                      "properties": {
                                        "key": {
                                          "title": "Key",
                                          "description": "A key corresponding to a string enclosed in '{}' in 'description_format'.",
                                          "type": "string"
                                        },
                                        "text": {
                                          "title": "Text",
                                          "description": "The text to be used to replace the '{key}' substring in the 'description_format'.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "type": "string",
                                          "title": "Type",
                                          "description": "A value indicating what kind of real-world thing is being identified by this format replacement. This allows service clients to apply application-specific formatting if desired. | value | description | | ----- | ----------- | | street_name | The name of a street, road, or other way | | exit_number | The number of an exit, generally from a roundabout |",
                                          "enum": [
                                            "street_name",
                                            "exit_number"
                                          ]
                                        },
                                        "language": {
                                          "title": "Language",
                                          "description": "An IETF BCP 47 language tag that indicates what language the associated 'text' is in. Note that this can be different from the language of the surrounding description - this is most common when the replacement is a place-name in a local language whilst the description is in a different language.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "text"
                                      ]
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "title": "Type",
                                    "description": "Indicates the type of Instruction.",
                                    "enum": [
                                      "depart",
                                      "turn",
                                      "enter_roundabout",
                                      "exit_roundabout",
                                      "arrive"
                                    ]
                                  },
                                  "type_direction": {
                                    "type": "string",
                                    "title": "Type Direction",
                                    "description": "Indicates a direction that modifies this Instruction.",
                                    "enum": [
                                      "straight",
                                      "uturn",
                                      "left",
                                      "slight_left",
                                      "sharp_left",
                                      "right",
                                      "slight_right",
                                      "sharp_right"
                                    ]
                                  }
                                },
                                "required": [
                                  "path_index"
                                ]
                              }
                            }
                          },
                          "required": [
                            "travel_mode",
                            "path"
                          ]
                        },
                        "minItems": 1
                      },
                      "route_departure_time": {
                        "title": "Departure Time",
                        "description": "The time at which Citymapper thinks the user will set out on this route, given available departure information. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_arrival_time": {
                        "title": "Arrival Time",
                        "description": "The time at which Citymapper thinks the user will arrive at the end of this route, given available departure information and expected travel speed. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_metadata": {
                        "title": "Route Metadata",
                        "description": "Any metadata associated with the Route.",
                        "type": "object",
                        "properties": {
                          "groups": {
                            "type": "array",
                            "items": {
                              "title": "Route Group",
                              "description": "Group associated with specific routes of the same scenario.",
                              "type": "object",
                              "properties": {
                                "group_id": {
                                  "title": "Group ID",
                                  "description": "ID of a group a route contains in.",
                                  "type": "string"
                                },
                                "group_name": {
                                  "title": "Group",
                                  "description": "Localized name of a route group, e.g. 'Transit' or 'Le metro'.",
                                  "type": "string"
                                },
                                "route_position": {
                                  "title": "Route Position",
                                  "description": "A zero-based position of a route within specific group.",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              },
                              "required": [
                                "group_id",
                                "route_position"
                              ]
                            }
                          },
                          "profile_name": {
                            "title": "Profile Name",
                            "description": "Human-readable localized name of the 'profile' identifier. ",
                            "type": "string"
                          }
                        }
                      },
                      "profile": {
                        "title": "Profile",
                        "description": "Indicates which routing 'profile' was used to calculate this Route. For example, a response from a bike routing endpoint may return multiple routes, one with a 'quiet' profile and another with a 'fast' profile. Note that new values can be added at any time, so any code parsing this field must be able to handle unexpected values. This value will match the 'profiles' request parameter on endpoints that support selecting specific routing profiles. This value is intended to be machine readable only. For a profile name to show to a user, use the 'profile_name' in the 'route_metadata' object instead.",
                        "type": "string"
                      },
                      "signature": {
                        "title": "Signature",
                        "description": "A value to be passed back to the server in subsequent calls to refer to this route (for instance, when requesting live departure information via 'service/1/live/routeupdates'). It must be treated as an opaque value.",
                        "type": "string"
                      },
                      "requested_time": {
                        "title": "Requested Time",
                        "description": "Contains the 'time' parameter used as a departure or arrival time constraint when getting directions, if applicable.",
                        "type": "string"
                      },
                      "requested_time_type": {
                        "title": "Requested Time Type",
                        "description": "Contains the 'time_type' parameter used to determine how the 'time' will be used to constrain the directions that are returned, if applicable. If no parameter was given in the request, will return the 'time_type' used by default to plan the Route.",
                        "type": "string",
                        "enum": [
                          "arrive",
                          "depart",
                          "depart_approximate"
                        ]
                      }
                    },
                    "required": [
                      "start",
                      "end",
                      "legs",
                      "signature"
                    ]
                  }
                },
                "language": {
                  "title": "Language",
                  "description": "A IETF BCP 47 language tag that indicates the language used to encode localizable content, such as turning instructions, in this response. This will reflect a best-effort attempt to fulfill any language preference expressed by the 'language' request parameter, or 'en-US' as default.",
                  "type": "string"
                }
              },
              "required": [
                "routes"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "title": "ErrorResponse",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                },
                "error_code": {
                  "title": "Error Code",
                  "description": "A string code that can be used for triggering error handling code paths. Only present in responses with non-200 HTTP code. Note new values may be added at any time. | value | description | | ----- | ----------- | | no-results | The request was in Citymapper's coverage regions, but no results were found. | | coverage-region | The request is outside of Citymapper's coverage regions, or spans disconnected regions. | | coverage-start | The request's 'start' location falls outside of Citymapper's coverage regions. | | coverage-end | The request's 'end' location falls outside of Citymapper's coverage regions. | | coverage-distance | The request's 'start' and 'end' locations are further apart than the maximum allowed for this service. | | signature | A signature included in the request is invalid for use with this service. | | unknown-brand | The request references an unknown Brand ID. | | unknown-scenario | The request references an unknown Scenario ID. | | request-format | The request was semantically malformed. The 'message' field may contain additional details. | | configuration-required | The request can't be completed because of missing configuration. The 'message' should give details. | | deprecated | The request was made to a deprecated service. |",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "description": "Rate Limited",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/directions/taxi": {
      "get": {
        "description": "Gets a taxi route between two points. The resulting route provides enough information to render it on a map, along with a duration estimate. The route may contain starting and ending walk legs if the pick-up or drop-off points aren't close to the requested start and end coordinates. The Services in the response will vary depending on the local availability, time of day and, additionally, which Taxi service integrations have been configured for your account. There are two recommended ways to use this service: You can request a taxi route with live on-demand service estimates included up-front by calling with '?fetch_on_demand_services=true'; or you can make the initial request without fetching estimates which will respond with the non-live route, then immediately call '1/live/routeupdates' to get the additional live estimates. The first approach is simpler, but the second may better fit your use-case.",
        "summary": "Get a taxi route between two points",
        "operationId": "TaxiDirections",
        "deprecated": false,
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "x-ms-summary": "Start",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical start of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "end",
            "in": "query",
            "x-ms-summary": "End",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical end of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "fetch_on_demand_services",
            "in": "query",
            "x-ms-summary": "Fetch On-Domain Services",
            "required": false,
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "If set to 'true', additional information will be requested from your Taxi service integrations to provide more accurate and complete pricing, duration and service availability, returned in the on-demand leg's updatable detail. To provide this, the Route's start and end locations need to be transmitted to these Third-Party services, including in the case that one or the other is the user's current or recent location. Be aware that you may need to have explicit informed consent from your end-user to set this to 'true' depending on applicable laws and regulations. If set to 'false' or omitted, no requests will be made to any Third-Party services."
          },
          {
            "name": "brand_ids",
            "in": "query",
            "x-ms-summary": "Brand IDs",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Comma-separated list of Brand IDs to limit this directions request to. If omitted (default), all brands available to you will have a Taxi route returned."
          },
          {
            "name": "language",
            "in": "query",
            "x-ms-summary": "Language",
            "required": false,
            "type": "string",
            "description": "An IETF BCP 47 language tag that indicates the end-user's language preference.  When provided, the response will contain a 'language' property that indicates the language used for any localizable elements of the response (such as turning instructions). This language will be a best-effort attempt to fulfill the expressed preference, but it may contain a value that wasn't expressed in the request (this will generally be 'en-US' as a fallback). Note that language preference will generally only affect Citymapper-generated content such as turning instructions. External content such as Stop names and Status descriptions will generally be passed through in their original language."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routes": {
                  "type": "array",
                  "items": {
                    "title": "Route",
                    "type": "object",
                    "properties": {
                      "start": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "end": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "distance_meters": {
                        "title": "Distance in Meters",
                        "description": "The overall distance of the entire Route, in meters.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_seconds": {
                        "title": "Duration",
                        "description": "The overall estimated time to traverse the entire Route, in seconds, based on the selected vehicle or departure in the response.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_accuracy": {
                        "title": "Duration Accuracy",
                        "description": "Citymapper's assessment of how the accuracy level of 'duration_seconds' should be displayed to the user. This is largely based on the 'type' of the Departures used for times, but it involves additional heuristics developed over time for the Citymapper app. When this field is not provided, the value 'scheduled' should be used. | value | description | | ----- | ----------- | | estimated | A duration that should be considered approximate, as its calculation involved more uncertainty than usual. This is the lowest accuracy. | | scheduled | A normal duration, typically based on published timetable information. | | live | A duration largely based on real-time/live departure information. This is the highest accuracy. |",
                        "type": "string",
                        "enum": [
                          "estimated",
                          "scheduled",
                          "live"
                        ],
                        "default": "scheduled"
                      },
                      "price": {
                        "title": "Price",
                        "description": "Represents a monetary amount. This may either be  - An exact amount, represented by 'amount'. Formatted as e.g. '$31.50'  - A range of values between 'amount_range_minimum' and 'amount_range_maximum'. Formatted as e.g. '$318-22'  - A minimum price where the maximum is not known, represented by 'amount_range_minimum' but no 'amount_range_maximum'. Formatted as e.g. '$318+'",
                        "type": "object",
                        "properties": {
                          "formatted": {
                            "title": "Formatted",
                            "description": "The given price as a formatted string. By default, this is in the native currency format of the region where the route occurs.",
                            "type": "string"
                          },
                          "amount": {
                            "title": "Amount",
                            "description": "The price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_minimum": {
                            "title": "Amount Range Minimum",
                            "description": "If this Price represents a range of possible values, the minimum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_maximum": {
                            "title": "Amount range Maximum",
                            "description": "If this Price represents a range of possible values, the maximum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region. This may not be included if the range is open-ended",
                            "type": "string"
                          },
                          "currency": {
                            "title": "Currency",
                            "description": "The currency in which the price is given, in three-letter ISO 4217 form.",
                            "type": "string"
                          },
                          "demand_multipler": {
                            "title": "Demand Multiplier",
                            "description": "Indicates that prices are higher than usual because of demand, usually for Taxi (On-Demand) legs. May in rare cases be less than 1.0",
                            "type": "number",
                            "format": "float"
                          }
                        },
                        "required": [
                          "formatted"
                        ]
                      },
                      "emissions_grams_co2e": {
                        "title": "CO2e Emissions",
                        "description": "An estimate of the greenhouse gas emissions of the route, expressed in grams of carbon dioxide equivalent (CO2e).",
                        "type": "number",
                        "format": "float"
                      },
                      "legs": {
                        "title": "Legs",
                        "description": "Array of legs comprising the Route, in the order in which they should be traversed. Every valid route will have at least one.",
                        "type": "array",
                        "items": {
                          "title": "Leg",
                          "type": "object",
                          "properties": {
                            "travel_mode": {
                              "title": "Travel Mode",
                              "description": "The travel mode.",
                              "type": "string"
                            },
                            "duration_seconds": {
                              "title": "Duration",
                              "description": "The time required to traverse this leg, excluding any waiting or boarding time at the beginning. May be omitted in rare circumstances when the duration cannot be computed.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "title": "Path",
                              "description": "The geographic path that the leg traverses, as a series of WGS84 coordinates encoded in Google Polyline Format, with a decimal precision of 5 digits. For example, the value '_flyHbjPDZBTBNDJ' encodes the following series of (latitude, longitude) coordinates: '' [(51.51344, -0.08882), (51.51341, -0.08896), (51.51339, -0.08907), (51.51337, -0.08915), (51.51334, -0.08921)] ''",
                              "type": "string"
                            },
                            "instructions": {
                              "title": "Instructions",
                              "description": "This provides the list of turn instructions to guide the user through legs where the user needs to navigate, such as when walking or using a scooter or bike.",
                              "type": "array",
                              "items": {
                                "title": "Instruction",
                                "type": "object",
                                "properties": {
                                  "path_index": {
                                    "title": "Path Index",
                                    "description": "0-based index into the list of coordinates provided by the 'path' property of the leg. This indicates the location at which the instruction is to be followed, so it will be the location of the turn on the path, or the start or end of the leg.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "distance_meters": {
                                    "title": "Distance",
                                    "description": "The distance in meters of the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "time_seconds": {
                                    "title": "Time",
                                    "description": "The time in seconds that the user is expected to take to traverse the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "description_text": {
                                    "title": "Description",
                                    "description": "Plain-text description of the Instruction to the user.",
                                    "type": "string"
                                  },
                                  "description_format": {
                                    "title": "Description Format",
                                    "description": "Text format for rendering the Instruction with emphasized elements, where '{key}' indicates a part of the string that must be replaced with content defined by the entry corresponding to 'key' in 'description_format_replacements'. This allows the elements described by the replacements to be formatted differently by the client, if desired. Key strings will contain only the characters '[a-zA-Z0-9]'. '{ }' will not be nested, and the literal characters '{' and '}' are encoded by the escape sequences '\\{' and '\\}', respectively.",
                                    "type": "string"
                                  },
                                  "description_format_replacements": {
                                    "type": "array",
                                    "items": {
                                      "title": "DescriptionFormatReplacement",
                                      "type": "object",
                                      "properties": {
                                        "key": {
                                          "title": "Key",
                                          "description": "A key corresponding to a string enclosed in '{}' in 'description_format'.",
                                          "type": "string"
                                        },
                                        "text": {
                                          "title": "Text",
                                          "description": "The text to be used to replace the '{key}' substring in the 'description_format'.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "type": "string",
                                          "title": "Type",
                                          "description": "A value indicating what kind of real-world thing is being identified by this format replacement. This allows service clients to apply application-specific formatting if desired. | value | description | | ----- | ----------- | | street_name | The name of a street, road, or other way | | exit_number | The number of an exit, generally from a roundabout |",
                                          "enum": [
                                            "street_name",
                                            "exit_number"
                                          ]
                                        },
                                        "language": {
                                          "title": "Language",
                                          "description": "An IETF BCP 47 language tag that indicates what language the associated 'text' is in. Note that this can be different from the language of the surrounding description - this is most common when the replacement is a place-name in a local language whilst the description is in a different language.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "text"
                                      ]
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "title": "Type",
                                    "description": "Indicates the type of Instruction.",
                                    "enum": [
                                      "depart",
                                      "turn",
                                      "enter_roundabout",
                                      "exit_roundabout",
                                      "arrive"
                                    ]
                                  },
                                  "type_direction": {
                                    "type": "string",
                                    "title": "Type Direction",
                                    "description": "Indicates a direction that modifies this Instruction.",
                                    "enum": [
                                      "straight",
                                      "uturn",
                                      "left",
                                      "slight_left",
                                      "sharp_left",
                                      "right",
                                      "slight_right",
                                      "sharp_right"
                                    ]
                                  }
                                },
                                "required": [
                                  "path_index"
                                ]
                              }
                            }
                          },
                          "required": [
                            "travel_mode",
                            "path"
                          ]
                        },
                        "minItems": 1
                      },
                      "route_departure_time": {
                        "title": "Departure Time",
                        "description": "The time at which Citymapper thinks the user will set out on this route, given available departure information. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_arrival_time": {
                        "title": "Arrival Time",
                        "description": "The time at which Citymapper thinks the user will arrive at the end of this route, given available departure information and expected travel speed. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_metadata": {
                        "title": "Route Metadata",
                        "description": "Any metadata associated with the Route.",
                        "type": "object",
                        "properties": {
                          "groups": {
                            "type": "array",
                            "items": {
                              "title": "Route Group",
                              "description": "Group associated with specific routes of the same scenario.",
                              "type": "object",
                              "properties": {
                                "group_id": {
                                  "title": "Group ID",
                                  "description": "ID of a group a route contains in.",
                                  "type": "string"
                                },
                                "group_name": {
                                  "title": "Group",
                                  "description": "Localized name of a route group, e.g. 'Transit' or 'Le metro'.",
                                  "type": "string"
                                },
                                "route_position": {
                                  "title": "Route Position",
                                  "description": "A zero-based position of a route within specific group.",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              },
                              "required": [
                                "group_id",
                                "route_position"
                              ]
                            }
                          },
                          "profile_name": {
                            "title": "Profile Name",
                            "description": "Human-readable localized name of the 'profile' identifier. ",
                            "type": "string"
                          }
                        }
                      },
                      "profile": {
                        "title": "Profile",
                        "description": "Indicates which routing 'profile' was used to calculate this Route. For example, a response from a bike routing endpoint may return multiple routes, one with a 'quiet' profile and another with a 'fast' profile. Note that new values can be added at any time, so any code parsing this field must be able to handle unexpected values. This value will match the 'profiles' request parameter on endpoints that support selecting specific routing profiles. This value is intended to be machine readable only. For a profile name to show to a user, use the 'profile_name' in the 'route_metadata' object instead.",
                        "type": "string"
                      },
                      "signature": {
                        "title": "Signature",
                        "description": "A value to be passed back to the server in subsequent calls to refer to this route (for instance, when requesting live departure information via 'service/1/live/routeupdates'). It must be treated as an opaque value.",
                        "type": "string"
                      },
                      "requested_time": {
                        "title": "Requested Time",
                        "description": "Contains the 'time' parameter used as a departure or arrival time constraint when getting directions, if applicable.",
                        "type": "string"
                      },
                      "requested_time_type": {
                        "title": "Requested Time Type",
                        "description": "Contains the 'time_type' parameter used to determine how the 'time' will be used to constrain the directions that are returned, if applicable. If no parameter was given in the request, will return the 'time_type' used by default to plan the Route.",
                        "type": "string",
                        "enum": [
                          "arrive",
                          "depart",
                          "depart_approximate"
                        ]
                      }
                    },
                    "required": [
                      "start",
                      "end",
                      "legs",
                      "signature"
                    ]
                  }
                },
                "language": {
                  "title": "Language",
                  "description": "A IETF BCP 47 language tag that indicates the language used to encode localizable content, such as turning instructions, in this response. This will reflect a best-effort attempt to fulfill any language preference expressed by the 'language' request parameter, or 'en-US' as default.",
                  "type": "string"
                }
              },
              "required": [
                "routes"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "title": "ErrorResponse",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                },
                "error_code": {
                  "title": "Error Code",
                  "description": "A string code that can be used for triggering error handling code paths. Only present in responses with non-200 HTTP code. Note new values may be added at any time. | value | description | | ----- | ----------- | | no-results | The request was in Citymapper's coverage regions, but no results were found. | | coverage-region | The request is outside of Citymapper's coverage regions, or spans disconnected regions. | | coverage-start | The request's 'start' location falls outside of Citymapper's coverage regions. | | coverage-end | The request's 'end' location falls outside of Citymapper's coverage regions. | | coverage-distance | The request's 'start' and 'end' locations are further apart than the maximum allowed for this service. | | signature | A signature included in the request is invalid for use with this service. | | unknown-brand | The request references an unknown Brand ID. | | unknown-scenario | The request references an unknown Scenario ID. | | request-format | The request was semantically malformed. The 'message' field may contain additional details. | | configuration-required | The request can't be completed because of missing configuration. The 'message' should give details. | | deprecated | The request was made to a deprecated service. |",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "description": "Rate Limited",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/directions/walk": {
      "get": {
        "description": "Gets a walking route between two points, providing enough information to render it on a map, along with a duration estimate. Walking routes are expected to have a single leg with a 'travel_mode' of 'walk'. If Citymapper can't compute walking directions for those points (generally for coverage reasons), the service will return a code '400' response. The maximum great-circle distance between the 'start' and 'end' is limited to 100km for this service.",
        "summary": "Get a walking route between two points",
        "operationId": "WalkDirections",
        "deprecated": false,
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "x-ms-summary": "Start",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical start of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "end",
            "in": "query",
            "x-ms-summary": "End",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical end of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "language",
            "in": "query",
            "x-ms-summary": "Language",
            "required": false,
            "type": "string",
            "description": "An IETF BCP 47 language tag that indicates the end-user's language preference.  When provided, the response will contain a 'language' property that indicates the language used for any localizable elements of the response (such as turning instructions). This language will be a best-effort attempt to fulfill the expressed preference, but it may contain a value that wasn't expressed in the request (this will generally be 'en-US' as a fallback). Note that language preference will generally only affect Citymapper-generated content such as turning instructions. External content such as Stop names and Status descriptions will generally be passed through in their original language."
          },
          {
            "name": "profiles",
            "in": "query",
            "x-ms-summary": "Profiles",
            "required": false,
            "type": "string",
            "description": "Indicates which 'profiles' to use when calculating walking directions. Each profile can generate a different route option, so requesting more profiles will generally give more options. Note that sometimes some of the resulting routes will be identical (in the case of one route being optimal in more than one way), and a profile may not always yield a Route. Not all profiles will be available for all start and end routes. Unavailable profiles will be omitted from the response. | value | description | | ----- | ----------- | | fast | The default profile, attempts to find the fastest sensible route | | main_roads | Attempts to avoid backstreets and parks | If no profiles are specified, 'fast' will be used."
          },
          {
            "name": "reroute_signature",
            "in": "query",
            "x-ms-summary": "Reroute Signature",
            "required": false,
            "type": "string",
            "description": "When rerouting (requesting an update to a previous response that accounts for the user's updated location), this value should be set to the 'signature' provided in the original Route. This allows for more efficient determination of the updated Route. This value must be URL-encoded. When providing this parameter, the 'current_location' (when applicable) or 'start' location should be set to the user's latest location. When this parameter is included, Citymapper may not return results in cases where the request differs significantly from the original, for instance if the 'end' location is different, or if more than 1 hour has passed since the original request."
          },
          {
            "name": "start_bearing",
            "in": "query",
            "x-ms-summary": "Start Bearing",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "An angle clockwise from North between 0 and 359, where North is 0 and East is 90. This bearing is used to influence the initial instruction text and/or routing, most-commonly to avoid the user from being asked to make a u-turn, if continuing on their current bearing gives a comparable route. This should be provided only if you wish to influence the initial direction of travel for the route."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routes": {
                  "type": "array",
                  "items": {
                    "title": "Route",
                    "type": "object",
                    "properties": {
                      "start": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "end": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "distance_meters": {
                        "title": "Distance in Meters",
                        "description": "The overall distance of the entire Route, in meters.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_seconds": {
                        "title": "Duration",
                        "description": "The overall estimated time to traverse the entire Route, in seconds, based on the selected vehicle or departure in the response.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_accuracy": {
                        "title": "Duration Accuracy",
                        "description": "Citymapper's assessment of how the accuracy level of 'duration_seconds' should be displayed to the user. This is largely based on the 'type' of the Departures used for times, but it involves additional heuristics developed over time for the Citymapper app. When this field is not provided, the value 'scheduled' should be used. | value | description | | ----- | ----------- | | estimated | A duration that should be considered approximate, as its calculation involved more uncertainty than usual. This is the lowest accuracy. | | scheduled | A normal duration, typically based on published timetable information. | | live | A duration largely based on real-time/live departure information. This is the highest accuracy. |",
                        "type": "string",
                        "enum": [
                          "estimated",
                          "scheduled",
                          "live"
                        ],
                        "default": "scheduled"
                      },
                      "price": {
                        "title": "Price",
                        "description": "Represents a monetary amount. This may either be  - An exact amount, represented by 'amount'. Formatted as e.g. '$31.50'  - A range of values between 'amount_range_minimum' and 'amount_range_maximum'. Formatted as e.g. '$318-22'  - A minimum price where the maximum is not known, represented by 'amount_range_minimum' but no 'amount_range_maximum'. Formatted as e.g. '$318+'",
                        "type": "object",
                        "properties": {
                          "formatted": {
                            "title": "Formatted",
                            "description": "The given price as a formatted string. By default, this is in the native currency format of the region where the route occurs.",
                            "type": "string"
                          },
                          "amount": {
                            "title": "Amount",
                            "description": "The price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_minimum": {
                            "title": "Amount Range Minimum",
                            "description": "If this Price represents a range of possible values, the minimum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_maximum": {
                            "title": "Amount range Maximum",
                            "description": "If this Price represents a range of possible values, the maximum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region. This may not be included if the range is open-ended",
                            "type": "string"
                          },
                          "currency": {
                            "title": "Currency",
                            "description": "The currency in which the price is given, in three-letter ISO 4217 form.",
                            "type": "string"
                          },
                          "demand_multipler": {
                            "title": "Demand Multiplier",
                            "description": "Indicates that prices are higher than usual because of demand, usually for Taxi (On-Demand) legs. May in rare cases be less than 1.0",
                            "type": "number",
                            "format": "float"
                          }
                        },
                        "required": [
                          "formatted"
                        ]
                      },
                      "emissions_grams_co2e": {
                        "title": "CO2e Emissions",
                        "description": "An estimate of the greenhouse gas emissions of the route, expressed in grams of carbon dioxide equivalent (CO2e).",
                        "type": "number",
                        "format": "float"
                      },
                      "legs": {
                        "title": "Legs",
                        "description": "Array of legs comprising the Route, in the order in which they should be traversed. Every valid route will have at least one.",
                        "type": "array",
                        "items": {
                          "title": "Leg",
                          "type": "object",
                          "properties": {
                            "travel_mode": {
                              "title": "Travel Mode",
                              "description": "The travel mode.",
                              "type": "string"
                            },
                            "duration_seconds": {
                              "title": "Duration",
                              "description": "The time required to traverse this leg, excluding any waiting or boarding time at the beginning. May be omitted in rare circumstances when the duration cannot be computed.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "title": "Path",
                              "description": "The geographic path that the leg traverses, as a series of WGS84 coordinates encoded in Google Polyline Format, with a decimal precision of 5 digits. For example, the value '_flyHbjPDZBTBNDJ' encodes the following series of (latitude, longitude) coordinates: '' [(51.51344, -0.08882), (51.51341, -0.08896), (51.51339, -0.08907), (51.51337, -0.08915), (51.51334, -0.08921)] ''",
                              "type": "string"
                            },
                            "instructions": {
                              "title": "Instructions",
                              "description": "This provides the list of turn instructions to guide the user through legs where the user needs to navigate, such as when walking or using a scooter or bike.",
                              "type": "array",
                              "items": {
                                "title": "Instruction",
                                "type": "object",
                                "properties": {
                                  "path_index": {
                                    "title": "Path Index",
                                    "description": "0-based index into the list of coordinates provided by the 'path' property of the leg. This indicates the location at which the instruction is to be followed, so it will be the location of the turn on the path, or the start or end of the leg.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "distance_meters": {
                                    "title": "Distance",
                                    "description": "The distance in meters of the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "time_seconds": {
                                    "title": "Time",
                                    "description": "The time in seconds that the user is expected to take to traverse the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "description_text": {
                                    "title": "Description",
                                    "description": "Plain-text description of the Instruction to the user.",
                                    "type": "string"
                                  },
                                  "description_format": {
                                    "title": "Description Format",
                                    "description": "Text format for rendering the Instruction with emphasized elements, where '{key}' indicates a part of the string that must be replaced with content defined by the entry corresponding to 'key' in 'description_format_replacements'. This allows the elements described by the replacements to be formatted differently by the client, if desired. Key strings will contain only the characters '[a-zA-Z0-9]'. '{ }' will not be nested, and the literal characters '{' and '}' are encoded by the escape sequences '\\{' and '\\}', respectively.",
                                    "type": "string"
                                  },
                                  "description_format_replacements": {
                                    "type": "array",
                                    "items": {
                                      "title": "DescriptionFormatReplacement",
                                      "type": "object",
                                      "properties": {
                                        "key": {
                                          "title": "Key",
                                          "description": "A key corresponding to a string enclosed in '{}' in 'description_format'.",
                                          "type": "string"
                                        },
                                        "text": {
                                          "title": "Text",
                                          "description": "The text to be used to replace the '{key}' substring in the 'description_format'.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "type": "string",
                                          "title": "Type",
                                          "description": "A value indicating what kind of real-world thing is being identified by this format replacement. This allows service clients to apply application-specific formatting if desired. | value | description | | ----- | ----------- | | street_name | The name of a street, road, or other way | | exit_number | The number of an exit, generally from a roundabout |",
                                          "enum": [
                                            "street_name",
                                            "exit_number"
                                          ]
                                        },
                                        "language": {
                                          "title": "Language",
                                          "description": "An IETF BCP 47 language tag that indicates what language the associated 'text' is in. Note that this can be different from the language of the surrounding description - this is most common when the replacement is a place-name in a local language whilst the description is in a different language.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "text"
                                      ]
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "title": "Type",
                                    "description": "Indicates the type of Instruction.",
                                    "enum": [
                                      "depart",
                                      "turn",
                                      "enter_roundabout",
                                      "exit_roundabout",
                                      "arrive"
                                    ]
                                  },
                                  "type_direction": {
                                    "type": "string",
                                    "title": "Type Direction",
                                    "description": "Indicates a direction that modifies this Instruction.",
                                    "enum": [
                                      "straight",
                                      "uturn",
                                      "left",
                                      "slight_left",
                                      "sharp_left",
                                      "right",
                                      "slight_right",
                                      "sharp_right"
                                    ]
                                  }
                                },
                                "required": [
                                  "path_index"
                                ]
                              }
                            }
                          },
                          "required": [
                            "travel_mode",
                            "path"
                          ]
                        },
                        "minItems": 1
                      },
                      "route_departure_time": {
                        "title": "Departure Time",
                        "description": "The time at which Citymapper thinks the user will set out on this route, given available departure information. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_arrival_time": {
                        "title": "Arrival Time",
                        "description": "The time at which Citymapper thinks the user will arrive at the end of this route, given available departure information and expected travel speed. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_metadata": {
                        "title": "Route Metadata",
                        "description": "Any metadata associated with the Route.",
                        "type": "object",
                        "properties": {
                          "groups": {
                            "type": "array",
                            "items": {
                              "title": "Route Group",
                              "description": "Group associated with specific routes of the same scenario.",
                              "type": "object",
                              "properties": {
                                "group_id": {
                                  "title": "Group ID",
                                  "description": "ID of a group a route contains in.",
                                  "type": "string"
                                },
                                "group_name": {
                                  "title": "Group",
                                  "description": "Localized name of a route group, e.g. 'Transit' or 'Le metro'.",
                                  "type": "string"
                                },
                                "route_position": {
                                  "title": "Route Position",
                                  "description": "A zero-based position of a route within specific group.",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              },
                              "required": [
                                "group_id",
                                "route_position"
                              ]
                            }
                          },
                          "profile_name": {
                            "title": "Profile Name",
                            "description": "Human-readable localized name of the 'profile' identifier. ",
                            "type": "string"
                          }
                        }
                      },
                      "profile": {
                        "title": "Profile",
                        "description": "Indicates which routing 'profile' was used to calculate this Route. For example, a response from a bike routing endpoint may return multiple routes, one with a 'quiet' profile and another with a 'fast' profile. Note that new values can be added at any time, so any code parsing this field must be able to handle unexpected values. This value will match the 'profiles' request parameter on endpoints that support selecting specific routing profiles. This value is intended to be machine readable only. For a profile name to show to a user, use the 'profile_name' in the 'route_metadata' object instead.",
                        "type": "string"
                      },
                      "signature": {
                        "title": "Signature",
                        "description": "A value to be passed back to the server in subsequent calls to refer to this route (for instance, when requesting live departure information via 'service/1/live/routeupdates'). It must be treated as an opaque value.",
                        "type": "string"
                      },
                      "requested_time": {
                        "title": "Requested Time",
                        "description": "Contains the 'time' parameter used as a departure or arrival time constraint when getting directions, if applicable.",
                        "type": "string"
                      },
                      "requested_time_type": {
                        "title": "Requested Time Type",
                        "description": "Contains the 'time_type' parameter used to determine how the 'time' will be used to constrain the directions that are returned, if applicable. If no parameter was given in the request, will return the 'time_type' used by default to plan the Route.",
                        "type": "string",
                        "enum": [
                          "arrive",
                          "depart",
                          "depart_approximate"
                        ]
                      }
                    },
                    "required": [
                      "start",
                      "end",
                      "legs",
                      "signature"
                    ]
                  }
                },
                "language": {
                  "title": "Language",
                  "description": "A IETF BCP 47 language tag that indicates the language used to encode localizable content, such as turning instructions, in this response. This will reflect a best-effort attempt to fulfill any language preference expressed by the 'language' request parameter, or 'en-US' as default.",
                  "type": "string"
                }
              },
              "required": [
                "routes"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "title": "ErrorResponse",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                },
                "error_code": {
                  "title": "Error Code",
                  "description": "A string code that can be used for triggering error handling code paths. Only present in responses with non-200 HTTP code. Note new values may be added at any time. | value | description | | ----- | ----------- | | no-results | The request was in Citymapper's coverage regions, but no results were found. | | coverage-region | The request is outside of Citymapper's coverage regions, or spans disconnected regions. | | coverage-start | The request's 'start' location falls outside of Citymapper's coverage regions. | | coverage-end | The request's 'end' location falls outside of Citymapper's coverage regions. | | coverage-distance | The request's 'start' and 'end' locations are further apart than the maximum allowed for this service. | | signature | A signature included in the request is invalid for use with this service. | | unknown-brand | The request references an unknown Brand ID. | | unknown-scenario | The request references an unknown Scenario ID. | | request-format | The request was semantically malformed. The 'message' field may contain additional details. | | configuration-required | The request can't be completed because of missing configuration. The 'message' should give details. | | deprecated | The request was made to a deprecated service. |",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "description": "Rate Limited",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/directions/carride": {
      "get": {
        "description": "Gets a car route between two points, providing enough information to render it on a map, along with a duration estimate. This call assumes that the rider has a car at the 'start' point, and provides a car route from there to the 'end' point if both are within Citymapper's supported areas. The resulting route should contain a single car leg. The maximum great-circle distance between the start and end is limited to 1000km for this service.",
        "summary": "Get a driving route between two points",
        "operationId": "CarRideDirections",
        "deprecated": false,
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "x-ms-summary": "Start",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical start of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "end",
            "in": "query",
            "x-ms-summary": "End",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical end of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "language",
            "in": "query",
            "x-ms-summary": "Language",
            "required": false,
            "type": "string",
            "description": "An IETF BCP 47 language tag that indicates the end-user's language preference.  When provided, the response will contain a 'language' property that indicates the language used for any localizable elements of the response (such as turning instructions). This language will be a best-effort attempt to fulfill the expressed preference, but it may contain a value that wasn't expressed in the request (this will generally be 'en-US' as a fallback). Note that language preference will generally only affect Citymapper-generated content such as turning instructions. External content such as Stop names and Status descriptions will generally be passed through in their original language."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routes": {
                  "type": "array",
                  "items": {
                    "title": "Route",
                    "type": "object",
                    "properties": {
                      "start": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "end": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "distance_meters": {
                        "title": "Distance in Meters",
                        "description": "The overall distance of the entire Route, in meters.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_seconds": {
                        "title": "Duration",
                        "description": "The overall estimated time to traverse the entire Route, in seconds, based on the selected vehicle or departure in the response.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_accuracy": {
                        "title": "Duration Accuracy",
                        "description": "Citymapper's assessment of how the accuracy level of 'duration_seconds' should be displayed to the user. This is largely based on the 'type' of the Departures used for times, but it involves additional heuristics developed over time for the Citymapper app. When this field is not provided, the value 'scheduled' should be used. | value | description | | ----- | ----------- | | estimated | A duration that should be considered approximate, as its calculation involved more uncertainty than usual. This is the lowest accuracy. | | scheduled | A normal duration, typically based on published timetable information. | | live | A duration largely based on real-time/live departure information. This is the highest accuracy. |",
                        "type": "string",
                        "enum": [
                          "estimated",
                          "scheduled",
                          "live"
                        ],
                        "default": "scheduled"
                      },
                      "price": {
                        "title": "Price",
                        "description": "Represents a monetary amount. This may either be  - An exact amount, represented by 'amount'. Formatted as e.g. '$31.50'  - A range of values between 'amount_range_minimum' and 'amount_range_maximum'. Formatted as e.g. '$318-22'  - A minimum price where the maximum is not known, represented by 'amount_range_minimum' but no 'amount_range_maximum'. Formatted as e.g. '$318+'",
                        "type": "object",
                        "properties": {
                          "formatted": {
                            "title": "Formatted",
                            "description": "The given price as a formatted string. By default, this is in the native currency format of the region where the route occurs.",
                            "type": "string"
                          },
                          "amount": {
                            "title": "Amount",
                            "description": "The price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_minimum": {
                            "title": "Amount Range Minimum",
                            "description": "If this Price represents a range of possible values, the minimum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_maximum": {
                            "title": "Amount range Maximum",
                            "description": "If this Price represents a range of possible values, the maximum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region. This may not be included if the range is open-ended",
                            "type": "string"
                          },
                          "currency": {
                            "title": "Currency",
                            "description": "The currency in which the price is given, in three-letter ISO 4217 form.",
                            "type": "string"
                          },
                          "demand_multipler": {
                            "title": "Demand Multiplier",
                            "description": "Indicates that prices are higher than usual because of demand, usually for Taxi (On-Demand) legs. May in rare cases be less than 1.0",
                            "type": "number",
                            "format": "float"
                          }
                        },
                        "required": [
                          "formatted"
                        ]
                      },
                      "emissions_grams_co2e": {
                        "title": "CO2e Emissions",
                        "description": "An estimate of the greenhouse gas emissions of the route, expressed in grams of carbon dioxide equivalent (CO2e).",
                        "type": "number",
                        "format": "float"
                      },
                      "legs": {
                        "title": "Legs",
                        "description": "Array of legs comprising the Route, in the order in which they should be traversed. Every valid route will have at least one.",
                        "type": "array",
                        "items": {
                          "title": "Leg",
                          "type": "object",
                          "properties": {
                            "travel_mode": {
                              "title": "Travel Mode",
                              "description": "The travel mode.",
                              "type": "string"
                            },
                            "duration_seconds": {
                              "title": "Duration",
                              "description": "The time required to traverse this leg, excluding any waiting or boarding time at the beginning. May be omitted in rare circumstances when the duration cannot be computed.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "title": "Path",
                              "description": "The geographic path that the leg traverses, as a series of WGS84 coordinates encoded in Google Polyline Format, with a decimal precision of 5 digits. For example, the value '_flyHbjPDZBTBNDJ' encodes the following series of (latitude, longitude) coordinates: '' [(51.51344, -0.08882), (51.51341, -0.08896), (51.51339, -0.08907), (51.51337, -0.08915), (51.51334, -0.08921)] ''",
                              "type": "string"
                            },
                            "instructions": {
                              "title": "Instructions",
                              "description": "This provides the list of turn instructions to guide the user through legs where the user needs to navigate, such as when walking or using a scooter or bike.",
                              "type": "array",
                              "items": {
                                "title": "Instruction",
                                "type": "object",
                                "properties": {
                                  "path_index": {
                                    "title": "Path Index",
                                    "description": "0-based index into the list of coordinates provided by the 'path' property of the leg. This indicates the location at which the instruction is to be followed, so it will be the location of the turn on the path, or the start or end of the leg.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "distance_meters": {
                                    "title": "Distance",
                                    "description": "The distance in meters of the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "time_seconds": {
                                    "title": "Time",
                                    "description": "The time in seconds that the user is expected to take to traverse the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "description_text": {
                                    "title": "Description",
                                    "description": "Plain-text description of the Instruction to the user.",
                                    "type": "string"
                                  },
                                  "description_format": {
                                    "title": "Description Format",
                                    "description": "Text format for rendering the Instruction with emphasized elements, where '{key}' indicates a part of the string that must be replaced with content defined by the entry corresponding to 'key' in 'description_format_replacements'. This allows the elements described by the replacements to be formatted differently by the client, if desired. Key strings will contain only the characters '[a-zA-Z0-9]'. '{ }' will not be nested, and the literal characters '{' and '}' are encoded by the escape sequences '\\{' and '\\}', respectively.",
                                    "type": "string"
                                  },
                                  "description_format_replacements": {
                                    "type": "array",
                                    "items": {
                                      "title": "DescriptionFormatReplacement",
                                      "type": "object",
                                      "properties": {
                                        "key": {
                                          "title": "Key",
                                          "description": "A key corresponding to a string enclosed in '{}' in 'description_format'.",
                                          "type": "string"
                                        },
                                        "text": {
                                          "title": "Text",
                                          "description": "The text to be used to replace the '{key}' substring in the 'description_format'.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "type": "string",
                                          "title": "Type",
                                          "description": "A value indicating what kind of real-world thing is being identified by this format replacement. This allows service clients to apply application-specific formatting if desired. | value | description | | ----- | ----------- | | street_name | The name of a street, road, or other way | | exit_number | The number of an exit, generally from a roundabout |",
                                          "enum": [
                                            "street_name",
                                            "exit_number"
                                          ]
                                        },
                                        "language": {
                                          "title": "Language",
                                          "description": "An IETF BCP 47 language tag that indicates what language the associated 'text' is in. Note that this can be different from the language of the surrounding description - this is most common when the replacement is a place-name in a local language whilst the description is in a different language.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "text"
                                      ]
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "title": "Type",
                                    "description": "Indicates the type of Instruction.",
                                    "enum": [
                                      "depart",
                                      "turn",
                                      "enter_roundabout",
                                      "exit_roundabout",
                                      "arrive"
                                    ]
                                  },
                                  "type_direction": {
                                    "type": "string",
                                    "title": "Type Direction",
                                    "description": "Indicates a direction that modifies this Instruction.",
                                    "enum": [
                                      "straight",
                                      "uturn",
                                      "left",
                                      "slight_left",
                                      "sharp_left",
                                      "right",
                                      "slight_right",
                                      "sharp_right"
                                    ]
                                  }
                                },
                                "required": [
                                  "path_index"
                                ]
                              }
                            }
                          },
                          "required": [
                            "travel_mode",
                            "path"
                          ]
                        },
                        "minItems": 1
                      },
                      "route_departure_time": {
                        "title": "Departure Time",
                        "description": "The time at which Citymapper thinks the user will set out on this route, given available departure information. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_arrival_time": {
                        "title": "Arrival Time",
                        "description": "The time at which Citymapper thinks the user will arrive at the end of this route, given available departure information and expected travel speed. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_metadata": {
                        "title": "Route Metadata",
                        "description": "Any metadata associated with the Route.",
                        "type": "object",
                        "properties": {
                          "groups": {
                            "type": "array",
                            "items": {
                              "title": "Route Group",
                              "description": "Group associated with specific routes of the same scenario.",
                              "type": "object",
                              "properties": {
                                "group_id": {
                                  "title": "Group ID",
                                  "description": "ID of a group a route contains in.",
                                  "type": "string"
                                },
                                "group_name": {
                                  "title": "Group",
                                  "description": "Localized name of a route group, e.g. 'Transit' or 'Le metro'.",
                                  "type": "string"
                                },
                                "route_position": {
                                  "title": "Route Position",
                                  "description": "A zero-based position of a route within specific group.",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              },
                              "required": [
                                "group_id",
                                "route_position"
                              ]
                            }
                          },
                          "profile_name": {
                            "title": "Profile Name",
                            "description": "Human-readable localized name of the 'profile' identifier. ",
                            "type": "string"
                          }
                        }
                      },
                      "profile": {
                        "title": "Profile",
                        "description": "Indicates which routing 'profile' was used to calculate this Route. For example, a response from a bike routing endpoint may return multiple routes, one with a 'quiet' profile and another with a 'fast' profile. Note that new values can be added at any time, so any code parsing this field must be able to handle unexpected values. This value will match the 'profiles' request parameter on endpoints that support selecting specific routing profiles. This value is intended to be machine readable only. For a profile name to show to a user, use the 'profile_name' in the 'route_metadata' object instead.",
                        "type": "string"
                      },
                      "signature": {
                        "title": "Signature",
                        "description": "A value to be passed back to the server in subsequent calls to refer to this route (for instance, when requesting live departure information via 'service/1/live/routeupdates'). It must be treated as an opaque value.",
                        "type": "string"
                      },
                      "requested_time": {
                        "title": "Requested Time",
                        "description": "Contains the 'time' parameter used as a departure or arrival time constraint when getting directions, if applicable.",
                        "type": "string"
                      },
                      "requested_time_type": {
                        "title": "Requested Time Type",
                        "description": "Contains the 'time_type' parameter used to determine how the 'time' will be used to constrain the directions that are returned, if applicable. If no parameter was given in the request, will return the 'time_type' used by default to plan the Route.",
                        "type": "string",
                        "enum": [
                          "arrive",
                          "depart",
                          "depart_approximate"
                        ]
                      }
                    },
                    "required": [
                      "start",
                      "end",
                      "legs",
                      "signature"
                    ]
                  }
                },
                "language": {
                  "title": "Language",
                  "description": "A IETF BCP 47 language tag that indicates the language used to encode localizable content, such as turning instructions, in this response. This will reflect a best-effort attempt to fulfill any language preference expressed by the 'language' request parameter, or 'en-US' as default.",
                  "type": "string"
                }
              },
              "required": [
                "routes"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "title": "ErrorResponse",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                },
                "error_code": {
                  "title": "Error Code",
                  "description": "A string code that can be used for triggering error handling code paths. Only present in responses with non-200 HTTP code. Note new values may be added at any time. | value | description | | ----- | ----------- | | no-results | The request was in Citymapper's coverage regions, but no results were found. | | coverage-region | The request is outside of Citymapper's coverage regions, or spans disconnected regions. | | coverage-start | The request's 'start' location falls outside of Citymapper's coverage regions. | | coverage-end | The request's 'end' location falls outside of Citymapper's coverage regions. | | coverage-distance | The request's 'start' and 'end' locations are further apart than the maximum allowed for this service. | | signature | A signature included in the request is invalid for use with this service. | | unknown-brand | The request references an unknown Brand ID. | | unknown-scenario | The request references an unknown Scenario ID. | | request-format | The request was semantically malformed. The 'message' field may contain additional details. | | configuration-required | The request can't be completed because of missing configuration. The 'message' should give details. | | deprecated | The request was made to a deprecated service. |",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "description": "Rate Limited",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/directions/transit": {
      "get": {
        "description": "Computes several public transportation routes between two points. By default, the results will contain up to 5 routes. Each one will contain several legs: usually one at the start and end of the route with 'travel_mode' of 'walk', with at least one with 'travel_mode' of 'transit' in between.",
        "summary": "Get a transit route between two points",
        "operationId": "TransitDirections",
        "deprecated": false,
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "x-ms-summary": "Start",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical start of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "end",
            "in": "query",
            "x-ms-summary": "End",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical end of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "time",
            "in": "query",
            "x-ms-summary": "Time",
            "required": false,
            "type": "string",
            "description": "The time to be used as a departure or arrival time constraint when getting directions. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time."
          },
          {
            "name": "time_type",
            "in": "query",
            "x-ms-summary": "Time Type",
            "required": false,
            "enum": [
              "arrive",
              "depart",
              "depart_approximate"
            ],
            "type": "string",
            "description": "When a 'time' value is given, this determines how the time will be used to constrain the directions that are returned. When this isn't specified, 'depart_approximate' is used. If no 'time' is given, this has no effect. | value | description | | ----- | ----------- | | arrive | Directions are chosen that get the user to their destination on or before 'time' | | depart | Directions are chosen assuming the user leaves their origin as soon after 'time' as possible | | depart_approximate | Similar to 'depart', but allowing for later departures in order to return more preferable options even if they leave a bit later. This is Citymapper's default way of choosing directions when the time isn't specified |"
          },
          {
            "name": "language",
            "in": "query",
            "x-ms-summary": "Language",
            "required": false,
            "type": "string",
            "description": "An IETF BCP 47 language tag that indicates the end-user's language preference.  When provided, the response will contain a 'language' property that indicates the language used for any localizable elements of the response (such as turning instructions). This language will be a best-effort attempt to fulfill the expressed preference, but it may contain a value that wasn't expressed in the request (this will generally be 'en-US' as a fallback). Note that language preference will generally only affect Citymapper-generated content such as turning instructions. External content such as Stop names and Status descriptions will generally be passed through in their original language."
          },
          {
            "name": "limit",
            "in": "query",
            "x-ms-summary": "Limit",
            "required": false,
            "default": 5,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 5,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Maximum number of routes to return."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routes": {
                  "type": "array",
                  "items": {
                    "title": "Route",
                    "type": "object",
                    "properties": {
                      "start": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "end": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "distance_meters": {
                        "title": "Distance in Meters",
                        "description": "The overall distance of the entire Route, in meters.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_seconds": {
                        "title": "Duration",
                        "description": "The overall estimated time to traverse the entire Route, in seconds, based on the selected vehicle or departure in the response.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_accuracy": {
                        "title": "Duration Accuracy",
                        "description": "Citymapper's assessment of how the accuracy level of 'duration_seconds' should be displayed to the user. This is largely based on the 'type' of the Departures used for times, but it involves additional heuristics developed over time for the Citymapper app. When this field is not provided, the value 'scheduled' should be used. | value | description | | ----- | ----------- | | estimated | A duration that should be considered approximate, as its calculation involved more uncertainty than usual. This is the lowest accuracy. | | scheduled | A normal duration, typically based on published timetable information. | | live | A duration largely based on real-time/live departure information. This is the highest accuracy. |",
                        "type": "string",
                        "enum": [
                          "estimated",
                          "scheduled",
                          "live"
                        ],
                        "default": "scheduled"
                      },
                      "price": {
                        "title": "Price",
                        "description": "Represents a monetary amount. This may either be  - An exact amount, represented by 'amount'. Formatted as e.g. '$31.50'  - A range of values between 'amount_range_minimum' and 'amount_range_maximum'. Formatted as e.g. '$318-22'  - A minimum price where the maximum is not known, represented by 'amount_range_minimum' but no 'amount_range_maximum'. Formatted as e.g. '$318+'",
                        "type": "object",
                        "properties": {
                          "formatted": {
                            "title": "Formatted",
                            "description": "The given price as a formatted string. By default, this is in the native currency format of the region where the route occurs.",
                            "type": "string"
                          },
                          "amount": {
                            "title": "Amount",
                            "description": "The price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_minimum": {
                            "title": "Amount Range Minimum",
                            "description": "If this Price represents a range of possible values, the minimum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_maximum": {
                            "title": "Amount range Maximum",
                            "description": "If this Price represents a range of possible values, the maximum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region. This may not be included if the range is open-ended",
                            "type": "string"
                          },
                          "currency": {
                            "title": "Currency",
                            "description": "The currency in which the price is given, in three-letter ISO 4217 form.",
                            "type": "string"
                          },
                          "demand_multipler": {
                            "title": "Demand Multiplier",
                            "description": "Indicates that prices are higher than usual because of demand, usually for Taxi (On-Demand) legs. May in rare cases be less than 1.0",
                            "type": "number",
                            "format": "float"
                          }
                        },
                        "required": [
                          "formatted"
                        ]
                      },
                      "emissions_grams_co2e": {
                        "title": "CO2e Emissions",
                        "description": "An estimate of the greenhouse gas emissions of the route, expressed in grams of carbon dioxide equivalent (CO2e).",
                        "type": "number",
                        "format": "float"
                      },
                      "legs": {
                        "title": "Legs",
                        "description": "Array of legs comprising the Route, in the order in which they should be traversed. Every valid route will have at least one.",
                        "type": "array",
                        "items": {
                          "title": "Leg",
                          "type": "object",
                          "properties": {
                            "travel_mode": {
                              "title": "Travel Mode",
                              "description": "The travel mode.",
                              "type": "string"
                            },
                            "duration_seconds": {
                              "title": "Duration",
                              "description": "The time required to traverse this leg, excluding any waiting or boarding time at the beginning. May be omitted in rare circumstances when the duration cannot be computed.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "title": "Path",
                              "description": "The geographic path that the leg traverses, as a series of WGS84 coordinates encoded in Google Polyline Format, with a decimal precision of 5 digits. For example, the value '_flyHbjPDZBTBNDJ' encodes the following series of (latitude, longitude) coordinates: '' [(51.51344, -0.08882), (51.51341, -0.08896), (51.51339, -0.08907), (51.51337, -0.08915), (51.51334, -0.08921)] ''",
                              "type": "string"
                            },
                            "instructions": {
                              "title": "Instructions",
                              "description": "This provides the list of turn instructions to guide the user through legs where the user needs to navigate, such as when walking or using a scooter or bike.",
                              "type": "array",
                              "items": {
                                "title": "Instruction",
                                "type": "object",
                                "properties": {
                                  "path_index": {
                                    "title": "Path Index",
                                    "description": "0-based index into the list of coordinates provided by the 'path' property of the leg. This indicates the location at which the instruction is to be followed, so it will be the location of the turn on the path, or the start or end of the leg.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "distance_meters": {
                                    "title": "Distance",
                                    "description": "The distance in meters of the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "time_seconds": {
                                    "title": "Time",
                                    "description": "The time in seconds that the user is expected to take to traverse the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "description_text": {
                                    "title": "Description",
                                    "description": "Plain-text description of the Instruction to the user.",
                                    "type": "string"
                                  },
                                  "description_format": {
                                    "title": "Description Format",
                                    "description": "Text format for rendering the Instruction with emphasized elements, where '{key}' indicates a part of the string that must be replaced with content defined by the entry corresponding to 'key' in 'description_format_replacements'. This allows the elements described by the replacements to be formatted differently by the client, if desired. Key strings will contain only the characters '[a-zA-Z0-9]'. '{ }' will not be nested, and the literal characters '{' and '}' are encoded by the escape sequences '\\{' and '\\}', respectively.",
                                    "type": "string"
                                  },
                                  "description_format_replacements": {
                                    "type": "array",
                                    "items": {
                                      "title": "DescriptionFormatReplacement",
                                      "type": "object",
                                      "properties": {
                                        "key": {
                                          "title": "Key",
                                          "description": "A key corresponding to a string enclosed in '{}' in 'description_format'.",
                                          "type": "string"
                                        },
                                        "text": {
                                          "title": "Text",
                                          "description": "The text to be used to replace the '{key}' substring in the 'description_format'.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "type": "string",
                                          "title": "Type",
                                          "description": "A value indicating what kind of real-world thing is being identified by this format replacement. This allows service clients to apply application-specific formatting if desired. | value | description | | ----- | ----------- | | street_name | The name of a street, road, or other way | | exit_number | The number of an exit, generally from a roundabout |",
                                          "enum": [
                                            "street_name",
                                            "exit_number"
                                          ]
                                        },
                                        "language": {
                                          "title": "Language",
                                          "description": "An IETF BCP 47 language tag that indicates what language the associated 'text' is in. Note that this can be different from the language of the surrounding description - this is most common when the replacement is a place-name in a local language whilst the description is in a different language.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "text"
                                      ]
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "title": "Type",
                                    "description": "Indicates the type of Instruction.",
                                    "enum": [
                                      "depart",
                                      "turn",
                                      "enter_roundabout",
                                      "exit_roundabout",
                                      "arrive"
                                    ]
                                  },
                                  "type_direction": {
                                    "type": "string",
                                    "title": "Type Direction",
                                    "description": "Indicates a direction that modifies this Instruction.",
                                    "enum": [
                                      "straight",
                                      "uturn",
                                      "left",
                                      "slight_left",
                                      "sharp_left",
                                      "right",
                                      "slight_right",
                                      "sharp_right"
                                    ]
                                  }
                                },
                                "required": [
                                  "path_index"
                                ]
                              }
                            }
                          },
                          "required": [
                            "travel_mode",
                            "path"
                          ]
                        },
                        "minItems": 1
                      },
                      "route_departure_time": {
                        "title": "Departure Time",
                        "description": "The time at which Citymapper thinks the user will set out on this route, given available departure information. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_arrival_time": {
                        "title": "Arrival Time",
                        "description": "The time at which Citymapper thinks the user will arrive at the end of this route, given available departure information and expected travel speed. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_metadata": {
                        "title": "Route Metadata",
                        "description": "Any metadata associated with the Route.",
                        "type": "object",
                        "properties": {
                          "groups": {
                            "type": "array",
                            "items": {
                              "title": "Route Group",
                              "description": "Group associated with specific routes of the same scenario.",
                              "type": "object",
                              "properties": {
                                "group_id": {
                                  "title": "Group ID",
                                  "description": "ID of a group a route contains in.",
                                  "type": "string"
                                },
                                "group_name": {
                                  "title": "Group",
                                  "description": "Localized name of a route group, e.g. 'Transit' or 'Le metro'.",
                                  "type": "string"
                                },
                                "route_position": {
                                  "title": "Route Position",
                                  "description": "A zero-based position of a route within specific group.",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              },
                              "required": [
                                "group_id",
                                "route_position"
                              ]
                            }
                          },
                          "profile_name": {
                            "title": "Profile Name",
                            "description": "Human-readable localized name of the 'profile' identifier. ",
                            "type": "string"
                          }
                        }
                      },
                      "profile": {
                        "title": "Profile",
                        "description": "Indicates which routing 'profile' was used to calculate this Route. For example, a response from a bike routing endpoint may return multiple routes, one with a 'quiet' profile and another with a 'fast' profile. Note that new values can be added at any time, so any code parsing this field must be able to handle unexpected values. This value will match the 'profiles' request parameter on endpoints that support selecting specific routing profiles. This value is intended to be machine readable only. For a profile name to show to a user, use the 'profile_name' in the 'route_metadata' object instead.",
                        "type": "string"
                      },
                      "signature": {
                        "title": "Signature",
                        "description": "A value to be passed back to the server in subsequent calls to refer to this route (for instance, when requesting live departure information via 'service/1/live/routeupdates'). It must be treated as an opaque value.",
                        "type": "string"
                      },
                      "requested_time": {
                        "title": "Requested Time",
                        "description": "Contains the 'time' parameter used as a departure or arrival time constraint when getting directions, if applicable.",
                        "type": "string"
                      },
                      "requested_time_type": {
                        "title": "Requested Time Type",
                        "description": "Contains the 'time_type' parameter used to determine how the 'time' will be used to constrain the directions that are returned, if applicable. If no parameter was given in the request, will return the 'time_type' used by default to plan the Route.",
                        "type": "string",
                        "enum": [
                          "arrive",
                          "depart",
                          "depart_approximate"
                        ]
                      }
                    },
                    "required": [
                      "start",
                      "end",
                      "legs",
                      "signature"
                    ]
                  }
                },
                "language": {
                  "title": "Language",
                  "description": "A IETF BCP 47 language tag that indicates the language used to encode localizable content, such as turning instructions, in this response. This will reflect a best-effort attempt to fulfill any language preference expressed by the 'language' request parameter, or 'en-US' as default.",
                  "type": "string"
                }
              },
              "required": [
                "routes"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "title": "ErrorResponse",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                },
                "error_code": {
                  "title": "Error Code",
                  "description": "A string code that can be used for triggering error handling code paths. Only present in responses with non-200 HTTP code. Note new values may be added at any time. | value | description | | ----- | ----------- | | no-results | The request was in Citymapper's coverage regions, but no results were found. | | coverage-region | The request is outside of Citymapper's coverage regions, or spans disconnected regions. | | coverage-start | The request's 'start' location falls outside of Citymapper's coverage regions. | | coverage-end | The request's 'end' location falls outside of Citymapper's coverage regions. | | coverage-distance | The request's 'start' and 'end' locations are further apart than the maximum allowed for this service. | | signature | A signature included in the request is invalid for use with this service. | | unknown-brand | The request references an unknown Brand ID. | | unknown-scenario | The request references an unknown Scenario ID. | | request-format | The request was semantically malformed. The 'message' field may contain additional details. | | configuration-required | The request can't be completed because of missing configuration. The 'message' should give details. | | deprecated | The request was made to a deprecated service. |",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "description": "Rate Limited",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/directions/scenario": {
      "get": {
        "description": "Computes routes between two points based on a provided scenario. One or more groups of routes can be provided depending on a scenario. Each group will contain several routes. Each route will contain one or more legs.",
        "summary": "Get a route between two points for a scenario",
        "operationId": "ScenarioDirections",
        "deprecated": false,
        "parameters": [
          {
            "name": "scenario_id",
            "in": "query",
            "x-ms-summary": "Scenario ID",
            "required": true,
            "type": "string",
            "description": "Scenario ID for directions."
          },
          {
            "name": "start",
            "in": "query",
            "x-ms-summary": "Start",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical start of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "end",
            "in": "query",
            "x-ms-summary": "End",
            "required": true,
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "uniqueItems": false,
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "The geographical end of the route, in WGS84 'latitude,longitude' format. Coordinates should be in decimal, and only the first 6 decimal places will be used."
          },
          {
            "name": "time",
            "in": "query",
            "x-ms-summary": "Time",
            "required": false,
            "type": "string",
            "description": "The time to be used as a departure or arrival time constraint when getting directions. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time."
          },
          {
            "name": "time_type",
            "in": "query",
            "x-ms-summary": "Time Type",
            "required": false,
            "enum": [
              "arrive",
              "depart",
              "depart_approximate"
            ],
            "type": "string",
            "description": "When a 'time' value is given, this determines how the time will be used to constrain the directions that are returned. When this isn't specified, 'depart_approximate' is used. If no 'time' is given, this has no effect. | value | description | | ----- | ----------- | | arrive | Directions are chosen that get the user to their destination on or before 'time' | | depart | Directions are chosen assuming the user leaves their origin as soon after 'time' as possible | | depart_approximate | Similar to 'depart', but allowing for later departures in order to return more preferable options even if they leave a bit later. This is Citymapper's default way of choosing directions when the time isn't specified |"
          },
          {
            "name": "language",
            "in": "query",
            "x-ms-summary": "Language",
            "required": false,
            "type": "string",
            "description": "An IETF BCP 47 language tag that indicates the end-user's language preference.  When provided, the response will contain a 'language' property that indicates the language used for any localizable elements of the response (such as turning instructions). This language will be a best-effort attempt to fulfill the expressed preference, but it may contain a value that wasn't expressed in the request (this will generally be 'en-US' as a fallback). Note that language preference will generally only affect Citymapper-generated content such as turning instructions. External content such as Stop names and Status descriptions will generally be passed through in their original language."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routes": {
                  "type": "array",
                  "items": {
                    "title": "Route",
                    "type": "object",
                    "properties": {
                      "start": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "end": {
                        "title": "Waypoint",
                        "type": "object",
                        "properties": {
                          "coordinates": {
                            "title": "Coordinates",
                            "type": "object",
                            "properties": {
                              "lat": {
                                "title": "Latitude",
                                "description": "A latitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              },
                              "lon": {
                                "title": "Longitude",
                                "description": "A longitude in WGS84 encoding, with 6 digits of decimal precision.",
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "required": [
                              "lat",
                              "lon"
                            ]
                          }
                        },
                        "required": [
                          "coordinates"
                        ]
                      },
                      "distance_meters": {
                        "title": "Distance in Meters",
                        "description": "The overall distance of the entire Route, in meters.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_seconds": {
                        "title": "Duration",
                        "description": "The overall estimated time to traverse the entire Route, in seconds, based on the selected vehicle or departure in the response.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "duration_accuracy": {
                        "title": "Duration Accuracy",
                        "description": "Citymapper's assessment of how the accuracy level of 'duration_seconds' should be displayed to the user. This is largely based on the 'type' of the Departures used for times, but it involves additional heuristics developed over time for the Citymapper app. When this field is not provided, the value 'scheduled' should be used. | value | description | | ----- | ----------- | | estimated | A duration that should be considered approximate, as its calculation involved more uncertainty than usual. This is the lowest accuracy. | | scheduled | A normal duration, typically based on published timetable information. | | live | A duration largely based on real-time/live departure information. This is the highest accuracy. |",
                        "type": "string",
                        "enum": [
                          "estimated",
                          "scheduled",
                          "live"
                        ],
                        "default": "scheduled"
                      },
                      "price": {
                        "title": "Price",
                        "description": "Represents a monetary amount. This may either be  - An exact amount, represented by 'amount'. Formatted as e.g. '$31.50'  - A range of values between 'amount_range_minimum' and 'amount_range_maximum'. Formatted as e.g. '$318-22'  - A minimum price where the maximum is not known, represented by 'amount_range_minimum' but no 'amount_range_maximum'. Formatted as e.g. '$318+'",
                        "type": "object",
                        "properties": {
                          "formatted": {
                            "title": "Formatted",
                            "description": "The given price as a formatted string. By default, this is in the native currency format of the region where the route occurs.",
                            "type": "string"
                          },
                          "amount": {
                            "title": "Amount",
                            "description": "The price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_minimum": {
                            "title": "Amount Range Minimum",
                            "description": "If this Price represents a range of possible values, the minimum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region.",
                            "type": "string"
                          },
                          "amount_range_maximum": {
                            "title": "Amount range Maximum",
                            "description": "If this Price represents a range of possible values, the maximum price as a decimal value, encoded as a string to avoid floating-point accuracy issues. It will not include currency symbols, and the separator between major and minor units will always be '.', regardless of the region. This may not be included if the range is open-ended",
                            "type": "string"
                          },
                          "currency": {
                            "title": "Currency",
                            "description": "The currency in which the price is given, in three-letter ISO 4217 form.",
                            "type": "string"
                          },
                          "demand_multipler": {
                            "title": "Demand Multiplier",
                            "description": "Indicates that prices are higher than usual because of demand, usually for Taxi (On-Demand) legs. May in rare cases be less than 1.0",
                            "type": "number",
                            "format": "float"
                          }
                        },
                        "required": [
                          "formatted"
                        ]
                      },
                      "emissions_grams_co2e": {
                        "title": "CO2e Emissions",
                        "description": "An estimate of the greenhouse gas emissions of the route, expressed in grams of carbon dioxide equivalent (CO2e).",
                        "type": "number",
                        "format": "float"
                      },
                      "legs": {
                        "title": "Legs",
                        "description": "Array of legs comprising the Route, in the order in which they should be traversed. Every valid route will have at least one.",
                        "type": "array",
                        "items": {
                          "title": "Leg",
                          "type": "object",
                          "properties": {
                            "travel_mode": {
                              "title": "Travel Mode",
                              "description": "The travel mode.",
                              "type": "string"
                            },
                            "duration_seconds": {
                              "title": "Duration",
                              "description": "The time required to traverse this leg, excluding any waiting or boarding time at the beginning. May be omitted in rare circumstances when the duration cannot be computed.",
                              "type": "integer",
                              "format": "int32"
                            },
                            "path": {
                              "title": "Path",
                              "description": "The geographic path that the leg traverses, as a series of WGS84 coordinates encoded in Google Polyline Format, with a decimal precision of 5 digits. For example, the value '_flyHbjPDZBTBNDJ' encodes the following series of (latitude, longitude) coordinates: '' [(51.51344, -0.08882), (51.51341, -0.08896), (51.51339, -0.08907), (51.51337, -0.08915), (51.51334, -0.08921)] ''",
                              "type": "string"
                            },
                            "instructions": {
                              "title": "Instructions",
                              "description": "This provides the list of turn instructions to guide the user through legs where the user needs to navigate, such as when walking or using a scooter or bike.",
                              "type": "array",
                              "items": {
                                "title": "Instruction",
                                "type": "object",
                                "properties": {
                                  "path_index": {
                                    "title": "Path Index",
                                    "description": "0-based index into the list of coordinates provided by the 'path' property of the leg. This indicates the location at which the instruction is to be followed, so it will be the location of the turn on the path, or the start or end of the leg.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "distance_meters": {
                                    "title": "Distance",
                                    "description": "The distance in meters of the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "time_seconds": {
                                    "title": "Time",
                                    "description": "The time in seconds that the user is expected to take to traverse the section of the 'path' **prior to** this instruction. This property will be omitted for initial instructions of type 'depart'.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "description_text": {
                                    "title": "Description",
                                    "description": "Plain-text description of the Instruction to the user.",
                                    "type": "string"
                                  },
                                  "description_format": {
                                    "title": "Description Format",
                                    "description": "Text format for rendering the Instruction with emphasized elements, where '{key}' indicates a part of the string that must be replaced with content defined by the entry corresponding to 'key' in 'description_format_replacements'. This allows the elements described by the replacements to be formatted differently by the client, if desired. Key strings will contain only the characters '[a-zA-Z0-9]'. '{ }' will not be nested, and the literal characters '{' and '}' are encoded by the escape sequences '\\{' and '\\}', respectively.",
                                    "type": "string"
                                  },
                                  "description_format_replacements": {
                                    "type": "array",
                                    "items": {
                                      "title": "DescriptionFormatReplacement",
                                      "type": "object",
                                      "properties": {
                                        "key": {
                                          "title": "Key",
                                          "description": "A key corresponding to a string enclosed in '{}' in 'description_format'.",
                                          "type": "string"
                                        },
                                        "text": {
                                          "title": "Text",
                                          "description": "The text to be used to replace the '{key}' substring in the 'description_format'.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "type": "string",
                                          "title": "Type",
                                          "description": "A value indicating what kind of real-world thing is being identified by this format replacement. This allows service clients to apply application-specific formatting if desired. | value | description | | ----- | ----------- | | street_name | The name of a street, road, or other way | | exit_number | The number of an exit, generally from a roundabout |",
                                          "enum": [
                                            "street_name",
                                            "exit_number"
                                          ]
                                        },
                                        "language": {
                                          "title": "Language",
                                          "description": "An IETF BCP 47 language tag that indicates what language the associated 'text' is in. Note that this can be different from the language of the surrounding description - this is most common when the replacement is a place-name in a local language whilst the description is in a different language.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "text"
                                      ]
                                    }
                                  },
                                  "type": {
                                    "type": "string",
                                    "title": "Type",
                                    "description": "Indicates the type of Instruction.",
                                    "enum": [
                                      "depart",
                                      "turn",
                                      "enter_roundabout",
                                      "exit_roundabout",
                                      "arrive"
                                    ]
                                  },
                                  "type_direction": {
                                    "type": "string",
                                    "title": "Type Direction",
                                    "description": "Indicates a direction that modifies this Instruction.",
                                    "enum": [
                                      "straight",
                                      "uturn",
                                      "left",
                                      "slight_left",
                                      "sharp_left",
                                      "right",
                                      "slight_right",
                                      "sharp_right"
                                    ]
                                  }
                                },
                                "required": [
                                  "path_index"
                                ]
                              }
                            }
                          },
                          "required": [
                            "travel_mode",
                            "path"
                          ]
                        },
                        "minItems": 1
                      },
                      "route_departure_time": {
                        "title": "Departure Time",
                        "description": "The time at which Citymapper thinks the user will set out on this route, given available departure information. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_arrival_time": {
                        "title": "Arrival Time",
                        "description": "The time at which Citymapper thinks the user will arrive at the end of this route, given available departure information and expected travel speed. This is computed assuming that user is at the start of the route. Updated values for 'route_departure_time' and 'route_arrival_time' are returned by 'service/1/live/routeupdates' to reflect any updated departure information. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_metadata": {
                        "title": "Route Metadata",
                        "description": "Any metadata associated with the Route.",
                        "type": "object",
                        "properties": {
                          "groups": {
                            "type": "array",
                            "items": {
                              "title": "Route Group",
                              "description": "Group associated with specific routes of the same scenario.",
                              "type": "object",
                              "properties": {
                                "group_id": {
                                  "title": "Group ID",
                                  "description": "ID of a group a route contains in.",
                                  "type": "string"
                                },
                                "group_name": {
                                  "title": "Group",
                                  "description": "Localized name of a route group, e.g. 'Transit' or 'Le metro'.",
                                  "type": "string"
                                },
                                "route_position": {
                                  "title": "Route Position",
                                  "description": "A zero-based position of a route within specific group.",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              },
                              "required": [
                                "group_id",
                                "route_position"
                              ]
                            }
                          },
                          "profile_name": {
                            "title": "Profile Name",
                            "description": "Human-readable localized name of the 'profile' identifier. ",
                            "type": "string"
                          }
                        }
                      },
                      "profile": {
                        "title": "Profile",
                        "description": "Indicates which routing 'profile' was used to calculate this Route. For example, a response from a bike routing endpoint may return multiple routes, one with a 'quiet' profile and another with a 'fast' profile. Note that new values can be added at any time, so any code parsing this field must be able to handle unexpected values. This value will match the 'profiles' request parameter on endpoints that support selecting specific routing profiles. This value is intended to be machine readable only. For a profile name to show to a user, use the 'profile_name' in the 'route_metadata' object instead.",
                        "type": "string"
                      },
                      "signature": {
                        "title": "Signature",
                        "description": "A value to be passed back to the server in subsequent calls to refer to this route (for instance, when requesting live departure information via 'service/1/live/routeupdates'). It must be treated as an opaque value.",
                        "type": "string"
                      },
                      "requested_time": {
                        "title": "Requested Time",
                        "description": "Contains the 'time' parameter used as a departure or arrival time constraint when getting directions, if applicable.",
                        "type": "string"
                      },
                      "requested_time_type": {
                        "title": "Requested Time Type",
                        "description": "Contains the 'time_type' parameter used to determine how the 'time' will be used to constrain the directions that are returned, if applicable. If no parameter was given in the request, will return the 'time_type' used by default to plan the Route.",
                        "type": "string",
                        "enum": [
                          "arrive",
                          "depart",
                          "depart_approximate"
                        ]
                      }
                    },
                    "required": [
                      "start",
                      "end",
                      "legs",
                      "signature"
                    ]
                  }
                },
                "language": {
                  "title": "Language",
                  "description": "A IETF BCP 47 language tag that indicates the language used to encode localizable content, such as turning instructions, in this response. This will reflect a best-effort attempt to fulfill any language preference expressed by the 'language' request parameter, or 'en-US' as default.",
                  "type": "string"
                }
              },
              "required": [
                "routes"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "title": "ErrorResponse",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                },
                "error_code": {
                  "title": "Error Code",
                  "description": "A string code that can be used for triggering error handling code paths. Only present in responses with non-200 HTTP code. Note new values may be added at any time. | value | description | | ----- | ----------- | | no-results | The request was in Citymapper's coverage regions, but no results were found. | | coverage-region | The request is outside of Citymapper's coverage regions, or spans disconnected regions. | | coverage-start | The request's 'start' location falls outside of Citymapper's coverage regions. | | coverage-end | The request's 'end' location falls outside of Citymapper's coverage regions. | | coverage-distance | The request's 'start' and 'end' locations are further apart than the maximum allowed for this service. | | signature | A signature included in the request is invalid for use with this service. | | unknown-brand | The request references an unknown Brand ID. | | unknown-scenario | The request references an unknown Scenario ID. | | request-format | The request was semantically malformed. The 'message' field may contain additional details. | | configuration-required | The request can't be completed because of missing configuration. The 'message' should give details. | | deprecated | The request was made to a deprecated service. |",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "description": "Rate Limited",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/live/routeupdates": {
      "post": {
        "description": "This retrieves current and live departure information and live on-demand quotes for multiple routes previously obtained from the 'directions' endpoints. Only routes that have at least one leg with a leg Updatable Detail can be updated using this service. Note it may not always be possible for Citymapper to provide current times or live departure and disruption information for a leg. Successful responses (HTTP code '200') will consume one 'Live Update' credit for each HTTP response. Unsuccessful calls will not consume any credits.",
        "summary": "Get live departure and availability information for multiple routes",
        "operationId": "LiveRouteUpdates",
        "deprecated": false,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "title": "Service1LiveRouteupdatesRequest",
              "type": "object",
              "properties": {
                "signatures": {
                  "title": "Signatures",
                  "description": "An array of 'signature' properties from previously-obtained routes",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "fetch_on_demand_services": {
                  "title": "Fetch On-Demand Services",
                  "description": "When updating using one or more Signatures from routes containing on-demand legs with updatable details (e.g. from the Taxi Directions service), if this is set to 'true', additional information will be requested from Taxi service intrgrations to provide more accurate and complete pricing, duration and service availability. To provide this, the original Route's start and end locations need to be transmitted to these Third-Party services, including in the case that one or the other is the user's current or recent location. Be aware that you may need to have explicit informed consent from your end-user to set this to 'true' depending on applicable laws and regulations. If set to 'false' or omitted, no requests will be made to any Third-Party services. If no update can be produced for a leg without this parameter being set 'true', the response will indicate this within the updateable detail.",
                  "type": "boolean"
                }
              },
              "required": [
                "signatures"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "Live Route-Updates Response",
              "type": "object",
              "properties": {
                "route_updates": {
                  "type": "array",
                  "items": {
                    "title": "RouteUpdate",
                    "description": "This object contains the latest live updates for a single Route.",
                    "type": "object",
                    "properties": {
                      "leg_updates": {
                        "title": "Leg Updates",
                        "description": "This is an parallel array of leg Updatable Detail objects, one for every leg in the original route being updated. The ones corresponding to walking legs will be empty, but the details corresponding to transit legs will contain updated departure information.",
                        "type": "array",
                        "items": {}
                      },
                      "route_departure_time": {
                        "title": "Departure Time",
                        "description": "The time at which Citymapper thinks the user will set out on this route, given available departure information. This is computed assuming that user is at the start of the route at the time of the request. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_arrival_time": {
                        "title": "Arrival Time",
                        "description": "The time at which Citymapper thinks the user will arrive at the end of this route, given available departure information and expected travel speed. This is computed assuming that user is at the start of the route at the time of the request. The time is expressed in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, including a date, time, and time zone in which the event occurs. For example, '2020-08-19T08:10:42-04:00' expresses August 19, 2020 at 8:10am in Eastern Daylight Time.",
                        "type": "string"
                      },
                      "route_duration_seconds": {
                        "title": "Duration",
                        "description": "The overall estimated time to traverse the entire route, in seconds. This value replaces the 'duration_seconds' value from the original Route, as it will be recomputed to use the specific departure information contained in this route update response. May be omitted in rare circumstances when the duration cannot be computed, for instance if the route can't be completed at the given time because the Services involved are not running.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "route_duration_accuracy": {
                        "title": "DurationAccuracy",
                        "description": "Citymapper's assessment of how the accuracy level of 'duration_seconds' should be displayed to the user. This is largely based on the 'type' of the Departures used for times, but it involves additional heuristics developed over time for the Citymapper app. When this field is not provided, the value 'scheduled' should be used. | value | description | | ----- | ----------- | | estimated | A duration that should be considered approximate, as its calculation involved more uncertainty than usual. This is the lowest accuracy. | | scheduled | A normal duration, typically based on published timetable information. | | live | A duration largely based on real-time/live departure information. This is the highest accuracy. |",
                        "type": "string",
                        "enum": [
                          "estimated",
                          "scheduled",
                          "live"
                        ],
                        "default": "scheduled"
                      },
                      "request_signature": {
                        "title": "Request Signature",
                        "description": "This is a route 'signature' from the update request, which should be used to associate this update with the correct Route.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "leg_updates",
                      "request_signature"
                    ]
                  }
                }
              },
              "required": [
                "route_updates"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "title": "ErrorResponse",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                },
                "error_code": {
                  "title": "Error Code",
                  "description": "A string code that can be used for triggering error handling code paths. Only present in responses with non-200 HTTP code. Note new values may be added at any time. | value | description | | ----- | ----------- | | no-results | The request was in Citymapper's coverage regions, but no results were found. | | coverage-region | The request is outside of Citymapper's coverage regions, or spans disconnected regions. | | coverage-start | The request's 'start' location falls outside of Citymapper's coverage regions. | | coverage-end | The request's 'end' location falls outside of Citymapper's coverage regions. | | coverage-distance | The request's 'start' and 'end' locations are further apart than the maximum allowed for this service. | | signature | A signature included in the request is invalid for use with this service. | | unknown-brand | The request references an unknown Brand ID. | | unknown-scenario | The request references an unknown Scenario ID. | | request-format | The request was semantically malformed. The 'message' field may contain additional details. | | configuration-required | The request can't be completed because of missing configuration. The 'message' should give details. | | deprecated | The request was made to a deprecated service. |",
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "description": "Rate Limited",
            "schema": {
              "title": "AuthenticationError",
              "type": "object",
              "properties": {
                "message": {
                  "description": "A developer-readable message explaining the problem. Must not be displayed to the end user.",
                  "title": "Error Message",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {},
  "parameters": {},
  "responses": {},
  "securityDefinitions": {
    "API Key": {
      "type": "apiKey",
      "in": "header",
      "name": "Citymapper-Partner-Key"
    }
  },
  "security": [
    {
      "API Key": []
    }
  ],
  "tags": [],
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://citymapper.com/"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://citymapper.com/api/1/resources?id=citymapper-privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Lifestyle and Entertainment"
    }
  ]
}