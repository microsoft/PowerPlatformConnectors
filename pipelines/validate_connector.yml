pool:
  vmImage: "vs2017-win2016"

variables:
  resourceStackFolder: $(System.ArtifactsDirectory)/resourcestack
  newtonsoftFolder: $(System.ArtifactsDirectory)/newtonsoft
  azstorageFolder: $(System.ArtifactsDirectory)/azstorage
  bcdFolder: $(System.ArtifactsDirectory)/bcd

steps:
  - powershell: |
      $errorsTotal = 0
      $warningsTotal = 0

      # Get the list of files for the given PR
      $currentLocation = Get-Location
      $files = git diff HEAD~1 --name-only

      $pwd = ConvertTo-SecureString "$(utok)" -AsPlainText -Force
      $cred = New-Object Management.Automation.PSCredential ($(uid), $pwd)

      $headers = @{}

      $oldFileContent = "{'swagger': '2.0', 'host': 'graph.microsoft.com', 'schemes': ['https']}"

      $results = Invoke-RestMethod -Uri $(validatorUrl) -Method Post -Headers $headers -Authentication Basic -Credential $cred -Body $oldFileContent

      foreach ($file in $files) { 
        if ($file -match '.+?apidefinition.swagger.json$') {
            $currentFilePath = Join-Path $currentLocation ($file.Replace('/', '\'))
            $previousCommitHash = git log --max-count=1 --skip=1 --first-parent --pretty=format:%H $currentFilePath

            $oldFileContent = Get-Content $file -Raw

            # Validate swagger
            $results = Invoke-RestMethod -Uri $(validatorUrl) -Method Post -Headers $headers -Authentication Basic -Credential $cred -Body $oldFileContent
                
            $errors = $results | where {$_.Level -IN $swaggerErrorLevel, $swaggerCriticalLevel }
            $warnings = $results | where {$_.Level -EQ $swaggerWarningLevel}

            if ($errors) {
              $errorsTotal += $errors.Count
              $errors | foreach { Write-Host "##vso[task.logissue type=error;sourcepath=$file;code=$($_.ErrorCode);]$($_.Message) ValuePath: '$($_.ValuePath)' Value: '$($_.Value)'" }
              Write-Host "##vso[task.logissue type=error;sourcepath=$file;]Swagger file '$file' contains error(s)."
            } # If Swagger Error
            
            if ($warnings) {
              $warningsTotal += $warnings.Count
              $warnings | foreach { Write-Host "##vso[task.logissue type=warning;sourcepath=$file;code=$($_.ErrorCode);]$($_.Message) ValuePath: '$($_.ValuePath)' Value: '$($_.Value)'" }
            } # If Swagger Warnings

            # Breaking change dectection
            if ($previousCommitHash) {
              $oldFilePath = Join-Path ([System.IO.Path]::GetTempPath()) ((Split-Path $file -leaf) + '.tmp.json')

              git show "$($previousCommitHash):$($file)" > $oldFilePath

              if (Test-Path $oldFilePath) {
                $results = [Microsoft.PowerPlatform.ConnectorPlatform.BreakingChangeDetector.SwaggerBreakingChangeDetector]::FindDocumentBreakingChanges($oldFilePath, $currentFilePath)

                $errors = $results | where { $_.Level -EQ $bcdErrorLevel }
                $warnings = $results | where { $_.Level -EQ $bcdWarningLevel }

                if ($errors) {
                    $errorsTotal += $errors.Count
                    $errors | foreach { Write-Host "##vso[task.LogIssue type=error;]$($_.ValuePath): $($_.Message)" }
                } # If there are any errors

                if ($warnings) {
                    $warningsTotal += $warnings.Count
                    $warnings | foreach { Write-Host "##vso[task.LogIssue type=warning;]$($_.ValuePath): $($_.Message)" }
                } # If there are any warnings
                Remove-Item -Path $oldFilePath
              } # If old version of the swagger is available
            } # If previous commit exists perform breaking change validation

        } # If current file is a swagger file

      } # For each file

      [System.AppDomain]::CurrentDomain.remove_AssemblyResolve($onAssemblyResolve)

      if ($errorsTotal -gt 0) {
          Write-Host "##vso[task.complete result=Failed;]Errors encountered."    
          exit 1
      }
      elseif ($warningsTotal -gt 0) {
          Write-Host "##vso[task.complete result=SucceededWithIssues;]Warnings encountered."    
      }
      else {
          Write-Host "##vso[task.complete result=Succeeded;]No error or warnings encountered."    
      }
