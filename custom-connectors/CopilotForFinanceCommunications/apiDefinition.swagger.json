{
  "swagger": "2.0",
  "info": {
    "title": "Copilot for Finance / Customer communications",
    "version": "2024.06.20"
  },
  "host": "test.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/contacts": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "List of contacts",
        "description": "One of the parameters email or/and phone number must be provided. Parameters work together as 'OR' condition. For example: emails=['email1', 'email2'] phoneNumbers=['phone1','phone2'] retrieves all contacts with rather email1 or email2 or phone1 or phone2.",
        "operationId": "Contacts_list",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-copilotforfinace-api-version",
            "description": "Specifies the API version.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The language code is in BCP 47 format.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactInfoRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "required": [
                "data"
              ],
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Contact"
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contacts/create": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Creates contact",
        "description": "Creates contact.",
        "operationId": "Contacts_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-copilotforfinace-api-version",
            "description": "Specifies the API version.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The language code is in BCP 47 format.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactForUpdate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Creates the contact and returns the contact object.",
            "schema": {
              "$ref": "#/definitions/ContactForUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contacts/{contactId}": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates contact",
        "description": "Updates contact.",
        "operationId": "Contacts_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-copilotforfinace-api-version",
            "description": "Specifies the API version.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The language code is in BCP 47 format.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactForUpdate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customers": {
      "post": {
        "tags": [
          "Customers."
        ],
        "summary": "List of customers",
        "description": "The 'Customers' endpoint without customers ids specified returns list of all customers.",
        "operationId": "Customers_list",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-copilotforfinace-api-version",
            "description": "Specifies the API version.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "organizationCode",
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountNumber",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "industryName",
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The language code is in BCP 47 format.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Format for using the 'filter' is as follows: filter=contains(fieldName,'substring') or contains(fieldName2,'substring2) etc. Applicable fields: name, organizationCode, accountNumber, industryName.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "orderby",
            "description": "Format: orderby=fieldName:asc or orderby=fieldName:desc. Applicable for all fields.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "select",
            "description": "The 'select' parameter is used to retrieve only the specified fields from the collection. Format: select=id,name,accountNumber.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CustomerIds"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "required": [
                "data"
              ],
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Customer"
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customers/{customerId}/accountstatement": {
      "get": {
        "tags": [
          "Customers."
        ],
        "summary": "Returns the account statement for a given customer",
        "description": "Returns the account statement for a given customer. You could provide a custom file name for the document by setting the 'Content-Disposition' header. If there is no file name is provided, default file name would be assigned. The 'Content-Type' header should be set to 'application/pdf'.",
        "operationId": "Customers_accountStatement",
        "produces": [
          "application/pdf",
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-copilotforfinace-api-version",
            "description": "Specifies the API version.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The language code is in BCP 47 format.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "format": "binary",
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "enum": [
                  "application/pdf"
                ]
              },
              "Content-Disposition": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customers/{customerId}/activities": {
      "get": {
        "tags": [
          "Customers."
        ],
        "summary": "Customer related activities",
        "description": "Returns customer related activities.",
        "operationId": "Customers_activities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-copilotforfinace-api-version",
            "description": "Specifies the API version.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "title",
            "type": "string"
          },
          {
            "in": "query",
            "name": "type",
            "type": "string"
          },
          {
            "in": "query",
            "name": "text",
            "type": "string"
          },
          {
            "in": "query",
            "name": "timeStamp",
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The language code is in BCP 47 format.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Format for using the 'filter' is as follows: filter=contains(fieldName,'substring') or contains(fieldName2,'substring2) or filter=contains(fieldName,'substring') and contains(fieldName2,'substring2). Applicable for all fields.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "range",
            "description": "Format: range=fieldName:'value_min':'value_max' Dates are in UTC.\nApplicable to fields of type date or amount.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "orderby",
            "description": "Format: orderby=fieldName:asc or orderby=fieldName:desc. Applicable for all fields.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "required": [
                "data"
              ],
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CustomerActivity"
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customers/{customerId}/agedbalances": {
      "get": {
        "tags": [
          "Customers."
        ],
        "summary": "Returns aged balances for a given customer",
        "description": "Returns aged balances for a given customer.",
        "operationId": "Customers_agedBalances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-copilotforfinace-api-version",
            "description": "Specifies the API version.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The language code is in BCP 47 format.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "required": [
                "data"
              ],
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AgedBalance"
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customers/{customerId}/invoicedocuments": {
      "post": {
        "tags": [
          "Customers."
        ],
        "summary": "Returns invoice documents",
        "description": "Get invoice documents. If Request body is empty, it will return all the documents for the customer in zip archive. If Request body contains invoiceIds, it will return the documents for the specified customer and invoice ids in zip archive for multiple invoices and in pdf for a single invoice. The 'Content-Type' header should be set to 'application/pdf' or 'application/zip'. You could provide a custom file name for the document by setting the 'Content-Disposition' header. If there is no file name is provided, default file name would be assigned.",
        "operationId": "Customers_invoiceDocument",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/pdf",
          "application/zip",
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-copilotforfinace-api-version",
            "description": "Specifies the API version.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The language code is in BCP 47 format.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/InvoiceDocumentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "format": "binary",
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "enum": [
                  "application/pdf",
                  "application/zip"
                ]
              },
              "Content-Disposition": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customers/{customerId}/invoices": {
      "get": {
        "tags": [
          "Customers."
        ],
        "summary": "Returns list of invoices for a given customer",
        "description": "Returns invoices that are relevant for a collections coordinator: open, unpaid, and outstanding invoices.",
        "operationId": "Customers_invoices",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-copilotforfinace-api-version",
            "description": "Specifies the API version.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "status",
            "type": "string"
          },
          {
            "in": "query",
            "name": "transactionType",
            "type": "string"
          },
          {
            "in": "query",
            "name": "voucher",
            "type": "string"
          },
          {
            "in": "query",
            "name": "invoiceNumber",
            "type": "string"
          },
          {
            "in": "query",
            "name": "organizationCode",
            "type": "string"
          },
          {
            "in": "query",
            "name": "dueDate",
            "type": "string"
          },
          {
            "in": "query",
            "name": "transactionDate",
            "type": "string"
          },
          {
            "in": "query",
            "name": "transactionAmount",
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The language code is in BCP 47 format.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Format for using the 'filter' is as follows: filter=contains(fieldName,'substring') or contains(fieldName2,'substring2) or filter=contains(fieldName,'substring') and contains(fieldName2,'substring2). Applicable for all fields except the id.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "range",
            "description": "Format: range=fieldName:'value_min':'value_max' Dates are in UTC.\nApplicable to fields of type date or amount.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "orderby",
            "description": "Format: orderby=fieldName:asc or orderby=fieldName:desc. Applicable for all fields.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "select",
            "description": "Format: select=fieldName1,fieldName2,fieldName3.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "required": [
                "data"
              ],
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Invoice"
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invoices/statuses": {
      "get": {
        "tags": [
          "Outstanding invoices."
        ],
        "summary": "Returns list of statuses",
        "description": "List of all possible statuses for an invoice.",
        "operationId": "Invoices_listOfStatuses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-copilotforfinace-api-version",
            "description": "Specifies the API version.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The language code is in BCP 47 format.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "required": [
                "data"
              ],
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/StatusDefinition"
                  }
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/status": {
      "put": {
        "tags": [
          "Outstanding invoices."
        ],
        "summary": "Updates invoice status and promised to pay date",
        "description": "Updates invoice status and promised to pay date.",
        "operationId": "Invoices_updateStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-copilotforfinace-api-version",
            "description": "Specifies the API version.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "description": "The language code is in BCP 47 format.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceStatus"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "API version"
        ],
        "summary": "API version",
        "description": "Returns the latest supported version of the API. This value will be used in the x-copilotforfinance-api-version header for subsequent requests to ensure Copilot for Finance calls a supported version of your API. The version value can be find on the top of OpenAPI specification file. For example, 2024.06.20",
        "operationId": "Version_supportedVersion",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AdditionalParameters": {
      "type": "object",
      "properties": {
        "Pagination": {
          "$ref": "#/definitions/PaginationParameters"
        },
        "Filter": {
          "$ref": "#/definitions/Filter"
        },
        "Range": {
          "$ref": "#/definitions/Range"
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderBy"
        }
      }
    },
    "Address": {
      "required": [
        "street",
        "city",
        "country"
      ],
      "type": "object",
      "properties": {
        "street": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "AgedBalance": {
      "description": "The dates are in UTC format. Example: 2021-01-01T00:00:00Z. The amounts are in decimal format and are converted into user locale formats automatically on the frontend side.",
      "required": [
        "id",
        "name",
        "totalAmountDue",
        "agingDate",
        "agingPeriods"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        },
        "totalAmountDue": {
          "format": "decimal",
          "type": "number"
        },
        "agingDate": {
          "format": "date-time",
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "totalOverdueInvoices": {
          "type": "integer"
        },
        "agingPeriods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgingPeriod"
          }
        }
      }
    },
    "AgingPeriod": {
      "required": [
        "label",
        "amount"
      ],
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "amount": {
          "format": "decimal",
          "type": "number"
        }
      }
    },
    "Contact": {
      "required": [
        "id",
        "email",
        "firstName",
        "lastName",
        "customerId",
        "customerName"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "professionalTitle": {
          "type": "string"
        },
        "organizationCode": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "customerName": {
          "type": "string"
        },
        "primaryPhoneNumber": {
          "type": "string"
        }
      }
    },
    "ContactForUpdate": {
      "required": [
        "email",
        "firstName",
        "lastName",
        "customerId"
      ],
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "professionalTitle": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "primaryPhoneNumber": {
          "type": "string"
        }
      }
    },
    "ContactForUpdateResponse": {
      "required": [
        "id",
        "email",
        "firstName",
        "lastName",
        "customerId"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "professionalTitle": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "primaryPhoneNumber": {
          "type": "string"
        }
      }
    },
    "ContactInfoRequest": {
      "type": "object",
      "properties": {
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phoneNumbers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Customer": {
      "required": [
        "id",
        "name",
        "accountNumber"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organizationCode": {
          "type": "string"
        },
        "accountNumber": {
          "type": "string"
        },
        "industryName": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address"
        }
      }
    },
    "CustomerActivity": {
      "description": "The dates are in UTC format. Example: 2021-01-01T00:00:00Z. The amounts are in decimal format and are converted into user locale formats automatically on the frontend side.",
      "required": [
        "id",
        "title",
        "text"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "timeStamp": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CustomerIds": {
      "required": [
        "customerIds"
      ],
      "type": "object",
      "properties": {
        "customerIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Error": {
      "required": [
        "code",
        "message"
      ],
      "type": "object",
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Filter": {
      "description": "The 'filter' is designed to fetch records where a specified field contains a particular substring. The filter supports either 'or' or 'and' logical operators, but not both in the same filter. \n The format for using the 'filter' is as follows: filter=contains(fieldName,'substring') or contains(fieldName2,'substring2) or filter=contains(fieldName,'substring') and contains(fieldName2,'substring2). \n For example: \n 1. /customers?filter=contains(name,'Contoso') and contains(organizationcode,'US') retrieves all records where the customer name contains the 'Contoso' substring ans organization code contains 'US. \n 2. /customers?filter=contains(name,'Contoso') or contains(organizationcode,'contoso') retrieves all records where the customer name contains the 'Contoso' substring or organization code contains 'Contoso'.",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string"
        }
      }
    },
    "Invoice": {
      "description": "The dates are in UTC format. Example: 2021-01-01T00:00:00Z. The amounts are in decimal format and are converted into user locale formats automatically on the frontend side.",
      "required": [
        "id",
        "voucher",
        "transactionDate",
        "transactionAmount",
        "invoiceNumber",
        "dueDate",
        "currency",
        "transactionType",
        "hasDocument"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "voucher": {
          "type": "string"
        },
        "transactionDate": {
          "format": "date-time",
          "type": "string"
        },
        "transactionAmount": {
          "format": "decimal",
          "type": "number"
        },
        "invoiceNumber": {
          "type": "string"
        },
        "dueDate": {
          "format": "date-time",
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "transactionType": {
          "type": "string"
        },
        "hasDocument": {
          "type": "boolean"
        },
        "statusId": {
          "type": "string"
        },
        "statusName": {
          "type": "string"
        },
        "promiseToPayDate": {
          "format": "date-time",
          "type": "string"
        },
        "statusReason": {
          "type": "string"
        },
        "statusComment": {
          "type": "string"
        }
      }
    },
    "InvoiceDocumentRequest": {
      "required": [
        "invoiceIds"
      ],
      "type": "object",
      "properties": {
        "invoiceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InvoiceStatus": {
      "description": "The dates are in UTC format. Example: 2021-01-01T00:00:00Z. The amounts are in decimal format and are converted into user locale formats automatically on the frontend side.",
      "required": [
        "statusId",
        "statusName"
      ],
      "type": "object",
      "properties": {
        "statusId": {
          "type": "string"
        },
        "statusName": {
          "type": "string"
        },
        "promiseToPayDate": {
          "format": "date-time",
          "type": "string"
        },
        "statusReason": {
          "type": "string"
        },
        "statusComment": {
          "type": "string"
        }
      }
    },
    "OrderBy": {
      "description": "The orderby parameter is used to sort the results based on the specified field and sorting direction. The format for using the 'orderby' parameter is as follows: orderby=fieldName:asc or orderby=fieldName:desc. For example: /customers?orderby=transactionDate:asc sorts the results based on the transaction date field in ascending order.",
      "type": "object",
      "properties": {
        "orderby": {
          "type": "string"
        }
      }
    },
    "PaginationParameters": {
      "description": "The parameter 'top' defines the maximum number of resources to be retrieved from the collection. \nThe parameter 'skip' indicates the offset within the collection of the first resource to be returned.",
      "type": "object",
      "properties": {
        "top": {
          "format": "int32",
          "type": "integer"
        },
        "skip": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Range": {
      "description": "The 'range' filter is expected to retrieve records where the specified field is within the specified range. The format for using the 'range' filter is as follows: range=fieldName:'value_min':'value_max'. Applicable for all dates and amounts related fields. For example: /customers?range=totalOverdueInvoices:1:5 retrieves all records where the total overdue invoices field is more than 1 and less than 5.",
      "type": "object",
      "properties": {
        "range": {
          "type": "string"
        }
      }
    },
    "Select": {
      "description": "The 'select' parameter is used to retrieve only the specified fields from the collection. The format for using the 'select' parameter is as follows: select=fieldName1,fieldName2,fieldName3. For example: /customers?select=name,organizationCode retrieves only the name and organization code fields from the collection.",
      "type": "object",
      "properties": {
        "select": {
          "type": "string"
        }
      }
    },
    "StatusDefinition": {
      "required": [
        "id",
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Versions": {
      "enum": [
        "2024.06.20"
      ],
      "type": "string"
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {},
  "security": [],
  "tags": [
    {
      "name": "API version"
    },
    {
      "name": "Contacts"
    },
    {
      "name": "Customers."
    },
    {
      "name": "Outstanding invoices."
    }
  ]
}