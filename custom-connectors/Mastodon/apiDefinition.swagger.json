{
  "swagger": "2.0",
  "info": {
    "title": "Mastodon API",
    "description": "API for GNU Social-compatible microblogging server",
    "version": "1.0.0",
    "contact": {
      "name": "Mastodon API Team",
      "url": "https://github.com/tootsuite/mastodon"
    },
    "license": {
      "name": "AGPL",
      "url": "https://github.com/tootsuite/mastodon/blob/master/LICENSE"
    }
  },
  "host": "mastodon.example",
  "basePath": "/api/v1",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/timelines/public": {
      "get": {
        "operationId": "ViewPublicTimeline",
        "summary": "View public timeline",
        "description": "Get a view of the public timeline",
        "parameters": [
          {
            "name": "local",
            "type": "boolean",
            "in": "query",
            "description": "Return only local statuses? Defaults to false."
          },
          {
            "name": "remote",
            "type": "boolean",
            "in": "query",
            "description": "Return only remote statuses? Defaults to false."
          },
          {
            "name": "only_media",
            "type": "boolean",
            "in": "query",
            "description": "Return only statuses with media attachments? Defaults to false."
          },
          {
            "name": "max_id",
            "type": "string",
            "in": "query",
            "description": "Return results older than ID."
          },
          {
            "name": "since_id",
            "type": "string",
            "in": "query",
            "description": "Return results newer than ID."
          },
          {
            "name": "min_id",
            "type": "string",
            "in": "query",
            "description": "Return results immediately newer than ID."
          },
          {
            "name": "limit",
            "type": "integer",
            "in": "query",
            "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/timelines/tag/{hashtag}": {
      "get": {
        "operationId": "ViewHashtagTimeline",
        "summary": "View hashtag timeline",
        "description": "View public statuses containing the given hashtag.",
        "parameters": [
          {
            "name": "hashtag",
            "type": "string",
            "in": "path",
            "description": "The name of the hashtag (not including the",
            "required": true
          },
          {
            "name": "any",
            "type": "array",
            "in": "query",
            "description": "Return statuses that contain any of these additional tags.",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "all",
            "type": "array",
            "in": "query",
            "description": "Return statuses that contain all of these additional tags",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "none",
            "type": "array",
            "in": "query",
            "description": "Return statuses that contain none of these additional tags.",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "local",
            "type": "boolean",
            "in": "query",
            "description": "Return only local statuses? Defaults to false."
          },
          {
            "name": "remote",
            "type": "boolean",
            "in": "query",
            "description": "Return only remote statuses? Defaults to false."
          },
          {
            "name": "only_media",
            "type": "boolean",
            "in": "query",
            "description": "Return only statuses with media attachments? Defaults to false."
          },
          {
            "name": "max_id",
            "type": "string",
            "in": "query",
            "description": "Return results older than ID."
          },
          {
            "name": "since_id",
            "type": "string",
            "in": "query",
            "description": "Return results newer than ID."
          },
          {
            "name": "min_id",
            "type": "string",
            "in": "query",
            "description": "Return results immediately newer than ID."
          },
          {
            "name": "limit",
            "type": "integer",
            "in": "query",
            "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/timelines/home": {
      "get": {
        "operationId": "ViewHomeTimeline",
        "summary": "View home timeline",
        "description": "View statuses from followed users.",
        "parameters": [
          {
            "name": "max_id",
            "type": "string",
            "in": "query",
            "description": "Return results older than ID."
          },
          {
            "name": "since_id",
            "type": "string",
            "in": "query",
            "description": "Return results newer than ID."
          },
          {
            "name": "min_id",
            "type": "string",
            "in": "query",
            "description": "Return results immediately newer than ID."
          },
          {
            "name": "limit",
            "type": "integer",
            "in": "query",
            "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "206": {
            "description": "Partial content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/statuses": {
      "post": {
        "operationId": "PostNewStatus",
        "summary": "Post status",
        "description": "Publish a status with the given parameters.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "Status"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "description": "Represents error message",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "string",
          "description": "A textual description of the error"
        },
        "error_description": {
          "type": "string",
          "description": "A longer description of the error, mainly provided with the OAuth API."
        }
      }
    },
    "Status": {
      "description": "Status"
    },
    "Account": {
      "description": "Represents user account information.",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "The account id. (cast from an integer, but not guaranteed to be a number)",
          "type": "string"
        },
        "username": {
          "description": "The username of the account, not including domain.",
          "type": "string"
        },
        "acct": {
          "description": "The Webfinger account URI. Equal to username for local users, or username@domain for remote users.",
          "type": "string"
        },
        "url": {
          "description": "The location of the user\u2019s profile page.(URL)",
          "type": "string"
        },
        "display_name": {
          "description": "The profile\u2019s display name.",
          "type": "string"
        },
        "note": {
          "description": "The profile\u2019s bio or description. (HTML)",
          "type": "string"
        },
        "avatar": {
          "description": "An image icon that is shown next to statuses and in the profile. (URL)",
          "type": "string"
        },
        "avatar_static": {
          "description": "A static version of the avatar. Equal to avatar if its value is a static image; different if avatar is an animated GIF. (URL)",
          "type": "string"
        },
        "header": {
          "description": "An image banner that is shown above the profile and in profile cards. (URL)",
          "type": "string"
        },
        "header_static": {
          "description": "A static version of the header. Equal to header if its value is a static image; different if header is an animated GIF. (URL)",
          "type": "string"
        },
        "locked": {
          "description": "Whether the account manually approves follow requests.",
          "type": "boolean"
        },
        "fields": {
          "description": "Additional metadata attached to a profile as name-value pairs. Array of Field",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/Field"
            }
          }
        },
        "emojis": {
          "description": "Custom emoji entities to be used when rendering the profile. Array of CustomEmoji",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/CustomEmoji"
            }
          }
        },
        "bot": {
          "description": "Indicates that the account may perform automated actions, may not be monitored, or identifies as a robot.",
          "type": "boolean"
        },
        "group": {
          "description": "Indicates that the account represents a Group actor.",
          "type": "boolean"
        },
        "discoverable": {
          "description": "Whether the account has opted into discovery features such as the profile directory. NULLABLE",
          "type": "boolean"
        },
        "noindex": {
          "description": "Whether the local user has opted out of being indexed by search engines. NULLABLE",
          "type": "boolean"
        },
        "moved": {
          "description": "Indicates that the profile is currently inactive and that its user has moved to a new account. Account, or null if the profile is suspended. NULLABLE",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Account"
          }
        },
        "suspended": {
          "description": "An extra attribute returned only when an account is suspended.",
          "type": "boolean"
        },
        "limited": {
          "description": "An extra attribute returned only when an account is silenced. If true, indicates that the account should be hidden behind a warning screen.",
          "type": "boolean"
        },
        "created_at": {
          "description": "When the account was created. (ISO 8601 Datetime)",
          "type": "string",
          "format": "date-time"
        },
        "last_status_at": {
          "description": "When the most recent status was posted. (ISO 8601 Date), or null if no statuses NULLABLE",
          "type": "string",
          "format": "date"
        },
        "statuses_count": {
          "description": "How many statuses are attached to this account.",
          "type": "integer",
          "default": 0
        },
        "followers_count": {
          "description": "The reported followers of this profile.",
          "type": "integer",
          "default": 0
        },
        "following_count": {
          "description": "The reported follows of this profile.",
          "type": "integer",
          "default": 0
        }
      }
    },
    "Field": {
      "description": "Represents a field",
      "properties": {
        "name": {
          "description": "The key of a given field\u2019s key-value pair.",
          "type": "string"
        },
        "value": {
          "description": "The value associated with the name key. (HTML)",
          "type": "string"
        },
        "verified_at": {
          "description": "Timestamp of when the server verified a URL value for a rel=\u201cme\u201d link. NULLABLE (ISO 8601 Datetime) if value is a verified URL. Otherwise, null.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CustomEmoji": {
      "description": "Represents a emoji",
      "properties": {
        "shortcode": {
          "description": "The name of the custom emoji.",
          "type": "string"
        },
        "url": {
          "description": "A link to the custom emoji. (URL)",
          "type": "string"
        },
        "static_url": {
          "description": "A link to a static copy of the custom emoji. (URL)",
          "type": "string"
        },
        "visible_in_picker": {
          "description": "Whether this Emoji should be visible in the picker or unlisted.",
          "type": "boolean"
        },
        "category": {
          "description": "Used for sorting custom emoji in the picker.",
          "type": "string"
        }
      }
    }
  }
}