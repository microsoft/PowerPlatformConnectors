{
  "swagger": "2.0",
  "info": {
    "title": "NSF Data",
    "description": "NSF Data Connector provides access to any HCL Domino NSF database as well as IBM Domino NSF database (from version 9.0.1) for which Domino Access Services (DAS) are enabled. The Connector represents NSF databases, views, view entries, and documents in JSON format.",
    "version": "1.0",
    "contact": {
      "name": "Databoat AG",
      "url": "https://databoat.ch",
      "email": "nsf.data@databoat.ch"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://databoat.ch"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://databoat.ch/de/impressum-de/#privacy_statement"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Data;Collaboration"
    }
  ],
  "host": "none",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "responses": {},
  "securityDefinitions": {
    "basic_auth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basic_auth": []
    }
  ],
  "tags": [
    {
      "name": "database list",
      "description": "Read a list of databases."
    },
    {
      "name": "view list",
      "description": "Read a list of views and folders in a database."
    },
    {
      "name": "view design",
      "description": "Read the design of a view or folder."
    },
    {
      "name": "view entry list",
      "description": "Read a list of view or folder entries."
    },
    {
      "name": "folder",
      "description": "Update the contents of a folder."
    },
    {
      "name": "document",
      "description": "Create, read, update or delete a document."
    },
    {
      "name": "document list",
      "description": "Read a list of documents in a database."
    },
    {
      "name": "attachment",
      "description": "Create, read, update or delete an attachment."
    }
  ],
  "paths": {
    "/api/data": {
      "get": {
        "summary": "Gets a list of databases",
        "description": "Gets a list of databases",
        "operationId": "GetDatabaseList",
        "tags": [
          "database list"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/databaseListResponse"
            }
          }
        }
      }
    },
    "/{folder}/{database}/api/data/collections": {
      "get": {
        "summary": "Gets a list of views and folders in a database",
        "description": "Gets a list of views and folders in a database",
        "operationId": "GetViewList",
        "tags": [
          "view list"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/viewListResponse"
            }
          }
        }
      }
    },
    "/{folder}/{database}/api/data/collections/name/{viewName}/design": {
      "get": {
        "summary": "Gets information on the columns in a view or folder",
        "description": "Gets information on the columns in a view or folder",
        "operationId": "GetViewDesignByName",
        "tags": [
          "view design"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          },
          {
            "$ref": "#/parameters/viewNameParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/viewDesignResponse"
            }
          },
          "404": {
            "description": "The specified view wasn't found."
          }
        }
      }
    },
    "/{folder}/{database}/api/data/collections/unid/{viewUnid}/design": {
      "get": {
        "summary": "Gets information on the columns in a view or folder",
        "description": "Gets information on the columns in a view or folder",
        "operationId": "GetViewDesignByUnid",
        "tags": [
          "view design"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          },
          {
            "$ref": "#/parameters/viewUnidParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/viewDesignResponse"
            }
          },
          "404": {
            "description": "The specified view wasn't found."
          }
        }
      }
    },
    "/{folder}/{database}/api/data/collections/name/{viewName}": {
      "get": {
        "summary": "Gets a list of view entries by view name",
        "description": "Gets a list of view entries by view name",
        "operationId": "GetViewEntriesByName",
        "tags": [
          "view entry list"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          },
          {
            "$ref": "#/parameters/viewNameParam"
          },
          {
            "$ref": "#/parameters/startParam"
          },
          {
            "$ref": "#/parameters/countParam"
          },
          {
            "$ref": "#/parameters/pageParam"
          },
          {
            "$ref": "#/parameters/psParam"
          },
          {
            "$ref": "#/parameters/entrycountParam"
          },
          {
            "$ref": "#/parameters/searchParam"
          },
          {
            "$ref": "#/parameters/searchmaxdocsParam"
          },
          {
            "$ref": "#/parameters/sortcolumnParam"
          },
          {
            "$ref": "#/parameters/sortorderParam"
          },
          {
            "$ref": "#/parameters/startkeysParam"
          },
          {
            "$ref": "#/parameters/keysParam"
          },
          {
            "$ref": "#/parameters/keysexactmatchParam"
          },
          {
            "$ref": "#/parameters/expandlevelParam"
          },
          {
            "$ref": "#/parameters/categoryParam"
          },
          {
            "$ref": "#/parameters/parentidParam"
          },
          {
            "$ref": "#/parameters/systemcolumnsParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/viewEntryListResponse"
            },
            "headers": {
              "Content-Range": {
                "description": "Range and number of items in the response. For example, `items 0-9/29`",
                "type": "string"
              }
            }
          },
          "404": {
            "description": "The specified view wasn't found."
          }
        }
      },
      "put": {
        "summary": "Updates the contents of a folder by folder name",
        "description": "Updates the contents of a folder by folder name",
        "operationId": "UpdateFolderContentByName",
        "tags": [
          "folder"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          },
          {
            "$ref": "#/parameters/folderNameParam"
          },
          {
            "name": "operations",
            "in": "body",
            "description": "Documents to be added and/or removed.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/folderOperations"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request.  For example, the server was unable to parse the JSON input."
          }
        }
      }
    },
    "/{folder}/{database}/api/data/collections/unid/{viewUnid}": {
      "get": {
        "summary": "Gets a list of view entries by view UNID",
        "description": "Gets a list of view entries by view UNID",
        "operationId": "GetViewEntriesByUnid",
        "tags": [
          "view entry list"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          },
          {
            "$ref": "#/parameters/viewUnidParam"
          },
          {
            "$ref": "#/parameters/startParam"
          },
          {
            "$ref": "#/parameters/countParam"
          },
          {
            "$ref": "#/parameters/pageParam"
          },
          {
            "$ref": "#/parameters/psParam"
          },
          {
            "$ref": "#/parameters/entrycountParam"
          },
          {
            "$ref": "#/parameters/searchParam"
          },
          {
            "$ref": "#/parameters/searchmaxdocsParam"
          },
          {
            "$ref": "#/parameters/sortcolumnParam"
          },
          {
            "$ref": "#/parameters/sortorderParam"
          },
          {
            "$ref": "#/parameters/startkeysParam"
          },
          {
            "$ref": "#/parameters/keysParam"
          },
          {
            "$ref": "#/parameters/keysexactmatchParam"
          },
          {
            "$ref": "#/parameters/expandlevelParam"
          },
          {
            "$ref": "#/parameters/categoryParam"
          },
          {
            "$ref": "#/parameters/parentidParam"
          },
          {
            "$ref": "#/parameters/systemcolumnsParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/viewEntryListResponse"
            },
            "headers": {
              "Content-Range": {
                "description": "Range and number of items in the response. For example, `items 0-9/29`",
                "type": "string"
              }
            }
          },
          "404": {
            "description": "The specified view wasn't found."
          }
        }
      },
      "put": {
        "summary": "Updates the contents of a folder by folder UNID",
        "description": "Updates the contents of a folder by folder UNID",
        "operationId": "UpdateFolderContentByUnid",
        "tags": [
          "folder"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          },
          {
            "$ref": "#/parameters/folderUnidParam"
          },
          {
            "name": "operations",
            "in": "body",
            "description": "Documents to be added and/or removed.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/folderOperations"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request.  For example, the server was unable to parse the JSON input."
          }
        }
      }
    },
    "/{folder}/{database}/api/data/documents": {
      "get": {
        "summary": "Gets a list of documents",
        "operationId": "GetDocuments",
        "description": "If you don't specify any query parameters, the response includes all the documents in the database.To limit the number of documents returned, use the optional `since` or `search` parameters.",
        "tags": [
          "document list"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          },
          {
            "$ref": "#/parameters/searchParam"
          },
          {
            "$ref": "#/parameters/searchmaxdocsParam"
          },
          {
            "$ref": "#/parameters/sinceParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/documentListResponse"
            }
          }
        }
      },
      "post": {
        "summary": "Creates a new document",
        "description": "Creates a new document",
        "operationId": "CreateDocument",
        "tags": [
          "document"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          },
          {
            "$ref": "#/parameters/formParam"
          },
          {
            "$ref": "#/parameters/computeParam"
          },
          {
            "$ref": "#/parameters/responseParentidParam"
          },
          {
            "name": "document",
            "in": "body",
            "description": "The document to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/document"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "headers": {
              "Location": {
                "description": "The URL of the new document",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad request. For example, the server couldn't parse the JSON input. "
          }
        }
      }
    },
    "/{folder}/{database}/api/data/documents/unid/{docUnid}": {
      "get": {
        "summary": "Reads a document",
        "description": "Reads a document",
        "operationId": "GetDocument",
        "tags": [
          "document"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          },
          {
            "$ref": "#/parameters/docUnidParam"
          },
          {
            "$ref": "#/parameters/hiddenParam"
          },
          {
            "$ref": "#/parameters/multipartParam"
          },
          {
            "$ref": "#/parameters/strongtypeParam"
          },
          {
            "$ref": "#/parameters/lowerCaseFieldsParam"
          },
          {
            "$ref": "#/parameters/fieldsParam"
          },
          {
            "$ref": "#/parameters/markReadParam"
          },
          {
            "$ref": "#/parameters/attachmentLinksParam"
          },
          {
            "$ref": "#/parameters/ifModifiedSinceParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/document"
            },
            "headers": {
              "Last-Modified": {
                "description": "Date and time in RFC 1123 format when this document was last modified. ",
                "type": "string"
              }
            }
          },
          "304": {
            "description": "The document hasn't been modified since the date in the request's `If-Modified-Since` header. "
          },
          "404": {
            "description": "The specified document wasn't found."
          }
        }
      },
      "delete": {
        "summary": "Deletes a document",
        "description": "Deletes a document",
        "operationId": "DeleteDocument",
        "tags": [
          "document"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          },
          {
            "$ref": "#/parameters/docUnidParam"
          },
          {
            "$ref": "#/parameters/ifUnmodifiedSinceParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "404": {
            "description": "The specified document wasn't found."
          },
          "412": {
            "description": "The document has been modified since the date specified by the `If-Unmodified-Since` header. "
          }
        }
      },
      "put": {
        "summary": "Replaces all items in a document",
        "description": "Replaces all items in a document",
        "operationId": "UpdateDocument",
        "tags": [
          "document"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          },
          {
            "$ref": "#/parameters/docUnidParam"
          },
          {
            "$ref": "#/parameters/formParam"
          },
          {
            "$ref": "#/parameters/computeParam"
          },
          {
            "$ref": "#/parameters/ifUnmodifiedSinceParam"
          },
          {
            "name": "document",
            "in": "body",
            "description": "The document properties to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request. For example, the server couldn't parse the JSON input. "
          },
          "404": {
            "description": "The specified document wasn't found."
          },
          "412": {
            "description": "Precondition failed. This status code is returned only if  the `If-Unmodified-Since` header is included in the request and the document has been modified since the specified date. "
          }
        }
      },
      "patch": {
        "summary": "Updates selected items in a document",
        "description": "Updates selected items in a document",
        "operationId": "UpdateDocumentItems",
        "tags": [
          "document"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          },
          {
            "$ref": "#/parameters/docUnidParam"
          },
          {
            "$ref": "#/parameters/formParam"
          },
          {
            "$ref": "#/parameters/computeParam"
          },
          {
            "$ref": "#/parameters/ifUnmodifiedSinceParam"
          },
          {
            "name": "document",
            "in": "body",
            "description": "The document properties to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request. For example, the server couldn't parse the JSON input. "
          },
          "404": {
            "description": "The specified document wasn't found."
          },
          "412": {
            "description": "Precondition failed. This status code is returned only if  the `If-Unmodified-Since` header is included in the request and the document has been modified since the specified date. "
          }
        }
      }
    },
    "/{folder}/{database}/api/data/documents/unid/{docUnid}/{itemName}/{fileName}": {
      "get": {
        "summary": "Reads an attachment",
        "description": "Reads an attachment",
        "operationId": "GetAttachment",
        "tags": [
          "attachment"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          },
          {
            "$ref": "#/parameters/docUnidParam"
          },
          {
            "$ref": "#/parameters/itemNameParam"
          },
          {
            "$ref": "#/parameters/fileNameParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      },
      "delete": {
        "summary": "Deletes an attachment",
        "description": "Deletes an attachment",
        "operationId": "DeleteAttachment",
        "tags": [
          "attachment"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/folderParam"
          },
          {
            "$ref": "#/parameters/databaseParam"
          },
          {
            "$ref": "#/parameters/docUnidParam"
          },
          {
            "$ref": "#/parameters/itemNameParam"
          },
          {
            "$ref": "#/parameters/fileNameParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    }
  },
  "definitions": {
    "link": {
      "type": "object",
      "properties": {
        "rel": {
          "type": "string",
          "description": "Relationship to this resource."
        },
        "href": {
          "type": "string",
          "description": "URL to linked resource."
        }
      }
    },
    "database": {
      "type": "object",
      "properties": {
        "@title": {
          "description": "Title of the database.",
          "type": "string"
        },
        "@filepath": {
          "description": "File path of the database relative to the Domino data directory.",
          "type": "string"
        },
        "@replicaid": {
          "description": "Replica ID of the database.",
          "type": "string"
        },
        "@template": {
          "description": "File name of the design template of the database, or an empty string if the database does not have a design template. ",
          "type": "string"
        },
        "@href": {
          "description": "The URL of the view list resource for the database.",
          "type": "string"
        }
      }
    },
    "databaseListResponse": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/database"
      }
    },
    "view": {
      "type": "object",
      "properties": {
        "@title": {
          "description": "Title of the view or folder.",
          "type": "string"
        },
        "@folder": {
          "description": "`false` for a view, `true` for a folder. ",
          "type": "boolean"
        },
        "@private": {
          "description": "`false` for shared, `true` for private. ",
          "type": "boolean"
        },
        "@modified": {
          "description": "Last modification date and time for the view or folder. ",
          "type": "string"
        },
        "@unid": {
          "description": "Universal ID of the view or folder.",
          "type": "string"
        },
        "@href": {
          "description": "The URL of the corresponding view entry list resource.",
          "type": "string"
        }
      }
    },
    "viewListResponse": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/view"
      }
    },
    "viewEntry": {
      "type": "object",
      "properties": {
        "@entryid": {
          "description": "Position of the entry in the view or folder and the universal ID of any associated document. ",
          "type": "string"
        },
        "@noteid": {
          "description": "The note ID of the document associated with the entry, or an empty string if the entry is a category or total (systemcolumns bit 0x0001). ",
          "type": "string"
        },
        "@unid": {
          "description": "The universal ID of the document associated with the entry,  or an empty string if the entry is a category or total (systemcolumns bit 0x0002). ",
          "type": "string"
        },
        "@position": {
          "description": "Position of the entry in the view or folder (systemcolumns bit 0x0004). ",
          "type": "string"
        },
        "@read": {
          "description": "`true` if the entry is marked read for the user (systemcolumns bit 0x0008). ",
          "type": "boolean"
        },
        "@siblings": {
          "description": "The number of siblings of the entry (systemcolumns bit 0x0010). ",
          "type": "integer",
          "format": "int32"
        },
        "@descendants": {
          "description": "The number of descendants of the entry (systemcolumns bit 0x0020). ",
          "type": "integer"
        },
        "@children": {
          "description": "The number of children of the entry (systemcolumns bit 0x0040). ",
          "type": "integer"
        },
        "@indent": {
          "description": "The indent level of the entry (systemcolumns bit 0x0080). ",
          "type": "integer"
        },
        "@form": {
          "description": "The form upon which the document is based (systemcolumns bit 0x0100). ",
          "type": "string"
        },
        "@category": {
          "description": "`true` if the entry is a category (systemcolumns bit 0x0200). ",
          "type": "boolean"
        },
        "@response": {
          "description": "`true` if the entry is a response (systemcolumns bit 0x0400). ",
          "type": "boolean"
        },
        "@href": {
          "description": "URL for the entry (systemcolumns bit 0x0800). ",
          "type": "string"
        },
        "@link": {
          "$ref": "#/definitions/link"
        },
        "@score": {
          "type": "integer",
          "description": "The search score if this entry is in a search response (systemcolumns bit 0x2000). "
        }
      },
      "additionalProperties": {}
    },
    "viewEntryListResponse": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/viewEntry"
      }
    },
    "document": {
      "type": "object",
      "properties": {
        "@created": {
          "type": "string",
          "description": "The date the document was created."
        },
        "@modified": {
          "type": "string",
          "description": "The last modification date of the document."
        },
        "@unid": {
          "type": "string",
          "description": "The universal ID of the document."
        },
        "@noteid": {
          "type": "string",
          "description": "The note ID of the document."
        },
        "@href": {
          "type": "string",
          "description": "The URL of the Document resource."
        },
        "@form": {
          "type": "string",
          "description": "The name of the form used to create the document."
        }
      },
      "additionalProperties": {}
    },
    "viewColumnDesign": {
      "type": "object",
      "properties": {
        "@columnnumber": {
          "description": "Position of the column in the view or folder, where 1 is the first column. ",
          "type": "integer"
        },
        "@name": {
          "description": "The name of the column. ",
          "type": "string"
        },
        "@title": {
          "description": "The title of the column. ",
          "type": "string"
        },
        "@width": {
          "description": "The width of the column. ",
          "type": "integer",
          "format": "int32"
        },
        "@alignment": {
          "description": "The alignment of the column. ",
          "type": "integer",
          "format": "int32"
        },
        "@hidden": {
          "description": "`true` if the column is hidden. ",
          "type": "boolean"
        },
        "@response": {
          "description": "`true` if the column is for responses. ",
          "type": "boolean"
        },
        "@twistie": {
          "description": "`true` if the column is a twistie. ",
          "type": "boolean"
        },
        "@field": {
          "description": "`true` if the column is a field. ",
          "type": "boolean"
        },
        "@category": {
          "description": "`true` if the column is a category. ",
          "type": "boolean"
        }
      }
    },
    "viewDesignResponse": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/viewColumnDesign"
      }
    },
    "folderOperations": {
      "type": "object",
      "properties": {
        "add": {
          "type": "array",
          "description": "Array of UNIDs of documents to add to the folder.",
          "items": {
            "type": "string"
          }
        },
        "remove": {
          "type": "array",
          "description": "Array of UNIDs of documents to remove from the folder.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "documentListEntry": {
      "type": "object",
      "properties": {
        "@modified": {
          "type": "string",
          "description": "The last modification date of the document."
        },
        "@unid": {
          "type": "string",
          "description": "The universal ID of the document."
        },
        "@href": {
          "type": "string",
          "description": "The URL of the Document resource."
        },
        "@score": {
          "type": "integer",
          "description": "The search score if this entry is in a search response."
        }
      }
    },
    "documentListResponse": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/documentListEntry"
      }
    }
  },
  "parameters": {
    "folderParam": {
      "name": "folder",
      "in": "path",
      "description": "Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself. ",
      "x-ms-summary": "Database folder",
      "x-ms-url-encoding": "single",
      "type": "string",
      "required": true
    },
    "databaseParam": {
      "name": "database",
      "in": "path",
      "description": "Database file name.",
      "x-ms-summary": "Database file name",
      "x-ms-url-encoding": "single",
      "type": "string",
      "required": true
    },
    "viewNameParam": {
      "name": "viewName",
      "in": "path",
      "description": "Name of a view or folder in the database.",
      "x-ms-summary": "View name",
      "x-ms-url-encoding": "single",
      "type": "string",
      "required": true
    },
    "viewUnidParam": {
      "name": "viewUnid",
      "in": "path",
      "description": "Universal ID of a view or folder in the database.",
      "x-ms-summary": "View Universal ID",
      "x-ms-url-encoding": "single",
      "type": "string",
      "required": true
    },
    "folderNameParam": {
      "name": "viewName",
      "in": "path",
      "description": "Name of a folder in the database.",
      "x-ms-summary": "Folder name",
      "x-ms-url-encoding": "single",
      "type": "string",
      "required": true
    },
    "folderUnidParam": {
      "name": "viewUnid",
      "in": "path",
      "description": "Universal ID of a folder in the database.",
      "x-ms-summary": "Folder Universal ID",
      "x-ms-url-encoding": "single",
      "type": "string",
      "required": true
    },
    "startParam": {
      "name": "start",
      "in": "query",
      "description": "Specifies the starting entry. Defaults to 0 (the first entry). ",
      "x-ms-summary": "Starting entry",
      "type": "integer",
      "required": false
    },
    "countParam": {
      "name": "count",
      "in": "query",
      "description": "Specifies the number of entries to return. Defaults to 10. Note: Use `start` and `count` together, or use `ps` and  `page` together. ",
      "x-ms-summary": "Number of entries",
      "type": "integer",
      "required": false
    },
    "pageParam": {
      "name": "page",
      "in": "query",
      "description": "Page number. The API returns entries based on a multiple of this parameter and the page size parameter (`ps`). ",
      "x-ms-summary": "Page number",
      "type": "integer",
      "required": false
    },
    "psParam": {
      "name": "ps",
      "in": "query",
      "description": "Page size or the number of entries to return. ",
      "x-ms-summary": "Page size",
      "type": "integer",
      "required": false
    },
    "entrycountParam": {
      "name": "entrycount",
      "in": "query",
      "description": "When `false`, disable the output of the `Content-Range` header as a performance optimization. The default value is `true`. ",
      "x-ms-summary": "Entry count",
      "type": "boolean",
      "required": false
    },
    "searchParam": {
      "name": "search",
      "in": "query",
      "description": "Returns only documents that match a full-text query. An error occurs if the database is not full-text indexed. ",
      "x-ms-summary": "Full-text query",
      "type": "string",
      "required": false
    },
    "searchmaxdocsParam": {
      "name": "searchmaxdocs",
      "in": "query",
      "description": "Limits the number of documents returned by a full-text search. ",
      "x-ms-summary": "Full-text query limit",
      "type": "integer",
      "required": false
    },
    "sortcolumnParam": {
      "name": "sortcolumn",
      "in": "query",
      "description": "Returns entries sorted on a column. If the column is not sorted by design or does not exist, this parameter has no effect. ",
      "x-ms-summary": "Entries sorted on a column",
      "type": "string",
      "required": false
    },
    "sortorderParam": {
      "name": "sortorder",
      "in": "query",
      "description": "Specifies the sort order. The parameter value should be either `ascending` or `descending`. Pair this parameter with `sortcolumn`. ",
      "x-ms-summary": "Sorting order",
      "type": "string",
      "enum": [
        "ascending",
        "descending"
      ],
      "required": false
    },
    "startkeysParam": {
      "name": "startkeys",
      "in": "query",
      "description": "Returns sorted entries starting at a specified entry. Pair this parameter with sortcolumn. Example: `?sortcolumn=Title&sortorder=ascending&startkeys=Document0020` ",
      "x-ms-summary": "Starting keys",
      "type": "string",
      "required": false
    },
    "keysParam": {
      "name": "keys",
      "in": "query",
      "description": "Returns entries whose initial characters match keys. Pair this parameter with sortcolumn. Example: `?sortcolumn=Title&sortorder=ascending&keys=Document001` ",
      "x-ms-summary": "Starting keys",
      "type": "string",
      "required": false
    },
    "keysexactmatchParam": {
      "name": "keysexactmatch",
      "in": "query",
      "description": "Returns entries that match keys exactly. Pair this parameter with keys. Example: `?sortcolumn=Title&sortorder=ascending&keys=Document001&keysexactmatch=true` ",
      "x-ms-summary": "Exact keys match",
      "type": "boolean",
      "required": false
    },
    "expandlevelParam": {
      "name": "expandlevel",
      "in": "query",
      "description": "Returns only entries at a specified indent level or higher. ",
      "x-ms-summary": "Expand level",
      "type": "integer",
      "required": false
    },
    "categoryParam": {
      "name": "category",
      "in": "query",
      "description": "Returns only entries in a specified category. ",
      "x-ms-summary": "Category",
      "type": "string",
      "required": false
    },
    "parentidParam": {
      "name": "parentid",
      "in": "query",
      "description": "Returns only entries that are descendants of the specified entry UNID. Example: `parentid=9B8F4A02A5F5254E852578950064EC03` ",
      "x-ms-summary": "Parent Universal ID",
      "type": "string",
      "required": false
    },
    "systemcolumnsParam": {
      "name": "systemcolumns",
      "in": "query",
      "description": "Limits system data to `@entryid` plus a bit mask formed by adding bit  values from the response properties table. Use hexadecimal or decimal.  For example, `systemcolumns=0x80a` returns only `@entryid`, `@unid`,  `@read`, and `@href`. In decimal format, `systemcolumns=2058` has the  same effect. ",
      "x-ms-summary": "System columns",
      "type": "integer",
      "required": false
    },
    "docUnidParam": {
      "name": "docUnid",
      "in": "path",
      "description": "Universal ID of the document.",
      "x-ms-summary": "Document Universal ID",
      "x-ms-url-encoding": "single",
      "type": "string",
      "required": true
    },
    "formParam": {
      "name": "form",
      "in": "query",
      "description": "Associates a database form with the document. ",
      "x-ms-summary": "Form",
      "type": "string",
      "required": false
    },
    "computeParam": {
      "name": "computewithform",
      "in": "query",
      "description": "When `true`, runs the associated form formulas against the request data before posting the data. You must identify the form. ",
      "x-ms-summary": "Compute with form",
      "type": "boolean",
      "required": false
    },
    "hiddenParam": {
      "name": "hidden",
      "in": "query",
      "description": "When `true`, emits hidden properties.  Hidden properties have names beginning with `$`, for example, `\"$UpdatedBy\":\"CN=Admin/O=Your Org\"`. ",
      "x-ms-summary": "Hidden properties",
      "type": "boolean",
      "required": false
    },
    "multipartParam": {
      "name": "multipart",
      "in": "query",
      "description": "When `false`, formats rich text as a single HTML part rather than multipart. The default value is `true`. ",
      "x-ms-summary": "Enable Multipart format",
      "type": "boolean",
      "required": false
    },
    "strongtypeParam": {
      "name": "strongtype",
      "in": "query",
      "description": "When `true`, displays date-time items as objects with type and data elements. See the examples. Rich text items always use strongtype format. ",
      "x-ms-summary": "Date-time as objects",
      "type": "boolean",
      "required": false
    },
    "ifUnmodifiedSinceParam": {
      "name": "If-Unmodified-Since",
      "in": "header",
      "description": "Date and time in RFC 1123 time format (for example,  `Tue, 23 Aug 2011 21:35:18 GMT`) as previously returned in the  `Last-Modified` response header of a GET for the same document. the operation succeeds only if the document has not been modified since the specified date. ",
      "x-ms-summary": "Unmodified since RFC 1123",
      "x-ms-url-encoding": "single",
      "type": "string",
      "required": false
    },
    "ifModifiedSinceParam": {
      "name": "If-Modified-Since",
      "in": "header",
      "description": "Date and time in RFC 1123 time format (for example,  `Tue, 23 Aug 2011 21:35:18 GMT`) as previously returned in the  `Last-Modified` response header of a GET for the same document. the operation succeeds only if the document has been modified since the specified date. ",
      "x-ms-summary": "Modified since RFC 1123",
      "x-ms-url-encoding": "single",
      "type": "string",
      "required": false
    },
    "responseParentidParam": {
      "name": "parentid",
      "in": "query",
      "description": "Adds the document as a response to the document specified by the parent UNID. ",
      "x-ms-summary": "Reponse parent Universal ID",
      "type": "string",
      "required": false
    },
    "sinceParam": {
      "name": "since",
      "in": "query",
      "description": "Returns only documents modified since a specified time. Specify the time in ISO 8601 format.  For example, `2011-08-21T20:21:00Z`. ",
      "x-ms-summary": "Reponse parent Universal ID",
      "type": "string",
      "required": false
    },
    "fieldsParam": {
      "name": "fields",
      "in": "query",
      "description": "Specifies the list of fields expected in the response.  For example, `fields=FirstName,LastName` limits the JSON response to items matching those field names.  If the document includes items named `EMail` and  `Photo`, they are not included in the response.  Use this parameter to limit the size of the response. ",
      "x-ms-summary": "Field list",
      "type": "string",
      "required": false
    },
    "lowerCaseFieldsParam": {
      "name": "lowercasefields",
      "in": "query",
      "description": "When `true`, the reponse property names are all lower case. For example, a document item called `FirstName` is represented as `firstname` in the JSON response.  This parameter can help resolve issues caused by inconsistent naming of items across documents  (`FirstName` in one document and `FIRSTNAME` in another.) ",
      "x-ms-summary": "Lower case fields",
      "type": "boolean",
      "required": false
    },
    "markReadParam": {
      "name": "markread",
      "in": "query",
      "description": "When `false`, the document is not marked read for the authenticated user.  When `true`, the document is marked read.  When this parameter is omitted, the default value is `true`. ",
      "x-ms-summary": "Mark as read",
      "type": "boolean",
      "required": false
    },
    "attachmentLinksParam": {
      "name": "attachmentlinks",
      "in": "query",
      "description": "When `true`, the response includes a link to each attachment instead of the attachment data itself.  You can access the attachment as a separate resource.  This parameter (`attachmentlinks=true`) is mutually exclusive with `multipart=false`. ",
      "x-ms-summary": "Attachment link",
      "type": "boolean",
      "required": false
    },
    "itemNameParam": {
      "name": "itemName",
      "in": "path",
      "description": "Name of the item associated with the attachment.",
      "x-ms-summary": "Attachment item name",
      "x-ms-url-encoding": "single",
      "type": "string",
      "required": true
    },
    "fileNameParam": {
      "name": "fileName",
      "in": "path",
      "description": "Attachment file name.",
      "x-ms-summary": "Attachment file name",
      "x-ms-url-encoding": "single",
      "type": "string",
      "required": true
    }
  }
}